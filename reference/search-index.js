antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component","keyword"],"fieldVectors":[["title/1",[0,24.429,1,24.064,2,34.607,3,38.137]],["name/1",[4,0.838]],["text/1",[0,4.754,1,4.683,2,5.752,3,6.339,5,3.557,6,4.04,7,6.018,8,4.905,9,4.657,10,5.599,11,11.903,12,11.903,13,5.327,14,4.569,15,8.143]],["component/1",[5,0.286]],["keyword/1",[]],["title/2-1",[16,71.255]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["keyword/2-1",[]],["title/2",[17,76.436]],["name/2",[16,0.587,18,0.52]],["text/2",[0,4.162,1,4.1,5,2.739,6,4.141,8,2.774,13,3.527,14,4.118,16,5.22,17,5.599,19,5.3,20,5.636,21,5.132,22,7.623,23,4.934,24,6.187,25,7.623,26,6.324,27,8.079,28,5.22,29,3.063,30,5.859,31,3.167,32,5.599,33,5.859,34,9.606,35,7.976,36,8.449,37,7.976,38,8.449,39,8.449,40,10.787,41,7.976,42,8.449,43,8.449,44,4.323,45,5.072,46,3.125,47,5.599,48,6.733,49,6.206,50,6.206,51,6.206,52,4.198,53,6.206,54,9.166,55,6.733,56,6.733,57,6.733,58,6.733,59,6.733,60,6.206,61,6.206,62,6.206,63,3.384,64,6.206,65,6.733,66,6.733,67,6.206,68,6.206,69,6.733,70,6.733,71,6.206,72,6.206,73,6.206,74,5.392,75,6.733,76,6.733,77,5.859,78,6.206,79,4.725,80,6.206,81,6.733,82,6.733,83,6.733,84,6.733,85,8.449,86,6.206,87,6.206,88,6.206,89,6.206,90,6.206,91,6.206,92,6.206,93,6.733,94,6.733,95,6.733,96,6.733,97,6.733,98,6.733,99,6.206,100,6.206,101,6.206,102,6.206,103,6.206,104,6.206,105,6.206,106,6.733,107,6.733,108,6.733,109,6.733,110,6.206,111,6.206,112,6.206,113,5.859,114,6.206,115,5.859,116,6.206,117,6.206,118,6.206,119,5.599,120,6.206,121,6.206,122,6.206,123,6.206,124,6.206,125,6.206,126,6.733,127,6.733,128,5.859,129,6.206,130,6.206,131,6.733,132,6.206,133,6.206,134,5.599,135,6.206,136,4.631,137,4.323]],["component/2",[5,0.286]],["keyword/2",[]],["title/3-1",[8,25.206,10,28.775,13,32.049,14,27.486]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["keyword/3-1",[]],["title/3",[0,21.979,1,21.65,7,32.575,138,11.371,139,21.334]],["name/3",[4,0.448,18,0.52]],["text/3",[0,4.15,1,4.088,5,3.602,6,4.79,8,4.282,10,4.888,13,5.444,14,5.417,19,6.009,29,3.473,140,9.578,141,7.452,142,4.529]],["component/3",[5,0.286]],["keyword/3",[]],["title/4",[143,73.608]],["name/4",[18,0.52,143,0.606]],["text/4",[0,3.51,1,3.556,5,3.315,6,2.405,8,0.641,10,3.527,13,0.815,14,3.538,19,5.083,20,3.336,21,1.571,22,1.294,23,0.837,24,1.05,25,1.294,26,0.944,27,2.176,29,3.816,30,3.337,31,4.005,44,0.999,46,1.78,63,5.034,74,1.246,138,1.697,139,2.346,141,9.332,142,1.223,143,5.284,144,2.818,145,6.52,146,4.114,147,1.458,148,2.176,149,2.794,150,2.061,151,2.379,152,1.497,153,2.115,154,1.571,155,3.905,156,3.537,157,3.774,158,3.488,159,3.106,160,2.816,161,3.868,162,3.19,163,2.973,164,3.072,165,3.072,166,3.072,167,2.973,168,2.334,169,3.787,170,3.19,171,4.512,172,4.693,173,4.721,174,3.072,175,4.721,176,3.905,177,2.973,178,3.367,179,2.889,180,3.24,181,4.328,182,1.588,183,1.458,184,4.693,185,5.543,186,5.334,187,2.807,188,3.48,189,1.967,190,0.845,191,0.999,192,1.294,193,3.329,194,2.27,195,3.983,196,0.88,197,1.246,198,1.092,199,1.032,200,2.807,201,4.696,202,2.334,203,1.775,204,2.685,205,2.013,206,2.36,207,2.654,208,1.97,209,1.895,210,1.775,211,2.061,212,1.556,213,1.33,214,1.484,215,2.176,216,1.032,217,4.696,218,1.682,219,1.556,220,1.682,221,3.925,222,1.556,223,4.095,224,2.463,225,0.89,226,3.084,227,1.434,228,2.046,229,1.354,230,1.294,231,4.148,232,2.27,233,1.422,234,1.115,235,2.218,236,1.246,237,4.057,238,1.434,239,1.682,240,4.253,241,0.957,242,1.172,243,2.645,244,1.682,245,1.623,246,3.831,247,2.485,248,3.682,249,2.218,250,2.469,251,1.354,252,1.97,253,1.97,254,1.97,255,1.556,256,1.605,257,1.605,258,4.445,259,1.605,260,3.23,261,2.794,262,1.661,263,0.732,264,2.065,265,1.726,266,1.434,267,3.383,268,0.984,269,1.556,270,1.556,271,1.556,272,2.665,273,0.88,274,1.354,275,1.556,276,8.192,277,2.814,278,2.779,279,3.925,280,0.984,281,1.05,282,2.243,283,2.218,284,2.686,285,0.97,286,3.865,287,1.556,288,1.206,289,2.013,290,4.409,291,1.884,292,1.07,293,2.248,294,2.084,295,1.434,296,0.88,297,3.673,298,2.747,299,0.871,300,2.248,301,1.97,302,1.895,303,1.956,304,1.354,305,2.176,306,1.368,307,1.246,308,1.015,309,1.142,310,1.294,311,1.75,312,0.97,313,1.354,314,1.07,315,2.374,316,0.822,317,2.889,318,0.921,319,2.807,320,5.267,321,1.206,322,1.206,323,1.525,324,1.354,325,0.999,326,2.009,327,2.929,328,2.889,329,0.91,330,2.418,331,1.206,332,1.434,333,0.999,334,0.921,335,1.623,336,0.97,337,1.206,338,0.862,339,1.434,340,1.246,341,0.91,342,0.984,343,0.984,344,0.837,345,1.354,346,2.779,347,3.391,348,4.63,349,3.295,350,2.009,351,0.822,352,1.206,353,0.801,354,1.829,355,1.862,356,1.682,357,2.98,358,3.137,359,0.944,360,1.32,361,1.115,362,2.408,363,3.816,364,0.862,365,4.057,366,1.862,367,1.97,368,1.172,369,1.804,370,0.921,371,0.776,372,1.556,373,3.583,374,1.294,375,3.007,376,0.788,377,0.97,378,4.003,379,1.172,380,1.354,381,1.354,382,0.89,383,1.142,384,1.294,385,1.294,386,1.75,387,1.206,388,1.269,389,0.815,390,0.808,391,1.642,392,2.606,393,0.97,394,0.89,395,2.218,396,1.115,397,2.463,398,0.822,399,1.115,400,1.802,401,1.294,402,3.348,403,2.013,404,2.334,405,0.999,406,0.957,407,4.351,408,1.032,409,1.142,410,0.845,411,2.179,412,0.845,413,3.072,414,1.354,415,1.05,416,1.32,417,0.742,418,1.015,419,1.172,420,3.258,421,1.458,422,0.91,423,1.092,424,1.931,425,2.115,426,2.115,427,1.294,428,0.91,429,1.142,430,1.556,431,3.835,432,2.482,433,2.17,434,2.889,435,0.788,436,1.246,437,1.092,438,0.871,439,1.05,440,2.147,441,0.957,442,1.775,443,2.176,444,1.142,445,0.822,446,1.032,447,1.434,448,2.463,449,1.206,450,2.75,451,1.556,452,1.206,453,3.835,454,4.248,455,1.354,456,1.434,457,1.07,458,4.057,459,0.795,460,1.434,461,1.434,462,1.556,463,2.104,464,1.556,465,0.782,466,0.88,467,1.525,468,0.932,469,1.294,470,0.984,471,1.172,472,1.246,473,1.556,474,1.206,475,1.354,476,2.625,477,0.97,478,0.862,479,1.07,480,1.142,481,1.354,482,0.957,483,0.83,484,0.97,485,1.015,486,1.556,487,1.497,488,0.854,489,1.294,490,0.871,491,1.703,492,1.434,493,2.125,494,0.921,495,1.246,496,1.434,497,0.944,498,0.708,499,1.206,500,1.142,501,2.334,502,0.845,503,1.07,504,1.434,505,0.944,506,0.854,507,1.556,508,1.703,509,1.802,510,0.815,511,2.889,512,1.294,513,0.83,514,1.294,515,1.172,516,0.444,517,1.246,518,1.206,519,1.354,520,1.556,521,1.015,522,1.05,523,0.97,524,1.556,525,1.246,526,0.747,527,1.339,528,1.246,529,1.07,530,1.434,531,0.822,532,1.142,533,1.862,534,2.104,535,3.835,536,1.115,537,0.957,538,0.9,539,1.605,540,0.708,541,0.91,542,1.682,543,2.248,544,1.354,545,0.788,546,2.27,547,1.458,548,1.662,549,1.246,550,1.142,551,1.458,552,1.015,553,0.795,554,0.727,555,1.172,556,1.092,557,1.556,558,1.142,559,1.556,560,1.354,561,1.556,562,1.802,563,1.354,564,1.556,565,1.206,566,1.556,567,0.801,568,1.092,569,1.172,570,1.115,571,0.89,572,1.434,573,1.246,574,0.717,575,1.354,576,0.612,577,0.957,578,1.015,579,1.172,580,1.032,581,0.862,582,1.434,583,1.172,584,0.862,585,2.115,586,1.246,587,0.854,588,0.822,589,1.75,590,2.334,591,1.556,592,0.999,593,0.862,594,1.775,595,1.05,596,0.822,597,0.822,598,1.172,599,0.97,600,1.294,601,1.092,602,0.722]],["component/4",[5,0.286]],["keyword/4",[]],["title/5-1",[16,71.255]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["keyword/5-1",[]],["title/5",[17,76.436]],["name/5",[16,0.587,603,0.658]],["text/5",[0,4.287,1,4.223,5,3.018,6,3.096,7,4.611,8,3.787,9,2.449,16,4.145,17,4.446,19,5.315,20,4.791,21,4.362,22,6.479,23,4.194,24,5.259,25,6.479,26,5.578,27,7.126,28,4.145,29,3.072,31,2.515,32,4.446,33,4.652,34,9.309,35,7.998,36,7.181,37,6.779,38,4.928,39,4.928,40,10.329,41,6.779,42,8.472,43,8.472,44,3.433,45,4.028,46,2.481,47,6.479,49,4.928,50,4.928,51,4.928,52,3.333,53,4.928,60,9.309,61,4.928,62,4.928,63,2.687,64,4.928,67,4.928,68,4.928,71,9.309,72,4.928,73,4.928,74,4.282,77,4.652,78,4.928,79,5.467,80,7.181,85,8.472,86,4.928,87,4.928,88,4.928,89,4.928,90,4.928,91,7.181,92,4.928,99,4.928,100,4.928,101,7.181,102,4.928,103,4.928,104,4.928,105,4.928,110,4.928,111,4.928,112,4.928,113,4.652,114,7.181,115,4.652,116,4.928,117,4.928,118,4.928,119,4.446,120,4.928,121,4.928,122,4.928,123,4.928,124,4.928,125,4.928,128,4.652,129,4.928,132,4.928,133,4.928,134,6.479,135,4.928,136,3.677,137,3.433,138,1.61,139,3.02,156,4.028,290,2.993,440,4.362,501,4.446,602,3.616,604,4.028,605,4.928,606,5.347,607,5.347,608,4.652,609,4.282,610,7.791,611,5.347,612,5.347,613,2.993,614,5.347,615,5.347,616,5.347,617,5.347,618,5.347,619,5.347,620,5.347,621,5.347,622,5.347,623,5.347,624,5.347,625,5.347,626,3.925,627,5.347,628,5.347,629,5.347,630,5.347,631,5.347,632,5.347,633,5.347,634,4.928,635,5.347,636,5.347,637,5.347,638,5.347,639,5.347,640,5.347,641,4.928,642,5.347,643,5.347,644,5.347,645,5.347,646,5.347,647,5.347,648,5.347,649,5.347,650,5.347,651,7.181,652,5.347,653,5.347,654,5.347,655,5.347,656,5.347,657,5.347,658,5.347,659,5.347,660,5.347,661,5.347,662,5.347,663,5.347,664,5.347,665,5.347,666,5.347,667,5.347,668,5.347,669,5.347,670,5.347,671,5.347,672,5.347,673,5.347,674,5.347,675,5.347,676,5.347,677,5.347,678,5.347,679,4.028,680,4.928,681,5.347,682,5.347,683,5.347,684,5.347,685,5.347,686,5.347,687,5.347,688,5.347,689,5.347,690,5.347,691,5.347,692,5.347,693,4.928,694,5.347,695,5.347,696,5.347,697,5.347,698,5.347,699,5.347,700,5.347,701,5.347,702,5.347,703,5.347,704,5.347,705,5.347,706,5.347]],["component/5",[5,0.286]],["keyword/5",[]],["title/6-1",[8,28.368,9,31.532,10,32.385]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["keyword/6-1",[]],["title/6",[0,21.979,1,21.65,7,32.575,138,11.371,139,21.334]],["name/6",[4,0.448,603,0.658]],["text/6",[0,4.165,1,4.103,5,3.61,6,4.8,8,4.298,9,5.533,10,4.906,19,6.031,29,3.486,140,9.614,141,7.479,142,4.546]],["component/6",[5,0.286]],["keyword/6",[]],["title/7",[15,73.608]],["name/7",[15,1.134]],["text/7",[0,2.714,1,2.674,2,0.67,3,0.738,5,1.503,6,1.509,7,2.635,8,0.902,10,2.825,13,1.99,15,1.753,19,0.685,23,0.638,26,5.384,29,1.488,32,4.612,33,3.874,37,1.031,41,2.654,46,0.55,47,0.985,52,5.532,77,1.031,113,1.031,115,1.031,119,0.985,128,1.031,138,0.92,139,1.95,142,0.516,145,2.612,147,0.615,156,0.892,159,0.491,161,0.359,189,0.496,193,1.398,196,1.238,207,1.665,210,1.384,225,4.261,226,2.193,237,1.876,241,1.346,243,3.13,247,0.542,250,0.996,258,0.971,263,6.288,265,0.728,267,0.738,273,0.67,274,3.305,277,1.311,279,0.977,284,0.526,286,2.051,292,3.814,315,0.32,326,5.581,329,0.693,346,2.335,347,0.536,354,1.044,355,0.786,358,0.685,359,2.702,360,1.435,362,3.55,363,0.685,366,2.519,371,1.091,376,0.6,382,4.714,388,1.379,390,2.313,391,1.784,392,3.429,402,0.977,408,0.786,410,5.181,420,5.28,428,1.28,429,2.239,435,1.545,438,1.225,440,1.225,463,1.201,478,0.656,479,1.505,501,0.985,510,0.621,513,0.632,522,0.8,527,4.548,532,0.87,539,6.092,557,0.656,571,2.877,576,1.979,578,0.773,586,2.443,587,3.296,602,1.016,604,0.892,608,3.305,609,2.443,613,1.708,626,4.409,641,1.092,651,1.092,679,2.861,680,2.811,707,1.717,708,1.753,709,1.904,710,2.188,711,1.092,712,2.549,713,1.311,714,2.188,715,3.05,716,1.82,717,2.188,718,2.188,719,2.811,720,2.188,721,2.654,722,3.175,723,4.104,724,1.649,725,2.375,726,1.185,727,1.185,728,0.831,729,3.269,730,4.215,731,0.464,732,0.444,733,1.213,734,1.238,735,3.558,736,1.185,737,3.05,738,4.319,739,2.188,740,1.185,741,11.231,742,1.185,743,1.185,744,3.282,745,6.027,746,1.185,747,5.266,748,3.645,749,6.027,750,3.158,751,8.243,752,1.904,753,7.131,754,6.006,755,1.185,756,1.726,757,1.185,758,1.185,759,1.185,760,0.849,761,1.092,762,1.185,763,1.185,764,1.185,765,1.185,766,1.185,767,1.185,768,1.238,769,1.185,770,1.185,771,1.185,772,0.87,773,1.607,774,1.185,775,1.185,776,0.918,777,1.092,778,1.185,779,8.873,780,2.612,781,1.185,782,1.185,783,1.364,784,2.188,785,2.188,786,3.05,787,2.017,788,2.221,789,1.092,790,3.396,791,1.185,792,3.798,793,5.031,794,1.031,795,1.185,796,1.185,797,2.298,798,3.798,799,1.708,800,0.892,801,1.185,802,1.137,803,1.477,804,1.185,805,1.185,806,4.453,807,0.663,808,0.738,809,1.031,810,1.185,811,2.248,812,1.185,813,1.185,814,2.188,815,6.421,816,1.569,817,1.753,818,1.185,819,1.185,820,3.05,821,3.05,822,1.185,823,2.248,824,1.031,825,0.8,826,1.185,827,1.185,828,5.031,829,3.05,830,1.958,831,4.656,832,0.719,833,1.185,834,3.041,835,2.188,836,0.728,837,2.098,838,1.185,839,1.092,840,1.185,841,1.185,842,4.104,843,1.328,844,1.185,845,1.185,846,1.185,847,2.953,848,0.918,849,1.295,850,0.701,851,0.621,852,0.949,853,1.185,854,6.421,855,1.185,856,1.364,857,1.697,858,1.185,859,1.185,860,1.157,861,1.185,862,5.546,863,5.546,864,3.703,865,2.188,866,1.092,867,0.949,868,1.328,869,3.05,870,2.298,871,0.786,872,1.82,873,1.185,874,1.505,875,1.185,876,1.185,877,1.185,878,1.185,879,1.185,880,1.697,881,3.282,882,1.185,883,0.831,884,1.185,885,1.185,886,1.185,887,1.185,888,1.185,889,1.185,890,0.685,891,0.71,892,1.185,893,1.185,894,1.185,895,1.477,896,1.185,897,0.831,898,1.092,899,0.87,900,1.607,901,0.949,902,1.185,903,1.185,904,2.298,905,1.185,906,2.188,907,1.185,908,1.238,909,2.654,910,4.225,911,0.985,912,1.185,913,4.453,914,0.985,915,1.904,916,1.185,917,1.904,918,1.879,919,1.185,920,1.185,921,1.185,922,1.185,923,1.185,924,1.649,925,1.185,926,1.185,927,1.185,928,0.621,929,0.728,930,0.738,931,0.8,932,0.71,933,1.185,934,1.185,935,1.185,936,8.645,937,1.185,938,1.185,939,1.185,940,1.569,941,1.185,942,1.092,943,0.918,944,1.092,945,1.185,946,1.185,947,1.185,948,1.185,949,1.185,950,2.059,951,1.185,952,1.185,953,0.985,954,1.185,955,2.188,956,1.185,957,4.071,958,1.031,959,3.05,960,1.505,961,1.569,962,1.536,963,1.185,964,1.384,965,1.238,966,1.185,967,1.109,968,1.185,969,1.185,970,0.815,971,0.849,972,0.8,973,1.092,974,1.092,975,1.505,976,1.185,977,1.185,978,1.185,979,1.505,980,5.269,981,4.308,982,3.5,983,3.05,984,1.185,985,1.185,986,4.656,987,1.607,988,0.849,989,3.874,990,5.34,991,4.612,992,1.092,993,5.031,994,1.185,995,0.815,996,2.14,997,1.753,998,2.788,999,1.092,1000,1.185,1001,1.295,1002,3.874,1003,1.753,1004,1.185,1005,1.185,1006,6.58,1007,2.188,1008,3.05,1009,1.185,1010,1.185,1011,1.185,1012,2.575,1013,2.098,1014,7.389,1015,2.276,1016,2.861,1017,3.158,1018,0.985,1019,1.092,1020,3.05,1021,0.949,1022,1.185,1023,1.185,1024,1.612,1025,1.405,1026,4.259,1027,1.753,1028,1.185,1029,1.82,1030,1.185,1031,2.188,1032,0.892,1033,1.092,1034,0.985,1035,1.185,1036,1.185,1037,1.092,1038,0.849,1039,1.092,1040,3.798,1041,1.753,1042,1.185,1043,2.187,1044,1.82,1045,1.697,1046,4.995,1047,2.438,1048,0.892,1049,2.017,1050,1.185,1051,5.536,1052,1.185,1053,1.185,1054,2.811,1055,1.185,1056,0.949,1057,0.749,1058,0.831,1059,1.697,1060,1.185,1061,3.193,1062,0.749,1063,5.009,1064,1.092,1065,1.185,1066,0.892,1067,1.185,1068,0.786,1069,1.697,1070,1.185,1071,1.185,1072,0.761,1073,1.185,1074,1.904,1075,2.953,1076,1.092,1077,1.185,1078,1.185,1079,0.918,1080,1.092,1081,1.185,1082,0.773,1083,1.185,1084,0.949,1085,1.185,1086,1.031,1087,0.918,1088,1.092,1089,2.188,1090,2.188,1091,1.185,1092,0.985,1093,0.595,1094,0.738,1095,1.092,1096,1.185,1097,0.985,1098,1.185,1099,1.185,1100,5.546,1101,1.185,1102,0.949,1103,0.849,1104,1.185,1105,1.185,1106,1.185,1107,1.185,1108,1.185,1109,1.185,1110,1.092,1111,0.985,1112,1.607,1113,1.533,1114,3.05,1115,2.017,1116,1.753,1117,1.185,1118,1.753,1119,2.188,1120,1.185,1121,1.185,1122,1.185,1123,1.185,1124,1.092,1125,0.761,1126,1.185,1127,1.031,1128,1.185,1129,1.185,1130,1.185,1131,1.185,1132,1.092,1133,1.607,1134,5.031,1135,1.185,1136,0.892,1137,1.185,1138,1.092,1139,1.649,1140,1.225,1141,0.719,1142,0.685,1143,1.092,1144,5.546,1145,1.185,1146,1.092,1147,2.811,1148,1.189,1149,1.185,1150,1.031,1151,1.185,1152,1.092,1153,0.749,1154,1.185,1155,1.185,1156,1.185,1157,0.949,1158,1.185,1159,1.092,1160,1.185,1161,1.185,1162,1.031,1163,1.185,1164,1.092,1165,0.918,1166,1.185,1167,1.185,1168,1.092,1169,1.185,1170,1.185,1171,1.185,1172,0.949,1173,2.536,1174,3.158,1175,1.092,1176,1.185,1177,2.017,1178,1.185,1179,1.031,1180,1.185,1181,1.092,1182,1.904,1183,1.092,1184,1.185,1185,1.185,1186,1.185,1187,1.185,1188,1.904,1189,1.185,1190,3.05,1191,1.185,1192,1.185,1193,0.918,1194,1.607,1195,1.185,1196,1.697,1197,0.693,1198,1.185,1199,1.185,1200,1.185,1201,1.185,1202,1.185,1203,1.185,1204,1.185,1205,1.185,1206,0.749,1207,1.82,1208,2.365,1209,1.185,1210,3.05,1211,2.188,1212,1.185,1213,0.918,1214,1.185,1215,1.185,1216,1.185,1217,3.05,1218,0.749,1219,0.949,1220,1.185,1221,1.185,1222,0.719,1223,1.185,1224,0.815,1225,1.185,1226,0.949,1227,2.536,1228,0.8,1229,0.573,1230,1.092,1231,1.185,1232,1.185,1233,0.918,1234,1.185,1235,1.185,1236,1.185,1237,1.185,1238,0.701,1239,0.831,1240,2.188,1241,3.05,1242,1.185,1243,1.185,1244,1.185,1245,1.031,1246,0.831,1247,0.892,1248,0.918,1249,1.185,1250,0.831,1251,2.188,1252,2.188,1253,1.185,1254,0.749,1255,1.185,1256,1.185,1257,1.185,1258,1.185,1259,2.654,1260,1.185,1261,1.185,1262,1.185,1263,1.031,1264,2.298,1265,1.092,1266,3.282,1267,2.654,1268,1.185,1269,2.017,1270,1.185,1271,1.185,1272,1.031,1273,1.092,1274,1.185,1275,1.185,1276,0.831,1277,1.185,1278,1.031,1279,1.185,1280,1.185,1281,0.738,1282,1.82,1283,2.188,1284,1.185,1285,1.185,1286,1.031,1287,1.185,1288,1.185,1289,1.753,1290,1.185,1291,1.185,1292,1.185,1293,3.158,1294,1.477,1295,2.017,1296,2.654,1297,1.031,1298,1.185,1299,1.185,1300,1.185,1301,0.985,1302,1.092,1303,1.092,1304,1.185,1305,1.185,1306,1.031,1307,1.185,1308,1.185,1309,1.185,1310,1.185,1311,1.031,1312,3.05,1313,1.185,1314,1.031,1315,1.185,1316,1.185,1317,0.918,1318,1.185,1319,2.188,1320,2.188,1321,1.185,1322,1.031,1323,1.092,1324,1.092,1325,2.654,1326,3.305,1327,1.185,1328,1.092,1329,1.092,1330,0.786,1331,1.185,1332,0.8,1333,1.185,1334,1.185,1335,1.031,1336,2.811,1337,0.71,1338,1.092,1339,1.092,1340,0.985,1341,1.031,1342,2.017,1343,0.985,1344,1.092,1345,0.949,1346,1.185,1347,1.185,1348,1.031,1349,1.092,1350,1.185,1351,1.185,1352,1.031,1353,1.185,1354,1.031,1355,1.185,1356,2.188,1357,1.185,1358,1.185,1359,1.185,1360,0.831,1361,1.185,1362,1.185,1363,1.185,1364,1.185,1365,1.031,1366,2.188,1367,0.949,1368,2.188,1369,1.185,1370,1.185,1371,1.185,1372,1.185,1373,0.985,1374,1.185,1375,1.185,1376,1.185,1377,1.185,1378,1.185,1379,1.092,1380,0.918,1381,1.031,1382,1.185,1383,1.185,1384,1.031,1385,1.185,1386,1.031,1387,1.185,1388,0.892,1389,1.185,1390,1.185,1391,1.185,1392,2.188,1393,1.185,1394,1.185,1395,1.185,1396,0.985,1397,1.092,1398,0.87,1399,1.185,1400,1.185,1401,1.185,1402,1.031,1403,2.188,1404,1.185,1405,1.185,1406,1.185,1407,1.185,1408,1.185,1409,1.185,1410,1.185,1411,1.031,1412,1.185,1413,1.185,1414,1.185,1415,0.949,1416,1.185,1417,1.185,1418,1.185,1419,1.185,1420,1.185,1421,1.185,1422,1.185,1423,1.031,1424,1.185,1425,1.185,1426,1.185,1427,1.185,1428,1.031,1429,1.185,1430,1.185,1431,1.185,1432,1.031,1433,1.031,1434,1.185,1435,1.185,1436,1.185,1437,0.985,1438,1.092,1439,1.185,1440,0.918,1441,1.185,1442,1.185,1443,1.185,1444,1.031,1445,1.185,1446,0.892,1447,1.092,1448,1.031,1449,1.092,1450,1.185,1451,1.185]],["component/7",[5,0.286]],["keyword/7",[]],["title/8-1",[14,35.372,258,34.938]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["keyword/8-1",[]],["title/8-2",[169,26.353,180,30.041,231,25.762,347,27.659]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["keyword/8-2",[]],["title/8-3",[158,32.333,180,30.041,315,16.52,1452,48.99]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["keyword/8-3",[]],["title/8-4",[180,24.564,315,13.508,397,32.115,548,21.674,1453,43.524,1454,41.597]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["keyword/8-4",[]],["title/8-5",[180,24.564,240,24.203,315,13.508,1455,40.058,1456,40.058,1457,41.597]],["name/8-5",[]],["text/8-5",[]],["component/8-5",[]],["keyword/8-5",[]],["title/8-6",[180,22.512,240,22.181,315,12.38,523,28.579,1458,27.133,1459,39.888,1460,39.888]],["name/8-6",[]],["text/8-6",[]],["component/8-6",[]],["keyword/8-6",[]],["title/8-7",[180,27.028,253,38.621,315,14.863,375,30.499,389,28.834]],["name/8-7",[]],["text/8-7",[]],["component/8-7",[]],["keyword/8-7",[]],["title/8-8",[180,27.028,315,14.863,354,26.251,476,26.631,1461,42.667]],["name/8-8",[]],["text/8-8",[]],["component/8-8",[]],["keyword/8-8",[]],["title/8-9",[147,28.586,180,27.028,315,14.863,598,41.46,1462,45.769]],["name/8-9",[]],["text/8-9",[]],["component/8-9",[]],["keyword/8-9",[]],["title/8-10",[180,27.028,303,22.924,315,14.863,548,23.848,1463,47.889]],["name/8-10",[]],["text/8-10",[]],["component/8-10",[]],["keyword/8-10",[]],["title/8-11",[138,11.371,180,27.028,315,14.863,548,23.848,1464,44.076]],["name/8-11",[]],["text/8-11",[]],["component/8-11",[]],["keyword/8-11",[]],["title/8-12",[180,22.512,315,12.38,357,19.305,358,26.508,534,25.152,1458,27.133,1465,36.712]],["name/8-12",[]],["text/8-12",[]],["component/8-12",[]],["keyword/8-12",[]],["title/8-13",[158,29.09,169,23.709,315,14.863,347,24.885,1466,40.404]],["name/8-13",[]],["text/8-13",[]],["component/8-13",[]],["keyword/8-13",[]],["title/8-14",[169,21.548,240,24.203,315,13.508,347,22.616,1467,41.597,1468,41.597]],["name/8-14",[]],["text/8-14",[]],["component/8-14",[]],["keyword/8-14",[]],["title/8-15",[169,18.225,315,11.425,346,17.817,347,19.129,357,17.817,516,12.086,548,18.332,1469,36.812]],["name/8-15",[]],["text/8-15",[]],["component/8-15",[]],["keyword/8-15",[]],["title/8-16",[169,23.709,315,14.863,347,24.885,1470,39.466,1471,47.889]],["name/8-16",[]],["text/8-16",[]],["component/8-16",[]],["keyword/8-16",[]],["title/8-17",[169,19.748,246,19.98,315,12.38,347,20.727,476,22.181,802,23.81,1472,39.888]],["name/8-17",[]],["text/8-17",[]],["component/8-17",[]],["keyword/8-17",[]],["title/8-18",[169,23.709,206,27.661,315,14.863,347,24.885,1473,47.889]],["name/8-18",[]],["text/8-18",[]],["component/8-18",[]],["keyword/8-18",[]],["title/8-19",[169,21.548,303,20.834,315,13.508,347,22.616,548,21.674,1474,43.524]],["name/8-19",[]],["text/8-19",[]],["component/8-19",[]],["keyword/8-19",[]],["title/8-20",[169,19.748,315,12.38,347,20.727,357,19.305,358,26.508,534,25.152,1475,39.888]],["name/8-20",[]],["text/8-20",[]],["component/8-20",[]],["keyword/8-20",[]],["title/8-21",[138,16.265,180,38.661]],["name/8-21",[]],["text/8-21",[]],["component/8-21",[]],["keyword/8-21",[]],["title/8-22",[138,10.334,159,20.722,180,24.564,347,22.616,1476,21.931,1477,22.064]],["name/8-22",[]],["text/8-22",[]],["component/8-22",[]],["keyword/8-22",[]],["title/8-23",[138,11.371,180,27.028,193,20.266,194,32.575,338,30.499]],["name/8-23",[]],["text/8-23",[]],["component/8-23",[]],["keyword/8-23",[]],["title/8-24",[159,28.521,231,28.994,602,31.95]],["name/8-24",[]],["text/8-24",[]],["component/8-24",[]],["keyword/8-24",[]],["title/8-25",[158,29.09,159,22.8,315,14.863,368,41.46,373,32.575]],["name/8-25",[]],["text/8-25",[]],["component/8-25",[]],["keyword/8-25",[]],["title/8-26",[159,22.8,240,26.631,315,14.863,397,35.336,550,40.404]],["name/8-26",[]],["text/8-26",[]],["component/8-26",[]],["keyword/8-26",[]],["title/8-27",[159,22.8,240,26.631,315,14.863,521,35.898,1478,41.46]],["name/8-27",[]],["text/8-27",[]],["component/8-27",[]],["keyword/8-27",[]],["title/8-28",[159,20.722,303,20.834,315,13.508,548,21.674,1479,28.924,1480,40.058]],["name/8-28",[]],["text/8-28",[]],["component/8-28",[]],["keyword/8-28",[]],["title/8-29",[138,11.371,159,22.8,315,14.863,548,23.848,1481,44.076]],["name/8-29",[]],["text/8-29",[]],["component/8-29",[]],["keyword/8-29",[]],["title/8-30",[289,43.865,357,25.762,358,35.373,1482,30.744]],["name/8-30",[]],["text/8-30",[]],["component/8-30",[]],["keyword/8-30",[]],["title/8-31",[357,25.762,358,35.373,557,33.899,1458,36.207]],["name/8-31",[]],["text/8-31",[]],["component/8-31",[]],["keyword/8-31",[]],["title/8-32",[290,38.544,363,39.811,1458,40.75]],["name/8-32",[]],["text/8-32",[]],["component/8-32",[]],["keyword/8-32",[]],["title/8-33",[193,25.352,194,40.75,338,38.153]],["name/8-33",[]],["text/8-33",[]],["component/8-33",[]],["keyword/8-33",[]],["title/8-34",[548,39.826]],["name/8-34",[]],["text/8-34",[]],["component/8-34",[]],["keyword/8-34",[]],["title/8-35",[206,34.602,247,31.532,548,29.832]],["name/8-35",[]],["text/8-35",[]],["component/8-35",[]],["keyword/8-35",[]],["title/8-36",[356,47.171,548,34.112]],["name/8-36",[]],["text/8-36",[]],["component/8-36",[]],["keyword/8-36",[]],["title/8-37",[138,11.371,1464,44.076,1481,44.076,1483,40.404,1484,35.898]],["name/8-37",[]],["text/8-37",[]],["component/8-37",[]],["keyword/8-37",[]],["title/8-38",[548,34.112,553,40.21]],["name/8-38",[]],["text/8-38",[]],["component/8-38",[]],["keyword/8-38",[]],["title/8",[29,16.716,161,15.159,180,24.564,185,21.802,402,22.335,571,28.605]],["name/8",[180,0.695]],["text/8",[0,0.848,1,1.682,2,0.302,5,0.235,6,1.213,7,0.161,8,0.112,10,0.369,13,0.142,14,2.886,19,0.595,21,0.576,23,0.287,24,0.694,29,0.962,31,0.999,46,1.416,63,1.067,138,2.469,139,3.359,142,0.55,144,0.656,146,0.332,147,1.921,149,1.294,151,1.176,152,0.794,154,0.152,157,0.794,158,1.702,159,3.496,161,2.626,169,3.874,170,0.443,172,0.797,174,0.427,177,0.211,179,0.951,180,4.805,181,0.491,185,0.232,186,0.904,188,1.252,189,2.203,192,0.443,193,3.38,194,1.906,195,1.254,196,1.201,199,0.837,203,0.172,204,0.588,206,2.907,207,2.536,211,0.391,213,4.084,214,1.702,215,0.413,217,0.27,218,0.319,221,1.652,223,4.776,225,0.305,226,3.679,228,1.805,230,0.443,231,3.668,232,2.279,233,0.865,240,4.838,241,1.18,242,0.402,243,1.315,244,0.319,245,0.73,246,3.903,247,0.879,248,1.14,249,1.453,250,1.54,251,0.895,252,0.191,253,1.629,256,0.305,257,6.357,258,5.477,259,0.155,261,1.983,263,0.594,264,1.249,265,0.328,267,0.49,272,0.62,273,0.444,277,1.15,278,1.257,279,2.627,280,1.468,283,1.957,284,4.304,285,0.928,286,4.843,288,0.979,289,6.634,290,5.597,291,3.155,292,2.941,293,0.427,294,0.559,296,0.154,297,0.165,298,1.242,299,0.44,302,2.497,303,4.154,306,1.403,307,1.011,308,0.971,311,0.787,312,1.196,314,2.648,315,2.99,316,0.415,317,0.951,318,2.279,321,0.979,322,2.231,323,0.809,325,0.504,326,3.321,327,1.863,328,2.168,329,0.312,330,1.482,331,1.488,333,0.174,335,1.228,336,1.065,338,1.876,341,1.683,344,0.553,346,1.621,347,5.17,348,1.347,349,1.763,350,2.311,351,1.227,353,2.592,354,1.974,355,0.521,356,1.505,357,4.985,358,5.88,359,0.476,360,0.903,362,3.391,363,5.223,364,2.05,365,0.167,366,0.18,368,1.445,369,3.506,371,1.92,373,2.449,375,0.295,376,0.972,377,1.566,378,0.302,381,0.683,383,0.199,385,0.653,387,0.211,388,3.816,389,1.773,390,0.997,392,1.547,393,0.169,394,0.588,395,0.595,397,2.657,398,0.144,399,0.195,400,0.956,402,1.909,403,1.068,404,0.855,408,0.682,410,0.427,411,0.792,412,0.928,413,1.367,414,2.186,415,1.295,416,2.674,417,4.233,419,1.286,420,1.643,421,1.673,422,1.884,425,1.748,426,1.748,427,0.443,429,0.391,433,0.714,435,0.398,438,0.152,440,0.707,441,0.483,442,0.497,443,1.488,445,1.227,446,0.987,448,1.732,449,0.413,450,0.195,454,0.886,458,1.545,459,0.872,463,0.293,465,3.271,466,0.444,467,1.466,468,0.616,470,0.337,476,1.305,478,0.435,482,0.483,483,0.284,484,0.641,485,0.671,487,0.284,488,0.937,491,0.624,493,0.7,494,0.609,498,1.228,500,0.199,503,0.187,505,0.165,508,0.324,509,0.342,510,1.413,512,0.855,513,0.145,514,0.226,515,0.402,516,0.294,518,0.609,521,0.971,523,3.897,526,0.82,528,1.7,531,2.187,532,0.199,533,0.354,534,3.228,537,0.328,538,1.11,539,0.449,540,1.309,541,0.601,542,0.47,545,1.874,546,3.365,547,0.773,548,4.622,549,1.192,550,1.559,551,1.103,552,0.512,553,0.872,554,3.805,555,0.775,556,0.374,557,5.22,558,0.199,562,2.375,568,0.551,569,0.402,570,0.382,571,0.449,574,2.033,576,0.672,577,0.483,579,0.402,580,0.837,581,0.435,587,0.293,588,2.781,589,1.682,592,3.584,593,2.588,595,0.183,596,1.122,597,3.209,598,0.402,600,0.443,602,4.191,707,3.706,712,2.775,722,1.426,725,1.023,731,0.307,732,0.386,734,1.201,735,0.151,744,1.487,756,1.313,768,0.966,780,0.367,783,1.447,788,0.459,790,0.183,799,1.709,802,0.277,807,1.189,811,1.374,823,1.257,830,0.66,837,0.367,843,0.904,850,0.161,851,0.661,857,0.211,860,1.426,874,0.367,881,0.824,883,0.551,891,0.163,895,0.53,904,1.599,908,0.154,918,1.243,924,0.951,928,0.78,930,0.787,932,0.616,940,1.068,950,0.852,960,0.187,961,0.195,962,0.374,965,1.915,967,0.865,970,0.187,971,0.195,975,0.187,981,1.664,988,0.905,995,0.187,1001,0.465,1015,1.617,1021,0.629,1024,0.415,1026,1.74,1034,0.226,1041,0.218,1056,0.218,1062,0.172,1068,0.18,1069,0.797,1079,0.211,1084,0.823,1092,0.226,1093,0.517,1094,0.332,1097,0.226,1102,0.218,1113,0.395,1118,0.218,1136,0.205,1140,0.44,1142,0.157,1148,0.148,1157,0.427,1194,0.391,1206,0.497,1213,0.413,1218,0.337,1229,0.258,1238,0.465,1254,0.337,1266,0.348,1294,0.694,1317,0.211,1337,0.319,1340,0.226,1341,0.236,1388,0.402,1440,0.413,1446,0.205,1452,2.711,1453,2.504,1454,2.679,1455,2.161,1456,3.533,1457,2.815,1458,6.426,1459,2.504,1460,2.504,1461,1.948,1462,1.596,1463,3.35,1464,3.425,1465,4.301,1466,2.933,1467,1.596,1468,1.42,1469,1.296,1470,0.382,1471,1.296,1472,1.67,1473,1.847,1474,1.67,1475,4.063,1476,2.779,1477,2.22,1478,1.286,1479,0.73,1480,2.58,1481,3.638,1482,2.283,1483,3.78,1484,2.699,1485,0.629,1486,0.948,1487,0.731,1488,6.868,1489,0.199,1490,0.551,1491,1.189,1492,0.582,1493,0.787,1494,0.464,1495,0.382,1496,1.76,1497,0.852,1498,0.342,1499,2.115,1500,0.112,1501,0.302,1502,0.504,1503,0.512,1504,0.18,1505,0.187,1506,2.444,1507,1.365,1508,0.218,1509,0.25,1510,0.205,1511,0.272,1512,1.153,1513,0.272,1514,0.211,1515,0.324,1516,0.211,1517,0.169,1518,0.683,1519,0.497,1520,0.226,1521,1.785,1522,0.834,1523,5.291,1524,3.584,1525,2.679,1526,1.288,1527,0.413,1528,0.398,1529,1.769,1530,0.205,1531,0.395,1532,0.787,1533,0.391,1534,1.164,1535,0.766,1536,0.332,1537,0.272,1538,0.669,1539,0.464,1540,2.79,1541,2.393,1542,0.287,1543,0.154,1544,0.895,1545,1.789,1546,2.168,1547,3.304,1548,1.566,1549,0.199,1550,0.413,1551,1.852,1552,0.342,1553,0.591,1554,1.704,1555,1.05,1556,0.236,1557,0.183,1558,0.976,1559,0.328,1560,0.65,1561,0.272,1562,1.063,1563,1.893,1564,0.36,1565,0.766,1566,1.295,1567,0.653,1568,0.25,1569,0.191,1570,0.25,1571,0.205,1572,2.265,1573,0.465,1574,2.652,1575,2.575,1576,2.652,1577,3.532,1578,3.282,1579,2.321,1580,2.698,1581,0.199,1582,0.187,1583,4.35,1584,1.489,1585,0.747,1586,1.122,1587,2.321,1588,0.576,1589,0.36,1590,1.889,1591,0.152,1592,0.272,1593,0.487,1594,0.316,1595,0.827,1596,0.683,1597,0.443,1598,0.272,1599,0.25,1600,0.272,1601,0.948,1602,0.464,1603,1.164,1604,0.272,1605,0.533,1606,1.122,1607,1.028,1608,0.44,1609,0.548,1610,0.892,1611,0.272,1612,0.464,1613,1.028,1614,1.926,1615,1.076,1616,0.512,1617,1.919,1618,0.211,1619,0.272,1620,1.977,1621,0.576,1622,0.809,1623,0.533,1624,1.728,1625,2.813,1626,3.12,1627,2.813,1628,0.533,1629,0.272,1630,2.79,1631,0.177,1632,0.226,1633,1.919,1634,0.971,1635,2.365,1636,2.02,1637,1.574,1638,1.263,1639,0.332,1640,0.905,1641,0.236,1642,0.354,1643,0.785,1644,0.337,1645,0.272,1646,0.18,1647,0.272,1648,2.512,1649,2.366,1650,0.272,1651,0.272,1652,0.785,1653,0.272,1654,0.187,1655,0.272,1656,1.645,1657,0.165,1658,1.683,1659,0.211,1660,0.272,1661,0.154,1662,0.785,1663,0.218,1664,0.483,1665,0.464,1666,0.491,1667,1.799,1668,1.559,1669,0.951,1670,0.629,1671,3.201,1672,0.54,1673,0.444,1674,0.632,1675,0.454,1676,1.033,1677,0.187,1678,2.305,1679,0.449,1680,0.272,1681,1.028,1682,0.948,1683,1.028,1684,0.272,1685,0.653,1686,0.272,1687,0.785,1688,1.224,1689,1.948,1690,0.865,1691,0.576,1692,0.226,1693,0.199,1694,0.722,1695,0.226,1696,0.218,1697,0.624,1698,0.272,1699,0.272,1700,0.533,1701,0.174,1702,0.454,1703,0.533,1704,0.533,1705,0.491,1706,0.483,1707,1.408,1708,0.491,1709,0.491,1710,0.25,1711,0.533,1712,0.533,1713,0.199,1714,0.205,1715,0.151,1716,0.427,1717,0.236,1718,0.236,1719,0.236,1720,0.272,1721,0.272,1722,0.272,1723,0.272,1724,0.302,1725,0.167,1726,0.459,1727,0.25,1728,0.354,1729,0.775,1730,0.979,1731,0.36,1732,0.367,1733,0.236,1734,0.694,1735,0.714,1736,1.572,1737,0.226,1738,0.272,1739,0.609,1740,1.238,1741,0.305,1742,0.497,1743,0.177,1744,1.053,1745,0.444,1746,0.236,1747,1.32,1748,0.737,1749,0.755,1750,0.895,1751,0.165,1752,0.443,1753,0.427,1754,0.609,1755,0.187,1756,0.187,1757,0.293,1758,0.319,1759,0.218,1760,0.211,1761,0.199,1762,1.153,1763,0.25,1764,0.25,1765,0.852,1766,0.491,1767,0.25,1768,1.036,1769,0.25,1770,0.693,1771,0.236,1772,0.855,1773,0.226,1774,0.218,1775,0.226,1776,0.226,1777,0.211,1778,0.226,1779,0.226,1780,0.737,1781,0.629,1782,0.391,1783,0.427,1784,0.218,1785,0.167,1786,0.852,1787,0.629,1788,0.402,1789,0.195,1790,0.205,1791,0.236,1792,0.226,1793,0.218,1794,0.211,1795,0.25,1796,0.236,1797,0.683,1798,0.236,1799,0.226,1800,0.236,1801,0.25,1802,0.18,1803,0.195,1804,0.25,1805,0.905,1806,0.956,1807,2.072,1808,0.195,1809,1.433,1810,0.491,1811,0.855,1812,1.343,1813,0.272,1814,0.591,1815,0.871,1816,0.272,1817,0.218,1818,0.443,1819,0.391,1820,0.328,1821,0.551,1822,0.154,1823,0.272,1824,0.533,1825,0.354,1826,0.724,1827,2.316,1828,2.316,1829,0.491,1830,1.174,1831,3.41,1832,0.195,1833,0.218,1834,0.491,1835,0.811,1836,0.491,1837,0.609,1838,0.174,1839,2.139,1840,0.576,1841,0.624,1842,1.367,1843,0.431,1844,1.024,1845,0.367,1846,0.272,1847,1.028,1848,0.272,1849,0.905,1850,0.205,1851,0.785,1852,0.801,1853,0.785,1854,0.661,1855,0.776,1856,0.199,1857,0.374,1858,2.679,1859,1.596,1860,2.123,1861,1.099,1862,0.576,1863,0.402,1864,0.272,1865,0.724,1866,0.785,1867,0.167,1868,0.548,1869,0.226,1870,0.191,1871,0.177,1872,0.226,1873,0.211,1874,0.609,1875,0.25,1876,0.272,1877,1.198,1878,0.476,1879,0.25,1880,0.236,1881,0.272,1882,1.596,1883,0.312,1884,0.443,1885,0.152,1886,0.521,1887,0.226,1888,0.25,1889,0.25,1890,0.272,1891,0.533,1892,0.533,1893,0.236,1894,0.25,1895,0.533,1896,0.533,1897,0.533,1898,0.533,1899,0.533,1900,0.533,1901,0.653,1902,0.601,1903,1.011,1904,0.386,1905,0.236,1906,0.465,1907,0.272,1908,0.272,1909,0.272,1910,0.25,1911,0.272,1912,0.785,1913,0.951,1914,0.927,1915,0.979,1916,0.979,1917,1.539,1918,1.192,1919,1.045,1920,0.272,1921,0.272,1922,0.272,1923,0.533,1924,0.533,1925,1.028,1926,0.533,1927,0.927,1928,0.272,1929,0.272,1930,0.272,1931,0.533,1932,0.211,1933,0.272,1934,0.785,1935,1.198,1936,0.205,1937,0.305,1938,0.454,1939,0.146,1940,0.25,1941,3.219,1942,0.337,1943,0.205,1944,0.302,1945,0.53,1946,1.263,1947,0.686,1948,0.427,1949,0.895,1950,0.25,1951,0.616,1952,1.214,1953,0.476,1954,0.25,1955,0.491,1956,0.25,1957,0.553,1958,0.305,1959,0.491,1960,0.25,1961,1.263,1962,0.226,1963,0.236,1964,1.068,1965,0.25,1966,0.205,1967,0.785,1968,1.32,1969,0.205,1970,0.18,1971,0.226,1972,0.25,1973,0.272,1974,0.272,1975,0.443,1976,0.852,1977,0.159,1978,0.272,1979,0.191,1980,0.443,1981,3.12,1982,0.236,1983,0.491,1984,1.847,1985,1.028,1986,0.724,1987,0.25,1988,0.491,1989,0.191,1990,0.159,1991,0.218,1992,0.226,1993,0.402,1994,0.272,1995,0.354,1996,0.14,1997,0.195,1998,0.629,1999,0.199,2000,0.576,2001,0.183,2002,0.316,2003,0.497,2004,0.25,2005,0.443,2006,0.211,2007,0.25,2008,0.25,2009,0.272,2010,0.272,2011,0.427,2012,0.191,2013,0.174,2014,0.272,2015,0.272,2016,0.272,2017,0.272,2018,0.272,2019,0.272,2020,0.465,2021,0.226,2022,0.177,2023,0.218,2024,1.263,2025,0.165,2026,0.211,2027,0.348,2028,0.316,2029,0.211,2030,1.957,2031,0.25,2032,0.824,2033,1.164,2034,0.601,2035,0.272,2036,0.272,2037,0.272,2038,1.086,2039,0.272,2040,0.272,2041,0.272,2042,0.272,2043,0.354,2044,0.195,2045,0.146,2046,0.272,2047,0.272,2048,0.272,2049,0.236,2050,0.354,2051,0.272,2052,0.332,2053,0.199,2054,0.195,2055,0.443,2056,0.427,2057,0.195,2058,0.272,2059,0.272,2060,0.319,2061,0.169,2062,0.205,2063,0.236,2064,0.25,2065,0.533,2066,0.348,2067,0.319,2068,0.707,2069,0.272,2070,0.195,2071,0.195,2072,0.187,2073,0.25,2074,0.195,2075,0.797,2076,0.563,2077,0.391,2078,0.199,2079,0.187,2080,0.533,2081,0.427,2082,0.25,2083,0.187,2084,0.895,2085,0.218,2086,0.226,2087,1.803,2088,0.226,2089,0.169,2090,0.272,2091,0.25,2092,0.25,2093,0.272,2094,0.533,2095,0.25,2096,0.236,2097,0.272,2098,0.272,2099,0.25,2100,0.226,2101,0.199,2102,0.629,2103,0.272,2104,0.187,2105,0.272,2106,0.25,2107,0.199,2108,0.391,2109,0.205,2110,0.25,2111,1.263,2112,0.971,2113,1.164,2114,0.25,2115,0.218,2116,0.533,2117,0.272,2118,0.165,2119,0.199,2120,0.449,2121,0.464,2122,0.211,2123,0.354,2124,0.172,2125,0.226,2126,0.609,2127,0.163,2128,0.165,2129,0.18,2130,0.169,2131,0.348,2132,0.382,2133,0.272,2134,0.187,2135,0.226,2136,0.205,2137,0.187,2138,0.226,2139,0.272,2140,0.25,2141,0.272,2142,0.211,2143,0.413,2144,0.272,2145,0.236,2146,0.183,2147,4.777,2148,0.738,2149,0.755,2150,0.775,2151,0.855,2152,0.823,2153,0.755,2154,0.287,2155,0.775,2156,0.737,2157,0.855,2158,0.823,2159,1.263,2160,1.05,2161,0.187,2162,0.342,2163,0.174,2164,0.272,2165,0.25,2166,0.272,2167,0.25,2168,0.226,2169,0.236,2170,0.25,2171,0.533,2172,0.785,2173,0.533,2174,0.785,2175,0.205,2176,0.211,2177,0.272,2178,0.272,2179,1.028,2180,0.272,2181,0.272,2182,0.205,2183,0.172,2184,0.272,2185,0.25,2186,0.174,2187,0.18,2188,0.151,2189,0.174,2190,0.191,2191,0.18,2192,0.211,2193,0.272,2194,0.272,2195,0.272,2196,0.272,2197,0.724,2198,0.272,2199,0.272,2200,0.533,2201,0.533,2202,0.272,2203,0.272]],["component/8",[5,0.286]],["keyword/8",[]],["title/9-1",[2204,55.777]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["keyword/9-1",[]],["title/9-2",[159,28.521,231,28.994,602,31.95]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["keyword/9-2",[]],["title/9-3",[169,29.659,231,28.994,602,31.95]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["keyword/9-3",[]],["title/9-4",[169,26.353,231,25.762,347,27.659,602,28.388]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["keyword/9-4",[]],["title/9-5",[142,23.988,189,23.05,231,23.178,284,24.425,354,26.251]],["name/9-5",[]],["text/9-5",[]],["component/9-5",[]],["keyword/9-5",[]],["title/9",[29,16.716,162,41.597,185,21.802,231,21.065,284,22.198,1970,33.174]],["name/9",[231,0.319,1970,0.502]],["text/9",[0,0.678,1,0.668,4,2.438,5,1.497,6,2.543,8,0.699,10,1.937,13,0.889,14,3.978,19,0.982,29,0.567,44,2.644,46,1.409,63,2.07,138,1.981,139,1.943,142,3.976,144,0.882,149,0.874,151,2.086,152,0.905,154,1.7,159,4.204,160,3.679,161,3.586,162,2.525,169,4.763,180,3.143,185,0.74,189,1.725,199,1.126,207,1.331,213,2.729,214,0.897,215,1.316,217,0.86,221,4.182,223,0.846,226,4.862,228,3.073,231,5.053,239,4.704,246,4.267,247,2.295,248,2.022,250,3.742,252,1.191,257,5.063,258,5.277,259,3.295,261,4.235,263,3.868,264,6.146,272,1.491,273,3.621,277,1.017,278,4.114,279,3.672,284,5.666,286,4.585,291,2.022,294,1.65,299,0.95,303,4.953,305,2.354,306,0.827,315,3.39,318,1.005,323,2.238,326,4.308,327,3.097,330,2.967,333,3.218,335,0.982,341,0.993,346,0.715,347,4.511,350,0.889,351,1.605,353,2.121,354,1.964,357,2.111,362,3.796,364,4.741,369,2.357,370,1.005,371,3.191,388,1.862,389,0.889,390,3.324,391,0.993,395,1.755,397,1.09,398,1.605,402,2.858,416,0.798,417,1.964,420,3.101,421,0.882,428,0.993,432,2.177,433,2.33,440,0.95,441,1.867,445,2.177,448,1.09,459,4.659,463,0.931,466,2.835,467,2.723,476,0.821,485,1.107,488,0.931,493,3.547,498,1.381,502,0.922,526,2.408,527,0.81,531,3.927,537,1.867,539,0.971,545,0.86,547,2.603,554,0.793,581,1.682,584,3.193,597,0.897,602,4.852,707,3.143,712,2.086,722,2.649,725,2.196,734,2.33,744,2.966,753,1.565,823,4.646,850,2.966,871,1.126,918,2.038,967,2.919,1012,2.898,1026,4.164,1058,2.13,1093,1.526,1148,0.922,1224,1.167,1229,1.469,1238,1.005,1458,1.005,1482,0.853,1488,4.132,1491,1.7,1496,1.107,1501,0.96,1507,1.65,1512,1.146,1522,0.95,1524,4.462,1528,0.86,1531,2.07,1532,0.897,1538,2.589,1540,1.074,1541,1.412,1542,0.914,1543,1.717,1544,1.59,1546,0.889,1547,4.867,1548,3.592,1550,3.193,1551,1.842,1553,3.102,1558,0.971,1562,0.941,1565,1.842,1572,2.054,1574,1.565,1576,2.798,1586,1.605,1590,2.103,1591,0.95,1593,3.031,1594,1.005,1610,1.017,1614,3.777,1615,0.86,1620,1.502,1622,0.922,1632,1.412,1656,3.55,1658,1.776,1664,1.867,1668,1.246,1674,1.044,1675,2.898,1676,0.914,1690,1.538,1691,1.7,1694,0.971,1713,7.957,1734,2.78,1735,4.441,1739,2.438,1741,2.355,1742,1.92,1744,0.931,1757,0.931,1815,0.993,1822,0.96,1832,2.177,1854,0.889,1867,1.044,1874,1.005,1878,1.842,1904,2.461,1953,2.499,1970,7.332,1990,0.993,1996,0.874,2003,1.074,2028,1.797,2054,2.177,2078,1.246,2079,1.167,2084,1.477,2096,1.477,2118,1.03,2131,1.107,2187,1.126,2205,2.798,2206,1.107,2207,1.279,2208,3.885,2209,1.565,2210,1.477,2211,5.95,2212,1.565,2213,1.477,2214,1.565,2215,1.107,2216,1.017,2217,4.118,2218,1.359,2219,2.642,2220,1.246,2221,1.697,2222,6.406,2223,9.791,2224,1.697,2225,6.4,2226,1.697,2227,3.036,2228,1.697,2229,3.036,2230,1.697,2231,3.036,2232,1.697,2233,3.036,2234,1.697,2235,3.036,2236,1.316,2237,1.697,2238,1.697,2239,1.477,2240,5.243,2241,4.118,2242,1.565,2243,3.583,2244,1.146,2245,2.431,2246,3.036,2247,1.477,2248,1.565,2249,8.915,2250,1.697,2251,1.697,2252,1.697,2253,1.697,2254,1.697,2255,1.697,2256,6.406,2257,1.697,2258,8.142,2259,1.697,2260,1.477,2261,1.697,2262,1.477,2263,1.697,2264,1.477,2265,1.697,2266,1.477,2267,1.697,2268,1.477,2269,3.036,2270,2.229,2271,3.036,2272,3.036,2273,1.017,2274,2.431,2275,1.697,2276,6.406,2277,8.809,2278,1.697,2279,7.788,2280,1.697,2281,1.697,2282,1.697,2283,1.697,2284,1.697,2285,1.697,2286,1.697,2287,1.697,2288,1.697,2289,1.697,2290,1.359,2291,1.359,2292,1.044,2293,1.477,2294,1.477,2295,1.074,2296,4.014,2297,3.036,2298,2.287,2299,1.697,2300,1.316,2301,3.796,2302,1.565,2303,2.354,2304,1.167,2305,1.697,2306,1.697,2307,2.798,2308,1.146,2309,1.107,2310,1.565,2311,1.697]],["component/9",[5,0.286]],["keyword/9",[]],["title/10-1",[159,28.521,231,28.994,602,31.95]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["keyword/10-1",[]],["title/10-2",[5,18.278,159,25.342,315,16.52,454,42.927]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["keyword/10-2",[]],["title/10-3",[159,22.8,315,14.863,495,44.076,2312,42.667,2313,40.404]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["keyword/10-3",[]],["title/10-4",[10,25.888,159,22.8,315,14.863,2313,40.404,2314,45.769]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["keyword/10-4",[]],["title/10-5",[159,22.8,226,23.988,315,14.863,2313,40.404,2315,45.769]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["keyword/10-5",[]],["title/10-6",[315,16.52,350,32.049,2313,44.908,2316,53.228]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["keyword/10-6",[]],["title/10-7",[158,29.09,159,22.8,315,14.863,368,41.46,373,32.575]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["keyword/10-7",[]],["title/10-8",[14,20.597,240,22.181,315,12.38,354,21.865,373,27.133,446,30.402,506,25.152]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["keyword/10-8",[]],["title/10-9",[189,23.05,315,14.863,373,32.575,548,23.848,928,28.834]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["keyword/10-9",[]],["title/10-10",[5,16.445,189,23.05,315,14.863,346,23.178,373,32.575]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["keyword/10-10",[]],["title/10-11",[14,27.486,193,22.525,315,16.52,373,36.207]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["keyword/10-11",[]],["title/10-12",[189,23.05,315,14.863,368,41.46,373,32.575,400,35.336]],["name/10-12",[]],["text/10-12",[]],["component/10-12",[]],["keyword/10-12",[]],["title/10-13",[315,16.52,347,27.659,373,36.207,402,27.315]],["name/10-13",[]],["text/10-13",[]],["component/10-13",[]],["keyword/10-13",[]],["title/10-14",[158,29.09,161,16.68,315,14.863,373,32.575,1868,29.353]],["name/10-14",[]],["text/10-14",[]],["component/10-14",[]],["keyword/10-14",[]],["title/10-15",[142,18.44,149,21.789,315,11.425,335,24.464,373,25.041,1206,26.757,1782,31.058,1886,28.058]],["name/10-15",[]],["text/10-15",[]],["component/10-15",[]],["keyword/10-15",[]],["title/10-16",[159,18.99,315,12.38,346,19.305,357,19.305,516,13.096,517,36.712,548,19.863]],["name/10-16",[]],["text/10-16",[]],["component/10-16",[]],["keyword/10-16",[]],["title/10-17",[159,20.722,315,13.508,397,32.115,548,21.674,549,40.058,550,36.721]],["name/10-17",[]],["text/10-17",[]],["component/10-17",[]],["keyword/10-17",[]],["title/10-18",[159,22.8,240,26.631,315,14.863,521,35.898,1478,41.46]],["name/10-18",[]],["text/10-18",[]],["component/10-18",[]],["keyword/10-18",[]],["title/10-19",[243,33.559,411,31.95,595,46.473]],["name/10-19",[]],["text/10-19",[]],["component/10-19",[]],["keyword/10-19",[]],["title/10-20",[159,22.8,315,14.863,354,26.251,476,26.631,1805,39.466]],["name/10-20",[]],["text/10-20",[]],["component/10-20",[]],["keyword/10-20",[]],["title/10-21",[159,22.8,315,14.863,474,42.667,476,26.631,2317,41.46]],["name/10-21",[]],["text/10-21",[]],["component/10-21",[]],["keyword/10-21",[]],["title/10-22",[159,25.342,315,16.52,1470,43.865,2318,53.228]],["name/10-22",[]],["text/10-22",[]],["component/10-22",[]],["keyword/10-22",[]],["title/10-23",[159,20.722,246,21.802,315,13.508,476,24.203,802,25.98,2115,40.058]],["name/10-23",[]],["text/10-23",[]],["component/10-23",[]],["keyword/10-23",[]],["title/10-24",[159,25.342,206,30.744,315,16.52,555,46.082]],["name/10-24",[]],["text/10-24",[]],["component/10-24",[]],["keyword/10-24",[]],["title/10-25",[159,22.8,303,22.924,315,14.863,528,44.076,548,23.848]],["name/10-25",[]],["text/10-25",[]],["component/10-25",[]],["keyword/10-25",[]],["title/10-26",[159,22.8,182,31.136,315,14.863,374,45.769,375,30.499]],["name/10-26",[]],["text/10-26",[]],["component/10-26",[]],["keyword/10-26",[]],["title/10-27",[159,22.8,252,38.621,315,14.863,375,30.499,389,28.834]],["name/10-27",[]],["text/10-27",[]],["component/10-27",[]],["keyword/10-27",[]],["title/10-28",[159,22.8,315,14.863,375,30.499,379,41.46,382,31.474]],["name/10-28",[]],["text/10-28",[]],["component/10-28",[]],["keyword/10-28",[]],["title/10-29",[159,22.8,193,20.266,315,14.863,602,25.541,1493,29.09]],["name/10-29",[]],["text/10-29",[]],["component/10-29",[]],["keyword/10-29",[]],["title/10-30",[159,22.8,312,34.312,315,14.863,2319,45.769,2320,47.889]],["name/10-30",[]],["text/10-30",[]],["component/10-30",[]],["keyword/10-30",[]],["title/10-31",[14,27.486,138,12.639,159,25.342,258,27.148]],["name/10-31",[]],["text/10-31",[]],["component/10-31",[]],["keyword/10-31",[]],["title/10-32",[389,36.07,415,46.473,510,36.07]],["name/10-32",[]],["text/10-32",[]],["component/10-32",[]],["keyword/10-32",[]],["title/10-33",[138,14.224,548,29.832,553,35.165]],["name/10-33",[]],["text/10-33",[]],["component/10-33",[]],["keyword/10-33",[]],["title/10-34",[240,38.093,2321,51.35]],["name/10-34",[]],["text/10-34",[]],["component/10-34",[]],["keyword/10-34",[]],["title/10-35",[138,14.224,278,40.75,392,33.073]],["name/10-35",[]],["text/10-35",[]],["component/10-35",[]],["keyword/10-35",[]],["title/10-36",[406,56.519]],["name/10-36",[]],["text/10-36",[]],["component/10-36",[]],["keyword/10-36",[]],["title/10-37",[240,33.313,360,32.385,2322,53.374]],["name/10-37",[]],["text/10-37",[]],["component/10-37",[]],["keyword/10-37",[]],["title/10-38",[24,46.473,193,25.352,557,38.153]],["name/10-38",[]],["text/10-38",[]],["component/10-38",[]],["keyword/10-38",[]],["title/10-39",[193,20.266,296,31.136,297,33.399,311,34.312,2323,45.769]],["name/10-39",[]],["text/10-39",[]],["component/10-39",[]],["keyword/10-39",[]],["title/10-40",[235,35.373,284,27.148,402,27.315,1487,30.041]],["name/10-40",[]],["text/10-40",[]],["component/10-40",[]],["keyword/10-40",[]],["title/10-41",[233,39.884,235,45.523]],["name/10-41",[]],["text/10-41",[]],["component/10-41",[]],["keyword/10-41",[]],["title/10-42",[235,45.523,468,47.171]],["name/10-42",[]],["text/10-42",[]],["component/10-42",[]],["keyword/10-42",[]],["title/10-43",[235,45.523,327,38.093]],["name/10-43",[]],["text/10-43",[]],["component/10-43",[]],["keyword/10-43",[]],["title/10-44",[232,36.207,233,30.991,234,43.865,235,35.373]],["name/10-44",[]],["text/10-44",[]],["component/10-44",[]],["keyword/10-44",[]],["title/10-45",[46,31.95,193,25.352,235,39.811]],["name/10-45",[]],["text/10-45",[]],["component/10-45",[]],["keyword/10-45",[]],["title/10-46",[235,39.811,2324,48.313,2325,53.374]],["name/10-46",[]],["text/10-46",[]],["component/10-46",[]],["keyword/10-46",[]],["title/10-47",[235,45.523,423,55.245]],["name/10-47",[]],["text/10-47",[]],["component/10-47",[]],["keyword/10-47",[]],["title/10-48",[193,25.352,534,37.776,557,38.153]],["name/10-48",[]],["text/10-48",[]],["component/10-48",[]],["keyword/10-48",[]],["title/10-49",[193,22.525,231,25.762,534,33.564,557,33.899]],["name/10-49",[]],["text/10-49",[]],["component/10-49",[]],["keyword/10-49",[]],["title/10-50",[357,33.154,1558,45.02]],["name/10-50",[]],["text/10-50",[]],["component/10-50",[]],["keyword/10-50",[]],["title/10-51",[14,30.934,258,30.554,897,48.313]],["name/10-51",[]],["text/10-51",[]],["component/10-51",[]],["keyword/10-51",[]],["title/10-52",[403,49.369,1558,39.372,1702,39.811]],["name/10-52",[]],["text/10-52",[]],["component/10-52",[]],["keyword/10-52",[]],["title/10-53",[193,22.525,290,34.247,534,33.564,557,33.899]],["name/10-53",[]],["text/10-53",[]],["component/10-53",[]],["keyword/10-53",[]],["title/10",[5,16.445,29,18.393,159,22.8,184,42.667,602,25.541]],["name/10",[159,0.587]],["text/10",[0,1.615,1,1.799,2,0.238,4,0.368,5,1.241,6,1.694,7,0.126,8,0.337,9,0.285,10,1.313,13,0.112,14,4.315,18,0.428,19,0.123,20,0.131,21,0.119,23,0.44,24,1.485,26,0.723,27,0.165,29,0.398,30,0.186,31,1.739,45,0.161,46,2.658,52,0.133,63,1.858,138,2.269,139,3.882,142,3.478,144,1.728,146,0.628,147,2.427,149,0.519,151,1.62,152,1.255,154,0.348,157,1.972,158,2.418,159,3.408,161,2.843,163,0.165,165,0.954,166,0.806,167,0.165,169,1.927,170,0.837,172,0.633,174,0.337,177,0.165,178,0.446,179,0.468,180,1.081,182,0.462,183,0.424,184,0.165,186,0.832,188,1.771,189,2.555,190,0.228,191,0.137,192,0.35,193,3.643,194,1.114,195,0.6,196,0.57,198,1.085,199,0.542,202,0.177,203,0.135,204,0.122,205,0.153,206,3.271,207,3.341,209,0.144,210,0.266,211,0.157,213,4.56,214,0.995,215,3.305,216,0.668,217,0.213,218,0.714,220,1.028,221,2.45,223,4.777,224,0.646,225,1.346,226,4.71,228,1.908,229,0.366,231,3.039,232,3.096,233,2.213,234,1.231,235,3.124,239,0.822,240,5.029,241,0.619,242,0.161,243,2.974,244,1.672,245,2.339,246,4.03,247,2.396,248,1.696,249,1.849,250,2.743,251,0.366,252,1.321,253,0.15,254,0.573,255,0.453,256,0.576,257,1.829,258,5.307,259,0.576,260,0.428,261,1.133,262,0.484,263,1.795,264,2.352,265,0.131,267,0.509,268,0.393,272,1.696,273,0.674,277,3.656,278,0.812,279,3.62,280,0.266,281,0.68,283,1.181,284,4.62,285,0.262,286,4.674,288,3.048,289,0.983,290,3.206,291,2.04,292,1.405,293,0.654,294,0.647,296,1.954,297,5.086,298,0.904,299,1.232,300,0.337,301,0.15,302,0.804,303,3.522,306,1.802,310,0.177,311,3.092,312,2.23,313,0.186,314,2.543,315,3.074,316,0.995,317,0.898,318,1.114,320,0.186,321,1.063,322,1.459,323,2.258,325,0.27,326,4.065,327,2.771,328,0.468,330,0.421,331,0.165,333,0.137,334,0.368,335,0.472,336,1.173,338,0.951,341,1.195,342,0.266,343,0.867,344,0.832,346,1.968,347,2.443,348,5.881,349,0.962,350,4.041,351,1.549,353,2.025,354,3.135,355,1.355,356,3.336,357,4.139,358,2.465,359,0.129,360,1.849,362,1.939,363,3.569,364,2.535,365,0.131,366,0.542,368,1.033,369,2.005,370,0.368,371,1.659,373,2.459,374,1.14,375,3.174,376,1.873,377,1.274,378,0.875,379,0.759,380,0.366,381,0.186,382,0.681,384,0.517,386,0.133,387,0.165,388,3.903,389,2.06,390,2.427,391,0.478,392,2.788,393,0.133,394,0.467,395,1.532,397,2.524,398,2.138,399,0.983,400,3.185,402,4.267,403,2.565,404,1.14,405,0.525,406,2.813,407,0.131,408,0.141,409,0.157,410,0.444,411,1.771,412,2.936,415,0.926,416,3.369,417,4.033,418,1.821,419,0.317,420,4.249,421,2.042,422,1.004,423,1.434,425,0.317,426,0.317,427,0.177,428,1.195,429,0.157,433,0.57,435,1.414,436,1.636,437,0.295,438,0.865,439,0.144,440,2.616,441,0.843,442,0.637,443,0.165,444,0.456,445,1.825,446,1.66,448,2.45,449,0.165,450,0.153,454,2.916,455,0.366,458,1.353,459,1.827,463,1.532,465,2.757,466,0.674,467,0.84,468,1.41,469,0.35,470,0.266,471,0.615,474,0.781,476,2.355,477,1.07,478,1.132,479,0.428,480,0.157,481,0.366,482,1.157,483,2.881,484,0.743,487,0.114,488,0.341,490,0.235,491,1.142,493,0.857,495,0.954,496,1.098,497,0.832,498,2.676,502,1.023,503,0.562,505,0.129,506,0.942,508,0.129,509,0.27,510,1.311,512,1.286,513,0.224,514,2.66,515,0.161,516,0.987,517,0.954,519,1.345,521,2.984,522,0.144,523,1.827,526,1.057,527,1.647,528,3.582,529,0.147,531,2.364,533,0.542,534,0.942,538,0.992,539,1.168,540,0.624,541,1.101,542,0.49,543,0.171,545,1.553,546,3.343,547,1.728,548,3.995,549,1.636,550,1.945,551,1.223,552,0.533,553,2.284,554,3.396,555,2.961,556,0.295,557,2.994,562,0.137,567,0.519,568,0.295,569,3.13,571,0.122,574,2.94,576,1.987,577,0.131,578,0.405,580,0.279,581,0.951,584,0.558,585,0.161,587,0.654,588,1.549,589,2.59,592,1.701,593,1.624,594,0.517,595,0.68,596,1.549,597,2.196,599,1.07,600,0.35,601,0.836,602,3.272,613,1.401,626,1.728,679,0.161,707,3.084,712,1.62,722,1.163,725,1.004,731,1.252,732,1.638,734,0.776,735,0.453,738,0.22,744,0.596,745,0.161,747,0.723,748,0.723,749,0.161,756,0.674,760,0.302,768,1.332,772,1.007,773,0.157,776,0.781,780,0.428,783,0.628,788,0.364,790,0.144,794,0.186,799,0.564,800,0.161,802,0.891,807,0.768,808,0.262,811,0.596,816,0.153,817,0.171,823,0.812,825,0.68,830,0.525,831,0.165,832,0.832,836,0.131,843,0.723,847,1.138,848,0.633,849,0.484,850,0.915,851,0.81,856,0.628,860,1.08,868,1.335,871,0.279,872,0.177,874,0.428,881,0.405,883,0.436,890,1.614,891,1.5,895,0.42,897,1.085,899,0.157,904,0.317,908,0.462,909,0.541,918,0.765,924,0.317,928,0.718,930,0.133,932,0.714,940,0.302,943,0.326,950,0.42,957,1.26,960,0.147,961,0.302,962,0.295,964,0.135,965,0.57,967,1.553,970,0.428,971,0.153,975,0.147,981,1.924,995,0.147,1001,0.596,1012,0.472,1013,0.147,1015,0.128,1021,0.337,1024,0.432,1025,0.27,1026,1.795,1032,0.161,1043,0.302,1045,0.165,1066,0.468,1093,0.506,1094,0.262,1103,0.302,1111,0.177,1112,0.309,1113,1.106,1125,0.27,1136,0.161,1140,0.865,1142,0.123,1148,0.647,1174,0.177,1193,0.326,1196,0.781,1206,0.393,1218,1.19,1222,0.611,1226,0.498,1229,0.748,1238,0.249,1239,0.436,1246,1.434,1250,0.15,1254,0.393,1266,0.274,1276,0.15,1294,1.044,1301,0.177,1317,0.633,1337,0.372,1340,0.177,1386,0.186,1398,0.157,1440,0.326,1458,0.368,1465,0.171,1470,0.153,1476,2.331,1477,2.018,1478,2.602,1479,0.123,1480,0.171,1482,1.331,1487,0.673,1489,0.157,1490,0.962,1491,1.318,1492,0.57,1493,1.825,1495,0.446,1496,0.657,1497,0.68,1499,0.24,1500,0.637,1501,1.734,1502,0.27,1503,0.139,1504,0.412,1505,0.147,1506,0.337,1507,1.944,1508,0.171,1510,0.468,1512,2.654,1514,0.165,1515,0.129,1517,0.388,1518,0.366,1519,0.266,1521,3.04,1522,2.326,1524,0.525,1526,0.723,1528,0.108,1531,0.411,1532,0.63,1533,0.157,1535,0.377,1536,0.262,1538,1.661,1539,0.186,1540,0.754,1542,0.542,1543,0.352,1544,1.388,1545,0.79,1546,0.624,1547,1.652,1548,0.743,1549,0.157,1550,0.326,1551,0.832,1553,0.615,1554,1.381,1557,0.42,1558,1.903,1559,0.619,1560,0.754,1562,1.043,1564,0.551,1565,0.255,1566,0.144,1569,0.15,1571,0.317,1572,2.776,1573,0.705,1575,2.06,1577,1.859,1578,2.143,1581,0.309,1582,0.693,1583,3.112,1585,0.596,1586,1.891,1588,1.053,1589,0.42,1590,2.231,1591,0.564,1593,1.115,1594,0.368,1595,1.262,1597,0.517,1601,0.388,1602,0.366,1603,0.573,1606,0.802,1608,0.564,1609,1.635,1610,0.603,1612,0.366,1614,2.198,1615,1.268,1616,0.139,1620,1.709,1622,0.444,1630,1.19,1631,0.894,1632,0.35,1634,0.405,1635,1.734,1636,0.366,1639,0.628,1640,0.446,1642,0.279,1644,0.517,1646,1.138,1649,0.165,1654,1.405,1656,1.633,1657,0.496,1658,1.633,1659,0.924,1661,0.57,1663,0.498,1664,0.619,1665,0.366,1667,1.063,1668,0.456,1669,0.468,1670,0.498,1671,0.991,1673,0.121,1674,0.259,1675,0.689,1676,0.738,1678,0.654,1679,0.24,1685,0.517,1688,0.586,1689,1.199,1690,1.342,1691,0.768,1692,0.177,1694,0.24,1696,0.171,1697,1.428,1702,0.472,1706,0.843,1707,0.255,1713,0.157,1714,0.161,1715,0.66,1716,0.654,1717,0.186,1718,0.186,1719,0.711,1724,0.674,1725,0.843,1726,0.246,1728,0.279,1729,0.161,1731,0.42,1732,1.063,1734,0.284,1735,0.57,1736,0.706,1739,0.596,1740,0.177,1741,0.981,1742,0.637,1743,0.139,1744,1.453,1745,0.238,1746,0.711,1747,1.063,1748,0.586,1749,0.6,1750,0.711,1751,0.611,1752,0.35,1753,0.337,1754,0.812,1755,0.147,1756,0.147,1757,0.942,1758,0.252,1759,0.171,1760,0.165,1761,0.157,1762,0.551,1763,0.197,1764,0.197,1765,1.044,1766,0.388,1767,0.388,1768,1.519,1769,0.388,1770,1.033,1771,0.186,1772,1.14,1773,0.177,1774,0.171,1775,0.177,1776,0.177,1777,0.165,1778,0.35,1780,1.349,1781,0.806,1782,0.456,1783,0.498,1784,0.337,1785,0.259,1786,0.68,1787,0.498,1788,0.468,1789,0.153,1790,0.161,1791,0.186,1792,0.177,1793,0.171,1794,0.165,1795,0.197,1796,0.186,1797,0.541,1798,0.541,1799,0.177,1800,0.541,1801,0.197,1802,0.79,1803,0.302,1805,0.722,1806,0.646,1807,0.738,1809,0.144,1811,0.177,1812,0.393,1814,0.317,1815,0.697,1817,0.171,1819,0.456,1820,0.131,1821,0.15,1822,0.462,1825,0.412,1830,0.147,1835,0.27,1837,0.705,1838,0.399,1840,0.309,1843,1.895,1844,0.562,1845,0.562,1849,0.446,1850,0.317,1852,0.44,1854,0.624,1855,0.382,1857,0.962,1859,0.177,1861,1.037,1862,0.564,1867,0.131,1868,2.695,1870,0.15,1871,0.657,1873,0.326,1874,1.114,1877,0.707,1878,1.041,1880,1.037,1882,1.14,1883,2.02,1884,0.177,1885,0.348,1886,0.412,1887,0.177,1902,0.802,1903,0.171,1904,1.505,1906,0.596,1935,1.434,1936,0.161,1937,0.681,1938,1.773,1939,0.542,1942,0.517,1943,0.161,1944,0.875,1945,0.284,1947,0.116,1953,0.611,1958,0.24,1962,0.679,1964,0.446,1971,0.177,1975,0.177,1976,0.42,1979,0.436,1982,0.366,1983,0.197,1984,1.193,1986,0.197,1989,0.15,1990,0.125,1995,0.141,1996,2.25,1997,0.153,2000,1.64,2001,1.27,2002,0.484,2007,0.573,2008,0.573,2013,0.399,2020,0.368,2028,0.484,2032,0.139,2034,0.364,2038,1.734,2043,0.412,2045,0.226,2050,0.279,2052,0.133,2056,0.171,2057,0.302,2060,0.128,2061,0.262,2066,0.274,2067,1.672,2068,0.147,2071,0.153,2072,0.147,2074,0.302,2075,0.482,2076,0.302,2077,0.739,2078,0.6,2081,0.498,2082,0.197,2083,0.693,2086,0.177,2088,0.177,2089,0.743,2100,0.177,2101,0.157,2102,3.148,2104,0.428,2106,0.197,2107,0.6,2108,0.6,2109,0.317,2110,0.388,2113,0.197,2114,0.197,2115,2.121,2118,0.611,2120,2.313,2123,0.412,2124,0.517,2127,0.603,2128,0.832,2129,0.141,2130,0.133,2131,0.139,2132,0.586,2137,0.289,2138,0.35,2146,0.42,2147,0.482,2148,0.246,2154,0.115,2156,0.153,2161,0.428,2162,0.399,2175,0.317,2182,0.317,2183,0.867,2186,0.137,2188,1.304,2189,1.607,2190,0.295,2191,1.355,2206,0.139,2211,0.171,2215,0.139,2216,0.128,2218,0.171,2236,0.165,2240,2.07,2273,1.41,2274,0.498,2291,0.337,2292,1.157,2293,0.541,2294,0.186,2295,0.266,2304,1.063,2308,0.42,2309,0.274,2312,0.781,2313,2.969,2314,0.517,2315,0.35,2316,0.366,2317,0.759,2318,0.541,2319,2.66,2320,2.048,2321,0.657,2322,0.633,2323,0.177,2324,2.759,2325,1.459,2326,0.309,2327,0.468,2328,0.456,2329,0.15,2330,0.926,2331,0.654,2332,0.213,2333,0.707,2334,0.213,2335,0.213,2336,0.213,2337,0.177,2338,0.157,2339,0.197,2340,0.213,2341,0.186,2342,0.388,2343,1.071,2344,0.213,2345,0.213,2346,0.171,2347,0.388,2348,0.279,2349,0.171,2350,0.137,2351,0.35,2352,0.337,2353,0.35,2354,0.144,2355,0.165,2356,0.213,2357,0.213,2358,0.405,2359,0.541,2360,0.302,2361,0.42,2362,0.302,2363,0.35,2364,0.679,2365,0.177,2366,0.197,2367,0.213,2368,0.213,2369,0.213,2370,0.213,2371,0.573,2372,0.517,2373,0.197,2374,0.615,2375,0.213,2376,0.165,2377,0.836,2378,0.876,2379,2.178,2380,0.153,2381,0.295,2382,0.42,2383,0.817,2384,0.302,2385,0.366,2386,0.213,2387,0.197,2388,0.213,2389,0.197,2390,0.646,2391,0.213,2392,0.954,2393,0.517,2394,0.153,2395,0.213,2396,0.284,2397,0.213,2398,0.317,2399,0.366,2400,0.289,2401,0.213,2402,0.177,2403,0.213,2404,0.213,2405,0.259,2406,0.186,2407,0.213,2408,0.197,2409,0.693,2410,0.177,2411,0.326,2412,0.722,2413,0.366,2414,0.284,2415,0.177,2416,0.177,2417,0.197,2418,0.133,2419,0.161,2420,0.35,2421,0.171,2422,0.171,2423,0.131,2424,0.586,2425,0.213,2426,0.213,2427,1.007,2428,0.153,2429,0.817,2430,1.447,2431,0.213,2432,0.213,2433,0.213,2434,0.213,2435,0.213,2436,0.213,2437,0.42,2438,0.213,2439,0.186,2440,0.817,2441,0.412,2442,1.546,2443,0.498,2444,2.096,2445,0.171,2446,0.213,2447,1.193,2448,1.025,2449,0.633,2450,0.317,2451,0.366,2452,2.725,2453,0.165,2454,0.657,2455,0.213,2456,0.405,2457,0.177,2458,0.295,2459,0.533,2460,0.197,2461,0.213,2462,0.197,2463,0.679,2464,0.197,2465,1.063,2466,0.197,2467,0.165,2468,2.043,2469,0.123,2470,0.468,2471,0.722,2472,0.753,2473,0.366,2474,0.186,2475,0.186,2476,0.197,2477,0.388,2478,1.637,2479,0.337,2480,0.573,2481,0.177,2482,0.517,2483,0.197,2484,0.197,2485,0.213,2486,0.213,2487,0.197,2488,0.368,2489,0.943,2490,0.525,2491,0.171,2492,0.171,2493,0.42,2494,0.161,2495,0.177,2496,0.186,2497,0.284,2498,0.482,2499,0.854,2500,0.197,2501,0.388,2502,0.42,2503,1.418,2504,0.197,2505,0.197,2506,0.213,2507,0.446,2508,0.213,2509,0.197,2510,0.186,2511,0.197,2512,0.213,2513,0.366,2514,1.371,2515,2.2,2516,0.213,2517,0.213,2518,0.213,2519,0.213,2520,0.213,2521,0.197,2522,0.197,2523,0.177,2524,0.197,2525,0.157,2526,0.295,2527,0.213,2528,0.177,2529,0.622,2530,0.197,2531,0.186,2532,0.15,2533,0.139,2534,0.139,2535,0.165,2536,0.141,2537,0.171,2538,0.326,2539,0.468,2540,0.213,2541,0.213,2542,0.157,2543,0.186,2544,0.171,2545,0.171,2546,0.165,2547,0.589,2548,0.177,2549,0.517,2550,0.213,2551,0.27,2552,0.213,2553,0.197,2554,0.161,2555,0.197,2556,0.42,2557,0.622,2558,0.42,2559,0.213,2560,0.573,2561,0.42,2562,0.213,2563,0.171,2564,0.161,2565,0.165,2566,0.428,2567,0.817,2568,0.817,2569,0.817,2570,1.911,2571,0.213,2572,0.302,2573,0.161,2574,0.161,2575,0.213,2576,0.171,2577,0.171,2578,0.171,2579,0.165,2580,0.153,2581,0.157,2582,0.177,2583,0.382,2584,0.35,2585,2.005,2586,0.722,2587,0.388,2588,0.44,2589,0.482,2590,1.546,2591,0.197,2592,0.978,2593,0.144,2594,0.213,2595,0.177,2596,0.197,2597,0.213,2598,0.197,2599,0.42,2600,0.468,2601,0.186,2602,0.326,2603,0.213,2604,0.733,2605,0.405,2606,0.213,2607,0.42,2608,0.42,2609,0.213,2610,0.388,2611,0.213,2612,0.197,2613,0.171,2614,0.405,2615,0.213,2616,0.213,2617,0.213,2618,0.165,2619,0.161,2620,0.186,2621,0.197,2622,0.213,2623,0.197,2624,0.6,2625,0.586,2626,0.289,2627,0.197,2628,0.388,2629,0.388,2630,0.295,2631,0.213,2632,0.177,2633,0.186,2634,0.197,2635,0.213,2636,0.197,2637,0.213,2638,0.573,2639,0.309,2640,0.197,2641,0.42,2642,0.541,2643,0.213,2644,0.213,2645,0.42,2646,0.144,2647,0.157,2648,0.366,2649,0.177,2650,0.213,2651,0.213,2652,0.213,2653,0.213,2654,0.213,2655,0.817,2656,0.448,2657,0.42,2658,0.42,2659,0.42,2660,0.186,2661,0.388,2662,0.186,2663,0.42,2664,0.388,2665,0.213,2666,0.213,2667,0.213,2668,0.213,2669,0.213,2670,0.147,2671,0.186,2672,0.309,2673,0.177,2674,0.562,2675,0.428,2676,0.42,2677,0.42,2678,0.161,2679,0.213,2680,0.197,2681,0.213,2682,0.197,2683,0.197,2684,0.213,2685,0.213,2686,0.42,2687,0.42,2688,0.186,2689,0.68,2690,0.197,2691,0.213,2692,0.213,2693,0.153,2694,0.213,2695,0.213,2696,0.295,2697,0.177,2698,0.35,2699,0.366,2700,0.161,2701,1.565,2702,1.098,2703,1.264,2704,0.295,2705,0.197,2706,0.197,2707,0.35,2708,0.186,2709,0.186,2710,0.42,2711,0.388,2712,0.197,2713,0.388,2714,0.388,2715,0.42,2716,0.42,2717,0.388,2718,0.388,2719,0.144,2720,0.213,2721,0.186,2722,0.213,2723,0.711,2724,0.177,2725,0.42,2726,0.262,2727,0.157,2728,0.213,2729,0.157,2730,0.213,2731,0.213,2732,0.213,2733,0.42,2734,0.197,2735,0.144,2736,0.213,2737,0.213,2738,0.213,2739,0.337,2740,0.388,2741,0.197,2742,0.186,2743,0.962,2744,0.249,2745,0.436,2746,0.213,2747,0.213,2748,0.42,2749,0.541,2750,0.213,2751,0.165,2752,0.177,2753,0.171,2754,0.177,2755,0.197,2756,0.197,2757,0.366,2758,0.171,2759,0.876,2760,1.539,2761,0.27,2762,0.147,2763,0.177,2764,0.478,2765,0.388,2766,0.197,2767,0.213,2768,0.186,2769,0.186,2770,0.213,2771,0.161,2772,0.42,2773,0.42,2774,0.366,2775,0.197,2776,0.197,2777,0.42,2778,0.161,2779,0.171,2780,0.213,2781,0.213,2782,0.197,2783,0.186,2784,0.213,2785,0.186,2786,0.197,2787,0.197,2788,0.197,2789,0.186,2790,0.197,2791,0.213,2792,0.213,2793,0.186,2794,0.186,2795,0.622,2796,0.177,2797,0.197,2798,0.171,2799,0.135,2800,0.42,2801,0.388,2802,0.165,2803,0.42,2804,0.171,2805,0.622,2806,0.213,2807,0.177,2808,0.157,2809,1.227,2810,0.213,2811,0.279,2812,0.317,2813,0.186,2814,0.213,2815,0.186,2816,1.287,2817,0.197,2818,0.177,2819,0.147,2820,0.777,2821,0.517,2822,0.197,2823,0.197,2824,0.165,2825,0.161,2826,0.165,2827,0.197,2828,0.161,2829,0.573,2830,0.197,2831,0.898,2832,0.186,2833,0.213,2834,0.15,2835,0.213,2836,0.42,2837,0.147,2838,0.213,2839,0.144,2840,0.337,2841,0.517,2842,0.186,2843,0.186,2844,0.177,2845,0.165,2846,0.289,2847,0.177,2848,0.213,2849,0.144,2850,0.153,2851,0.468,2852,0.197,2853,0.309,2854,0.197,2855,0.165,2856,0.42,2857,0.213,2858,0.197,2859,0.177,2860,0.213,2861,0.405,2862,0.177,2863,0.197,2864,0.177,2865,0.213,2866,0.197,2867,0.186,2868,0.186,2869,0.177,2870,0.137,2871,0.129,2872,0.197,2873,0.177,2874,0.213,2875,0.432,2876,0.962,2877,0.157,2878,0.326,2879,0.153,2880,0.213,2881,0.197,2882,0.186,2883,0.517,2884,0.213,2885,0.42,2886,0.213,2887,0.42,2888,0.388,2889,0.289,2890,0.326,2891,0.197,2892,0.388,2893,0.722,2894,0.213,2895,0.27,2896,0.213,2897,0.388,2898,0.517,2899,0.876,2900,0.165,2901,0.302,2902,0.197,2903,0.541,2904,0.213,2905,0.171,2906,0.177,2907,0.171,2908,0.165,2909,0.139,2910,0.42,2911,0.337,2912,0.197,2913,0.153,2914,0.197,2915,0.468,2916,0.137,2917,0.153,2918,0.42,2919,0.35,2920,0.165,2921,0.622,2922,0.806,2923,0.817,2924,0.541,2925,0.42,2926,0.42,2927,0.388,2928,0.213,2929,0.213,2930,0.197,2931,0.213,2932,0.213,2933,0.42,2934,0.817,2935,0.711,2936,0.284,2937,0.15,2938,0.153,2939,0.562,2940,0.135,2941,0.213,2942,0.213,2943,0.541,2944,0.177,2945,0.197,2946,0.141,2947,0.177,2948,0.654,2949,0.622,2950,1.14,2951,0.177,2952,0.157,2953,0.165,2954,0.213,2955,0.326,2956,0.456,2957,0.186,2958,0.161,2959,0.171,2960,0.161,2961,0.197,2962,0.213,2963,0.177,2964,0.213,2965,0.35,2966,0.197,2967,0.284,2968,0.157,2969,0.171,2970,0.177,2971,0.186,2972,0.177,2973,0.213,2974,0.171,2975,0.213,2976,0.186,2977,0.186,2978,0.213,2979,0.213,2980,0.153,2981,0.197,2982,0.388,2983,0.197,2984,0.388,2985,0.197,2986,0.197,2987,0.213,2988,0.573,2989,0.197,2990,0.177,2991,0.197,2992,0.197,2993,0.213,2994,0.213,2995,3.075,2996,0.817,2997,1.425,2998,0.177,2999,0.213,3000,0.213,3001,0.213,3002,0.213,3003,0.213,3004,0.213,3005,0.213,3006,0.213,3007,0.213,3008,0.213,3009,0.213,3010,0.213,3011,0.177,3012,0.213,3013,0.817,3014,0.213,3015,0.213,3016,0.197,3017,0.213,3018,0.213,3019,0.213,3020,0.161,3021,0.622,3022,0.197,3023,0.213,3024,0.213,3025,0.213,3026,0.213,3027,0.213,3028,0.213,3029,0.213,3030,0.213,3031,0.388,3032,0.284,3033,0.15,3034,0.213,3035,0.213,3036,0.177,3037,0.35,3038,0.171,3039,0.213]],["component/10",[5,0.286]],["keyword/10",[]],["title/11-1",[1206,43.543,1780,49.369,1886,45.661]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["keyword/11-1",[]],["title/11-2",[142,23.988,354,26.251,1206,34.808,1781,44.076,1886,36.501]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["keyword/11-2",[]],["title/11-3",[142,21.802,149,25.761,548,21.674,1206,31.635,1885,28.003,1886,33.174]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["keyword/11-3",[]],["title/11-4",[491,41.78,506,37.776,1786,46.473]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["keyword/11-4",[]],["title/11-5",[182,25.934,189,19.199,231,19.305,284,20.344,491,27.819,506,25.152,3040,34.533]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["keyword/11-5",[]],["title/11-6",[142,23.988,354,26.251,491,33.399,506,30.198,1787,44.076]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["keyword/11-6",[]],["title/11-7",[193,22.525,491,37.123,506,33.564,534,33.564]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["keyword/11-7",[]],["title/11",[189,25.62,816,43.865,2456,39.901,3041,47.424]],["name/11",[18,0.52,3041,0.587]],["text/11",[0,0.622,1,0.612,3,1.751,5,1.809,6,2.157,8,0.641,9,1.286,13,0.815,14,4.803,29,0.52,31,2.553,63,0.782,134,1.294,136,1.071,137,0.999,138,2.641,139,3.053,142,3.085,146,2.392,149,0.802,151,2.38,152,2.895,154,0.871,156,1.173,157,0.83,159,0.645,161,2.873,171,1.294,172,1.207,180,0.764,189,2.273,193,3.977,195,2.062,203,3.433,206,3.77,207,2.06,213,4.491,217,0.789,220,0.933,221,2.947,223,0.776,226,3.58,231,1.978,232,2.78,235,1.624,236,1.247,240,1.857,244,1.683,245,4.093,246,5.118,247,2.151,248,1.884,249,1.624,250,3.221,256,0.89,257,4.048,258,5.404,261,1.976,263,1.805,264,0.838,272,1.379,273,0.881,279,4.038,282,0.91,284,5.454,286,3.211,289,5.076,290,6.881,291,3.241,292,3.733,298,1.643,300,1.247,303,2.261,306,2.646,315,1.635,316,0.823,317,1.173,318,0.921,321,1.207,322,1.207,326,4.127,327,1.857,330,1.446,335,3.139,347,2.454,348,1.971,349,1.092,350,1.471,351,1.484,353,0.802,354,3.578,356,0.933,357,2.981,358,2.219,360,3.105,362,0.691,363,7.017,364,4.72,369,1.321,373,2.271,376,0.789,382,0.89,388,3.392,390,1.993,392,3.171,394,0.89,395,1.624,398,0.823,402,3.668,403,3.369,411,3.285,412,1.526,416,3.33,417,2.888,419,1.173,420,4.733,421,1.459,422,1.643,423,5.264,428,1.643,435,0.789,436,2.249,442,0.984,459,1.96,460,1.435,465,0.782,466,2.171,467,1.526,468,1.683,487,0.83,488,0.854,491,7.312,494,0.921,498,3.221,502,0.846,506,6.659,509,0.999,526,0.748,531,2.869,533,1.032,534,3.323,538,2.716,541,1.643,545,0.789,546,4.662,547,1.993,548,4.269,551,1.459,553,2.399,556,1.092,557,0.863,562,1.803,574,2.792,576,2.785,584,1.556,587,2.105,589,0.97,592,0.999,594,2.971,602,1.781,707,1.735,712,0.789,722,0.823,732,0.584,756,0.881,802,4.091,816,2.752,836,2.36,843,0.945,847,1.863,851,2.844,868,2.329,891,1.683,910,0.921,918,1.899,950,1.051,1024,2.483,1061,1.116,1062,1.776,1093,1.411,1148,1.526,1206,2.971,1294,3.664,1458,2.78,1466,1.143,1476,3.601,1477,3.474,1479,0.9,1487,2.666,1488,2.014,1490,1.971,1492,0.881,1493,1.484,1499,0.89,1501,2.658,1517,0.97,1521,2.603,1522,0.871,1523,2.177,1524,3.016,1526,3.675,1535,0.945,1542,0.838,1544,3.172,1546,1.471,1547,2.271,1552,1.803,1554,2.062,1559,2.36,1562,0.863,1572,0.776,1573,1.662,1575,2.461,1582,1.071,1590,1.434,1591,0.871,1594,1.662,1595,1.21,1608,0.871,1615,0.789,1620,2.324,1622,0.846,1635,0.921,1646,1.032,1656,4.023,1658,0.91,1674,0.957,1676,3.26,1678,8.368,1690,1.944,1691,0.871,1706,1.727,1707,0.945,1713,1.143,1724,0.881,1735,0.881,1742,0.984,1744,4.116,1751,0.945,1754,1.662,1780,4.342,1781,2.249,1782,6.455,1783,4.347,1784,3.073,1786,6.963,1788,2.891,1789,1.116,1790,1.173,1791,1.354,1792,3.191,1793,2.249,1794,2.975,1806,0.999,1815,1.643,1832,1.116,1843,1.541,1858,1.294,1862,2.148,1871,2.503,1883,0.91,1884,3.191,1885,0.871,1886,3.116,1887,1.294,1904,1.884,1906,0.921,1935,2.693,1938,1.624,1941,1.354,1970,1.863,1990,0.91,1996,0.802,2002,0.921,2022,1.015,2034,0.91,2055,1.294,2060,2.299,2061,0.97,2067,2.815,2118,0.945,2120,4.289,2123,1.863,2128,1.704,2189,1.803,2191,1.032,2192,1.207,2206,1.015,2240,0.871,2244,1.051,2360,1.116,2398,1.173,2405,0.957,2409,1.932,2430,0.957,2439,2.444,2441,1.032,2443,1.247,2444,2.329,2445,1.247,2448,1.032,2452,1.572,2456,3.54,2465,1.207,2469,0.9,2470,2.116,2471,2.014,2479,1.247,2481,1.294,2499,1.116,2513,1.354,2525,1.143,2558,3.171,2604,0.957,2621,1.435,2623,5.003,2639,1.143,2662,3.339,2719,1.051,2744,1.662,2766,2.589,2785,3.339,2816,0.91,2862,1.294,2863,2.589,2922,1.247,2956,1.143,2968,1.143,2991,1.435,2992,1.435,3032,2.59,3040,2.891,3041,5.488,3042,1.556,3043,1.435,3044,2.444,3045,1.435,3046,3.537,3047,1.435,3048,1.143,3049,1.435,3050,6.159,3051,5.003,3052,2.808,3053,1.556,3054,1.556,3055,1.556,3056,1.435,3057,1.556,3058,1.116,3059,3.837,3060,2.589,3061,2.589,3062,2.249,3063,2.808,3064,1.556,3065,1.556,3066,5.003,3067,2.116,3068,5.003,3069,1.435,3070,5.286,3071,1.556,3072,1.556,3073,1.556,3074,3.339,3075,2.444,3076,1.435,3077,1.556,3078,4.972,3079,1.556,3080,1.435,3081,4.33,3082,2.817,3083,1.207,3084,3.339,3085,1.354,3086,1.556,3087,1.556,3088,1.556,3089,2.808,3090,1.556,3091,2.808,3092,1.247,3093,1.556,3094,1.354,3095,1.556,3096,1.354,3097,2.335,3098,1.435,3099,1.247,3100,1.294,3101,1.435,3102,1.556,3103,3.642,3104,1.556,3105,1.092,3106,1.435,3107,1.556]],["component/11",[5,0.286]],["keyword/11",[]],["title/12-1",[231,25.762,357,25.762,490,34.247,1493,32.333]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["keyword/12-1",[]],["title/12-2",[231,33.154,1528,39.884]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["keyword/12-2",[]],["title/12-3",[6,27.356,223,34.331,231,28.994]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["keyword/12-3",[]],["title/12-4",[213,20.038,303,27.22,327,20.471,416,19.9,452,32.798,1807,22.773,1885,23.685]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["keyword/12-4",[]],["title/12-5",[303,25.48,449,47.424,2488,36.207,3108,61.173]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["keyword/12-5",[]],["title/12-6",[213,23.692,303,30.9,416,23.528,448,32.115,2488,29.606]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["keyword/12-6",[]],["title/12-7",[145,47.353,223,34.331,231,28.994]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["keyword/12-7",[]],["title/12-8",[213,32.609,231,28.994,422,40.27]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["keyword/12-8",[]],["title/12-9",[145,47.353,231,28.994,1593,32.609]],["name/12-9",[]],["text/12-9",[]],["component/12-9",[]],["keyword/12-9",[]],["title/12-10",[231,23.178,264,29.626,283,31.825,284,24.425,285,34.312]],["name/12-10",[]],["text/12-10",[]],["component/12-10",[]],["keyword/12-10",[]],["title/12",[158,32.333,189,25.62,231,25.762,315,16.52]],["name/12",[18,0.52,231,0.319]],["text/12",[0,2.899,1,2.856,5,1.148,6,0.727,7,0.579,8,1.064,9,2.93,10,1.528,13,0.512,14,4.429,31,1.214,63,3.046,138,1.943,139,2.053,142,4.099,144,2.273,147,1.341,151,0.495,154,0.547,157,0.977,158,3.381,159,4.688,161,1.605,169,4.481,180,4.841,182,1.036,186,0.593,188,1.198,189,2.679,193,2.232,203,0.618,204,1.047,206,2.442,207,1.685,211,0.718,213,5.098,214,0.517,221,1.45,223,5.014,224,0.628,226,3.048,228,5.504,229,0.851,230,0.813,231,5.304,233,1.308,239,4.019,240,3.513,243,1.258,244,0.586,245,0.565,246,3.048,247,0.448,248,2.797,250,2.211,252,1.285,253,1.285,255,0.542,256,0.559,257,1.047,258,3.332,261,0.943,263,2.491,264,1.748,268,1.633,278,4.14,279,3.123,283,1.493,284,3.619,285,1.61,286,4.75,291,2.386,294,0.531,296,0.553,298,1.071,301,0.686,303,4.585,306,1.583,312,1.61,314,3.01,315,3.374,316,1.365,318,0.579,323,0.531,325,0.628,327,2.118,328,1.379,329,0.572,330,1.33,331,0.758,335,2.222,342,0.618,346,1.618,347,3.499,350,0.512,351,0.968,353,2.934,354,4.75,357,4.152,358,2.222,359,0.593,360,1.528,362,4.616,364,2.425,368,0.737,369,2.059,370,5.894,371,4.916,373,0.579,374,0.813,375,4.023,376,1.947,377,0.61,379,1.379,380,0.851,382,0.559,383,0.718,384,0.813,385,0.813,389,1.701,390,0.508,392,0.88,393,0.61,394,0.559,395,1.493,397,2.085,398,0.968,402,1.45,406,0.601,407,1.126,411,2.813,416,4.424,417,2.087,420,0.526,421,0.508,422,1.071,428,1.071,433,2.997,435,0.495,440,0.547,443,0.758,445,1.365,448,1.658,449,2.001,452,0.758,454,0.686,459,1.319,465,1.931,474,0.758,476,4.551,483,0.522,487,1.377,488,0.537,490,1.445,491,1.567,493,1.8,494,0.579,495,0.783,498,0.833,502,0.531,506,0.537,508,1.111,509,1.658,516,1.388,517,0.783,518,0.758,521,0.638,523,1.141,526,0.88,527,1.231,528,0.783,531,3.204,534,4.119,538,0.565,547,0.508,548,3.9,549,1.466,550,0.718,551,0.951,552,0.638,553,3.096,554,1.206,555,0.737,557,3.157,562,0.628,567,0.943,571,0.559,574,2.626,576,0.385,581,0.542,592,3.12,593,1.431,594,3.834,595,4.092,596,1.717,597,0.517,598,0.737,599,1.141,602,3.873,707,2.197,712,2.217,722,2.313,725,0.977,731,1.504,732,1.822,734,0.553,744,0.579,748,1.111,799,4.866,802,1.996,807,5.194,811,0.579,823,0.579,832,0.593,847,1.214,890,1.493,891,0.586,918,2.404,929,1.126,932,0.586,965,2.174,967,1.308,981,0.565,1013,0.673,1014,0.737,1015,0.586,1024,0.517,1025,0.628,1026,1.807,1032,1.379,1063,0.686,1068,5.87,1093,0.491,1113,0.491,1229,1.249,1266,0.638,1330,0.649,1428,0.851,1437,0.813,1452,0.783,1453,1.593,1454,0.813,1455,0.783,1456,0.783,1457,0.813,1458,1.528,1459,0.851,1460,0.851,1461,0.758,1462,1.523,1463,0.851,1464,0.783,1465,0.783,1466,0.718,1467,0.813,1468,0.813,1469,0.851,1470,3.138,1471,0.851,1472,0.851,1473,0.851,1474,0.851,1475,0.851,1478,0.737,1479,2.531,1480,0.783,1481,0.783,1482,1.632,1483,1.344,1487,0.48,1491,0.547,1492,0.553,1493,0.968,1501,1.461,1507,0.531,1508,0.783,1521,1.015,1522,1.025,1528,0.495,1530,0.737,1531,2.199,1534,0.901,1538,1.16,1540,0.618,1542,0.526,1544,2.293,1546,0.512,1547,2.274,1550,1.419,1551,2.332,1555,0.813,1556,0.851,1562,0.542,1572,1.287,1575,2.293,1577,6.918,1578,0.586,1588,0.547,1590,0.935,1593,3.556,1596,1.593,1606,1.071,1608,0.547,1609,0.977,1615,0.928,1620,0.906,1634,0.638,1640,0.701,1649,0.758,1656,1.659,1657,0.593,1658,0.572,1661,0.553,1667,1.419,1668,1.895,1669,0.737,1670,0.783,1676,0.526,1688,0.701,1689,0.758,1713,0.718,1734,1.743,1735,1.837,1736,0.504,1739,1.528,1741,0.559,1744,1.005,1745,1.461,1770,1.417,1772,0.813,1786,0.66,1802,2.154,1803,1.313,1805,0.701,1807,0.986,1820,1.126,1825,0.649,1840,0.718,1841,0.593,1845,0.673,1854,0.959,1862,0.547,1868,1.377,1878,0.593,1883,0.572,1885,0.547,1901,0.813,1903,0.783,1937,0.559,1938,0.565,1944,0.553,1951,0.586,1958,0.559,1966,0.737,1996,0.943,2003,0.618,2028,0.579,2034,0.572,2050,0.649,2060,0.586,2066,1.684,2067,1.097,2087,2.151,2088,0.813,2096,1.593,2112,1.194,2115,0.783,2118,0.593,2120,1.476,2129,4.02,2168,1.523,2175,0.737,2187,0.649,2188,0.542,2191,2.154,2212,0.901,2222,10.869,2240,1.818,2256,7.331,2273,0.586,2274,0.783,2276,9.434,2298,0.737,2303,0.758,2312,0.758,2313,2.384,2314,0.813,2315,0.813,2316,0.851,2317,1.379,2318,0.851,2322,0.758,2329,0.686,2384,0.701,2387,0.901,2415,0.813,2418,0.61,2441,0.649,2473,0.851,2474,0.851,2475,0.851,2478,2.826,2482,0.813,2488,4.14,2549,0.813,2558,2.954,2572,0.701,2573,1.379,2574,1.379,2576,0.783,2577,0.783,2578,0.783,2579,0.758,2580,0.701,2581,0.718,2582,0.813,2588,0.526,2604,2.363,2605,0.638,2701,1.523,2703,1.688,2704,1.285,2705,1.688,2706,1.688,2707,2.147,2708,1.593,2709,1.593,2713,0.901,2714,0.901,2721,0.851,2723,1.593,2726,0.61,2764,0.572,2778,0.737,2828,0.737,2871,0.593,2875,0.517,2895,0.628,2939,0.673,2981,0.901,2982,0.901,2983,0.901,2984,0.901,2985,0.901,2986,0.901,2988,0.901,2989,0.901,3040,0.737,3060,0.901,3109,1.194,3110,0.978,3111,0.978,3112,0.978,3113,0.978,3114,0.978,3115,0.978,3116,0.978,3117,3.248,3118,2.582,3119,1.831,3120,2.582,3121,0.978,3122,0.978,3123,0.978,3124,0.901,3125,4.034,3126,0.978,3127,0.978,3128,0.978,3129,0.978,3130,0.978,3131,0.978,3132,5.587,3133,1.688,3134,0.978,3135,5.696,3136,1.688,3137,0.978,3138,6.062,3139,0.978,3140,0.978,3141,1.831,3142,0.978,3143,0.978,3144,0.978,3145,0.978,3146,0.978,3147,0.978,3148,0.978,3149,0.978,3150,0.978,3151,0.978,3152,0.978,3153,0.978,3154,0.978,3155,0.978,3156,0.978,3157,0.978,3158,0.978,3159,0.978,3160,0.978,3161,1.688,3162,0.901,3163,1.831,3164,0.978,3165,1.831,3166,0.978,3167,0.978,3168,0.978,3169,0.978,3170,0.978,3171,0.978,3172,0.978,3173,0.978,3174,0.978,3175,0.978,3176,0.978,3177,0.978,3178,0.978,3179,0.978,3180,0.978,3181,1.831,3182,0.978,3183,0.978,3184,0.978,3185,0.978,3186,0.978,3187,0.978,3188,0.978,3189,0.978,3190,0.978,3191,0.978,3192,1.831,3193,0.978,3194,1.831,3195,0.978,3196,0.978,3197,0.978,3198,0.978,3199,0.978,3200,0.978,3201,0.978,3202,0.978,3203,0.978,3204,0.901,3205,0.901,3206,0.901,3207,5.041,3208,1.523,3209,0.901,3210,0.901,3211,0.901,3212,0.901,3213,0.901,3214,0.901,3215,0.901,3216,6.919,3217,0.618,3218,0.737,3219,0.61,3220,0.901,3221,0.901,3222,1.466,3223,0.813,3224,0.901,3225,0.783,3226,2.38,3227,0.901,3228,0.901,3229,0.978,3230,0.978,3231,0.978,3232,0.901,3233,0.901,3234,0.978,3235,0.978,3236,0.978,3237,1.688,3238,1.831,3239,1.688,3240,0.901,3241,0.978,3242,0.901,3243,0.851,3244,0.851,3245,0.851,3246,3.541,3247,0.978,3248,0.978,3249,0.978,3250,0.978,3251,0.978,3252,0.851,3253,0.978,3254,0.978,3255,0.978,3256,0.978,3257,0.978,3258,0.978,3259,0.978,3260,0.783,3261,0.978,3262,4.859,3263,0.978,3264,0.978,3265,0.978,3266,0.978,3267,0.978,3268,0.851,3269,0.901,3270,0.901,3271,0.901,3272,0.978,3273,0.978,3274,0.978,3275,0.978,3276,0.978,3277,0.978,3278,0.978,3279,0.978,3280,0.978,3281,0.978,3282,0.978,3283,0.978,3284,0.978,3285,0.978,3286,0.901,3287,0.978,3288,0.978,3289,0.813,3290,0.978,3291,0.978,3292,0.978,3293,0.978,3294,0.978,3295,0.978,3296,0.978,3297,0.978,3298,0.901,3299,0.901,3300,0.901,3301,0.901,3302,0.901,3303,0.901,3304,0.901,3305,0.978,3306,0.978,3307,0.978,3308,0.978,3309,0.978,3310,0.978,3311,0.978,3312,0.978,3313,0.978,3314,0.978,3315,0.978,3316,0.978,3317,0.978,3318,3.842,3319,0.978,3320,0.978,3321,0.978,3322,0.978,3323,0.978,3324,0.978,3325,0.978,3326,0.978,3327,0.978,3328,0.978,3329,0.978,3330,0.978,3331,0.978,3332,0.978,3333,0.978,3334,0.978,3335,0.978,3336,0.901,3337,0.901,3338,0.978,3339,0.978,3340,0.978,3341,0.978,3342,0.978,3343,0.978,3344,0.978,3345,0.978,3346,0.978,3347,0.978,3348,0.978,3349,0.978,3350,0.978,3351,0.978,3352,0.978,3353,0.978,3354,0.978,3355,0.978,3356,0.901,3357,0.901,3358,0.901,3359,0.901,3360,0.901,3361,0.901,3362,0.901,3363,0.978,3364,0.978,3365,0.978,3366,0.978,3367,0.901,3368,0.978,3369,0.978,3370,0.978,3371,0.978,3372,0.978,3373,0.978,3374,0.978,3375,0.978,3376,1.831,3377,0.978,3378,0.978,3379,0.978,3380,0.901,3381,0.978,3382,0.978,3383,0.978,3384,0.978,3385,0.978,3386,0.978,3387,1.831,3388,0.978,3389,0.978,3390,0.978,3391,0.978,3392,0.978,3393,0.978,3394,0.978,3395,0.978,3396,0.978,3397,0.978,3398,0.978,3399,0.813,3400,0.978,3401,0.978,3402,0.978,3403,3.248,3404,0.978,3405,0.978,3406,0.978,3407,0.701,3408,2.001,3409,0.851,3410,0.978,3411,0.978,3412,0.851,3413,0.758,3414,0.813,3415,0.901,3416,3.213,3417,0.628,3418,0.901,3419,0.978,3420,0.901]],["component/12",[5,0.286]],["keyword/12",[]],["title/13-1",[721,53.228,870,46.082,3421,56.383,3422,56.383]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["keyword/13-1",[]],["title/13",[2959,73.608]],["name/13",[18,0.52,2959,0.606]],["text/13",[0,4.033,1,3.972,5,3.017,6,4.012,8,3.21,10,4.75,13,4.081,14,3.5,31,3.664,188,4.686,224,5.001,226,3.395,330,4.012,402,5.004,484,4.856,712,3.946,735,5.596,802,5.245,807,4.361,811,4.61,870,8.441,871,5.166,943,6.039,1048,5.868,1207,8.398,1296,8.787,1352,6.778,1558,4.454,1739,4.61,2215,5.081,2377,5.466,2619,5.868,2735,5.258,2901,5.586,2959,6.238,3421,10.927,3423,10.098,3424,10.098,3425,11.206,3426,7.789,3427,12.585,3428,7.789,3429,7.789,3430,7.789,3431,7.789,3432,7.789,3433,7.789,3434,10.098,3435,10.098,3436,10.098,3437,10.098,3438,7.789,3439,7.789,3440,7.179,3441,7.789,3442,11.206,3443,10.098,3444,7.179,3445,10.098,3446,7.789,3447,7.789,3448,7.789,3449,10.098,3450,7.789,3451,7.789,3452,7.789,3453,7.179,3454,7.179,3455,7.789,3456,6.778,3457,7.789,3458,6.778]],["component/13",[5,0.286]],["keyword/13",[]],["title/14",[0,19.976,1,19.677,14,22.474,138,10.334,139,19.389,1528,25.341]],["name/14",[18,0.52,3459,0.658]],["text/14",[0,5.069,1,4.993,5,3.399,6,4.52,7,5.577,8,4.688,9,4.316,10,4.433,13,4.937,14,5.703,138,2.759,139,4.737,221,4.208,272,4.628,438,5.275,487,5.026,498,4.288,707,4.261,1528,6.192,1583,6.146,2083,6.481,2743,6.613]],["component/14",[5,0.286]],["keyword/14",[]],["title/15-1",[0,19.976,1,19.677,14,22.474,207,21.931,506,27.445,2877,36.721]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["keyword/15-1",[]],["title/15-2",[14,35.372,602,36.534]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["keyword/15-2",[]],["title/15-3",[258,34.938,594,49.791]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["keyword/15-3",[]],["title/15",[2204,55.777]],["name/15",[18,0.52,3460,0.697]],["text/15",[0,4.483,1,4.416,5,2.998,6,3.187,8,1.031,9,1.951,10,3.467,13,1.311,14,5.734,19,2.464,21,1.401,63,2.141,138,1.15,139,2.157,144,4.166,147,1.299,149,1.288,154,1.401,158,1.322,159,4.035,161,1.687,169,4.771,180,4.783,188,2.582,189,1.784,193,0.921,194,1.481,206,2.141,207,2.44,217,1.267,221,1.117,226,4.827,231,2.344,237,1.538,240,1.21,243,4.394,246,1.857,247,4.129,250,1.939,258,5.737,259,3.182,272,2.733,277,4.806,279,4.025,284,2.916,291,2.092,306,2.077,308,1.632,312,1.56,315,0.676,326,5.102,327,2.693,346,1.054,347,2.971,348,1.755,350,3.442,351,2.941,353,2.194,357,1.794,358,1.447,362,1.11,364,1.386,367,1.755,369,2.618,375,3.084,378,3.148,382,2.437,386,3.469,388,4.756,389,4.926,390,3.413,392,5.519,395,1.447,398,1.322,402,5.012,407,1.538,410,2.315,411,1.161,417,1.193,420,3.967,433,1.415,434,1.885,440,4.792,445,3.473,459,2.842,465,2.141,467,2.315,478,1.386,488,1.373,490,3.679,493,1.386,494,1.481,497,1.518,498,4.683,505,1.518,506,4.044,510,2.916,523,1.56,526,3.54,527,1.193,534,4.697,537,1.538,538,1.447,545,1.267,546,5.066,547,2.213,548,4.647,551,1.299,553,1.278,557,1.386,573,2.003,574,1.964,576,4.048,577,4.532,578,5.583,579,7.084,581,3.641,584,1.386,588,1.322,589,1.56,594,5.072,595,2.876,602,5.697,707,3.332,712,3.734,722,2.941,772,1.837,799,1.401,807,1.401,850,2.522,867,2.003,897,1.755,908,3.148,918,1.238,965,1.415,1024,2.252,1026,1.177,1057,1.582,1062,1.582,1068,1.659,1075,2.826,1093,1.257,1113,2.797,1140,2.385,1142,1.447,1148,5.592,1250,3.905,1458,1.481,1482,2.141,1485,3.412,1487,2.092,1491,6.2,1496,5.231,1498,1.606,1499,2.437,1514,1.939,1515,1.518,1530,1.885,1531,1.257,1532,1.322,1538,1.914,1540,2.695,1543,2.41,1547,1.481,1565,2.586,1572,1.247,1573,2.522,1578,2.553,1581,1.837,1583,1.632,1586,4.524,1588,2.385,1595,2.831,1610,1.499,1615,2.159,1620,1.238,1630,1.582,1631,1.632,1639,1.56,1658,1.463,1661,1.415,1676,4.852,1677,2.93,1679,2.437,1690,1.267,1691,1.401,1724,1.415,1751,2.586,1770,1.373,1822,1.415,1835,4.219,1838,2.736,1854,1.311,1863,1.885,1874,1.481,1883,2.492,1937,1.431,1953,1.518,1958,1.431,1996,1.288,2001,1.689,2002,1.481,2029,1.939,2034,2.492,2061,2.656,2067,1.499,2079,1.721,2107,1.837,2120,3.182,2122,1.939,2129,1.659,2130,2.656,2137,1.721,2183,2.695,2188,1.386,2191,1.659,2204,1.518,2240,1.401,2329,2.99,2363,2.08,2364,3.543,2372,1.582,2378,2.177,2390,1.606,2418,1.56,2458,3.905,2489,1.721,2534,6.133,2547,2.492,2593,1.689,2604,1.538,2625,3.991,2626,1.721,2630,1.755,2640,5.129,2647,1.837,2648,2.177,2699,2.177,2734,2.306,2762,1.721,2764,1.463,2808,1.837,2811,1.659,2820,1.632,2840,2.003,2875,2.252,2877,1.837,2878,1.939,2905,2.003,2919,2.08,2940,1.582,3048,1.837,3407,1.794,3461,1.837,3462,2.003,3463,2.08,3464,1.939,3465,2.306,3466,2.177,3467,4.261,3468,1.885,3469,8.56,3470,3.927,3471,2.306,3472,1.939,3473,2.502,3474,1.721,3475,2.502,3476,2.08,3477,1.939,3478,3.927,3479,1.755,3480,2.502,3481,2.177,3482,2.502,3483,2.003,3484,2.306,3485,2.177,3486,2.306,3487,2.502,3488,4.261,3489,4.261,3490,5.129,3491,2.502,3492,2.306,3493,2.177,3494,2.177,3495,2.502,3496,2.08,3497,2.177,3498,2.177,3499,4.261]],["component/15",[5,0.286]],["keyword/15",[]],["title/16-1",[240,33.313,1706,42.336,2471,49.369]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["keyword/16-1",[]],["title/16-2",[357,28.994,2120,39.372,2471,49.369]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["keyword/16-2",[]],["title/16-3",[231,33.154,2471,56.452]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["keyword/16-3",[]],["title/16-4",[138,16.265,2481,65.469]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["keyword/16-4",[]],["title/16-5",[576,30.969,2471,56.452]],["name/16-5",[]],["text/16-5",[]],["component/16-5",[]],["keyword/16-5",[]],["title/16",[29,14.138,161,12.822,165,33.881,185,18.44,240,20.471,360,19.9,2191,28.058,2322,32.798]],["name/16",[2471,1.015]],["text/16",[0,2.037,1,2.007,5,1.524,6,2.582,8,1.278,10,1.459,13,1.625,14,4.437,29,1.037,31,1.459,63,3.266,138,2.114,139,4.536,142,2.224,157,1.654,158,1.64,159,3.118,161,2.993,165,5.204,167,2.405,183,4.321,185,1.352,188,1.44,196,1.755,198,2.177,206,3.783,207,3.922,213,3.565,215,6.449,221,2.278,223,3.24,226,4.459,231,4.436,240,6.065,243,1.512,246,4.459,247,2.336,248,2.505,250,1.412,258,5.193,261,1.598,279,2.901,286,4.99,288,3.955,303,3.135,306,2.487,309,2.277,315,2.553,318,1.836,321,5.037,322,3.955,323,4.861,324,5.654,326,4.358,327,1.501,335,2.95,346,1.306,347,2.938,350,4.687,353,2.627,354,4.267,356,4.51,357,4.308,360,3.913,369,3.056,371,1.547,376,1.572,377,1.934,388,3.761,390,1.611,398,1.64,402,3.994,403,2.224,406,3.996,411,1.44,416,3.541,417,3.968,418,4.238,421,1.611,422,1.814,428,1.814,441,1.908,445,1.64,446,2.057,447,2.859,448,1.992,454,2.177,465,2.564,466,1.755,471,2.337,476,3.144,482,1.908,488,1.702,517,2.484,527,1.48,538,1.794,540,2.957,542,1.859,548,4.94,553,3.319,554,3.886,555,3.843,567,1.598,574,2.995,576,1.22,589,1.934,592,1.992,596,1.64,597,1.64,602,1.44,707,4.275,712,1.572,722,1.64,725,1.654,802,3.375,847,2.057,848,2.405,860,1.64,911,2.58,918,3.725,928,2.673,932,4.51,1140,2.856,1141,1.883,1222,1.883,1276,2.177,1470,2.224,1482,2.564,1487,1.523,1490,3.58,1499,1.774,1512,4.386,1517,1.934,1518,2.699,1538,2.292,1547,1.836,1572,2.544,1575,1.625,1583,4.91,1588,1.737,1590,2.606,1609,1.654,1614,6.195,1634,2.023,1635,3.846,1642,2.057,1658,2.984,1663,5.204,1676,1.67,1702,1.794,1706,1.908,1707,1.883,1726,1.814,1735,3.676,1757,1.702,1758,1.859,1765,2.094,1780,3.658,1782,5.526,1852,1.67,1855,1.908,1868,4.437,1883,1.814,1904,1.523,1953,1.883,2001,2.094,2002,1.836,2013,1.992,2020,1.836,2038,2.886,2067,1.859,2074,4.659,2076,2.224,2077,2.277,2087,1.737,2089,4.051,2108,2.277,2115,4.086,2120,6.61,2128,1.883,2189,3.275,2191,6.986,2273,1.859,2322,6.449,2441,2.057,2444,1.883,2449,2.405,2452,1.737,2471,9.073,2472,8.714,2473,9.165,2474,6.55,2475,8.902,2476,9.429,2478,7.238,2481,6.918,2497,2.094,2499,2.224,2588,1.67,2636,2.859,2871,3.096,2875,1.64,2939,2.134,3061,2.859,3081,2.859,3367,5.989,3500,3.102,3501,3.102,3502,3.102,3503,3.102,3504,3.102,3505,5.102,3506,3.102,3507,3.102,3508,3.102,3509,3.102,3510,5.102,3511,3.102,3512,3.102,3513,5.102,3514,2.699,3515,3.102,3516,3.102,3517,3.102,3518,3.102,3519,2.859,3520,3.745,3521,3.102,3522,3.102,3523,3.102]],["component/16",[5,0.286]],["keyword/16",[]],["title/17-1",[397,50.545,476,38.093]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["keyword/17-1",[]],["title/17-2",[169,23.709,315,14.863,476,26.631,2317,41.46,3252,47.889]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["keyword/17-2",[]],["title/17-3",[347,35.596,3260,63.048]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["keyword/17-3",[]],["title/17-4",[240,26.631,256,31.474,347,24.885,476,26.631,2592,34.808]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["keyword/17-4",[]],["title/17",[29,16.716,161,15.159,166,40.058,185,21.802,397,32.115,476,24.203]],["name/17",[166,1.134]],["text/17",[0,1.153,1,1.136,2,1.633,4,1.709,5,1.436,6,2.454,8,1.19,10,2.261,13,1.512,14,4.309,29,0.965,31,1.358,138,2.057,139,1.863,142,4.477,144,1.499,157,1.54,159,2.984,160,2.119,161,3.598,162,3.998,164,3.85,166,4.946,169,3.446,178,5.736,180,3.033,183,1.499,185,1.258,193,1.063,194,2.845,207,1.266,213,4.09,217,1.463,221,3.572,226,4.792,231,3.856,240,1.397,241,4.429,242,6.898,243,1.407,246,4.34,247,1.322,248,1.418,250,1.314,255,2.664,256,3.532,257,5.237,258,5.578,259,3.532,261,1.487,263,5.171,264,1.554,273,3.494,284,5.496,286,4.688,291,3.033,294,1.569,299,1.616,303,3,306,3.51,315,2.912,323,1.569,326,5.025,327,1.397,341,1.689,347,4.14,350,1.512,354,2.293,364,5.315,375,3.991,378,1.633,389,3.773,392,1.387,397,6.771,398,1.526,402,4.283,411,2.866,416,2.905,417,4.368,420,5.36,422,1.689,428,3.613,459,4.086,465,1.451,466,2.719,474,3.727,476,5.922,485,1.883,498,3.64,531,4.228,538,1.669,540,1.314,550,2.119,554,2.885,571,4.119,584,2.664,587,1.584,592,3.965,595,3.245,597,1.526,602,4.008,707,2.793,712,1.463,722,1.526,724,3.621,725,1.54,760,2.07,823,4.263,850,1.709,890,4.625,910,1.709,918,3.056,967,1.463,1015,1.73,1141,2.917,1148,1.569,1224,3.306,1229,4.179,1454,2.401,1455,3.85,1458,1.709,1467,2.401,1468,2.401,1491,2.691,1493,3.264,1496,4.029,1521,2.664,1522,1.616,1524,4.624,1528,1.463,1535,1.752,1543,1.633,1547,6.383,1548,1.8,1557,1.949,1564,1.949,1565,1.752,1572,1.44,1578,1.73,1586,1.526,1591,1.616,1595,1.244,1614,3.356,1615,1.463,1620,2.379,1622,2.612,1646,1.915,1656,1.475,1672,3.306,1675,2.78,1676,2.588,1690,2.435,1691,1.616,1707,1.752,1713,3.529,1724,2.719,1731,1.949,1745,4.525,1751,1.752,1754,1.709,1757,1.584,1768,1.752,1805,3.447,1806,3.086,1822,1.633,1852,1.554,1868,1.54,1874,1.709,1904,1.418,1970,4.096,1990,3.613,1996,1.487,2205,4.431,2218,2.312,2240,3.458,2244,1.949,2249,8.77,2258,8.968,2260,5.374,2262,2.512,2264,4.183,2266,6.267,2268,2.512,2273,1.73,2277,6.652,2279,6.652,2296,3.85,2298,2.175,2302,2.661,2303,2.238,2319,2.401,2418,1.8,2448,1.915,2470,2.175,2489,3.306,2592,1.826,2614,1.883,2707,5.136,2724,2.401,2752,2.401,2778,2.175,2779,2.312,2782,2.661,2802,2.238,2911,2.312,3058,2.07,3070,2.312,3252,7.515,3260,2.312,3524,2.512,3525,2.026,3526,3.727,3527,2.175,3528,2.07,3529,2.661,3530,2.512,3531,2.887,3532,2.887,3533,2.512,3534,2.887,3535,2.887,3536,6.638,3537,6.176,3538,6.267,3539,6.267,3540,2.887,3541,2.887,3542,4.431,3543,2.887,3544,2.887,3545,2.887,3546,2.887,3547,5.374,3548,2.401,3549,2.887,3550,2.887,3551,2.887,3552,2.887,3553,2.512,3554,2.887,3555,2.887,3556,2.887,3557,2.887,3558,2.887,3559,2.887,3560,2.887,3561,2.887,3562,2.887,3563,2.887,3564,2.887,3565,2.887,3566,2.512,3567,2.512,3568,2.887,3569,6.176,3570,2.512,3571,4.183,3572,2.887,3573,2.887,3574,2.887,3575,4.807,3576,4.807,3577,2.661,3578,2.887]],["component/17",[5,0.286]],["keyword/17",[]],["title/18-1",[2204,55.777]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["keyword/18-1",[]],["title/18-2",[231,38.707]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["keyword/18-2",[]],["title/18-3",[159,20.722,315,13.508,375,27.719,476,24.203,3566,43.524,3567,43.524]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["keyword/18-3",[]],["title/18-4",[261,40.545,476,38.093]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["keyword/18-4",[]],["title/18",[14,19.009,29,14.138,164,33.881,185,18.44,258,18.775,1802,28.058,1803,30.337,3579,31.058]],["name/18",[164,1.134]],["text/18",[0,2.538,1,2.5,5,2.332,6,3.102,8,1.682,13,2.139,14,5.695,29,1.364,31,1.92,63,3.923,138,2.256,139,3.701,161,1.237,164,5.09,169,1.758,178,2.927,185,1.779,206,3.195,207,3.423,209,2.755,213,3.697,221,1.823,223,2.035,226,3.402,228,2.177,231,3.71,239,2.446,240,3.076,246,2.77,247,1.869,248,2.005,249,2.36,250,1.857,255,6.216,256,3.635,257,2.334,258,5.931,259,3.635,261,4.02,272,2.005,284,3.464,286,4.573,290,3.558,303,1.7,315,2.108,318,3.762,323,2.218,326,2.139,351,2.158,354,1.947,360,4.144,363,4.514,369,2.99,375,3.522,388,4.317,398,2.158,402,1.823,411,1.894,417,3.032,428,2.388,433,2.309,436,5.09,440,5.661,445,2.158,452,3.165,459,3.246,467,4.242,472,3.269,474,3.165,476,5.652,477,7.149,484,2.545,488,3.488,513,2.177,526,3.75,527,1.947,546,3.762,548,4.575,553,4.5,554,2.97,576,1.606,588,2.158,593,2.262,596,2.158,602,1.894,724,3.075,738,2.139,890,5.847,967,2.068,981,2.36,1026,4.144,1043,2.927,1113,2.052,1116,3.269,1213,3.165,1224,2.808,1233,3.165,1254,4.02,1266,2.663,1276,2.864,1294,2.755,1367,3.269,1398,2.997,1476,3.423,1482,3.195,1487,2.005,1491,2.285,1524,2.621,1532,3.36,1538,1.834,1542,3.421,1558,2.334,1559,2.51,1562,3.522,1572,2.035,1586,2.158,1591,2.285,1615,2.068,1620,2.02,1622,2.218,1646,5.177,1656,2.085,1657,2.477,1669,4.788,1675,2.36,1679,2.334,1690,2.068,1691,2.285,1739,2.416,1743,2.663,1744,2.24,1770,3.488,1802,7.605,1803,8.508,1965,3.762,1966,3.075,1971,3.395,2038,3.596,2061,2.545,2066,2.663,2119,2.997,2120,2.334,2124,2.582,2163,4.081,2188,2.262,2244,2.755,2292,2.51,2317,9.418,2328,4.666,2462,3.762,2463,5.286,2469,3.675,2507,2.927,2525,2.997,2592,2.582,2702,3.269,2704,7.409,2816,2.388,3058,2.927,3380,3.762,3530,3.552,3536,3.762,3566,7.666,3567,8.308,3571,5.531,3579,6.468,3580,4.082,3581,3.552,3582,4.082,3583,3.269,3584,4.082,3585,2.545,3586,4.082,3587,5.859,3588,5.859,3589,5.859,3590,5.859,3591,3.762,3592,4.082,3593,6.356,3594,6.356,3595,4.082,3596,4.082,3597,4.082,3598,4.082,3599,2.997,3600,3.762,3601,3.552,3602,4.928,3603,3.395]],["component/18",[5,0.286]],["keyword/18",[]],["title/19-1",[231,38.707]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["keyword/19-1",[]],["title/19-2",[159,18.99,189,29.102,190,24.91,191,29.432,315,12.38,3604,42.252]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["keyword/19-2",[]],["title/19-3",[169,19.748,189,29.102,190,24.91,191,29.432,315,12.38,3605,42.252]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["keyword/19-3",[]],["title/19-4",[169,18.225,189,27.369,190,22.989,191,27.163,315,11.425,347,19.129,3606,38.994]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["keyword/19-4",[]],["title/19-5",[169,19.748,189,19.199,190,24.91,191,29.432,315,12.38,3607,42.252,3608,42.252]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["keyword/19-5",[]],["title/19-6",[158,24.229,169,19.748,189,19.199,190,24.91,191,29.432,315,12.38,3609,42.252]],["name/19-6",[]],["text/19-6",[]],["component/19-6",[]],["keyword/19-6",[]],["title/19-7",[315,21.261,356,47.171]],["name/19-7",[]],["text/19-7",[]],["component/19-7",[]],["keyword/19-7",[]],["title/19-8",[189,20.949,190,27.181,191,32.115,315,13.508,435,25.341,3610,46.104]],["name/19-8",[]],["text/19-8",[]],["component/19-8",[]],["keyword/19-8",[]],["title/19-9",[189,20.949,190,27.181,191,32.115,315,13.508,2744,29.606,3611,46.104]],["name/19-9",[]],["text/19-9",[]],["component/19-9",[]],["keyword/19-9",[]],["title/19-10",[189,20.949,190,27.181,191,32.115,315,13.508,3612,43.524,3613,46.104]],["name/19-10",[]],["text/19-10",[]],["component/19-10",[]],["keyword/19-10",[]],["title/19-11",[138,18.99]],["name/19-11",[]],["text/19-11",[]],["component/19-11",[]],["keyword/19-11",[]],["title/19-12",[138,12.639,169,26.353,323,33.241,3614,56.383]],["name/19-12",[]],["text/19-12",[]],["component/19-12",[]],["keyword/19-12",[]],["title/19-13",[142,26.663,189,25.62,284,27.148,354,29.178]],["name/19-13",[]],["text/19-13",[]],["component/19-13",[]],["keyword/19-13",[]],["title/19-14",[261,47.337]],["name/19-14",[]],["text/19-14",[]],["component/19-14",[]],["keyword/19-14",[]],["title/19-15",[14,30.934,258,30.554,1646,45.661]],["name/19-15",[]],["text/19-15",[]],["component/19-15",[]],["keyword/19-15",[]],["title/19-16",[258,30.554,347,31.13,1646,45.661]],["name/19-16",[]],["text/19-16",[]],["component/19-16",[]],["keyword/19-16",[]],["title/19-17",[523,49.081,548,34.112]],["name/19-17",[]],["text/19-17",[]],["component/19-17",[]],["keyword/19-17",[]],["title/19-18",[190,37.412,1487,33.81,3579,50.543]],["name/19-18",[]],["text/19-18",[]],["component/19-18",[]],["keyword/19-18",[]],["title/19-19",[255,43.626,1802,52.212]],["name/19-19",[]],["text/19-19",[]],["component/19-19",[]],["keyword/19-19",[]],["title/19-20",[258,22.198,357,21.065,467,27.181,506,27.445,553,25.548,3615,33.764]],["name/19-20",[]],["text/19-20",[]],["component/19-20",[]],["keyword/19-20",[]],["title/19-21",[3616,84.717]],["name/19-21",[]],["text/19-21",[]],["component/19-21",[]],["keyword/19-21",[]],["title/19-22",[161,23.859,278,46.597]],["name/19-22",[]],["text/19-22",[]],["component/19-22",[]],["keyword/19-22",[]],["title/19",[29,15.32,161,13.893,168,38.122,185,19.98,189,19.199,190,24.91,191,29.432]],["name/19",[168,1.178]],["text/19",[0,0.531,1,0.75,2,1.377,4,1.441,5,0.397,6,0.967,8,0.548,10,0.328,13,0.365,14,4.293,26,0.423,29,0.637,31,1.778,44,1.563,46,0.617,63,0.958,137,0.448,138,1.498,139,2.879,142,3.379,144,1.963,145,0.48,148,3.503,149,1.254,151,1.915,152,0.372,157,1.557,158,2.388,159,1.008,160,0.512,161,2.439,168,2.024,169,2.961,178,0.5,180,1.653,182,0.752,183,0.362,185,0.304,188,0.324,189,4.243,190,6.522,191,8.048,193,0.257,194,1.128,196,2.556,198,0.489,199,0.882,206,0.958,207,3.465,213,3.596,214,0.369,215,2.263,217,1.479,220,0.797,221,1.087,223,4.541,224,0.448,225,0.76,226,4.233,228,1.795,231,2.296,240,2.498,241,0.818,242,4.507,243,2.658,246,3.309,247,0.319,248,1.433,249,0.403,250,2.208,254,0.933,255,4.208,256,2.161,257,4.147,258,5.519,259,1.09,261,3.206,263,3.493,264,1.026,268,0.841,272,2.219,273,2.138,277,0.797,278,3.389,279,2.882,280,0.441,281,1.287,283,0.769,284,4.344,286,4.447,291,3.169,296,0.752,298,2.435,299,0.744,303,3.568,304,2.118,306,1.641,314,0.915,315,2.872,318,0.413,323,2.805,326,3.601,327,1.178,330,0.982,336,1.189,341,1.424,344,0.716,347,2.334,350,0.365,351,0.703,352,0.541,353,1.254,354,4.946,356,6.609,357,2.52,360,1.373,362,1.494,364,1.865,365,0.429,366,0.882,369,0.897,371,0.951,375,2.688,376,0.674,378,2.556,386,0.435,388,2.043,390,0.691,392,0.639,394,0.76,397,0.448,398,2.2,402,2.671,406,1.172,411,2.776,415,2.551,416,2.814,417,4.476,418,2.195,420,3.804,421,1.264,422,0.778,424,0.48,428,1.969,432,1.287,433,1.651,435,2.615,436,0.558,438,0.39,440,0.744,441,0.818,445,0.369,448,2.672,452,1.031,459,1.93,463,0.73,465,0.668,466,1.079,467,3.251,469,0.58,476,3.122,477,2.098,478,2.504,480,0.512,485,0.455,497,0.423,498,2.349,502,0.379,505,0.423,506,3.878,508,0.423,509,0.854,510,4.289,523,5.414,526,1.815,527,0.634,529,0.48,531,0.703,537,0.429,538,0.403,540,0.867,541,0.408,545,2.458,546,2.464,547,2.347,548,4.931,551,0.362,553,4.651,554,1.945,557,1.865,563,0.607,571,1.392,574,1.919,576,1.324,578,0.455,579,0.525,580,0.462,581,0.737,584,0.386,587,0.383,588,1.997,592,0.854,593,1.865,594,1.539,596,0.703,597,1.008,602,1.355,707,3.433,712,2.109,722,1.997,725,1.795,732,0.261,734,1.079,735,0.386,738,0.365,744,1.128,756,1.079,760,1.367,768,1.377,772,0.512,783,1.189,788,0.778,794,0.607,799,0.744,800,0.525,802,0.691,807,0.744,811,1.128,823,2.237,825,0.898,830,0.448,843,1.157,847,0.882,848,1.887,849,2.237,860,1.008,890,0.403,895,0.471,918,1.204,957,0.512,960,0.915,964,0.841,967,1.233,981,1.102,1012,1.408,1015,0.418,1024,2.388,1026,0.897,1044,1.106,1058,1.708,1093,0.668,1113,0.35,1133,0.512,1140,0.39,1141,0.423,1148,0.379,1153,0.441,1219,1.065,1224,0.48,1229,2.347,1294,1.97,1340,0.58,1360,0.933,1458,2.871,1477,0.841,1482,0.35,1487,4.692,1488,2.985,1490,2.048,1491,0.39,1499,1.392,1501,1.079,1507,0.379,1512,2.551,1519,0.441,1521,0.386,1522,1.634,1523,1.887,1524,1.874,1525,0.58,1526,2.742,1527,0.541,1528,0.674,1531,0.668,1532,1.008,1536,0.435,1538,0.313,1540,0.441,1541,0.58,1544,0.697,1546,0.697,1547,1.128,1548,1.189,1551,1.477,1557,0.471,1558,1.09,1559,1.172,1560,1.539,1562,1.618,1563,0.525,1564,0.471,1565,0.423,1572,0.951,1575,0.365,1577,0.933,1583,2.465,1585,0.413,1586,0.369,1589,1.287,1590,0.974,1591,2.89,1593,0.63,1594,2.464,1595,0.573,1608,0.744,1609,1.298,1610,1.142,1614,3.507,1615,1.479,1616,0.867,1620,1.87,1622,0.723,1631,0.455,1634,0.455,1635,2.237,1639,0.435,1642,0.462,1644,0.441,1646,1.614,1656,3.179,1657,2.526,1658,1.115,1669,0.525,1673,0.394,1675,1.408,1676,5.186,1679,0.399,1688,0.5,1690,0.674,1691,0.39,1697,0.807,1702,4.087,1707,3.132,1715,0.386,1724,1.377,1731,1.643,1732,0.48,1734,0.898,1735,1.079,1736,0.359,1742,0.441,1744,1.602,1745,0.752,1751,0.807,1754,0.413,1757,0.383,1765,1.643,1770,2.662,1787,0.558,1788,0.525,1802,5.905,1807,0.716,1815,0.778,1854,0.365,1859,0.58,1868,1.298,1874,1.441,1885,0.744,1893,0.607,1902,0.408,1904,2.678,1905,0.607,1936,0.525,1942,0.441,1951,0.418,1953,0.423,1957,1.812,1958,0.399,1970,3.968,1977,1.424,1982,1.157,1989,0.489,1990,1.969,1991,1.949,1992,3.143,1996,0.982,1999,0.976,2002,0.787,2003,0.441,2013,0.448,2020,0.787,2028,0.413,2032,0.455,2038,0.394,2061,0.435,2066,0.867,2077,1.4,2084,4.491,2089,2.098,2119,0.976,2120,1.392,2123,0.462,2124,0.841,2131,0.455,2134,0.48,2137,0.48,2142,0.541,2148,0.408,2154,1.812,2163,0.854,2186,0.448,2188,2.307,2189,0.854,2213,0.607,2215,1.243,2216,1.142,2218,0.558,2219,1.157,2220,0.512,2240,1.067,2242,0.643,2244,2.272,2249,2.024,2258,2.427,2260,0.607,2262,0.607,2264,0.607,2266,0.607,2268,0.607,2273,1.458,2277,1.585,2279,1.585,2292,0.818,2295,0.841,2296,1.527,2298,0.525,2303,0.541,2317,5.463,2328,0.512,2362,0.954,2363,0.58,2371,0.489,2372,0.441,2374,0.525,2394,0.5,2400,2.315,2409,0.48,2414,0.471,2441,1.264,2444,0.807,2452,0.39,2456,2.195,2458,0.933,2459,0.455,2466,0.643,2469,0.769,2488,0.787,2490,0.854,2494,1.436,2507,2.71,2525,1.787,2528,0.58,2533,0.455,2538,0.541,2544,0.558,2547,0.408,2583,0.429,2584,2.024,2586,0.5,2588,1.026,2592,2.129,2600,0.525,2605,0.867,2614,1.904,2625,0.5,2647,0.512,2670,0.48,2701,0.58,2704,0.933,2724,0.58,2726,1.189,2743,0.489,2744,3.541,2749,0.607,2751,1.478,2758,0.558,2764,0.408,2798,0.558,2804,0.558,2812,1.002,2831,0.525,2834,0.489,2842,0.607,2843,0.607,2845,2.609,2846,0.48,2867,3.932,2871,3.778,2879,0.5,2893,0.5,2909,0.455,2917,0.5,2920,0.541,2959,3.026,2963,0.58,3011,0.58,3036,0.58,3067,1.002,3092,0.558,3124,0.643,3161,0.643,3162,0.643,3218,0.525,3289,1.585,3413,1.031,3470,1.226,3514,0.607,3528,0.5,3542,0.643,3570,0.607,3579,5.908,3583,0.558,3604,2.69,3605,5.026,3606,4.471,3607,8.107,3608,3.836,3609,4.758,3610,2.69,3611,2.69,3612,2.118,3613,3.483,3614,10.865,3615,2.81,3616,4.758,3617,0.697,3618,0.697,3619,0.697,3620,2.118,3621,0.525,3622,0.643,3623,0.778,3624,0.558,3625,5.323,3626,0.697,3627,0.697,3628,1.031,3629,1.33,3630,1.065,3631,1.33,3632,1.33,3633,0.697,3634,1.33,3635,0.697,3636,1.906,3637,1.33,3638,2.434,3639,3.366,3640,2.434,3641,0.697,3642,0.697,3643,0.697,3644,1.33,3645,1.33,3646,0.697,3647,0.697,3648,0.697,3649,5.453,3650,0.697,3651,0.697,3652,1.33,3653,0.697,3654,0.697,3655,0.697,3656,0.697,3657,0.643,3658,2.919,3659,0.697,3660,0.697,3661,0.697,3662,0.558,3663,0.558,3664,0.558,3665,0.512,3666,0.512,3667,0.697,3668,0.607,3669,0.697,3670,1.157,3671,0.697,3672,5.162,3673,1.031,3674,0.697,3675,5.453,3676,0.697,3677,1.33,3678,1.527,3679,2.427,3680,0.697,3681,1.226,3682,0.643,3683,1.226,3684,1.906,3685,0.558,3686,1.002,3687,1.906,3688,1.33,3689,0.697,3690,0.643,3691,1.906,3692,0.697,3693,0.697,3694,2.434,3695,0.697,3696,0.541,3697,1.33,3698,0.697,3699,0.607,3700,0.697,3701,2.919,3702,0.697,3703,2.338,3704,4.519,3705,0.697,3706,1.659,3707,3.779,3708,0.697,3709,0.697,3710,1.659,3711,0.697,3712,0.697,3713,0.697,3714,2.434,3715,1.906,3716,2.434,3717,0.697,3718,1.33,3719,0.697,3720,0.697,3721,1.157,3722,0.697,3723,0.697,3724,0.541,3725,0.643,3726,1.33,3727,1.906,3728,1.33,3729,0.697,3730,0.697,3731,0.697,3732,0.697,3733,3.779,3734,4.851,3735,2.919,3736,0.697,3737,0.697,3738,0.697,3739,0.697,3740,1.33,3741,1.949,3742,0.697,3743,1.226,3744,1.33,3745,0.697,3746,0.697,3747,1.33,3748,0.697,3749,0.643,3750,0.697,3751,0.697,3752,0.643,3753,0.697,3754,2.599,3755,4.204,3756,4.034,3757,4.464,3758,1.157,3759,1.745,3760,0.607,3761,0.607,3762,1.157,3763,0.607,3764,0.607,3765,0.697,3766,0.915,3767,3.779,3768,4.519,3769,0.58,3770,0.607,3771,0.58,3772,0.697,3773,0.697,3774,0.697,3775,0.58,3776,0.558,3777,0.697,3778,0.697,3779,0.512,3780,0.697,3781,0.697,3782,0.697,3783,0.697,3784,0.697,3785,1.33,3786,0.697,3787,1.906,3788,0.697,3789,1.031,3790,1.33,3791,1.33,3792,1.906,3793,0.697,3794,0.5,3795,0.697,3796,0.697,3797,0.697,3798,0.697,3799,0.697,3800,0.58,3801,0.697,3802,0.697,3803,0.58,3804,0.643,3805,0.643,3806,0.643,3807,0.643,3808,0.697,3809,0.541,3810,0.643,3811,0.697,3812,1.33,3813,0.697,3814,0.643,3815,0.697,3816,0.697]],["component/19",[5,0.286]],["keyword/19",[]],["title/20",[29,16.716,161,15.159,167,38.778,185,21.802,548,21.674,928,26.206]],["name/20",[167,1.098]],["text/20",[0,3.181,1,3.133,5,3.061,6,4.071,8,3.282,13,4.173,14,3.579,29,2.662,142,4.936,159,4.244,161,3.903,165,8.204,167,7.942,185,3.471,226,4.465,244,7.716,258,5.026,267,4.965,277,6.138,326,5.367,350,5.933,354,4.886,357,3.354,388,3.601,402,3.556,463,4.37,548,5.486,576,3.133,594,6.479,596,4.21,928,6.633,1432,6.93,1546,4.173,1642,5.282,1646,5.282,1676,6.096,1685,6.624,1706,6.3,1751,6.217,1768,4.833,2038,4.506,2120,4.555,2405,4.898,2448,8.397,2469,4.606,2471,8.121,2872,7.341,3817,6.93,3818,7.965,3819,7.341]],["component/20",[5,0.286]],["keyword/20",[]],["title/21-1",[2204,55.777]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["keyword/21-1",[]],["title/21-2",[2875,41.611,3820,68.502]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["keyword/21-2",[]],["title/21-3",[237,56.519]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["keyword/21-3",[]],["title/21-4",[139,23.712,291,30.041,3821,61.173,3822,56.383]],["name/21-4",[]],["text/21-4",[]],["component/21-4",[]],["keyword/21-4",[]],["title/21-5",[237,42.336,2909,44.907,3823,57.255]],["name/21-5",[]],["text/21-5",[]],["component/21-5",[]],["keyword/21-5",[]],["title/21-6",[163,53.374,207,30.187,2901,49.369]],["name/21-6",[]],["text/21-6",[]],["component/21-6",[]],["keyword/21-6",[]],["title/21-7",[2693,65.909]],["name/21-7",[]],["text/21-7",[]],["component/21-7",[]],["keyword/21-7",[]],["title/21",[29,10.806,159,13.395,161,9.8,163,25.067,185,14.093,193,11.906,258,14.35,284,14.35,348,22.69,388,14.62,1806,20.76,2793,28.135]],["name/21",[163,1.098]],["text/21",[0,1.262,1,1.243,5,0.944,6,1.825,8,0.509,9,1.447,10,0.581,13,0.647,14,4.282,20,0.759,21,0.691,29,0.413,31,2.16,44,2.52,46,1.055,63,2.308,138,0.47,139,4.419,142,0.538,146,3.554,147,1.181,149,1.628,151,1.152,152,2.763,153,1.713,159,4.009,161,0.689,163,2.45,169,3.145,185,0.538,188,0.573,189,0.517,190,1.236,193,3.509,194,1.87,195,0.906,196,0.698,203,0.781,204,0.706,206,1.143,207,2.014,213,3.458,214,2.738,217,2.888,221,2.313,223,2.583,226,2.258,228,0.658,231,1.331,237,1.943,239,1.894,244,0.74,245,0.714,246,3.662,247,4.556,250,0.562,258,5.881,261,1.171,263,4.057,272,2.544,273,2.221,279,4.948,284,4.949,286,4.106,290,1.769,291,0.606,294,6.689,297,7.576,303,0.514,305,1.763,306,4.305,307,0.989,315,2.133,323,0.671,324,1.978,325,2.52,326,6.32,327,2.506,330,2.022,347,1.429,348,8.038,350,2.057,351,2.075,353,2.022,356,2.352,357,2.596,360,1.846,362,1.009,363,1.315,365,2.414,369,1.487,375,3.416,376,4.37,378,1.286,379,4.644,382,3.764,386,0.77,388,4.872,391,1.33,392,1.518,398,2.428,402,1.015,403,2.266,406,5.166,407,1.398,411,2.404,416,1.07,417,5.35,420,1.701,421,2.961,428,2.296,438,1.769,440,2.9,445,4.77,446,1.508,448,0.793,455,1.074,456,4.233,461,2.096,463,2.842,465,0.621,466,0.698,484,0.77,485,2.56,494,2.323,502,1.717,508,0.749,510,2.057,516,1.121,526,0.593,527,1.084,534,2.52,537,1.398,538,3.296,539,2.245,540,1.786,541,0.722,542,1.362,545,3.123,546,1.346,547,2.961,551,1.641,554,1.834,556,0.866,557,1.751,574,3.976,576,0.486,581,0.684,584,1.26,587,5.143,592,1.46,593,3.159,594,1.438,595,0.833,601,1.596,626,0.906,707,5.042,708,0.989,712,0.625,734,0.698,747,0.749,748,0.749,824,1.074,825,0.833,850,1.346,871,2.603,891,6.721,897,7.958,908,0.698,910,0.731,918,2.563,932,0.74,964,0.781,965,2.598,967,0.625,1024,2.738,1059,1.763,1061,5.851,1062,0.781,1140,0.691,1148,1.236,1218,0.781,1229,0.597,1276,0.866,1329,1.138,1345,0.989,1360,0.866,1476,0.541,1477,0.545,1479,0.714,1482,1.143,1487,0.606,1490,1.596,1491,3.191,1496,4.021,1499,0.706,1501,0.698,1507,0.671,1510,0.93,1512,2.65,1515,1.38,1526,0.749,1532,1.202,1538,1.022,1542,0.665,1543,0.698,1544,0.647,1546,2.057,1548,0.77,1551,3.459,1558,3.26,1562,0.684,1565,2.382,1572,1.957,1573,0.731,1577,4,1585,0.731,1590,1.161,1591,0.691,1594,3.896,1606,0.722,1608,0.691,1609,0.658,1610,1.894,1615,2.888,1620,3.613,1622,3.098,1639,1.418,1640,0.885,1656,3.362,1657,1.918,1673,1.286,1677,0.849,1679,0.706,1691,1.273,1694,2.626,1697,1.38,1732,1.564,1736,1.171,1742,0.781,1744,1.248,1757,2.842,1768,4.223,1770,0.677,1806,4.468,1807,3.746,1822,0.698,1833,0.989,1841,3.459,1852,0.665,1854,1.656,1862,1.769,1870,0.866,1883,0.722,1902,0.722,1904,0.606,1910,2.096,1932,0.957,1935,2.755,1937,1.3,1942,1.999,1943,2.957,1944,0.698,1945,1.535,1953,3.459,1966,0.93,1993,0.93,1996,1.171,1997,0.885,1998,0.989,2013,0.793,2021,3.264,2026,0.957,2044,1.63,2052,2.863,2067,0.74,2072,0.849,2079,1.564,2083,0.849,2104,0.849,2112,0.805,2126,0.957,2132,0.885,2135,1.027,2163,1.46,2186,0.793,2188,1.26,2204,0.749,2240,1.769,2295,0.781,2312,3.043,2363,5.787,2372,0.781,2392,0.989,2414,1.535,2423,0.759,2452,3.451,2467,0.957,2469,3.296,2510,1.074,2551,3.326,2558,0.833,2583,1.398,2585,0.989,2588,0.665,2593,0.833,2602,0.957,2625,0.885,2626,0.849,2689,2.133,2696,0.866,2729,1.669,2735,1.535,2790,4.233,2793,1.074,2826,0.957,2854,1.138,2861,0.805,2864,1.891,2871,0.749,2875,0.653,2900,1.763,2936,0.833,2990,4.74,2997,1.138,3032,5.139,3336,2.096,3337,1.138,3407,0.885,3413,0.957,3416,2.32,3498,3.416,3525,0.866,3526,0.957,3527,0.93,3601,1.074,3682,1.138,3794,0.885,3820,1.074,3822,7.279,3824,1.978,3825,1.235,3826,3.996,3827,0.93,3828,1.235,3829,2.274,3830,2.274,3831,2.274,3832,0.759,3833,1.235,3834,3.16,3835,1.074,3836,2.274,3837,2.274,3838,7.613,3839,1.235,3840,4.96,3841,1.235,3842,1.235,3843,1.027,3844,2.274,3845,1.138,3846,1.235,3847,1.074,3848,2.274,3849,8.402,3850,1.235,3851,2.096,3852,1.138,3853,1.763,3854,2.274,3855,3.926,3856,2.096,3857,3.618,3858,1.138,3859,1.074,3860,10.599,3861,4.593,3862,3.926,3863,5.7,3864,2.274,3865,3.16,3866,3.16,3867,1.235,3868,3.618,3869,1.235,3870,1.235,3871,1.821,3872,5.127,3873,2.096,3874,1.074,3875,0.957,3876,3.561,3877,2.628,3878,1.235,3879,0.93,3880,1.074,3881,1.235,3882,1.074,3883,2.096,3884,1.235,3885,1.027,3886,1.235,3887,1.138,3888,1.235,3889,1.235,3890,0.93,3891,0.74,3892,1.978,3893,0.819,3894,1.978,3895,0.957,3896,1.138,3897,1.235,3898,2.274,3899,1.891,3900,1.235,3901,2.32,3902,0.989,3903,1.235,3904,1.235,3905,1.138,3906,1.235,3907,2.957,3908,1.138,3909,1.138,3910,2.274,3911,1.235,3912,1.138,3913,1.235,3914,1.235,3915,1.027,3916,1.138,3917,1.235,3918,1.235,3919,1.027]],["component/21",[5,0.286]],["keyword/21",[]],["title/22-1",[142,30.008,161,20.866,354,32.839]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["keyword/22-1",[]],["title/22-2",[142,26.663,315,16.52,354,29.178,417,29.178]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["keyword/22-2",[]],["title/22-3",[2061,57.302]],["name/22-3",[]],["text/22-3",[]],["component/22-3",[]],["keyword/22-3",[]],["title/22",[29,20.443,161,18.539,185,26.663,3721,53.228]],["name/22",[160,1.04]],["text/22",[0,2.346,1,3.026,5,1.355,6,2.088,8,0.612,10,0.699,13,0.779,14,4.089,21,0.832,23,0.8,29,0.9,31,0.699,46,0.69,63,1.354,138,1.78,139,3.438,142,4.986,147,0.772,149,1.902,151,0.753,152,1.437,159,4.502,160,1.977,161,3.543,169,3.82,176,2.24,180,4.842,184,1.152,185,0.648,188,0.69,189,4.919,194,0.88,203,0.94,204,0.85,205,1.066,206,0.747,207,3.99,209,1.818,210,0.94,213,4.744,214,0.786,217,2.662,221,3.078,223,3.2,226,3.004,228,1.97,230,1.236,231,5.519,237,0.914,239,2.718,240,0.719,243,1.8,246,3.189,248,2.227,250,1.226,253,1.043,257,3.669,258,3.7,260,1.022,263,3.441,272,1.814,273,1.524,278,2.685,279,2.025,281,1.003,283,0.859,284,5.361,286,5.299,296,1.524,298,0.869,299,0.832,302,1.003,303,1.538,305,1.152,306,1.313,315,2.816,318,1.594,327,0.719,330,2.336,341,0.869,347,3.117,350,2.376,351,2.397,354,3.489,360,0.699,362,2.607,364,2.047,369,3.018,370,2.186,371,3.2,373,0.88,378,1.524,382,0.85,383,1.977,385,1.236,388,2.657,389,0.779,391,0.869,395,0.859,398,3.867,402,0.664,406,1.656,411,0.69,416,2.764,417,3.288,420,0.8,421,3.58,440,4.096,441,0.914,445,1.424,448,0.954,459,4.259,467,3.746,476,0.719,480,1.091,482,2.789,488,0.815,498,3.655,514,2.24,516,0.769,526,0.714,527,1.285,531,2.397,534,0.815,537,0.914,538,1.558,540,2.674,542,1.614,544,1.293,546,0.88,547,1.399,551,3.052,553,0.759,554,5.204,562,4.426,574,0.685,576,0.585,581,1.493,592,4.12,597,2.777,602,5.625,613,2.068,707,1.67,712,0.753,722,1.424,725,1.437,731,1.446,732,1.385,735,1.493,790,1.003,824,1.293,851,0.779,868,0.902,890,0.859,910,0.88,918,2.6,928,1.411,932,0.89,965,2.09,967,1.871,996,1.89,1001,0.88,1024,1.424,1026,2.764,1113,1.354,1125,0.954,1140,0.832,1148,0.808,1153,0.94,1219,1.19,1222,1.635,1245,5.112,1246,4.837,1250,1.043,1254,4.627,1295,2.483,1311,1.293,1458,4.08,1485,1.19,1486,1.37,1487,0.73,1491,1.508,1492,2.09,1496,5.785,1501,0.841,1507,0.808,1515,0.902,1519,0.94,1521,0.824,1522,2.539,1524,2.371,1528,0.753,1532,1.424,1538,1.21,1540,1.704,1542,0.8,1543,1.524,1546,1.935,1547,2.685,1551,1.635,1553,1.12,1556,2.344,1558,4.593,1559,0.914,1560,4.058,1562,2.514,1570,1.37,1572,4.296,1583,2.409,1585,0.88,1588,0.832,1589,1.003,1590,1.376,1591,1.508,1595,0.64,1615,2.977,1618,1.152,1620,2.6,1621,1.091,1634,0.969,1642,0.986,1656,2.684,1658,0.869,1661,2.566,1664,0.914,1672,1.853,1675,0.859,1690,0.753,1691,2.068,1694,0.85,1705,1.37,1730,1.152,1731,1.003,1735,2.566,1736,1.387,1739,0.88,1754,0.88,1757,2.027,1770,0.815,1806,2.912,1807,0.8,1814,1.12,1815,1.575,1818,1.236,1819,1.091,1821,1.043,1841,2.241,1850,1.12,1852,2.442,1868,4.284,1869,1.236,1874,2.685,1883,0.869,1902,0.869,1936,1.12,1937,0.85,1990,1.575,1996,0.765,1999,1.091,2002,1.594,2003,0.94,2022,0.969,2032,1.757,2034,2.653,2038,0.841,2053,1.977,2055,2.24,2067,2.213,2070,1.066,2087,2.068,2102,2.157,2128,0.902,2131,0.969,2136,2.029,2187,1.786,2213,2.344,2216,0.89,2219,2.344,2243,1.293,2249,3.072,2258,3.072,2273,2.213,2277,2.24,2279,2.24,2293,3.214,2296,2.958,2298,6.681,2301,9.233,2303,7.055,2304,2.54,2307,2.483,2333,3.183,2392,1.19,2394,1.931,2411,1.152,2418,2.828,2423,0.914,2424,1.066,2445,1.19,2452,4.096,2459,0.969,2467,1.152,2469,3.038,2533,1.757,2547,0.869,2572,3.768,2605,0.969,2626,1.022,2646,1.003,2729,1.091,2758,1.19,2846,2.54,2871,0.902,2878,1.152,2916,0.954,2937,1.043,3083,1.152,3217,2.336,3219,0.927,3223,1.236,3225,2.157,3268,5.998,3269,2.483,3270,1.37,3271,1.37,3286,1.37,3298,2.483,3299,1.37,3300,1.37,3301,2.483,3302,1.37,3303,1.37,3304,1.37,3356,2.483,3357,1.37,3358,1.37,3359,1.37,3360,1.37,3361,1.37,3362,1.37,3479,1.89,3621,1.12,3628,2.088,3666,1.091,3721,1.293,3769,2.24,3814,1.37,3877,1.236,3891,0.89,3899,1.236,3902,1.19,3912,1.37,3920,2.483,3921,1.486,3922,1.486,3923,5.255,3924,1.293,3925,1.486,3926,1.486,3927,1.486,3928,1.486,3929,1.486,3930,1.486,3931,1.486,3932,1.236,3933,1.37,3934,1.486,3935,1.486,3936,1.37,3937,1.486,3938,1.37,3939,1.486,3940,2.693,3941,1.236,3942,2.693,3943,1.486,3944,1.486,3945,1.236,3946,11.053,3947,9.313,3948,8.338,3949,1.486,3950,1.293,3951,3.214,3952,1.091,3953,1.486,3954,2.693,3955,2.693,3956,1.486,3957,1.293,3958,1.236,3959,1.152,3960,1.003,3961,1.19,3962,2.693,3963,1.37,3964,2.693,3965,2.693,3966,4.536,3967,6.893,3968,2.693,3969,2.693,3970,4.536,3971,1.486,3972,2.344,3973,2.483,3974,1.37,3975,1.486,3976,1.486,3977,1.486,3978,1.486,3979,1.486,3980,1.486,3981,1.486,3982,1.486,3983,1.486,3984,1.486,3985,1.486,3986,1.486,3987,1.486,3988,1.486,3989,1.486,3990,1.486,3991,1.486,3992,1.486,3993,1.486,3994,1.486,3995,1.486,3996,1.486,3997,1.486,3998,1.486,3999,1.486,4000,1.486,4001,1.486,4002,1.486,4003,1.486,4004,1.486,4005,1.486,4006,1.486,4007,1.486,4008,1.486,4009,1.486,4010,1.486,4011,1.486,4012,1.486,4013,1.486,4014,1.486,4015,1.486,4016,1.486,4017,1.486,4018,1.486,4019,1.293]],["component/22",[5,0.286]],["keyword/22",[]],["title/23-1",[189,28.834,255,38.153,256,39.372]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["keyword/23-1",[]],["title/23-2",[169,23.709,255,30.499,256,31.474,315,14.863,3260,44.076]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["keyword/23-2",[]],["title/23",[29,13.126,161,11.904,178,28.166,185,17.12,255,21.766,256,22.462,258,17.431,346,16.541,3579,28.835]],["name/23",[178,1.015]],["text/23",[0,2.209,1,2.175,5,1.652,6,2.764,8,1.411,13,1.794,14,4.21,18,3.804,29,1.145,31,1.611,44,3.551,63,1.721,139,4.639,151,2.802,154,3.096,157,2.95,158,2.923,161,2.84,169,2.996,178,3.966,183,1.779,185,1.493,186,2.078,188,1.589,189,2.316,198,4.881,207,4.108,210,2.166,213,4.438,214,2.923,217,1.735,221,2.469,223,2.758,224,2.199,226,3.48,231,4.582,237,2.106,240,6.029,241,3.401,242,4.166,243,1.669,255,6.859,256,7.419,257,3.978,258,5.454,278,2.027,280,2.166,284,2.454,286,5.375,303,2.897,314,2.356,315,2.939,316,1.81,323,3.005,326,4.183,327,2.676,346,1.442,353,2.848,354,4.179,357,1.442,362,3.888,369,1.611,371,3.468,375,1.898,386,2.135,388,1.549,389,1.794,392,1.645,397,2.199,402,2.469,416,1.611,420,2.977,421,3.613,428,5.125,433,1.938,452,6.19,459,2.825,465,2.779,476,5.127,477,2.135,491,3.356,498,2.517,502,1.861,510,2.897,526,1.645,527,4.469,538,3.198,540,1.559,545,1.735,546,2.027,547,1.779,550,2.514,551,3.613,554,4.093,580,2.271,581,1.898,597,3.676,598,2.58,602,2.566,724,2.58,823,2.027,890,5.933,918,3.442,930,3.448,961,2.456,981,1.98,1024,1.81,1025,2.199,1116,2.743,1193,2.655,1194,2.514,1213,2.655,1224,2.356,1233,2.655,1254,2.166,1360,2.403,1461,4.287,1482,1.721,1492,1.938,1496,2.234,1501,5.995,1512,3.733,1516,2.655,1524,2.199,1526,2.078,1528,1.735,1531,1.721,1543,1.938,1544,2.897,1554,5.106,1569,2.403,1572,3.468,1590,1.749,1609,3.71,1664,2.106,1674,2.106,1677,3.804,1690,1.735,1706,2.106,1724,1.938,1729,2.58,1732,2.356,1744,1.879,1754,2.027,1804,9.087,1805,5.725,1815,2.003,1854,2.897,1862,3.096,1883,2.003,1902,2.003,1904,3.416,1906,3.273,1945,2.312,1953,2.078,1958,3.163,2012,4.881,2022,3.607,2050,2.271,2056,2.743,2070,2.456,2119,2.514,2120,3.163,2163,2.199,2207,2.58,2290,2.743,2317,7.059,2323,2.848,2331,2.743,2338,2.514,2377,2.403,2396,2.312,2423,2.106,2450,2.58,2452,1.917,2591,3.157,2592,4.399,2630,2.403,2688,6.052,2689,5.914,2700,2.58,2708,2.98,2709,2.98,2711,3.157,2712,3.157,2726,3.448,2798,2.743,2799,3.498,2820,3.607,2908,2.655,3058,3.966,3070,2.743,3217,2.166,3260,7.504,3407,2.456,3462,4.429,3524,2.98,3530,2.98,3571,4.812,3579,4.06,3587,5.097,3588,5.097,3589,5.097,3590,5.097,3591,5.097,3630,2.743,3856,3.157,3951,2.98,3952,2.514,3957,2.98,4020,8.762,4021,3.157,4022,3.425,4023,2.58,4024,3.157,4025,2.743,4026,2.743,4027,2.655,4028,3.425,4029,3.157,4030,3.425,4031,5.53,4032,5.53,4033,3.425,4034,2.58,4035,3.425,4036,2.743,4037,3.425]],["component/23",[5,0.286]],["keyword/23",[]],["title/24",[29,16.716,161,15.159,179,37.681,185,21.802,548,21.674,928,26.206]],["name/24",[179,1.067]],["text/24",[0,3.341,1,3.291,5,3.158,6,4.2,8,3.447,13,4.382,14,4.749,29,2.795,159,4.379,161,3.805,179,8.729,180,4.108,185,3.646,220,5.012,223,5.271,226,3.646,244,6.333,257,4.784,258,5.572,306,4.077,326,5.538,347,3.782,354,3.99,357,3.523,540,4.81,548,5.556,562,5.371,576,3.291,928,6.718,1466,6.141,1488,5.998,1676,6.902,1751,5.076,1796,7.279,1797,7.279,1996,4.308,2120,6.044,2448,7.01,2480,7.71,2786,7.71,3058,5.998,3067,7.962,4038,8.365,4039,7.71,4040,7.71,4041,8.365]],["component/24",[5,0.286]],["keyword/24",[]],["title/25-1",[159,25.342,169,26.353,188,28.388,602,28.388]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["keyword/25-1",[]],["title/25-2",[169,26.353,312,38.137,315,16.52,4042,56.383]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["keyword/25-2",[]],["title/25-3",[159,22.8,240,26.631,315,14.863,521,35.898,1478,41.46]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["keyword/25-3",[]],["title/25-4",[169,23.709,240,26.631,315,14.863,1688,39.466,1689,42.667]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["keyword/25-4",[]],["title/25-5",[159,22.8,315,14.863,354,26.251,476,26.631,1805,39.466]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["keyword/25-5",[]],["title/25-6",[161,20.866,180,33.81,188,31.95]],["name/25-6",[]],["text/25-6",[]],["component/25-6",[]],["keyword/25-6",[]],["title/25-7",[169,23.709,312,34.312,315,14.863,347,24.885,4043,50.728]],["name/25-7",[]],["text/25-7",[]],["component/25-7",[]],["keyword/25-7",[]],["title/25-8",[180,24.564,240,24.203,315,13.508,1455,40.058,1456,40.058,1457,41.597]],["name/25-8",[]],["text/25-8",[]],["component/25-8",[]],["keyword/25-8",[]],["title/25-9",[180,27.028,315,14.863,354,26.251,476,26.631,1461,42.667]],["name/25-9",[]],["text/25-9",[]],["component/25-9",[]],["keyword/25-9",[]],["title/25-10",[252,38.621,253,38.621,389,28.834,402,24.575,4044,55.037]],["name/25-10",[]],["text/25-10",[]],["component/25-10",[]],["keyword/25-10",[]],["title/25",[29,14.138,161,12.822,169,18.225,177,32.798,185,18.44,240,20.471,258,18.775,312,26.376]],["name/25",[177,1.098]],["text/25",[0,1.009,1,1.69,5,1.284,6,2.227,8,1.041,13,1.323,14,3.33,29,0.844,31,3.487,63,3.324,138,1.366,139,3.334,147,4.467,154,2.405,157,2.291,159,1.047,161,3.557,169,4.634,177,3.331,180,2.11,185,1.101,188,1.994,194,1.495,198,3.015,204,2.457,206,2.159,207,3.97,213,3.132,214,2.271,221,3.31,224,5.176,226,4.905,228,3.527,231,4.739,237,1.553,240,6.126,243,1.231,246,2.882,250,1.15,252,4.641,253,4.641,257,5.757,258,5.637,259,4.239,261,2.887,263,4.441,279,2.953,284,4.854,286,5.178,294,2.335,303,4.3,312,7.74,314,5.098,315,3.17,316,2.963,323,4.381,326,5.122,346,2.785,347,2.99,353,3.406,354,4.319,362,1.907,364,2.381,369,2.637,371,3.298,384,2.101,388,3.352,389,2.937,392,3.177,395,3.241,397,2.758,398,2.963,402,1.918,411,1.172,416,3.487,417,1.205,420,4.63,433,4.193,445,1.335,448,1.622,463,1.386,465,2.159,467,1.373,498,3.669,510,4.224,521,4.313,526,1.214,527,3.154,531,2.271,538,3.241,540,3.669,541,1.478,545,1.28,548,1.095,551,2.231,553,1.29,554,2.619,557,1.4,571,1.445,579,5.584,592,1.622,593,3.106,602,3.991,707,1.142,890,2.484,910,2.543,918,3.668,962,1.773,965,2.431,967,3.755,996,1.773,1001,1.495,1024,2.271,1026,2.637,1045,3.331,1113,1.27,1140,2.405,1238,1.495,1254,1.598,1456,4.489,1458,1.495,1461,3.331,1462,4.662,1488,3.081,1500,1.77,1507,2.335,1523,3.331,1525,2.101,1531,2.159,1542,2.313,1544,1.323,1547,3.914,1548,3.495,1559,2.642,1572,2.795,1581,6.314,1590,1.29,1591,2.405,1606,2.513,1609,2.291,1622,2.335,1631,5.61,1634,2.802,1635,2.543,1644,1.598,1673,1.429,1676,4.34,1682,6.095,1688,4.02,1690,2.177,1697,4.013,1702,2.484,1706,4.066,1708,6.095,1709,2.328,1710,2.328,1728,1.675,1741,2.457,1771,7.015,1788,4.223,1799,6.164,1805,4.02,1806,1.622,1837,3.914,1904,4.446,1906,2.543,1944,2.431,1953,3.402,1958,1.445,1996,1.301,2038,1.429,2052,1.575,2066,1.648,2118,3.402,2119,1.855,2120,2.457,2124,2.717,2296,2.023,2319,2.101,2320,2.198,2343,1.955,2377,3.015,2414,1.705,2459,2.802,2470,1.903,2547,1.478,2614,1.648,2642,7.878,2656,1.386,2682,2.328,2683,2.328,2689,2.9,2799,2.717,2812,1.903,2817,2.328,2818,2.101,2819,2.955,2820,2.802,2821,3.573,2822,2.328,2823,2.328,2824,1.958,2825,1.903,2826,1.958,2864,2.101,3058,3.081,3070,2.023,3246,2.328,3696,1.958,3882,2.198,4023,1.903,4029,3.96,4042,11.39,4043,10.908,4045,2.526,4046,1.903,4047,2.526,4048,4.296,4049,2.526,4050,2.526,4051,3.154,4052,3.236,4053,4.296,4054,3.96,4055,2.328,4056,4.296,4057,2.526,4058,2.526,4059,2.328,4060,2.526,4061,2.526,4062,2.526,4063,2.526]],["component/25",[5,0.286]],["keyword/25",[]],["title/26-1",[169,33.914,231,33.154]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["keyword/26-1",[]],["title/26-2",[158,32.333,169,26.353,315,16.52,562,39.275]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["keyword/26-2",[]],["title/26-3",[5,16.445,189,23.05,315,14.863,346,23.178,562,35.336]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["keyword/26-3",[]],["title/26-4",[14,27.486,193,22.525,315,16.52,562,39.275]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["keyword/26-4",[]],["title/26-5",[189,25.62,315,16.52,400,39.275,562,39.275]],["name/26-5",[]],["text/26-5",[]],["component/26-5",[]],["keyword/26-5",[]],["title/26-6",[142,18.44,149,21.789,315,11.425,335,24.464,562,27.163,1206,26.757,1782,31.058,1886,28.058]],["name/26-6",[]],["text/26-6",[]],["component/26-6",[]],["keyword/26-6",[]],["title/26-7",[189,23.05,315,14.863,548,23.848,562,35.336,928,28.834]],["name/26-7",[]],["text/26-7",[]],["component/26-7",[]],["keyword/26-7",[]],["title/26-8",[169,19.748,315,12.38,346,19.305,357,19.305,516,13.096,518,35.538,548,19.863]],["name/26-8",[]],["text/26-8",[]],["component/26-8",[]],["keyword/26-8",[]],["title/26-9",[169,23.709,240,26.631,315,14.863,1688,39.466,1689,42.667]],["name/26-9",[]],["text/26-9",[]],["component/26-9",[]],["keyword/26-9",[]],["title/26-10",[169,26.353,312,38.137,411,28.388,476,29.599]],["name/26-10",[]],["text/26-10",[]],["component/26-10",[]],["keyword/26-10",[]],["title/26-11",[315,16.52,354,29.178,476,29.599,1555,50.872]],["name/26-11",[]],["text/26-11",[]],["component/26-11",[]],["keyword/26-11",[]],["title/26-12",[169,26.353,315,16.52,1470,43.865,1901,50.872]],["name/26-12",[]],["text/26-12",[]],["component/26-12",[]],["keyword/26-12",[]],["title/26-13",[169,21.548,246,21.802,315,13.508,476,24.203,802,25.98,1903,40.058]],["name/26-13",[]],["text/26-13",[]],["component/26-13",[]],["keyword/26-13",[]],["title/26-14",[169,26.353,206,30.744,315,16.52,331,47.424]],["name/26-14",[]],["text/26-14",[]],["component/26-14",[]],["keyword/26-14",[]],["title/26-15",[169,23.709,303,22.924,315,14.863,548,23.848,1649,42.667]],["name/26-15",[]],["text/26-15",[]],["component/26-15",[]],["keyword/26-15",[]],["title/26-16",[169,23.709,315,14.863,375,30.499,383,40.404,389,28.834]],["name/26-16",[]],["text/26-16",[]],["component/26-16",[]],["keyword/26-16",[]],["title/26-17",[169,21.548,315,13.508,328,37.681,357,21.065,358,28.924,534,27.445]],["name/26-17",[]],["text/26-17",[]],["component/26-17",[]],["keyword/26-17",[]],["title/26-18",[138,16.265,169,33.914]],["name/26-18",[]],["text/26-18",[]],["component/26-18",[]],["keyword/26-18",[]],["title/26-19",[138,11.371,169,23.709,193,20.266,194,32.575,338,30.499]],["name/26-19",[]],["text/26-19",[]],["component/26-19",[]],["keyword/26-19",[]],["title/26-20",[193,15.578,286,17.248,290,23.685,346,17.817,347,19.129,371,21.096,392,20.323,1506,33.881]],["name/26-20",[]],["text/26-20",[]],["component/26-20",[]],["keyword/26-20",[]],["title/26-21",[193,25.352,357,28.994,534,37.776]],["name/26-21",[]],["text/26-21",[]],["component/26-21",[]],["keyword/26-21",[]],["title/26-22",[347,27.659,357,25.762,358,35.373,587,33.564]],["name/26-22",[]],["text/26-22",[]],["component/26-22",[]],["keyword/26-22",[]],["title/26-23",[193,15.578,286,17.248,290,23.685,346,17.817,347,19.129,392,20.323,425,31.87,1069,32.798]],["name/26-23",[]],["text/26-23",[]],["component/26-23",[]],["keyword/26-23",[]],["title/26-24",[193,25.352,357,28.994,534,37.776]],["name/26-24",[]],["text/26-24",[]],["component/26-24",[]],["keyword/26-24",[]],["title/26-25",[193,15.578,286,17.248,290,23.685,346,17.817,347,19.129,392,20.323,408,28.058,426,31.87]],["name/26-25",[]],["text/26-25",[]],["component/26-25",[]],["keyword/26-25",[]],["title/26-26",[193,25.352,357,28.994,534,37.776]],["name/26-26",[]],["text/26-26",[]],["component/26-26",[]],["keyword/26-26",[]],["title/26-27",[193,15.578,286,17.248,290,23.685,346,17.817,347,19.129,392,20.323,413,33.881,1194,31.058]],["name/26-27",[]],["text/26-27",[]],["component/26-27",[]],["keyword/26-27",[]],["title/26-28",[193,25.352,357,28.994,534,37.776]],["name/26-28",[]],["text/26-28",[]],["component/26-28",[]],["keyword/26-28",[]],["title/26-29",[29,15.32,161,13.893,171,38.122,185,19.98,358,26.508,2419,34.533,2995,38.122]],["name/26-29",[]],["text/26-29",[]],["component/26-29",[]],["keyword/26-29",[]],["title/26-30",[29,14.138,161,12.822,172,32.798,185,18.44,193,15.578,290,23.685,346,17.817,1487,20.776]],["name/26-30",[]],["text/26-30",[]],["component/26-30",[]],["keyword/26-30",[]],["title/26-31",[29,12.249,161,11.109,173,31.894,185,15.976,357,15.436,358,21.195,412,19.918,2089,22.852,3020,27.612,4064,36.655]],["name/26-31",[]],["text/26-31",[]],["component/26-31",[]],["keyword/26-31",[]],["title/26-32",[29,14.138,161,12.822,174,33.881,185,18.44,243,20.622,286,17.248,293,33.881,298,24.746]],["name/26-32",[]],["text/26-32",[]],["component/26-32",[]],["keyword/26-32",[]],["title/26-33",[29,11.482,138,7.099,146,21.421,161,10.413,175,29.897,185,14.976,192,28.574,193,12.652,194,20.337,195,25.224,196,19.438]],["name/26-33",[]],["text/26-33",[]],["component/26-33",[]],["keyword/26-33",[]],["title/26-34",[29,14.138,161,12.822,176,35.183,185,18.44,197,33.881,198,29.688,199,28.058,4065,38.994]],["name/26-34",[]],["text/26-34",[]],["component/26-34",[]],["keyword/26-34",[]],["title/26-35",[169,21.548,194,29.606,315,13.508,375,27.719,3525,35.101,3972,43.524]],["name/26-35",[]],["text/26-35",[]],["component/26-35",[]],["keyword/26-35",[]],["title/26",[5,16.445,29,18.393,169,23.709,184,42.667,602,25.541]],["name/26",[169,0.61]],["text/26",[0,0.887,1,1.108,2,0.883,4,0.332,5,0.396,6,1.465,7,0.169,8,0.118,10,0.623,13,0.15,14,2.174,18,0.386,21,0.16,23,1.081,24,3.088,26,0.174,29,0.598,31,2.336,46,3.325,52,0.35,63,1.319,136,0.197,137,0.36,138,2.114,139,3.494,142,0.78,144,1.363,146,0.973,147,1.831,149,0.682,150,0.21,151,1.949,152,1.502,154,0.16,157,1.88,158,0.571,159,1.087,160,0.412,161,2.336,169,4.249,170,1.102,171,0.898,172,1.21,173,0.488,174,0.449,175,0.94,176,0.898,178,0.402,179,0.216,180,1.383,182,0.611,183,0.429,184,0.222,185,0.245,186,1.348,188,1.712,189,2.079,191,0.184,193,3.851,194,2.939,195,7.693,196,2.431,197,0.229,198,0.93,199,1.991,203,0.181,204,1.023,206,3.049,207,3.294,209,0.193,211,0.412,213,3.737,214,1.174,217,0.547,218,0.936,220,0.647,221,2.272,223,4.229,224,0.184,225,0.472,226,4.137,228,0.707,231,2.243,232,1.315,233,1.33,235,1.162,239,1.454,240,4.056,241,0.664,242,0.423,243,1.636,244,0.647,245,1.162,246,4.108,247,1.901,248,1.191,249,1.162,250,1.889,254,0.579,255,0.159,256,0.618,257,1.717,258,4.828,259,1.023,261,1.728,262,0.784,263,2.087,264,1.306,265,0.815,267,0.515,268,0.522,272,1.289,273,0.75,277,1.072,278,0.639,279,4.391,280,0.522,281,1.356,282,0.632,283,2.314,284,4.496,285,0.673,286,4.867,289,2.645,290,6.594,291,4.324,292,1.528,293,1.25,294,1.092,295,0.517,296,1.593,297,2.776,298,4.058,299,1.358,302,0.894,303,3.236,306,1.636,307,1.061,308,0.704,311,2.767,312,1.115,314,1.937,315,2.554,316,0.571,317,0.814,318,0.639,320,0.249,321,0.222,322,1.387,323,2.629,326,1.375,327,3.431,328,4.783,329,0.328,330,2.213,331,2.183,332,0.264,334,0.639,335,0.625,336,1.636,338,3.308,339,0.264,341,1.647,343,0.181,344,2.154,346,2.555,347,4.558,348,0.93,349,5.494,350,3.594,351,1.387,352,1.557,353,1.728,354,2.117,355,2.337,356,4.293,357,5.038,358,5.768,359,2.335,360,2.505,361,0.592,362,2.558,363,4.596,364,3.617,369,3.335,370,0.169,371,1.404,373,0.639,375,1.953,376,2.103,377,2.678,378,0.75,382,0.321,383,1.313,386,0.178,387,0.435,388,4.277,389,1.475,390,2.156,391,0.483,392,3.05,393,0.178,395,1.518,398,0.7,399,0.402,400,1.927,402,3.027,403,1.441,405,0.184,406,0.508,407,0.176,408,1.332,409,0.21,410,2.174,411,2.723,412,3.893,413,3.976,415,0.379,416,3.264,417,4.22,418,1.018,419,1.673,420,2.739,421,2.078,422,3.047,423,0.579,424,0.386,425,4.421,426,4.182,427,1.671,428,1.535,433,1.012,435,0.284,438,0.16,439,0.379,440,2.405,441,0.345,442,2.012,443,4.469,444,0.21,445,1.682,446,3.123,448,1.29,449,0.222,450,0.205,454,0.394,457,0.568,458,2.268,459,1.34,463,1.44,465,2.432,466,0.467,467,1.318,468,0.495,470,0.355,471,0.216,475,1.557,476,1.624,478,0.991,480,0.412,482,0.508,483,0.576,484,0.673,487,0.576,488,2.111,490,0.605,491,0.341,492,0.264,493,3.757,494,0.639,497,0.341,498,1.955,499,0.222,500,0.21,502,0.305,503,0.386,505,0.174,506,0.308,508,0.174,509,0.36,510,0.433,512,0.238,513,0.576,515,0.216,516,0.379,518,1.21,519,0.249,521,0.187,523,0.515,525,0.661,526,0.519,527,0.853,529,0.386,531,1.489,532,0.21,533,0.716,534,2.195,536,0.205,537,0.664,538,1.84,539,0.472,540,0.376,541,0.483,542,0.336,545,1.949,546,3.285,547,0.929,548,3.312,551,1.559,552,0.538,553,1.134,554,2.593,555,0.622,557,4.436,558,0.21,562,1.927,567,0.682,568,0.394,569,0.998,570,0.592,571,0.164,574,2.508,575,0.249,576,1.574,577,0.176,578,0.366,579,0.622,580,0.372,581,0.457,584,0.599,587,0.982,588,1.682,589,2.678,590,0.238,592,1.927,593,2.459,595,1.499,596,0.571,597,2.557,600,0.898,602,3.424,707,3.54,712,2.027,716,0.467,722,1.282,724,0.998,725,2.44,732,0.585,734,1.136,738,0.294,744,0.639,747,0.341,748,0.341,756,0.75,768,1.257,776,0.222,780,0.386,783,1.252,788,0.167,790,0.193,799,0.605,802,0.929,807,0.605,811,1.189,823,0.784,825,0.379,830,0.693,832,0.174,837,0.197,843,0.655,850,0.489,851,0.694,856,0.178,857,0.222,860,1.282,870,0.216,874,0.386,880,0.222,881,0.538,883,0.394,890,0.903,891,0.936,895,0.379,897,0.201,900,0.606,904,0.622,908,0.611,918,1.394,924,0.216,928,1.052,931,0.193,940,0.402,950,0.379,960,0.386,961,0.402,965,0.611,967,1.33,970,0.197,971,0.205,975,0.197,981,0.903,995,0.197,996,0.201,1001,0.169,1012,0.165,1015,0.336,1024,0.571,1025,0.184,1026,1.578,1032,0.423,1041,0.229,1043,0.402,1058,0.201,1061,0.205,1062,0.181,1069,1.557,1093,0.785,1094,0.35,1102,0.661,1112,0.21,1113,1.933,1118,0.229,1136,0.423,1140,0.462,1141,0.655,1148,0.449,1153,0.181,1193,0.222,1194,0.973,1206,0.181,1218,0.522,1219,0.449,1222,0.501,1224,0.197,1229,0.866,1233,1.027,1238,1.059,1246,0.201,1247,1.176,1254,0.683,1266,0.366,1289,0.229,1294,0.193,1398,0.973,1433,0.249,1437,0.238,1438,1.439,1440,0.435,1446,0.423,1458,1.189,1466,0.21,1470,0.205,1476,2.528,1477,2.801,1478,0.216,1479,0.165,1480,0.661,1482,1.599,1487,1.474,1488,0.95,1490,1.255,1491,0.462,1492,0.611,1493,2.875,1496,1.583,1498,0.53,1499,0.758,1500,0.737,1501,1.898,1506,3.875,1507,0.72,1512,0.729,1515,0.341,1517,0.178,1519,0.181,1521,1.561,1522,1.358,1523,0.64,1524,0.693,1525,0.238,1526,1.219,1527,0.222,1528,0.284,1531,0.415,1532,1.174,1535,0.341,1536,0.178,1538,1.179,1540,0.683,1542,0.713,1543,0.467,1544,2.175,1545,0.372,1546,0.937,1547,1.883,1548,0.826,1549,0.21,1551,0.501,1553,0.423,1554,0.973,1555,1.298,1558,1.149,1560,0.522,1562,1.561,1563,0.216,1564,0.379,1565,2.036,1566,0.193,1567,0.238,1569,0.394,1572,2.07,1573,0.924,1575,2.965,1577,1.559,1578,2.397,1581,0.973,1582,0.386,1583,3.621,1585,0.169,1586,2.345,1588,1.002,1589,1.054,1590,2.044,1591,1.002,1593,0.391,1594,0.169,1595,1.213,1597,0.238,1606,0.632,1608,0.742,1609,1.88,1610,0.495,1612,2.92,1614,2.174,1615,1.427,1620,2.126,1622,0.449,1630,1.66,1632,0.467,1634,0.187,1635,1.436,1636,1.153,1640,0.205,1642,0.19,1644,0.181,1649,3.331,1654,0.568,1656,2.835,1657,0.341,1658,1.046,1659,0.222,1661,0.611,1663,0.661,1664,1.1,1668,0.606,1671,1.671,1672,0.386,1673,0.162,1675,0.324,1676,1.985,1678,0.661,1679,0.472,1688,3.081,1689,3.849,1690,1.612,1691,0.314,1694,0.618,1695,0.467,1697,1.086,1706,0.176,1707,0.655,1714,0.622,1715,0.734,1716,0.229,1717,0.488,1718,0.488,1719,0.488,1724,0.467,1725,0.508,1726,0.483,1728,0.19,1729,0.216,1730,0.222,1731,0.193,1732,0.197,1733,0.249,1734,0.557,1735,0.467,1736,1.352,1739,0.489,1741,1.387,1742,0.355,1744,1.102,1745,0.75,1746,1.153,1747,0.743,1748,0.774,1749,0.793,1750,1.153,1751,1.086,1752,0.467,1753,0.449,1754,0.169,1755,0.568,1756,0.568,1757,0.982,1758,0.336,1759,0.229,1760,0.222,1761,0.21,1762,0.193,1765,0.379,1768,0.341,1770,0.982,1772,0.687,1773,0.238,1774,0.229,1775,0.238,1776,0.238,1777,0.435,1778,0.238,1779,0.238,1780,0.95,1781,0.661,1782,0.21,1783,0.229,1784,0.229,1785,0.345,1786,1.054,1787,1.25,1788,0.423,1789,0.205,1790,0.216,1793,0.229,1794,0.222,1798,0.249,1799,0.238,1800,0.249,1802,0.548,1803,0.402,1805,0.402,1806,0.851,1807,1.081,1809,0.894,1811,0.467,1814,0.423,1815,0.328,1817,0.229,1819,0.412,1820,0.176,1821,0.394,1825,0.548,1829,2.236,1830,0.743,1831,0.517,1832,1.12,1833,0.229,1834,0.517,1835,0.184,1836,1.852,1837,2.086,1838,0.184,1840,0.21,1841,0.501,1842,2.823,1843,2.111,1844,1.231,1845,0.197,1849,1.441,1850,0.216,1852,0.581,1854,0.566,1855,2.268,1856,0.412,1857,0.394,1858,1.102,1861,0.94,1862,0.605,1867,0.345,1868,1.185,1870,0.394,1871,0.187,1872,0.238,1874,0.924,1878,1.593,1880,1.153,1883,0.483,1884,0.238,1886,0.19,1888,2.047,1889,0.264,1893,0.488,1894,0.517,1901,0.687,1902,1.046,1903,1.943,1904,1.289,1906,0.332,1932,0.435,1935,1.976,1937,0.164,1938,1.403,1939,0.154,1941,1.153,1942,0.355,1943,0.216,1944,1.012,1945,0.894,1947,0.155,1948,0.865,1949,0.94,1950,0.264,1951,0.794,1952,2.288,1953,0.947,1954,0.761,1955,0.517,1956,0.264,1957,1.713,1958,0.472,1959,0.264,1960,0.264,1962,0.238,1964,1.283,1966,0.216,1975,0.238,1976,1.638,1977,0.483,1979,0.93,1987,1.649,1988,1.221,1990,0.328,1991,0.229,1995,0.548,1996,0.682,1999,0.21,2000,1.002,2003,0.838,2020,0.489,2022,0.538,2027,0.187,2028,0.489,2030,0.995,2031,1.221,2032,0.538,2034,0.328,2038,2.087,2043,0.372,2050,0.879,2052,0.35,2054,0.205,2057,0.774,2060,0.936,2061,0.973,2066,0.187,2067,0.647,2070,0.95,2074,0.592,2075,0.64,2076,0.774,2079,0.197,2085,1.25,2086,0.238,2089,3.247,2099,0.517,2101,0.21,2104,0.197,2108,0.21,2112,0.538,2118,0.341,2119,0.412,2120,1.27,2122,0.222,2124,0.683,2125,0.238,2128,0.655,2130,0.515,2131,0.187,2134,0.197,2137,0.197,2156,0.205,2161,0.386,2162,0.36,2168,0.238,2169,0.249,2175,0.423,2182,0.216,2183,0.522,2188,1.454,2189,0.53,2191,0.548,2206,0.704,2207,0.216,2215,0.538,2216,0.171,2220,0.412,2236,0.222,2240,1.243,2244,0.193,2270,0.21,2273,0.647,2274,3.081,2290,0.449,2292,0.96,2294,0.488,2295,0.181,2298,0.216,2308,0.193,2309,0.538,2313,0.973,2321,0.366,2324,1.255,2325,0.837,2330,0.379,2331,0.229,2338,0.21,2343,0.13,2358,0.538,2362,0.592,2371,0.579,2372,0.838,2374,0.216,2377,0.394,2380,0.402,2390,1.149,2398,0.423,2399,0.249,2405,0.345,2409,0.386,2411,0.222,2412,0.402,2416,0.238,2418,0.515,2419,1.977,2423,0.345,2424,0.774,2430,1.1,2441,1.609,2443,0.229,2444,0.174,2447,0.488,2448,0.716,2449,0.222,2450,1.176,2452,0.314,2456,0.187,2459,0.187,2460,0.264,2463,0.238,2465,0.837,2469,0.324,2470,0.814,2477,0.264,2482,0.898,2483,3.249,2484,0.517,2487,0.264,2488,0.332,2489,0.911,2491,0.229,2492,0.229,2494,0.216,2495,0.467,2496,0.249,2497,1.054,2498,0.222,2499,0.402,2500,0.264,2501,0.517,2503,0.622,2504,0.264,2505,0.264,2509,0.264,2510,0.94,2511,0.264,2513,1.359,2521,0.264,2522,0.264,2523,0.238,2525,0.412,2526,0.201,2533,0.366,2534,0.187,2535,0.222,2536,0.19,2537,0.229,2538,0.222,2542,0.21,2547,0.167,2551,0.36,2553,0.264,2554,0.423,2558,0.557,2563,0.229,2566,0.197,2583,0.176,2585,0.229,2586,0.205,2588,0.154,2592,1.899,2595,0.238,2604,0.176,2605,0.187,2614,0.187,2620,0.249,2626,0.197,2627,0.264,2628,0.264,2629,0.517,2630,0.201,2632,0.467,2634,0.264,2638,0.264,2639,0.21,2642,0.249,2646,0.193,2647,0.21,2656,0.157,2660,0.488,2661,0.995,2664,0.517,2678,0.216,2680,0.264,2688,0.249,2689,1.356,2690,0.264,2700,0.216,2707,0.238,2717,0.264,2718,0.264,2727,0.412,2735,0.379,2739,0.229,2744,0.169,2745,0.579,2752,0.467,2753,0.229,2755,0.517,2756,0.264,2757,0.488,2762,0.197,2764,0.632,2769,0.94,2775,0.264,2776,0.264,2802,0.64,2809,0.366,2811,0.372,2816,0.632,2819,0.197,2820,0.187,2825,0.216,2828,1.348,2831,0.216,2834,0.394,2840,0.229,2846,0.197,2850,1.74,2851,0.216,2855,0.222,2861,0.187,2862,0.238,2870,0.184,2875,0.151,2879,0.402,2889,0.568,2890,3.218,2893,0.402,2895,0.851,2897,0.264,2908,0.435,2909,0.187,2911,0.449,2913,0.205,2916,0.184,2917,0.402,2920,0.222,2935,0.249,2936,0.193,2943,0.488,2948,0.229,2950,0.467,2956,0.412,2960,0.216,2963,0.467,2967,0.193,2968,0.412,2969,0.661,2970,0.238,2980,0.205,2995,3.805,3020,0.622,3031,0.517,3032,0.379,3037,0.238,3038,0.229,3058,0.205,3067,0.423,3069,0.517,3092,0.229,3103,0.222,3125,2.767,3132,0.264,3409,0.249,3414,0.467,3417,0.693,3461,0.412,3472,0.222,3483,0.449,3520,0.21,3525,3.484,3527,0.216,3585,0.515,3612,0.488,3621,0.216,3623,0.483,3624,0.661,3625,0.793,3668,0.249,3673,0.435,3741,0.229,3766,0.197,3794,0.402,3803,0.238,3832,0.176,3840,0.249,3853,0.435,3871,0.229,3873,0.264,3891,0.171,3893,0.19,3901,0.21,3902,0.449,3919,0.238,3924,0.249,3932,0.467,3950,0.249,3958,0.238,3960,0.193,3972,3.067,4036,0.229,4039,0.264,4040,0.264,4051,0.21,4054,0.264,4055,0.264,4065,0.995,4066,0.718,4067,0.286,4068,3.847,4069,0.286,4070,0.561,4071,1.08,4072,0.286,4073,0.286,4074,0.826,4075,0.561,4076,0.264,4077,0.286,4078,0.286,4079,0.561,4080,0.249,4081,0.449,4082,0.238,4083,0.201,4084,0.517,4085,0.264,4086,0.286,4087,0.229,4088,0.449,4089,0.264,4090,0.286,4091,0.286,4092,0.286,4093,0.286,4094,0.286,4095,0.249,4096,0.286,4097,0.286,4098,0.286,4099,0.286,4100,0.561,4101,0.286,4102,0.286,4103,0.286,4104,0.264,4105,0.286,4106,0.286,4107,0.264,4108,0.249,4109,0.517,4110,0.249,4111,1.325,4112,0.561,4113,0.561,4114,0.249,4115,0.64,4116,0.64,4117,0.286,4118,0.286,4119,0.286,4120,0.286,4121,0.561,4122,0.286,4123,0.286,4124,0.264,4125,0.238,4126,0.21,4127,0.286,4128,1.027,4129,0.286,4130,0.561,4131,0.286,4132,0.286,4133,0.286,4134,0.222,4135,0.286,4136,0.826,4137,5.216,4138,0.286,4139,0.286,4140,0.865,4141,0.561,4142,0.561,4143,0.264,4144,0.264,4145,0.286,4146,0.264,4147,0.286,4148,1.08,4149,0.286,4150,0.264,4151,0.286,4152,0.264,4153,0.286,4154,0.286,4155,0.264,4156,0.205,4157,0.264,4158,0.229,4159,0.286,4160,1.08,4161,0.286,4162,0.467,4163,0.21,4164,0.286,4165,0.561,4166,0.286,4167,0.249,4168,0.286,4169,0.467,4170,0.286,4171,0.229,4172,0.517,4173,0.286,4174,1.153,4175,1.325,4176,0.264,4177,0.264,4178,0.286,4179,0.286,4180,0.286,4181,0.286,4182,0.561,4183,0.286,4184,0.286,4185,0.286,4186,0.286,4187,0.286,4188,0.286,4189,0.286,4190,0.286,4191,0.286,4192,0.561,4193,1.08,4194,0.286,4195,0.561,4196,0.561,4197,0.561,4198,0.286,4199,0.286,4200,0.286,4201,0.286,4202,0.286,4203,0.286,4204,0.286,4205,0.286,4206,0.286,4207,0.561,4208,0.286,4209,1.08,4210,0.249,4211,0.205,4212,0.286,4213,0.561,4214,0.488,4215,0.467,4216,0.238,4217,0.761,4218,0.286,4219,0.517,4220,0.286,4221,0.286,4222,0.286,4223,0.238,4224,0.286,4225,0.826,4226,0.264,4227,0.561,4228,0.286,4229,0.286,4230,0.286,4231,0.286,4232,0.286,4233,0.286,4234,0.826,4235,0.561,4236,1.08,4237,0.286,4238,0.286,4239,0.488,4240,0.561,4241,0.561,4242,0.286,4243,0.561,4244,0.286,4245,0.249,4246,0.21,4247,0.264,4248,0.449,4249,0.718,4250,0.286,4251,0.286,4252,0.249,4253,0.238,4254,0.286,4255,0.286,4256,0.561,4257,0.286,4258,0.249,4259,0.264,4260,0.687,4261,0.286,4262,0.561,4263,0.264,4264,0.286,4265,0.286,4266,0.826,4267,0.517,4268,1.561,4269,0.249,4270,0.264,4271,0.286,4272,0.488,4273,0.286,4274,2.625,4275,2.625,4276,0.264,4277,0.238,4278,0.286,4279,0.286,4280,0.286,4281,0.286,4282,0.826,4283,0.865,4284,0.238,4285,0.286,4286,0.286,4287,0.286,4288,0.286,4289,3.525,4290,3.525,4291,0.718,4292,0.264,4293,0.286,4294,0.286,4295,0.264,4296,0.561,4297,0.286,4298,0.21,4299,0.286,4300,0.286,4301,0.517,4302,0.286,4303,0.216,4304,0.467,4305,0.286,4306,0.286]],["component/26",[5,0.286]],["keyword/26",[]],["title/27-1",[2204,55.777]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["keyword/27-1",[]],["title/27-2",[4307,67.476]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["keyword/27-2",[]],["title/27-3",[1770,50.431]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["keyword/27-3",[]],["title/27-4",[1483,57.795,1807,42.377]],["name/27-4",[]],["text/27-4",[]],["component/27-4",[]],["keyword/27-4",[]],["title/27-5",[1538,41.297]],["name/27-5",[]],["text/27-5",[]],["component/27-5",[]],["keyword/27-5",[]],["title/27-6",[303,28.677,1744,37.776,4308,63.458]],["name/27-6",[]],["text/27-6",[]],["component/27-6",[]],["keyword/27-6",[]],["title/27-7",[14,27.486,182,34.607,183,31.773,258,27.148]],["name/27-7",[]],["text/27-7",[]],["component/27-7",[]],["keyword/27-7",[]],["title/27-8",[182,31.136,183,28.586,193,20.266,284,24.425,2022,35.898]],["name/27-8",[]],["text/27-8",[]],["component/27-8",[]],["keyword/27-8",[]],["title/27-9",[161,20.866,182,38.949,183,35.759]],["name/27-9",[]],["text/27-9",[]],["component/27-9",[]],["keyword/27-9",[]],["title/27-10",[5,23.523,161,23.859]],["name/27-10",[]],["text/27-10",[]],["component/27-10",[]],["keyword/27-10",[]],["title/27-11",[1779,76.436]],["name/27-11",[]],["text/27-11",[]],["component/27-11",[]],["keyword/27-11",[]],["title/27-12",[2783,79.976]],["name/27-12",[]],["text/27-12",[]],["component/27-12",[]],["keyword/27-12",[]],["title/27-13",[2794,79.976]],["name/27-13",[]],["text/27-13",[]],["component/27-13",[]],["keyword/27-13",[]],["title/27-14",[349,55.245,1498,50.545]],["name/27-14",[]],["text/27-14",[]],["component/27-14",[]],["keyword/27-14",[]],["title/27-15",[289,39.466,357,23.178,358,31.825,1482,27.661,1498,35.336]],["name/27-15",[]],["text/27-15",[]],["component/27-15",[]],["keyword/27-15",[]],["title/27-16",[183,35.759,286,28.069,1026,32.385]],["name/27-16",[]],["text/27-16",[]],["component/27-16",[]],["keyword/27-16",[]],["title/27",[29,18.393,161,16.68,182,31.136,183,28.586,1082,35.898]],["name/27",[4309,1.416]],["text/27",[0,1.763,1,1.736,2,2.497,3,0.617,4,0.585,5,1.158,6,2.426,7,1.544,8,0.408,10,0.465,13,0.518,14,4.534,19,0.572,21,1.46,23,1.404,28,1.435,29,1.096,31,0.871,44,1.674,63,1.311,137,1.674,138,1.733,139,3.795,141,0.709,144,2.293,147,1.355,149,0.509,151,0.938,152,0.987,154,0.554,159,1.08,161,3.31,169,2.472,180,1.61,182,7.194,183,6.646,185,0.431,188,1.521,189,1.624,193,3.565,194,1.941,196,3.819,199,1.73,203,0.626,204,1.058,205,0.709,206,0.93,207,2.516,209,0.668,213,0.468,214,0.523,217,0.501,221,3.261,223,3.212,226,4.169,228,2.068,231,2.417,232,1.095,233,0.938,240,0.479,243,3.14,244,1.109,245,4.224,246,1.69,247,2.243,250,1.764,252,0.694,253,0.694,256,0.566,257,1.491,258,5.375,260,0.68,261,0.953,263,2.304,264,2.637,272,3.163,279,4.101,280,0.626,281,2.979,282,1.525,283,3.318,284,4.436,285,0.617,286,4.893,290,3.418,291,3.456,298,0.579,299,1.036,303,3.881,306,1.598,308,1.701,309,0.726,315,0.5,317,1.965,318,2.612,323,0.537,326,3.375,327,0.895,328,0.745,329,0.579,330,3.477,335,0.572,336,0.617,338,0.548,341,6.235,344,0.996,346,2.571,347,4.088,348,0.694,349,0.694,351,1.378,353,3.762,354,4.241,356,1.965,357,5.378,358,4.85,360,0.871,362,1.721,363,0.572,365,0.608,367,0.694,369,3.176,370,3.613,375,3.18,376,1.321,377,0.617,378,1.047,379,1.394,382,1.491,383,0.726,388,2.215,389,2.312,390,1.355,391,0.579,392,2.564,395,0.572,398,1.378,402,4.372,407,1.138,408,2.571,411,3.133,412,1.006,413,4.596,414,0.861,416,2.304,417,1.564,419,4.599,420,1.765,421,3.171,422,1.525,425,3.325,426,4.323,428,0.579,433,0.56,438,1.835,440,3.418,445,1.378,448,4.136,450,1.87,458,1.604,459,1.675,463,1.431,465,0.93,467,1.417,478,0.548,483,1.391,485,0.645,490,0.554,493,1.445,494,1.941,498,2.429,500,0.726,502,0.537,505,0.6,510,0.518,513,0.987,516,0.529,518,0.767,526,1.253,527,1.849,529,0.68,531,0.978,534,0.543,537,1.138,538,0.572,539,1.058,540,2.429,541,0.579,545,1.321,546,2.899,547,1.703,548,1.13,551,0.514,553,0.505,554,1.532,557,4.84,560,0.861,567,0.509,571,1.058,576,2.971,581,1.026,584,1.026,589,1.154,593,1.026,594,0.626,596,0.523,597,2.333,599,1.626,601,1.299,602,2.273,707,3.182,712,3.7,725,0.528,731,0.724,732,0.978,733,1.026,756,0.56,799,0.554,803,0.668,807,0.554,825,1.76,832,0.6,850,0.585,851,0.518,860,1.378,868,1.123,918,2.424,930,0.617,932,0.593,965,0.56,967,0.501,970,1.273,988,0.709,1024,0.978,1026,2.304,1061,0.709,1062,1.649,1068,0.656,1082,0.645,1093,0.93,1136,0.745,1139,0.745,1148,1.782,1172,1.482,1194,1.915,1222,0.6,1228,1.249,1229,2.136,1246,0.694,1247,0.745,1254,0.626,1337,1.109,1360,1.83,1444,0.861,1446,6.024,1448,0.861,1452,0.792,1458,2.612,1465,0.792,1476,1.143,1477,2.355,1482,1.311,1483,6.412,1487,2.168,1488,1.327,1491,2.988,1493,0.523,1494,0.861,1497,0.668,1498,0.635,1507,3.317,1512,3.873,1515,0.6,1521,1.817,1522,3.418,1524,1.674,1526,2.973,1528,0.938,1532,0.523,1538,2.894,1539,1.61,1542,1.765,1543,0.56,1544,1.718,1546,0.97,1549,0.726,1558,1.875,1562,2.714,1563,0.745,1564,0.668,1573,1.095,1575,4.19,1581,1.915,1585,0.585,1586,3.227,1588,2.471,1590,0.505,1591,2.17,1593,1.235,1595,0.797,1609,0.987,1610,0.593,1614,1.006,1615,0.938,1616,0.645,1620,3.483,1621,0.726,1622,1.006,1624,1.794,1625,3.022,1626,1.706,1627,3.022,1630,1.649,1637,0.912,1639,0.617,1642,0.656,1644,0.626,1649,1.435,1656,3.731,1657,0.6,1658,1.525,1664,1.138,1675,1.508,1676,2.376,1677,0.68,1679,0.566,1690,1.661,1694,0.566,1695,0.823,1697,0.6,1702,1.07,1714,0.745,1724,0.56,1725,1.138,1726,0.579,1731,0.668,1735,1.475,1742,0.626,1743,1.207,1744,1.431,1745,1.855,1751,1.99,1754,0.585,1757,1.431,1762,0.668,1765,0.668,1768,1.123,1770,1.799,1774,0.792,1777,0.767,1778,5.357,1779,2.727,1786,0.668,1794,0.767,1807,4.413,1815,1.525,1818,0.823,1825,0.656,1827,0.912,1828,0.912,1832,1.327,1835,0.635,1837,0.585,1838,0.635,1839,0.912,1840,0.726,1841,2.679,1843,0.543,1849,1.327,1852,0.532,1854,3.006,1857,1.299,1858,1.539,1859,1.539,1862,0.554,1867,1.138,1870,1.299,1874,0.585,1877,0.694,1882,1.539,1883,1.525,1885,0.554,1904,1.281,1906,0.585,1913,0.745,1914,0.726,1915,0.767,1916,0.767,1917,0.656,1918,0.792,1919,0.694,1927,0.726,1935,1.299,1937,0.566,1938,1.07,1939,1.765,1944,1.047,1945,0.668,1958,1.058,1964,1.327,1968,0.68,1975,1.539,1976,0.668,1996,1.997,1997,1.327,1998,1.482,2000,2.471,2002,0.585,2003,0.626,2006,1.435,2021,0.823,2022,2.139,2028,1.544,2032,1.701,2038,0.56,2052,1.154,2067,1.109,2078,0.726,2087,1.036,2092,0.912,2095,0.912,2112,2.879,2120,1.058,2127,0.593,2128,0.6,2129,0.656,2131,0.645,2148,0.579,2149,0.726,2150,0.745,2151,0.823,2155,0.745,2156,0.709,2157,0.823,2162,2.489,2163,0.635,2168,0.823,2186,0.635,2188,3.9,2240,1.46,2244,3.603,2273,2.323,2304,0.68,2309,1.207,2327,1.965,2328,2.407,2343,0.842,2384,0.709,2393,3.671,2400,0.68,2422,1.482,2428,0.709,2430,0.608,2441,0.656,2459,1.207,2469,2.552,2470,1.394,2489,1.273,2497,0.668,2499,0.709,2525,1.359,2526,1.299,2533,0.645,2534,1.207,2535,1.435,2548,1.539,2551,1.188,2558,0.668,2564,0.745,2588,0.532,2593,1.249,2604,1.138,2613,0.792,2614,1.701,2656,1.015,2662,0.861,2693,0.709,2726,0.617,2744,1.095,2764,1.083,2783,2.269,2794,3.373,2816,0.579,2861,1.207,2862,2.169,2882,0.861,2890,4.138,2892,0.912,2903,0.861,2916,0.635,2920,2.022,2939,1.794,2967,0.668,2969,0.792,3032,0.668,3058,1.327,3067,1.394,3074,0.861,3075,0.861,3084,0.861,3085,0.861,3289,1.539,3461,0.726,3468,1.394,3472,0.767,3526,3.006,3585,0.617,3625,0.726,3710,2.269,3843,0.823,3859,0.861,3871,0.792,3879,0.745,4084,3.022,4095,0.861,4110,1.61,4162,0.823,4163,0.726,4226,0.912,4307,0.726,4308,9.302,4310,2.608,4311,0.912,4312,2.608,4313,0.912,4314,0.989,4315,0.989,4316,0.912,4317,0.989,4318,0.989,4319,1.851,4320,1.394,4321,0.823,4322,1.851,4323,3.279,4324,1.851,4325,1.851,4326,1.706,4327,1.851,4328,0.989,4329,1.851,4330,2.608,4331,0.989,4332,0.989,4333,1.851,4334,1.851,4335,0.989,4336,0.767,4337,1.851,4338,3.877,4339,0.989,4340,0.989,4341,1.851,4342,0.989,4343,0.989,4344,0.989,4345,0.989,4346,0.989,4347,0.989,4348,0.767,4349,0.912,4350,4.414,4351,3.877,4352,1.851,4353,0.989,4354,0.989,4355,0.989,4356,0.861,4357,0.861,4358,0.823,4359,0.912,4360,0.912,4361,0.989,4362,0.861,4363,0.861,4364,0.912,4365,0.912,4366,0.989,4367,0.861,4368,0.861,4369,0.989,4370,0.861,4371,0.912,4372,0.989,4373,0.709,4374,0.861,4375,0.989,4376,0.989,4377,1.482,4378,0.912,4379,0.823,4380,0.989,4381,0.912,4382,0.989,4383,1.851,4384,0.823,4385,0.989,4386,0.989,4387,0.912,4388,1.851,4389,0.989,4390,1.851,4391,1.851,4392,3.279,4393,0.989,4394,3.279,4395,0.989,4396,0.989,4397,1.851,4398,1.851,4399,1.851,4400,0.912,4401,0.989,4402,0.989,4403,0.989,4404,1.851,4405,0.989,4406,0.989]],["component/27",[5,0.286]],["keyword/27",[]],["title/28-1",[46,28.388,138,12.639,233,30.991,248,30.041]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["keyword/28-1",[]],["title/28-2",[138,10.334,161,15.159,851,26.206,1476,21.931,4407,43.524,4408,41.597]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["keyword/28-2",[]],["title/28-3",[138,11.371,851,28.834,1477,24.277,2820,35.898,2936,37.151]],["name/28-3",[]],["text/28-3",[]],["component/28-3",[]],["keyword/28-3",[]],["title/28-4",[161,16.68,193,20.266,233,27.883,576,21.65,4409,45.769]],["name/28-4",[]],["text/28-4",[]],["component/28-4",[]],["keyword/28-4",[]],["title/28",[29,18.393,138,11.371,161,16.68,233,27.883,604,41.46]],["name/28",[4410,0.531,4411,0.531]],["text/28",[0,3.216,1,3.168,3,0.703,5,1.451,6,2.131,7,0.667,8,0.861,9,0.516,10,1.375,13,0.591,20,4.061,21,0.631,23,0.607,29,0.977,31,2.018,46,4.198,63,1.051,138,2.529,139,4.433,144,0.586,146,1.303,147,1.518,149,1.077,151,3.677,152,0.601,157,3.104,159,0.467,161,2.441,186,0.684,188,1.991,189,0.472,193,4.281,196,0.638,203,1.849,206,1.469,207,2.352,208,1.467,209,1.411,213,1.384,214,1.545,217,0.571,218,3.487,221,2.169,226,4.454,232,4.466,233,5.364,234,3.076,235,1.69,243,1.019,245,2.11,246,2.716,247,3.793,248,1.027,249,2.11,250,3.303,260,1.438,263,4.471,264,0.607,265,0.693,272,1.027,277,1.253,279,3.962,282,2.135,284,4.278,286,4.079,290,1.17,291,0.554,296,0.638,297,1.269,298,1.71,299,1.17,302,0.761,303,4.016,306,1.779,311,1.822,315,1.158,323,1.588,327,5.238,330,0.581,333,0.724,334,1.237,336,2.674,338,2.972,341,1.223,342,4.177,343,7.264,344,3.133,345,1.819,346,1.537,347,1.322,350,5.455,353,0.581,354,0.538,355,1.939,356,0.676,357,4.527,358,1.209,360,0.53,362,0.5,363,2.11,364,1.159,369,3.549,370,0.667,371,1.042,376,3.157,377,1.303,378,1.654,386,0.703,388,3.84,389,2.247,390,0.586,391,1.223,392,3.173,395,1.69,396,1.499,402,3.101,410,1.136,411,1.356,412,3.162,416,4.174,417,1.741,421,0.586,422,0.659,424,0.775,428,1.223,432,0.596,435,0.571,437,7.544,438,1.17,441,0.693,444,0.828,445,1.929,459,1.068,465,0.567,467,1.983,468,5.853,476,0.546,477,0.703,482,1.797,483,4.417,488,2.353,490,0.631,493,1.62,494,1.237,497,0.684,498,4.038,499,0.874,502,2.639,508,1.269,513,4.165,525,0.903,526,2.577,527,2.046,534,1.147,539,0.645,540,0.951,541,1.223,542,1.751,545,3.956,547,0.586,548,0.489,551,1.086,552,0.735,553,2.74,554,0.977,557,0.625,567,5.209,571,2.087,574,0.964,576,4.02,577,0.693,584,2.022,588,1.545,589,3.885,593,1.159,595,0.761,597,0.596,604,0.849,613,0.631,707,1.939,712,0.571,722,0.596,725,0.601,731,0.441,732,0.423,735,1.62,738,0.591,747,1.269,748,0.684,760,3.076,773,1.535,788,2.135,790,2.464,797,6.238,802,2.228,803,1.411,832,0.684,836,0.693,849,2.16,851,1.912,856,1.822,860,0.596,883,1.467,890,0.652,891,1.253,895,0.761,897,5.093,898,1.039,899,0.828,900,0.828,908,1.654,918,1.034,928,0.591,930,0.703,932,2.187,953,1.739,962,0.791,967,0.571,1012,0.652,1024,1.929,1025,0.724,1026,0.53,1038,0.808,1057,1.849,1059,0.874,1074,0.981,1093,1.469,1112,0.828,1113,1.051,1218,5.496,1222,0.684,1228,0.761,1229,0.546,1238,0.667,1239,0.791,1250,2.051,1337,0.676,1388,0.849,1470,0.808,1476,4.168,1477,3.746,1479,1.209,1482,2.696,1487,1.435,1491,1.17,1492,3.035,1493,1.929,1495,1.499,1500,1.504,1507,1.983,1517,0.703,1519,0.713,1522,1.17,1526,0.684,1531,0.567,1535,0.684,1536,0.703,1538,1.64,1542,2.309,1543,0.638,1544,1.912,1545,0.748,1547,1.237,1549,0.828,1551,1.774,1552,0.724,1558,0.645,1559,0.693,1560,3.941,1562,0.625,1565,0.684,1572,3.294,1575,1.912,1578,1.751,1582,1.438,1586,1.929,1590,0.576,1591,0.631,1594,2.539,1595,0.486,1606,1.71,1608,1.636,1609,3.323,1610,0.676,1614,2.331,1615,3.157,1616,0.735,1620,1.446,1622,0.613,1635,0.667,1640,0.808,1642,0.748,1656,2.191,1661,0.638,1664,1.286,1692,2.431,1693,2.146,1694,3.328,1701,1.877,1713,0.828,1715,0.625,1728,0.748,1730,0.874,1734,1.973,1736,0.581,1741,1.672,1743,1.364,1744,0.619,1745,0.638,1754,1.237,1755,5.189,1756,5.189,1757,1.604,1768,0.684,1770,1.604,1785,1.286,1807,0.607,1820,0.693,1821,0.791,1822,0.638,1843,3.624,1852,1.125,1854,1.912,1857,1.467,1868,0.601,1870,0.791,1871,0.735,1872,0.938,1874,0.667,1902,1.223,1904,1.027,1906,1.73,1917,0.748,1935,0.791,1937,0.645,1938,1.69,1939,1.965,1942,0.713,1944,4.268,1947,1.588,1951,2.91,1952,2.087,1957,2.614,1958,0.645,1977,2.509,1979,0.791,1990,0.659,1992,0.938,1995,0.748,1996,0.581,2000,2.043,2002,0.667,2003,0.713,2013,0.724,2028,0.667,2034,0.659,2038,3.035,2044,0.808,2050,0.748,2054,0.808,2057,0.808,2060,1.253,2066,0.735,2072,0.775,2074,0.808,2076,1.499,2078,0.828,2089,2.674,2101,0.828,2118,1.269,2127,4.349,2130,0.703,2131,0.735,2143,0.874,2146,2.895,2148,0.659,2154,2.614,2163,0.724,2188,0.625,2190,0.791,2192,3.325,2207,1.575,2210,0.981,2273,0.676,2292,4.271,2295,0.713,2308,0.761,2342,0.703,2343,0.513,2346,0.903,2358,0.735,2371,2.561,2384,0.808,2396,0.761,2405,0.693,2406,0.981,2414,0.761,2419,0.849,2424,0.808,2430,1.286,2448,2.42,2452,0.631,2454,4.734,2459,0.735,2490,1.877,2503,4.041,2539,0.849,2547,1.71,2563,0.903,2583,0.693,2593,0.761,2602,1.621,2604,0.693,2649,0.938,2656,2.943,2674,3.341,2675,2.51,2698,1.739,2700,0.849,2704,0.791,2719,1.411,2726,1.303,2739,0.903,2745,0.791,2758,0.903,2762,2.01,2764,0.659,2799,0.713,2809,0.735,2811,3.557,2816,2.509,2820,4.064,2825,0.849,2827,1.039,2834,2.051,2837,1.438,2839,4.899,2849,7.256,2855,0.874,2870,0.724,2871,2.215,2875,2.567,2876,2.051,2883,0.938,2890,0.874,2895,0.724,2898,0.938,2900,4.831,2913,0.808,2915,0.849,2917,0.808,2922,1.674,2936,3.278,2938,0.808,2940,3.681,2943,2.543,2944,0.938,2945,1.039,2955,1.621,2980,1.499,3048,1.535,3096,3.176,3097,0.938,3105,2.051,3479,2.051,3615,1.411,3673,0.874,3743,1.039,3754,0.775,3794,2.617,3832,1.286,3847,1.819,3859,0.981,3876,0.874,3893,0.748,3895,2.266,4052,0.849,4080,0.981,4125,0.938,4126,0.828,4156,0.808,4172,1.927,4216,0.938,4267,1.039,4336,1.621,4407,3.176,4408,0.938,4409,2.431,4412,0.938,4413,3.938,4414,4.99,4415,0.903,4416,1.927,4417,3.659,4418,2.431,4419,1.127,4420,5.493,4421,0.938,4422,0.938,4423,1.039,4424,1.927,4425,3.65,4426,3.659,4427,1.039,4428,3.65,4429,1.039,4430,1.575,4431,1.127,4432,1.039,4433,1.127,4434,1.411,4435,1.127,4436,1.127,4437,1.127,4438,1.127,4439,2.341,4440,0.938,4441,1.774,4442,1.127,4443,1.127,4444,1.535,4445,0.791,4446,1.039,4447,2.266,4448,0.938,4449,2.091,4450,0.938,4451,0.903,4452,0.903,4453,3.567,4454,1.127,4455,1.127,4456,0.981,4457,0.981,4458,1.927,4459,3.364,4460,0.981,4461,2.694,4462,1.127,4463,2.091,4464,1.927,4465,0.724,4466,1.039,4467,0.874,4468,1.039,4469,1.127,4470,1.039,4471,1.039,4472,1.039,4473,0.981,4474,1.127]],["component/28",[5,0.286]],["keyword/28",[]],["title/29-1",[2353,65.469,4475,56.452]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["keyword/29-1",[]],["title/29-2",[138,16.265,2127,47.171]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["keyword/29-2",[]],["title/29-3",[138,14.224,282,40.27,4476,51.864]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["keyword/29-3",[]],["title/29-4",[161,27.856]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["keyword/29-4",[]],["title/29-5",[357,28.994,527,32.839,2351,57.255]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["keyword/29-5",[]],["title/29-6",[286,24.94,930,38.137,2352,48.99,2761,39.275]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["keyword/29-6",[]],["title/29-7",[1702,45.523,4477,61.032]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["keyword/29-7",[]],["title/29-8",[255,33.899,286,24.94,554,28.579,4478,61.173]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["keyword/29-8",[]],["title/29-9",[255,43.626,2554,59.305]],["name/29-9",[]],["text/29-9",[]],["component/29-9",[]],["keyword/29-9",[]],["title/29-10",[1500,32.439,4479,72.562]],["name/29-10",[]],["text/29-10",[]],["component/29-10",[]],["keyword/29-10",[]],["title/29-11",[161,25.998,554,28.579,1939,32.928]],["name/29-11",[]],["text/29-11",[]],["component/29-11",[]],["keyword/29-11",[]],["title/29-12",[1701,50.545,4480,61.032]],["name/29-12",[]],["text/29-12",[]],["component/29-12",[]],["keyword/29-12",[]],["title/29-13",[850,54.402]],["name/29-13",[]],["text/29-13",[]],["component/29-13",[]],["keyword/29-13",[]],["title/29-14",[483,41.988,3827,59.305]],["name/29-14",[]],["text/29-14",[]],["component/29-14",[]],["keyword/29-14",[]],["title/29-15",[398,32.333,1113,30.744,4481,53.228,4482,38.689]],["name/29-15",[]],["text/29-15",[]],["component/29-15",[]],["keyword/29-15",[]],["title/29-16",[138,12.639,286,24.94,1595,26.353,2353,50.872]],["name/29-16",[]],["text/29-16",[]],["component/29-16",[]],["keyword/29-16",[]],["title/29-17",[286,24.94,1047,39.275,2761,39.275,4483,48.99]],["name/29-17",[]],["text/29-17",[]],["component/29-17",[]],["keyword/29-17",[]],["title/29-18",[398,29.09,1047,35.336,1113,27.661,4482,34.808,4484,44.076]],["name/29-18",[]],["text/29-18",[]],["component/29-18",[]],["keyword/29-18",[]],["title/29-19",[979,47.353,4485,55.137,4486,55.137]],["name/29-19",[]],["text/29-19",[]],["component/29-19",[]],["keyword/29-19",[]],["title/29-20",[45,51.864,46,31.95,138,14.224]],["name/29-20",[]],["text/29-20",[]],["component/29-20",[]],["keyword/29-20",[]],["title/29-21",[4487,79.976]],["name/29-21",[]],["text/29-21",[]],["component/29-21",[]],["keyword/29-21",[]],["title/29-22",[4488,76.436]],["name/29-22",[]],["text/29-22",[]],["component/29-22",[]],["keyword/29-22",[]],["title/29-23",[4489,84.717]],["name/29-23",[]],["text/29-23",[]],["component/29-23",[]],["keyword/29-23",[]],["title/29-24",[4490,84.717]],["name/29-24",[]],["text/29-24",[]],["component/29-24",[]],["keyword/29-24",[]],["title/29-25",[4491,84.717]],["name/29-25",[]],["text/29-25",[]],["component/29-25",[]],["keyword/29-25",[]],["title/29-26",[4492,84.717]],["name/29-26",[]],["text/29-26",[]],["component/29-26",[]],["keyword/29-26",[]],["title/29-27",[4493,84.717]],["name/29-27",[]],["text/29-27",[]],["component/29-27",[]],["keyword/29-27",[]],["title/29-28",[4494,84.717]],["name/29-28",[]],["text/29-28",[]],["component/29-28",[]],["keyword/29-28",[]],["title/29-29",[4495,84.717]],["name/29-29",[]],["text/29-29",[]],["component/29-29",[]],["keyword/29-29",[]],["title/29-30",[4496,84.717]],["name/29-30",[]],["text/29-30",[]],["component/29-30",[]],["keyword/29-30",[]],["title/29-31",[4497,76.436]],["name/29-31",[]],["text/29-31",[]],["component/29-31",[]],["keyword/29-31",[]],["title/29-32",[4498,76.436]],["name/29-32",[]],["text/29-32",[]],["component/29-32",[]],["keyword/29-32",[]],["title/29-33",[4499,84.717]],["name/29-33",[]],["text/29-33",[]],["component/29-33",[]],["keyword/29-33",[]],["title/29-34",[4500,84.717]],["name/29-34",[]],["text/29-34",[]],["component/29-34",[]],["keyword/29-34",[]],["title/29-35",[4501,84.717]],["name/29-35",[]],["text/29-35",[]],["component/29-35",[]],["keyword/29-35",[]],["title/29-36",[4502,84.717]],["name/29-36",[]],["text/29-36",[]],["component/29-36",[]],["keyword/29-36",[]],["title/29-37",[4503,84.717]],["name/29-37",[]],["text/29-37",[]],["component/29-37",[]],["keyword/29-37",[]],["title/29-38",[4504,84.717]],["name/29-38",[]],["text/29-38",[]],["component/29-38",[]],["keyword/29-38",[]],["title/29-39",[4505,84.717]],["name/29-39",[]],["text/29-39",[]],["component/29-39",[]],["keyword/29-39",[]],["title/29-40",[3779,67.476]],["name/29-40",[]],["text/29-40",[]],["component/29-40",[]],["keyword/29-40",[]],["title/29-41",[4506,79.976]],["name/29-41",[]],["text/29-41",[]],["component/29-41",[]],["keyword/29-41",[]],["title/29-42",[4507,69.239]],["name/29-42",[]],["text/29-42",[]],["component/29-42",[]],["keyword/29-42",[]],["title/29-43",[3771,76.436]],["name/29-43",[]],["text/29-43",[]],["component/29-43",[]],["keyword/29-43",[]],["title/29-44",[4508,84.717]],["name/29-44",[]],["text/29-44",[]],["component/29-44",[]],["keyword/29-44",[]],["title/29-45",[4509,76.436]],["name/29-45",[]],["text/29-45",[]],["component/29-45",[]],["keyword/29-45",[]],["title/29-46",[2348,60.958]],["name/29-46",[]],["text/29-46",[]],["component/29-46",[]],["keyword/29-46",[]],["title/29-47",[4510,76.436]],["name/29-47",[]],["text/29-47",[]],["component/29-47",[]],["keyword/29-47",[]],["title/29-48",[4511,76.436]],["name/29-48",[]],["text/29-48",[]],["component/29-48",[]],["keyword/29-48",[]],["title/29-49",[4512,73.608]],["name/29-49",[]],["text/29-49",[]],["component/29-49",[]],["keyword/29-49",[]],["title/29-50",[4513,76.436]],["name/29-50",[]],["text/29-50",[]],["component/29-50",[]],["keyword/29-50",[]],["title/29-51",[4514,76.436]],["name/29-51",[]],["text/29-51",[]],["component/29-51",[]],["keyword/29-51",[]],["title/29-52",[4515,76.436]],["name/29-52",[]],["text/29-52",[]],["component/29-52",[]],["keyword/29-52",[]],["title/29-53",[4516,76.436]],["name/29-53",[]],["text/29-53",[]],["component/29-53",[]],["keyword/29-53",[]],["title/29-54",[4517,76.436]],["name/29-54",[]],["text/29-54",[]],["component/29-54",[]],["keyword/29-54",[]],["title/29-55",[4518,76.436]],["name/29-55",[]],["text/29-55",[]],["component/29-55",[]],["keyword/29-55",[]],["title/29-56",[4519,76.436]],["name/29-56",[]],["text/29-56",[]],["component/29-56",[]],["keyword/29-56",[]],["title/29-57",[4520,84.717]],["name/29-57",[]],["text/29-57",[]],["component/29-57",[]],["keyword/29-57",[]],["title/29-58",[4521,84.717]],["name/29-58",[]],["text/29-58",[]],["component/29-58",[]],["keyword/29-58",[]],["title/29-59",[4522,84.717]],["name/29-59",[]],["text/29-59",[]],["component/29-59",[]],["keyword/29-59",[]],["title/29-60",[4523,84.717]],["name/29-60",[]],["text/29-60",[]],["component/29-60",[]],["keyword/29-60",[]],["title/29-61",[4524,84.717]],["name/29-61",[]],["text/29-61",[]],["component/29-61",[]],["keyword/29-61",[]],["title/29-62",[4525,84.717]],["name/29-62",[]],["text/29-62",[]],["component/29-62",[]],["keyword/29-62",[]],["title/29-63",[4526,84.717]],["name/29-63",[]],["text/29-63",[]],["component/29-63",[]],["keyword/29-63",[]],["title/29-64",[4527,84.717]],["name/29-64",[]],["text/29-64",[]],["component/29-64",[]],["keyword/29-64",[]],["title/29-65",[4528,84.717]],["name/29-65",[]],["text/29-65",[]],["component/29-65",[]],["keyword/29-65",[]],["title/29-66",[4529,76.436]],["name/29-66",[]],["text/29-66",[]],["component/29-66",[]],["keyword/29-66",[]],["title/29-67",[4530,76.436]],["name/29-67",[]],["text/29-67",[]],["component/29-67",[]],["keyword/29-67",[]],["title/29-68",[4531,76.436]],["name/29-68",[]],["text/29-68",[]],["component/29-68",[]],["keyword/29-68",[]],["title/29-69",[4532,76.436]],["name/29-69",[]],["text/29-69",[]],["component/29-69",[]],["keyword/29-69",[]],["title/29-70",[4533,84.717]],["name/29-70",[]],["text/29-70",[]],["component/29-70",[]],["keyword/29-70",[]],["title/29-71",[4534,76.436]],["name/29-71",[]],["text/29-71",[]],["component/29-71",[]],["keyword/29-71",[]],["title/29-72",[207,30.187,1227,57.255,2583,42.336]],["name/29-72",[]],["text/29-72",[]],["component/29-72",[]],["keyword/29-72",[]],["title/29-73",[4535,79.976]],["name/29-73",[]],["text/29-73",[]],["component/29-73",[]],["keyword/29-73",[]],["title/29-74",[4536,76.436]],["name/29-74",[]],["text/29-74",[]],["component/29-74",[]],["keyword/29-74",[]],["title/29",[29,16.716,161,15.159,225,28.605,286,20.393,1082,32.626,2761,32.115]],["name/29",[225,0.295,4410,0.362,4411,0.362]],["text/29",[0,0.385,1,0.379,2,0.545,4,5.573,5,0.418,6,0.718,8,0.205,9,0.228,10,1.029,20,0.307,23,0.972,29,3.126,31,1.199,44,0.32,45,0.376,46,1.016,52,0.872,79,0.676,136,0.343,138,2.477,139,2.689,141,7.142,142,4.049,151,1.625,152,0.266,154,0.539,157,2.026,161,3.218,182,0.282,188,1.016,193,0.184,196,0.282,207,0.96,213,1.519,217,0.708,221,0.223,225,0.8,226,2.54,228,4.371,232,0.295,234,1.003,243,0.243,247,0.64,248,1.865,250,0.227,255,3.992,262,1.508,263,6.448,264,4.893,267,0.311,272,4.711,279,2.832,282,0.292,284,0.221,285,0.311,286,5.168,291,0.245,296,0.282,303,1.462,306,0.243,308,1.427,315,2.526,316,3.515,323,1.908,327,1.059,333,6.195,344,1.727,346,2.119,351,0.739,357,1.714,360,0.453,362,0.221,365,0.307,366,2.871,369,0.658,370,1.508,371,2.995,376,1.291,388,0.632,391,2.054,392,0.239,398,3.593,399,0.357,400,0.619,411,2.867,417,4.039,421,0.259,424,0.343,433,5.256,435,1.924,442,0.315,458,0.307,459,1.94,463,0.274,467,0.271,479,0.343,482,0.307,483,4.885,488,0.274,490,0.279,498,0.996,502,0.271,503,0.343,516,0.916,526,1.387,527,2.182,532,0.707,533,0.927,539,1.252,540,3.278,541,0.292,545,0.708,547,0.259,551,0.726,553,2.782,554,3.536,558,1.326,565,4.518,567,0.93,571,0.285,574,4.677,576,4.025,585,1.92,586,0.399,587,0.529,597,1.696,707,4.735,712,2.193,722,2.659,725,1.359,733,0.276,734,0.545,745,0.376,747,0.585,748,0.849,756,0.545,768,2.967,788,0.564,825,0.336,837,0.343,843,0.585,850,1.295,860,1.856,891,0.299,908,0.791,930,4.325,962,0.35,965,1.442,967,0.488,972,0.336,979,1.242,987,0.707,990,0.415,997,0.399,998,0.366,1001,2.248,1015,0.299,1024,2.879,1026,1.652,1047,3.622,1054,1.664,1057,0.315,1062,0.315,1063,1.536,1082,0.325,1087,0.386,1093,3.187,1094,4.491,1113,1.909,1140,2.561,1141,0.303,1173,0.801,1222,0.303,1229,0.677,1281,2.368,1330,0.331,1332,0.65,1337,0.299,1476,0.219,1479,0.809,1482,1.612,1484,0.325,1487,0.887,1493,0.263,1500,1.05,1501,1.442,1507,4.234,1517,0.601,1521,1.001,1528,0.253,1531,0.251,1536,1.126,1538,0.224,1542,0.268,1543,0.545,1544,0.261,1548,0.601,1557,0.65,1558,0.551,1566,4.054,1572,1.271,1575,0.261,1585,0.295,1586,0.509,1593,0.236,1595,3.756,1609,1.167,1610,0.299,1615,0.708,1616,1.884,1620,0.477,1639,5.28,1641,0.434,1656,0.714,1673,0.791,1677,0.663,1679,0.551,1690,1.625,1691,0.783,1693,1.607,1694,1.457,1697,0.303,1701,2.438,1702,2.03,1715,1.001,1726,0.292,1731,0.336,1735,5.02,1736,2.229,1739,0.295,1747,0.343,1758,2.439,1807,0.268,1808,1.003,1809,1.219,1812,5.463,1822,1.238,1837,0.295,1838,0.32,1843,0.767,1852,0.753,1854,0.733,1856,0.366,1862,1.225,1904,3.929,1914,0.707,1939,3.325,1944,0.545,1947,2.064,1952,6.695,1957,6.525,1969,0.726,1989,0.35,1990,0.292,1996,2.476,2000,2.126,2027,0.325,2028,0.57,2034,0.292,2043,0.331,2045,2.191,2066,0.325,2068,0.343,2075,0.747,2079,0.343,2081,0.399,2087,1.427,2127,6.024,2154,6.538,2161,0.663,2162,0.32,2208,0.747,2209,3.236,2216,0.838,2220,0.366,2300,0.747,2330,1.219,2348,3.189,2351,3.6,2352,5.769,2353,3.385,2376,1.4,2377,0.676,2380,0.357,2381,0.981,2409,1.986,2410,2.119,2413,1.217,2448,0.927,2454,1.178,2458,0.35,2528,0.415,2531,0.838,2532,2.856,2547,0.818,2554,0.726,2566,0.663,2583,0.307,2588,0.972,2604,0.307,2633,0.434,2646,1.949,2656,0.529,2670,0.663,2674,0.663,2761,5.597,2799,4.786,2808,0.707,2811,0.331,2834,1.267,2837,2.977,2839,4.054,2870,0.32,2907,3.663,2916,0.32,2940,1.142,2998,0.801,3016,2.017,3217,1.384,3468,0.726,3479,0.981,3623,1.876,3686,0.376,3741,0.399,3756,7.559,3771,1.163,3775,1.502,3779,1.326,3827,4.104,3891,0.838,4051,0.366,4283,1.12,4417,0.376,4441,0.585,4444,6.152,4445,0.981,4447,0.747,4451,0.772,4465,0.32,4473,0.434,4477,0.747,4479,0.459,4480,6.202,4481,1.571,4482,4.299,4483,4.2,4484,0.772,4485,0.772,4486,1.446,4487,1.571,4488,1.502,4489,1.289,4490,1.289,4491,1.289,4492,1.289,4493,1.289,4494,1.289,4495,1.289,4496,1.289,4497,2.401,4498,2.119,4499,2.349,4500,2.017,4501,1.289,4502,2.017,4503,1.664,4504,2.017,4505,1.289,4506,1.217,4507,1.053,4508,3.751,4509,1.502,4510,1.163,4511,1.502,4512,2.812,4513,0.801,4514,1.502,4515,1.502,4516,1.502,4517,1.502,4518,1.502,4519,1.502,4520,1.289,4521,1.289,4522,1.289,4523,1.289,4524,1.289,4525,1.289,4526,1.289,4527,1.289,4528,1.664,4529,1.163,4530,1.502,4531,1.502,4532,1.502,4533,2.957,4534,1.163,4535,1.904,4536,1.82,4537,2.645,4538,6.814,4539,1.084,4540,0.459,4541,0.499,4542,0.357,4543,0.434,4544,7.183,4545,2.861,4546,0.499,4547,1.569,4548,0.331,4549,0.499,4550,0.499,4551,0.726,4552,1.053,4553,0.376,4554,0.499,4555,0.499,4556,0.459,4557,0.888,4558,0.964,4559,1.871,4560,0.964,4561,0.499,4562,2.239,4563,1.446,4564,0.459,4565,0.434,4566,0.434,4567,1.163,4568,0.415,4569,0.838,4570,0.434,4571,6.998,4572,0.964,4573,4.947,4574,2.662,4575,6.639,4576,8.563,4577,5.642,4578,6.095,4579,8.178,4580,3.99,4581,1.904,4582,0.499,4583,0.499,4584,1.289,4585,5.2,4586,5.2,4587,3.305,4588,4.184,4589,3.385,4590,0.499,4591,0.459,4592,0.415,4593,2.513,4594,0.964,4595,1.806,4596,2.645,4597,1.806,4598,1.571,4599,2.349,4600,1.806,4601,2.957,4602,0.964,4603,0.964,4604,0.964,4605,3.208,4606,0.964,4607,0.499,4608,0.499,4609,0.499,4610,0.459,4611,0.499,4612,0.434,4613,0.838,4614,0.964,4615,0.499,4616,0.499,4617,0.499,4618,0.499,4619,0.964,4620,0.499,4621,0.964,4622,0.499,4623,0.964,4624,0.386,4625,0.888,4626,0.499,4627,0.331,4628,0.888,4629,0.499,4630,0.964,4631,0.499,4632,0.499,4633,0.499,4634,1.289,4635,2.349,4636,0.888,4637,0.459,4638,0.888,4639,1.289,4640,0.459,4641,0.888,4642,0.838,4643,1.571,4644,0.459,4645,0.459,4646,0.888,4647,0.459,4648,0.459,4649,0.459,4650,0.459,4651,0.434,4652,0.434,4653,0.459,4654,1.289,4655,0.434,4656,0.888,4657,0.459,4658,1.664,4659,0.888,4660,0.888,4661,0.459,4662,0.459,4663,1.289,4664,0.459,4665,0.499,4666,0.499,4667,3.055,4668,0.499,4669,0.434,4670,0.459,4671,0.459,4672,0.459,4673,0.459,4674,0.838,4675,1.217,4676,0.838,4677,0.888,4678,1.664,4679,1.664,4680,0.459,4681,0.838,4682,0.888,4683,0.888,4684,0.459,4685,0.838,4686,0.888,4687,0.888,4688,0.838,4689,0.459,4690,0.459,4691,0.459,4692,0.499,4693,0.415,4694,0.459,4695,0.459,4696,0.459,4697,0.459,4698,0.459,4699,2.888,4700,0.499,4701,0.459,4702,0.499,4703,0.964,4704,0.964,4705,4.25,4706,3.208,4707,0.499,4708,2.944,4709,0.944,4710,1.806,4711,1.289,4712,0.499,4713,1.806,4714,1.806,4715,0.376,4716,0.366,4717,0.434,4718,0.415,4719,0.459,4720,0.964,4721,1.69,4722,1.806,4723,0.499,4724,0.747,4725,0.499,4726,1.36,4727,0.691,4728,1.806,4729,0.888,4730,0.964,4731,0.838,4732,0.459,4733,0.376,4734,0.376,4735,0.434]],["component/29",[5,0.286]],["keyword/29",[]],["title/30-1",[2204,55.777]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["keyword/30-1",[]],["title/30-2",[1679,45.02,4736,68.502]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["keyword/30-2",[]],["title/30-3",[588,41.611,1026,37.031]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["keyword/30-3",[]],["title/30-4",[588,36.39,1947,37.412,4737,50.543]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["keyword/30-4",[]],["title/30-5",[261,40.545,4737,57.795]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["keyword/30-5",[]],["title/30-6",[1026,37.031,4738,59.305]],["name/30-6",[]],["text/30-6",[]],["component/30-6",[]],["keyword/30-6",[]],["title/30-7",[4739,84.717]],["name/30-7",[]],["text/30-7",[]],["component/30-7",[]],["keyword/30-7",[]],["title/30-8",[4740,60.958]],["name/30-8",[]],["text/30-8",[]],["component/30-8",[]],["keyword/30-8",[]],["title/30-9",[1072,44.203,3474,47.353,4740,45.661]],["name/30-9",[]],["text/30-9",[]],["component/30-9",[]],["keyword/30-9",[]],["title/30-10",[258,34.938,929,48.41]],["name/30-10",[]],["text/30-10",[]],["component/30-10",[]],["keyword/30-10",[]],["title/30-11",[246,34.313,596,41.611]],["name/30-11",[]],["text/30-11",[]],["component/30-11",[]],["keyword/30-11",[]],["title/30-12",[3099,73.608]],["name/30-12",[]],["text/30-12",[]],["component/30-12",[]],["keyword/30-12",[]],["title/30-13",[161,27.856]],["name/30-13",[]],["text/30-13",[]],["component/30-13",[]],["keyword/30-13",[]],["title/30-14",[1072,39.275,2020,36.207,4737,44.908,4741,56.383]],["name/30-14",[]],["text/30-14",[]],["component/30-14",[]],["keyword/30-14",[]],["title/30-15",[516,17.476,2020,36.207,4737,44.908,4742,56.383]],["name/30-15",[]],["text/30-15",[]],["component/30-15",[]],["keyword/30-15",[]],["title/30-16",[516,14.29,540,22.761,2025,30.355,4737,36.721,4743,46.104,4744,37.681]],["name/30-16",[]],["text/30-16",[]],["component/30-16",[]],["keyword/30-16",[]],["title/30-17",[138,18.99]],["name/30-17",[]],["text/30-17",[]],["component/30-17",[]],["keyword/30-17",[]],["title/30-18",[4745,84.717]],["name/30-18",[]],["text/30-18",[]],["component/30-18",[]],["keyword/30-18",[]],["title/30-19",[4746,84.717]],["name/30-19",[]],["text/30-19",[]],["component/30-19",[]],["keyword/30-19",[]],["title/30-20",[4747,84.717]],["name/30-20",[]],["text/30-20",[]],["component/30-20",[]],["keyword/30-20",[]],["title/30-21",[4748,84.717]],["name/30-21",[]],["text/30-21",[]],["component/30-21",[]],["keyword/30-21",[]],["title/30-22",[4749,84.717]],["name/30-22",[]],["text/30-22",[]],["component/30-22",[]],["keyword/30-22",[]],["title/30-23",[15,73.608]],["name/30-23",[]],["text/30-23",[]],["component/30-23",[]],["keyword/30-23",[]],["title/30",[29,14.138,161,12.822,185,18.44,731,16.561,732,15.865,2343,19.251,4737,31.058,4750,33.881]],["name/30",[4750,1.134]],["text/30",[0,3.213,1,3.261,2,1.743,5,0.921,6,3.293,8,0.494,9,0.549,10,0.564,20,0.737,21,0.671,23,1.659,29,1.695,31,1.041,63,0.602,137,1.42,138,2.432,139,1.967,142,0.964,144,0.623,147,0.623,149,2.314,151,0.607,152,2.396,153,0.903,154,1.239,159,1.276,161,3.334,185,0.522,188,2.808,190,0.651,196,0.678,199,0.795,205,0.859,206,1.112,207,0.97,210,0.758,213,2.128,214,0.633,217,1.561,221,3.055,223,1.912,225,1.762,226,2.211,231,0.932,237,0.737,241,0.737,243,0.584,245,0.693,246,3.711,247,0.549,248,1.513,250,1.745,256,2.192,258,3.571,261,1.139,263,1.449,265,2.357,272,3.822,273,1.252,279,4.604,286,4.16,291,2.206,303,4.866,306,1.078,315,2.102,318,0.709,327,1.491,329,0.701,330,0.617,341,0.701,346,0.505,351,2.954,352,5.013,354,2.143,359,1.343,362,2.481,364,0.664,369,1.041,371,3.017,376,1.121,386,0.747,390,0.623,402,4.276,411,3.001,416,1.803,417,2.42,421,2.635,428,0.701,433,2.541,435,2.57,442,2.841,445,0.633,459,1.958,463,0.658,465,1.927,466,2.541,467,2.083,478,1.226,493,0.664,494,1.309,497,0.727,498,3.661,505,3.079,510,1.159,513,1.18,516,2.736,526,2.685,527,1.055,529,0.824,536,1.586,540,1.402,541,2.242,542,0.718,545,0.607,551,1.149,553,0.612,554,0.56,567,1.139,571,0.685,574,4.54,576,3.508,577,0.737,588,5.503,596,1.629,597,1.169,609,1.772,613,1.239,707,3.519,712,1.121,722,0.633,725,0.639,728,4.538,729,0.88,730,4.802,731,4.216,732,4.097,733,3.792,734,1.252,738,2.354,749,1.667,750,0.997,756,0.678,768,2.169,776,1.715,788,1.294,799,1.239,807,0.671,823,0.709,830,0.77,832,1.343,843,1.343,860,4.5,868,1.343,871,0.795,908,0.678,910,1.309,918,1.095,929,6.623,930,2.801,950,0.809,964,1.949,967,0.607,981,0.693,1015,1.846,1024,1.169,1026,4.103,1048,0.903,1058,2.69,1072,4.613,1075,0.795,1094,1.921,1113,1.927,1125,1.42,1148,1.202,1153,0.758,1172,0.96,1206,0.758,1226,1.772,1229,2.928,1238,0.709,1281,1.379,1293,1.84,1330,0.795,1380,0.929,1477,0.976,1482,2.55,1487,0.589,1492,1.252,1495,0.859,1499,2.901,1500,0.494,1517,2.801,1521,1.226,1526,0.727,1528,0.607,1531,0.602,1532,0.633,1533,0.88,1535,1.87,1538,0.539,1540,1.399,1542,1.191,1544,1.159,1546,0.628,1552,5.95,1558,0.685,1559,0.737,1562,2.125,1572,1.912,1575,0.628,1578,0.718,1585,0.709,1586,2.954,1590,1.13,1591,0.671,1593,2.403,1595,2.607,1606,0.701,1610,1.846,1614,0.651,1615,3.066,1616,0.782,1620,3.555,1622,0.651,1639,1.379,1656,1.574,1657,2.327,1658,1.294,1661,0.678,1672,0.824,1673,2.87,1675,0.693,1676,1.191,1679,1.762,1694,1.265,1697,0.727,1706,1.895,1707,1.87,1715,1.226,1724,2.87,1725,0.737,1726,1.802,1728,0.795,1735,4.552,1736,2.314,1739,0.709,1741,2.569,1757,2.784,1758,5.451,1770,1.691,1807,0.645,1808,0.859,1812,1.399,1830,2.119,1835,0.77,1841,1.343,1854,1.159,1855,2.357,1856,0.88,1867,0.737,1868,0.639,1902,0.701,1904,4.898,1906,0.709,1937,0.685,1939,1.659,1942,1.949,1947,2.757,1957,2.418,1958,0.685,1968,2.119,2000,1.239,2001,0.809,2002,0.709,2003,1.949,2020,6.422,2022,0.782,2025,4.549,2028,1.824,2029,0.929,2043,0.795,2044,0.859,2045,4.189,2062,0.903,2067,0.718,2070,2.749,2089,3.163,2112,2.01,2128,0.727,2130,0.747,2132,0.859,2134,0.824,2142,0.929,2152,1.772,2154,1.191,2158,1.772,2161,1.522,2162,1.42,2165,2.039,2186,2.884,2206,0.782,2240,1.239,2270,0.88,2300,0.929,2328,1.624,2329,1.552,2330,3.424,2333,0.841,2338,2.814,2343,4.057,2348,0.795,2354,1.493,2360,0.859,2362,1.586,2381,0.841,2394,0.859,2398,0.903,2410,0.997,2414,0.809,2421,0.96,2423,1.36,2452,1.239,2459,0.782,2469,1.782,2544,0.96,2551,1.42,2566,0.824,2573,2.888,2588,0.645,2593,0.809,2595,0.997,2618,0.929,2646,0.809,2675,2.637,2696,2.162,2719,0.809,2726,0.747,2744,3.003,2751,1.715,2762,0.824,2763,0.997,2771,2.888,2811,0.795,2828,0.903,2846,0.824,2850,1.586,2855,0.929,2901,1.586,2905,2.467,2906,2.562,2913,0.859,2938,0.859,2940,0.758,2972,0.997,3036,0.997,3099,4.846,3217,1.949,3219,1.379,3417,3.257,3454,2.039,3458,1.043,3464,0.929,3466,1.043,3468,0.903,3471,1.105,3474,3.489,3494,1.043,3585,0.747,3623,2.967,3624,1.772,3630,0.96,3662,0.96,3663,0.96,3664,0.96,3665,0.88,3686,2.888,3696,0.929,3703,2.467,3706,1.043,3752,2.84,3776,6.443,3779,0.88,3832,1.36,3891,0.718,3893,0.795,3894,1.043,3907,0.903,3915,0.997,3960,0.809,4026,4.063,4027,1.715,4036,1.772,4052,1.667,4108,1.043,4155,2.039,4156,2.749,4245,1.925,4298,0.88,4307,2.814,4320,2.321,4381,1.105,4507,0.903,4538,4.972,4540,2.039,4548,1.467,4559,2.814,4562,1.715,4571,3.384,4592,1.84,4612,1.043,4627,2.543,4727,2.749,4737,9.446,4738,4.211,4739,5.577,4740,5.646,4741,4.676,4742,4.676,4743,4.141,4744,0.903,4745,2.039,4746,2.84,4747,2.039,4748,4.141,4749,1.105,4750,2.467,4751,7.173,4752,1.105,4753,1.199,4754,1.667,4755,0.929,4756,1.199,4757,1.624,4758,2.212,4759,1.105,4760,0.859,4761,1.105,4762,1.199,4763,1.199,4764,2.562,4765,1.199,4766,1.199,4767,1.105,4768,10.725,4769,1.199,4770,0.96,4771,1.105,4772,2.212,4773,1.199,4774,2.389,4775,1.043,4776,1.199,4777,1.043,4778,1.043,4779,1.043,4780,0.997,4781,1.043,4782,1.043,4783,1.043,4784,1.043,4785,0.929,4786,1.925,4787,2.212,4788,0.96,4789,1.043,4790,1.84,4791,2.212,4792,3.336,4793,1.199,4794,3.081,4795,1.715,4796,2.84,4797,1.199,4798,2.84,4799,1.199,4800,1.105,4801,1.199,4802,1.199,4803,1.199,4804,0.997,4805,1.199,4806,1.199,4807,1.105,4808,1.199,4809,0.997,4810,1.043,4811,2.212,4812,2.84,4813,1.772,4814,4.063,4815,2.262,4816,2.979,4817,1.199,4818,0.841,4819,1.043,4820,3.07,4821,3.188,4822,2.681,4823,0.997,4824,1.043,4825,1.043,4826,3.188,4827,2.039,4828,0.96,4829,1.199,4830,4.414,4831,4.676,4832,1.105,4833,2.212,4834,0.929,4835,1.199,4836,2.039,4837,1.84,4838,1.84,4839,2.039,4840,1.84,4841,2.212,4842,2.84,4843,2.84,4844,1.105,4845,1.199,4846,0.96,4847,6.523,4848,5.954,4849,4.648,4850,2.562,4851,1.105,4852,1.925,4853,1.105,4854,2.212,4855,3.336,4856,2.212,4857,1.043,4858,1.199,4859,1.199,4860,1.105,4861,1.043]],["component/30",[5,0.286]],["keyword/30",[]],["title/31-1",[4475,65.909]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["keyword/31-1",[]],["title/31-2",[138,14.224,588,36.39,2148,40.27]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["keyword/31-2",[]],["title/31-3",[138,14.224,1476,30.187,1477,30.369]],["name/31-3",[]],["text/31-3",[]],["component/31-3",[]],["keyword/31-3",[]],["title/31-4",[182,31.136,346,23.178,506,30.198,1476,24.131,1477,24.277]],["name/31-4",[]],["text/31-4",[]],["component/31-4",[]],["keyword/31-4",[]],["title/31-5",[315,16.52,346,25.762,1476,26.821,1477,26.983]],["name/31-5",[]],["text/31-5",[]],["component/31-5",[]],["keyword/31-5",[]],["title/31-6",[138,14.224,189,28.834,190,37.412]],["name/31-6",[]],["text/31-6",[]],["component/31-6",[]],["keyword/31-6",[]],["title/31-7",[138,14.224,738,36.07,1500,28.368]],["name/31-7",[]],["text/31-7",[]],["component/31-7",[]],["keyword/31-7",[]],["title/31-8",[138,12.639,216,40.571,527,29.178,1500,25.206]],["name/31-8",[]],["text/31-8",[]],["component/31-8",[]],["keyword/31-8",[]],["title/31-9",[315,16.52,316,32.333,576,24.064,1500,25.206]],["name/31-9",[]],["text/31-9",[]],["component/31-9",[]],["keyword/31-9",[]],["title/31-10",[315,23.167,576,24.064,1500,25.206]],["name/31-10",[]],["text/31-10",[]],["component/31-10",[]],["keyword/31-10",[]],["title/31-11",[138,14.224,221,30.742,531,36.39]],["name/31-11",[]],["text/31-11",[]],["component/31-11",[]],["keyword/31-11",[]],["title/31-12",[138,16.265,2853,57.795]],["name/31-12",[]],["text/31-12",[]],["component/31-12",[]],["keyword/31-12",[]],["title/31-13",[138,16.265,415,53.141]],["name/31-13",[]],["text/31-13",[]],["component/31-13",[]],["keyword/31-13",[]],["title/31-14",[138,11.371,343,34.808,567,28.345,735,30.499,2061,34.312]],["name/31-14",[]],["text/31-14",[]],["component/31-14",[]],["keyword/31-14",[]],["title/31-15",[138,16.265,262,46.597]],["name/31-15",[]],["text/31-15",[]],["component/31-15",[]],["keyword/31-15",[]],["title/31-16",[138,12.639,139,23.712,1528,30.991,4862,50.872]],["name/31-16",[]],["text/31-16",[]],["component/31-16",[]],["keyword/31-16",[]],["title/31",[29,16.716,138,10.334,161,15.159,713,29.971,735,27.719,2148,29.257]],["name/31",[735,0.286,4410,0.362,4411,0.362]],["text/31",[0,2.898,1,2.172,2,0.829,4,0.457,5,2.736,6,0.831,8,0.318,9,0.353,10,1.717,19,0.847,21,0.432,23,1.964,29,1.061,31,0.983,35,0.672,46,0.97,52,0.481,63,1.051,79,0.542,138,2.658,139,1.739,142,1.159,144,1.086,146,0.481,149,0.397,150,1.075,151,0.742,152,0.412,154,0.432,157,0.781,161,2.51,182,4.215,186,0.468,188,1.474,189,1.33,190,1.983,193,2.811,196,3.867,202,0.642,204,0.838,206,0.736,207,0.917,211,0.567,214,0.408,216,0.971,217,4.119,218,1.593,220,0.878,221,0.933,223,2.422,225,0.441,226,2.658,228,2.178,232,0.457,239,1.593,241,0.475,243,1.296,246,1.159,247,4.783,248,1.792,250,1.445,255,0.428,262,5.757,263,0.363,267,1.657,268,0.488,272,1.792,277,0.462,278,2.16,279,4.516,284,0.65,285,1.303,286,4.715,291,2.006,296,0.437,297,0.468,299,0.432,302,0.521,303,4.152,306,1.779,308,1.363,309,0.567,315,3.306,316,4.377,323,0.419,325,1.342,327,3.196,330,0.754,342,1.322,343,1.322,344,3.907,346,3.81,347,0.349,351,0.408,353,0.754,357,4.131,360,2.446,361,0.553,362,2.582,364,0.428,365,0.475,369,2.991,371,4.2,376,1.849,388,1.202,389,0.767,390,3.43,392,1.004,393,1.303,394,3.777,395,0.847,396,1.499,398,0.408,402,2.598,405,0.94,407,0.475,408,0.512,409,0.567,410,0.796,411,3.458,412,1.136,416,2.991,417,1.268,418,2.071,421,0.401,424,0.531,432,0.408,435,1.059,438,0.82,440,0.432,442,0.488,445,0.408,457,0.531,458,0.901,459,1.068,463,0.804,470,2.008,476,0.709,477,0.481,478,2.486,479,0.531,483,1.418,485,0.503,487,0.412,488,1.458,490,0.82,493,3.225,498,2.041,500,0.567,505,0.468,506,4.285,508,1.269,510,1.912,511,0.581,521,0.503,526,1.004,527,2.14,529,0.531,531,1.105,536,1.499,537,0.475,538,1.209,540,2.648,541,0.451,542,0.878,545,1.849,548,0.334,551,1.086,554,4.504,557,0.428,567,1.077,574,3.817,576,1.249,577,0.475,581,0.812,584,0.428,588,5.048,593,0.812,594,0.488,596,0.408,597,2.567,599,0.913,613,0.82,707,2.028,712,2.635,713,0.462,722,1.105,725,3.522,731,3.35,732,4.021,733,1.158,734,1.183,735,3.524,738,4.338,744,2.418,756,0.437,768,3.99,780,0.531,783,0.481,788,0.451,797,2.749,799,0.82,802,0.401,807,0.82,808,0.913,811,1.237,823,0.457,830,0.495,832,2.479,836,1.953,837,0.531,843,0.889,849,1.88,851,0.767,856,1.98,860,3.938,864,1.218,867,0.618,868,0.468,871,1.386,874,0.531,881,0.503,891,0.878,904,0.581,908,2.065,918,0.725,928,2.35,932,1.253,940,0.553,944,1.35,950,0.521,958,0.672,960,0.531,964,1.322,967,2.797,970,2.51,971,0.553,995,1.828,996,1.028,1001,1.573,1015,0.462,1016,0.581,1024,0.408,1026,1.921,1068,0.512,1075,0.971,1093,4.546,1113,3.319,1125,1.342,1142,1.209,1148,1.444,1157,0.618,1196,0.598,1224,0.531,1229,0.373,1230,0.711,1238,0.867,1239,5.358,1254,1.322,1264,2.002,1276,0.542,1330,0.971,1373,0.642,1380,0.598,1388,0.581,1476,4.06,1477,4.038,1479,0.446,1482,1.834,1484,0.503,1489,1.951,1491,0.432,1492,0.437,1493,2.371,1497,0.521,1500,2.143,1502,1.342,1503,0.503,1504,0.971,1505,1.007,1507,2.219,1515,0.468,1517,0.481,1519,0.926,1521,1.158,1528,2.46,1531,1.051,1532,0.408,1533,1.075,1535,0.468,1536,0.913,1538,0.939,1540,0.488,1542,0.788,1543,0.437,1546,2.35,1547,0.457,1562,0.812,1564,0.989,1565,0.468,1566,1.794,1567,0.642,1569,0.542,1572,2.593,1573,0.457,1575,3.695,1578,0.462,1583,1.363,1586,2.371,1588,0.432,1590,0.748,1591,0.432,1593,0.366,1594,0.457,1595,2.24,1608,0.82,1610,0.878,1615,0.391,1622,0.419,1630,1.322,1631,0.503,1634,0.503,1639,1.303,1644,1.322,1661,1.183,1664,0.475,1673,0.829,1676,0.788,1690,0.391,1691,1.488,1694,1.195,1701,1.707,1702,0.847,1715,2.022,1724,0.829,1725,0.475,1726,0.451,1735,2.065,1736,0.754,1739,0.457,1741,0.441,1743,0.955,1754,0.457,1757,0.423,1762,1.411,1768,0.468,1785,3.395,1807,0.788,1809,5.865,1810,0.711,1812,3.492,1815,0.451,1820,2.512,1822,1.183,1835,1.342,1837,0.457,1842,0.618,1843,1.147,1844,0.531,1850,0.581,1852,1.125,1854,1.095,1855,0.475,1856,0.567,1862,0.82,1867,0.901,1877,1.467,1878,0.468,1883,0.451,1904,3.463,1917,1.386,1919,1.467,1936,0.581,1937,1.52,1938,1.209,1939,3.282,1942,0.926,1947,0.796,1948,1.173,1949,3.175,1952,5.656,1957,3.796,1966,0.581,1969,0.581,1976,0.989,1977,3.404,1995,0.512,1996,1.077,1997,1.05,2000,0.432,2002,0.457,2003,0.488,2027,6.888,2028,0.457,2032,0.503,2044,0.553,2052,0.481,2066,0.503,2067,0.462,2074,0.553,2075,1.136,2089,0.481,2118,0.468,2123,1.386,2124,0.488,2127,1.253,2129,0.512,2130,0.913,2142,1.136,2148,5.532,2149,1.535,2150,2.002,2153,2.998,2154,6.304,2155,1.575,2156,1.906,2162,0.94,2187,0.512,2188,1.76,2189,0.495,2190,1.028,2215,0.503,2216,0.878,2240,1.778,2245,0.618,2304,1.007,2309,1.363,2330,1.411,2337,0.642,2343,3.005,2350,0.495,2372,0.926,2377,0.542,2390,0.495,2396,0.521,2400,0.531,2405,0.475,2409,1.007,2419,1.103,2423,0.475,2444,1.269,2450,0.581,2452,0.432,2469,0.847,2479,0.618,2489,0.531,2490,1.707,2491,2.543,2492,1.674,2494,0.581,2507,0.553,2534,2.926,2535,0.598,2536,0.512,2542,0.567,2547,1.555,2551,0.495,2564,0.581,2570,0.503,2584,2.211,2601,0.672,2602,0.598,2619,0.581,2620,0.672,2646,1.794,2649,0.642,2656,0.423,2674,1.007,2696,1.028,2719,0.521,2726,0.481,2743,0.542,2744,2.418,2762,0.531,2764,0.451,2808,1.075,2816,0.451,2820,0.503,2834,0.542,2837,0.531,2839,1.411,2841,0.642,2842,2.313,2844,0.642,2846,0.531,2853,0.567,2859,0.642,2871,2.947,2916,0.94,2937,0.542,2939,0.531,2956,0.567,2968,0.567,2980,0.553,3011,0.642,3033,3.408,3082,2.679,3092,0.618,3217,0.926,3466,2.313,3524,0.672,3528,2.277,3621,2.002,3623,0.857,3624,1.674,3662,1.173,3663,1.173,3664,1.173,3665,1.075,3666,0.567,3685,0.618,3754,1.007,3755,2.331,3757,1.05,3758,2.763,3759,1.499,3760,1.274,3762,2.763,3763,2.313,3766,0.531,3807,0.711,3809,0.598,3879,1.103,3885,0.642,3891,0.878,3893,0.512,3907,0.581,3920,0.711,3951,0.672,3952,0.567,4051,1.075,4082,0.642,4088,0.618,4156,0.553,4157,0.711,4163,0.567,4283,0.618,4284,0.642,4298,1.535,4303,0.581,4359,1.35,4360,1.35,4362,0.672,4363,0.672,4364,0.711,4365,0.711,4367,0.672,4368,0.672,4414,1.173,4441,1.613,4444,0.567,4445,0.542,4447,0.598,4465,0.94,4467,1.136,4544,2.211,4545,4.79,4547,1.05,4548,0.971,4551,0.581,4552,0.581,4581,1.819,4592,0.642,4705,0.581,4708,0.598,4709,0.521,4721,2.42,4724,0.598,4759,1.35,4770,0.618,4788,0.618,4795,0.598,4816,0.512,4828,1.173,4862,8.225,4863,1.35,4864,4.848,4865,0.711,4866,1.35,4867,0.642,4868,6.098,4869,6.098,4870,1.927,4871,1.674,4872,1.274,4873,0.772,4874,0.772,4875,1.218,4876,0.772,4877,2.09,4878,0.772,4879,0.642,4880,0.772,4881,0.772,4882,0.772,4883,1.35,4884,1.465,4885,0.711,4886,0.772,4887,0.642,4888,0.772,4889,0.618,4890,0.772,4891,1.35,4892,0.672,4893,0.772,4894,0.772,4895,0.772,4896,0.772,4897,0.772,4898,1.218,4899,0.772,4900,1.465,4901,1.35,4902,0.772,4903,0.672,4904,0.642,4905,0.772,4906,0.772,4907,0.672,4908,0.672,4909,0.772,4910,0.711,4911,0.711,4912,0.711,4913,3.176,4914,4.134,4915,2.658,4916,3.175,4917,4.084,4918,4.084,4919,4.084,4920,4.486,4921,1.621,4922,0.772,4923,1.465,4924,1.465,4925,1.927,4926,1.927,4927,1.274,4928,0.772,4929,1.465,4930,0.772,4931,1.35,4932,0.642,4933,1.465,4934,0.672,4935,1.218,4936,1.218,4937,0.642,4938,0.672,4939,0.672,4940,0.711,4941,0.672,4942,0.672,4943,0.542,4944,0.581,4945,0.642,4946,0.711,4947,0.711,4948,0.711,4949,0.711,4950,0.711,4951,0.711,4952,0.772,4953,0.772,4954,0.711,4955,0.711,4956,0.711,4957,0.711,4958,0.772,4959,0.772,4960,4.486,4961,3.271,4962,4.949,4963,2.658,4964,2.658,4965,0.772,4966,0.772,4967,0.711,4968,1.819,4969,1.819,4970,0.772,4971,0.772,4972,0.672,4973,0.711,4974,0.672,4975,0.772,4976,4.486,4977,0.711,4978,0.711,4979,0.711,4980,0.772,4981,0.711,4982,0.711,4983,0.711,4984,1.35,4985,1.35,4986,0.642,4987,1.465,4988,0.772,4989,2.658,4990,2.763,4991,0.772,4992,0.581,4993,0.772,4994,2.45,4995,0.772,4996,2.763,4997,2.763,4998,2.927,4999,2.313,5000,0.711,5001,0.772,5002,0.642,5003,0.772,5004,0.598,5005,0.772,5006,0.772,5007,0.772,5008,1.465,5009,0.642,5010,0.772,5011,0.772,5012,0.772,5013,1.927,5014,0.772,5015,1.465,5016,1.465,5017,1.927,5018,1.35,5019,4.476,5020,1.35,5021,3.364,5022,1.535,5023,0.711,5024,3.903,5025,1.35,5026,1.35,5027,1.274,5028,1.274,5029,1.35,5030,0.581,5031,1.35,5032,0.618,5033,0.618,5034,0.772,5035,0.711,5036,0.772,5037,0.672,5038,0.642,5039,0.618,5040,0.772,5041,0.711,5042,0.642,5043,0.642,5044,0.581,5045,1.274,5046,0.672,5047,0.711,5048,0.672,5049,0.711,5050,0.672,5051,0.711,5052,0.672,5053,0.711,5054,1.465,5055,0.772,5056,0.772,5057,0.642,5058,0.772,5059,0.772,5060,0.772,5061,0.711,5062,0.772,5063,0.642,5064,1.465,5065,0.772,5066,0.772,5067,0.772,5068,0.772,5069,1.465,5070,0.772,5071,0.772,5072,0.772,5073,0.672]],["component/31",[5,0.286]],["keyword/31",[]],["title/32",[142,21.802,490,28.003,510,26.206,516,14.29,5074,46.104,5075,46.104]],["name/32",[490,0.424,510,0.396]],["text/32",[0,4.315,1,4.251,5,2.874,6,3.822,8,2.98,9,3.312,19,4.182,142,4.192,148,5.607,151,3.664,152,3.857,155,6.014,206,4.834,207,3.171,223,3.606,231,3.046,247,3.312,248,3.552,279,3.229,281,4.882,302,4.882,303,3.012,306,3.525,315,3.11,325,4.643,356,4.333,388,3.27,391,4.23,392,4.62,406,4.447,410,3.93,416,4.524,458,4.447,466,5.441,490,6.05,502,5.226,510,6.46,516,3.426,542,4.333,553,4.912,554,5.049,587,5.277,709,8.369,981,4.182,1048,5.448,1148,3.93,1492,4.091,1496,4.717,1499,4.136,1532,3.822,1538,3.249,1606,5.626,1621,5.309,1697,4.389,1734,4.882,1844,4.974,1868,3.857,1874,4.281,2027,4.717,2128,5.837,2189,4.643,2362,5.186,2405,4.447,2418,4.509,2444,6.99,2452,4.049,2576,5.792,2577,5.792,2578,5.792,2579,9.558,2580,6.897,2581,7.061,2953,7.456,3583,5.792,5004,9.296,5074,6.666,5075,8.865,5076,7.998,5077,8.865,5078,9.96,5079,6.014,5080,7.232]],["component/32",[5,0.286]],["keyword/32",[]],["title/33-1",[138,14.224,282,40.27,4476,51.864]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["keyword/33-1",[]],["title/33-2",[2204,55.777]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["keyword/33-2",[]],["title/33-3",[4307,67.476]],["name/33-3",[]],["text/33-3",[]],["component/33-3",[]],["keyword/33-3",[]],["title/33-4",[193,28.989,412,42.779]],["name/33-4",[]],["text/33-4",[]],["component/33-4",[]],["keyword/33-4",[]],["title/33-5",[412,37.412,576,27.083,910,40.75]],["name/33-5",[]],["text/33-5",[]],["component/33-5",[]],["keyword/33-5",[]],["title/33-6",[412,37.412,2324,48.313,2760,51.864]],["name/33-6",[]],["text/33-6",[]],["component/33-6",[]],["keyword/33-6",[]],["title/33-7",[46,36.534,193,28.989]],["name/33-7",[]],["text/33-7",[]],["component/33-7",[]],["keyword/33-7",[]],["title/33-8",[46,31.95,802,35.759,1885,38.544]],["name/33-8",[]],["text/33-8",[]],["component/33-8",[]],["keyword/33-8",[]],["title/33-9",[303,32.791,1476,34.518]],["name/33-9",[]],["text/33-9",[]],["component/33-9",[]],["keyword/33-9",[]],["title/33-10",[548,39.826]],["name/33-10",[]],["text/33-10",[]],["component/33-10",[]],["keyword/33-10",[]],["title/33-11",[138,16.438,246,23.988,347,24.885,531,29.09]],["name/33-11",[]],["text/33-11",[]],["component/33-11",[]],["keyword/33-11",[]],["title/33-12",[246,18.44,284,18.775,290,36.585,363,46.172,1458,25.041]],["name/33-12",[]],["text/33-12",[]],["component/33-12",[]],["keyword/33-12",[]],["title/33-13",[232,40.75,246,30.008,357,28.994]],["name/33-13",[]],["text/33-13",[]],["component/33-13",[]],["keyword/33-13",[]],["title/33-14",[246,23.988,258,24.425,356,32.977,415,37.151,594,34.808]],["name/33-14",[]],["text/33-14",[]],["component/33-14",[]],["keyword/33-14",[]],["title/33-15",[161,23.859,180,38.661]],["name/33-15",[]],["text/33-15",[]],["component/33-15",[]],["keyword/33-15",[]],["title/33-16",[342,38.689,343,38.689,1575,32.049,2454,39.901]],["name/33-16",[]],["text/33-16",[]],["component/33-16",[]],["keyword/33-16",[]],["title/33-17",[207,34.518,2901,56.452]],["name/33-17",[]],["text/33-17",[]],["component/33-17",[]],["keyword/33-17",[]],["title/33-18",[142,26.663,158,32.333,189,25.62,315,16.52]],["name/33-18",[]],["text/33-18",[]],["component/33-18",[]],["keyword/33-18",[]],["title/33-19",[161,27.856]],["name/33-19",[]],["text/33-19",[]],["component/33-19",[]],["keyword/33-19",[]],["title/33-20",[138,12.639,194,36.207,412,33.241,910,36.207]],["name/33-20",[]],["text/33-20",[]],["component/33-20",[]],["keyword/33-20",[]],["title/33-21",[138,12.639,412,33.241,554,28.579,910,36.207]],["name/33-21",[]],["text/33-21",[]],["component/33-21",[]],["keyword/33-21",[]],["title/33-22",[138,12.639,412,33.241,910,36.207,4171,48.99]],["name/33-22",[]],["text/33-22",[]],["component/33-22",[]],["keyword/33-22",[]],["title/33-23",[138,18.99]],["name/33-23",[]],["text/33-23",[]],["component/33-23",[]],["keyword/33-23",[]],["title/33-24",[5081,84.717]],["name/33-24",[]],["text/33-24",[]],["component/33-24",[]],["keyword/33-24",[]],["title/33-25",[4269,79.976]],["name/33-25",[]],["text/33-25",[]],["component/33-25",[]],["keyword/33-25",[]],["title/33-26",[5082,84.717]],["name/33-26",[]],["text/33-26",[]],["component/33-26",[]],["keyword/33-26",[]],["title/33-27",[4379,76.436]],["name/33-27",[]],["text/33-27",[]],["component/33-27",[]],["keyword/33-27",[]],["title/33-28",[5083,84.717]],["name/33-28",[]],["text/33-28",[]],["component/33-28",[]],["keyword/33-28",[]],["title/33-29",[5084,79.976]],["name/33-29",[]],["text/33-29",[]],["component/33-29",[]],["keyword/33-29",[]],["title/33-30",[5085,84.717]],["name/33-30",[]],["text/33-30",[]],["component/33-30",[]],["keyword/33-30",[]],["title/33",[5,11.736,29,13.126,161,11.904,194,23.248,346,16.541,412,21.344,576,15.451,1082,25.62,4377,31.456]],["name/33",[4377,1.134]],["text/33",[0,0.567,1,0.559,5,0.924,6,2.985,8,0.308,9,0.342,10,1.216,14,2.561,19,0.821,23,1.664,24,0.959,29,0.475,31,3.768,46,3.853,63,0.714,138,2.706,139,4.216,142,2.217,144,2.807,145,2.741,147,1.054,149,1.045,151,1.309,154,0.418,157,1.379,158,0.751,161,2.803,169,0.322,180,0.697,185,0.326,188,2.508,189,1.669,190,3.877,193,4.263,194,4.55,199,2.05,206,1.299,207,2.37,213,2.955,214,0.751,217,1.566,218,1.216,220,1.853,221,2.895,223,1.289,225,1.478,226,3.491,228,1.083,231,1.999,232,0.442,233,1.566,235,2.533,239,2.131,243,2.48,245,1.788,246,4.115,248,3.504,250,2.839,252,0.524,253,0.997,254,0.524,257,1.768,258,1.944,260,0.514,261,3.457,262,1.83,263,5.711,265,1.248,267,1.266,272,1.269,279,0.334,280,0.472,282,0.437,283,1.174,284,5.084,286,2.737,290,1.991,291,0.367,294,2.165,296,0.803,297,1.876,298,2.08,299,3.492,303,3.052,311,1.266,315,1.282,317,0.563,326,1.62,327,0.687,330,3.079,334,0.442,335,0.432,336,0.885,337,2.004,338,0.414,341,0.437,342,2.25,343,2.25,344,3.069,346,3.164,347,3.133,348,1.424,349,0.524,350,1.62,353,0.731,354,2.264,355,0.495,357,4.722,358,3.607,360,2.393,362,0.63,363,3.881,364,4.439,367,0.524,369,2.061,373,0.841,376,4.916,377,0.466,378,1.148,382,0.427,383,1.49,387,0.579,388,4.226,389,0.744,392,1.709,395,4.238,402,2.12,405,0.912,411,4.882,412,7.154,416,3.768,417,0.677,420,0.402,433,2.478,437,0.524,438,0.795,441,0.873,442,1.955,443,0.579,445,0.751,446,3.148,448,0.912,459,2.425,463,2.791,465,1.02,478,0.414,483,2.713,487,0.757,498,2.594,502,0.406,513,0.757,526,1.242,527,2.264,531,3.297,534,0.41,542,0.448,545,1.309,546,1.53,547,0.388,548,1.34,553,1.32,554,4.321,557,4.163,562,0.48,567,1.045,569,1.529,571,0.812,574,2.756,576,4.928,584,1.125,587,0.41,588,0.751,589,0.466,593,2.995,594,0.898,597,3.663,602,1.651,679,0.563,707,0.918,712,0.378,732,1.334,738,1.62,744,1.83,747,1.569,748,0.453,756,0.423,799,0.418,802,2.07,807,0.418,808,1.266,811,0.442,837,0.514,851,0.744,890,1.495,910,7.559,962,0.524,972,0.504,981,1.788,1012,1.788,1025,0.912,1026,0.351,1043,1.853,1066,1.07,1068,2.359,1082,0.487,1093,1.299,1113,0.375,1141,1.569,1218,0.898,1222,1.569,1229,1.496,1247,0.563,1250,0.524,1332,0.504,1337,0.448,1458,1.53,1464,1.137,1466,0.548,1476,3.578,1477,4.911,1481,1.137,1482,0.714,1483,1.043,1487,2.8,1491,0.418,1492,1.148,1498,0.48,1501,4.25,1507,1.103,1521,2.208,1522,1.731,1524,1.659,1528,0.378,1530,0.563,1531,0.375,1532,1.88,1535,0.453,1538,0.638,1544,1.62,1545,4.299,1546,1.62,1548,0.466,1551,1.232,1558,3.26,1562,0.414,1564,0.504,1572,2.184,1573,0.841,1575,3.517,1585,0.442,1586,1.073,1588,1.136,1589,2.957,1590,0.382,1591,1.447,1594,0.442,1595,0.612,1606,0.831,1609,0.398,1614,0.406,1615,1.309,1620,0.37,1634,1.324,1635,0.442,1656,1.579,1664,0.873,1673,0.423,1675,3.457,1678,1.137,1679,0.427,1690,2.405,1702,0.432,1724,1.148,1725,0.459,1732,0.514,1734,1.37,1735,0.423,1736,1.045,1741,0.427,1744,0.41,1745,0.423,1747,0.514,1748,0.536,1749,0.548,1751,1.876,1757,0.41,1765,0.959,1768,1.232,1770,0.41,1773,0.621,1774,2.848,1775,0.621,1776,1.181,1777,3.089,1809,3.848,1815,0.831,1821,0.524,1837,2.359,1840,1.49,1843,1.418,1852,1.664,1855,0.459,1862,4.869,1868,0.398,1870,0.524,1874,0.442,1878,1.569,1882,0.621,1885,0.418,1902,0.437,1904,2.8,1935,2.17,1936,1.947,1938,2.942,1939,1.391,1944,1.148,1947,1.405,1953,1.232,1957,3.73,1964,6.483,1981,0.689,1984,0.65,1990,0.831,1992,1.688,1996,1.832,2000,3.347,2002,0.442,2022,0.926,2067,0.851,2072,0.514,2089,5.496,2112,0.926,2118,1.876,2127,0.448,2129,2.359,2130,0.885,2138,1.181,2154,0.402,2163,0.48,2170,1.871,2183,0.898,2188,0.787,2189,0.48,2211,0.598,2216,0.851,2218,0.598,2240,0.795,2270,0.548,2273,1.216,2291,1.137,2295,3.945,2304,0.977,2324,7.259,2325,1.574,2371,0.524,2374,0.563,2419,0.563,2423,0.459,2430,4.829,2444,0.453,2449,0.579,2452,2.231,2454,2.017,2457,0.621,2459,1.324,2469,1.174,2488,0.442,2489,0.977,2503,0.563,2533,0.487,2542,0.548,2547,0.437,2558,5.071,2583,0.459,2585,7.152,2588,0.402,2626,0.514,2639,0.548,2656,0.41,2670,0.514,2726,0.466,2760,8.194,2761,0.48,2764,0.437,2796,0.621,2809,0.487,2816,0.437,2820,1.686,2846,0.514,2870,1.303,2875,0.395,2876,0.997,2893,0.536,2901,1.018,2908,0.579,2913,0.536,2946,0.495,2963,0.621,2967,1.745,2995,1.181,3076,4.982,3083,0.579,3468,2.329,3479,1.424,3525,0.997,3623,0.437,3625,0.548,3766,1.778,3789,0.579,3794,1.018,3803,0.621,3891,0.448,3960,0.504,3973,1.871,4087,0.598,4128,0.579,4150,1.309,4171,5.549,4269,3.467,4304,2.149,4307,0.548,4321,0.621,4370,2.69,4373,0.536,4377,7.061,4379,3.314,4434,0.504,4452,1.626,4453,0.621,4458,0.689,4538,3.374,4542,0.536,4571,3.002,4734,0.563,4818,0.524,5044,0.563,5081,4.038,5082,4.982,5083,2.382,5084,2.249,5085,2.382,5086,4.747,5087,0.747,5088,1.309,5089,3.278,5090,0.65,5091,0.747,5092,0.747,5093,2.585,5094,0.747,5095,0.747,5096,0.747,5097,0.747,5098,0.747,5099,2.03,5100,2.03,5101,0.747,5102,2.585,5103,0.747,5104,0.747,5105,6.712,5106,1.42,5107,2.585,5108,2.585,5109,0.747,5110,0.747,5111,1.42,5112,1.42,5113,0.747,5114,0.747,5115,1.42,5116,1.42,5117,2.382,5118,2.69,5119,3.092,5120,5.088,5121,1.309,5122,3.985]],["component/33",[5,0.286]],["keyword/33",[]],["title/34",[143,73.608]],["name/34",[5123,1.416]],["text/34",[0,3.542,1,3.972,2,1.441,5,3.222,6,3.217,7,0.827,8,1.049,9,2.828,10,2.904,13,0.732,14,0.628,19,6.235,20,2.66,21,1.964,22,1.162,23,0.752,24,0.943,25,1.162,26,0.848,27,1.974,29,3.962,31,2.653,46,2.008,52,3.135,63,5.203,74,1.119,136,2.413,137,1.635,138,2.419,139,0.987,141,9.653,143,4.945,144,3.453,145,6.25,146,4.643,147,2.247,148,6.038,149,3.18,150,2.576,151,2.857,152,2.682,153,3.259,154,1.964,155,5.879,156,8.123,157,2.682,158,3.737,161,3.396,182,0.791,185,5.542,186,1.546,188,1.628,189,0.585,193,2.742,207,0.613,213,1.206,214,1.346,217,3.368,218,1.526,221,4.058,223,0.697,224,1.635,225,2.876,226,0.609,231,2.118,232,3.338,233,2.192,234,1.002,235,0.808,236,3.465,237,3.468,238,3.987,239,0.837,240,0.676,243,0.681,244,0.837,246,1.886,247,1.166,248,2.124,250,0.636,255,0.774,256,0.799,258,1.557,260,0.961,261,2.904,262,2.561,263,1.651,266,3.987,267,2.697,272,3.472,273,1.441,276,1.162,277,1.526,278,1.507,279,1.932,282,1.49,283,0.808,284,2.503,285,0.871,286,3.416,291,0.686,297,1.546,303,1.802,305,1.083,306,2.109,308,1.661,309,1.026,310,1.162,311,1.588,315,1.795,316,1.346,323,0.759,326,2.635,327,0.676,330,1.312,334,3.935,335,2.029,336,0.871,338,0.774,343,2.219,346,4.193,350,0.732,353,0.72,357,1.822,360,1.651,361,1.002,362,2.95,363,0.808,365,5.152,366,5.37,367,1.787,369,0.657,370,1.507,371,1.27,376,1.29,388,1.152,389,1.334,390,0.726,391,2.052,392,1.223,393,1.588,394,0.799,395,0.808,399,1.826,400,3.621,401,1.162,402,1.932,407,4.58,408,0.927,410,3.064,411,0.648,412,0.759,417,0.667,418,1.661,422,1.49,429,1.87,432,3.514,433,3.493,434,2.643,435,1.29,440,4.17,458,2.158,459,0.714,463,0.767,467,0.759,468,2.102,471,1.053,476,3.217,477,1.588,478,0.774,483,0.745,484,0.871,485,0.911,487,3.546,488,0.767,489,1.162,490,3.157,493,0.774,498,0.636,499,1.083,501,1.162,502,1.384,503,0.961,506,0.767,508,1.546,510,2.635,511,3.788,513,2.307,516,0.728,526,2.078,527,1.215,531,0.739,538,1.473,540,0.636,542,0.837,543,1.119,546,0.827,548,1.52,553,0.714,554,1.19,567,1.312,570,1.002,574,2.847,576,1.978,578,0.911,581,3.422,582,3.987,583,1.053,584,1.411,587,0.767,588,3.264,593,0.774,596,1.346,599,2.188,601,0.981,602,2.008,604,6.846,608,1.216,609,2.04,613,3.457,626,2.576,707,0.632,708,1.119,709,1.216,712,1.29,713,7.075,722,0.739,728,0.981,730,0.981,731,2.767,732,2.651,735,3.422,749,3.788,788,1.49,831,2.72,847,4.409,851,1.334,860,0.739,871,0.927,881,0.911,918,1.736,929,0.859,964,0.884,965,0.791,967,2.192,981,0.808,1024,1.346,1026,1.651,1048,1.053,1093,0.702,1142,2.029,1153,0.884,1177,1.288,1238,0.827,1294,0.943,1337,0.837,1360,0.981,1476,1.897,1477,1.908,1479,0.808,1484,0.911,1487,1.251,1492,0.791,1493,0.739,1500,2.544,1502,3.621,1503,3.678,1504,4.689,1505,1.752,1521,0.774,1526,0.848,1528,0.708,1531,1.764,1532,0.739,1533,1.026,1536,0.871,1546,0.732,1552,0.897,1559,0.859,1571,1.053,1573,0.827,1618,1.974,1640,1.002,1654,0.961,1664,0.859,1675,0.808,1677,2.413,1679,0.799,1690,2.548,1693,1.026,1706,0.859,1715,1.411,1725,0.859,1735,1.441,1736,0.72,1739,0.827,1754,0.827,1758,0.837,1768,0.848,1770,1.925,1780,1.826,1785,0.859,1786,1.719,1789,1.826,1820,0.859,1822,0.791,1838,0.897,1843,1.397,1845,0.961,1852,0.752,1854,1.334,1878,0.848,1904,1.251,1938,1.473,1939,1.371,1947,0.759,1951,0.837,1952,1.456,1957,1.371,1979,0.981,1996,0.72,2000,0.782,2027,0.911,2083,0.961,2087,0.782,2104,1.752,2128,0.848,2136,1.919,2148,1.49,2154,1.889,2244,0.943,2247,1.216,2291,2.04,2324,0.981,2342,3.135,2343,1.159,2348,0.927,2349,1.119,2355,1.974,2400,0.961,2415,1.162,2444,0.848,2458,0.981,2469,1.473,2490,0.897,2498,1.083,2532,0.981,2534,0.911,2572,1.826,2588,0.752,2618,1.083,2630,0.981,2632,1.162,2639,1.026,2670,0.961,2743,0.981,2744,0.827,2754,1.162,2764,1.49,2778,1.919,2847,1.162,2853,1.026,2861,2.289,2869,1.162,2875,3.264,2881,2.347,2895,0.897,2900,1.083,2916,1.635,2922,1.119,2927,1.288,2936,0.943,2946,0.927,2948,1.119,2952,1.026,2958,1.053,3020,1.053,3032,0.943,3033,0.981,3109,2.822,3219,0.871,3226,1.288,3408,1.083,3412,1.216,3417,0.897,3474,1.752,3497,1.216,3520,1.026,3585,0.871,3623,0.817,3754,2.413,3759,2.516,3832,0.859,3891,0.837,3959,1.974,3961,2.04,4211,1.002,4260,1.162,4291,1.216,4373,2.516,4377,2.04,4408,2.118,4441,1.546,4465,0.897,4483,2.04,4484,2.04,4485,2.04,4737,1.026,4740,4.095,4750,1.119,4755,1.974,4757,1.87,4760,1.002,4814,1.119,4816,2.869,4962,0.981,5022,1.026,5042,1.162,5043,1.162,5124,3.606,5125,2.118,5126,2.118,5127,2.04,5128,2.547,5129,2.04,5130,2.216,5131,2.04,5132,2.918,5133,3.606,5134,6.516,5135,2.04,5136,2.118,5137,2.118,5138,2.216,5139,2.547,5140,3.598,5141,2.118,5142,2.118,5143,2.216,5144,2.216,5145,2.347,5146,2.216,5147,2.216,5148,2.216,5149,2.547,5150,2.347,5151,1.397,5152,1.397,5153,1.397,5154,3.987,5155,1.397,5156,3.509,5157,7.463,5158,2.547,5159,3.509,5160,4.027,5161,1.397,5162,1.288,5163,1.288,5164,1.288,5165,1.288,5166,1.397,5167,1.119,5168,1.397,5169,1.397,5170,1.216,5171,1.216,5172,1.288,5173,1.162,5174,1.397,5175,1.288,5176,2.347,5177,1.397,5178,1.397,5179,1.397,5180,1.397,5181,2.347,5182,3.234,5183,1.053,5184,1.083,5185,1.216,5186,1.397,5187,1.397,5188,1.397,5189,1.288,5190,1.288,5191,1.288,5192,1.216,5193,1.288,5194,1.216,5195,1.053,5196,1.397,5197,2.347,5198,1.119,5199,1.397,5200,1.397,5201,1.974,5202,1.397,5203,1.397,5204,1.119,5205,1.397,5206,1.397,5207,1.288,5208,1.288,5209,1.288,5210,1.288,5211,1.288,5212,1.288,5213,1.162,5214,1.162,5215,0.981,5216,1.397,5217,1.397]],["component/34",[5,0.286]],["keyword/34",[]],["title/35-1",[161,16.68,312,34.312,346,23.178,476,26.631,2778,41.46]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["keyword/35-1",[]],["title/35-2",[161,16.68,243,26.827,411,25.541,476,26.631,2779,44.076]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["keyword/35-2",[]],["title/35",[29,16.716,161,15.159,476,24.203,713,29.971,2778,37.681,2779,40.058]],["name/35",[476,0.685]],["text/35",[0,1.952,1,1.923,5,2.179,6,2.638,7,1.248,8,0.869,9,2.239,10,1.729,14,2.63,21,1.18,23,2.632,29,0.705,31,0.992,44,2.361,137,1.354,138,1.941,139,2.827,144,1.095,147,6.094,149,1.086,151,1.068,154,2.737,159,0.873,161,2.752,186,1.279,188,2.717,189,0.883,196,2.08,206,1.848,207,3.981,209,1.423,210,3.702,213,5.378,214,1.114,216,2.438,217,1.068,221,2.614,226,4.59,231,4.073,233,1.068,243,1.028,244,2.929,246,1.603,247,3.041,248,1.035,249,3.84,250,2.664,254,1.48,255,5.734,256,4.171,258,0.936,259,2.796,264,3.151,272,2.401,277,4.983,279,2.965,280,1.333,281,1.423,284,3.871,286,4.816,298,3.424,299,3.717,303,3.634,304,1.835,306,1.792,312,1.314,315,0.993,333,1.354,344,1.135,346,2.465,350,5.685,351,2.584,353,1.086,354,1.006,360,0.992,362,3.481,369,3.123,370,3.93,371,4.684,375,2.709,388,4.678,389,4.921,405,1.354,406,1.297,411,4.488,412,1.146,421,1.91,424,1.45,438,2.737,440,4.083,445,3.51,459,2.99,463,1.157,465,1.06,467,1.146,476,6.151,477,4.547,494,1.248,497,5.294,498,4.132,505,2.967,526,1.766,527,1.006,529,1.45,531,1.114,533,2.438,537,1.297,548,0.914,551,1.095,553,2.497,557,1.168,567,1.894,576,0.829,578,1.375,581,3.68,595,1.423,597,1.114,598,1.588,602,2.269,707,2.211,713,1.263,731,0.825,732,1.379,760,2.636,799,2.058,832,2.231,852,1.689,856,1.314,868,4.03,890,4.217,901,2.944,908,2.08,918,1.043,930,2.292,958,1.835,961,1.512,964,2.325,967,4.9,996,1.48,1012,1.219,1024,1.114,1026,3.69,1061,1.512,1094,1.314,1113,1.848,1125,1.354,1140,3.717,1148,2.657,1222,2.231,1229,2.366,1246,1.48,1254,3.092,1259,1.835,1289,1.689,1317,5.654,1482,1.848,1484,5.424,1491,3.277,1493,1.114,1498,1.354,1515,1.279,1522,1.18,1529,1.943,1532,2.584,1538,3.525,1540,1.333,1544,1.105,1547,1.248,1548,1.314,1565,1.279,1568,1.943,1572,4.35,1581,1.548,1588,2.737,1590,1.077,1593,2.773,1595,0.908,1609,3.122,1614,1.146,1615,2.966,1616,2.398,1620,2.897,1631,1.375,1656,1.878,1658,1.233,1661,1.193,1667,6.447,1675,2.126,1679,1.206,1690,1.863,1691,1.18,1724,1.193,1725,1.297,1726,1.233,1728,1.398,1736,1.086,1742,4.2,1744,4.002,1751,2.231,1757,3.643,1768,1.279,1770,2.017,1802,7.781,1803,4.198,1815,1.233,1822,2.08,1825,3.242,1835,1.354,1841,1.279,1868,2.607,1874,2.176,1902,2.86,1904,1.035,1944,1.193,1958,1.206,1977,1.233,1990,1.233,1996,3.42,2000,2.058,2012,3.431,2034,1.233,2038,1.193,2043,6.862,2044,2.636,2076,1.512,2083,1.45,2087,1.18,2120,1.206,2130,2.292,2132,1.512,2154,1.135,2163,1.354,2183,2.325,2186,1.354,2188,4.042,2190,1.48,2192,1.635,2216,2.929,2220,1.548,2240,1.18,2292,4.824,2326,4.297,2338,1.548,2343,2.225,2365,1.753,2372,2.325,2394,2.636,2405,1.297,2414,2.482,2418,3.65,2428,1.512,2488,1.248,2489,3.363,2490,1.354,2497,1.423,2547,2.151,2558,1.423,2565,1.635,2583,1.297,2588,1.135,2593,1.423,2600,1.588,2604,1.297,2614,1.375,2639,1.548,2672,1.548,2696,1.48,2697,1.753,2702,8.804,2704,4.66,2727,1.548,2743,1.48,2745,1.48,2764,2.151,2778,5.002,2779,5.318,2796,4.868,2797,6.722,2801,1.943,2809,2.398,2820,1.375,2851,1.588,2861,2.398,2868,4.254,2875,1.114,2895,1.354,2902,1.943,2916,1.354,3105,2.58,3109,2.398,3217,3.092,3237,1.943,3239,1.943,3240,1.943,3242,1.943,3243,7.236,3244,5.778,3245,4.254,3477,1.635,3479,2.58,3525,1.48,3528,1.512,3585,1.314,3622,1.943,3665,3.589,3769,3.058,3853,1.635,3876,1.635,3892,1.835,3893,1.398,3909,1.943,3941,1.753,4088,1.689,4134,1.635,4158,2.944,4211,1.512,4284,3.058,4423,1.943,4445,1.48,4459,1.943,4562,1.635,4760,1.512,4809,1.753,4816,1.398,4864,1.548,4883,1.943,4898,1.753,5033,1.689,5218,2.108,5219,2.108,5220,2.108,5221,1.689,5222,1.512,5223,2.108,5224,1.943,5225,2.108,5226,2.108,5227,5.854,5228,3.677,5229,3.677,5230,2.108,5231,2.108,5232,5.854,5233,2.108,5234,2.108,5235,2.108,5236,2.108,5237,2.108,5238,2.108,5239,2.108,5240,2.108,5241,1.375,5242,1.943,5243,1.835,5244,2.108,5245,2.108,5246,2.108,5247,1.943,5248,2.108,5249,2.108,5250,1.943,5251,1.753,5252,3.677,5253,2.108,5254,4.506,5255,3.677,5256,3.677,5257,2.108,5258,2.108,5259,2.108,5260,2.85,5261,2.944,5262,2.108,5263,2.108,5264,1.943,5265,2.108,5266,2.108,5267,1.943]],["component/35",[5,0.286]],["keyword/35",[]],["title/36-1",[142,30.008,315,18.593,410,37.412]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["keyword/36-1",[]],["title/36-2",[303,25.48,3417,39.275,3474,42.074,4740,40.571]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["keyword/36-2",[]],["title/36-3",[138,11.371,928,28.834,1476,24.131,1477,24.277,2343,25.044]],["name/36-3",[]],["text/36-3",[]],["component/36-3",[]],["keyword/36-3",[]],["title/36-4",[138,10.334,731,19.58,732,18.758,738,26.206,928,26.206,2343,22.761]],["name/36-4",[]],["text/36-4",[]],["component/36-4",[]],["keyword/36-4",[]],["title/36-5",[138,9.471,432,24.229,731,17.944,732,17.19,928,24.016,1552,29.432,2343,20.86]],["name/36-5",[]],["text/36-5",[]],["component/36-5",[]],["keyword/36-5",[]],["title/36-6",[138,10.334,731,19.58,732,18.758,928,26.206,2343,22.761,2656,27.445]],["name/36-6",[]],["text/36-6",[]],["component/36-6",[]],["keyword/36-6",[]],["title/36-7",[138,10.334,731,19.58,732,18.758,928,26.206,2343,22.761,2946,33.174]],["name/36-7",[]],["text/36-7",[]],["component/36-7",[]],["keyword/36-7",[]],["title/36",[29,14.138,161,12.822,410,22.989,731,16.561,732,15.865,928,22.165,2343,19.251,5134,30.337]],["name/36",[410,0.28,4410,0.362,4411,0.362]],["text/36",[0,1.634,1,1.609,3,1.487,5,2.141,6,2.134,8,0.983,9,1.093,19,1.38,23,1.284,26,3.26,29,1.795,31,1.122,138,2.346,139,0.925,142,1.04,144,2.79,149,1.229,152,2.182,154,2.29,159,0.988,161,2.171,182,1.35,188,1.899,190,5.194,193,1.978,196,4.053,207,2.355,213,1.13,217,2.073,221,3.733,223,3.573,226,3.845,228,2.182,233,1.209,243,1.163,244,1.429,245,2.366,246,1.783,250,2.444,258,1.059,261,2.766,263,1.924,272,2.638,279,3.491,283,1.38,285,3.97,286,5.2,303,5.07,306,2.618,315,3.287,326,2.143,329,2.393,335,1.38,346,1.005,347,1.079,353,1.229,357,1.723,360,3.37,362,3.711,365,1.467,366,7.008,369,1.122,370,4.627,371,4.399,376,2.073,388,1.079,392,1.965,393,2.551,394,2.34,402,3.199,407,1.467,410,4.248,416,3.677,417,1.138,421,2.125,432,4.419,435,2.073,440,1.336,478,1.322,482,1.467,485,1.556,487,1.272,490,1.336,493,2.977,494,1.412,498,1.086,502,1.296,511,1.797,522,2.762,523,1.487,526,1.146,540,2.444,545,2.073,547,1.239,567,1.229,571,1.364,574,3.854,576,3.982,587,2.947,588,3.366,593,2.977,594,1.509,596,2.162,602,1.107,613,4.681,707,1.85,728,3.769,729,3.943,730,5.028,731,5.006,732,4.783,733,1.322,738,2.143,832,1.448,891,1.429,918,2.658,928,5.949,929,3.915,967,4.669,1026,2.527,1093,1.199,1094,1.487,1113,1.199,1125,1.532,1140,1.336,1141,1.448,1142,1.38,1153,1.509,1222,1.448,1229,1.98,1239,1.674,1446,1.797,1476,2.355,1477,2.809,1487,2.638,1499,2.34,1500,4.354,1507,2.919,1519,4.027,1531,1.199,1543,2.315,1544,1.25,1546,1.25,1552,4.088,1573,1.412,1575,1.25,1582,1.641,1586,1.261,1588,2.29,1590,1.218,1595,3.8,1614,1.296,1615,2.073,1620,2.024,1630,1.509,1673,1.35,1674,1.467,1690,2.073,1691,1.336,1715,2.267,1724,3.039,1726,1.395,1735,1.35,1737,1.984,1745,1.35,1758,5.286,1770,2.245,1785,2.516,1807,1.284,1808,1.711,1812,1.509,1821,1.674,1822,2.315,1843,1.309,1854,2.143,1867,1.467,1871,1.556,1883,1.395,1885,3.007,1902,1.395,1904,4.332,1906,1.412,1939,4.208,1944,1.35,1947,4.794,1951,2.451,1952,1.364,1957,3.428,1990,1.395,1996,3.279,2000,1.336,2020,3.179,2025,1.448,2026,1.849,2045,1.284,2052,1.487,2070,1.711,2089,1.487,2104,1.641,2112,2.669,2118,1.448,2122,3.172,2146,1.61,2150,4.046,2154,3.857,2156,3.852,2189,2.627,2206,1.556,2215,1.556,2240,1.336,2248,2.199,2308,1.61,2309,1.556,2333,1.674,2342,2.551,2343,5.596,2348,1.582,2350,1.532,2390,4.088,2405,1.467,2409,2.814,2418,1.487,2428,2.934,2444,3.26,2488,2.422,2490,1.532,2499,1.711,2534,1.556,2570,2.669,2588,2.891,2618,6.06,2649,1.984,2656,1.309,2726,1.487,2754,4.467,2799,1.509,2816,1.395,2819,1.641,2889,2.814,2907,1.911,2909,1.556,2937,1.674,2946,1.582,3033,1.674,3417,6.137,3462,1.911,3474,6.574,3479,1.674,3623,2.393,3673,1.849,3703,3.277,3880,2.076,4252,2.076,4596,1.797,4627,1.582,4738,1.797,4740,7.444,4760,1.711,4813,1.911,4814,1.911,4816,3.562,4820,3.277,4846,4.302,4889,1.911,5039,4.302,5134,1.711,5167,1.911,5201,3.172,5204,3.277,5214,1.984,5215,1.674,5224,3.771,5268,2.199,5269,2.199,5270,2.386,5271,2.386,5272,5.371,5273,2.386,5274,2.386,5275,2.386,5276,2.386,5277,2.386,5278,2.386,5279,2.076,5280,7.949,5281,2.199,5282,3.277,5283,2.934,5284,1.984,5285,2.076,5286,2.076,5287,2.076,5288,2.076,5289,2.076,5290,2.076,5291,2.076,5292,2.386,5293,2.386,5294,2.386,5295,2.386,5296,2.199,5297,2.386,5298,3.402,5299,3.402,5300,3.402,5301,1.984,5302,2.076,5303,2.076,5304,1.751,5305,2.386,5306,2.076]],["component/36",[5,0.286]],["keyword/36",[]],["title/37-1",[142,30.008,315,18.593,613,38.544]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["keyword/37-1",[]],["title/37-2",[158,29.09,189,23.05,315,14.863,731,21.544,732,20.639]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["keyword/37-2",[]],["title/37-3",[527,32.839,4740,45.661,5215,48.313]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["keyword/37-3",[]],["title/37-4",[733,43.626,4738,59.305]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["keyword/37-4",[]],["title/37-5",[138,11.371,1476,24.131,1477,24.277,1595,23.709,2343,25.044]],["name/37-5",[]],["text/37-5",[]],["component/37-5",[]],["keyword/37-5",[]],["title/37-6",[138,10.334,731,19.58,732,18.758,738,26.206,1595,21.548,2343,22.761]],["name/37-6",[]],["text/37-6",[]],["component/37-6",[]],["keyword/37-6",[]],["title/37-7",[138,9.471,432,24.229,731,17.944,732,17.19,1552,29.432,1595,19.748,2343,20.86]],["name/37-7",[]],["text/37-7",[]],["component/37-7",[]],["keyword/37-7",[]],["title/37-8",[138,10.334,731,19.58,732,18.758,1595,21.548,2343,22.761,2656,27.445]],["name/37-8",[]],["text/37-8",[]],["component/37-8",[]],["keyword/37-8",[]],["title/37-9",[138,10.334,731,19.58,732,18.758,1595,21.548,2343,22.761,2946,33.174]],["name/37-9",[]],["text/37-9",[]],["component/37-9",[]],["keyword/37-9",[]],["title/37",[29,14.138,161,12.822,613,23.685,731,16.561,732,15.865,1595,18.225,2343,19.251,5134,30.337]],["name/37",[613,0.289,4410,0.362,4411,0.362]],["text/37",[0,2.711,1,2.671,2,0.669,3,0.737,5,2.13,6,0.868,8,0.487,9,0.541,10,1.027,23,2.041,26,1.325,29,1.267,44,1.955,138,2.488,139,3.28,141,1.566,142,2.414,144,2.309,147,0.614,152,0.63,154,0.662,157,1.165,158,2.927,159,0.49,161,2.564,183,1.134,188,1.413,189,2.986,190,2.416,193,1.121,196,2.145,204,1.249,207,2.428,208,0.829,213,2.623,217,0.599,221,2.473,223,4.107,226,2.959,231,1.597,232,0.7,233,0.599,237,0.727,239,0.708,243,1.065,245,0.684,246,4.475,247,1.736,248,1.073,250,2.286,255,0.655,256,0.676,257,0.676,258,4.685,261,2.852,263,3.759,264,0.636,265,2.331,268,0.748,272,1.495,273,0.669,279,3.871,282,0.691,283,1.263,284,1.973,286,4.749,291,2.467,299,0.662,303,4.535,306,1.065,315,3.213,323,1.654,325,0.759,327,3.601,329,1.278,330,1.125,333,1.402,346,1.872,351,2.004,353,0.609,354,0.564,357,1.597,360,2.091,362,3.848,364,2.101,365,0.727,369,1.027,371,3.985,378,0.669,388,1.714,389,0.619,390,0.614,391,1.278,393,1.362,394,1.249,395,0.684,398,0.625,402,2.473,405,0.759,406,0.727,410,0.642,411,2.784,416,3.501,417,3.401,420,1.639,421,1.134,432,3.39,435,1.542,438,0.662,440,1.704,442,0.748,445,0.625,457,0.813,458,1.872,459,1.116,465,1.098,478,2.464,483,0.63,484,1.362,487,0.63,488,1.198,490,1.223,493,1.687,494,1.293,498,2.729,500,0.868,502,2.06,508,2.301,509,0.759,510,1.595,513,0.63,521,1.425,522,2.055,526,1.463,527,0.564,531,1.154,540,3.089,545,2.252,547,1.134,548,1.926,551,0.614,552,1.986,553,0.604,554,2.587,567,2.587,569,0.89,571,0.676,574,4.249,576,3.689,581,0.655,588,3.934,593,1.687,596,2.35,597,1.609,602,1.014,613,4.327,707,2.01,712,1.542,722,1.154,725,1.624,728,4.209,729,4.065,730,4.764,731,4.892,732,4.67,733,2.464,734,1.236,738,2.632,744,1.293,747,0.717,748,1.325,756,0.669,768,0.669,783,0.737,799,1.223,803,0.798,807,0.662,808,2.772,811,0.7,823,2.244,825,0.798,832,3.892,836,0.727,837,0.813,848,0.916,849,1.293,851,1.595,856,1.362,860,0.625,908,0.669,918,1.507,928,0.619,929,6.903,967,1.542,1001,0.7,1012,0.684,1015,0.708,1024,1.154,1025,0.759,1026,3.501,1066,0.89,1068,0.784,1093,0.594,1094,2.364,1113,0.594,1141,0.717,1142,0.684,1153,0.748,1229,1.057,1238,1.293,1264,1.645,1266,0.771,1476,1.662,1477,1.672,1482,1.53,1484,2.9,1487,1.073,1492,0.669,1499,1.249,1500,4.231,1507,1.187,1515,0.717,1517,1.898,1519,0.748,1521,1.21,1522,0.662,1531,2.525,1532,2.35,1540,0.748,1542,0.636,1544,1.595,1545,0.784,1546,0.619,1548,1.362,1552,3.556,1558,1.249,1560,2.398,1569,0.829,1572,1.518,1573,0.7,1575,1.144,1577,0.829,1578,3.01,1583,0.771,1586,2.35,1588,2.123,1590,1.116,1593,1.442,1594,0.7,1595,3.735,1609,0.63,1614,1.187,1615,2.545,1616,1.425,1620,2.2,1622,0.642,1630,0.748,1644,1.381,1657,1.848,1661,0.669,1675,0.684,1690,2.252,1697,0.717,1706,3.089,1715,2.101,1724,1.236,1725,0.727,1727,1.089,1735,1.236,1739,2.631,1741,0.676,1743,0.771,1747,0.813,1757,2.08,1758,4.459,1770,1.198,1785,1.343,1807,0.636,1808,3.188,1809,0.798,1822,1.236,1830,0.813,1843,0.649,1852,0.636,1854,1.595,1862,2.812,1867,0.727,1868,0.63,1874,1.293,1883,0.691,1885,2.123,1902,0.691,1904,4.353,1906,0.7,1937,0.676,1939,4.772,1944,0.669,1947,2.73,1951,1.309,1952,4.958,1957,5.9,1958,1.249,1977,0.691,1996,1.125,2013,0.759,2020,1.802,2025,0.717,2028,0.7,2034,0.691,2045,3.452,2052,0.737,2053,0.868,2062,0.89,2067,0.708,2068,1.502,2087,0.662,2089,4.445,2108,0.868,2112,1.425,2120,0.676,2123,0.784,2124,0.748,2129,1.449,2130,2.364,2142,0.916,2149,2.235,2154,5.276,2155,2.294,2187,0.784,2216,0.708,2240,1.704,2330,0.798,2342,0.737,2343,4.034,2350,0.759,2354,0.798,2358,1.425,2360,0.848,2372,1.381,2389,1.089,2390,0.759,2392,0.947,2393,0.983,2400,0.813,2412,0.848,2414,0.798,2421,0.947,2423,0.727,2448,0.784,2452,0.662,2488,0.7,2489,0.813,2498,0.916,2499,0.848,2536,0.784,2537,1.749,2538,0.916,2542,0.868,2551,0.759,2570,1.986,2572,5.113,2573,3.349,2574,0.89,2583,1.343,2588,1.176,2614,0.771,2618,2.36,2656,1.671,2741,1.089,2761,0.759,2762,0.813,2764,1.278,2771,2.294,2799,0.748,2811,1.449,2816,0.691,2819,3.455,2821,0.983,2861,1.986,2876,0.829,2889,0.813,2895,0.759,2905,1.749,2908,0.916,2909,0.771,2915,0.89,2938,0.848,3033,3.12,3078,0.89,3099,1.749,3109,0.771,3208,4.178,3219,5.747,3461,0.868,3474,0.813,3528,0.848,3585,0.737,3623,0.691,3662,1.749,3663,0.947,3664,0.947,3665,0.868,3679,3.153,3686,0.89,3766,0.813,3779,0.868,3809,0.916,3852,2.013,4025,0.947,4081,0.947,4115,0.916,4116,0.916,4126,0.868,4248,1.749,4249,1.029,4298,0.868,4430,1.645,4465,0.759,4477,3.446,4538,2.019,4548,2.019,4559,2.783,4624,0.916,4627,2.948,4667,1.029,4738,2.856,4740,6.584,4760,0.848,4767,1.089,4790,0.983,4813,3.036,4814,0.947,4815,0.868,4816,3.673,4818,0.829,4820,4.435,4821,1.816,4822,2.649,4823,0.983,4824,1.029,4825,1.029,4826,0.983,4827,1.089,4828,2.438,4830,1.901,4831,2.013,4834,0.916,4903,1.901,4925,1.089,4926,1.089,4935,2.532,4936,1.816,4946,1.089,4947,1.089,4948,1.089,4949,1.089,4950,1.089,4951,1.089,5022,1.603,5090,1.029,5134,1.566,5164,1.089,5167,1.749,5170,1.029,5171,1.029,5172,1.089,5181,1.089,5182,1.089,5183,1.645,5184,1.693,5185,2.649,5207,2.013,5208,2.013,5209,1.089,5210,1.089,5211,1.089,5212,1.089,5213,1.816,5215,1.533,5221,1.749,5241,1.425,5268,2.013,5269,2.013,5280,0.983,5282,3.56,5283,1.566,5296,1.089,5304,3.688,5307,1.182,5308,1.182,5309,1.029,5310,1.182,5311,1.182,5312,1.182,5313,1.182,5314,1.182,5315,1.182,5316,1.182,5317,1.182,5318,1.182,5319,1.182,5320,1.182,5321,1.182,5322,1.182,5323,1.182,5324,1.182,5325,1.182,5326,1.182,5327,1.182,5328,1.182,5329,1.182,5330,1.182,5331,1.182,5332,1.182,5333,1.182,5334,1.182,5335,1.029,5336,0.947,5337,1.089,5338,1.182,5339,0.983,5340,0.983,5341,1.089,5342,1.029,5343,1.182,5344,1.029,5345,2.013,5346,1.029,5347,1.089,5348,1.089,5349,1.182,5350,1.029,5351,1.029,5352,1.029,5353,1.029,5354,1.029,5355,1.816,5356,1.816,5357,1.182,5358,1.182,5359,1.182,5360,1.029,5361,5.907,5362,1.901,5363,1.901,5364,1.901,5365,1.901,5366,2.806,5367,2.184,5368,1.029,5369,1.182,5370,1.089,5371,1.182,5372,1.182,5373,1.089,5374,0.983,5375,1.901,5376,1.901,5377,1.901,5378,1.029,5379,1.901,5380,1.901,5381,1.029,5382,1.029,5383,1.182,5384,1.182,5385,1.182,5386,0.983,5387,1.816,5388,1.901,5389,1.901,5390,3.045,5391,2.184,5392,2.184,5393,1.182,5394,1.182,5395,1.089,5396,6.413,5397,7.442,5398,1.182,5399,1.182,5400,1.182,5401,2.184,5402,1.182,5403,1.182,5404,1.089,5405,1.029,5406,1.089,5407,1.089,5408,1.901,5409,1.816,5410,1.816,5411,3.791,5412,1.182,5413,1.182,5414,2.184]],["component/37",[5,0.286]],["keyword/37",[]],["title/38-1",[0,21.979,1,21.65,243,26.827,277,32.977,2877,40.404]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["keyword/38-1",[]],["title/38-2",[0,19.976,1,19.677,207,21.931,350,26.206,388,22.616,389,26.206]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["keyword/38-2",[]],["title/38-3",[0,24.429,1,24.064,5,18.278,4475,43.865]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["keyword/38-3",[]],["title/38-4",[193,33.845]],["name/38-4",[]],["text/38-4",[]],["component/38-4",[]],["keyword/38-4",[]],["title/38-5",[138,12.639,346,25.762,574,28.2,1820,37.616]],["name/38-5",[]],["text/38-5",[]],["component/38-5",[]],["keyword/38-5",[]],["title/38-6",[240,33.313,246,30.008,548,29.832]],["name/38-6",[]],["text/38-6",[]],["component/38-6",[]],["keyword/38-6",[]],["title/38-7",[261,35.458,303,28.677,1734,46.473]],["name/38-7",[]],["text/38-7",[]],["component/38-7",[]],["keyword/38-7",[]],["title/38",[2204,55.777]],["name/38",[3460,1.305]],["text/38",[0,4.538,1,4.428,2,2.718,3,0.9,5,3.435,6,2.045,7,1.22,8,1.292,9,2.201,10,3.564,13,0.756,14,2.715,19,1.814,23,1.688,24,0.513,26,0.876,29,0.689,31,0.679,44,0.488,46,2.537,63,1.319,138,2.592,139,3.13,142,1.144,144,2.674,147,2.097,149,0.744,151,0.731,154,0.426,157,3.222,159,1.838,161,3.187,169,1.553,180,0.709,186,1.251,188,1.673,189,2.012,190,1.12,193,3.913,196,0.43,204,2.537,206,2.415,207,4.205,208,0.533,210,0.913,213,2.985,214,0.763,216,0.504,217,1.589,218,1.572,221,4.064,223,0.72,226,4.057,228,1.1,231,0.608,233,1.045,237,0.467,240,2.325,243,4.209,244,0.455,245,0.44,246,3.049,247,2.032,248,0.709,249,0.835,250,2.623,256,0.435,258,2.133,259,0.826,260,0.993,261,2.285,263,0.358,264,0.409,267,0.9,272,2.967,273,0.43,277,3.275,278,3.235,279,4.064,280,0.913,283,1.814,284,3.44,285,0.474,286,4.7,290,1.469,291,0.373,294,0.413,296,2.718,297,1.251,299,1.469,301,0.533,303,2.001,305,0.589,306,2.664,310,0.632,311,2.766,312,0.474,315,1.298,316,0.402,323,0.413,325,0.488,326,0.398,327,1.518,329,0.445,330,0.744,334,0.855,336,0.474,338,0.8,342,1.659,344,2.174,346,4.177,347,1.186,350,5.447,351,1.906,353,1.615,354,0.689,355,0.504,357,4.038,358,1.517,360,2.711,362,4.216,363,0.835,364,1.454,365,1.268,367,0.533,369,2.421,371,4.591,376,0.731,377,1.955,378,3.093,382,0.435,386,1.286,387,1.599,388,4.919,389,5.415,390,4.026,392,4.02,393,0.474,394,2.309,398,0.402,399,2.249,400,5.281,401,2.182,402,4.064,405,0.927,406,0.888,407,0.888,409,0.558,410,0.413,411,1.218,412,2.194,416,1.234,419,1.553,421,2.097,422,2.362,424,0.523,428,0.445,429,1.06,433,0.43,434,1.088,438,0.808,439,0.975,440,1.756,441,0.888,445,2.134,454,0.533,457,0.523,458,0.888,459,3.777,463,0.417,465,1.036,467,1.959,470,2.281,471,2.363,478,0.421,479,1.805,480,0.558,482,1.613,483,3.074,484,0.474,487,0.405,488,0.792,490,1.469,493,4.713,497,3.317,498,3.603,499,1.119,502,1.426,504,0.701,505,0.461,508,0.876,510,2.324,513,1.673,516,0.217,521,0.942,523,0.9,526,3.028,527,2.455,531,3.046,534,0.792,536,0.545,537,0.467,538,0.44,539,1.794,540,2.749,542,0.865,545,2.046,547,0.395,548,4.116,551,1.071,552,0.496,554,1.465,556,1.013,557,1.738,558,0.558,567,0.744,570,0.545,574,4.379,576,2.377,577,2.217,578,2.352,579,0.573,580,0.504,581,1.143,583,0.573,587,0.792,588,1.906,589,2.996,593,0.421,596,2.721,597,0.763,599,2.517,602,2.23,613,0.426,707,0.932,712,1.045,721,0.661,722,0.402,723,0.701,725,0.77,728,1.013,729,0.558,730,1.013,731,1.881,732,1.93,733,0.421,734,0.43,735,0.421,738,1.643,744,0.45,748,0.876,756,0.43,761,0.701,768,1.167,772,0.558,773,1.06,776,1.599,783,0.474,787,0.701,788,1.206,790,0.975,799,0.808,802,1.071,807,0.426,808,0.9,832,0.461,836,1.268,849,0.45,850,0.45,851,0.756,856,1.286,860,3.461,866,0.701,867,0.609,868,2.188,870,1.088,871,2.08,890,1.517,891,1.236,899,0.558,901,0.609,918,2.195,928,1.08,932,0.865,964,1.304,967,2.769,982,0.701,995,1.418,1012,0.44,1015,2.161,1019,0.701,1024,1.387,1025,0.488,1026,1.475,1066,0.573,1068,0.504,1075,0.504,1093,1.319,1112,0.558,1113,2.029,1125,1.324,1133,0.558,1139,0.573,1140,0.808,1142,2.977,1148,1.959,1153,0.913,1196,0.589,1218,0.481,1222,0.876,1228,0.513,1229,1.954,1238,0.45,1250,0.533,1264,0.573,1282,0.632,1294,0.975,1301,0.632,1325,0.661,1330,3.187,1332,2.726,1337,1.572,1360,0.533,1437,0.632,1458,2.626,1476,1.581,1477,2.411,1479,0.44,1482,1.576,1485,1.156,1487,0.373,1491,3.528,1492,1.774,1493,1.09,1494,0.661,1495,0.545,1499,0.435,1500,3.327,1502,4.046,1503,3.759,1504,0.958,1505,0.523,1507,0.785,1514,0.589,1515,0.461,1520,1.715,1522,0.426,1526,0.461,1531,1.576,1532,1.658,1533,1.06,1536,0.474,1538,2.715,1540,0.913,1542,0.409,1543,1.167,1544,1.375,1545,0.958,1546,1.08,1547,0.855,1548,0.474,1549,0.558,1553,0.573,1559,0.467,1560,0.481,1562,0.8,1565,0.876,1571,1.088,1572,3.143,1573,3.73,1575,1.643,1585,0.855,1586,3.582,1588,2.019,1590,1.34,1591,1.469,1593,1.243,1594,0.45,1595,2.07,1606,0.844,1608,0.426,1609,0.77,1610,0.865,1614,0.785,1615,0.731,1616,0.942,1620,1.998,1622,1.959,1630,1.304,1631,0.942,1635,0.45,1640,0.545,1654,3.305,1656,2.454,1657,0.461,1658,0.844,1661,2.04,1664,1.929,1666,0.701,1671,0.632,1673,0.817,1674,0.888,1675,0.44,1676,0.409,1677,0.523,1679,0.435,1690,1.045,1694,0.435,1697,0.876,1706,0.467,1707,0.461,1724,1.484,1726,0.844,1734,1.771,1735,0.817,1736,1.857,1739,0.855,1743,0.496,1744,1.44,1745,1.774,1751,1.251,1754,0.855,1757,1.131,1765,0.513,1768,1.251,1770,1.131,1807,0.777,1815,0.844,1820,3.876,1821,0.533,1822,0.43,1835,0.488,1837,0.45,1838,1.684,1841,0.876,1843,1.978,1844,1.805,1845,1.805,1849,0.545,1852,1.688,1854,0.756,1855,0.467,1863,0.573,1867,0.888,1868,0.405,1870,0.533,1872,0.632,1874,0.45,1878,1.592,1883,1.206,1885,0.808,1902,0.445,1904,0.373,1906,1.22,1917,0.504,1937,2.309,1938,2.977,1939,0.409,1942,0.913,1951,0.455,1958,0.435,1995,0.504,1996,0.744,1997,0.545,1999,1.06,2000,0.426,2001,0.975,2002,0.855,2003,0.913,2011,1.651,2013,0.488,2027,0.942,2028,1.553,2032,0.496,2034,0.445,2038,1.484,2043,0.958,2045,0.409,2050,1.368,2052,0.474,2053,1.514,2057,0.545,2060,1.236,2062,0.573,2066,0.496,2067,0.455,2071,0.545,2074,0.545,2078,0.558,2079,0.523,2083,0.523,2087,0.426,2100,0.632,2104,0.993,2108,1.06,2109,0.573,2120,1.5,2121,0.661,2122,0.589,2123,0.958,2125,0.632,2126,1.119,2127,1.879,2128,2.188,2129,0.504,2130,0.474,2134,1.805,2136,1.553,2137,0.993,2146,0.513,2147,2.431,2148,3.011,2161,0.523,2163,0.927,2169,0.661,2183,1.984,2186,0.927,2187,0.504,2188,1.738,2190,0.533,2191,0.958,2204,0.461,2216,1.236,2239,0.661,2240,1.756,2290,0.609,2292,1.929,2312,0.589,2321,1.345,2326,0.558,2329,0.533,2331,1.156,2333,1.013,2337,0.632,2343,2.187,2346,0.609,2354,0.513,2358,0.496,2360,0.545,2364,1.201,2365,0.632,2372,0.913,2380,2.895,2390,0.488,2392,1.651,2396,0.975,2400,0.523,2402,0.632,2411,0.589,2416,0.632,2418,2.996,2423,0.467,2424,1.479,2430,1.929,2443,0.609,2444,1.251,2452,0.808,2456,0.496,2458,1.447,2459,2.046,2465,0.589,2467,0.589,2469,0.44,2488,0.855,2489,0.523,2497,0.975,2498,2.034,2526,0.533,2528,0.632,2532,1.447,2534,0.496,2535,1.599,2542,1.06,2543,0.661,2544,0.609,2545,1.156,2546,0.589,2547,1.206,2554,0.573,2564,1.088,2565,1.119,2570,2.046,2583,0.467,2588,0.777,2593,0.513,2600,1.976,2604,0.888,2605,0.496,2624,0.558,2625,0.545,2630,0.533,2647,0.558,2689,2.726,2696,1.447,2697,0.632,2699,0.661,2700,0.573,2704,0.533,2719,0.513,2724,0.632,2726,0.9,2729,1.514,2735,0.513,2744,0.855,2757,3.86,2760,0.573,2762,0.993,2763,0.632,2764,1.206,2798,0.609,2809,0.942,2811,0.504,2816,2.109,2818,1.715,2820,1.345,2844,0.632,2866,0.701,2870,0.488,2871,0.461,2875,2.134,2879,1.035,2883,0.632,2895,0.927,2898,1.201,2900,0.589,2909,0.496,2914,0.701,2916,0.488,2919,0.632,2937,1.013,2938,1.035,2939,0.993,2940,1.659,2955,1.119,2957,0.661,2965,0.632,2968,0.558,2969,0.609,2970,0.632,2974,0.609,2976,0.661,3032,0.513,3033,0.533,3048,0.558,3078,2.716,3082,0.558,3083,0.589,3096,0.661,3105,0.533,3409,0.661,3417,0.927,3422,0.701,3453,1.331,3461,1.06,3462,0.609,3463,0.632,3464,0.589,3472,2.034,3478,0.701,3483,0.609,3485,0.661,3490,0.701,3514,0.661,3520,1.06,3525,2.201,3526,0.589,3527,0.573,3599,1.06,3657,1.901,3668,0.661,3766,0.523,3843,0.632,3880,0.661,3907,0.573,3916,0.701,3919,1.201,3933,0.701,3938,0.701,3950,0.661,3952,0.558,3957,0.661,3960,1.392,4046,1.553,4052,0.573,4088,1.156,4107,0.701,4128,0.589,4134,0.589,4156,0.545,4163,0.558,4223,0.632,4272,1.256,4298,0.558,4348,1.599,4373,0.545,4417,0.573,4427,0.701,4430,1.088,4432,0.701,4439,0.609,4453,1.201,4467,1.119,4539,0.589,4754,0.573,4780,0.632,4839,0.701,4846,0.609,4866,0.701,4867,0.632,4875,0.632,4879,0.632,4889,0.609,4898,0.632,4908,0.661,4986,0.632,5009,0.632,5030,1.976,5038,0.632,5124,0.545,5133,0.545,5154,0.701,5194,0.661,5222,1.035,5241,0.496,5251,1.715,5280,0.632,5306,0.661,5415,0.701,5416,2.062,5417,0.661,5418,0.76,5419,0.76,5420,1.444,5421,0.701,5422,0.76,5423,1.256,5424,1.156,5425,0.76,5426,0.701,5427,0.76,5428,0.76,5429,0.76,5430,0.76,5431,0.76,5432,0.76,5433,0.76,5434,0.76,5435,1.331,5436,0.661,5437,1.256,5438,0.76,5439,0.76,5440,0.701,5441,5.697,5442,1.444,5443,0.76,5444,0.76,5445,0.76,5446,0.76,5447,0.76,5448,0.76,5449,1.331,5450,0.701,5451,0.76,5452,0.609,5453,0.661,5454,0.76,5455,0.76,5456,0.632,5457,0.661,5458,0.76,5459,0.701,5460,0.76,5461,1.256,5462,0.609,5463,0.701,5464,0.76,5465,0.76,5466,0.76,5467,0.76,5468,0.701,5469,0.701,5470,0.609,5471,1.444,5472,0.76,5473,0.701,5474,0.76,5475,0.661,5476,0.76,5477,0.76,5478,0.76,5479,0.76,5480,0.632,5481,0.632,5482,0.701,5483,0.76,5484,4.436,5485,0.76,5486,0.76,5487,0.76,5488,0.76,5489,0.661,5490,0.76,5491,0.701,5492,0.701,5493,0.76,5494,0.76,5495,0.76,5496,0.632,5497,0.76,5498,0.701,5499,0.701,5500,0.76,5501,0.632,5502,0.701,5503,0.76,5504,0.76,5505,0.701,5506,0.76,5507,0.76,5508,0.76,5509,1.901]],["component/38",[5,0.286]],["keyword/38",[]],["title/39-1",[576,30.969,1113,39.566]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["keyword/39-1",[]],["title/39-2",[576,30.969,2354,53.141]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["keyword/39-2",[]],["title/39-3",[29,20.443,161,18.539,185,26.663,2355,47.424]],["name/39-3",[]],["text/39-3",[]],["component/39-3",[]],["keyword/39-3",[]],["title/39",[29,15.32,161,13.893,326,24.016,713,27.467,1113,23.039,1500,18.889,2354,30.943]],["name/39",[326,0.27,4410,0.362,4411,0.362]],["text/39",[0,1.339,1,1.319,5,2.048,6,2.159,8,1.381,9,1.535,29,1.12,46,1.556,63,1.685,138,2.173,139,2.657,144,1.741,157,2.899,161,2.961,189,1.404,206,3.445,214,1.772,217,2.753,221,1.497,226,4.259,243,3.341,246,3.777,247,2.489,248,2.669,250,3.943,256,6.015,263,2.556,264,5.26,272,1.646,279,3.52,282,4.009,286,5.173,291,1.646,302,2.263,303,3.864,315,2.34,316,1.772,323,1.821,326,4.54,336,2.09,346,1.412,354,1.599,362,3.042,364,1.858,369,4.596,370,4.057,371,5.62,388,2.457,389,1.756,398,1.772,411,4.021,416,1.577,417,2.592,421,1.741,435,2.753,459,1.712,487,1.788,497,2.034,498,3.119,508,4.16,515,2.525,526,2.611,540,1.525,545,4.95,548,3.416,552,2.186,553,3.501,554,5.354,567,2.799,574,1.545,576,4.434,581,3.798,596,1.772,597,3.623,626,3.99,707,1.516,713,2.008,731,1.312,732,1.257,733,1.858,803,3.668,817,2.684,849,3.217,851,1.756,856,3.388,908,3.075,929,2.061,964,2.12,965,1.896,967,3.473,1012,3.143,1026,1.577,1093,3.445,1113,5.556,1140,3.837,1148,2.953,1282,4.52,1332,2.263,1482,3.445,1498,2.152,1499,1.917,1500,4.334,1507,4.709,1510,2.525,1531,2.731,1532,1.772,1546,2.847,1550,2.599,1562,1.858,1585,1.984,1590,1.712,1593,2.574,1595,2.953,1614,1.821,1620,2.689,1622,1.821,1635,1.984,1639,2.09,1654,2.305,1657,2.034,1661,3.075,1694,3.92,1702,1.938,1715,3.012,1724,1.896,1735,3.075,1745,1.896,1808,2.404,1812,2.12,1837,4.057,1867,2.061,1904,4.255,1906,1.984,1939,6.588,1951,2.008,1952,6.18,1957,5.661,1968,5.423,1989,2.352,1996,4.463,2032,2.186,2034,1.961,2038,3.075,2045,5.817,2078,2.461,2120,1.917,2127,4.107,2154,1.804,2216,2.008,2354,8.479,2355,5.314,2358,2.186,2390,4.401,2411,4.213,2422,2.684,2456,2.186,2526,2.352,2566,2.305,2588,1.804,2614,2.186,2764,1.961,2771,2.525,2799,7.128,2816,3.179,2861,2.186,2895,7.794,2917,2.404,2919,2.788,3219,2.09,3528,2.404,3602,2.599,3685,2.684,3893,2.223,4023,2.525,4467,2.599,4559,5.032,4627,3.604,4744,5.939,4846,2.684,5044,6.528,5193,5.009,5374,2.788,5405,4.729,5450,3.09,5510,3.352,5511,4.352,5512,4.52,5513,5.7,5514,3.352,5515,3.352,5516,3.352,5517,3.352,5518,5.435,5519,5.435,5520,3.352,5521,4.52,5522,2.917,5523,2.917,5524,4.729,5525,2.917,5526,7.884,5527,7.884,5528,6.854,5529,5.435,5530,6.854,5531,3.352,5532,2.917,5533,2.917,5534,4.729,5535,4.729,5536,5.435,5537,5.435,5538,3.352,5539,3.352,5540,3.352,5541,3.352,5542,3.352,5543,2.917]],["component/39",[5,0.286]],["keyword/39",[]],["title/40-1",[334,54.402]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["keyword/40-1",[]],["title/40-2",[1057,49.791,5544,68.502]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["keyword/40-2",[]],["title/40-3",[294,37.412,334,40.75,1621,50.543]],["name/40-3",[]],["text/40-3",[]],["component/40-3",[]],["keyword/40-3",[]],["title/40-4",[46,34.427,193,18.419,446,33.174,802,25.98,1885,28.003]],["name/40-4",[]],["text/40-4",[]],["component/40-4",[]],["keyword/40-4",[]],["title/40-5",[303,28.677,1476,30.187,4434,46.473]],["name/40-5",[]],["text/40-5",[]],["component/40-5",[]],["keyword/40-5",[]],["title/40-6",[233,39.884,4434,53.141]],["name/40-6",[]],["text/40-6",[]],["component/40-6",[]],["keyword/40-6",[]],["title/40-7",[2940,49.791,4434,53.141]],["name/40-7",[]],["text/40-7",[]],["component/40-7",[]],["keyword/40-7",[]],["title/40-8",[46,23.212,294,27.181,357,21.065,707,22.616,722,26.438,2870,32.115]],["name/40-8",[]],["text/40-8",[]],["component/40-8",[]],["keyword/40-8",[]],["title/40-9",[294,37.412,338,38.153,725,36.719]],["name/40-9",[]],["text/40-9",[]],["component/40-9",[]],["keyword/40-9",[]],["title/40-10",[249,31.825,283,31.825,294,29.907,734,31.136,768,31.136]],["name/40-10",[]],["text/40-10",[]],["component/40-10",[]],["keyword/40-10",[]],["title/40-11",[294,29.907,783,34.312,807,30.812,1229,26.631,5545,40.404]],["name/40-11",[]],["text/40-11",[]],["component/40-11",[]],["keyword/40-11",[]],["title/40-12",[241,33.843,294,29.907,811,32.575,1229,26.631,2889,37.854]],["name/40-12",[]],["text/40-12",[]],["component/40-12",[]],["keyword/40-12",[]],["title/40-13",[193,25.352,296,38.949,1838,44.203]],["name/40-13",[]],["text/40-13",[]],["component/40-13",[]],["keyword/40-13",[]],["title/40-14",[2324,55.245,2325,61.032]],["name/40-14",[]],["text/40-14",[]],["component/40-14",[]],["keyword/40-14",[]],["title/40-15",[46,36.534,311,49.081]],["name/40-15",[]],["text/40-15",[]],["component/40-15",[]],["keyword/40-15",[]],["title/40-16",[247,28.016,1493,32.333,4126,44.908,5546,47.424]],["name/40-16",[]],["text/40-16",[]],["component/40-16",[]],["keyword/40-16",[]],["title/40-17",[226,34.313,5546,61.032]],["name/40-17",[]],["text/40-17",[]],["component/40-17",[]],["keyword/40-17",[]],["title/40-18",[161,20.866,330,35.458,445,36.39]],["name/40-18",[]],["text/40-18",[]],["component/40-18",[]],["keyword/40-18",[]],["title/40-19",[1585,46.597,3585,49.081]],["name/40-19",[]],["text/40-19",[]],["component/40-19",[]],["keyword/40-19",[]],["title/40-20",[344,37.06,2536,45.661,4169,57.255]],["name/40-20",[]],["text/40-20",[]],["component/40-20",[]],["keyword/40-20",[]],["title/40",[29,18.393,334,32.575,2951,45.769,2952,40.404,5160,44.076]],["name/40",[2774,0.658,5547,0.757]],["text/40",[0,3.218,1,3.226,2,0.211,5,0.903,6,2.226,7,0.221,8,0.154,9,0.171,10,1.421,14,0.759,20,3.849,21,1.108,23,0.745,24,0.718,29,0.125,31,3.259,46,5.485,52,0.453,63,0.534,136,0.256,137,0.239,138,1.763,139,2.378,142,0.463,144,1.443,146,0.232,147,1.173,149,1.02,151,3.044,152,2.289,153,0.547,154,1.413,157,0.388,161,0.512,186,1.201,188,0.784,189,1.875,193,4.53,196,0.211,197,0.299,198,0.262,202,0.31,204,1.443,206,0.187,207,0.607,209,0.252,210,0.46,213,2.514,214,0.893,217,0.189,221,1.127,224,1.271,225,5.775,226,3.377,231,0.583,232,0.221,233,3.798,235,2.256,236,0.299,237,0.229,241,1.388,243,1.999,245,0.8,246,0.736,247,2.051,248,0.679,249,1.306,250,2.848,254,0.51,257,0.416,259,1.443,260,0.731,261,2.397,263,3.825,265,1.217,268,0.672,272,1.239,273,0.411,276,0.31,277,2.457,279,3.782,280,1.428,281,1.524,282,1.904,284,3.576,286,0.921,291,2.452,292,3.544,294,5.267,296,2.32,297,2.825,299,0.209,301,0.262,303,4.247,306,1.101,309,0.274,311,4.05,313,0.324,315,1.159,316,0.384,318,0.819,326,1.455,327,1.092,329,0.622,330,0.87,334,4.586,335,1.606,336,1.053,337,5.036,338,6.13,340,2.787,341,2.035,342,0.672,343,1.757,344,1.358,346,0.157,349,0.51,350,4.847,351,2.723,353,1.792,354,0.178,355,2.308,357,3.512,360,2.567,361,0.267,362,0.749,369,3.79,376,2.529,377,0.232,378,0.955,386,0.453,388,3.61,390,0.877,391,0.425,392,1.212,394,1.291,395,2.692,396,0.267,398,0.197,402,0.618,405,0.239,407,0.447,409,0.534,410,4.532,411,2.96,412,2.53,416,2.635,417,2.531,418,0.243,420,0.745,421,1.443,422,0.425,423,0.51,424,0.256,428,0.425,432,0.197,434,0.281,435,1.407,437,3.616,438,0.595,439,0.718,441,0.654,444,1.453,445,1.468,446,5.66,457,0.256,459,2.192,463,1.909,465,3.02,466,0.411,467,0.578,468,3.27,470,0.46,477,0.232,481,0.324,482,0.851,483,1.482,484,0.232,487,0.388,488,1.524,490,0.209,493,0.403,494,1.644,497,0.84,498,2.118,499,0.289,503,0.731,505,0.645,510,0.195,513,1.056,516,0.107,523,0.663,525,0.299,526,2.062,527,2.381,529,0.5,531,0.197,532,0.274,534,0.399,537,0.447,538,0.615,539,0.213,540,1.583,541,1.158,542,1.512,543,0.299,545,2.358,547,0.377,551,0.552,553,3.591,554,0.34,556,0.51,557,0.589,558,0.274,567,0.713,568,0.51,570,0.267,571,2.56,574,0.49,576,3.889,577,0.229,581,0.207,584,2.675,587,0.205,589,2.902,593,1.251,597,0.893,601,0.51,613,4.742,707,3.676,712,1.872,722,1.953,725,1.482,732,0.399,733,0.207,734,0.601,735,3.84,744,0.629,745,0.281,747,0.645,748,2.368,756,0.955,760,0.992,768,1.428,772,0.274,783,0.863,799,0.595,802,3.599,803,0.491,807,1.108,811,1.494,825,0.252,830,0.239,832,0.226,837,0.256,843,0.226,847,0.482,849,0.819,850,1.336,851,1.706,852,0.299,856,2.304,860,0.197,868,0.226,874,0.256,880,0.289,881,0.243,883,0.262,890,0.8,891,0.223,895,0.252,897,1.584,900,0.274,908,0.211,918,0.36,928,0.381,930,0.232,931,0.934,932,0.637,957,6.399,962,0.51,964,0.46,965,0.411,981,0.976,1002,0.925,1012,0.615,1015,0.223,1024,0.197,1026,0.342,1038,1.992,1048,0.281,1057,4.249,1075,0.247,1093,0.187,1094,0.232,1103,0.762,1125,0.239,1133,0.274,1139,0.281,1141,0.226,1142,0.8,1197,0.425,1218,0.46,1222,3.127,1228,0.491,1229,4.567,1246,1.185,1250,0.262,1264,1.901,1266,0.474,1267,0.324,1330,0.705,1337,0.435,1343,0.31,1345,0.299,1360,3.267,1380,0.563,1415,0.851,1440,0.289,1447,3.957,1449,2.326,1476,4.795,1477,5.176,1479,1.145,1482,2.157,1487,0.522,1491,0.775,1492,2.207,1493,5.012,1497,0.718,1498,0.467,1499,0.213,1501,2.207,1515,0.84,1521,0.207,1522,1.264,1526,0.441,1528,0.368,1531,0.365,1532,2.366,1535,0.441,1538,2.969,1542,0.391,1543,0.211,1544,1.037,1546,1.322,1547,0.999,1548,1.053,1549,0.274,1551,0.84,1557,0.718,1558,0.608,1560,0.46,1562,1.399,1563,0.281,1565,3.221,1566,0.491,1567,0.604,1569,0.262,1572,2.721,1573,0.819,1575,1.455,1578,0.829,1582,0.256,1583,0.902,1585,1.172,1586,2.168,1588,1.692,1589,0.252,1590,1.011,1591,2.296,1594,0.999,1595,0.313,1606,0.988,1608,1.413,1609,0.388,1610,0.435,1614,1.371,1615,3.404,1620,2.47,1621,0.274,1622,0.203,1630,0.46,1634,0.243,1635,0.221,1639,0.232,1642,1.313,1644,0.236,1656,2.932,1657,1.025,1658,1.476,1661,0.955,1664,0.447,1665,0.324,1672,2.078,1673,0.411,1674,0.447,1675,0.615,1676,0.572,1677,0.256,1679,0.608,1690,2.078,1691,1.822,1693,1.453,1694,0.791,1696,0.582,1697,1.025,1706,0.229,1707,0.226,1714,0.547,1715,1.539,1724,0.601,1726,0.218,1730,0.289,1732,0.731,1736,1.677,1740,0.604,1741,0.213,1742,0.672,1743,0.474,1744,0.759,1745,0.211,1747,0.731,1748,1.619,1749,2.218,1751,0.645,1752,0.31,1753,0.582,1754,0.43,1755,2.684,1756,2.393,1757,0.759,1759,1.352,1760,1.956,1761,2.039,1762,5.337,1765,1.336,1768,0.226,1770,0.927,1785,3.695,1802,0.482,1806,0.467,1807,0.745,1808,0.521,1814,0.281,1815,1.476,1817,0.299,1819,0.781,1825,2.308,1826,0.344,1832,1.42,1833,0.299,1835,0.683,1837,0.221,1838,0.467,1841,1.834,1843,0.583,1844,0.5,1852,0.201,1854,1.706,1855,1.858,1857,0.262,1862,1.264,1863,0.547,1867,0.229,1868,0.199,1871,0.474,1873,0.289,1877,2.284,1878,2.112,1885,1.822,1902,1.158,1904,0.522,1906,0.221,1913,0.547,1917,4.791,1919,2.284,1932,0.824,1937,0.213,1938,0.216,1942,0.46,1944,1.428,1945,0.491,1951,0.829,1952,0.213,1953,1.37,1957,0.201,1958,0.416,1963,1.723,1964,0.521,1966,0.801,1969,0.547,1970,0.247,1977,0.809,1979,0.746,1990,0.809,1991,1.586,1993,0.547,1995,0.247,1999,0.274,2000,1.413,2002,0.819,2003,0.46,2006,0.289,2012,0.262,2022,0.474,2023,0.582,2026,0.824,2028,0.221,2029,0.289,2032,0.474,2034,0.425,2038,0.601,2043,0.482,2044,0.521,2052,0.232,2057,0.267,2060,3.356,2063,0.632,2067,0.223,2072,0.731,2074,0.267,2076,0.521,2085,0.582,2089,1.234,2104,0.731,2109,0.547,2112,0.474,2119,0.274,2124,2.059,2126,0.289,2127,1.012,2128,0.226,2130,0.232,2132,0.267,2134,0.731,2136,0.801,2137,0.5,2146,1.14,2154,0.391,2160,1.151,2161,0.256,2162,0.239,2182,1.491,2186,0.239,2187,0.482,2188,1.539,2192,0.563,2197,0.344,2214,3.207,2215,0.243,2216,0.223,2236,0.289,2243,0.324,2245,0.582,2273,0.637,2292,1.388,2295,4.741,2300,1.073,2308,0.491,2309,2.41,2321,0.474,2324,4.715,2325,1.75,2326,0.274,2327,0.801,2329,0.971,2330,0.491,2338,0.534,2339,0.67,2371,1.584,2377,0.746,2380,0.521,2384,0.267,2390,0.683,2394,0.267,2396,0.491,2402,0.31,2405,0.229,2409,0.5,2411,0.289,2418,0.232,2423,0.229,2424,1.81,2430,2.14,2441,0.482,2445,0.851,2448,2.847,2449,0.289,2452,0.775,2453,0.563,2454,2.675,2458,0.51,2465,0.289,2469,0.8,2470,0.547,2488,1.494,2490,0.888,2495,0.31,2496,0.324,2497,0.491,2503,0.801,2525,0.781,2526,0.262,2533,0.243,2536,1.313,2537,2.021,2538,0.289,2542,0.274,2545,0.299,2546,0.289,2547,0.425,2548,0.604,2551,0.239,2566,0.5,2574,0.801,2583,1.552,2586,0.521,2588,1.066,2589,1.956,2592,0.236,2596,0.344,2602,0.289,2604,0.447,2605,0.474,2613,0.582,2614,0.694,2619,0.281,2625,0.267,2626,0.731,2630,0.51,2632,0.31,2646,0.252,2648,0.632,2656,0.399,2670,0.256,2672,0.274,2674,1.911,2675,3.753,2696,0.262,2697,0.31,2704,0.262,2726,0.232,2744,0.43,2745,2.284,2760,0.547,2762,0.5,2764,0.622,2802,0.824,2807,0.31,2808,1.016,2809,1.646,2816,1.158,2820,0.694,2824,0.824,2825,0.281,2831,0.801,2834,4.216,2837,2.078,2839,3.258,2840,0.851,2849,4.142,2851,0.547,2870,2.372,2871,0.441,2875,4.811,2876,0.262,2878,1.309,2879,0.762,2883,0.31,2889,0.952,2893,0.267,2899,0.324,2903,1.469,2908,0.824,2909,0.243,2912,0.344,2915,0.281,2916,0.683,2917,1.42,2922,1.808,2924,0.324,2930,0.344,2935,0.324,2936,1.524,2938,0.267,2939,0.256,2940,1.252,2947,2.707,2948,0.299,2950,1.151,2951,0.31,2952,0.534,2953,1.309,2955,2.524,2956,0.274,2957,0.324,2958,0.281,2960,0.281,2967,0.718,3032,5.001,3036,1.151,3050,2.629,3103,0.563,3105,1.185,3106,0.344,3217,0.672,3219,0.232,3408,0.289,3413,0.289,3458,0.324,3463,0.31,3476,0.604,3484,0.344,3526,0.289,3577,0.344,3585,0.863,3599,1.853,3603,0.31,3623,0.622,3625,4.769,3628,1.535,3741,0.582,3754,0.256,3755,0.534,3766,0.256,3776,1.586,3794,0.521,3809,0.289,3819,0.344,3823,0.604,3824,0.632,3832,2.399,3835,1.965,3847,1.204,3872,0.604,3875,0.563,3876,1.073,3879,0.281,3885,0.604,3887,0.98,3890,0.547,3892,0.324,3893,0.247,3894,0.324,3905,0.344,3907,0.281,3924,0.324,3932,0.31,3941,0.31,3945,0.31,3952,0.534,3960,0.718,4023,0.281,4024,0.344,4025,0.582,4026,0.299,4046,2.939,4087,1.808,4095,0.632,4104,0.344,4110,0.324,4115,0.289,4116,0.289,4126,1.453,4128,0.563,4140,0.299,4152,0.344,4156,0.992,4158,0.299,4162,0.884,4163,0.274,4169,1.878,4171,0.299,4215,0.31,4216,0.31,4246,0.274,4253,0.604,4272,2.417,4276,1.556,4336,0.824,4348,1.535,4349,0.344,4373,1.42,4413,4.769,4414,0.851,4415,1.108,4416,0.67,4418,0.604,4420,0.604,4421,0.604,4422,0.884,4426,4.325,4430,0.801,4434,3.967,4439,1.352,4440,2.099,4444,1.658,4445,0.51,4447,3.328,4452,0.582,4456,3.735,4460,0.632,4465,2.09,4466,0.67,4468,1.556,4471,0.344,4472,0.67,4482,1.068,4542,0.267,4553,0.281,4563,1.108,4596,0.547,4705,0.547,4708,0.563,4711,0.98,4721,0.247,4727,1.42,4729,1.275,4754,1.042,4760,0.267,4764,0.604,4774,0.289,4788,0.582,4789,0.324,4840,0.31,4864,0.534,4891,0.344,4892,1.204,4904,0.31,4908,0.324,4912,0.344,4943,1.185,4944,0.281,4967,0.67,4986,0.31,5042,0.31,5063,0.31,5124,0.267,5133,0.992,5160,0.299,5175,0.98,5215,0.262,5222,0.267,5241,0.694,5260,0.563,5261,0.582,5336,0.299,5344,0.324,5346,0.324,5368,0.324,5424,0.299,5436,0.324,5462,0.299,5468,0.344,5470,0.299,5480,0.884,5481,0.884,5489,0.324,5492,0.344,5496,0.31,5501,0.31,5509,0.67,5544,5.551,5545,3.665,5546,0.824,5548,0.299,5549,2.561,5550,0.344,5551,0.727,5552,0.373,5553,1.383,5554,0.344,5555,4.101,5556,3.902,5557,1.383,5558,0.563,5559,4.293,5560,0.373,5561,0.373,5562,3.255,5563,0.373,5564,0.373,5565,0.373,5566,2.524,5567,0.373,5568,0.373,5569,0.727,5570,0.373,5571,0.632,5572,1.204,5573,0.67,5574,0.98,5575,1.063,5576,0.727,5577,0.67,5578,0.884,5579,0.632,5580,0.373,5581,0.299,5582,0.373,5583,7.03,5584,0.67,5585,0.373,5586,0.373,5587,0.344,5588,0.324,5589,1.808,5590,0.31,5591,0.373,5592,0.324,5593,0.727,5594,0.344,5595,0.373,5596,0.373,5597,0.727,5598,1.063,5599,2.258,5600,2.778,5601,0.373,5602,3.48,5603,1.98,5604,1.689,5605,3.022,5606,0.344,5607,0.373,5608,2.326,5609,0.324,5610,0.67,5611,0.373,5612,0.727,5613,1.98,5614,1.383,5615,0.373,5616,0.373,5617,1.383,5618,1.063,5619,0.727,5620,1.063,5621,1.689,5622,0.274,5623,3.073,5624,0.373,5625,3.48,5626,1.063,5627,1.352,5628,0.727,5629,1.204,5630,0.373,5631,0.344,5632,0.373,5633,0.67,5634,0.373,5635,1.063,5636,0.727,5637,1.825,5638,0.727,5639,0.373,5640,0.727,5641,0.727,5642,1.275,5643,0.727,5644,0.373,5645,0.373,5646,0.373,5647,0.373,5648,0.373,5649,1.383,5650,0.373,5651,0.727,5652,0.727,5653,0.344,5654,0.373,5655,0.373,5656,0.373,5657,0.632,5658,0.373,5659,0.727,5660,0.373,5661,0.373,5662,2.31,5663,0.373,5664,0.324,5665,3.957,5666,0.67,5667,0.632,5668,1.404,5669,0.344,5670,0.373,5671,0.727,5672,0.373,5673,0.373,5674,0.373,5675,0.67,5676,0.373,5677,0.373,5678,0.373,5679,0.373,5680,0.67,5681,0.727,5682,0.727,5683,0.373,5684,0.373,5685,0.925,5686,0.373,5687,0.373,5688,0.727,5689,0.373,5690,0.373,5691,0.373,5692,1.383,5693,0.373,5694,0.324,5695,0.344,5696,1.689,5697,0.67,5698,0.373,5699,0.373,5700,0.373,5701,0.373,5702,0.727,5703,0.373,5704,0.727,5705,1.383,5706,0.344,5707,0.373,5708,0.373,5709,3.001,5710,3.001,5711,0.344,5712,1.689,5713,1.689,5714,1.063,5715,0.373,5716,1.383,5717,2.778,5718,0.373,5719,0.373,5720,1.383,5721,0.373,5722,0.727,5723,2.258,5724,0.373,5725,0.373,5726,0.373,5727,0.727,5728,0.324,5729,0.632,5730,0.373,5731,0.373,5732,0.373,5733,0.727,5734,0.727,5735,0.373,5736,1.063,5737,0.373,5738,0.727,5739,0.373,5740,0.727,5741,0.373,5742,0.373,5743,0.373,5744,0.373,5745,0.373,5746,0.373,5747,1.689,5748,1.063,5749,1.383,5750,0.373,5751,0.632,5752,0.727,5753,0.373,5754,0.373,5755,1.063,5756,0.373,5757,0.373,5758,0.373,5759,0.373,5760,0.31,5761,0.373,5762,0.373,5763,0.373,5764,0.727,5765,1.689,5766,0.373,5767,0.727,5768,0.727,5769,0.727,5770,0.727,5771,0.727,5772,0.727,5773,0.727,5774,0.727,5775,0.727,5776,0.727,5777,1.383,5778,0.727,5779,1.383,5780,0.727,5781,1.383,5782,0.727,5783,1.383,5784,0.373,5785,0.727,5786,0.727,5787,1.063,5788,0.67,5789,0.373,5790,0.373,5791,0.344,5792,0.373,5793,0.344,5794,0.324,5795,0.373,5796,1.063,5797,1.063,5798,0.373,5799,0.373,5800,0.373,5801,0.373,5802,0.373,5803,0.373,5804,0.373,5805,0.727,5806,0.727,5807,0.727,5808,0.373,5809,0.373,5810,0.344,5811,0.373]],["component/40",[5,0.286]],["keyword/40",[]],["title/41-1",[6,24.306,931,41.292,5589,48.99,5812,56.383]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["keyword/41-1",[]],["title/41-2",[6,24.306,931,41.292,5579,53.228,5589,48.99]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["keyword/41-2",[]],["title/41-3",[193,25.352,576,27.083,2875,36.39]],["name/41-3",[]],["text/41-3",[]],["component/41-3",[]],["keyword/41-3",[]],["title/41-4",[138,12.639,388,27.659,4476,46.082,5581,48.99]],["name/41-4",[]],["text/41-4",[]],["component/41-4",[]],["keyword/41-4",[]],["title/41-5",[138,14.224,142,30.008,2137,47.353]],["name/41-5",[]],["text/41-5",[]],["component/41-5",[]],["keyword/41-5",[]],["title/41-6",[142,34.313,350,41.245]],["name/41-6",[]],["text/41-6",[]],["component/41-6",[]],["keyword/41-6",[]],["title/41-7",[142,30.008,193,25.352,891,41.253]],["name/41-7",[]],["text/41-7",[]],["component/41-7",[]],["keyword/41-7",[]],["title/41-8",[1646,60.958]],["name/41-8",[]],["text/41-8",[]],["component/41-8",[]],["keyword/41-8",[]],["title/41-9",[138,16.265,1938,45.523]],["name/41-9",[]],["text/41-9",[]],["component/41-9",[]],["keyword/41-9",[]],["title/41-10",[193,22.525,576,24.064,1476,26.821,2452,34.247]],["name/41-10",[]],["text/41-10",[]],["component/41-10",[]],["keyword/41-10",[]],["title/41-11",[193,16.88,576,18.033,1476,20.099,1477,20.22,2060,27.467,2967,30.943,5813,42.252]],["name/41-11",[]],["text/41-11",[]],["component/41-11",[]],["keyword/41-11",[]],["title/41-12",[193,29.298,576,21.65,1476,24.131,2967,37.151]],["name/41-12",[]],["text/41-12",[]],["component/41-12",[]],["keyword/41-12",[]],["title/41-13",[576,27.083,1476,30.187,1608,38.544]],["name/41-13",[]],["text/41-13",[]],["component/41-13",[]],["keyword/41-13",[]],["title/41-14",[1218,43.543,2104,47.353,2849,46.473]],["name/41-14",[]],["text/41-14",[]],["component/41-14",[]],["keyword/41-14",[]],["title/41-15",[2849,53.141,3832,48.41]],["name/41-15",[]],["text/41-15",[]],["component/41-15",[]],["keyword/41-15",[]],["title/41-16",[193,20.266,576,21.65,1477,24.277,2452,30.812,5814,47.889]],["name/41-16",[]],["text/41-16",[]],["component/41-16",[]],["keyword/41-16",[]],["title/41-17",[193,20.266,303,22.924,576,21.65,1477,24.277,5815,47.889]],["name/41-17",[]],["text/41-17",[]],["component/41-17",[]],["keyword/41-17",[]],["title/41-18",[138,14.224,1477,30.369,5622,50.543]],["name/41-18",[]],["text/41-18",[]],["component/41-18",[]],["keyword/41-18",[]],["title/41-19",[576,27.083,1477,30.369,5215,48.313]],["name/41-19",[]],["text/41-19",[]],["component/41-19",[]],["keyword/41-19",[]],["title/41-20",[576,21.65,1477,24.277,2849,37.151,5215,38.621,5622,40.404]],["name/41-20",[]],["text/41-20",[]],["component/41-20",[]],["keyword/41-20",[]],["title/41-21",[1218,43.543,2849,46.473,4879,57.255]],["name/41-21",[]],["text/41-21",[]],["component/41-21",[]],["keyword/41-21",[]],["title/41-22",[576,27.083,1477,30.369,1608,38.544]],["name/41-22",[]],["text/41-22",[]],["component/41-22",[]],["keyword/41-22",[]],["title/41-23",[468,32.977,576,21.65,2967,37.151,5215,38.621,5622,40.404]],["name/41-23",[]],["text/41-23",[]],["component/41-23",[]],["keyword/41-23",[]],["title/41-24",[338,43.626,5622,57.795]],["name/41-24",[]],["text/41-24",[]],["component/41-24",[]],["keyword/41-24",[]],["title/41-25",[213,37.288,315,21.261]],["name/41-25",[]],["text/41-25",[]],["component/41-25",[]],["keyword/41-25",[]],["title/41-26",[315,21.261,416,37.031]],["name/41-26",[]],["text/41-26",[]],["component/41-26",[]],["keyword/41-26",[]],["title/41-27",[26,41.78,2850,49.369,4476,51.864]],["name/41-27",[]],["text/41-27",[]],["component/41-27",[]],["keyword/41-27",[]],["title/41-28",[138,16.265,5816,65.469]],["name/41-28",[]],["text/41-28",[]],["component/41-28",[]],["keyword/41-28",[]],["title/41-29",[1610,55.073]],["name/41-29",[]],["text/41-29",[]],["component/41-29",[]],["keyword/41-29",[]],["title/41",[6,19.875,29,16.716,193,18.419,931,33.764,2875,26.438,5160,40.058]],["name/41",[931,0.511,2774,0.658]],["text/41",[0,0.578,1,0.57,2,0.819,3,0.323,5,0.89,6,1.767,8,0.213,9,0.237,10,0.243,19,0.299,20,3.552,21,0.29,26,1.597,29,0.484,31,1.838,46,5.109,63,1.137,138,2.608,139,3.335,142,4.612,144,1.547,146,0.323,147,0.97,149,0.746,151,2.379,152,1.206,154,0.29,157,0.276,159,0.774,161,0.439,186,1.372,188,0.672,189,0.217,191,1.912,193,4.651,199,1.745,204,0.296,206,0.939,207,0.227,213,3.65,214,1.574,217,0.262,221,1.33,225,0.296,226,0.435,232,0.857,233,2.253,234,0.371,235,0.299,236,0.414,240,0.25,243,0.487,245,1.08,246,0.986,247,0.663,249,0.578,250,1.645,258,0.23,259,0.296,261,1.165,263,6.429,264,0.279,265,0.614,268,0.327,272,3.101,279,2.097,282,1.934,283,0.837,284,1.973,286,2.103,292,0.356,294,0.787,296,0.565,298,3.018,299,1.473,301,0.363,303,3.389,306,2.168,311,0.323,314,0.687,315,2.608,316,0.528,318,0.857,323,0.281,325,0.641,329,0.303,334,3.636,335,4.706,337,3.244,338,4.271,340,1.496,341,1.539,343,0.632,344,2.656,346,0.218,350,2.703,351,0.765,353,0.746,354,0.247,355,1.745,357,3.76,360,2.97,365,0.318,369,1.968,376,1.831,378,0.293,388,3.136,391,0.303,392,1.086,394,2.067,402,0.231,405,0.93,407,0.318,411,1.678,412,0.543,416,4.087,418,1.475,420,0.78,421,0.97,422,0.303,433,0.819,434,0.39,435,0.734,437,2.537,438,2.49,439,0.349,440,0.29,445,1.911,446,1.239,459,3.994,465,1.137,468,3.882,470,0.327,472,0.414,477,0.323,483,2.505,487,0.276,498,1.355,503,0.356,506,0.284,509,0.332,510,0.759,511,0.39,513,0.772,523,0.903,525,0.414,526,1.431,527,0.891,537,2.033,539,2.235,540,1.029,545,0.734,547,0.752,548,0.224,551,0.97,553,0.954,554,0.242,556,0.363,567,0.962,568,1.311,570,0.716,573,0.414,574,0.861,576,4.787,577,0.318,578,1.475,584,0.554,586,1.811,587,0.284,590,1.881,593,0.287,596,0.765,597,0.528,599,1.165,602,0.24,613,0.811,707,0.452,708,0.414,725,0.533,732,1.356,733,0.554,735,0.287,738,1.56,747,2.194,748,2.006,768,0.293,783,0.323,788,1.093,799,0.29,802,5.373,803,0.978,808,0.623,816,0.371,825,0.674,834,0.414,849,1.957,850,0.306,851,3.478,852,0.414,856,0.623,880,0.401,890,4.457,891,2.664,900,0.733,908,0.565,910,0.306,914,0.43,918,0.924,930,0.903,931,3.17,936,1.626,957,1.371,964,0.327,972,1.261,973,1.722,974,0.921,981,1.912,1015,0.31,1024,0.274,1026,0.243,1038,1.622,1045,0.401,1057,1.664,1093,1.964,1111,6.211,1113,0.502,1125,0.93,1197,0.303,1207,0.831,1218,3.263,1222,0.606,1228,0.349,1229,2.7,1266,1.219,1289,0.414,1343,0.43,1446,1.407,1476,5.154,1477,5.444,1479,1.08,1482,0.939,1489,0.38,1491,0.811,1493,0.765,1498,0.93,1499,1.293,1500,0.213,1501,1.685,1503,0.652,1516,0.401,1517,0.323,1521,1.651,1522,1.473,1528,1.333,1532,0.274,1538,0.839,1542,2.656,1543,1.057,1544,0.979,1546,0.759,1551,0.314,1557,0.674,1559,1.391,1562,1.035,1565,0.606,1569,1.587,1572,3.724,1573,0.857,1575,0.759,1585,1.106,1586,1.195,1588,0.811,1590,1.996,1591,0.559,1594,0.306,1595,1.803,1606,1.093,1608,1.851,1614,0.543,1615,1.98,1620,0.256,1624,0.356,1635,2.313,1646,6.651,1656,2.399,1661,1.057,1672,0.356,1673,0.293,1674,0.891,1675,2.571,1676,2.528,1690,0.262,1691,1.046,1694,0.296,1697,0.606,1707,0.314,1715,0.287,1724,0.293,1725,0.318,1726,0.303,1728,0.343,1731,0.349,1736,0.962,1737,0.43,1741,0.828,1742,0.632,1744,3.272,1745,0.293,1748,0.716,1749,4.636,1751,0.879,1753,5.555,1754,0.306,1755,0.356,1756,0.356,1758,0.31,1759,1.811,1760,2.309,1761,2.654,1762,1.776,1770,1.241,1806,0.332,1814,0.753,1825,0.343,1832,0.371,1837,0.306,1841,0.314,1843,0.548,1852,0.279,1854,0.523,1857,0.363,1868,0.533,1878,0.314,1885,0.811,1902,0.303,1904,1.111,1906,0.591,1917,0.343,1937,0.296,1938,3.926,1942,0.327,1944,0.819,1945,2.232,1951,0.31,1953,1.134,1970,2.592,1990,1.934,1991,0.414,2000,2.343,2001,4.868,2005,0.43,2012,0.363,2013,0.641,2022,0.652,2023,0.414,2028,0.306,2034,0.847,2038,0.293,2044,0.371,2050,0.343,2054,0.371,2060,3.882,2071,0.371,2078,0.733,2079,0.996,2104,1.285,2112,0.338,2118,0.879,2123,0.343,2124,0.632,2126,1.448,2128,0.314,2131,0.338,2134,3.393,2137,6.757,2146,0.349,2160,0.43,2162,0.332,2182,5.225,2183,2.812,2186,1.689,2187,0.663,2188,0.803,2204,0.314,2206,0.338,2208,0.775,2215,1.219,2220,0.733,2273,2.166,2292,0.614,2295,0.632,2304,0.687,2309,0.652,2321,0.945,2324,2.09,2333,0.363,2342,0.323,2358,0.338,2366,0.921,2374,0.39,2380,0.371,2384,1.887,2399,0.45,2400,2.274,2406,0.45,2418,0.323,2420,0.43,2423,0.614,2424,1.038,2430,2.403,2452,3.338,2453,0.401,2456,0.652,2469,0.299,2479,5.057,2488,0.306,2494,1.091,2503,0.753,2533,1.219,2536,0.343,2545,0.414,2551,0.332,2570,0.338,2583,0.318,2586,0.371,2588,1.78,2589,0.401,2592,0.327,2593,1.261,2595,0.43,2604,0.318,2619,0.39,2626,0.356,2647,0.38,2670,0.687,2689,0.978,2696,0.363,2744,0.591,2745,1.587,2764,1.093,2808,0.733,2809,0.338,2811,0.343,2847,0.43,2849,5.353,2850,2.592,2853,0.38,2870,3.312,2871,2.699,2875,5.468,2877,0.38,2889,0.687,2890,0.401,2893,0.716,2909,0.652,2916,0.332,2920,0.401,2936,0.674,2937,0.363,2939,0.356,2940,0.632,2944,0.831,2952,0.733,2953,0.775,2958,1.091,2967,6.595,3033,1.016,3037,0.831,3048,0.38,3082,0.38,3105,0.363,3217,2.286,3219,0.623,3408,0.401,3413,0.401,3462,0.414,3468,1.407,3472,2.563,3479,1.016,3485,0.869,3548,0.831,3579,0.38,3625,0.38,3741,2.107,3754,0.687,3759,0.371,3794,1.887,3823,0.831,3832,3.172,3853,0.401,3857,0.477,3875,0.775,3883,0.477,3891,0.599,3893,0.343,3902,0.414,3945,0.831,3960,1.776,4019,1.968,4034,0.39,4087,0.414,4108,1.968,4128,0.401,4146,0.921,4169,0.831,4214,0.45,4216,0.831,4248,1.496,4253,0.43,4358,0.43,4374,0.45,4411,0.363,4413,4.873,4415,4.132,4426,0.39,4434,3.002,4439,0.8,4440,0.43,4460,0.45,4476,5.806,4548,0.663,4563,0.414,4709,0.349,4731,0.45,4754,0.753,4864,0.38,4867,0.43,4879,0.43,4885,0.477,4892,0.45,5133,0.371,5160,0.414,5165,0.477,5198,0.8,5215,5.913,5241,1.219,5279,1.968,5335,0.45,5360,0.869,5423,0.45,5424,0.414,5457,0.45,5481,0.831,5496,0.43,5544,1.968,5545,0.733,5548,0.414,5549,1.722,5550,0.477,5574,3.602,5579,3.4,5581,1.16,5587,1.722,5589,1.811,5608,0.477,5622,4.378,5623,0.43,5637,1.335,5642,0.477,5662,2.477,5664,2.877,5668,1.554,5680,0.477,5697,0.477,5709,0.477,5710,0.477,5711,1.335,5751,0.45,5760,0.831,5810,4.755,5812,3.602,5813,4.099,5814,5.345,5815,1.26,5816,7.723,5817,0.45,5818,0.518,5819,0.518,5820,0.518,5821,0.518,5822,6.315,5823,1.448,5824,1.448,5825,2.631,5826,0.999,5827,7.59,5828,1.868,5829,2.631,5830,2.262,5831,0.518,5832,0.518,5833,4.933,5834,0.518,5835,0.518,5836,0.518,5837,1.448,5838,0.518,5839,0.518,5840,0.518,5841,2.289,5842,0.999,5843,0.518,5844,0.518,5845,0.518,5846,0.518,5847,0.518,5848,0.518,5849,0.518,5850,0.518,5851,4.447,5852,3.908,5853,0.999,5854,0.999,5855,0.999,5856,0.999,5857,1.448,5858,1.448,5859,2.262,5860,2.262,5861,0.999,5862,2.631,5863,0.518,5864,0.518,5865,0.518,5866,0.999,5867,0.999,5868,0.999,5869,0.999,5870,0.477,5871,0.518,5872,0.999,5873,0.518,5874,0.518,5875,0.999,5876,0.518,5877,0.518,5878,0.518,5879,0.518,5880,0.518,5881,0.999,5882,0.518,5883,0.518,5884,0.518,5885,0.518,5886,0.518,5887,1.868,5888,0.518,5889,2.979,5890,0.518,5891,0.999,5892,0.518,5893,0.518,5894,0.518,5895,0.518,5896,0.518,5897,0.518,5898,0.518,5899,0.518,5900,0.518,5901,0.518,5902,0.518,5903,0.518,5904,0.518,5905,0.518,5906,0.518,5907,0.518,5908,0.518,5909,0.518,5910,0.518,5911,0.518,5912,0.518,5913,0.999,5914,0.518,5915,0.999,5916,0.518,5917,1.448,5918,1.868,5919,0.921,5920,0.999,5921,0.518,5922,0.518,5923,0.518,5924,1.448,5925,0.518,5926,0.999,5927,0.518,5928,0.999,5929,0.518,5930,0.999,5931,0.518,5932,0.999,5933,0.518,5934,0.999,5935,0.518,5936,0.999,5937,0.518,5938,0.999,5939,0.518,5940,0.999,5941,0.518,5942,0.999,5943,0.518,5944,0.518,5945,0.518,5946,0.518,5947,0.518,5948,0.518,5949,0.518,5950,0.518,5951,0.518,5952,0.518,5953,0.518,5954,0.518,5955,0.518,5956,0.921,5957,0.518,5958,0.518,5959,0.999,5960,0.518,5961,0.999,5962,0.518,5963,0.921,5964,0.518,5965,0.999,5966,0.518,5967,0.999,5968,0.999,5969,0.518,5970,0.999,5971,0.518,5972,0.999,5973,0.518,5974,0.999,5975,0.518,5976,0.999,5977,0.518,5978,1.448,5979,0.518,5980,0.518,5981,0.477,5982,0.518,5983,0.477,5984,0.518,5985,0.518,5986,1.868,5987,0.518,5988,0.518,5989,0.45,5990,0.921,5991,0.518,5992,0.518,5993,0.518,5994,0.518,5995,0.999,5996,0.518,5997,0.999,5998,0.518,5999,0.518,6000,0.518,6001,0.999,6002,0.518,6003,0.518,6004,0.518,6005,0.518,6006,0.518,6007,0.518,6008,1.722,6009,2.979,6010,0.518,6011,0.518,6012,0.518,6013,0.999,6014,0.518,6015,1.448,6016,0.518,6017,0.518,6018,0.518,6019,0.477,6020,0.999,6021,0.477,6022,0.999,6023,0.518,6024,0.999,6025,1.868,6026,0.518,6027,0.921,6028,0.518,6029,0.999,6030,0.999,6031,0.518,6032,2.262,6033,0.518,6034,0.518,6035,2.631,6036,0.518,6037,1.448,6038,0.518,6039,0.518,6040,1.868,6041,0.518,6042,2.631,6043,0.999,6044,1.448,6045,0.518,6046,0.518,6047,2.979,6048,0.518,6049,0.518,6050,1.448,6051,0.518,6052,0.518,6053,1.868,6054,0.999,6055,0.518,6056,0.999,6057,0.518,6058,0.518,6059,0.518,6060,0.999,6061,0.999,6062,0.999,6063,0.999,6064,0.999,6065,0.518,6066,0.999,6067,2.262,6068,0.999,6069,2.979,6070,1.448,6071,0.999,6072,1.868,6073,3.908,6074,0.999,6075,0.45,6076,0.518,6077,0.999,6078,0.518,6079,1.868,6080,0.414,6081,0.518,6082,0.775,6083,0.518,6084,0.518,6085,0.518,6086,0.999,6087,0.518,6088,0.518,6089,0.518,6090,0.518,6091,1.868,6092,0.518,6093,0.999,6094,0.518,6095,0.518,6096,0.518,6097,0.518,6098,0.518,6099,0.999,6100,0.518,6101,0.518,6102,0.518,6103,1.868,6104,0.518,6105,0.518,6106,0.477,6107,0.518,6108,0.518,6109,0.518]],["component/41",[5,0.286]],["keyword/41",[]],["title/42-1",[1620,38.955,2457,65.469]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["keyword/42-1",[]],["title/42-2",[5,20.571,346,28.994,1500,28.368]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["keyword/42-2",[]],["title/42-3",[138,12.639,139,23.712,161,18.539,1531,30.744]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["keyword/42-3",[]],["title/42-4",[6110,84.717]],["name/42-4",[]],["text/42-4",[]],["component/42-4",[]],["keyword/42-4",[]],["title/42-5",[9,25.206,161,16.68,188,25.541,362,24.425,1531,27.661]],["name/42-5",[]],["text/42-5",[]],["component/42-5",[]],["keyword/42-5",[]],["title/42-6",[138,10.334,139,19.389,161,15.159,169,21.548,602,23.212,1531,25.139]],["name/42-6",[]],["text/42-6",[]],["component/42-6",[]],["keyword/42-6",[]],["title/42-7",[138,10.334,139,19.389,161,15.159,180,24.564,602,23.212,1531,25.139]],["name/42-7",[]],["text/42-7",[]],["component/42-7",[]],["keyword/42-7",[]],["title/42-8",[138,10.334,139,19.389,159,20.722,161,15.159,602,23.212,1531,25.139]],["name/42-8",[]],["text/42-8",[]],["component/42-8",[]],["keyword/42-8",[]],["title/42-9",[161,18.539,360,28.775,362,27.148,1531,30.744]],["name/42-9",[]],["text/42-9",[]],["component/42-9",[]],["keyword/42-9",[]],["title/42-10",[29,26.309,1026,37.031]],["name/42-10",[]],["text/42-10",[]],["component/42-10",[]],["keyword/42-10",[]],["title/42-11",[490,38.544,1531,34.602,1745,38.949]],["name/42-11",[]],["text/42-11",[]],["component/42-11",[]],["keyword/42-11",[]],["title/42",[5,18.278,161,18.539,490,34.247,1531,30.744]],["name/42",[1531,0.712]],["text/42",[0,3.384,1,3.54,5,3.549,6,1.85,7,1.645,8,1.919,9,3.88,10,3.308,13,1.456,14,1.249,19,1.607,20,2.864,29,3.754,31,4.44,45,7.392,46,3.932,63,2.34,138,2.246,139,3.284,144,4.067,147,2.419,151,1.408,159,3.244,161,4.124,169,4.066,180,4.419,185,1.211,188,2.789,193,1.715,203,2.945,204,2.663,207,1.219,221,4.018,225,2.663,226,2.03,233,2.359,243,1.355,267,1.733,268,4.447,272,2.287,279,3.783,286,2.867,291,2.951,292,3.203,294,1.51,299,2.607,326,2.44,327,1.345,335,1.607,336,2.903,338,1.54,344,1.496,346,3.298,347,1.257,357,1.17,360,3.985,362,5.636,386,1.733,390,1.444,393,2.903,402,2.079,410,4.255,417,1.326,422,1.626,425,2.094,426,2.094,438,2.607,458,4.324,465,1.397,478,1.54,482,1.709,487,1.482,488,1.525,490,1.556,493,1.54,498,1.265,502,1.51,508,1.687,513,1.482,515,2.094,516,1.33,526,2.237,527,2.221,552,3.92,571,1.589,574,1.281,577,1.709,578,1.813,581,4.987,583,4.527,584,1.54,585,5.899,588,1.469,601,1.95,602,5.409,613,5.038,707,1.257,713,2.79,731,3.523,732,3.54,735,2.581,749,7.111,860,2.461,928,2.44,957,2.04,967,1.408,988,3.339,1026,4.897,1062,1.758,1066,2.094,1093,3.021,1103,5.042,1113,4.523,1142,1.607,1148,1.51,1222,1.687,1229,3.403,1479,4.066,1492,1.572,1500,3.708,1501,1.572,1502,4.515,1503,1.813,1504,1.843,1505,1.912,1506,2.226,1508,9.795,1515,1.687,1521,3.897,1528,4.559,1530,2.094,1531,6.334,1538,4.409,1543,1.572,1554,2.04,1562,1.54,1571,3.508,1575,1.456,1595,3.373,1609,1.482,1620,1.375,1622,1.51,1657,1.687,1661,1.572,1679,1.589,1691,1.556,1724,2.634,1736,3.622,1745,1.572,1757,2.555,1818,2.311,1822,1.572,1852,1.496,1878,1.687,1938,2.693,1980,2.311,2027,1.813,2034,5.521,2057,1.993,2077,2.04,2143,2.155,2148,2.724,2161,1.912,2162,3.859,2175,2.094,2188,4.987,2216,1.665,2295,2.945,2341,5.23,2342,2.903,2343,3.855,2348,3.088,2349,3.729,2350,2.99,2354,3.143,2355,2.155,2400,1.912,2450,2.094,2469,1.607,2488,1.645,2534,1.813,2751,2.155,2816,1.626,2832,2.418,2844,4.998,2869,2.311,2895,1.784,2917,7.266,2939,1.912,2958,2.094,3011,2.311,3070,2.226,3100,2.311,3109,3.037,3533,2.418,3766,1.912,3960,3.143,4134,2.155,4223,2.311,4816,1.843,5124,3.339,5134,1.993,5135,2.226,5470,7.207,6110,8.295,6111,4.052,6112,2.779,6113,2.779,6114,2.226,6115,2.779,6116,4.292,6117,2.779,6118,2.779,6119,2.779,6120,2.779,6121,2.779,6122,2.562,6123,2.779,6124,7.032,6125,2.779,6126,2.779,6127,2.779,6128,2.779,6129,2.779,6130,2.779,6131,2.779,6132,2.779,6133,2.779,6134,2.779,6135,2.779,6136,2.562,6137,2.562,6138,2.779,6139,2.779,6140,2.779,6141,2.779,6142,2.779,6143,2.779,6144,2.779,6145,2.779,6146,2.779,6147,2.779,6148,2.779,6149,2.779,6150,2.779,6151,2.779,6152,2.779,6153,2.779,6154,2.779]],["component/42",[5,0.286]],["keyword/42",[]],["title/43-1",[138,11.371,1476,24.131,1477,24.277,2343,25.044,2350,35.336]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["keyword/43-1",[]],["title/43-2",[138,12.639,738,32.049,2343,27.836,2350,39.275]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["keyword/43-2",[]],["title/43-3",[138,11.371,432,29.09,2020,32.575,2343,25.044,2350,35.336]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["keyword/43-3",[]],["title/43-4",[138,10.334,731,19.58,732,18.758,2343,22.761,2350,32.115,2656,27.445]],["name/43-4",[]],["text/43-4",[]],["component/43-4",[]],["keyword/43-4",[]],["title/43-5",[138,10.334,731,19.58,732,18.758,2343,22.761,2350,32.115,2946,33.174]],["name/43-5",[]],["text/43-5",[]],["component/43-5",[]],["keyword/43-5",[]],["title/43",[29,14.138,161,12.822,731,16.561,732,15.865,2342,26.376,2343,19.251,2350,27.163,5134,30.337]],["name/43",[2342,0.322,4410,0.362,4411,0.362]],["text/43",[0,1.779,1,1.752,5,2.032,6,2.701,8,1.835,9,2.04,29,1.489,138,2.623,139,1.727,144,3.531,152,2.376,161,2.796,190,2.421,193,1.64,217,4.675,221,4.677,223,4.955,228,2.376,233,2.257,258,1.977,259,2.547,286,4.937,291,2.188,303,4.363,306,2.171,315,1.836,329,2.606,357,1.876,360,2.095,362,3.017,371,4.112,388,2.014,402,1.989,407,4.181,410,3.695,420,2.398,432,2.354,458,2.739,487,2.376,498,2.027,522,4.589,571,2.547,573,3.567,574,3.801,576,3.244,577,4.181,588,4.877,593,2.469,707,2.014,728,3.126,729,3.27,730,3.126,731,5.123,732,4.908,733,2.469,738,2.334,799,2.494,807,2.494,860,2.354,918,4.917,928,6.345,929,2.739,967,4.177,1026,4.927,1068,2.954,1093,3.417,1142,3.932,1153,5.215,1229,2.155,1330,4.509,1476,1.953,1477,1.965,1500,4.628,1507,3.695,1519,6.624,1531,2.239,1552,5.924,1575,2.334,1578,2.669,1588,2.494,1590,2.275,1593,2.11,1595,3.975,1614,2.421,1690,4.675,1757,2.444,1843,2.444,1854,2.334,1885,2.494,1904,3.339,1939,4.967,1944,2.52,1947,4.481,2002,2.637,2020,5.881,2070,3.194,2087,2.494,2129,2.954,2151,5.654,2153,3.27,2157,5.654,2342,5.753,2343,6.119,2350,8.203,2499,3.194,2656,2.444,2799,2.817,2816,2.606,2946,2.954,3474,5.671,3623,3.977,4115,5.271,4116,5.271,4538,2.954,4740,6.12,4760,3.194,4816,2.954,5039,6.603,5134,3.194,5167,3.567,5282,3.567,5283,4.875,6155,4.455,6156,4.106,6157,4.455,6158,4.106,6159,4.106,6160,4.106,6161,4.106,6162,4.106,6163,4.106,6164,4.106,6165,4.106,6166,4.455,6167,6.799,6168,4.106,6169,3.876,6170,4.106,6171,4.106,6172,4.106,6173,4.106,6174,4.106,6175,4.455,6176,4.455,6177,4.106]],["component/43",[5,0.286]],["keyword/43",[]],["title/44",[138,12.639,139,23.712,1528,30.991,6178,56.383]],["name/44",[371,0.257,6179,0.516,6180,0.516]],["text/44",[0,2.231,1,2.358,5,1.669,6,1.378,8,0.436,9,0.485,14,0.476,52,0.66,79,0.743,138,1.662,139,2.467,144,0.55,146,1.23,147,1.025,158,1.833,161,2.896,188,2.781,189,1.453,207,0.464,213,2.839,217,0.999,221,0.881,225,0.606,231,2.954,239,0.635,243,0.516,246,0.462,247,0.485,258,0.47,263,0.498,267,0.66,273,0.599,278,3.307,279,1.549,286,1.414,291,0.969,292,0.728,312,1.726,315,0.937,327,2.246,330,1.016,338,0.587,344,0.57,346,2.164,353,0.545,357,1.166,362,3.836,370,1.639,371,2.315,378,0.599,382,0.606,390,0.55,392,0.509,393,1.23,394,6.086,411,0.491,416,1.302,417,3.036,420,2.766,432,0.56,433,0.599,438,0.593,468,0.635,476,1.678,479,0.728,487,0.565,498,0.898,502,1.072,526,1.33,527,0.941,540,0.898,546,0.627,581,0.587,588,0.56,707,0.892,712,0.999,722,1.043,731,1.6,732,1.533,738,0.555,744,3.307,747,3.39,756,3.161,780,3.843,788,0.619,799,2.289,807,4.088,811,3.307,823,0.627,830,3.587,832,0.643,843,3.39,849,0.627,850,1.168,871,0.702,881,3.644,895,3.771,908,0.599,929,0.651,943,0.821,960,3.843,970,3.843,971,4.006,988,0.759,1001,3.307,1012,0.612,1015,0.635,1025,0.68,1026,0.498,1068,2.712,1093,0.532,1148,1.072,1196,0.821,1476,0.865,1477,0.87,1487,4.969,1493,2.453,1502,2.98,1503,1.287,1528,1.403,1530,0.798,1531,0.532,1572,0.528,1594,0.627,1608,0.593,1609,0.565,1622,0.575,1644,0.67,1658,0.619,1755,6.286,1756,6.286,1762,0.715,1785,3.16,1802,1.836,1803,1.415,1835,0.68,1838,0.68,1841,0.643,1852,1.49,1867,0.651,1877,0.743,1913,0.798,1914,0.777,1915,0.821,1916,0.821,1917,0.702,1918,0.848,1919,0.743,1927,0.777,1952,7.562,1957,7.352,2053,0.777,2072,0.728,2083,0.728,2088,0.881,2129,2.712,2140,5.149,2142,7.683,2148,1.154,2149,0.777,2150,0.798,2151,0.881,2152,0.848,2153,7.275,2154,7.331,2155,0.798,2156,0.759,2157,0.881,2158,0.848,2188,0.587,2240,0.593,2490,0.68,2547,0.619,2565,0.821,2572,0.759,2573,1.486,2574,1.486,2630,0.743,2672,0.777,2673,0.881,2678,0.798,2704,0.743,2721,0.922,2723,0.922,2743,0.743,2744,0.627,2807,0.881,2811,0.702,3038,1.58,3109,1.287,3133,0.976,3136,0.976,3204,0.976,3205,0.976,3206,0.976,3208,0.881,3227,0.976,3228,0.976,3232,0.976,3233,0.976,3243,0.922,3244,0.922,3245,0.922,3662,8.64,3663,8.104,3664,7.062,3665,4.4,3754,1.357,3759,1.415,4021,0.976,4211,0.759,4239,0.922,4258,1.716,4357,1.716,4358,0.881,4373,0.759,4418,0.881,4420,0.881,4421,0.881,4422,0.881,4445,0.743,4465,0.68,4544,4.984,4545,1.486,4547,1.415,4551,1.486,4552,1.486,4709,0.715,4715,0.798,4716,0.777,4721,0.702,4724,0.821,4733,0.798,4734,0.798,4744,0.798,4774,0.821,4820,9.936,4828,4.115,4837,0.881,4838,0.881,4871,0.848,4934,3.558,4935,6.689,4936,4.646,4992,1.486,5030,0.798,5032,0.848,5061,0.976,5117,9.031,5118,6.799,5124,1.415,5129,0.848,5183,0.798,5184,0.821,5194,0.922,5195,1.486,5201,0.821,5204,0.848,5213,0.881,5214,0.881,5283,1.985,5284,0.881,5285,0.922,5286,0.922,5287,0.922,5288,0.922,5289,0.922,5290,0.922,5291,0.922,5298,0.881,5299,0.881,5301,0.881,5302,0.922,5303,0.922,5350,0.922,5351,0.922,5352,0.922,5353,0.922,5354,0.922,5355,0.881,5356,0.881,5360,3.558,5361,7.817,5362,0.922,5363,0.922,5364,0.922,5365,0.922,5375,0.922,5376,0.922,5377,0.922,5378,0.922,5379,0.922,5380,0.922,5381,0.922,5382,0.922,5387,0.881,5388,0.922,5389,0.922,5408,0.922,5409,0.881,5410,0.881,5511,0.848,5512,0.881,5513,0.881,5521,0.881,5522,0.922,5523,0.922,5524,0.922,5525,0.922,5532,0.922,5533,0.922,5534,0.922,5535,0.922,5609,0.922,5662,0.881,5667,0.922,5841,0.922,6116,0.976,6158,0.976,6159,0.976,6160,0.976,6161,0.976,6162,0.976,6163,0.976,6164,0.976,6165,0.976,6168,0.976,6169,0.922,6170,0.976,6171,0.976,6172,0.976,6173,0.976,6174,0.976,6177,0.976,6178,0.976,6181,0.976,6182,1.973,6183,1.973,6184,1.973,6185,1.059,6186,0.976,6187,1.059,6188,1.059,6189,1.059,6190,1.059,6191,1.059,6192,0.976,6193,1.059,6194,0.976,6195,0.976,6196,0.976,6197,1.059,6198,1.059,6199,5.149,6200,7.814,6201,5.139,6202,5.139,6203,2.769,6204,1.973,6205,1.059,6206,2.769,6207,1.059,6208,1.059,6209,6.364,6210,0.922,6211,0.922,6212,0.922,6213,0.922,6214,5.139,6215,7.814,6216,0.821,6217,0.848,6218,0.821,6219,8.043,6220,5.994,6221,8.456,6222,0.848,6223,0.821,6224,0.976,6225,0.922,6226,4.089,6227,1.973,6228,9.562,6229,1.059,6230,1.059,6231,6.703,6232,1.059,6233,1.64,6234,0.922,6235,3.469,6236,0.881,6237,0.881,6238,0.881,6239,6.364,6240,0.881,6241,0.881,6242,0.881,6243,1.716,6244,2.146,6245,0.922,6246,0.922,6247,0.922,6248,1.818,6249,7.568,6250,0.976,6251,6.354,6252,9.285,6253,6.354,6254,6.354,6255,0.976,6256,1.716,6257,0.976,6258,1.716,6259,0.976,6260,1.716,6261,0.976,6262,1.716,6263,0.976,6264,1.818,6265,0.976,6266,1.973,6267,0.976,6268,1.973,6269,0.976,6270,0.976,6271,0.976,6272,0.976,6273,0.976,6274,0.976,6275,0.976,6276,0.976,6277,0.976,6278,0.976,6279,1.818,6280,4.089,6281,3.469,6282,3.469,6283,3.469,6284,3.469,6285,3.469,6286,12.871,6287,1.059,6288,1.059,6289,1.059,6290,1.059,6291,2.769,6292,1.973,6293,3.469,6294,1.973,6295,2.769,6296,3.469,6297,1.059,6298,0.976,6299,0.976,6300,0.976,6301,0.976,6302,0.976,6303,0.976,6304,1.059,6305,0.976,6306,1.059,6307,0.976,6308,1.059,6309,0.976,6310,1.059,6311,0.976,6312,2.769,6313,1.973,6314,0.976,6315,0.976,6316,2.769,6317,2.769,6318,0.976,6319,0.976,6320,0.976,6321,1.973,6322,3.469,6323,3.469,6324,0.976,6325,1.059,6326,1.973,6327,1.059,6328,1.059,6329,1.059,6330,1.059,6331,1.059,6332,1.059,6333,1.059,6334,1.059,6335,1.059,6336,1.059,6337,1.059,6338,1.059,6339,1.059,6340,1.059,6341,1.059,6342,3.469,6343,0.976,6344,1.973,6345,1.059,6346,1.059,6347,1.059,6348,1.059,6349,1.059,6350,1.059,6351,1.059,6352,1.059,6353,1.059,6354,1.059,6355,1.059,6356,1.059,6357,1.059,6358,1.059,6359,2.769,6360,0.976,6361,0.976,6362,0.976,6363,1.973,6364,1.059,6365,1.059,6366,0.922,6367,2.769,6368,0.881,6369,0.922,6370,0.922,6371,0.976,6372,0.976,6373,2.769,6374,1.059,6375,1.059,6376,1.059,6377,1.973,6378,0.976,6379,3.469,6380,0.976,6381,0.976,6382,3.469,6383,0.976,6384,0.976,6385,1.059,6386,1.059,6387,0.976,6388,0.976,6389,0.976,6390,0.976,6391,1.059,6392,0.976,6393,1.059,6394,0.976]],["component/44",[5,0.286]],["keyword/44",[]],["title/45-1",[2204,55.777]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["keyword/45-1",[]],["title/45-2",[5,16.445,346,23.178,1500,22.678,2875,29.09,3599,40.404]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["keyword/45-2",[]],["title/45-3",[138,14.224,346,28.994,588,36.39]],["name/45-3",[]],["text/45-3",[]],["component/45-3",[]],["keyword/45-3",[]],["title/45-4",[316,36.39,574,31.739,1142,39.811]],["name/45-4",[]],["text/45-4",[]],["component/45-4",[]],["keyword/45-4",[]],["title/45-5",[138,14.224,738,36.07,1500,28.368]],["name/45-5",[]],["text/45-5",[]],["component/45-5",[]],["keyword/45-5",[]],["title/45-6",[138,12.639,315,16.52,316,32.333,1500,25.206]],["name/45-6",[]],["text/45-6",[]],["component/45-6",[]],["keyword/45-6",[]],["title/45-7",[315,23.167,576,24.064,1500,25.206]],["name/45-7",[]],["text/45-7",[]],["component/45-7",[]],["keyword/45-7",[]],["title/45-8",[138,16.265,2853,57.795]],["name/45-8",[]],["text/45-8",[]],["component/45-8",[]],["keyword/45-8",[]],["title/45-9",[138,14.224,189,28.834,190,37.412]],["name/45-9",[]],["text/45-9",[]],["component/45-9",[]],["keyword/45-9",[]],["title/45-10",[396,56.452,2871,47.775]],["name/45-10",[]],["text/45-10",[]],["component/45-10",[]],["keyword/45-10",[]],["title/45-11",[849,46.597,851,41.245]],["name/45-11",[]],["text/45-11",[]],["component/45-11",[]],["keyword/45-11",[]],["title/45-12",[138,14.224,1476,30.187,1477,30.369]],["name/45-12",[]],["text/45-12",[]],["component/45-12",[]],["keyword/45-12",[]],["title/45-13",[46,31.95,138,14.224,193,25.352]],["name/45-13",[]],["text/45-13",[]],["component/45-13",[]],["keyword/45-13",[]],["title/45-14",[389,36.07,415,46.473,510,36.07]],["name/45-14",[]],["text/45-14",[]],["component/45-14",[]],["keyword/45-14",[]],["title/45-15",[138,16.265,262,46.597]],["name/45-15",[]],["text/45-15",[]],["component/45-15",[]],["keyword/45-15",[]],["title/45",[29,15.32,138,9.471,139,17.769,346,19.305,604,34.533,1500,18.889,1502,29.432]],["name/45",[228,0.755]],["text/45",[0,2.836,1,2.659,3,0.731,4,0.362,5,2.072,6,0.672,7,0.362,8,0.252,9,1.386,10,2.219,14,0.76,19,0.354,23,1.406,26,1.026,31,1.931,44,0.393,46,3.369,52,2.126,63,1.09,79,0.823,137,0.393,138,2.653,139,3.31,142,1.927,144,1.571,146,0.381,147,1.127,151,1.727,152,0.326,157,0.902,158,0.323,159,1.082,161,2.049,169,0.263,182,1.227,186,1.316,188,3.508,189,1.851,190,1.853,193,3.443,198,1.833,203,0.387,204,0.35,205,0.439,206,1.894,207,2.711,210,1.652,213,1.944,214,0.323,216,1.121,217,1.909,218,0.703,220,0.366,221,2.566,223,3.083,224,0.753,225,1.73,226,3.577,231,0.914,232,5.231,233,1.324,239,0.366,240,1.05,241,0.376,243,3.613,244,0.366,245,1.972,246,3.525,247,3.395,248,0.576,249,0.354,250,2.905,255,0.65,256,2.348,258,1.343,259,1.494,260,0.807,261,0.871,262,5.339,263,1.604,264,1.628,267,0.381,272,1.851,277,0.703,278,1.001,279,5.004,281,0.792,282,0.358,283,0.354,284,4.003,285,0.381,286,4.723,290,0.342,291,1.283,296,0.346,297,0.712,299,0.657,303,2.958,306,2.155,308,0.399,311,1.886,315,3.153,316,5.414,323,0.638,325,0.753,327,2.283,330,1.756,334,0.362,338,4.548,341,0.358,342,0.387,344,2.029,346,3.406,350,1.136,351,0.62,353,0.604,354,0.56,355,0.406,356,0.703,357,4.665,360,1.423,362,2.919,363,1.254,364,2.089,369,1.604,370,1.791,371,3.371,375,1.202,376,0.857,377,0.731,378,0.957,382,0.35,386,0.731,388,3.056,389,2.316,390,3.101,392,2.76,394,0.967,395,0.354,396,2.169,398,1.802,399,0.841,400,2.42,402,3.171,405,2.189,409,0.449,411,2.963,412,0.332,415,0.413,416,2.351,417,1.958,418,3.594,420,0.91,421,0.609,422,0.686,432,1.802,433,0.664,434,0.461,435,0.857,441,0.376,442,0.387,445,1.802,450,0.439,459,1.545,463,0.928,465,1.09,466,0.346,467,0.638,468,0.703,471,0.461,475,0.532,476,0.818,477,0.381,478,2.614,479,0.807,480,0.449,482,1.334,483,3.872,484,0.731,485,0.399,487,0.326,488,0.644,490,2.11,491,0.712,493,3.054,494,0.694,497,0.712,498,2.147,502,1.42,506,2.068,508,1.836,509,0.753,510,3.345,511,0.884,513,0.626,521,1.704,523,1.886,526,2.401,527,2.384,531,0.323,532,0.449,533,0.778,536,0.841,537,0.721,539,1.95,540,3.155,541,0.358,545,1.727,546,2.43,548,2.28,551,1.127,552,0.399,553,3.049,554,2.888,557,0.339,567,1.117,570,1.212,574,4.477,576,3.228,577,0.721,578,0.399,581,0.937,584,0.339,587,0.336,588,4.398,589,3.435,593,0.339,594,1.069,596,1.992,599,0.731,602,0.284,679,1.274,707,2.491,712,2.08,722,0.62,725,1.157,731,0.239,732,0.98,733,2.275,734,0.957,735,0.937,738,1.136,744,0.362,747,1.316,748,0.712,756,0.664,768,1.227,776,1.311,780,0.421,788,0.358,790,0.413,802,0.318,803,0.413,807,0.342,808,2.756,809,0.532,811,3.401,817,0.49,823,0.362,825,2.042,830,0.393,832,2.069,834,3.018,836,1.86,837,1.492,843,1.026,849,5.825,850,1.546,851,3.445,856,2.126,857,0.474,860,3.037,868,1.316,881,1.103,890,0.354,891,0.703,908,1.929,909,0.532,918,1.073,932,0.366,953,0.509,962,0.429,964,0.387,965,1.227,975,0.421,981,0.678,988,0.439,995,0.421,996,1.186,1001,0.694,1015,1.813,1024,1.599,1025,0.393,1026,1.604,1038,0.439,1043,0.841,1062,0.742,1075,0.406,1079,0.474,1093,2.511,1094,1.054,1113,1.714,1125,1.086,1140,1.214,1142,0.678,1148,1.179,1196,0.474,1227,0.509,1228,0.792,1229,1.264,1238,0.694,1250,1.186,1264,0.884,1266,0.765,1294,1.141,1330,0.778,1332,0.792,1337,0.366,1388,0.461,1398,1.241,1446,0.461,1476,3.744,1477,3.72,1482,2.511,1484,2.224,1487,3.23,1489,1.592,1491,1.694,1492,1.227,1493,0.894,1497,2.771,1499,0.35,1500,2.857,1501,0.664,1502,4.34,1503,0.765,1504,0.778,1505,0.421,1510,0.461,1515,0.371,1517,0.381,1519,0.387,1522,0.657,1528,0.31,1531,0.307,1532,0.894,1533,0.449,1535,0.371,1536,0.381,1538,0.76,1540,1.652,1542,1.406,1543,0.664,1544,1.369,1545,1.733,1546,1.974,1554,0.449,1558,0.35,1562,0.937,1563,0.461,1564,0.413,1566,1.764,1572,2.352,1575,2.316,1578,1.013,1583,0.765,1585,0.362,1586,1.147,1588,1.214,1589,0.792,1590,2.41,1591,0.342,1595,1.469,1606,0.358,1608,1.214,1609,0.626,1614,1.179,1615,1.099,1620,1.687,1622,0.638,1630,0.387,1631,1.415,1635,2.018,1639,1.352,1644,0.742,1654,1.163,1656,1.545,1658,0.686,1661,0.957,1663,0.94,1667,0.474,1672,0.421,1673,0.346,1674,1.04,1676,0.329,1679,0.35,1690,1.909,1691,0.947,1694,1.73,1696,0.49,1697,0.371,1701,1.086,1702,2.179,1706,1.334,1715,2.275,1724,0.346,1726,0.358,1728,0.406,1731,0.413,1732,0.421,1734,0.413,1735,2.501,1736,0.871,1739,1.791,1741,0.35,1745,0.957,1747,0.421,1748,2.703,1749,2.767,1754,1.284,1757,0.644,1758,1.013,1762,0.413,1785,0.376,1807,1.835,1808,0.841,1809,3.373,1812,3.485,1815,0.358,1820,1.04,1822,0.957,1825,0.406,1835,1.086,1837,1.791,1838,0.393,1841,0.371,1842,0.49,1843,3.153,1844,1.797,1845,2.081,1850,0.461,1852,1.406,1854,1.974,1855,0.376,1862,1.214,1867,0.721,1871,0.399,1873,0.474,1878,1.836,1883,0.358,1885,0.342,1902,0.358,1904,2.584,1905,1.021,1906,1.791,1913,0.461,1914,0.449,1915,0.474,1916,0.474,1917,0.406,1927,0.449,1937,1.73,1938,1.749,1939,4.48,1942,0.742,1944,1.711,1947,2.715,1948,2.092,1951,1.013,1952,3.286,1957,4.353,1958,0.35,1964,0.841,1968,0.807,1970,1.439,1976,2.042,1977,3.492,1989,0.429,1995,1.733,1996,1.756,1999,0.449,2000,1.463,2001,0.413,2003,0.742,2006,0.474,2011,0.49,2013,0.393,2020,0.362,2023,0.49,2026,0.474,2028,0.694,2034,0.358,2038,0.664,2043,0.406,2044,0.439,2045,0.329,2049,0.532,2052,0.381,2053,0.449,2060,1.813,2061,1.054,2062,1.274,2068,0.421,2071,0.439,2073,0.564,2083,1.797,2091,0.564,2107,0.449,2108,0.449,2109,0.884,2118,0.371,2120,0.671,2123,1.733,2124,1.372,2127,0.366,2130,0.731,2131,0.399,2134,0.421,2136,0.461,2146,0.792,2147,2.643,2148,1.994,2153,0.449,2154,4.652,2163,0.393,2183,0.387,2188,2.089,2189,0.393,2207,0.461,2208,0.474,2215,0.399,2240,1.909,2244,0.792,2270,0.861,2292,2.318,2295,0.387,2304,0.807,2308,0.413,2309,0.399,2326,0.861,2327,0.884,2328,0.449,2331,0.94,2343,0.534,2348,1.439,2349,0.94,2354,0.413,2358,1.415,2371,1.186,2372,0.742,2374,0.461,2376,0.474,2380,0.439,2381,0.429,2384,0.439,2390,1.086,2396,1.141,2405,1.607,2412,0.841,2415,0.509,2418,0.381,2421,0.49,2423,1.334,2428,0.439,2430,1.334,2441,0.406,2444,0.371,2448,0.778,2450,0.461,2451,0.532,2454,1.415,2456,0.399,2488,0.362,2490,1.678,2492,0.49,2498,2.345,2507,0.439,2526,0.823,2530,1.081,2534,1.415,2539,0.461,2543,0.532,2547,2.204,2549,0.509,2560,0.564,2566,0.421,2570,1.103,2583,1.86,2586,0.841,2588,1.406,2592,0.742,2601,0.532,2602,0.474,2604,1.04,2605,0.399,2614,1.704,2630,0.823,2633,0.532,2646,0.792,2656,2.252,2670,1.163,2674,2.081,2675,2.081,2689,1.141,2693,0.439,2700,0.461,2726,0.381,2727,0.861,2729,1.241,2740,0.564,2743,3.102,2744,3.114,2759,0.532,2761,0.393,2762,1.163,2764,1.994,2771,0.461,2799,2.156,2802,0.474,2804,0.49,2813,0.532,2816,1.528,2818,0.976,2819,1.492,2820,0.399,2824,0.474,2825,0.461,2828,0.461,2832,0.532,2841,2.835,2845,1.311,2853,3.669,2859,0.509,2861,0.399,2870,0.393,2871,4.499,2875,1.147,2876,0.823,2879,0.841,2889,1.797,2895,0.393,2898,0.509,2905,0.49,2906,0.509,2911,0.49,2913,0.439,2938,0.439,2956,0.861,2966,0.564,2976,0.532,2998,1.406,3020,0.461,3033,1.833,3044,0.532,3062,0.49,3078,0.884,3082,3.245,3100,0.509,3103,0.474,3219,1.054,3399,0.509,3408,1.311,3416,0.861,3461,0.449,3477,0.474,3493,1.471,3496,0.976,3497,0.532,3525,0.823,3527,0.884,3528,1.212,3602,3.183,3603,0.509,3615,2.771,3623,1.528,3686,0.461,3699,1.021,3710,0.532,3724,2.345,3754,4.391,3755,3.014,3756,1.406,3757,3.17,3759,2.944,3766,0.421,3827,0.461,3832,0.376,3875,0.91,3890,0.884,3895,0.91,3901,0.449,3908,0.564,4046,0.461,4051,0.449,4052,0.884,4081,0.49,4114,1.021,4126,0.449,4158,0.94,4174,0.532,4177,0.564,4211,0.439,4239,0.532,4246,0.449,4248,0.49,4258,0.532,4260,0.509,4311,0.564,4320,0.461,4336,0.474,4356,1.021,4412,0.509,4414,0.49,4430,0.461,4441,0.371,4445,0.823,4448,0.509,4465,1.086,4480,0.474,4538,0.406,4539,0.474,4542,0.841,4545,0.461,4547,1.874,4548,0.406,4551,1.968,4552,0.884,4559,0.449,4568,0.509,4613,0.532,4624,0.474,4627,0.406,4709,0.792,4715,0.884,4716,0.861,4719,0.564,4721,2.5,4724,0.474,4726,0.461,4727,1.212,4733,1.274,4734,0.884,4754,0.461,4757,0.449,4771,0.564,4774,0.474,4785,0.474,4816,0.406,4819,0.532,4864,1.241,4865,0.564,4867,0.509,4870,1.081,4901,0.564,4921,0.474,4927,0.532,4937,0.509,4938,0.532,4939,0.532,4940,0.564,4941,0.532,4942,0.532,4961,0.49,4962,5.84,4972,0.532,4992,2.568,4994,0.564,4997,0.532,5004,0.91,5022,0.449,5023,1.081,5030,0.461,5038,0.509,5042,0.509,5043,0.509,5044,0.461,5045,0.532,5046,1.021,5048,0.532,5050,0.532,5052,0.532,5090,0.532,5190,0.564,5191,0.564,5195,3.33,5198,0.49,5222,0.439,5241,0.399,5260,0.474,5261,0.49,5300,0.509,5304,1.241,5306,0.532,5309,0.532,5346,0.532,5348,0.564,5370,0.564,5423,0.532,5426,0.564,5441,4.105,5452,0.94,5453,1.021,5456,0.509,5459,0.564,5461,1.021,5462,0.94,5498,0.564,5543,0.532,5623,0.509,5627,0.94,5662,1.804,5665,1.558,5706,0.564,5728,1.021,5729,0.532,5788,0.564,5791,0.564,5841,0.532,5963,0.564,5989,0.532,6199,0.564,6210,1.471,6211,1.021,6212,1.887,6213,1.021,6216,1.311,6217,1.354,6218,1.311,6222,1.354,6223,0.91,6224,2.408,6225,1.021,6395,0.612,6396,0.612,6397,0.612,6398,1.081,6399,0.612,6400,0.532,6401,0.564,6402,0.612,6403,0.564,6404,0.564,6405,0.564,6406,0.564,6407,0.564,6408,0.564,6409,0.564,6410,0.564,6411,0.612,6412,0.564,6413,0.612,6414,0.612,6415,0.612,6416,0.612,6417,0.612,6418,0.564,6419,0.612,6420,1.173,6421,0.612,6422,0.612,6423,0.612,6424,0.612,6425,0.612,6426,0.612,6427,0.612,6428,0.612,6429,0.612,6430,0.612,6431,0.564,6432,1.081,6433,0.612,6434,0.532,6435,0.564,6436,0.612,6437,0.564,6438,0.612,6439,0.612,6440,0.612,6441,0.564,6442,0.474,6443,1.173,6444,0.612,6445,0.612,6446,1.081,6447,0.612,6448,0.612,6449,0.564,6450,0.612,6451,0.612,6452,0.612,6453,0.612,6454,0.612,6455,0.612,6456,0.564,6457,0.612,6458,0.612,6459,0.612,6460,0.564,6461,0.612,6462,0.612,6463,0.564,6464,0.564,6465,1.173,6466,0.612,6467,0.612,6468,0.612,6469,0.612,6470,0.612,6471,3.784,6472,0.976,6473,0.612,6474,0.612,6475,0.612,6476,2.632,6477,0.532,6478,0.612,6479,0.509,6480,0.612,6481,0.612,6482,0.532,6483,0.532,6484,0.532,6485,0.532,6486,0.564,6487,1.081,6488,0.564,6489,1.558,6490,1.887,6491,1.558,6492,0.564,6493,0.564,6494,0.532,6495,0.564,6496,0.564]],["component/45",[5,0.286]],["keyword/45",[]],["title/46-1",[1504,40.571,1505,42.074,2875,32.333,3599,44.908]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["keyword/46-1",[]],["title/46-2",[138,11.371,139,21.334,574,25.372,1504,36.501,1505,37.854]],["name/46-2",[]],["text/46-2",[]],["component/46-2",[]],["keyword/46-2",[]],["title/46",[29,14.138,138,8.741,139,16.399,346,17.817,713,25.35,1500,17.432,1504,28.058,1505,29.098]],["name/46",[1504,0.939]],["text/46",[0,2.676,1,2.636,5,2.73,6,3.63,8,2.761,9,3.069,29,3.474,63,3.368,138,1.888,139,3.542,142,3.982,156,5.048,161,2.031,186,4.067,193,2.468,204,5.225,213,3.174,214,3.542,226,2.921,228,3.574,239,4.015,246,2.921,248,3.291,255,3.714,278,5.408,279,4.08,286,2.732,315,3.392,327,4.421,335,3.875,346,3.848,351,3.542,362,4.055,365,4.121,369,3.152,370,3.966,390,4.746,478,6.187,487,4.873,493,3.714,497,7.091,498,4.158,526,3.219,527,3.196,539,3.832,542,4.015,543,5.367,554,3.131,574,5.147,597,3.542,713,4.015,860,5.495,868,4.067,899,4.92,918,3.316,967,3.395,970,4.609,1026,3.152,1075,4.444,1125,4.302,1133,6.707,1238,3.966,1500,4.284,1502,7.169,1503,6.781,1504,7.997,1505,8.293,1507,3.641,1542,3.607,1544,3.511,1551,4.067,1572,3.342,1586,3.542,1609,3.574,1615,4.629,1690,5.267,1852,3.607,1868,3.574,1873,5.195,1977,6.081,2066,4.371,2131,4.371,2161,4.609,2330,4.523,2396,6.167,2418,4.178,2444,4.067,2551,4.302,2727,4.92,2809,4.371,3464,5.195,4441,4.067,4467,7.083,4818,4.702,4921,7.083,5241,4.371,6398,8.421,6401,8.421,6497,5.573,6498,6.701,6499,6.177,6500,6.701,6501,6.701]],["component/46",[5,0.286]],["keyword/46",[]],["title/47-1",[142,34.313,315,21.261]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["keyword/47-1",[]],["title/47-2",[138,14.224,738,36.07,1500,28.368]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["keyword/47-2",[]],["title/47-3",[138,12.639,315,16.52,316,32.333,1500,25.206]],["name/47-3",[]],["text/47-3",[]],["component/47-3",[]],["keyword/47-3",[]],["title/47-4",[315,23.167,576,24.064,1500,25.206]],["name/47-4",[]],["text/47-4",[]],["component/47-4",[]],["keyword/47-4",[]],["title/47-5",[138,14.224,1476,30.187,1477,30.369]],["name/47-5",[]],["text/47-5",[]],["component/47-5",[]],["keyword/47-5",[]],["title/47-6",[138,16.265,262,46.597]],["name/47-6",[]],["text/47-6",[]],["component/47-6",[]],["keyword/47-6",[]],["title/47",[29,15.32,138,9.471,139,17.769,346,19.305,604,34.533,1500,18.889,1503,29.9]],["name/47",[1507,0.769]],["text/47",[0,1.063,1,1.047,5,1.74,6,1.784,8,1.097,9,1.219,21,1.49,44,1.709,63,2.257,79,1.868,138,2.472,139,2.258,144,3.025,146,1.659,151,1.348,161,1.765,188,2.703,193,2.519,203,1.683,204,1.522,206,1.338,210,1.683,213,1.261,216,1.765,218,1.595,221,4.137,223,1.327,224,1.709,228,2.395,246,1.16,247,2.057,250,1.211,256,2.568,262,6.35,263,3.594,264,2.417,273,2.54,278,4.049,279,4.307,284,1.181,286,5.459,291,1.307,299,1.49,303,4.624,315,2.897,316,4.38,327,2.818,330,2.313,338,4.234,346,2.453,351,1.407,356,1.595,357,3.49,362,3.677,369,2.74,370,4.522,371,6.156,388,1.203,389,1.394,390,4.304,394,3.912,402,1.188,405,1.709,407,1.637,411,2.084,416,1.252,417,3.263,418,2.929,438,2.514,440,1.49,465,1.338,466,1.506,487,3.106,488,1.46,490,1.49,493,4.592,494,1.575,498,1.211,509,2.883,510,2.353,531,1.407,540,4.013,545,1.348,546,3.447,551,2.332,552,1.736,554,3.57,574,3.522,576,3.26,580,1.765,588,3.079,707,3.455,725,1.42,732,1.684,733,2.488,738,2.353,744,2.658,748,2.725,756,1.506,768,2.54,808,1.659,811,3.447,836,1.637,843,2.725,849,1.575,856,1.659,860,2.373,918,1.317,932,1.595,967,5.705,975,1.831,988,1.909,995,1.831,1001,2.658,1015,1.595,1093,5.491,1140,3.83,1142,2.597,1228,3.031,1254,1.683,1476,2.554,1477,1.981,1484,1.736,1487,2.86,1500,4.109,1502,5.32,1503,7.676,1515,1.615,1519,4.326,1521,1.475,1528,1.348,1532,1.407,1552,2.883,1566,5.157,1586,1.407,1590,1.359,1591,1.49,1615,1.348,1630,1.683,1639,2.8,1670,2.132,1676,1.433,1690,1.348,1694,2.568,1702,4.418,1715,1.475,1754,1.575,1758,1.595,1762,1.797,1785,1.637,1807,3.135,1809,3.031,1812,6.91,1822,2.54,1837,1.575,1845,3.089,1852,1.433,1854,2.353,1862,1.49,1871,1.736,1877,1.868,1885,1.49,1904,4.897,1913,2.005,1914,1.954,1915,2.063,1916,2.063,1917,1.765,1918,2.132,1919,3.151,1927,1.954,1939,6.335,1947,1.446,1948,5.478,1951,2.691,1952,3.331,1957,4.113,1976,5.157,1977,4.001,1996,3,2000,1.49,2025,1.615,2027,1.736,2050,1.765,2061,1.659,2083,1.831,2118,1.615,2146,1.797,2154,4.747,2412,3.22,2488,1.575,2533,1.736,2547,2.627,2586,1.909,2626,1.831,2646,4.618,2656,1.46,2743,1.868,2761,1.709,2799,4.326,2859,2.213,2876,1.868,3623,3.407,3685,2.132,3754,1.831,3757,3.22,3832,1.637,3895,2.063,4034,2.005,4211,1.909,4356,3.907,4465,1.709,4539,2.063,4547,4.905,4551,5.153,4552,3.383,4709,3.031,4715,3.383,4716,3.297,4721,1.765,4733,3.383,4734,2.005,4871,4.665,4961,2.132,4962,8.949,4992,5.153,4997,2.316,5000,2.453,5030,3.383,5032,3.596,5044,2.005,5045,2.316,5046,3.907,5048,2.316,5050,2.316,5052,2.316,5195,6.242,6216,2.063,6217,2.132,6218,2.063,6222,2.132,6223,3.481,6225,2.316,6236,5.689,6237,5.689,6238,5.689,6240,3.734,6241,3.734,6242,3.734,6434,2.316,6471,5.369,6472,2.213,6476,5.068,6477,2.316,6482,2.316,6483,2.316,6484,2.316,6485,2.316,6486,2.453,6487,4.139,6488,2.453,6489,6.305,6490,5.952,6491,4.139,6492,2.453,6493,2.453,6494,2.316,6495,2.453,6496,2.453,6502,2.316,6503,2.662,6504,4.491,6505,2.453,6506,2.662]],["component/47",[5,0.286]],["keyword/47",[]],["title/48-1",[193,22.525,334,36.207,1770,33.564,2875,32.333]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["keyword/48-1",[]],["title/48-2",[193,25.352,2875,36.39,4426,51.864]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["keyword/48-2",[]],["title/48-3",[1229,38.093,5545,57.795]],["name/48-3",[]],["text/48-3",[]],["component/48-3",[]],["keyword/48-3",[]],["title/48-4",[46,31.95,802,35.759,1885,38.544]],["name/48-4",[]],["text/48-4",[]],["component/48-4",[]],["keyword/48-4",[]],["title/48-5",[193,25.352,2875,36.39,4434,46.473]],["name/48-5",[]],["text/48-5",[]],["component/48-5",[]],["keyword/48-5",[]],["title/48-6",[303,28.677,1476,30.187,4434,46.473]],["name/48-6",[]],["text/48-6",[]],["component/48-6",[]],["keyword/48-6",[]],["title/48-7",[233,39.884,4434,53.141]],["name/48-7",[]],["text/48-7",[]],["component/48-7",[]],["keyword/48-7",[]],["title/48-8",[2940,49.791,4434,53.141]],["name/48-8",[]],["text/48-8",[]],["component/48-8",[]],["keyword/48-8",[]],["title/48-9",[231,25.762,1229,29.599,1582,42.074,2893,43.865]],["name/48-9",[]],["text/48-9",[]],["component/48-9",[]],["keyword/48-9",[]],["title/48-10",[315,16.52,435,30.991,1528,30.991,1715,33.899]],["name/48-10",[]],["text/48-10",[]],["component/48-10",[]],["keyword/48-10",[]],["title/48",[29,16.716,193,18.419,334,29.606,513,26.678,713,29.971,2875,26.438]],["name/48",[334,0.838]],["text/48",[0,1.876,1,2.221,2,2.342,5,1.809,6,2.244,8,0.444,9,0.493,20,4.692,21,1.121,29,0.36,31,3.183,46,5.252,52,4.413,79,0.755,138,2.453,139,3.142,142,0.873,144,1.04,149,0.554,151,0.545,152,0.574,157,0.574,161,2.638,188,1.303,189,0.839,193,4.463,204,0.616,210,0.681,213,1.33,218,1.2,220,0.645,221,3.619,224,0.691,225,5.816,226,1.224,231,4.788,232,3.076,233,3.256,234,1.436,235,0.622,246,1.532,247,0.917,248,2.033,249,2.032,250,0.911,259,2.686,263,4.176,264,0.579,265,0.662,273,1.133,276,0.895,279,2.097,283,1.158,284,2.506,286,1.145,290,0.603,291,3.476,294,1.91,296,1.133,297,0.653,299,0.603,303,2.164,306,0.525,311,1.248,315,3.295,326,3.708,329,0.63,330,2.132,334,3.804,338,1.948,340,7.365,343,0.681,344,0.579,346,1.48,349,0.755,350,3.172,353,1.446,357,2.55,360,1.321,362,2.852,369,0.942,376,2.38,388,2.906,389,0.564,390,1.458,391,0.63,394,2.01,395,0.622,396,0.772,402,2.097,410,4.628,411,0.5,416,1.321,417,0.955,420,2.797,421,0.559,422,1.171,429,2.061,435,5.59,437,3.296,445,1.058,446,4.694,459,4.35,465,2.081,467,0.585,468,3.628,483,3.229,487,1.498,498,2.137,510,0.564,513,3.427,516,0.572,526,0.962,527,3.64,538,0.622,540,0.49,545,3.256,551,1.458,553,2.399,554,0.503,567,0.554,571,1.145,576,4.205,584,1.11,593,0.596,597,1.058,613,0.603,707,1.27,712,1.423,713,0.645,722,1.484,725,1.498,734,1.589,744,0.637,747,5.387,748,1.704,749,2.115,756,1.589,768,0.609,783,0.671,799,0.603,802,4.924,807,0.603,832,0.653,849,0.637,851,1.049,868,1.215,870,0.811,880,0.834,901,1.604,908,0.609,918,0.533,931,2.373,965,0.609,988,0.772,1113,1.006,1133,0.79,1142,0.622,1218,1.267,1222,0.653,1228,0.727,1229,5.173,1337,0.645,1415,0.862,1476,3.816,1477,4.294,1479,0.622,1482,1.006,1491,0.603,1492,1.589,1497,1.352,1498,1.286,1499,0.616,1500,0.825,1501,2.342,1502,0.691,1503,0.702,1522,0.603,1526,0.653,1528,3.067,1531,0.541,1532,0.569,1535,0.653,1538,0.484,1543,1.589,1544,0.564,1551,3.427,1562,0.596,1569,0.755,1572,1.753,1573,3.342,1582,2.417,1585,0.637,1586,2.985,1593,0.949,1595,1.21,1608,2.318,1609,0.574,1614,2.25,1615,2.861,1620,0.991,1622,0.585,1630,1.267,1656,3.282,1661,1.133,1668,2.061,1672,0.74,1675,1.158,1676,0.579,1690,2.097,1691,1.121,1702,0.622,1714,3.119,1715,5.741,1729,0.811,1736,1.031,1742,0.681,1744,0.591,1745,0.609,1755,1.377,1756,1.377,1762,0.727,1770,2.851,1832,0.772,1841,0.653,1843,1.541,1852,1.078,1854,1.049,1855,0.662,1862,0.603,1868,1.068,1877,0.755,1885,2.318,1902,0.63,1913,0.811,1914,0.79,1915,0.834,1916,0.834,1917,0.714,1918,0.862,1919,0.755,1927,0.79,1937,0.616,1938,0.622,1944,0.609,1952,7.157,1957,7.146,1958,1.606,1970,0.714,1976,1.352,1977,2.056,1980,0.895,1990,0.63,1998,0.862,2000,0.603,2002,2.08,2013,3.016,2022,1.306,2052,0.671,2060,0.645,2083,0.74,2124,0.681,2134,0.74,2136,0.811,2149,0.79,2150,2.115,2154,7.132,2155,0.811,2156,2.014,2183,1.776,2215,0.702,2292,1.231,2295,4.064,2304,0.74,2309,0.702,2310,0.992,2329,1.405,2342,1.751,2349,0.862,2414,0.727,2424,1.436,2453,0.834,2458,1.405,2488,0.637,2503,2.115,2570,0.702,2572,2.014,2573,7.934,2574,1.509,2588,0.579,2605,0.702,2619,0.811,2625,0.772,2671,0.937,2672,1.47,2673,1.665,2678,1.509,2719,0.727,2743,0.755,2808,0.79,2849,4.971,2870,1.803,2871,0.653,2875,4.396,2879,0.772,2889,0.74,2893,3.368,2920,0.834,2936,2.373,2937,0.755,2940,0.681,2944,3.906,2951,0.895,2952,0.79,2960,0.811,2967,1.352,3037,2.335,3038,0.862,3476,0.895,3585,0.671,3623,0.63,3754,0.74,3759,0.772,3776,5.898,3832,2.546,3835,1.743,4025,0.862,4140,0.862,4156,0.772,4253,0.895,4348,0.834,4357,0.937,4358,0.895,4373,1.436,4408,0.895,4413,5.196,4414,0.862,4415,5.898,4418,0.895,4420,0.895,4421,0.895,4422,0.895,4426,0.811,4434,2.373,4440,0.895,4445,0.755,4452,0.862,4465,0.691,4482,4.064,4547,1.436,4551,1.509,4552,1.509,4592,1.665,4709,0.727,4715,0.811,4716,0.79,4721,0.714,4724,0.834,4733,0.811,4734,0.811,4744,0.811,4785,0.834,4871,0.862,4962,1.405,4986,0.895,4992,0.811,5030,0.811,5032,0.862,5133,2.52,5183,0.811,5184,0.834,5195,0.811,5201,0.834,5204,0.862,5213,0.895,5214,0.895,5222,0.772,5241,1.306,5284,0.895,5285,0.937,5286,0.937,5287,0.937,5288,0.937,5289,0.937,5290,0.937,5291,0.937,5298,0.895,5299,0.895,5301,0.895,5302,0.937,5303,0.937,5339,9.011,5340,1.665,5341,6.788,5342,9.091,5350,0.937,5351,0.937,5352,0.937,5353,0.937,5354,0.937,5355,0.895,5356,0.895,5361,5.269,5362,0.937,5363,0.937,5364,0.937,5365,0.937,5375,0.937,5376,0.937,5377,0.937,5378,0.937,5379,0.937,5380,0.937,5381,0.937,5382,0.937,5387,0.895,5388,0.937,5389,0.937,5408,0.937,5409,0.895,5410,0.895,5480,0.895,5482,0.992,5501,0.895,5511,0.862,5512,0.895,5513,0.895,5521,0.895,5522,0.937,5523,0.937,5524,0.937,5525,0.937,5532,0.937,5533,0.937,5534,0.937,5535,0.937,5545,6.517,5578,1.665,5589,0.862,5667,0.937,5668,5.344,5685,0.937,6082,0.834,6111,0.937,6195,0.992,6196,0.992,6210,0.937,6211,0.937,6212,0.937,6213,0.937,6216,0.834,6217,0.862,6218,0.834,6222,0.862,6223,0.834,6236,0.895,6237,0.895,6238,0.895,6240,0.895,6241,0.895,6242,0.895,6245,1.743,6246,1.743,6247,1.743,6248,0.992,6250,0.992,6255,0.992,6257,0.992,6259,0.992,6261,0.992,6263,0.992,6265,0.992,6267,0.992,6269,0.992,6270,0.992,6271,0.992,6272,0.992,6273,0.992,6274,0.992,6275,0.992,6276,0.992,6277,0.992,6278,0.992,6279,0.992,6298,0.992,6299,0.992,6300,0.992,6301,0.992,6302,0.992,6303,0.992,6305,0.992,6307,0.992,6309,0.992,6311,0.992,6314,0.992,6315,0.992,6318,0.992,6319,0.992,6320,0.992,6324,0.992,6507,1.076,6508,0.992,6509,1.076,6510,1.076,6511,2.003,6512,1.076,6513,1.076,6514,1.076,6515,0.937,6516,0.992,6517,0.992,6518,3.316,6519,1.076,6520,1.076,6521,2.003,6522,6.055,6523,10.448]],["component/48",[5,0.286]],["keyword/48",[]],["title/49-1",[6524,91.913]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["keyword/49-1",[]],["title/49-2",[2204,55.777]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["keyword/49-2",[]],["title/49-3",[1679,45.02,4736,68.502]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["keyword/49-3",[]],["title/49-4",[6,31.281,972,53.141]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["keyword/49-4",[]],["title/49-5",[2735,62.042]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["keyword/49-5",[]],["title/49-6",[161,23.859,4475,56.452]],["name/49-6",[]],["text/49-6",[]],["component/49-6",[]],["keyword/49-6",[]],["title/49-7",[138,12.639,1047,39.275,4483,48.99,4537,46.082]],["name/49-7",[]],["text/49-7",[]],["component/49-7",[]],["keyword/49-7",[]],["title/49-8",[138,11.371,398,29.09,2045,29.626,4482,34.808,4484,44.076]],["name/49-8",[]],["text/49-8",[]],["component/49-8",[]],["keyword/49-8",[]],["title/49-9",[138,12.639,979,42.074,4485,48.99,4486,48.99]],["name/49-9",[]],["text/49-9",[]],["component/49-9",[]],["keyword/49-9",[]],["title/49-10",[986,35.898,998,40.404,1197,32.192,6525,50.728,6526,47.889]],["name/49-10",[]],["text/49-10",[]],["component/49-10",[]],["keyword/49-10",[]],["title/49-11",[986,35.898,997,44.076,998,40.404,1197,32.192,6527,50.728]],["name/49-11",[]],["text/49-11",[]],["component/49-11",[]],["keyword/49-11",[]],["title/49-12",[138,10.334,986,32.626,987,36.721,1024,26.438,1197,29.257,6528,46.104]],["name/49-12",[]],["text/49-12",[]],["component/49-12",[]],["keyword/49-12",[]],["title/49-13",[138,9.471,910,27.133,980,35.538,1165,35.538,1197,26.813,6529,42.252,6530,32.168]],["name/49-13",[]],["text/49-13",[]],["component/49-13",[]],["keyword/49-13",[]],["title/49-14",[138,9.471,987,33.653,1024,24.229,1197,26.813,6530,32.168,6531,42.252,6532,36.712]],["name/49-14",[]],["text/49-14",[]],["component/49-14",[]],["keyword/49-14",[]],["title/49-15",[161,18.539,435,30.991,1013,42.074,2789,53.228]],["name/49-15",[]],["text/49-15",[]],["component/49-15",[]],["keyword/49-15",[]],["title/49-16",[359,37.123,986,39.901,1197,35.781,6533,56.383]],["name/49-16",[]],["text/49-16",[]],["component/49-16",[]],["keyword/49-16",[]],["title/49-17",[359,37.123,1197,35.781,5140,50.872,6530,42.927]],["name/49-17",[]],["text/49-17",[]],["component/49-17",[]],["keyword/49-17",[]],["title/49-18",[161,16.68,362,24.425,1047,35.336,1072,35.336,5140,45.769]],["name/49-18",[]],["text/49-18",[]],["component/49-18",[]],["keyword/49-18",[]],["title/49-19",[376,27.883,388,24.885,1141,33.399,1337,32.977,6534,42.667]],["name/49-19",[]],["text/49-19",[]],["component/49-19",[]],["keyword/49-19",[]],["title/49-20",[138,18.99]],["name/49-20",[]],["text/49-20",[]],["component/49-20",[]],["keyword/49-20",[]],["title/49-21",[6535,84.717]],["name/49-21",[]],["text/49-21",[]],["component/49-21",[]],["keyword/49-21",[]],["title/49-22",[6536,84.717]],["name/49-22",[]],["text/49-22",[]],["component/49-22",[]],["keyword/49-22",[]],["title/49-23",[6537,84.717]],["name/49-23",[]],["text/49-23",[]],["component/49-23",[]],["keyword/49-23",[]],["title/49-24",[6538,84.717]],["name/49-24",[]],["text/49-24",[]],["component/49-24",[]],["keyword/49-24",[]],["title/49-25",[6539,84.717]],["name/49-25",[]],["text/49-25",[]],["component/49-25",[]],["keyword/49-25",[]],["title/49-26",[6540,84.717]],["name/49-26",[]],["text/49-26",[]],["component/49-26",[]],["keyword/49-26",[]],["title/49-27",[6541,84.717]],["name/49-27",[]],["text/49-27",[]],["component/49-27",[]],["keyword/49-27",[]],["title/49-28",[6542,84.717]],["name/49-28",[]],["text/49-28",[]],["component/49-28",[]],["keyword/49-28",[]],["title/49-29",[6543,84.717]],["name/49-29",[]],["text/49-29",[]],["component/49-29",[]],["keyword/49-29",[]],["title/49-30",[6544,84.717]],["name/49-30",[]],["text/49-30",[]],["component/49-30",[]],["keyword/49-30",[]],["title/49-31",[6545,84.717]],["name/49-31",[]],["text/49-31",[]],["component/49-31",[]],["keyword/49-31",[]],["title/49-32",[4488,76.436]],["name/49-32",[]],["text/49-32",[]],["component/49-32",[]],["keyword/49-32",[]],["title/49-33",[4513,76.436]],["name/49-33",[]],["text/49-33",[]],["component/49-33",[]],["keyword/49-33",[]],["title/49-34",[4497,76.436]],["name/49-34",[]],["text/49-34",[]],["component/49-34",[]],["keyword/49-34",[]],["title/49-35",[4498,76.436]],["name/49-35",[]],["text/49-35",[]],["component/49-35",[]],["keyword/49-35",[]],["title/49-36",[4509,76.436]],["name/49-36",[]],["text/49-36",[]],["component/49-36",[]],["keyword/49-36",[]],["title/49-37",[2348,60.958]],["name/49-37",[]],["text/49-37",[]],["component/49-37",[]],["keyword/49-37",[]],["title/49-38",[4510,76.436]],["name/49-38",[]],["text/49-38",[]],["component/49-38",[]],["keyword/49-38",[]],["title/49-39",[4511,76.436]],["name/49-39",[]],["text/49-39",[]],["component/49-39",[]],["keyword/49-39",[]],["title/49-40",[4512,73.608]],["name/49-40",[]],["text/49-40",[]],["component/49-40",[]],["keyword/49-40",[]],["title/49-41",[4514,76.436]],["name/49-41",[]],["text/49-41",[]],["component/49-41",[]],["keyword/49-41",[]],["title/49-42",[4515,76.436]],["name/49-42",[]],["text/49-42",[]],["component/49-42",[]],["keyword/49-42",[]],["title/49-43",[4516,76.436]],["name/49-43",[]],["text/49-43",[]],["component/49-43",[]],["keyword/49-43",[]],["title/49-44",[4517,76.436]],["name/49-44",[]],["text/49-44",[]],["component/49-44",[]],["keyword/49-44",[]],["title/49-45",[4518,76.436]],["name/49-45",[]],["text/49-45",[]],["component/49-45",[]],["keyword/49-45",[]],["title/49-46",[4519,76.436]],["name/49-46",[]],["text/49-46",[]],["component/49-46",[]],["keyword/49-46",[]],["title/49-47",[6546,84.717]],["name/49-47",[]],["text/49-47",[]],["component/49-47",[]],["keyword/49-47",[]],["title/49-48",[6547,84.717]],["name/49-48",[]],["text/49-48",[]],["component/49-48",[]],["keyword/49-48",[]],["title/49-49",[6548,84.717]],["name/49-49",[]],["text/49-49",[]],["component/49-49",[]],["keyword/49-49",[]],["title/49-50",[6549,84.717]],["name/49-50",[]],["text/49-50",[]],["component/49-50",[]],["keyword/49-50",[]],["title/49-51",[6550,84.717]],["name/49-51",[]],["text/49-51",[]],["component/49-51",[]],["keyword/49-51",[]],["title/49-52",[6551,84.717]],["name/49-52",[]],["text/49-52",[]],["component/49-52",[]],["keyword/49-52",[]],["title/49-53",[6552,84.717]],["name/49-53",[]],["text/49-53",[]],["component/49-53",[]],["keyword/49-53",[]],["title/49-54",[6553,84.717]],["name/49-54",[]],["text/49-54",[]],["component/49-54",[]],["keyword/49-54",[]],["title/49-55",[6554,84.717]],["name/49-55",[]],["text/49-55",[]],["component/49-55",[]],["keyword/49-55",[]],["title/49-56",[6555,84.717]],["name/49-56",[]],["text/49-56",[]],["component/49-56",[]],["keyword/49-56",[]],["title/49-57",[6556,84.717]],["name/49-57",[]],["text/49-57",[]],["component/49-57",[]],["keyword/49-57",[]],["title/49-58",[6557,84.717]],["name/49-58",[]],["text/49-58",[]],["component/49-58",[]],["keyword/49-58",[]],["title/49-59",[6558,84.717]],["name/49-59",[]],["text/49-59",[]],["component/49-59",[]],["keyword/49-59",[]],["title/49-60",[6559,84.717]],["name/49-60",[]],["text/49-60",[]],["component/49-60",[]],["keyword/49-60",[]],["title/49-61",[6560,84.717]],["name/49-61",[]],["text/49-61",[]],["component/49-61",[]],["keyword/49-61",[]],["title/49-62",[6561,84.717]],["name/49-62",[]],["text/49-62",[]],["component/49-62",[]],["keyword/49-62",[]],["title/49-63",[6562,84.717]],["name/49-63",[]],["text/49-63",[]],["component/49-63",[]],["keyword/49-63",[]],["title/49-64",[6563,84.717]],["name/49-64",[]],["text/49-64",[]],["component/49-64",[]],["keyword/49-64",[]],["title/49-65",[4529,76.436]],["name/49-65",[]],["text/49-65",[]],["component/49-65",[]],["keyword/49-65",[]],["title/49-66",[4530,76.436]],["name/49-66",[]],["text/49-66",[]],["component/49-66",[]],["keyword/49-66",[]],["title/49-67",[4531,76.436]],["name/49-67",[]],["text/49-67",[]],["component/49-67",[]],["keyword/49-67",[]],["title/49-68",[4532,76.436]],["name/49-68",[]],["text/49-68",[]],["component/49-68",[]],["keyword/49-68",[]],["title/49-69",[4534,76.436]],["name/49-69",[]],["text/49-69",[]],["component/49-69",[]],["keyword/49-69",[]],["title/49-70",[435,39.884,1013,54.147]],["name/49-70",[]],["text/49-70",[]],["component/49-70",[]],["keyword/49-70",[]],["title/49-71",[231,33.154,3222,63.048]],["name/49-71",[]],["text/49-71",[]],["component/49-71",[]],["keyword/49-71",[]],["title/49-72",[250,31.329,435,34.88,1013,47.353]],["name/49-72",[]],["text/49-72",[]],["component/49-72",[]],["keyword/49-72",[]],["title/49-73",[250,17.873,263,18.476,722,20.761,986,25.62,991,32.664,1016,29.589,1017,32.664,1018,32.664,1182,34.177]],["name/49-73",[]],["text/49-73",[]],["component/49-73",[]],["keyword/49-73",[]],["title/49-74",[23,22.773,250,19.251,263,19.9,1001,25.041,1027,33.881,1029,35.183,1044,35.183,6564,38.994]],["name/49-74",[]],["text/49-74",[]],["component/49-74",[]],["keyword/49-74",[]],["title/49-75",[250,27.836,347,27.659,382,34.982,435,30.991]],["name/49-75",[]],["text/49-75",[]],["component/49-75",[]],["keyword/49-75",[]],["title/49-76",[189,28.834,284,30.554,3222,55.137]],["name/49-76",[]],["text/49-76",[]],["component/49-76",[]],["keyword/49-76",[]],["title/49-77",[376,25.341,388,22.616,1141,30.355,1337,29.971,1745,28.298,6534,38.778]],["name/49-77",[]],["text/49-77",[]],["component/49-77",[]],["keyword/49-77",[]],["title/49-78",[2565,61.032,3527,59.305]],["name/49-78",[]],["text/49-78",[]],["component/49-78",[]],["keyword/49-78",[]],["title/49-79",[4307,67.476]],["name/49-79",[]],["text/49-79",[]],["component/49-79",[]],["keyword/49-79",[]],["title/49-80",[6,27.356,138,14.224,2693,49.369]],["name/49-80",[]],["text/49-80",[]],["component/49-80",[]],["keyword/49-80",[]],["title/49-81",[802,40.89,981,45.523]],["name/49-81",[]],["text/49-81",[]],["component/49-81",[]],["keyword/49-81",[]],["title/49-82",[1528,39.884,6534,61.032]],["name/49-82",[]],["text/49-82",[]],["component/49-82",[]],["keyword/49-82",[]],["title/49-83",[138,12.639,139,23.712,346,25.762,4916,53.228]],["name/49-83",[]],["text/49-83",[]],["component/49-83",[]],["keyword/49-83",[]],["title/49-84",[2045,42.377,6565,78.726]],["name/49-84",[]],["text/49-84",[]],["component/49-84",[]],["keyword/49-84",[]],["title/49-85",[2148,46.048,4862,65.469]],["name/49-85",[]],["text/49-85",[]],["component/49-85",[]],["keyword/49-85",[]],["title/49-86",[1047,44.203,1072,44.203,6566,68.848]],["name/49-86",[]],["text/49-86",[]],["component/49-86",[]],["keyword/49-86",[]],["title/49-87",[4537,59.305,6567,78.726]],["name/49-87",[]],["text/49-87",[]],["component/49-87",[]],["keyword/49-87",[]],["title/49-88",[138,16.265,2693,56.452]],["name/49-88",[]],["text/49-88",[]],["component/49-88",[]],["keyword/49-88",[]],["title/49-89",[138,16.265,998,57.795]],["name/49-89",[]],["text/49-89",[]],["component/49-89",[]],["keyword/49-89",[]],["title/49-90",[138,16.265,6568,68.502]],["name/49-90",[]],["text/49-90",[]],["component/49-90",[]],["keyword/49-90",[]],["title/49-91",[138,14.224,1165,53.374,6532,55.137]],["name/49-91",[]],["text/49-91",[]],["component/49-91",[]],["keyword/49-91",[]],["title/49-92",[138,14.224,1047,44.203,4537,51.864]],["name/49-92",[]],["text/49-92",[]],["component/49-92",[]],["keyword/49-92",[]],["title/49-93",[4480,71.255]],["name/49-93",[]],["text/49-93",[]],["component/49-93",[]],["keyword/49-93",[]],["title/49-94",[263,28.775,286,24.94,483,32.626,979,42.074]],["name/49-94",[]],["text/49-94",[]],["component/49-94",[]],["keyword/49-94",[]],["title/49-95",[398,36.39,2045,37.06,4482,43.543]],["name/49-95",[]],["text/49-95",[]],["component/49-95",[]],["keyword/49-95",[]],["title/49-96",[1702,45.523,4477,61.032]],["name/49-96",[]],["text/49-96",[]],["component/49-96",[]],["keyword/49-96",[]],["title/49-97",[2348,60.958]],["name/49-97",[]],["text/49-97",[]],["component/49-97",[]],["keyword/49-97",[]],["title/49-98",[138,14.224,979,47.353,4486,55.137]],["name/49-98",[]],["text/49-98",[]],["component/49-98",[]],["keyword/49-98",[]],["title/49-99",[435,30.991,1012,35.373,1013,42.074,2693,43.865]],["name/49-99",[]],["text/49-99",[]],["component/49-99",[]],["keyword/49-99",[]],["title/49-100",[390,31.773,472,48.99,6569,56.383,6570,56.383]],["name/49-100",[]],["text/49-100",[]],["component/49-100",[]],["keyword/49-100",[]],["title/49-101",[362,34.938,2877,57.795]],["name/49-101",[]],["text/49-101",[]],["component/49-101",[]],["keyword/49-101",[]],["title/49-102",[435,34.88,1013,47.353,6571,63.458]],["name/49-102",[]],["text/49-102",[]],["component/49-102",[]],["keyword/49-102",[]],["title/49-103",[360,28.775,851,32.049,1063,60.198]],["name/49-103",[]],["text/49-103",[]],["component/49-103",[]],["keyword/49-103",[]],["title/49-104",[527,29.178,1026,28.775,6572,56.383,6573,56.383]],["name/49-104",[]],["text/49-104",[]],["component/49-104",[]],["keyword/49-104",[]],["title/49-105",[286,22.438,527,26.251,1014,41.46,1032,41.46,6574,47.889]],["name/49-105",[]],["text/49-105",[]],["component/49-105",[]],["keyword/49-105",[]],["title/49-106",[6,27.356,2539,51.864,2693,49.369]],["name/49-106",[]],["text/49-106",[]],["component/49-106",[]],["keyword/49-106",[]],["title/49-107",[231,33.154,3222,63.048]],["name/49-107",[]],["text/49-107",[]],["component/49-107",[]],["keyword/49-107",[]],["title/49-108",[986,39.901,1016,46.082,1017,50.872,1018,50.872]],["name/49-108",[]],["text/49-108",[]],["component/49-108",[]],["keyword/49-108",[]],["title/49-109",[1001,40.75,1027,55.137,1029,57.255]],["name/49-109",[]],["text/49-109",[]],["component/49-109",[]],["keyword/49-109",[]],["title/49-110",[347,35.596,435,39.884]],["name/49-110",[]],["text/49-110",[]],["component/49-110",[]],["keyword/49-110",[]],["title/49-111",[243,26.827,284,24.425,382,31.474,1707,33.399,2539,41.46]],["name/49-111",[]],["text/49-111",[]],["component/49-111",[]],["keyword/49-111",[]],["title/49-112",[189,25.62,382,34.982,1057,38.689,6575,53.228]],["name/49-112",[]],["text/49-112",[]],["component/49-112",[]],["keyword/49-112",[]],["title/49-113",[1057,43.543,2675,47.353,2974,55.137]],["name/49-113",[]],["text/49-113",[]],["component/49-113",[]],["keyword/49-113",[]],["title/49-114",[245,39.811,1559,42.336,4727,49.369]],["name/49-114",[]],["text/49-114",[]],["component/49-114",[]],["keyword/49-114",[]],["title/49-115",[142,26.663,244,36.654,3078,46.082,5627,48.99]],["name/49-115",[]],["text/49-115",[]],["component/49-115",[]],["keyword/49-115",[]],["title/49-116",[981,45.523,2456,51.35]],["name/49-116",[]],["text/49-116",[]],["component/49-116",[]],["keyword/49-116",[]],["title/49-117",[226,34.313,6576,63.048]],["name/49-117",[]],["text/49-117",[]],["component/49-117",[]],["keyword/49-117",[]],["title/49-118",[1173,65.469,1174,65.469]],["name/49-118",[]],["text/49-118",[]],["component/49-118",[]],["keyword/49-118",[]],["title/49-119",[1367,63.048,6577,72.562]],["name/49-119",[]],["text/49-119",[]],["component/49-119",[]],["keyword/49-119",[]],["title/49-120",[1367,63.048,1487,38.661]],["name/49-120",[]],["text/49-120",[]],["component/49-120",[]],["keyword/49-120",[]],["title/49-121",[1057,43.543,1559,42.336,6575,59.907]],["name/49-121",[]],["text/49-121",[]],["component/49-121",[]],["keyword/49-121",[]],["title/49-122",[360,32.385,1063,48.313,2101,50.543]],["name/49-122",[]],["text/49-122",[]],["component/49-122",[]],["keyword/49-122",[]],["title/49-123",[1063,55.245,2101,57.795]],["name/49-123",[]],["text/49-123",[]],["component/49-123",[]],["keyword/49-123",[]],["title/49-124",[265,42.336,1014,51.864,6574,59.907]],["name/49-124",[]],["text/49-124",[]],["component/49-124",[]],["keyword/49-124",[]],["title/49-125",[257,34.982,1014,46.082,1046,50.872,1514,47.424]],["name/49-125",[]],["text/49-125",[]],["component/49-125",[]],["keyword/49-125",[]],["title/49-126",[1045,53.374,1046,57.255,1047,44.203]],["name/49-126",[]],["text/49-126",[]],["component/49-126",[]],["keyword/49-126",[]],["title/49-127",[136,42.074,578,39.901,1057,38.689,6578,56.383]],["name/49-127",[]],["text/49-127",[]],["component/49-127",[]],["keyword/49-127",[]],["title/49-128",[2952,57.795,6579,72.562]],["name/49-128",[]],["text/49-128",[]],["component/49-128",[]],["keyword/49-128",[]],["title/49-129",[247,31.532,402,30.742,972,46.473]],["name/49-129",[]],["text/49-129",[]],["component/49-129",[]],["keyword/49-129",[]],["title/49",[29,13.126,138,8.115,161,11.904,263,18.476,435,19.899,1013,27.015,1047,25.218,1072,25.218,6580,36.203]],["name/49",[1072,0.486,1208,0.587]],["text/49",[0,1.651,1,1.626,2,1.146,3,0.327,4,1.277,5,0.865,6,1.784,7,0.209,8,0.074,9,0.162,10,1.718,14,0.159,19,0.762,20,0.11,21,0.294,23,1.018,26,0.318,27,0.139,28,0.784,29,1.924,31,1.521,32,0.294,46,1.062,47,0.149,52,0.327,63,0.429,79,0.248,119,0.149,130,0.165,134,0.436,136,1.108,137,0.227,138,2.305,139,0.984,141,6.141,142,3.666,144,0.91,145,0.907,147,2.462,149,1.178,150,0.507,151,0.888,152,2.736,154,0.821,157,1.483,158,0.617,159,0.419,161,2.521,180,0.174,183,0.443,186,0.89,188,1.002,189,1.308,191,0.337,193,0.066,196,0.483,197,0.553,199,0.566,203,0.113,204,0.102,205,0.495,206,0.264,207,2.346,208,0.126,209,0.354,210,0.332,213,1.682,214,0.697,216,1.921,217,0.266,218,0.107,220,0.107,221,1.492,223,0.176,225,0.667,226,4.389,228,4.384,231,1.854,237,0.622,241,0.425,243,2.146,244,0.79,245,0.675,246,1.052,247,1.106,248,0.497,249,0.104,250,3.547,254,0.248,255,0.647,257,0.395,258,1.576,259,1.081,261,0.601,262,0.505,263,6.351,264,1.855,265,1.327,272,3.258,273,0.101,274,0.156,278,0.691,279,4.03,280,0.332,282,0.105,283,0.104,284,2.139,286,4.396,288,0.139,289,0.254,290,0.1,291,0.647,294,0.192,296,0.483,298,0.105,299,0.294,301,0.126,302,0.121,303,1.479,306,0.922,308,0.451,315,1.607,316,0.697,318,0.691,323,0.097,326,0.53,327,0.334,329,0.105,330,0.83,333,3.612,336,0.221,341,2.016,342,0.113,344,0.628,345,0.156,346,2.312,347,1.558,351,1.531,353,0.83,354,0.407,355,0.119,357,0.359,359,1.465,360,1.945,361,0.376,362,1.751,363,0.303,364,1.048,365,0.425,366,0.235,367,0.368,369,0.824,370,0.409,371,2.738,375,0.099,376,3.076,377,0.112,378,0.483,379,0.52,382,4.642,386,0.327,388,3.222,389,0.447,390,2.332,391,1.106,392,1.5,395,0.104,396,0.128,397,0.115,398,1.209,400,0.115,402,1.762,405,0.846,406,0.811,408,0.119,409,0.132,410,0.097,411,1.344,412,0.097,416,1.136,417,2.517,418,0.117,420,0.282,421,1.254,424,0.123,433,3.502,435,5.025,438,0.387,439,0.121,440,0.478,441,0.218,444,0.132,445,1.209,457,0.123,458,0.11,459,1.595,463,1.325,465,0.347,466,0.483,467,0.55,470,0.437,472,1.728,476,0.334,478,0.383,479,0.475,483,2.484,484,0.532,487,0.096,488,0.555,493,0.099,494,0.599,495,0.143,497,1.229,498,0.733,502,0.464,503,0.243,505,1.388,509,0.115,510,0.768,513,0.189,516,0.76,522,0.121,523,0.532,526,1.553,527,2.482,529,0.123,531,0.775,532,0.385,533,0.566,534,0.804,536,0.376,538,0.104,539,1.722,540,0.388,541,0.307,542,0.107,545,1.348,546,0.505,547,0.982,548,0.153,551,0.762,553,1.297,554,0.685,556,0.126,557,2.291,560,0.156,565,0.784,567,1.112,568,0.248,570,0.128,571,0.102,572,0.165,574,2.771,576,3.579,577,0.218,578,2.872,580,0.235,581,0.383,583,0.395,584,1.123,585,0.267,586,0.143,587,1.46,589,1.004,593,0.196,595,0.239,596,0.095,597,0.451,599,0.112,602,0.612,605,0.165,613,0.294,626,0.132,634,0.165,693,0.165,707,2.513,711,0.165,712,1.582,716,0.149,719,0.165,722,1.93,724,0.135,725,0.935,731,0.205,732,0.197,733,0.291,734,1.366,735,0.099,738,1.75,744,0.78,745,0.395,747,0.318,748,0.318,750,0.71,752,0.156,756,1.829,760,1.356,768,3.33,780,0.243,783,0.327,788,0.592,790,0.121,799,0.821,800,0.135,802,0.443,803,0.239,807,0.567,816,0.612,817,0.42,823,0.209,830,0.337,831,0.274,832,0.109,836,0.11,837,0.587,842,0.165,843,0.215,847,0.348,848,0.139,849,0.31,850,0.31,851,1.86,852,0.143,857,0.274,860,0.999,864,0.149,868,0.518,870,0.267,871,2.554,872,0.294,874,0.243,883,0.71,890,0.205,891,0.414,895,0.466,899,0.26,900,0.132,904,0.52,908,0.483,910,2.606,914,0.294,915,0.308,918,0.26,929,3.333,930,0.221,931,0.576,932,0.414,936,0.308,940,0.128,943,0.139,950,0.466,960,0.123,961,2.546,962,0.126,964,0.738,965,1.505,967,2.14,970,0.475,971,0.254,972,1.714,975,0.361,979,0.696,980,2.831,981,2.112,986,2.511,987,3.766,989,0.308,990,0.149,991,1.903,995,0.475,996,0.126,997,2.131,998,5.804,1001,2.279,1002,0.456,1003,0.81,1006,0.326,1012,1.323,1013,6.991,1014,4.083,1016,3.044,1017,3.588,1018,3.037,1021,1.174,1024,4.872,1025,0.548,1026,1.136,1027,2.411,1029,1.096,1032,0.643,1033,0.483,1034,0.842,1037,0.786,1038,1.641,1039,0.483,1041,0.553,1043,1.356,1044,1.34,1045,1.137,1046,2.778,1047,2.827,1048,0.267,1049,0.165,1056,0.143,1057,4.648,1058,0.368,1059,0.536,1061,2.24,1062,0.834,1063,5.064,1064,0.165,1068,0.458,1069,0.274,1072,0.941,1075,0.235,1079,0.139,1080,0.165,1082,0.342,1084,0.42,1086,0.456,1087,0.407,1092,0.436,1093,0.881,1094,4.233,1097,0.149,1102,0.143,1103,0.495,1110,0.165,1111,0.575,1112,0.626,1113,0.429,1115,0.326,1116,0.283,1118,0.143,1124,0.165,1125,0.115,1127,0.156,1132,0.165,1133,0.26,1136,0.135,1138,0.165,1139,0.135,1140,2.156,1141,3.067,1143,0.165,1146,0.165,1147,0.165,1148,1.101,1150,0.156,1152,0.165,1153,1.758,1157,0.143,1159,0.165,1162,0.156,1165,1.774,1172,0.143,1173,1.34,1174,1.572,1175,0.165,1179,0.156,1181,0.483,1182,1.991,1183,0.165,1188,0.156,1193,0.274,1194,0.132,1197,0.404,1206,0.224,1207,0.436,1208,0.784,1213,0.274,1218,0.437,1219,1.622,1224,0.123,1226,0.553,1227,0.294,1228,0.466,1229,2.293,1233,0.274,1238,0.505,1245,0.601,1246,1.867,1248,0.536,1250,0.248,1254,0.113,1259,0.308,1263,0.308,1264,0.267,1265,0.165,1266,0.342,1267,1.015,1269,0.326,1272,0.156,1276,0.248,1278,0.156,1281,1.346,1282,0.149,1286,0.156,1289,0.553,1293,0.294,1296,0.456,1297,0.156,1301,0.149,1302,0.326,1303,0.165,1306,0.156,1311,0.156,1314,0.156,1317,0.407,1322,0.156,1323,0.165,1324,1.351,1325,0.308,1326,0.156,1330,0.348,1332,1.183,1335,0.156,1336,0.326,1337,1.666,1338,0.165,1339,0.165,1341,0.456,1342,0.165,1344,0.165,1345,0.283,1348,0.156,1349,0.165,1352,0.308,1354,0.308,1360,0.599,1365,0.156,1367,3.526,1373,0.149,1381,0.156,1384,0.156,1386,0.308,1388,0.267,1396,0.149,1397,0.165,1398,0.385,1402,0.156,1411,0.156,1415,4.226,1423,0.601,1440,0.536,1448,0.156,1458,0.209,1476,0.23,1477,0.376,1479,0.399,1482,1.085,1483,4.13,1484,0.117,1485,0.42,1487,0.86,1488,0.128,1490,0.126,1491,0.567,1492,0.2,1493,0.451,1495,0.128,1496,0.117,1498,0.337,1499,0.579,1501,1.829,1502,0.115,1503,0.117,1507,4.537,1509,0.165,1510,0.267,1512,0.354,1514,1.249,1515,0.215,1516,0.274,1517,0.727,1520,0.149,1521,0.731,1524,0.337,1526,0.419,1528,0.816,1531,0.586,1532,0.999,1536,0.221,1538,1.301,1540,0.437,1542,0.628,1543,0.2,1544,0.275,1545,0.774,1546,0.53,1547,0.78,1548,1.092,1549,0.132,1551,0.318,1557,0.121,1558,0.202,1559,0.811,1562,0.731,1565,0.109,1566,1.367,1571,0.993,1572,1.612,1573,0.505,1575,0.53,1583,0.231,1585,0.31,1586,0.999,1588,0.387,1589,0.354,1590,2.204,1591,0.294,1593,0.085,1594,0.106,1595,0.694,1596,0.156,1606,0.499,1608,0.567,1609,0.368,1610,0.79,1614,0.797,1615,0.591,1620,1.132,1621,0.132,1622,0.375,1631,0.117,1635,0.31,1639,0.914,1641,0.88,1642,0.348,1644,0.113,1646,0.348,1654,0.123,1656,3.518,1657,0.419,1658,0.771,1661,1.294,1664,0.322,1673,0.391,1674,0.622,1675,0.585,1676,2.073,1679,0.395,1685,0.149,1690,0.513,1691,0.981,1693,0.385,1694,0.395,1695,0.149,1697,0.215,1701,0.548,1702,0.399,1706,1.407,1707,1.063,1714,0.135,1715,0.383,1724,1.07,1725,0.322,1726,0.307,1728,0.458,1730,0.139,1732,0.243,1733,0.156,1735,1.366,1736,0.092,1737,0.149,1739,0.409,1741,0.754,1742,0.113,1743,0.557,1744,0.098,1745,0.829,1747,0.243,1748,0.128,1751,1.147,1757,0.64,1758,2.248,1761,0.507,1765,0.121,1768,0.318,1770,0.194,1785,0.11,1802,0.235,1806,0.548,1807,0.372,1812,0.113,1815,0.307,1821,0.126,1822,0.101,1825,0.235,1830,0.123,1835,0.941,1837,0.209,1838,0.115,1841,0.89,1843,0.194,1844,0.587,1852,0.628,1854,2.803,1856,0.26,1857,0.819,1862,0.294,1867,0.218,1868,0.368,1869,0.149,1871,0.231,1873,0.139,1874,0.106,1883,0.858,1902,0.207,1904,2.922,1927,0.26,1932,0.139,1936,0.135,1937,0.202,1939,0.943,1942,0.437,1943,0.267,1944,0.991,1947,0.464,1952,4.391,1953,0.109,1957,4.999,1958,0.667,1963,0.308,1964,0.495,1968,0.243,1969,0.135,1971,0.149,1976,0.121,1977,0.105,1989,0.126,1990,0.207,1995,0.119,1996,0.601,1997,0.128,2001,0.466,2002,0.599,2003,0.437,2004,0.165,2006,1.022,2012,0.126,2013,0.227,2021,0.294,2022,0.451,2027,0.117,2028,0.209,2029,0.274,2032,0.117,2034,0.404,2038,0.572,2043,0.458,2045,0.943,2049,0.308,2053,0.132,2054,0.128,2056,0.143,2060,1.214,2061,0.727,2067,0.314,2071,0.254,2072,1.3,2074,0.254,2079,0.243,2081,0.143,2085,0.143,2087,1.058,2089,0.112,2101,1.773,2104,0.243,2107,0.26,2109,0.395,2112,0.557,2118,1.147,2119,0.132,2123,0.119,2124,0.437,2125,0.294,2126,0.274,2127,2.421,2128,0.419,2129,0.566,2130,0.221,2131,0.66,2132,0.726,2134,0.696,2135,0.149,2137,0.123,2138,0.149,2143,0.536,2148,0.207,2154,4.858,2161,0.475,2162,0.444,2163,0.227,2167,0.326,2175,0.135,2176,0.139,2182,0.135,2183,1.683,2185,0.165,2186,0.548,2187,0.348,2188,0.731,2189,0.115,2204,0.109,2206,0.956,2207,0.267,2208,0.139,2210,0.308,2215,0.451,2216,1.371,2220,0.132,2236,0.274,2239,0.456,2240,0.294,2244,0.121,2270,0.385,2273,0.79,2290,0.143,2292,0.718,2295,0.224,2300,0.139,2304,0.907,2309,0.342,2312,1.022,2314,0.149,2315,0.149,2321,1.233,2326,0.385,2327,0.135,2328,0.507,2329,0.126,2330,0.354,2333,0.126,2338,1.076,2342,0.112,2348,1.517,2352,2.411,2354,0.239,2358,0.117,2360,0.128,2364,0.71,2372,0.224,2374,0.267,2376,2.506,2377,0.248,2378,0.156,2379,0.456,2381,0.485,2385,0.456,2396,0.466,2398,0.267,2400,0.243,2405,0.622,2413,0.601,2414,0.121,2417,0.165,2420,0.71,2423,0.218,2430,0.425,2441,0.119,2444,0.318,2447,0.156,2448,0.458,2451,0.156,2452,0.653,2454,0.117,2456,0.66,2457,0.71,2458,1.605,2459,0.231,2463,0.149,2465,0.274,2467,0.407,2469,0.303,2490,0.115,2491,0.143,2497,0.354,2499,0.128,2507,0.128,2526,0.126,2532,0.248,2533,0.342,2535,0.139,2536,0.671,2539,0.643,2544,0.283,2545,0.143,2547,0.404,2548,0.149,2549,0.149,2551,0.444,2558,0.121,2564,0.135,2565,0.274,2566,0.475,2570,0.117,2588,0.789,2589,0.274,2592,0.113,2593,0.788,2604,1.485,2614,0.231,2626,0.123,2639,0.132,2646,1.457,2647,0.132,2656,0.379,2670,0.123,2674,1.83,2675,2.071,2678,0.135,2693,1.548,2696,0.368,2698,0.294,2702,0.143,2719,0.239,2726,0.727,2727,0.132,2729,0.132,2735,0.354,2744,0.31,2745,0.248,2752,0.149,2753,0.143,2758,0.143,2761,0.115,2764,0.307,2787,0.326,2788,0.326,2789,0.456,2796,0.294,2802,0.139,2808,0.26,2809,0.86,2811,0.119,2815,0.456,2816,0.307,2824,0.274,2826,1.673,2830,0.326,2837,1.3,2839,1.276,2846,0.803,2849,2.664,2850,1.821,2855,0.139,2861,0.557,2864,0.71,2868,0.156,2869,0.149,2873,0.294,2875,1.766,2876,0.368,2877,0.132,2878,0.139,2879,0.612,2882,0.156,2895,0.115,2900,1.571,2901,0.376,2907,0.283,2909,0.451,2911,0.934,2913,0.254,2916,0.337,2917,0.128,2936,0.466,2937,0.126,2938,0.726,2939,0.123,2940,0.113,2950,0.436,2952,1.584,2953,0.536,2958,0.135,2960,0.135,2961,0.165,2967,0.239,2971,0.156,2972,0.149,2974,0.81,2990,0.436,3032,0.121,3033,0.126,3040,0.135,3048,0.626,3058,0.254,3067,0.395,3078,0.879,3083,0.139,3094,0.156,3103,0.139,3105,0.248,3109,0.117,3217,0.54,3221,0.326,3222,4.764,3289,0.294,3399,0.149,3407,0.128,3412,0.156,3413,0.407,3414,0.149,3416,0.26,3420,0.326,3440,0.165,3444,0.165,3456,0.456,3459,4.896,3464,0.139,3465,0.165,3468,0.135,3472,0.139,3477,1.673,3481,0.156,3492,0.933,3494,0.156,3498,0.156,3520,0.26,3525,0.71,3526,0.407,3527,0.52,3528,0.254,3538,0.456,3539,0.456,3547,0.456,3548,0.436,3553,0.456,3579,0.26,3581,0.308,3583,0.42,3585,0.822,3599,0.26,3600,0.165,3601,0.308,3602,0.274,3603,0.149,3620,0.156,3621,0.267,3623,1.025,3624,0.683,3628,0.139,3630,0.143,3666,3.539,3670,0.156,3679,0.149,3681,0.165,3749,0.326,3756,0.71,3769,0.97,3789,0.274,3804,0.637,3809,0.274,3810,0.165,3820,0.308,3824,0.156,3826,0.156,3827,1.819,3832,0.11,3840,0.456,3843,0.149,3851,0.165,3853,0.139,3858,0.326,3868,0.483,3871,0.143,3872,0.149,3874,0.456,3875,0.407,3876,0.139,3890,0.135,3891,0.414,3893,0.119,3899,0.436,3902,0.283,3936,0.165,3952,0.385,3960,1.276,3974,0.326,4019,0.156,4025,0.42,4026,0.683,4027,0.407,4034,0.643,4051,1.773,4052,0.135,4080,0.456,4081,0.283,4087,0.42,4088,0.143,4125,0.149,4140,0.143,4156,0.612,4158,0.283,4163,0.132,4167,0.308,4211,0.128,4215,0.149,4219,0.165,4223,0.436,4284,0.294,4291,0.156,4292,1.485,4298,0.132,4301,0.326,4303,0.135,4304,0.149,4307,0.743,4313,0.165,4316,0.165,4320,0.643,4321,0.149,4326,0.165,4348,0.139,4378,0.326,4410,0.599,4426,0.267,4429,0.637,4441,0.215,4448,0.149,4453,0.149,4456,0.156,4465,0.548,4480,2.831,4481,0.601,4482,1.196,4483,3.924,4484,1.174,4485,1.174,4486,0.283,4488,0.575,4497,0.575,4498,0.575,4507,1.526,4509,0.436,4510,0.575,4511,0.436,4512,0.683,4513,0.436,4514,0.436,4515,0.436,4516,0.436,4517,0.436,4518,0.436,4519,0.436,4529,0.842,4530,0.436,4531,0.97,4532,0.842,4534,0.842,4537,0.52,4538,4.106,4543,0.156,4544,3.514,4545,1.913,4547,0.254,4551,0.395,4552,0.267,4553,0.267,4559,0.507,4562,0.905,4563,0.81,4564,0.165,4565,0.156,4566,0.156,4567,0.575,4568,0.149,4569,3.178,4570,3.089,4571,4.136,4573,2.411,4574,0.483,4575,4.108,4576,5.123,4578,3.037,4579,0.326,4580,0.637,4581,0.156,4584,0.326,4585,0.637,4586,0.637,4587,1.147,4588,0.88,4589,0.436,4593,3.265,4596,0.135,4601,0.165,4624,0.139,4625,0.165,4627,0.235,4628,0.165,4634,0.483,4635,0.933,4636,0.326,4637,0.165,4638,0.326,4639,0.483,4640,0.165,4641,0.326,4643,3.178,4644,0.165,4645,0.165,4646,0.326,4647,0.165,4648,0.165,4649,0.165,4650,0.165,4651,0.156,4652,0.156,4653,0.165,4654,0.483,4655,0.156,4656,0.326,4657,0.165,4658,0.637,4659,0.326,4660,0.326,4661,0.165,4662,0.165,4663,0.483,4664,1.867,4669,0.156,4670,0.165,4671,0.165,4672,0.165,4673,0.165,4674,0.742,4675,0.456,4676,0.601,4677,0.326,4678,0.637,4679,0.637,4680,0.165,4681,3.516,4682,0.326,4683,0.326,4684,0.165,4685,3.597,4686,0.637,4687,0.326,4688,0.601,4689,0.165,4690,0.165,4691,0.165,4693,0.149,4694,0.165,4695,0.165,4696,0.165,4697,0.165,4698,0.165,4709,0.576,4715,0.267,4716,0.26,4717,1.147,4718,0.436,4721,0.348,4727,1.155,4733,0.267,4734,0.267,4744,0.267,4760,0.495,4764,0.294,4770,0.283,4774,0.139,4777,0.156,4778,0.156,4779,0.156,4780,0.149,4781,0.156,4782,0.156,4783,0.156,4784,0.156,4785,0.662,4786,0.156,4788,0.42,4789,0.456,4815,0.132,4816,0.119,4818,0.248,4834,0.139,4871,0.283,4872,0.156,4887,0.149,4889,0.283,4898,0.149,4916,0.156,4943,0.485,4944,0.52,4962,0.126,4973,0.165,4974,0.156,4990,0.156,4992,0.395,4998,0.165,4999,0.156,5002,4.623,5004,0.407,5009,0.149,5013,0.326,5017,0.326,5018,0.326,5019,0.165,5020,0.165,5021,0.165,5024,0.156,5025,0.165,5026,0.165,5027,0.156,5028,0.156,5029,0.165,5030,0.267,5031,0.165,5032,0.283,5035,0.483,5037,0.156,5041,0.165,5044,0.135,5057,0.149,5078,0.326,5121,0.165,5124,0.128,5140,3.361,5173,0.436,5192,0.456,5195,0.395,5198,0.143,5222,0.254,5241,0.117,5243,0.156,5254,0.165,5264,0.165,5279,0.308,5283,0.128,5335,0.601,5336,0.143,5345,0.165,5405,0.156,5417,0.156,5424,0.553,5435,0.483,5436,0.308,5449,0.165,5452,0.143,5457,0.308,5462,0.143,5480,0.294,5489,0.156,5499,0.165,5511,0.283,5512,0.294,5513,0.294,5521,0.294,5543,0.156,5546,0.139,5558,0.536,5571,0.308,5572,0.156,5578,0.294,5588,0.308,5590,0.71,5592,0.156,5606,0.165,5609,0.156,5610,0.165,5627,1.174,5629,0.88,5657,0.156,5760,0.575,5815,0.156,5816,0.149,5919,0.637,5983,0.786,6008,0.165,6021,0.326,6027,0.326,6075,0.156,6080,0.553,6082,0.139,6114,0.143,6122,0.165,6136,0.637,6181,0.165,6216,0.274,6217,0.283,6218,0.274,6222,0.42,6223,0.274,6236,0.294,6237,0.294,6238,0.294,6240,0.294,6241,0.294,6242,0.294,6243,0.156,6244,0.139,6472,0.436,6497,0.149,6508,0.326,6516,0.326,6518,1.056,6525,1.485,6526,2.718,6527,1.351,6528,2.109,6529,0.483,6530,0.248,6531,0.483,6532,1.514,6533,3.366,6534,2.334,6535,0.637,6536,0.637,6537,0.637,6538,0.637,6539,0.786,6540,0.786,6541,0.786,6542,0.786,6543,0.483,6544,1.075,6545,0.786,6546,0.483,6547,0.483,6548,0.483,6549,0.483,6550,0.933,6551,0.933,6552,0.933,6553,0.933,6554,0.786,6555,0.786,6556,0.483,6557,0.483,6558,0.483,6559,0.483,6560,0.483,6561,0.483,6562,0.637,6563,0.637,6564,1.867,6568,6.036,6569,0.165,6570,1.989,6571,0.786,6572,0.637,6573,0.786,6574,3.434,6575,2.315,6576,0.283,6577,0.483,6578,0.933,6579,0.326,6580,0.165,6581,0.179,6582,0.179,6583,8.443,6584,0.165,6585,0.179,6586,0.354,6587,0.179,6588,0.165,6589,0.179,6590,0.165,6591,0.165,6592,0.165,6593,0.165,6594,0.308,6595,0.456,6596,0.165,6597,0.354,6598,0.691,6599,0.326,6600,0.354,6601,0.179,6602,0.156,6603,1.351,6604,0.179,6605,0.179,6606,0.179,6607,0.524,6608,1.167,6609,0.179,6610,0.326,6611,0.326,6612,0.179,6613,0.179,6614,0.179,6615,0.524,6616,0.354,6617,0.179,6618,0.179,6619,0.179,6620,1.075,6621,1.743,6622,2.539,6623,2.539,6624,1.891,6625,1.891,6626,0.524,6627,0.742,6628,0.354,6629,0.354,6630,2.661,6631,0.853,6632,1.012,6633,1.012,6634,1.012,6635,1.318,6636,1.012,6637,6.652,6638,0.691,6639,0.354,6640,1.891,6641,0.354,6642,1.012,6643,0.326,6644,0.354,6645,0.354,6646,0.326,6647,0.933,6648,0.786,6649,0.179,6650,2.879,6651,0.354,6652,0.691,6653,0.691,6654,0.691,6655,0.354,6656,0.179,6657,0.179,6658,0.179,6659,0.179,6660,0.354,6661,0.354,6662,0.179,6663,0.179,6664,0.179,6665,0.179,6666,0.179,6667,0.637,6668,0.179,6669,0.637,6670,0.179,6671,0.691,6672,0.524,6673,0.179,6674,0.179,6675,0.179,6676,0.165,6677,0.354,6678,0.524,6679,0.483,6680,0.179,6681,0.179,6682,0.483,6683,0.179,6684,0.524,6685,0.179,6686,0.179,6687,0.179,6688,0.179,6689,2.661,6690,0.691,6691,0.691,6692,0.179,6693,1.012,6694,1.611,6695,0.179,6696,0.179,6697,0.179,6698,0.179,6699,1.012,6700,0.179,6701,0.179,6702,0.179,6703,0.179,6704,0.179,6705,0.179,6706,1.611,6707,0.179,6708,0.179,6709,0.179,6710,0.691,6711,0.179,6712,0.691,6713,0.179,6714,0.354,6715,0.354,6716,0.354,6717,0.354,6718,0.354,6719,0.354,6720,0.179,6721,0.179,6722,0.354,6723,0.179,6724,0.179,6725,0.483,6726,0.179,6727,0.354,6728,0.179,6729,0.853,6730,2.78,6731,3.011,6732,2.288,6733,0.179,6734,0.179,6735,0.354,6736,0.165,6737,0.165,6738,0.179,6739,0.354,6740,0.179,6741,0.524,6742,0.354,6743,0.179,6744,1.752,6745,0.354,6746,0.354,6747,0.179,6748,0.179,6749,0.179,6750,0.691,6751,0.483,6752,1.012,6753,0.524,6754,0.179,6755,0.179,6756,0.179,6757,0.179,6758,0.179,6759,0.179,6760,0.179,6761,0.179,6762,0.326,6763,0.156,6764,0.637,6765,0.354,6766,0.179,6767,0.179,6768,0.179,6769,0.691,6770,0.179,6771,0.354,6772,0.179,6773,0.354,6774,0.179,6775,0.853,6776,0.354,6777,0.354,6778,1.318,6779,0.179,6780,0.179,6781,0.179,6782,0.179,6783,0.354,6784,0.165,6785,0.354,6786,0.179,6787,0.179,6788,0.179,6789,0.179,6790,0.179,6791,0.179,6792,0.165,6793,0.179,6794,0.179,6795,0.179,6796,0.179,6797,0.179,6798,0.179,6799,0.179,6800,0.179,6801,0.179,6802,0.179,6803,0.179,6804,0.179,6805,0.179,6806,0.179,6807,0.179,6808,0.179,6809,0.179,6810,0.179,6811,0.179,6812,0.179,6813,0.179,6814,0.179,6815,0.179,6816,0.179,6817,0.524,6818,0.179,6819,0.179,6820,0.179,6821,0.165,6822,0.179,6823,0.179,6824,0.179,6825,0.179,6826,0.179,6827,0.179,6828,0.143,6829,0.179,6830,0.179,6831,0.179,6832,0.179,6833,0.179,6834,0.179,6835,0.179,6836,0.179,6837,0.179,6838,0.179,6839,0.179,6840,0.179,6841,0.179,6842,0.179,6843,0.179,6844,0.179,6845,0.179,6846,0.179,6847,0.179,6848,0.179,6849,0.179,6850,0.179,6851,0.179,6852,0.179,6853,0.179,6854,0.179,6855,0.179,6856,0.179,6857,0.179,6858,0.179,6859,0.179,6860,0.179,6861,0.179,6862,0.179,6863,0.179,6864,0.179,6865,0.354,6866,0.179,6867,0.165,6868,0.354,6869,0.165,6870,0.165,6871,0.165,6872,0.179,6873,0.179,6874,0.165,6875,0.691,6876,1.012,6877,0.179,6878,0.179,6879,0.179,6880,0.179,6881,0.179,6882,1.012,6883,0.179,6884,0.179,6885,0.524,6886,0.179,6887,0.179,6888,0.179,6889,0.179,6890,0.179,6891,0.179,6892,1.318,6893,0.179,6894,0.179,6895,0.179,6896,0.179,6897,0.179,6898,0.179,6899,0.853,6900,0.179,6901,0.179,6902,0.179,6903,0.524,6904,0.179,6905,0.354,6906,0.691,6907,1.075,6908,0.179,6909,0.179,6910,0.354,6911,0.691,6912,0.354,6913,0.179,6914,0.179,6915,0.179,6916,0.354,6917,0.179,6918,0.179,6919,0.179,6920,0.179,6921,0.179,6922,0.354,6923,0.179,6924,0.179,6925,0.179,6926,0.179,6927,0.179,6928,0.179,6929,0.179,6930,0.354,6931,0.179,6932,0.179,6933,0.179,6934,0.179,6935,0.179,6936,0.179,6937,0.179,6938,0.179,6939,0.179,6940,0.524,6941,0.524,6942,0.165,6943,0.179,6944,0.179,6945,0.179,6946,0.179,6947,0.179,6948,0.179,6949,0.179,6950,0.179,6951,0.179,6952,0.179,6953,0.179,6954,0.179,6955,0.179,6956,0.179,6957,0.179,6958,0.179,6959,0.354,6960,0.179,6961,0.179,6962,0.179,6963,0.179,6964,0.179,6965,0.179,6966,0.179,6967,0.179,6968,0.354,6969,0.179,6970,0.179,6971,0.853,6972,0.179,6973,0.179,6974,0.179,6975,0.179,6976,0.179,6977,0.524,6978,0.354,6979,0.354,6980,0.354,6981,0.179,6982,0.179,6983,0.853,6984,0.354,6985,0.179,6986,0.179,6987,0.354,6988,0.179,6989,0.179,6990,0.354,6991,0.179,6992,0.179,6993,0.179,6994,0.179,6995,0.179,6996,0.179,6997,0.179,6998,0.179,6999,0.179,7000,0.179,7001,0.179,7002,0.179,7003,0.524,7004,0.179,7005,0.354,7006,0.354,7007,0.179,7008,0.179,7009,0.179,7010,0.179,7011,0.354,7012,0.354,7013,0.179,7014,0.179,7015,0.179,7016,0.179,7017,0.179,7018,0.179,7019,0.179,7020,0.326,7021,0.179,7022,0.354,7023,0.179,7024,0.179,7025,0.156,7026,0.179,7027,0.179,7028,0.179,7029,0.179,7030,0.179,7031,0.179,7032,0.179,7033,0.179,7034,0.179,7035,0.179,7036,0.179,7037,0.179,7038,0.179,7039,0.179,7040,0.179,7041,0.179,7042,0.179,7043,0.179,7044,0.179,7045,0.179,7046,0.354,7047,0.179,7048,0.179,7049,0.179,7050,1.012,7051,0.179,7052,0.179,7053,0.179,7054,0.179,7055,0.179,7056,0.179,7057,0.179,7058,0.179,7059,0.179,7060,0.179,7061,0.179,7062,0.354,7063,0.179,7064,0.179,7065,0.179,7066,0.179,7067,0.165,7068,0.179,7069,0.179,7070,0.179,7071,0.179,7072,0.179,7073,0.179,7074,0.179,7075,0.179,7076,0.149,7077,0.179,7078,0.179,7079,0.179,7080,0.853,7081,0.179,7082,0.853,7083,0.165,7084,0.179,7085,0.179,7086,0.179,7087,0.179,7088,0.179,7089,0.179,7090,0.179,7091,0.165,7092,0.326,7093,0.326,7094,0.165,7095,0.637,7096,0.165,7097,0.165,7098,0.165,7099,0.326,7100,0.165,7101,0.165,7102,0.165,7103,0.165,7104,0.165,7105,0.165,7106,0.165,7107,0.933,7108,0.326,7109,0.326,7110,0.165,7111,0.786,7112,0.786,7113,0.933,7114,0.786,7115,0.165,7116,0.165,7117,0.326,7118,0.326,7119,0.553,7120,0.326,7121,0.637,7122,0.165,7123,0.165,7124,0.637,7125,0.165,7126,0.165,7127,0.637,7128,0.165,7129,0.165,7130,0.637,7131,0.165,7132,0.165,7133,0.165,7134,0.165,7135,0.637,7136,0.637,7137,0.637,7138,0.637,7139,0.165,7140,0.165,7141,0.179,7142,0.165,7143,0.165,7144,0.165,7145,0.165,7146,0.165,7147,0.165,7148,0.165,7149,0.165,7150,0.165,7151,0.165,7152,0.165,7153,0.165,7154,0.165,7155,0.165,7156,0.165,7157,0.165,7158,0.179,7159,0.179,7160,0.179,7161,0.165,7162,0.326,7163,0.691,7164,0.483,7165,0.483,7166,0.483,7167,0.483,7168,0.483,7169,0.483,7170,0.483,7171,0.483,7172,0.483,7173,0.483,7174,0.483,7175,0.483,7176,0.483,7177,0.483,7178,0.483,7179,0.483,7180,0.483,7181,0.483,7182,0.483,7183,0.483,7184,0.483,7185,0.483,7186,0.483,7187,0.483,7188,0.483,7189,0.483,7190,0.483,7191,0.483,7192,0.483,7193,0.483,7194,0.483,7195,0.483,7196,0.483,7197,0.483,7198,0.483,7199,0.483,7200,0.483,7201,0.483,7202,0.483,7203,0.483,7204,0.483,7205,0.483,7206,0.483,7207,0.483,7208,0.483,7209,0.483,7210,0.483,7211,0.483,7212,0.483,7213,0.483,7214,0.483,7215,0.483,7216,0.483,7217,0.483,7218,0.483,7219,0.483,7220,0.483,7221,0.483,7222,0.483,7223,0.483,7224,0.483,7225,0.483,7226,0.483,7227,0.483,7228,0.483,7229,0.483,7230,0.483,7231,0.483,7232,0.483,7233,0.483,7234,0.483,7235,0.483,7236,0.483,7237,0.483,7238,0.483,7239,0.483,7240,0.483,7241,0.483,7242,0.483,7243,0.483,7244,0.483,7245,0.483,7246,0.483,7247,0.483,7248,0.483,7249,0.483,7250,0.483,7251,0.483,7252,0.483,7253,0.483,7254,0.483,7255,0.483,7256,0.483,7257,0.483,7258,0.483,7259,0.483,7260,0.483,7261,0.483,7262,0.483,7263,0.483,7264,0.483,7265,0.483,7266,0.483,7267,0.483,7268,0.483,7269,0.483,7270,0.483,7271,0.483,7272,0.483,7273,0.483,7274,0.483,7275,0.483,7276,0.483,7277,0.483,7278,0.483,7279,0.483,7280,0.483,7281,0.483,7282,0.483,7283,0.483,7284,0.483,7285,0.483,7286,0.483,7287,0.483,7288,0.483,7289,0.483,7290,0.483,7291,0.483,7292,0.483,7293,0.483,7294,0.483,7295,0.483,7296,0.483,7297,0.483,7298,0.483,7299,0.483,7300,0.483,7301,0.483,7302,0.483,7303,0.483,7304,0.483,7305,0.483,7306,0.483,7307,0.483,7308,0.483,7309,0.483,7310,0.483,7311,0.483,7312,0.483,7313,0.483,7314,0.483,7315,0.483,7316,0.483,7317,0.483,7318,0.483,7319,0.483,7320,0.483,7321,0.483,7322,0.483,7323,0.483,7324,0.483,7325,0.483,7326,0.483,7327,0.483,7328,0.483,7329,0.483,7330,0.483,7331,0.483,7332,0.483,7333,0.483,7334,0.483,7335,0.483,7336,0.483,7337,0.483,7338,0.483,7339,0.483,7340,0.483,7341,0.483,7342,0.483,7343,0.483,7344,0.483,7345,0.483,7346,0.483,7347,0.483,7348,0.483,7349,0.483,7350,0.483,7351,0.483,7352,0.483,7353,0.483,7354,0.483,7355,0.483,7356,0.483,7357,0.483,7358,0.483,7359,0.483,7360,0.483,7361,0.483,7362,0.483,7363,0.483,7364,0.483,7365,0.483,7366,0.483,7367,0.483,7368,0.483,7369,0.483,7370,0.483,7371,0.483,7372,0.483,7373,0.483,7374,0.483,7375,0.483,7376,0.483,7377,0.483,7378,0.483,7379,0.483,7380,0.483,7381,0.483,7382,0.483,7383,0.483,7384,0.483,7385,0.483,7386,0.483,7387,0.483,7388,0.483,7389,0.483,7390,0.483,7391,0.483,7392,0.483,7393,0.483,7394,0.483,7395,0.483,7396,0.483,7397,0.483,7398,0.483,7399,0.483,7400,0.483,7401,0.483,7402,0.483,7403,0.483,7404,0.483,7405,0.483,7406,0.483,7407,0.483,7408,0.483,7409,0.326,7410,0.326,7411,0.165,7412,0.165,7413,0.165,7414,0.637,7415,0.179,7416,0.179,7417,0.165,7418,0.483,7419,0.165,7420,0.483,7421,0.143,7422,0.165,7423,0.165,7424,0.326,7425,0.326,7426,0.326,7427,0.165,7428,0.165,7429,0.326,7430,0.326,7431,0.326,7432,0.165,7433,0.165,7434,0.165,7435,1.867,7436,0.165,7437,0.165,7438,0.165,7439,0.165,7440,0.165,7441,0.165,7442,0.165,7443,0.165,7444,0.165,7445,0.165,7446,0.165,7447,0.165,7448,0.165,7449,0.165,7450,0.165,7451,0.165,7452,0.165,7453,0.165,7454,0.165,7455,0.165,7456,0.165,7457,0.165,7458,1.215,7459,1.215,7460,0.165,7461,0.165,7462,0.326,7463,0.326,7464,0.165,7465,0.165,7466,0.637,7467,1.215,7468,0.637,7469,0.637,7470,0.637,7471,1.743,7472,0.326,7473,0.326,7474,0.326,7475,1.743,7476,0.326,7477,0.326,7478,0.326,7479,1.743,7480,0.326,7481,0.326,7482,0.326,7483,1.743,7484,0.326,7485,0.326,7486,0.326,7487,0.165,7488,0.165,7489,0.165,7490,0.165,7491,0.637,7492,0.165,7493,0.165,7494,0.637,7495,0.165,7496,0.165,7497,0.637,7498,0.165,7499,0.165,7500,0.637,7501,0.179]],["component/49",[5,0.286]],["keyword/49",[]],["title/50-1",[1206,43.543,1780,49.369,1886,45.661]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["keyword/50-1",[]],["title/50-2",[1206,43.543,1886,45.661,3032,46.473]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["keyword/50-2",[]],["title/50-3",[138,14.224,1206,43.543,1886,45.661]],["name/50-3",[]],["text/50-3",[]],["component/50-3",[]],["keyword/50-3",[]],["title/50-4",[491,41.78,506,37.776,1786,46.473]],["name/50-4",[]],["text/50-4",[]],["component/50-4",[]],["keyword/50-4",[]],["title/50-5",[138,14.224,1786,46.473,2587,63.458]],["name/50-5",[]],["text/50-5",[]],["component/50-5",[]],["keyword/50-5",[]],["title/50-6",[182,34.607,491,37.123,506,33.564,3040,46.082]],["name/50-6",[]],["text/50-6",[]],["component/50-6",[]],["keyword/50-6",[]],["title/50-7",[138,16.265,1786,53.141]],["name/50-7",[]],["text/50-7",[]],["component/50-7",[]],["keyword/50-7",[]],["title/50-8",[491,41.78,506,37.776,3724,53.374]],["name/50-8",[]],["text/50-8",[]],["component/50-8",[]],["keyword/50-8",[]],["title/50-9",[491,41.78,506,37.776,2845,53.374]],["name/50-9",[]],["text/50-9",[]],["component/50-9",[]],["keyword/50-9",[]],["title/50-10",[213,32.609,315,18.593,3040,51.864]],["name/50-10",[]],["text/50-10",[]],["component/50-10",[]],["keyword/50-10",[]],["title/50-11",[233,27.883,491,33.399,506,30.198,1560,34.808,2430,33.843]],["name/50-11",[]],["text/50-11",[]],["component/50-11",[]],["keyword/50-11",[]],["title/50",[189,25.62,816,43.865,2456,39.901,3041,47.424]],["name/50",[603,0.658,3041,0.587]],["text/50",[0,0.812,1,0.8,2,1.751,3,0.887,4,0.443,5,1.064,6,1.415,8,0.308,9,1.185,10,0.956,14,1.971,20,0.875,23,1.917,24,2.09,29,0.679,31,3.262,46,0.347,138,2.509,139,1.842,142,1.349,145,0.515,146,0.466,147,0.389,149,2.786,150,1.044,152,1.651,153,1.071,154,0.419,161,3.078,169,0.613,182,3.532,186,0.454,188,0.943,189,3.42,190,1.935,193,1.615,195,0.549,196,2.257,203,2.523,206,2.005,207,3.216,211,0.549,213,2.412,214,0.395,217,0.379,218,0.448,220,1.218,221,2.548,223,1.014,225,2.282,226,2.608,228,0.759,231,1.09,232,0.443,233,1.311,239,0.448,240,0.362,245,4.241,246,3.845,247,1.631,248,1.749,249,0.433,250,3.057,257,0.813,258,2.26,259,0.813,261,0.733,262,1.532,263,5.97,264,1.917,268,0.473,273,0.423,279,5.361,282,2.334,284,0.902,286,3.065,290,1.994,291,0.699,298,1.514,300,2.073,303,3.722,306,1.945,315,3.112,316,1.636,326,1.065,329,1.189,341,0.438,342,1.637,344,0.403,346,1.09,347,1.17,350,1.622,351,0.395,353,1.594,354,2.267,355,1.348,356,1.218,357,4.277,360,2.063,361,1.458,362,0.332,363,2.536,364,3.843,369,0.956,371,1.99,375,0.415,376,2.58,377,1.267,378,1.15,382,0.428,388,1.804,390,1.608,392,0.683,393,0.466,394,0.813,396,2.22,402,2.416,403,0.537,404,0.622,405,0.48,406,0.46,411,2.777,416,1.217,417,3.498,418,1.688,420,1.094,421,2.468,428,0.438,432,0.752,435,0.721,440,0.419,445,0.395,457,0.515,458,0.875,459,2.601,466,0.423,468,0.852,470,0.9,477,1.614,478,1.127,482,0.46,483,2.339,484,0.887,485,1.326,488,1.115,489,0.622,490,1.994,491,7.204,493,1.127,494,0.443,498,2.723,502,0.407,506,6.8,510,5.651,513,0.399,522,0.505,526,0.683,527,1.903,531,1.882,533,2.362,534,1.699,539,0.428,545,1.311,546,1.203,547,1.344,548,0.616,551,0.739,553,4.871,554,1.664,567,2.786,568,0.525,574,3.381,576,3.212,580,0.496,587,0.78,596,0.395,597,1.074,602,0.347,707,2.149,708,1.139,712,1.311,722,0.395,725,1.899,732,1.161,735,0.415,738,1.356,747,0.454,768,0.805,773,0.549,777,0.69,788,0.832,800,1.071,802,4.387,803,0.505,808,0.466,811,0.443,816,4.291,832,2.661,836,3.509,837,1.398,847,2.362,849,3.542,851,1.356,860,1.074,868,1.571,881,0.928,891,0.852,918,2.17,965,1.15,967,0.379,996,0.525,1012,0.433,1024,5.131,1026,0.956,1038,1.02,1057,0.9,1061,1.856,1062,0.9,1093,0.715,1103,1.856,1113,1.022,1140,0.419,1142,0.433,1148,2.383,1168,0.69,1188,0.651,1206,6.621,1228,0.505,1229,1.498,1246,0.525,1266,0.488,1281,0.466,1337,0.852,1379,0.69,1423,0.651,1476,2.738,1477,3.393,1479,0.822,1482,2.56,1484,0.928,1487,0.367,1490,0.525,1492,0.805,1493,0.395,1497,4.215,1501,2.015,1507,1.406,1517,1.93,1521,1.434,1522,0.419,1524,0.913,1526,4.769,1532,0.752,1535,0.454,1538,2.564,1543,0.423,1551,0.454,1558,2.508,1559,0.875,1560,1.286,1565,0.863,1572,1.291,1573,2.108,1575,0.392,1582,0.978,1585,0.443,1586,0.752,1590,0.382,1591,0.419,1593,0.674,1595,0.876,1606,0.438,1608,0.796,1614,1.406,1616,0.488,1620,0.37,1622,0.773,1630,0.473,1631,0.488,1635,1.203,1642,0.496,1656,3.056,1659,0.58,1673,0.805,1674,0.875,1676,1.917,1690,0.379,1694,1.163,1697,0.454,1701,0.48,1707,3.283,1715,1.434,1725,0.875,1729,1.071,1736,0.385,1739,0.443,1741,0.428,1742,0.473,1744,2.189,1745,0.805,1751,0.454,1755,0.515,1756,0.515,1757,0.411,1780,5.391,1782,4.763,1783,2.479,1784,5.38,1785,1.592,1786,6.313,1788,1.071,1789,2.22,1790,1.95,1792,2.152,1793,1.139,1794,2.761,1806,1.305,1809,2.09,1811,0.622,1822,1.15,1825,0.496,1837,1.203,1842,0.599,1843,2.608,1844,0.515,1849,0.537,1850,0.564,1854,0.392,1862,1.733,1863,1.071,1867,0.46,1868,1.084,1871,1.326,1874,2.362,1877,0.525,1883,0.438,1885,0.419,1886,7.053,1887,3.647,1902,0.438,1919,0.525,1938,0.433,1939,0.766,1947,0.407,1951,1.855,1952,1.163,1957,3.844,1958,1.163,1970,5.851,1977,2.334,1979,2.172,1996,1.047,2000,2.234,2001,0.96,2002,1.832,2012,1.816,2027,2.323,2032,0.928,2034,0.438,2038,0.423,2050,0.496,2052,0.466,2060,2.848,2061,0.466,2066,2.602,2067,0.448,2079,0.515,2107,0.549,2120,0.428,2122,1.576,2127,0.448,2128,0.863,2135,0.622,2137,0.515,2143,1.576,2148,1.811,2154,1.917,2176,1.103,2188,1.716,2189,0.913,2206,0.928,2211,0.599,2216,0.448,2240,0.419,2273,0.448,2274,0.599,2295,0.473,2343,0.34,2358,2.323,2360,0.537,2372,0.473,2390,0.48,2396,0.505,2405,0.875,2409,0.515,2430,2.453,2441,0.496,2444,1.879,2452,0.419,2454,0.488,2456,4.232,2469,1.497,2482,0.622,2488,0.443,2491,1.139,2526,0.998,2533,0.928,2534,1.326,2547,2.083,2551,0.913,2570,0.488,2604,0.46,2605,2.019,2613,2.852,2619,0.564,2656,1.42,2674,1.398,2678,0.564,2689,1.747,2727,1.044,2735,1.372,2744,4.651,2749,2.252,2764,1.189,2785,1.238,2804,0.599,2812,0.564,2816,0.832,2831,0.564,2839,1.747,2845,4.194,2871,4.865,2876,0.525,2938,1.856,2939,2.744,2980,0.537,2990,1.183,3020,0.564,3032,1.747,3040,6.895,3041,2.007,3043,0.69,3044,1.238,3045,0.69,3046,2.386,3047,0.69,3048,0.549,3049,2.386,3050,5.207,3051,0.69,3056,1.311,3062,4.079,3066,1.874,3067,2.332,3068,0.69,3074,4.708,3075,4.432,3082,7.642,3084,5.433,3085,5.433,3092,1.139,3097,3.318,3098,2.386,3100,1.183,3101,0.69,3109,0.928,3207,0.622,3217,0.9,3219,1.93,3220,0.69,3408,7.014,3481,2.252,3496,0.622,3583,0.599,3602,1.576,3615,5.193,3678,1.628,3690,0.69,3724,4.639,3754,4.463,3755,7.001,3757,6.636,3758,3.472,3759,2.22,3760,1.238,3762,4.135,3763,0.651,3770,1.238,3775,3.318,3800,1.183,3805,5.755,3806,0.69,3826,0.651,3832,0.46,3845,0.69,3872,0.622,3874,0.651,3890,1.071,4046,1.071,4076,0.69,4083,1.427,4137,4.042,4144,0.69,4174,0.651,4214,1.238,4277,0.622,4336,0.58,4374,0.651,4413,0.549,4417,0.564,4553,0.564,4573,0.599,4575,1.139,4624,0.58,4676,4.966,4721,1.717,4724,0.58,4726,0.564,4735,0.651,4862,1.183,4875,1.691,4961,0.599,4962,1.427,4968,2.252,4969,1.238,4977,0.69,4981,0.69,4984,0.69,4985,1.311,4992,1.95,5004,4.841,5022,0.549,5063,1.183,5079,0.622,5192,0.651,5195,2.332,5222,0.537,5251,0.622,5304,1.492,5344,0.651,5452,0.599,5571,0.651,5817,1.238,6114,0.599,6243,0.651,6441,1.311,6446,2.386,6449,0.69,6497,0.622,6499,0.69,6517,0.69,6595,0.651,6792,0.69,7067,1.874,7502,0.748,7503,0.748,7504,0.748,7505,1.422,7506,1.422,7507,1.422,7508,0.748,7509,0.748,7510,7.518,7511,0.748,7512,3.096,7513,1.422,7514,1.422,7515,0.748,7516,0.748,7517,0.748,7518,0.748,7519,1.422,7520,1.422,7521,0.748,7522,2.033,7523,2.588,7524,1.422,7525,0.748,7526,0.748,7527,0.748,7528,1.422,7529,0.748,7530,2.252,7531,0.748,7532,0.69,7533,0.748,7534,0.748,7535,2.033,7536,0.748,7537,2.033,7538,1.311,7539,2.588,7540,1.311,7541,3.99,7542,3.561,7543,3.096,7544,1.422,7545,1.422,7546,1.769,7547,1.422,7548,0.748,7549,1.422,7550,1.311,7551,2.033,7552,1.422,7553,0.748,7554,2.252,7555,0.748,7556,0.748,7557,0.748,7558,1.422,7559,1.422,7560,1.422,7561,1.422,7562,3.096,7563,1.422,7564,2.033,7565,2.588,7566,3.561,7567,0.748,7568,0.748,7569,1.422,7570,0.748,7571,0.748,7572,0.748,7573,0.748,7574,4.386,7575,2.386,7576,0.69,7577,0.69,7578,0.69,7579,0.748,7580,0.748,7581,4.386,7582,0.748,7583,0.748,7584,0.748,7585,0.748,7586,0.748,7587,0.748,7588,0.748]],["component/50",[5,0.286]],["keyword/50",[]],["title/51-1",[2204,55.777]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["keyword/51-1",[]],["title/51-2",[216,40.571,221,27.315,226,26.663,4320,46.082]],["name/51-2",[]],["text/51-2",[]],["component/51-2",[]],["keyword/51-2",[]],["title/51-3",[161,18.539,516,17.476,809,53.228,2875,32.333]],["name/51-3",[]],["text/51-3",[]],["component/51-3",[]],["keyword/51-3",[]],["title/51-4",[315,21.261,516,22.49]],["name/51-4",[]],["text/51-4",[]],["component/51-4",[]],["keyword/51-4",[]],["title/51-5",[158,32.333,373,36.207,516,17.476,1868,32.626]],["name/51-5",[]],["text/51-5",[]],["component/51-5",[]],["keyword/51-5",[]],["title/51-6",[158,32.333,516,17.476,1466,44.908,1868,32.626]],["name/51-6",[]],["text/51-6",[]],["component/51-6",[]],["keyword/51-6",[]],["title/51-7",[315,16.52,516,17.476,1487,30.041,2581,44.908]],["name/51-7",[]],["text/51-7",[]],["component/51-7",[]],["keyword/51-7",[]],["title/51-8",[516,15.723,823,32.575,1281,34.312,1593,26.068,7589,50.728]],["name/51-8",[]],["text/51-8",[]],["component/51-8",[]],["keyword/51-8",[]],["title/51-9",[315,16.52,516,17.476,3891,36.654,7590,56.383]],["name/51-9",[]],["text/51-9",[]],["component/51-9",[]],["keyword/51-9",[]],["title/51-10",[183,21.974,516,18.669,2546,50.663,4083,29.688,7591,38.994,7592,38.994]],["name/51-10",[]],["text/51-10",[]],["component/51-10",[]],["keyword/51-10",[]],["title/51-11",[516,17.476,531,32.333,1487,30.041,7593,56.383]],["name/51-11",[]],["text/51-11",[]],["component/51-11",[]],["keyword/51-11",[]],["title/51-12",[315,16.52,516,17.476,1820,37.616,2580,43.865]],["name/51-12",[]],["text/51-12",[]],["component/51-12",[]],["keyword/51-12",[]],["title/51-13",[315,14.863,483,29.353,516,15.723,1820,33.843,2582,45.769]],["name/51-13",[]],["text/51-13",[]],["component/51-13",[]],["keyword/51-13",[]],["title/51-14",[4,32.575,315,14.863,516,15.723,2579,42.667,3217,34.808]],["name/51-14",[]],["text/51-14",[]],["component/51-14",[]],["keyword/51-14",[]],["title/51-15",[258,20.344,315,12.38,516,13.096,599,28.579,732,17.19,929,28.189,2577,36.712]],["name/51-15",[]],["text/51-15",[]],["component/51-15",[]],["keyword/51-15",[]],["title/51-16",[516,14.29,599,31.184,732,18.758,2578,40.058,3218,37.681,3219,31.184]],["name/51-16",[]],["text/51-16",[]],["component/51-16",[]],["keyword/51-16",[]],["title/51-17",[158,29.09,189,23.05,315,14.863,516,15.723,2576,44.076]],["name/51-17",[]],["text/51-17",[]],["component/51-17",[]],["keyword/51-17",[]],["title/51-18",[142,26.663,161,18.539,406,37.616,516,17.476]],["name/51-18",[]],["text/51-18",[]],["component/51-18",[]],["keyword/51-18",[]],["title/51-19",[142,21.802,315,13.508,516,21.193,1281,31.184,1493,26.438]],["name/51-19",[]],["text/51-19",[]],["component/51-19",[]],["keyword/51-19",[]],["title/51-20",[263,28.775,707,27.659,1493,32.333,7594,46.082]],["name/51-20",[]],["text/51-20",[]],["component/51-20",[]],["keyword/51-20",[]],["title/51-21",[263,28.775,707,27.659,1493,32.333,7594,46.082]],["name/51-21",[]],["text/51-21",[]],["component/51-21",[]],["keyword/51-21",[]],["title/51-22",[263,28.775,707,27.659,1493,32.333,7594,46.082]],["name/51-22",[]],["text/51-22",[]],["component/51-22",[]],["keyword/51-22",[]],["title/51-23",[576,24.064,1493,32.333,1593,28.974,2536,40.571]],["name/51-23",[]],["text/51-23",[]],["component/51-23",[]],["keyword/51-23",[]],["title/51-24",[183,35.759,315,18.593,1659,53.374]],["name/51-24",[]],["text/51-24",[]],["component/51-24",[]],["keyword/51-24",[]],["title/51-25",[138,14.224,516,19.668,588,36.39]],["name/51-25",[]],["text/51-25",[]],["component/51-25",[]],["keyword/51-25",[]],["title/51-26",[1072,50.545,1947,42.779]],["name/51-26",[]],["text/51-26",[]],["component/51-26",[]],["keyword/51-26",[]],["title/51-27",[516,22.49,1947,42.779]],["name/51-27",[]],["text/51-27",[]],["component/51-27",[]],["keyword/51-27",[]],["title/51-28",[183,40.89,516,22.49]],["name/51-28",[]],["text/51-28",[]],["component/51-28",[]],["keyword/51-28",[]],["title/51-29",[183,40.89,574,36.292]],["name/51-29",[]],["text/51-29",[]],["component/51-29",[]],["keyword/51-29",[]],["title/51-30",[1281,28.579,1526,27.819,1527,35.538,1770,25.152,4083,32.168,5548,36.712,7595,42.252]],["name/51-30",[]],["text/51-30",[]],["component/51-30",[]],["keyword/51-30",[]],["title/51-31",[138,12.639,139,23.712,375,33.899,7596,56.383]],["name/51-31",[]],["text/51-31",[]],["component/51-31",[]],["keyword/51-31",[]],["title/51-32",[574,36.292,2581,57.795]],["name/51-32",[]],["text/51-32",[]],["component/51-32",[]],["keyword/51-32",[]],["title/51-33",[303,28.677,1840,50.543,2581,50.543]],["name/51-33",[]],["text/51-33",[]],["component/51-33",[]],["keyword/51-33",[]],["title/51-34",[574,36.292,7597,72.562]],["name/51-34",[]],["text/51-34",[]],["component/51-34",[]],["keyword/51-34",[]],["title/51-35",[139,26.688,218,41.253,2580,49.369]],["name/51-35",[]],["text/51-35",[]],["component/51-35",[]],["keyword/51-35",[]],["title/51-36",[63,30.744,1538,27.486,4849,50.872,7598,56.383]],["name/51-36",[]],["text/51-36",[]],["component/51-36",[]],["keyword/51-36",[]],["title/51-37",[516,19.668,1476,30.187,1477,30.369]],["name/51-37",[]],["text/51-37",[]],["component/51-37",[]],["keyword/51-37",[]],["title/51-38",[138,12.639,516,17.476,574,28.2,1624,42.074]],["name/51-38",[]],["text/51-38",[]],["component/51-38",[]],["keyword/51-38",[]],["title/51-39",[258,27.148,357,25.762,516,17.476,1624,42.074]],["name/51-39",[]],["text/51-39",[]],["component/51-39",[]],["keyword/51-39",[]],["title/51-40",[516,17.476,574,28.2,1593,28.974,1624,42.074]],["name/51-40",[]],["text/51-40",[]],["component/51-40",[]],["keyword/51-40",[]],["title/51-41",[138,12.639,516,17.476,2570,39.901,7599,46.082]],["name/51-41",[]],["text/51-41",[]],["component/51-41",[]],["keyword/51-41",[]],["title/51-42",[138,14.224,516,19.668,7599,51.864]],["name/51-42",[]],["text/51-42",[]],["component/51-42",[]],["keyword/51-42",[]],["title/51-43",[4,40.75,138,14.224,516,19.668]],["name/51-43",[]],["text/51-43",[]],["component/51-43",[]],["keyword/51-43",[]],["title/51-44",[363,31.825,1476,24.131,1736,28.345,2570,35.898,7599,41.46]],["name/51-44",[]],["text/51-44",[]],["component/51-44",[]],["keyword/51-44",[]],["title/51-45",[138,12.639,516,17.476,1624,42.074,3901,44.908]],["name/51-45",[]],["text/51-45",[]],["component/51-45",[]],["keyword/51-45",[]],["title/51-46",[516,14.29,1476,21.931,1477,22.064,2570,32.626,3901,36.721,7599,37.681]],["name/51-46",[]],["text/51-46",[]],["component/51-46",[]],["keyword/51-46",[]],["title/51-47",[516,15.723,1476,24.131,1477,24.277,3901,40.404,7599,41.46]],["name/51-47",[]],["text/51-47",[]],["component/51-47",[]],["keyword/51-47",[]],["title/51-48",[4,32.575,516,15.723,1476,24.131,1477,24.277,3901,40.404]],["name/51-48",[]],["text/51-48",[]],["component/51-48",[]],["keyword/51-48",[]],["title/51-49",[138,11.371,315,14.863,516,15.723,1624,37.854,3407,39.466]],["name/51-49",[]],["text/51-49",[]],["component/51-49",[]],["keyword/51-49",[]],["title/51-50",[193,22.525,218,36.654,516,17.476,1843,33.564]],["name/51-50",[]],["text/51-50",[]],["component/51-50",[]],["keyword/51-50",[]],["title/51-51",[193,22.525,513,32.626,516,17.476,2875,32.333]],["name/51-51",[]],["text/51-51",[]],["component/51-51",[]],["keyword/51-51",[]],["title/51-52",[138,12.639,516,17.476,588,32.333,733,33.899]],["name/51-52",[]],["text/51-52",[]],["component/51-52",[]],["keyword/51-52",[]],["title/51-53",[138,12.639,516,17.476,574,28.2,733,33.899]],["name/51-53",[]],["text/51-53",[]],["component/51-53",[]],["keyword/51-53",[]],["title/51-54",[138,12.639,516,17.476,733,33.899,2025,37.123]],["name/51-54",[]],["text/51-54",[]],["component/51-54",[]],["keyword/51-54",[]],["title/51-55",[138,12.639,516,17.476,733,33.899,3417,39.275]],["name/51-55",[]],["text/51-55",[]],["component/51-55",[]],["keyword/51-55",[]],["title/51-56",[138,12.639,516,17.476,733,33.899,1500,25.206]],["name/51-56",[]],["text/51-56",[]],["component/51-56",[]],["keyword/51-56",[]],["title/51-57",[516,14.29,540,22.761,1500,20.61,1593,23.692,1595,21.548,4548,33.174]],["name/51-57",[]],["text/51-57",[]],["component/51-57",[]],["keyword/51-57",[]],["title/51-58",[516,17.476,1500,25.206,2025,37.123,7600,50.872]],["name/51-58",[]],["text/51-58",[]],["component/51-58",[]],["keyword/51-58",[]],["title/51-59",[161,20.866,516,19.668,1500,28.368]],["name/51-59",[]],["text/51-59",[]],["component/51-59",[]],["keyword/51-59",[]],["title/51-60",[138,8.741,263,19.9,516,12.086,540,19.251,1500,17.432,4482,26.757,4548,28.058,7601,38.994]],["name/51-60",[]],["text/51-60",[]],["component/51-60",[]],["keyword/51-60",[]],["title/51-61",[138,12.639,516,17.476,1701,39.275,1702,35.373]],["name/51-61",[]],["text/51-61",[]],["component/51-61",[]],["keyword/51-61",[]],["title/51-62",[138,11.371,516,15.723,1593,26.068,1595,23.709,1812,34.808]],["name/51-62",[]],["text/51-62",[]],["component/51-62",[]],["keyword/51-62",[]],["title/51-63",[138,10.334,516,14.29,1500,20.61,1566,33.764,1812,31.635,3417,32.115]],["name/51-63",[]],["text/51-63",[]],["component/51-63",[]],["keyword/51-63",[]],["title/51-64",[138,12.639,516,17.476,1500,25.206,2656,33.564]],["name/51-64",[]],["text/51-64",[]],["component/51-64",[]],["keyword/51-64",[]],["title/51-65",[138,12.639,516,17.476,1500,25.206,7602,53.228]],["name/51-65",[]],["text/51-65",[]],["component/51-65",[]],["keyword/51-65",[]],["title/51-66",[138,10.334,516,14.29,1500,20.61,1593,23.692,1595,21.548,2045,26.925]],["name/51-66",[]],["text/51-66",[]],["component/51-66",[]],["keyword/51-66",[]],["title/51-67",[138,12.639,516,17.476,1500,25.206,2895,39.275]],["name/51-67",[]],["text/51-67",[]],["component/51-67",[]],["keyword/51-67",[]],["title/51-68",[138,11.371,516,15.723,1500,22.678,2025,33.399,2045,29.626]],["name/51-68",[]],["text/51-68",[]],["component/51-68",[]],["keyword/51-68",[]],["title/51-69",[138,9.471,516,13.096,540,20.86,1500,18.889,1593,21.712,1595,19.748,2045,24.676]],["name/51-69",[]],["text/51-69",[]],["component/51-69",[]],["keyword/51-69",[]],["title/51-70",[138,10.334,516,14.29,540,22.761,1500,20.61,2025,30.355,2045,26.925]],["name/51-70",[]],["text/51-70",[]],["component/51-70",[]],["keyword/51-70",[]],["title/51-71",[138,12.639,516,17.476,1500,25.206,1993,46.082]],["name/51-71",[]],["text/51-71",[]],["component/51-71",[]],["keyword/51-71",[]],["title/51-72",[138,12.639,432,32.333,516,17.476,1500,25.206]],["name/51-72",[]],["text/51-72",[]],["component/51-72",[]],["keyword/51-72",[]],["title/51-73",[138,11.371,516,15.723,599,34.312,732,20.639,733,30.499]],["name/51-73",[]],["text/51-73",[]],["component/51-73",[]],["keyword/51-73",[]],["title/51-74",[516,14.29,540,22.761,1593,23.692,1595,21.548,3218,37.681,4548,33.174]],["name/51-74",[]],["text/51-74",[]],["component/51-74",[]],["keyword/51-74",[]],["title/51-75",[516,14.29,540,22.761,1593,23.692,1595,21.548,3789,38.778,4548,33.174]],["name/51-75",[]],["text/51-75",[]],["component/51-75",[]],["keyword/51-75",[]],["title/51-76",[516,13.096,929,28.189,1593,21.712,1595,19.748,2045,24.676,3218,34.533,4795,35.538]],["name/51-76",[]],["text/51-76",[]],["component/51-76",[]],["keyword/51-76",[]],["title/51-77",[138,10.334,516,14.29,1239,35.101,1593,23.692,1595,21.548,1812,31.635]],["name/51-77",[]],["text/51-77",[]],["component/51-77",[]],["keyword/51-77",[]],["title/51-78",[138,10.334,516,14.29,599,31.184,732,18.758,3417,32.115,5386,41.597]],["name/51-78",[]],["text/51-78",[]],["component/51-78",[]],["keyword/51-78",[]],["title/51-79",[138,12.639,516,17.476,731,23.945,732,22.94]],["name/51-79",[]],["text/51-79",[]],["component/51-79",[]],["keyword/51-79",[]],["title/51-80",[246,23.988,516,15.723,731,21.544,732,20.639,3219,34.312]],["name/51-80",[]],["text/51-80",[]],["component/51-80",[]],["keyword/51-80",[]],["title/51-81",[138,9.471,516,13.096,731,17.944,732,17.19,1593,21.712,1595,19.748,7600,38.122]],["name/51-81",[]],["text/51-81",[]],["component/51-81",[]],["keyword/51-81",[]],["title/51-82",[138,10.334,516,14.29,731,19.58,732,18.758,2025,30.355,7600,41.597]],["name/51-82",[]],["text/51-82",[]],["component/51-82",[]],["keyword/51-82",[]],["title/51-83",[138,9.471,516,13.096,731,17.944,732,17.19,1593,21.712,1595,19.748,2346,36.712]],["name/51-83",[]],["text/51-83",[]],["component/51-83",[]],["keyword/51-83",[]],["title/51-84",[516,15.723,731,21.544,732,20.639,2025,33.399,2045,29.626]],["name/51-84",[]],["text/51-84",[]],["component/51-84",[]],["keyword/51-84",[]],["title/51-85",[138,8.115,516,11.221,540,17.873,731,15.375,732,14.729,1593,18.604,1595,16.921,2045,21.143,4627,26.05]],["name/51-85",[]],["text/51-85",[]],["component/51-85",[]],["keyword/51-85",[]],["title/51-86",[138,8.741,516,12.086,540,19.251,731,16.561,732,15.865,2025,25.674,2045,22.773,4627,28.058]],["name/51-86",[]],["text/51-86",[]],["component/51-86",[]],["keyword/51-86",[]],["title/51-87",[138,10.334,516,14.29,731,19.58,732,18.758,1830,34.403,4815,36.721]],["name/51-87",[]],["text/51-87",[]],["component/51-87",[]],["keyword/51-87",[]],["title/51-88",[138,8.741,516,12.086,731,16.561,732,15.865,1248,32.798,1830,29.098,4815,31.058,7603,36.812]],["name/51-88",[]],["text/51-88",[]],["component/51-88",[]],["keyword/51-88",[]],["title/51-89",[138,10.334,516,14.29,731,19.58,732,18.758,1248,38.778,7603,43.524]],["name/51-89",[]],["text/51-89",[]],["component/51-89",[]],["keyword/51-89",[]],["title/51-90",[138,11.371,516,15.723,731,21.544,732,20.639,7602,47.889]],["name/51-90",[]],["text/51-90",[]],["component/51-90",[]],["keyword/51-90",[]],["title/51-91",[138,10.334,516,14.29,522,33.764,731,19.58,732,18.758,1939,26.925]],["name/51-91",[]],["text/51-91",[]],["component/51-91",[]],["keyword/51-91",[]],["title/51-92",[138,11.371,516,15.723,731,21.544,732,20.639,2656,30.198]],["name/51-92",[]],["text/51-92",[]],["component/51-92",[]],["keyword/51-92",[]],["title/51-93",[138,11.371,516,15.723,731,21.544,732,20.639,2946,36.501]],["name/51-93",[]],["text/51-93",[]],["component/51-93",[]],["keyword/51-93",[]],["title/51-94",[138,11.371,516,15.723,731,21.544,732,20.639,1993,41.46]],["name/51-94",[]],["text/51-94",[]],["component/51-94",[]],["keyword/51-94",[]],["title/51-95",[138,11.371,432,29.09,516,15.723,731,21.544,732,20.639]],["name/51-95",[]],["text/51-95",[]],["component/51-95",[]],["keyword/51-95",[]],["title/51-96",[138,9.471,731,17.944,1487,22.512,1593,21.712,1595,19.748,2020,27.133,7604,39.888]],["name/51-96",[]],["text/51-96",[]],["component/51-96",[]],["keyword/51-96",[]],["title/51-97",[138,10.334,731,19.58,1487,24.564,2020,29.606,2025,30.355,7604,43.524]],["name/51-97",[]],["text/51-97",[]],["component/51-97",[]],["keyword/51-97",[]],["title/51-98",[138,10.334,731,19.58,1487,24.564,2020,29.606,3417,32.115,7604,43.524]],["name/51-98",[]],["text/51-98",[]],["component/51-98",[]],["keyword/51-98",[]],["title/51-99",[516,19.668,576,27.083,4441,41.78]],["name/51-99",[]],["text/51-99",[]],["component/51-99",[]],["keyword/51-99",[]],["title/51-100",[138,10.334,516,14.29,1500,20.61,1593,23.692,1595,21.548,4441,30.355]],["name/51-100",[]],["text/51-100",[]],["component/51-100",[]],["keyword/51-100",[]],["title/51-101",[138,11.371,516,15.723,1500,22.678,2025,33.399,4441,33.399]],["name/51-101",[]],["text/51-101",[]],["component/51-101",[]],["keyword/51-101",[]],["title/51-102",[138,9.471,516,13.096,731,17.944,732,17.19,1593,21.712,1595,19.748,4441,27.819]],["name/51-102",[]],["text/51-102",[]],["component/51-102",[]],["keyword/51-102",[]],["title/51-103",[46,19.633,442,26.757,516,12.086,731,16.561,732,15.865,1593,20.038,1595,18.225,4441,25.674]],["name/51-103",[]],["text/51-103",[]],["component/51-103",[]],["keyword/51-103",[]],["title/51-104",[442,26.757,516,12.086,731,16.561,732,15.865,1593,20.038,1595,18.225,4412,35.183,4441,25.674]],["name/51-104",[]],["text/51-104",[]],["component/51-104",[]],["keyword/51-104",[]],["title/51-105",[516,12.086,731,16.561,732,15.865,1593,20.038,1595,18.225,3779,31.058,4441,25.674,4507,31.87]],["name/51-105",[]],["text/51-105",[]],["component/51-105",[]],["keyword/51-105",[]],["title/51-106",[138,10.334,516,14.29,731,19.58,732,18.758,2025,30.355,4441,30.355]],["name/51-106",[]],["text/51-106",[]],["component/51-106",[]],["keyword/51-106",[]],["title/51-107",[138,14.224,183,35.759,516,19.668]],["name/51-107",[]],["text/51-107",[]],["component/51-107",[]],["keyword/51-107",[]],["title/51-108",[138,11.371,183,28.586,315,14.863,516,15.723,1702,31.825]],["name/51-108",[]],["text/51-108",[]],["component/51-108",[]],["keyword/51-108",[]],["title/51-109",[183,28.586,255,30.499,516,15.723,2554,41.46,7605,47.889]],["name/51-109",[]],["text/51-109",[]],["component/51-109",[]],["keyword/51-109",[]],["title/51-110",[139,19.389,183,25.98,286,20.393,1380,38.778,1736,25.761,7606,46.104]],["name/51-110",[]],["text/51-110",[]],["component/51-110",[]],["keyword/51-110",[]],["title/51-111",[139,19.389,151,25.341,183,25.98,286,20.393,1736,25.761,7607,46.104]],["name/51-111",[]],["text/51-111",[]],["component/51-111",[]],["keyword/51-111",[]],["title/51-112",[139,19.389,183,25.98,272,24.564,286,20.393,1736,25.761,7608,46.104]],["name/51-112",[]],["text/51-112",[]],["component/51-112",[]],["keyword/51-112",[]],["title/51-113",[139,21.334,183,28.586,286,22.438,1736,28.345,7609,50.728]],["name/51-113",[]],["text/51-113",[]],["component/51-113",[]],["keyword/51-113",[]],["title/51-114",[138,11.371,183,28.586,279,24.575,516,15.723,1538,24.729]],["name/51-114",[]],["text/51-114",[]],["component/51-114",[]],["keyword/51-114",[]],["title/51-115",[138,14.224,516,19.668,7610,63.458]],["name/51-115",[]],["text/51-115",[]],["component/51-115",[]],["keyword/51-115",[]],["title/51-116",[4,36.207,138,12.639,516,17.476,1281,38.137]],["name/51-116",[]],["text/51-116",[]],["component/51-116",[]],["keyword/51-116",[]],["title/51-117",[138,14.224,516,19.668,979,47.353]],["name/51-117",[]],["text/51-117",[]],["component/51-117",[]],["keyword/51-117",[]],["title/51-118",[138,12.639,432,32.333,1072,39.275,1500,25.206]],["name/51-118",[]],["text/51-118",[]],["component/51-118",[]],["keyword/51-118",[]],["title/51-119",[138,11.371,432,29.09,731,21.544,732,20.639,1072,35.336]],["name/51-119",[]],["text/51-119",[]],["component/51-119",[]],["keyword/51-119",[]],["title/51-120",[138,14.224,516,19.668,6828,55.137]],["name/51-120",[]],["text/51-120",[]],["component/51-120",[]],["keyword/51-120",[]],["title/51-121",[138,14.224,516,19.668,7611,63.458]],["name/51-121",[]],["text/51-121",[]],["component/51-121",[]],["keyword/51-121",[]],["title/51-122",[138,14.224,516,19.668,7612,68.848]],["name/51-122",[]],["text/51-122",[]],["component/51-122",[]],["keyword/51-122",[]],["title/51-123",[516,22.49,7613,68.502]],["name/51-123",[]],["text/51-123",[]],["component/51-123",[]],["keyword/51-123",[]],["title/51-124",[138,11.371,516,15.723,731,21.544,732,20.639,7613,47.889]],["name/51-124",[]],["text/51-124",[]],["component/51-124",[]],["keyword/51-124",[]],["title/51-125",[138,14.224,516,19.668,7614,59.907]],["name/51-125",[]],["text/51-125",[]],["component/51-125",[]],["keyword/51-125",[]],["title/51-126",[138,11.371,516,15.723,731,21.544,732,20.639,7614,47.889]],["name/51-126",[]],["text/51-126",[]],["component/51-126",[]],["keyword/51-126",[]],["title/51-127",[138,12.639,315,16.52,516,17.476,4693,50.872]],["name/51-127",[]],["text/51-127",[]],["component/51-127",[]],["keyword/51-127",[]],["title/51-128",[138,14.224,516,19.668,2148,40.27]],["name/51-128",[]],["text/51-128",[]],["component/51-128",[]],["keyword/51-128",[]],["title/51-129",[3686,59.305,7615,72.562]],["name/51-129",[]],["text/51-129",[]],["component/51-129",[]],["keyword/51-129",[]],["title/51-130",[315,16.52,432,32.333,516,17.476,3407,43.865]],["name/51-130",[]],["text/51-130",[]],["component/51-130",[]],["keyword/51-130",[]],["title/51-131",[246,34.313,596,41.611]],["name/51-131",[]],["text/51-131",[]],["component/51-131",[]],["keyword/51-131",[]],["title/51-132",[516,19.668,548,29.832,2343,31.329]],["name/51-132",[]],["text/51-132",[]],["component/51-132",[]],["keyword/51-132",[]],["title/51-133",[516,19.668,548,29.832,2600,51.864]],["name/51-133",[]],["text/51-133",[]],["component/51-133",[]],["keyword/51-133",[]],["title/51-134",[548,29.832,823,40.75,7616,68.848]],["name/51-134",[]],["text/51-134",[]],["component/51-134",[]],["keyword/51-134",[]],["title/51-135",[548,34.112,7617,72.562]],["name/51-135",[]],["text/51-135",[]],["component/51-135",[]],["keyword/51-135",[]],["title/51-136",[161,20.866,362,30.554,516,19.668]],["name/51-136",[]],["text/51-136",[]],["component/51-136",[]],["keyword/51-136",[]],["title/51-137",[161,15.159,333,32.115,362,22.198,516,14.29,1820,30.758,7618,46.104]],["name/51-137",[]],["text/51-137",[]],["component/51-137",[]],["keyword/51-137",[]],["title/51-138",[161,16.68,516,15.723,868,33.399,1075,36.501,7619,47.889]],["name/51-138",[]],["text/51-138",[]],["component/51-138",[]],["keyword/51-138",[]],["title/51-139",[1,21.65,161,16.68,516,15.723,868,33.399,1148,29.907]],["name/51-139",[]],["text/51-139",[]],["component/51-139",[]],["keyword/51-139",[]],["title/51-140",[161,12.822,516,12.086,731,16.561,732,15.865,1726,24.746,2087,23.685,2343,19.251,7620,38.994]],["name/51-140",[]],["text/51-140",[]],["component/51-140",[]],["keyword/51-140",[]],["title/51-141",[161,13.893,516,13.096,731,17.944,732,17.19,2087,25.663,2343,20.86,7621,39.888]],["name/51-141",[]],["text/51-141",[]],["component/51-141",[]],["keyword/51-141",[]],["title/51-142",[516,19.668,1281,42.922,3891,41.253]],["name/51-142",[]],["text/51-142",[]],["component/51-142",[]],["keyword/51-142",[]],["title/51-143",[344,37.06,1281,42.922,3891,41.253]],["name/51-143",[]],["text/51-143",[]],["component/51-143",[]],["keyword/51-143",[]],["title/51-144",[139,30.517,2580,56.452]],["name/51-144",[]],["text/51-144",[]],["component/51-144",[]],["keyword/51-144",[]],["title/51-145",[1744,43.195,4850,65.469]],["name/51-145",[]],["text/51-145",[]],["component/51-145",[]],["keyword/51-145",[]],["title/51-146",[467,42.779,1744,43.195]],["name/51-146",[]],["text/51-146",[]],["component/51-146",[]],["keyword/51-146",[]],["title/51-147",[1281,42.922,1593,32.609,3891,41.253]],["name/51-147",[]],["text/51-147",[]],["component/51-147",[]],["keyword/51-147",[]],["title/51-148",[183,47.739]],["name/51-148",[]],["text/51-148",[]],["component/51-148",[]],["keyword/51-148",[]],["title/51-149",[138,14.224,516,19.668,1528,34.88]],["name/51-149",[]],["text/51-149",[]],["component/51-149",[]],["keyword/51-149",[]],["title/51",[1,18.033,29,15.32,161,13.893,185,19.98,362,20.344,516,13.096,576,18.033]],["name/51",[1,0.203,4410,0.362,4411,0.362]],["text/51",[0,0.375,1,3.355,2,0.185,3,0.069,4,3.76,5,0.422,6,0.334,8,0.046,9,0.293,10,0.621,14,0.099,19,0.064,21,1.309,23,0.399,26,0.744,28,0.171,29,0.502,31,1.946,44,0.071,46,2.097,63,1.214,74,0.089,136,0.076,137,0.21,138,2.396,139,3.177,141,0.08,142,0.985,144,0.733,146,0.137,147,0.333,148,0.086,149,0.169,151,0.937,152,0.501,154,0.526,155,0.092,156,0.247,157,0.704,158,0.392,159,0.223,161,2.205,169,0.048,180,0.161,182,0.694,183,4.849,185,0.048,188,1.049,189,0.553,190,0.615,193,1.739,194,0.194,196,0.42,203,0.207,204,0.858,205,0.158,206,0.843,207,1.192,208,0.304,210,0.139,213,1.217,214,0.497,216,0.688,217,0.76,218,1.584,220,0.196,221,1.246,223,2.548,224,0.141,225,1.469,226,2.872,227,0.684,228,0.117,231,1.38,232,0.614,233,0.112,234,0.235,235,0.064,237,0.068,239,0.132,240,0.407,241,0.394,243,0.362,244,0.504,245,0.6,246,2.526,247,0.998,248,2.393,249,0.37,250,1.908,254,0.078,255,0.521,256,0.858,257,0.593,258,1.395,259,0.187,260,0.151,261,0.773,262,0.194,263,6.176,264,1.904,265,0.331,267,0.137,268,0.34,272,1.441,273,0.476,278,0.066,279,3.732,280,0.07,281,0.363,282,0.129,283,0.251,284,1.934,285,0.646,286,3.975,290,0.243,291,1.799,294,0.292,296,0.063,297,0.57,298,1.757,299,1.129,302,0.075,303,3.854,306,1.724,308,0.072,309,0.081,315,3.069,316,2.497,318,0.318,323,0.403,325,0.278,327,2.056,329,0.492,330,1.164,333,1.077,334,0.257,335,0.189,336,0.204,341,0.315,342,0.07,344,1.579,346,1.294,347,0.05,350,0.543,351,1.109,352,8.305,353,1.886,354,0.8,356,0.132,357,2.132,358,0.064,359,0.134,360,1.573,361,0.08,362,1.541,363,1.166,364,2.064,365,0.267,366,1.499,367,0.154,369,1.998,370,0.498,371,1.887,375,0.832,376,2.444,377,0.646,378,0.362,382,0.248,386,0.137,388,1.739,389,0.115,390,0.685,391,0.315,392,0.208,393,0.936,394,1.637,395,0.37,398,0.793,400,0.071,402,3.248,405,0.21,406,0.578,407,0.068,408,0.357,410,1.141,411,1.49,416,1.664,417,5.401,420,0.176,421,1.09,422,0.192,423,0.45,428,0.065,429,0.081,432,1.109,433,0.694,435,3.338,438,0.359,439,0.432,440,0.062,441,1.137,442,1.479,445,0.697,450,0.235,454,0.078,458,0.201,459,2.334,463,0.238,465,1.51,466,0.362,467,1.228,477,0.204,478,1.506,482,0.754,483,2.983,484,1.554,488,0.238,489,0.092,490,0.123,491,0.067,493,0.782,494,0.066,497,0.134,498,2.777,500,0.081,502,0.563,505,0.134,508,0.511,509,0.345,510,0.172,511,0.405,513,0.396,516,3.654,522,0.221,523,0.069,526,1.198,527,0.922,531,1.358,533,0.074,536,0.235,537,0.068,538,0.655,539,0.248,540,2.056,541,0.254,542,0.132,544,0.192,545,0.937,546,0.194,547,1.005,548,2.068,551,0.588,552,0.283,553,0.812,554,2.593,557,0.182,558,0.162,563,0.096,565,0.086,567,0.484,569,0.708,574,3.427,575,0.192,576,3.088,577,0.331,580,0.074,581,0.466,583,0.166,584,0.122,585,0.327,587,0.462,588,1.358,589,0.069,590,0.447,592,0.345,593,0.466,594,0.207,596,1.022,597,1.152,599,1.258,601,0.154,602,0.344,613,2.987,679,0.084,707,5.068,712,3.466,716,0.447,722,2.443,724,0.405,725,2.519,728,0.154,729,0.162,730,0.66,731,3.036,732,2.909,733,1.741,734,2.526,735,0.881,738,0.336,744,2.24,747,0.57,748,0.389,749,0.405,752,0.285,756,2.466,768,2.917,780,0.51,783,1.258,788,0.315,790,0.149,799,0.526,800,0.084,802,0.058,803,0.075,807,0.415,808,2.165,811,0.614,823,0.439,825,0.149,830,0.54,831,0.417,832,0.856,834,0.262,836,0.267,839,0.102,843,0.744,847,0.996,849,0.13,850,0.498,851,0.115,856,0.765,857,0.575,860,2.001,864,0.092,868,0.326,871,0.146,872,0.447,874,0.51,881,0.484,883,0.45,890,0.127,891,0.132,895,0.568,904,0.405,908,0.362,915,0.096,917,0.285,918,1.271,924,0.559,928,1.5,929,2.713,930,0.069,931,0.149,932,0.132,940,0.459,950,0.568,957,1.036,960,0.441,961,0.386,965,0.998,967,1.557,970,0.646,971,0.459,975,0.441,979,0.37,981,0.189,995,0.441,996,0.078,1001,0.439,1003,0.431,1012,0.311,1014,0.166,1015,0.196,1021,0.431,1024,0.548,1025,0.141,1026,2.956,1032,0.247,1034,0.533,1041,0.431,1043,0.08,1047,0.071,1056,0.347,1059,0.086,1062,0.139,1063,0.078,1066,0.084,1069,0.497,1072,5.697,1075,0.288,1076,0.302,1079,0.497,1084,0.431,1092,0.447,1093,1.778,1094,2.283,1097,0.447,1102,0.431,1113,1.175,1116,0.431,1118,0.347,1125,0.21,1127,0.468,1136,0.405,1140,0.687,1141,0.067,1142,0.97,1148,0.615,1150,0.377,1153,0.532,1157,0.431,1162,0.468,1172,0.431,1179,0.468,1193,0.497,1194,0.395,1213,0.497,1218,0.07,1222,0.326,1224,0.37,1229,1.385,1233,0.417,1238,0.439,1239,0.728,1247,0.084,1248,0.575,1254,0.405,1263,0.285,1266,0.418,1272,0.285,1276,0.078,1278,0.192,1281,6.773,1286,0.285,1294,1.073,1297,0.285,1306,0.377,1314,0.285,1322,0.285,1326,0.285,1330,0.074,1332,0.075,1335,0.192,1337,0.26,1343,0.361,1345,0.176,1348,0.285,1354,0.285,1365,0.285,1373,0.183,1380,0.171,1381,0.192,1384,0.285,1388,0.166,1396,0.272,1402,0.192,1411,0.192,1428,0.285,1432,0.285,1433,0.192,1444,0.285,1458,0.066,1476,3.237,1477,2.949,1479,0.655,1482,1.647,1484,1.369,1487,0.95,1489,0.081,1490,0.154,1491,0.359,1492,0.245,1493,0.173,1495,0.08,1496,0.072,1497,0.568,1498,0.071,1499,2.13,1500,3.063,1501,4.803,1508,0.176,1512,0.149,1515,0.263,1516,0.171,1517,0.137,1519,0.469,1520,0.272,1521,1.339,1522,0.415,1523,0.254,1526,2.108,1527,1.368,1528,0.112,1530,0.084,1531,0.972,1532,0.648,1533,0.081,1535,0.067,1536,0.27,1538,1.755,1540,0.274,1542,0.759,1543,0.245,1544,1.266,1545,0.146,1546,0.691,1547,0.614,1548,0.27,1550,1.233,1551,0.45,1552,1.077,1553,0.084,1554,0.081,1557,0.221,1558,0.187,1559,0.135,1560,0.139,1562,0.355,1564,0.075,1565,0.199,1566,1.073,1569,0.154,1571,0.166,1572,1.887,1573,0.13,1575,1.385,1577,0.154,1578,0.196,1581,0.081,1582,0.151,1583,0.144,1585,0.498,1586,1.551,1588,0.359,1589,0.293,1590,1.64,1591,0.471,1593,3.09,1594,0.13,1595,2.221,1597,0.183,1606,0.375,1608,0.415,1609,1.163,1610,0.196,1614,1.852,1615,0.894,1616,1.261,1618,0.171,1620,1.719,1622,0.348,1624,0.713,1630,0.274,1631,1.316,1635,0.67,1639,0.525,1640,0.604,1644,0.139,1646,0.074,1654,0.298,1656,0.48,1657,0.389,1658,0.129,1659,1.233,1661,0.532,1664,0.331,1667,0.254,1668,0.162,1670,0.089,1673,0.245,1674,0.068,1675,0.429,1676,0.506,1679,0.538,1690,0.715,1691,0.415,1692,0.092,1694,0.481,1697,0.326,1701,0.141,1702,0.97,1706,0.331,1707,0.067,1713,0.47,1715,4.484,1716,0.089,1724,0.798,1725,0.578,1726,0.129,1728,0.217,1732,0.298,1735,0.949,1736,2.188,1739,0.556,1740,0.183,1741,0.126,1742,0.405,1743,0.072,1744,0.462,1745,0.362,1747,0.225,1751,0.067,1754,0.439,1757,0.18,1758,3.062,1768,0.856,1770,0.516,1785,1.137,1806,0.21,1807,0.61,1808,0.532,1809,1.884,1812,1.944,1815,0.254,1817,0.089,1819,0.081,1820,2.544,1821,0.23,1822,0.798,1825,0.357,1830,0.37,1835,0.278,1837,1.819,1838,0.141,1840,0.395,1841,0.263,1843,0.516,1845,0.713,1849,0.158,1852,0.176,1854,0.282,1855,0.201,1856,0.162,1857,0.23,1862,1.721,1863,0.084,1865,0.302,1867,0.135,1868,0.604,1870,0.154,1871,0.214,1874,0.13,1875,0.59,1878,0.067,1879,0.203,1883,0.065,1885,0.301,1902,0.254,1904,3.236,1906,1.242,1932,0.086,1937,0.063,1938,0.189,1939,2.919,1942,0.139,1944,0.362,1945,0.293,1947,3.316,1951,1.354,1952,1.058,1953,0.134,1957,4.811,1958,0.248,1968,1.154,1972,0.102,1976,0.149,1977,0.981,1979,0.23,1980,0.092,1989,0.154,1990,0.492,1993,0.327,1995,0.813,1996,0.057,1997,0.08,1999,0.162,2000,0.687,2003,0.07,2005,0.183,2006,0.086,2012,1.238,2013,0.345,2020,1.695,2025,2.612,2027,0.283,2028,0.941,2032,0.351,2033,0.102,2034,0.065,2038,0.42,2043,0.217,2045,2.488,2050,0.357,2052,0.27,2054,0.08,2057,0.311,2060,0.322,2062,0.084,2064,0.102,2068,0.37,2070,0.158,2071,0.311,2072,0.076,2075,0.086,2076,0.158,2077,0.162,2079,0.151,2086,0.092,2087,0.58,2089,0.399,2101,0.081,2102,0.176,2107,0.241,2112,0.979,2118,0.45,2120,0.126,2121,0.096,2124,0.469,2127,0.953,2128,0.199,2130,0.586,2131,0.072,2143,0.086,2146,0.501,2148,0.192,2153,0.47,2154,0.856,2161,0.37,2162,0.603,2163,0.071,2175,0.247,2176,0.086,2183,0.139,2186,0.071,2187,0.217,2188,0.881,2189,0.476,2190,0.23,2191,0.357,2204,0.067,2208,0.497,2211,0.089,2215,0.072,2216,0.504,2236,0.086,2240,1.353,2244,0.568,2245,0.262,2270,0.081,2273,0.445,2291,0.089,2292,0.201,2295,0.139,2304,0.225,2308,0.363,2313,0.081,2321,0.072,2322,0.086,2323,0.183,2326,0.318,2329,0.078,2330,0.432,2333,0.154,2341,0.096,2342,0.27,2343,1.135,2346,0.089,2347,0.102,2348,0.936,2358,0.214,2359,0.285,2362,0.158,2365,0.092,2371,0.078,2372,0.776,2376,0.086,2380,0.08,2381,0.304,2384,0.235,2390,0.345,2393,0.361,2394,0.158,2396,0.501,2398,0.166,2400,0.151,2402,0.183,2405,0.331,2408,0.102,2409,0.579,2412,0.386,2414,0.221,2416,0.092,2418,0.335,2419,0.853,2421,0.431,2422,1.057,2423,0.201,2428,0.08,2430,0.811,2439,0.096,2441,0.288,2443,0.176,2444,0.45,2445,0.089,2449,2.436,2450,0.084,2452,0.526,2453,0.336,2454,1.474,2459,0.144,2479,0.907,2488,0.379,2489,0.076,2490,0.476,2494,0.483,2495,0.183,2497,0.221,2507,0.08,2523,0.272,2526,0.154,2531,0.096,2532,0.23,2534,0.072,2536,0.558,2537,0.089,2538,0.086,2542,0.081,2546,3.503,2547,1.716,2551,0.345,2558,0.149,2563,0.347,2564,0.247,2566,0.076,2570,2.913,2573,0.327,2574,0.084,2576,0.594,2577,0.982,2578,1.057,2579,4.702,2580,5.236,2581,3.468,2582,0.447,2583,0.331,2585,0.262,2588,0.95,2592,0.07,2600,0.994,2605,0.144,2610,0.302,2612,0.102,2613,0.262,2614,0.283,2618,0.497,2624,0.241,2625,0.08,2639,0.162,2646,0.952,2656,1.196,2670,0.844,2671,0.096,2672,0.318,2674,1.33,2675,1.094,2700,0.166,2719,0.075,2726,0.137,2727,0.081,2735,2.075,2739,0.089,2742,0.096,2745,0.078,2753,0.089,2754,0.447,2760,0.084,2761,0.071,2762,0.225,2763,0.092,2764,0.492,2765,0.102,2768,0.557,2771,0.327,2798,0.347,2799,2.824,2804,0.262,2807,0.183,2809,0.351,2811,0.146,2812,0.084,2815,0.192,2816,0.254,2819,0.37,2820,0.072,2821,0.092,2824,0.171,2829,0.102,2831,0.166,2834,0.154,2837,1.969,2839,3.05,2841,0.092,2843,0.285,2850,0.311,2853,0.162,2855,0.171,2858,0.302,2861,0.283,2870,1.649,2875,0.116,2876,0.23,2877,0.081,2879,0.08,2891,0.102,2893,0.08,2895,0.603,2906,0.092,2907,0.176,2909,0.214,2913,0.532,2915,0.084,2916,0.071,2917,0.158,2936,0.293,2937,0.078,2940,0.207,2946,0.074,2947,0.183,2956,0.081,2958,0.327,2960,0.084,2968,0.162,2971,0.096,2972,0.533,2974,0.176,2977,0.096,2980,0.459,3022,0.302,3033,0.861,3078,0.084,3080,0.102,3099,0.089,3105,0.078,3109,0.072,3207,0.361,3208,0.092,3209,0.102,3210,0.102,3211,0.102,3212,0.102,3213,0.102,3214,0.102,3215,0.102,3216,0.302,3217,0.716,3218,1.52,3219,1.309,3399,0.092,3407,1.387,3415,0.102,3416,0.081,3417,1.551,3418,0.102,3461,0.162,3474,0.151,3477,0.171,3483,0.176,3486,0.102,3496,0.092,3528,0.08,3570,0.096,3581,0.285,3599,0.081,3623,1.59,3628,0.497,3665,0.318,3666,0.47,3670,0.192,3673,0.417,3678,0.431,3683,0.102,3686,0.405,3696,1.094,3703,1.873,3757,0.311,3766,0.225,3771,0.533,3776,1.202,3779,0.318,3789,0.575,3817,0.096,3823,0.092,3827,0.327,3875,0.086,3876,0.171,3879,0.084,3882,0.285,3890,0.084,3891,5.054,3895,0.171,3899,0.092,3901,3.078,3907,0.166,3915,0.092,3919,0.092,3932,0.092,3945,0.092,3952,0.47,3958,0.092,3959,0.417,3960,0.075,4052,0.084,4059,0.203,4083,3.682,4085,0.203,4089,0.102,4134,0.171,4140,0.347,4162,0.092,4176,4.535,4210,0.285,4215,0.092,4245,0.192,4246,0.081,4247,0.102,4248,0.176,4252,0.192,4270,0.102,4277,0.092,4283,0.089,4298,0.47,4303,0.166,4304,0.092,4320,0.327,4336,0.086,4387,1.546,4412,2.073,4417,0.247,4441,2.223,4444,1.774,4447,0.336,4461,0.102,4465,0.071,4473,0.096,4477,0.652,4482,1.061,4506,0.096,4507,0.166,4535,0.192,4538,0.558,4539,0.497,4542,0.88,4543,0.096,4545,1.878,4547,0.311,4548,1.754,4553,0.084,4556,0.102,4559,1.6,4562,0.254,4567,0.361,4568,0.092,4589,0.361,4596,0.327,4610,0.102,4612,0.096,4624,0.086,4627,0.288,4667,1.228,4669,0.192,4693,0.361,4705,1.642,4708,0.336,4709,0.764,4715,0.166,4716,0.081,4721,0.074,4726,0.405,4738,1.581,4740,1.754,4744,0.084,4750,0.176,4751,0.203,4752,0.496,4755,0.086,4761,0.102,4768,0.684,4774,0.086,4775,0.096,4785,0.086,4790,1.879,4792,0.285,4795,1.233,4796,0.102,4798,0.102,4800,0.684,4804,0.183,4807,0.102,4809,0.183,4812,0.203,4813,0.262,4814,0.176,4815,0.318,4816,0.425,4818,0.154,4819,0.096,4821,0.361,4822,0.192,4823,0.361,4824,0.377,4825,0.192,4826,0.183,4828,0.262,4836,0.59,4840,0.092,4844,0.4,4846,0.674,4847,9.763,4848,9.377,4849,6.584,4850,3.844,4851,0.302,4852,2.428,4853,0.302,4855,6.708,4857,0.096,4860,0.102,4861,0.096,4863,0.203,4887,0.092,4889,0.176,4903,0.096,4907,2.491,4927,0.096,4932,1.248,4935,0.092,4936,0.183,4938,0.096,4945,0.862,4961,0.089,4962,0.078,4974,0.192,5002,0.092,5009,0.361,5022,0.395,5033,0.513,5037,0.096,5044,0.483,5057,0.092,5073,0.377,5076,4.326,5077,0.102,5118,0.192,5133,0.235,5134,0.08,5157,1.384,5170,0.192,5171,0.192,5173,0.092,5176,0.776,5185,0.192,5197,0.102,5215,0.23,5241,0.283,5243,0.096,5250,0.59,5251,0.092,5281,0.203,5282,0.176,5283,2.444,5300,0.272,5304,0.318,5336,0.089,5337,0.102,5339,0.272,5340,0.361,5342,0.377,5366,0.102,5368,0.096,5373,0.102,5374,0.7,5386,0.272,5395,0.302,5407,0.203,5421,0.102,5437,0.285,5456,0.272,5462,0.176,5463,0.102,5469,0.102,5470,0.674,5491,0.496,5496,0.092,5502,0.302,5511,0.089,5548,1.13,5572,0.285,5573,0.102,5577,0.203,5581,0.089,5584,0.776,5590,0.092,5622,0.241,5669,0.102,5675,0.102,5694,0.096,5695,0.203,5793,0.102,5981,0.102,5989,0.096,6075,0.096,6080,0.176,6082,1.094,6106,0.102,6114,0.262,6186,1.044,6223,0.171,6228,0.557,6233,0.272,6234,0.468,6244,1.499,6251,0.285,6253,0.285,6254,0.192,6256,0.192,6258,0.096,6260,0.096,6262,0.377,6264,0.102,6400,0.192,6434,0.096,6437,0.102,6463,0.203,6477,0.285,6479,0.092,6502,0.646,6505,0.102,6518,0.262,6576,0.089,6584,0.102,6602,0.096,6762,0.302,6763,0.377,6764,0.102,6821,0.102,6828,0.513,6871,0.302,7020,0.102,7076,0.183,7161,0.102,7421,0.347,7530,0.192,7532,0.102,7546,0.468,7554,0.192,7589,0.59,7590,0.496,7591,1.466,7592,1.3,7593,1.935,7594,3.283,7595,0.496,7596,0.203,7597,2.437,7598,1.216,7599,4.085,7600,0.617,7601,0.956,7603,0.377,7605,0.646,7606,0.4,7607,0.866,7608,0.684,7609,0.59,7610,0.203,7611,0.102,7613,0.096,7614,0.096,7615,0.4,7617,0.102,7618,0.102,7619,0.902,7620,0.302,7621,0.285,7622,0.111,7623,0.842,7624,1.626,7625,0.111,7626,3.845,7627,0.111,7628,0.732,7629,0.641,7630,0.111,7631,0.111,7632,0.328,7633,0.111,7634,0.111,7635,0.111,7636,0.111,7637,1.411,7638,0.434,7639,0.111,7640,1.227,7641,0.111,7642,0.328,7643,0.22,7644,0.22,7645,2.009,7646,1.935,7647,0.22,7648,0.111,7649,0.111,7650,0.641,7651,0.684,7652,0.434,7653,0.302,7654,0.22,7655,0.434,7656,0.22,7657,0.22,7658,0.742,7659,0.842,7660,0.111,7661,0.111,7662,0.111,7663,0.111,7664,2.704,7665,0.328,7666,0.111,7667,0.22,7668,0.111,7669,0.111,7670,0.111,7671,0.111,7672,0.22,7673,0.111,7674,0.111,7675,0.111,7676,0.111,7677,0.818,7678,0.732,7679,1.966,7680,0.111,7681,0.111,7682,0.434,7683,0.302,7684,1.044,7685,0.59,7686,0.111,7687,0.111,7688,0.111,7689,0.203,7690,0.111,7691,0.111,7692,0.22,7693,0.111,7694,0.111,7695,0.328,7696,0.111,7697,0.111,7698,0.102,7699,0.22,7700,0.096,7701,0.641,7702,0.111,7703,0.111,7704,0.111,7705,0.111,7706,0.111,7707,0.111,7708,0.111,7709,0.111,7710,0.111,7711,0.111,7712,0.111,7713,0.111,7714,0.842,7715,0.111,7716,0.538,7717,0.842,7718,1.037,7719,1.227,7720,0.328,7721,0.538,7722,0.641,7723,0.111,7724,0.22,7725,0.22,7726,0.538,7727,0.538,7728,0.538,7729,0.538,7730,0.538,7731,0.538,7732,1.59,7733,0.328,7734,0.111,7735,0.111,7736,0.328,7737,0.302,7738,0.111,7739,0.328,7740,0.111,7741,0.22,7742,0.111,7743,0.22,7744,0.684,7745,0.538,7746,0.434,7747,0.302,7748,0.328,7749,0.22,7750,0.22,7751,1.783,7752,0.302,7753,0.102,7754,3.376,7755,2.009,7756,0.111,7757,0.111,7758,0.22,7759,0.111,7760,2.26,7761,1.037,7762,0.22,7763,3.082,7764,1.859,7765,0.111,7766,1.037,7767,0.111,7768,0.22,7769,0.111,7770,0.111,7771,0.328,7772,0.111,7773,0.111,7774,0.328,7775,0.111,7776,0.111,7777,0.111,7778,1.3,7779,0.684,7780,0.496,7781,0.111,7782,0.538,7783,0.59,7784,0.111,7785,1.216,7786,0.203,7787,0.111,7788,0.111,7789,0.111,7790,0.111,7791,0.22,7792,0.866,7793,0.203,7794,0.866,7795,0.496,7796,0.102,7797,2.769,7798,0.111,7799,0.111,7800,0.102,7801,0.22,7802,0.102,7803,0.328,7804,0.111,7805,0.111,7806,0.203,7807,0.111,7808,1.044,7809,0.22,7810,0.302,7811,0.22,7812,0.203,7813,0.111,7814,0.111,7815,0.111,7816,0.111,7817,0.111,7818,0.111,7819,0.434,7820,0.22,7821,0.538,7822,0.111,7823,0.328,7824,0.22,7825,0.203,7826,0.111,7827,0.111,7828,0.111,7829,0.111,7830,0.111,7831,0.111,7832,0.111,7833,0.111,7834,0.111,7835,0.328,7836,0.328,7837,0.111,7838,0.538,7839,0.111,7840,0.111,7841,0.434,7842,0.22,7843,0.111,7844,0.111,7845,0.111,7846,0.111,7847,0.111,7848,0.111,7849,0.111,7850,0.111,7851,0.111,7852,0.111,7853,0.111,7854,0.111,7855,0.111,7856,0.111,7857,0.111,7858,0.203,7859,0.203,7860,0.102,7861,2.493,7862,0.496,7863,0.102,7864,0.102,7865,0.111,7866,0.538,7867,0.22,7868,0.434,7869,0.111,7870,0.111,7871,0.111,7872,0.22,7873,0.111,7874,0.111,7875,0.111,7876,0.111,7877,0.111,7878,0.111,7879,0.111,7880,0.111,7881,0.111,7882,0.111,7883,0.111,7884,0.111,7885,0.111,7886,0.111,7887,0.111,7888,0.111,7889,0.111,7890,0.111,7891,0.111,7892,0.111,7893,0.111,7894,0.22,7895,0.111,7896,0.111,7897,0.111,7898,0.111,7899,0.111,7900,0.111,7901,0.328,7902,0.111,7903,0.328,7904,0.4,7905,0.111,7906,0.111,7907,0.111,7908,0.496,7909,0.111,7910,0.496,7911,0.22,7912,0.4,7913,0.111,7914,0.111,7915,0.468,7916,0.203,7917,0.111,7918,0.22,7919,0.111,7920,0.111,7921,0.111,7922,0.111,7923,0.111,7924,0.102,7925,1.227,7926,0.111,7927,0.111,7928,0.111,7929,0.111,7930,0.111,7931,0.111,7932,0.111,7933,0.111,7934,0.111,7935,0.111,7936,0.111,7937,0.111,7938,0.111,7939,0.111,7940,0.434,7941,0.111,7942,0.111,7943,0.111,7944,0.203,7945,0.111,7946,0.496,7947,0.111,7948,0.328,7949,0.111,7950,0.111,7951,0.328,7952,0.111,7953,0.111,7954,0.111,7955,0.111,7956,0.22,7957,0.22,7958,0.111,7959,0.22,7960,0.111,7961,0.22,7962,0.111,7963,0.22,7964,0.22,7965,0.111,7966,0.111,7967,0.111,7968,0.111,7969,0.111,7970,0.111,7971,0.111,7972,0.111,7973,0.111,7974,0.111,7975,0.102,7976,0.111,7977,0.111,7978,0.111,7979,0.328,7980,0.111,7981,0.111,7982,0.111,7983,0.111,7984,0.22,7985,0.111,7986,0.111,7987,0.111,7988,0.111,7989,0.111,7990,0.111,7991,0.111,7992,0.22,7993,0.111,7994,0.111,7995,0.111,7996,0.111,7997,0.111,7998,0.111,7999,0.111,8000,0.111,8001,0.22,8002,0.203,8003,0.111,8004,0.111,8005,0.111,8006,0.111,8007,0.102,8008,0.22,8009,0.111,8010,0.111,8011,0.111,8012,0.111,8013,0.111,8014,0.111,8015,0.102,8016,0.111,8017,0.111,8018,0.111,8019,0.111,8020,0.111,8021,0.111,8022,0.203,8023,0.203,8024,0.203,8025,0.496,8026,0.203,8027,0.203,8028,0.203,8029,0.111,8030,0.111,8031,0.328,8032,0.111,8033,0.111,8034,0.111,8035,0.111,8036,0.328,8037,7.733,8038,5.247,8039,3.724,8040,0.328,8041,0.111,8042,0.328,8043,0.22,8044,0.328,8045,1.934,8046,0.102,8047,0.111,8048,0.22,8049,0.111,8050,0.111,8051,0.111,8052,0.111,8053,0.111,8054,0.111,8055,0.111,8056,0.22,8057,0.111,8058,0.111,8059,0.102,8060,0.111,8061,0.111,8062,0.111,8063,0.111,8064,0.22,8065,0.111,8066,0.111,8067,0.434,8068,0.111,8069,0.111,8070,0.22,8071,0.111,8072,0.111,8073,0.111,8074,0.22,8075,0.111,8076,0.111,8077,0.111,8078,0.111,8079,0.111,8080,0.111,8081,0.111,8082,0.111,8083,0.111,8084,0.111,8085,0.111,8086,0.434,8087,0.328,8088,0.111,8089,0.203,8090,0.22,8091,0.203,8092,0.22,8093,0.203,8094,0.203,8095,0.22,8096,0.203,8097,0.111,8098,0.102,8099,0.302,8100,0.4,8101,0.203,8102,0.302,8103,0.22,8104,0.111,8105,0.111,8106,1.764,8107,0.641,8108,0.22,8109,0.111,8110,0.111,8111,0.111,8112,0.111,8113,0.111,8114,0.203,8115,0.641,8116,0.111,8117,0.111,8118,0.434,8119,0.111,8120,0.111,8121,0.111,8122,0.111,8123,0.111,8124,0.111,8125,0.102,8126,0.111,8127,0.111,8128,0.111,8129,0.102,8130,0.111,8131,0.22,8132,0.203,8133,0.111,8134,0.111,8135,0.22,8136,0.111,8137,0.111,8138,0.203,8139,0.111,8140,0.111,8141,0.111,8142,0.111,8143,0.111,8144,0.22,8145,0.203,8146,0.111,8147,0.22,8148,0.111,8149,0.111,8150,0.111,8151,0.111,8152,0.111,8153,0.102,8154,0.111,8155,0.22,8156,0.111,8157,0.111,8158,0.328,8159,0.111,8160,0.111,8161,0.111,8162,0.328,8163,0.111,8164,0.111,8165,0.22,8166,0.111,8167,0.111,8168,0.111,8169,0.111,8170,0.111,8171,0.111,8172,2.569,8173,0.22,8174,0.22,8175,0.111,8176,0.111,8177,0.538,8178,0.111,8179,0.22,8180,0.22,8181,0.111,8182,0.22,8183,0.111,8184,0.111,8185,0.111,8186,0.102,8187,0.434,8188,0.111,8189,0.538,8190,0.111,8191,0.111,8192,0.111,8193,0.22,8194,0.203,8195,0.328,8196,0.111,8197,0.111,8198,0.111,8199,0.111,8200,0.538,8201,0.59,8202,0.538,8203,0.94,8204,0.641,8205,0.302,8206,0.111,8207,0.111,8208,0.111,8209,0.111,8210,0.111,8211,0.111,8212,0.111,8213,0.111,8214,0.111,8215,0.328,8216,0.111,8217,0.111,8218,0.22,8219,0.22,8220,0.22,8221,0.22,8222,0.22,8223,0.328,8224,0.22,8225,0.111,8226,0.468,8227,0.496,8228,0.302,8229,0.302,8230,0.111,8231,0.111,8232,0.111,8233,0.111,8234,0.111,8235,0.111,8236,0.111,8237,0.111,8238,0.111,8239,0.111,8240,0.111,8241,0.111,8242,0.111,8243,0.111,8244,0.111,8245,0.328,8246,0.203,8247,0.302,8248,0.203,8249,0.302,8250,0.111,8251,0.111,8252,0.111,8253,0.111,8254,0.111,8255,0.111,8256,0.111,8257,0.111,8258,0.111,8259,0.111,8260,0.111,8261,0.111,8262,0.111,8263,0.111,8264,0.111,8265,0.22,8266,0.111,8267,0.111,8268,0.102,8269,0.111,8270,0.111,8271,0.203,8272,0.102,8273,0.111,8274,0.22,8275,0.434,8276,0.203,8277,0.4,8278,0.22,8279,0.22,8280,0.22,8281,0.22,8282,0.111,8283,0.111,8284,0.111,8285,0.111,8286,0.111,8287,0.111,8288,0.111,8289,0.111,8290,0.111,8291,0.111,8292,0.111,8293,0.111,8294,0.203,8295,0.203,8296,0.302,8297,0.203,8298,0.111,8299,0.742,8300,0.111,8301,0.111,8302,0.641,8303,0.111,8304,0.111,8305,0.111,8306,0.111,8307,0.111,8308,0.22,8309,0.111,8310,0.22,8311,0.111,8312,0.111,8313,0.203,8314,0.203,8315,0.111,8316,0.111,8317,0.111,8318,0.111,8319,0.111,8320,0.111,8321,0.111,8322,0.302,8323,0.111,8324,0.328,8325,0.111,8326,0.111,8327,0.111,8328,0.328,8329,0.111,8330,0.111,8331,0.111,8332,0.302,8333,0.203,8334,0.111,8335,0.434,8336,0.111,8337,0.111,8338,0.111,8339,0.111,8340,0.111,8341,0.111,8342,0.111,8343,0.111,8344,0.111,8345,0.111,8346,0.111,8347,0.111,8348,0.111,8349,0.102,8350,0.102,8351,0.111,8352,0.111,8353,0.111,8354,0.111,8355,0.111,8356,0.111,8357,0.22,8358,0.111,8359,0.111,8360,0.111,8361,0.111,8362,0.102,8363,0.111,8364,0.102,8365,0.111,8366,0.111,8367,0.111,8368,0.102,8369,0.111,8370,0.111,8371,0.111,8372,0.111,8373,0.111,8374,0.111,8375,0.111,8376,0.111,8377,0.111,8378,0.111,8379,0.111,8380,0.434,8381,0.22,8382,0.302,8383,0.22,8384,0.111,8385,1.067,8386,0.111,8387,0.111,8388,0.22,8389,0.22,8390,0.328,8391,0.328,8392,0.328,8393,0.328,8394,0.22,8395,0.328,8396,0.328,8397,0.22,8398,0.22,8399,0.22,8400,0.328,8401,0.22,8402,0.328,8403,0.328,8404,0.328,8405,0.22,8406,0.328,8407,0.22,8408,0.328,8409,0.111,8410,0.22,8411,0.111,8412,0.111,8413,0.111,8414,0.22,8415,0.111,8416,0.111,8417,0.22,8418,0.22,8419,0.22,8420,0.22,8421,0.302,8422,0.111,8423,0.22,8424,0.434,8425,1.678,8426,1.678,8427,0.434,8428,0.434,8429,0.434,8430,0.111,8431,0.111,8432,0.22,8433,0.22,8434,0.22,8435,0.22,8436,0.22,8437,0.111,8438,0.111,8439,0.111,8440,0.111,8441,0.111,8442,0.111,8443,0.111,8444,0.111,8445,0.111,8446,0.111,8447,0.111,8448,0.203,8449,0.203,8450,0.111,8451,0.111,8452,0.111,8453,0.111,8454,0.111,8455,0.111,8456,0.111,8457,0.22,8458,0.111,8459,0.22,8460,0.111,8461,0.111,8462,0.22,8463,0.111,8464,0.302,8465,0.302,8466,0.203,8467,0.203,8468,0.203,8469,0.203,8470,0.328,8471,0.111,8472,0.111,8473,0.102,8474,0.328,8475,0.22,8476,0.328,8477,0.22,8478,0.22,8479,0.22,8480,0.22,8481,0.111,8482,0.111,8483,0.641,8484,0.111,8485,0.203,8486,0.22,8487,0.328,8488,0.22,8489,0.22,8490,0.22,8491,0.22,8492,0.22,8493,0.22,8494,0.22,8495,0.22,8496,0.22,8497,0.22,8498,0.22,8499,0.22,8500,0.22,8501,0.22,8502,0.22,8503,0.22,8504,0.22,8505,0.22,8506,0.22,8507,0.111,8508,0.641,8509,0.111,8510,0.111,8511,0.102,8512,1.132,8513,1.411,8514,0.111,8515,0.111,8516,0.111,8517,0.111,8518,0.111,8519,0.111,8520,0.111,8521,0.328,8522,0.328,8523,0.111,8524,0.22,8525,0.111,8526,0.22,8527,0.22,8528,0.111,8529,0.111,8530,0.111,8531,0.4,8532,0.4,8533,0.328,8534,0.111,8535,0.111,8536,0.22,8537,0.203,8538,0.203,8539,0.22,8540,0.22,8541,0.111,8542,0.203,8543,0.111,8544,0.94,8545,0.842,8546,0.22,8547,0.302,8548,0.434,8549,0.22,8550,0.22,8551,0.203,8552,0.203,8553,0.22,8554,0.22,8555,0.302,8556,0.22,8557,0.111,8558,1.546,8559,1.546,8560,0.22,8561,0.111,8562,0.22,8563,0.111,8564,0.328,8565,0.22,8566,0.22,8567,0.22,8568,0.111,8569,0.434,8570,0.4,8571,0.111,8572,0.111,8573,0.111,8574,0.22,8575,0.22,8576,0.22,8577,1.044,8578,0.111,8579,0.111,8580,0.102,8581,0.102,8582,0.111,8583,0.377,8584,0.4,8585,0.22,8586,0.302,8587,0.538,8588,0.102,8589,0.4,8590,0.22,8591,0.538,8592,0.111,8593,0.111,8594,0.434,8595,0.59,8596,0.111,8597,0.111,8598,0.22,8599,0.111,8600,0.111,8601,0.111,8602,0.111,8603,0.111,8604,0.328,8605,0.111,8606,0.111,8607,0.111,8608,0.111,8609,0.111,8610,0.111,8611,0.22,8612,0.328,8613,0.111,8614,0.111,8615,0.111,8616,0.22,8617,0.496,8618,0.22,8619,0.111,8620,0.111,8621,0.203,8622,0.684,8623,0.111,8624,0.328,8625,0.328,8626,0.111,8627,0.111,8628,0.111,8629,0.203,8630,0.434,8631,0.22,8632,0.203,8633,0.328,8634,0.111,8635,0.203,8636,0.111,8637,0.111,8638,0.111,8639,0.111,8640,0.111,8641,0.203,8642,0.59,8643,0.22,8644,0.4,8645,0.22,8646,0.111,8647,0.434,8648,0.111,8649,0.22,8650,0.111,8651,0.4,8652,0.111,8653,0.111,8654,0.111,8655,0.102,8656,0.111,8657,0.111,8658,0.111,8659,0.111,8660,0.111,8661,0.111,8662,0.111,8663,0.111,8664,0.111,8665,0.111,8666,0.111,8667,0.111,8668,0.111,8669,0.111,8670,0.22,8671,0.111,8672,0.22,8673,0.111,8674,0.111,8675,0.111,8676,0.111,8677,0.4,8678,0.4,8679,0.538,8680,0.434,8681,0.434,8682,0.94,8683,0.842,8684,0.111,8685,0.111,8686,0.111,8687,0.22,8688,0.111,8689,0.111,8690,0.111,8691,0.203,8692,0.496,8693,0.434,8694,0.111,8695,0.22,8696,0.111,8697,0.111,8698,0.111,8699,0.4,8700,0.102,8701,0.111,8702,0.111,8703,0.102,8704,0.102,8705,0.102,8706,0.302,8707,0.102,8708,0.302,8709,0.102,8710,0.102,8711,0.102,8712,0.302,8713,0.102,8714,0.102,8715,0.302,8716,0.102,8717,0.102,8718,0.302,8719,0.102,8720,0.102,8721,0.302,8722,0.102,8723,0.102,8724,0.302,8725,0.102,8726,0.302,8727,0.102,8728,0.302,8729,0.102,8730,0.102,8731,0.302,8732,0.102,8733,0.102,8734,0.302,8735,0.302,8736,0.302,8737,0.4,8738,0.302,8739,0.203,8740,0.203,8741,0.203,8742,0.203,8743,0.302,8744,0.302,8745,0.203,8746,0.203,8747,0.302,8748,0.203,8749,0.302,8750,0.203,8751,0.302,8752,0.302,8753,0.302,8754,0.102,8755,0.102,8756,0.302,8757,0.102,8758,0.302,8759,0.102,8760,0.302,8761,0.102,8762,0.102,8763,0.302,8764,0.102,8765,0.102,8766,0.302,8767,0.102,8768,0.302,8769,0.102,8770,0.102,8771,0.302,8772,0.102,8773,0.102,8774,0.302,8775,0.102,8776,0.302,8777,0.102,8778,0.102,8779,0.102,8780,0.302,8781,0.102,8782,0.102,8783,0.102,8784,0.302,8785,0.102,8786,0.102,8787,0.302,8788,0.102,8789,0.102,8790,0.302,8791,0.102,8792,0.302,8793,0.102,8794,0.102,8795,0.302,8796,0.4,8797,0.102,8798,0.102,8799,0.302,8800,0.102,8801,0.102,8802,0.302,8803,0.102,8804,0.102,8805,0.302,8806,0.102,8807,0.302,8808,0.102,8809,0.302,8810,0.102,8811,0.096,8812,0.302,8813,0.102,8814,0.102,8815,0.302,8816,0.102,8817,0.302,8818,0.102,8819,0.302,8820,0.102,8821,0.102,8822,0.102,8823,0.302,8824,0.102,8825,0.102,8826,0.302,8827,0.102,8828,0.102,8829,0.302,8830,0.102,8831,0.102,8832,0.302,8833,0.102,8834,0.102,8835,0.302,8836,0.102,8837,0.302,8838,0.102,8839,0.102,8840,0.302,8841,0.102,8842,0.302,8843,0.102,8844,0.102,8845,0.302,8846,0.302,8847,0.102,8848,0.302,8849,0.102,8850,0.302,8851,0.203,8852,0.102,8853,0.302,8854,0.102,8855,0.102,8856,0.302,8857,0.102,8858,0.302,8859,0.102,8860,0.102,8861,0.102,8862,0.302,8863,0.203,8864,0.203,8865,0.203,8866,0.102,8867,0.102,8868,0.111,8869,0.102,8870,0.111,8871,0.111,8872,0.111,8873,0.111,8874,0.111,8875,0.111]],["component/51",[5,0.286]],["keyword/51",[]],["title/52-1",[2204,55.777]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["keyword/52-1",[]],["title/52-2",[1679,45.02,4736,68.502]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["keyword/52-2",[]],["title/52-3",[6,31.281,972,53.141]],["name/52-3",[]],["text/52-3",[]],["component/52-3",[]],["keyword/52-3",[]],["title/52-4",[2735,62.042]],["name/52-4",[]],["text/52-4",[]],["component/52-4",[]],["keyword/52-4",[]],["title/52-5",[1281,49.081,3891,47.171]],["name/52-5",[]],["text/52-5",[]],["component/52-5",[]],["keyword/52-5",[]],["title/52-6",[138,16.265,218,47.171]],["name/52-6",[]],["text/52-6",[]],["component/52-6",[]],["keyword/52-6",[]],["title/52-7",[138,14.224,516,19.668,1072,44.203]],["name/52-7",[]],["text/52-7",[]],["component/52-7",[]],["keyword/52-7",[]],["title/52-8",[207,34.518,208,55.245]],["name/52-8",[]],["text/52-8",[]],["component/52-8",[]],["keyword/52-8",[]],["title/52-9",[161,23.859,4475,56.452]],["name/52-9",[]],["text/52-9",[]],["component/52-9",[]],["keyword/52-9",[]],["title/52-10",[286,22.438,516,15.723,930,34.312,2761,35.336,5141,45.769]],["name/52-10",[]],["text/52-10",[]],["component/52-10",[]],["keyword/52-10",[]],["title/52-11",[516,17.476,1113,30.744,5142,50.872,8876,48.99]],["name/52-11",[]],["text/52-11",[]],["component/52-11",[]],["keyword/52-11",[]],["title/52-12",[286,22.438,516,15.723,1047,35.336,2761,35.336,8877,50.728]],["name/52-12",[]],["text/52-12",[]],["component/52-12",[]],["keyword/52-12",[]],["title/52-13",[516,19.668,5143,59.907,8878,63.458]],["name/52-13",[]],["text/52-13",[]],["component/52-13",[]],["keyword/52-13",[]],["title/52-14",[516,13.096,910,27.133,980,35.538,986,29.9,998,33.653,1197,26.813,5144,39.888]],["name/52-14",[]],["text/52-14",[]],["component/52-14",[]],["keyword/52-14",[]],["title/52-15",[382,24.194,516,12.086,712,21.433,986,27.595,987,31.058,1003,33.881,1197,24.746,8879,38.994]],["name/52-15",[]],["text/52-15",[]],["component/52-15",[]],["keyword/52-15",[]],["title/52-16",[910,29.606,980,38.778,1165,38.778,1197,29.257,5146,43.524,6530,35.101]],["name/52-16",[]],["text/52-16",[]],["component/52-16",[]],["keyword/52-16",[]],["title/52-17",[382,28.605,987,36.721,1197,29.257,5147,43.524,6530,35.101,6532,40.058]],["name/52-17",[]],["text/52-17",[]],["component/52-17",[]],["keyword/52-17",[]],["title/52-18",[359,37.123,986,39.901,1197,35.781,8880,56.383]],["name/52-18",[]],["text/52-18",[]],["component/52-18",[]],["keyword/52-18",[]],["title/52-19",[359,30.355,986,32.626,1197,29.257,2045,26.925,8876,40.058,8881,46.104]],["name/52-19",[]],["text/52-19",[]],["component/52-19",[]],["keyword/52-19",[]],["title/52-20",[359,33.399,986,35.898,1087,42.667,1197,32.192,8882,50.728]],["name/52-20",[]],["text/52-20",[]],["component/52-20",[]],["keyword/52-20",[]],["title/52-21",[359,37.123,1197,35.781,6530,42.927,8883,56.383]],["name/52-21",[]],["text/52-21",[]],["component/52-21",[]],["keyword/52-21",[]],["title/52-22",[359,30.355,1113,25.139,1197,29.257,6530,35.101,8876,40.058,8884,46.104]],["name/52-22",[]],["text/52-22",[]],["component/52-22",[]],["keyword/52-22",[]],["title/52-23",[359,33.399,1087,42.667,1197,32.192,6530,38.621,8885,50.728]],["name/52-23",[]],["text/52-23",[]],["component/52-23",[]],["keyword/52-23",[]],["title/52-24",[376,25.341,388,22.616,516,14.29,1141,30.355,1337,29.971,5148,43.524]],["name/52-24",[]],["text/52-24",[]],["component/52-24",[]],["keyword/52-24",[]],["title/52-25",[138,16.265,5141,65.469]],["name/52-25",[]],["text/52-25",[]],["component/52-25",[]],["keyword/52-25",[]],["title/52-26",[138,16.265,5142,65.469]],["name/52-26",[]],["text/52-26",[]],["component/52-26",[]],["keyword/52-26",[]],["title/52-27",[8886,79.976]],["name/52-27",[]],["text/52-27",[]],["component/52-27",[]],["keyword/52-27",[]],["title/52-28",[4482,49.791,8886,68.502]],["name/52-28",[]],["text/52-28",[]],["component/52-28",[]],["keyword/52-28",[]],["title/52-29",[139,30.517,2656,43.195]],["name/52-29",[]],["text/52-29",[]],["component/52-29",[]],["keyword/52-29",[]],["title/52-30",[1862,51.456]],["name/52-30",[]],["text/52-30",[]],["component/52-30",[]],["keyword/52-30",[]],["title/52-31",[1093,46.194]],["name/52-31",[]],["text/52-31",[]],["component/52-31",[]],["keyword/52-31",[]],["title/52-32",[1702,53.149]],["name/52-32",[]],["text/52-32",[]],["component/52-32",[]],["keyword/52-32",[]],["title/52-33",[2045,49.475]],["name/52-33",[]],["text/52-33",[]],["component/52-33",[]],["keyword/52-33",[]],["title/52-34",[540,35.824,2045,42.377]],["name/52-34",[]],["text/52-34",[]],["component/52-34",[]],["keyword/52-34",[]],["title/52-35",[1500,32.439,1993,59.305]],["name/52-35",[]],["text/52-35",[]],["component/52-35",[]],["keyword/52-35",[]],["title/52-36",[979,63.217]],["name/52-36",[]],["text/52-36",[]],["component/52-36",[]],["keyword/52-36",[]],["title/52-37",[1812,58.131]],["name/52-37",[]],["text/52-37",[]],["component/52-37",[]],["keyword/52-37",[]],["title/52-38",[6828,73.608]],["name/52-38",[]],["text/52-38",[]],["component/52-38",[]],["keyword/52-38",[]],["title/52-39",[138,18.99]],["name/52-39",[]],["text/52-39",[]],["component/52-39",[]],["keyword/52-39",[]],["title/52-40",[8887,84.717]],["name/52-40",[]],["text/52-40",[]],["component/52-40",[]],["keyword/52-40",[]],["title/52-41",[8888,84.717]],["name/52-41",[]],["text/52-41",[]],["component/52-41",[]],["keyword/52-41",[]],["title/52-42",[8889,84.717]],["name/52-42",[]],["text/52-42",[]],["component/52-42",[]],["keyword/52-42",[]],["title/52-43",[8890,84.717]],["name/52-43",[]],["text/52-43",[]],["component/52-43",[]],["keyword/52-43",[]],["title/52-44",[8891,84.717]],["name/52-44",[]],["text/52-44",[]],["component/52-44",[]],["keyword/52-44",[]],["title/52-45",[8892,84.717]],["name/52-45",[]],["text/52-45",[]],["component/52-45",[]],["keyword/52-45",[]],["title/52-46",[8893,84.717]],["name/52-46",[]],["text/52-46",[]],["component/52-46",[]],["keyword/52-46",[]],["title/52-47",[8894,84.717]],["name/52-47",[]],["text/52-47",[]],["component/52-47",[]],["keyword/52-47",[]],["title/52-48",[8895,84.717]],["name/52-48",[]],["text/52-48",[]],["component/52-48",[]],["keyword/52-48",[]],["title/52-49",[8896,84.717]],["name/52-49",[]],["text/52-49",[]],["component/52-49",[]],["keyword/52-49",[]],["title/52-50",[8897,84.717]],["name/52-50",[]],["text/52-50",[]],["component/52-50",[]],["keyword/52-50",[]],["title/52-51",[8898,84.717]],["name/52-51",[]],["text/52-51",[]],["component/52-51",[]],["keyword/52-51",[]],["title/52-52",[8899,84.717]],["name/52-52",[]],["text/52-52",[]],["component/52-52",[]],["keyword/52-52",[]],["title/52-53",[8900,84.717]],["name/52-53",[]],["text/52-53",[]],["component/52-53",[]],["keyword/52-53",[]],["title/52-54",[8901,84.717]],["name/52-54",[]],["text/52-54",[]],["component/52-54",[]],["keyword/52-54",[]],["title/52-55",[8902,84.717]],["name/52-55",[]],["text/52-55",[]],["component/52-55",[]],["keyword/52-55",[]],["title/52-56",[8903,84.717]],["name/52-56",[]],["text/52-56",[]],["component/52-56",[]],["keyword/52-56",[]],["title/52-57",[8904,84.717]],["name/52-57",[]],["text/52-57",[]],["component/52-57",[]],["keyword/52-57",[]],["title/52-58",[8905,84.717]],["name/52-58",[]],["text/52-58",[]],["component/52-58",[]],["keyword/52-58",[]],["title/52-59",[8906,84.717]],["name/52-59",[]],["text/52-59",[]],["component/52-59",[]],["keyword/52-59",[]],["title/52-60",[8907,84.717]],["name/52-60",[]],["text/52-60",[]],["component/52-60",[]],["keyword/52-60",[]],["title/52-61",[8908,84.717]],["name/52-61",[]],["text/52-61",[]],["component/52-61",[]],["keyword/52-61",[]],["title/52-62",[8909,84.717]],["name/52-62",[]],["text/52-62",[]],["component/52-62",[]],["keyword/52-62",[]],["title/52-63",[8910,84.717]],["name/52-63",[]],["text/52-63",[]],["component/52-63",[]],["keyword/52-63",[]],["title/52-64",[8911,84.717]],["name/52-64",[]],["text/52-64",[]],["component/52-64",[]],["keyword/52-64",[]],["title/52-65",[8912,84.717]],["name/52-65",[]],["text/52-65",[]],["component/52-65",[]],["keyword/52-65",[]],["title/52-66",[8913,84.717]],["name/52-66",[]],["text/52-66",[]],["component/52-66",[]],["keyword/52-66",[]],["title/52-67",[138,12.639,516,17.476,1063,42.927,1208,47.424]],["name/52-67",[]],["text/52-67",[]],["component/52-67",[]],["keyword/52-67",[]],["title/52-68",[138,11.371,516,15.723,2045,29.626,4537,41.46,8876,44.076]],["name/52-68",[]],["text/52-68",[]],["component/52-68",[]],["keyword/52-68",[]],["title/52-69",[247,31.532,402,30.742,972,46.473]],["name/52-69",[]],["text/52-69",[]],["component/52-69",[]],["keyword/52-69",[]],["title/52",[29,16.716,138,10.334,161,15.159,185,21.802,516,14.29,1047,32.115]],["name/52",[516,0.216,1208,0.587]],["text/52",[0,1.083,1,4.082,2,0.996,3,0.27,4,0.724,5,0.251,6,2.283,7,0.256,8,0.178,9,0.101,10,0.103,19,0.25,23,0.452,26,0.262,28,0.17,29,0.906,31,1.206,46,1.046,52,2.844,63,0.11,136,0.297,137,0.141,138,2.137,139,1.107,142,2.824,144,0.635,147,1.331,149,0.817,151,0.111,152,1.446,153,0.326,157,0.751,161,2.281,183,0.824,185,0.188,188,0.48,189,0.433,193,0.309,199,0.146,205,0.458,207,1.189,208,0.303,213,0.834,214,0.116,216,1.495,217,0.219,218,1.156,220,0.132,221,1.576,223,0.419,225,2.228,226,3.407,237,0.636,241,0.135,243,0.409,246,1.367,247,1.785,248,1.403,250,2.076,255,1.249,257,1.379,258,0.373,259,0.126,261,0.329,262,0.13,263,6.495,265,1.186,267,0.27,268,0.404,272,2.937,279,2.923,280,0.139,281,0.148,284,0.192,285,0.27,286,4.15,291,0.601,292,1.21,296,0.124,298,0.374,299,0.358,301,0.154,303,3.217,306,0.504,315,2.31,316,1.51,318,0.378,323,0.119,325,0.141,327,1.646,329,0.128,330,0.725,333,0.141,335,0.707,341,2.064,342,0.139,344,0.557,346,0.436,351,0.229,352,2.637,353,1.818,354,1.223,357,0.182,359,2.142,362,1.33,364,0.122,365,0.135,366,1.167,369,0.575,371,4.602,376,2.56,378,0.124,382,0.591,386,0.523,388,2.868,390,0.537,391,0.823,392,0.403,394,0.126,398,1.355,399,1.262,400,2.65,401,0.183,402,1.339,410,1.138,411,3.294,416,0.395,417,4.009,420,2.033,421,1.331,433,2.859,435,0.425,442,0.139,445,0.229,450,0.157,457,0.151,459,2.765,463,0.12,465,0.52,466,1.185,467,0.235,470,0.139,476,0.106,477,0.137,478,1.069,482,2.247,483,3.269,487,0.117,493,0.24,494,0.13,497,0.388,498,0.878,502,0.665,505,0.854,508,0.509,510,0.115,513,0.231,516,3.194,526,0.588,527,1.56,529,0.151,531,1.51,534,0.12,536,0.31,537,0.135,539,0.48,540,0.471,541,0.374,542,0.132,545,0.219,547,0.436,551,0.436,553,1.67,554,1.197,558,0.161,565,0.802,567,0.113,571,2.487,574,3.324,576,2.77,580,0.146,584,0.24,587,1.645,596,0.229,597,1.192,602,0.102,613,3.737,626,0.161,707,3.711,712,2.311,722,1.51,725,3.816,731,0.086,732,0.082,734,0.692,735,0.975,738,0.44,744,0.378,745,0.326,747,0.262,750,0.183,756,2.521,768,4.015,780,0.151,783,0.523,788,0.823,789,0.202,790,0.148,799,0.358,802,0.114,803,0.431,807,0.242,811,0.497,823,0.378,830,0.278,843,1.171,847,2.738,850,0.939,856,0.137,860,0.444,867,0.176,868,0.742,871,0.686,874,0.151,883,0.154,895,0.292,899,0.161,900,0.161,910,1.935,918,0.871,928,0.44,929,5.809,930,0.137,931,0.292,943,0.335,950,0.292,957,1.655,960,0.151,965,0.996,967,2.786,972,2.023,975,0.151,979,0.151,980,2.535,981,0.25,986,1.035,987,2.401,988,0.157,989,0.191,990,0.183,991,0.36,992,0.202,997,2.288,998,4.553,999,0.202,1001,0.256,1003,3.483,1012,0.917,1013,0.151,1015,0.259,1024,4.752,1025,0.141,1026,2.288,1027,0.176,1038,0.458,1047,1.834,1051,0.398,1057,0.139,1058,0.154,1061,0.877,1062,0.139,1063,2.2,1072,4.832,1075,0.557,1084,0.176,1086,0.376,1087,1.869,1088,0.589,1093,0.217,1094,4.201,1095,0.202,1103,2.794,1113,1.507,1133,0.161,1140,0.985,1141,1.646,1148,0.562,1153,5.364,1164,0.202,1165,2.637,1197,0.716,1208,2.637,1222,0.262,1226,0.346,1228,0.292,1229,1.013,1238,0.256,1246,1.113,1254,0.139,1273,0.202,1281,6.345,1293,0.183,1317,0.17,1328,0.202,1330,0.146,1332,0.567,1337,1.351,1415,5.346,1476,0.19,1482,1.212,1483,0.469,1491,0.123,1493,0.838,1495,0.157,1500,0.795,1501,5.344,1515,0.133,1516,0.17,1517,0.137,1521,0.678,1527,0.17,1528,0.524,1532,0.229,1535,0.133,1536,0.27,1538,0.867,1541,0.36,1542,0.118,1543,0.897,1544,0.227,1545,1.052,1546,0.115,1548,0.137,1558,0.907,1560,2.312,1562,0.465,1564,0.698,1566,1.188,1572,0.61,1575,0.227,1578,0.259,1586,1.355,1588,0.242,1590,0.985,1591,0.242,1593,0.751,1594,0.497,1595,0.971,1606,0.374,1608,0.242,1609,0.341,1610,0.383,1614,0.347,1615,0.892,1620,1.036,1630,0.139,1635,0.13,1639,1.598,1654,1.091,1656,1.67,1658,0.128,1661,0.692,1664,0.135,1672,0.968,1673,0.124,1674,0.266,1675,0.127,1676,0.658,1677,0.968,1679,0.365,1690,0.111,1693,0.161,1696,0.176,1701,0.539,1702,0.917,1707,2.83,1715,0.465,1725,0.135,1726,0.253,1728,0.146,1729,0.165,1731,0.292,1735,0.996,1736,0.533,1739,0.256,1741,0.907,1743,0.143,1744,0.12,1745,0.245,1747,0.151,1757,0.237,1758,5.104,1761,0.759,1770,2.559,1785,0.393,1806,0.539,1807,0.757,1812,1.525,1820,0.135,1822,0.245,1833,0.176,1837,0.13,1843,0.351,1845,0.711,1852,0.233,1854,0.922,1855,0.266,1857,0.154,1868,0.117,1885,0.123,1904,2.082,1906,0.724,1927,0.898,1937,0.126,1939,0.118,1942,0.139,1945,0.148,1947,1.918,1951,0.132,1957,1.9,1958,0.48,1968,3.277,1969,0.326,1977,0.823,1990,0.128,1995,0.146,1996,0.223,1997,0.157,2000,0.888,2002,0.13,2011,0.176,2022,0.143,2025,0.388,2026,0.335,2028,0.256,2029,0.17,2032,0.548,2038,0.124,2043,0.146,2045,2.282,2052,0.523,2053,0.161,2054,0.157,2060,1.625,2061,0.137,2062,0.481,2063,0.191,2066,0.417,2068,0.297,2070,0.157,2072,0.151,2081,0.176,2087,0.579,2107,0.161,2109,0.326,2118,0.133,2127,4,2128,0.509,2130,0.523,2132,0.31,2134,0.297,2148,0.928,2153,0.898,2163,0.141,2186,0.278,2188,0.678,2206,0.417,2207,0.165,2215,1.035,2216,0.132,2220,0.161,2240,1.599,2247,0.191,2270,0.161,2273,1.959,2300,0.17,2308,0.292,2309,1.672,2326,0.161,2327,0.165,2330,0.567,2333,0.303,2338,1.033,2348,0.146,2360,0.157,2362,0.157,2376,1.623,2377,0.154,2379,0.556,2385,0.556,2390,0.141,2394,0.31,2396,0.148,2398,0.165,2405,1.082,2409,0.577,2410,0.698,2420,0.183,2422,0.176,2423,0.266,2448,0.146,2452,0.123,2459,0.143,2469,0.25,2488,0.13,2497,0.148,2533,0.143,2536,0.811,2539,0.165,2546,0.17,2547,2.787,2554,0.326,2566,0.151,2579,3.2,2580,3.196,2581,0.161,2583,0.393,2588,0.658,2593,0.567,2604,0.975,2624,0.161,2630,0.154,2646,1.73,2647,0.161,2674,0.151,2675,0.841,2696,0.448,2698,4.124,2719,0.148,2729,0.161,2735,0.292,2739,0.346,2744,0.256,2745,0.154,2751,0.17,2761,0.278,2768,0.191,2799,0.139,2811,0.146,2812,0.165,2813,0.191,2828,0.326,2837,0.577,2839,0.292,2846,0.297,2850,1.502,2870,2.013,2873,0.36,2875,0.744,2895,0.141,2901,0.31,2909,0.548,2913,0.31,2940,0.139,2968,0.317,2970,0.698,2977,0.191,2980,1.502,3048,0.161,3062,0.828,3103,0.17,3105,0.154,3217,0.139,3218,0.326,3407,0.157,3414,0.183,3463,0.183,3464,0.17,3477,0.948,3479,1.235,3520,0.161,3533,0.376,3538,0.556,3539,0.556,3547,0.556,3548,0.531,3553,0.556,3585,0.27,3623,1.029,3628,0.17,3630,0.346,3666,4.159,3685,0.828,3696,0.17,3725,0.202,3755,0.759,3757,0.742,3789,0.17,3794,0.31,3817,0.191,3827,2.936,3832,0.135,3853,0.17,3877,0.36,3891,5.66,3915,0.183,3952,0.616,3960,0.292,4023,0.165,4026,0.98,4027,0.802,4034,0.165,4046,0.165,4051,1.991,4083,0.303,4109,0.398,4125,0.183,4156,0.602,4246,0.469,4283,0.176,4307,0.759,4320,0.481,4321,0.183,4371,0.202,4384,0.183,4400,0.589,4441,0.509,4444,0.469,4452,0.176,4457,0.376,4465,2.929,4476,0.481,4477,0.17,4480,3.372,4482,1.426,4512,0.176,4537,0.165,4538,3.474,4539,2.324,4542,0.157,4545,0.165,4553,0.326,4557,1.778,4559,1.882,4563,0.176,4565,0.556,4566,1.224,4567,0.183,4569,0.556,4570,1.679,4571,3.194,4578,0.531,4588,4.785,4591,0.202,4593,4.315,4596,0.481,4599,0.398,4627,0.146,4643,2.96,4651,0.191,4652,0.376,4674,0.376,4675,0.73,4681,4.146,4685,4.232,4688,0.556,4705,0.326,4709,0.292,4717,1.531,4718,0.531,4727,0.602,4764,0.183,4770,0.176,4775,0.191,4777,0.191,4778,0.191,4779,0.191,4780,0.183,4781,0.191,4782,0.191,4783,0.191,4784,0.191,4785,0.651,4786,0.191,4788,0.176,4792,0.191,4818,0.448,4834,0.17,4847,8.702,4848,8.515,4849,6.958,4850,2.719,4852,0.9,4855,5.753,4857,0.191,4864,1.164,4887,0.183,4914,0.202,4932,2.255,4943,0.589,4944,0.632,5002,1.875,5033,0.346,5076,0.183,5141,2.607,5142,2.005,5143,2.359,5144,1.822,5145,2.078,5146,1.064,5147,1.064,5148,1.224,5173,1.017,5189,0.202,5198,0.176,5241,0.143,5247,0.202,5260,0.802,5261,0.98,5283,0.602,5304,0.161,5336,0.176,5374,0.86,5386,0.183,5417,0.191,5473,0.202,5546,0.17,5548,0.346,5558,0.651,5578,0.183,5588,0.191,5592,0.191,5629,0.191,5657,0.191,5728,0.376,5814,0.191,6082,0.495,6114,0.346,6192,0.202,6228,0.191,6233,0.531,6234,0.9,6244,1.623,6251,0.376,6253,0.376,6254,0.191,6256,0.191,6258,0.191,6260,0.191,6262,0.191,6400,0.73,6431,0.202,6460,0.202,6472,0.531,6502,0.556,6515,0.73,6518,1.127,6526,1.962,6530,0.589,6532,2.724,6534,0.335,6568,0.191,6576,0.176,6588,0.202,6590,0.202,6591,0.202,6592,0.202,6593,0.202,6594,0.191,6595,0.376,6596,0.202,6599,0.202,6602,0.191,6603,0.202,6610,0.398,6611,0.398,6620,1.128,6621,0.953,6627,0.191,6637,8.558,6643,0.202,6646,0.202,6647,0.774,6648,0.398,6650,1.93,6667,1.128,6669,1.128,6676,2.499,6682,0.202,6725,0.202,6828,0.176,6867,0.202,6869,0.202,6870,0.589,6874,0.202,6907,0.202,7083,1.128,7091,0.202,7092,0.398,7093,0.398,7094,0.202,7095,0.774,7096,0.202,7097,0.202,7098,0.202,7099,0.398,7100,0.202,7101,0.202,7102,0.202,7103,0.202,7104,0.202,7105,0.202,7106,0.202,7107,1.128,7108,0.398,7109,0.398,7110,0.202,7111,1.128,7112,1.128,7113,1.128,7114,1.128,7115,0.202,7116,0.202,7117,0.589,7118,0.589,7119,0.672,7120,0.589,7121,0.774,7122,0.202,7123,0.202,7124,0.774,7125,0.202,7126,0.202,7127,0.774,7128,0.202,7129,0.202,7130,0.774,7131,0.202,7132,0.202,7133,0.202,7134,0.202,7135,0.774,7136,0.774,7137,0.774,7138,0.774,7139,0.202,7140,0.398,7142,0.202,7143,0.202,7144,0.202,7145,0.202,7146,0.202,7147,0.202,7148,0.202,7149,0.202,7150,0.202,7151,0.202,7152,0.202,7153,0.202,7154,0.202,7155,0.202,7156,0.202,7157,0.202,7162,0.398,7164,0.589,7165,0.589,7166,0.589,7167,0.589,7168,0.589,7169,0.589,7170,0.589,7171,0.589,7172,0.589,7173,0.589,7174,0.589,7175,0.589,7176,0.589,7177,0.589,7178,0.589,7179,0.589,7180,0.589,7181,0.589,7182,0.589,7183,0.589,7184,0.589,7185,0.589,7186,0.589,7187,0.589,7188,0.589,7189,0.589,7190,0.589,7191,0.589,7192,0.589,7193,0.589,7194,0.589,7195,0.589,7196,0.589,7197,0.589,7198,0.589,7199,0.589,7200,0.589,7201,0.589,7202,0.589,7203,0.589,7204,0.589,7205,0.589,7206,0.589,7207,0.589,7208,0.589,7209,0.589,7210,0.589,7211,0.589,7212,0.589,7213,0.589,7214,0.589,7215,0.589,7216,0.589,7217,0.589,7218,0.589,7219,0.589,7220,0.589,7221,0.589,7222,0.589,7223,0.589,7224,0.589,7225,0.589,7226,0.589,7227,0.589,7228,0.589,7229,0.589,7230,0.589,7231,0.589,7232,0.589,7233,0.589,7234,0.589,7235,0.589,7236,0.589,7237,0.589,7238,0.589,7239,0.589,7240,0.589,7241,0.589,7242,0.589,7243,0.589,7244,0.589,7245,0.589,7246,0.589,7247,0.589,7248,0.589,7249,0.589,7250,0.589,7251,0.589,7252,0.589,7253,0.589,7254,0.589,7255,0.589,7256,0.589,7257,0.589,7258,0.589,7259,0.589,7260,0.589,7261,0.589,7262,0.589,7263,0.589,7264,0.589,7265,0.589,7266,0.589,7267,0.589,7268,0.589,7269,0.589,7270,0.774,7271,0.589,7272,0.589,7273,0.953,7274,0.589,7275,0.589,7276,0.774,7277,0.589,7278,0.589,7279,0.589,7280,0.589,7281,0.589,7282,0.589,7283,0.589,7284,0.589,7285,0.589,7286,0.589,7287,0.589,7288,0.589,7289,0.589,7290,0.589,7291,0.589,7292,0.589,7293,0.589,7294,0.589,7295,0.589,7296,0.589,7297,0.589,7298,0.589,7299,0.589,7300,0.589,7301,0.589,7302,0.589,7303,0.589,7304,0.589,7305,0.589,7306,0.589,7307,0.589,7308,0.589,7309,0.589,7310,0.589,7311,0.589,7312,0.589,7313,0.589,7314,0.589,7315,0.589,7316,0.589,7317,0.589,7318,0.589,7319,0.589,7320,0.589,7321,0.589,7322,0.589,7323,0.589,7324,0.589,7325,0.589,7326,0.589,7327,0.589,7328,0.589,7329,0.589,7330,0.589,7331,0.589,7332,0.589,7333,0.589,7334,0.589,7335,0.589,7336,0.589,7337,0.589,7338,0.589,7339,0.589,7340,0.589,7341,0.589,7342,0.589,7343,0.589,7344,0.589,7345,0.589,7346,0.589,7347,0.589,7348,0.589,7349,0.589,7350,0.589,7351,0.589,7352,0.589,7353,0.589,7354,0.589,7355,0.589,7356,0.589,7357,0.589,7358,0.589,7359,0.589,7360,0.589,7361,0.589,7362,0.589,7363,0.589,7364,0.589,7365,0.589,7366,0.589,7367,0.589,7368,0.589,7369,0.589,7370,0.589,7371,0.589,7372,0.589,7373,0.589,7374,0.589,7375,0.589,7376,0.589,7377,0.589,7378,0.589,7379,0.589,7380,0.589,7381,0.589,7382,0.589,7383,0.589,7384,0.774,7385,0.589,7386,0.589,7387,0.589,7388,0.589,7389,0.589,7390,0.589,7391,0.589,7392,0.589,7393,0.589,7394,0.589,7395,0.589,7396,0.589,7397,0.589,7398,0.589,7399,0.589,7400,0.589,7401,0.589,7402,0.589,7403,0.589,7404,0.589,7405,0.589,7406,0.589,7407,0.589,7408,0.589,7409,0.398,7410,0.398,7411,0.202,7412,0.202,7413,0.202,7414,0.953,7417,0.202,7418,0.589,7419,0.202,7420,0.589,7421,1.409,7422,0.202,7423,0.202,7424,0.398,7425,0.398,7426,0.398,7427,0.202,7428,0.202,7429,0.398,7430,0.398,7431,0.398,7432,0.202,7433,0.398,7434,0.202,7435,5.442,7436,0.202,7437,0.202,7438,0.202,7439,0.202,7440,0.202,7441,0.202,7442,0.202,7443,0.202,7444,0.202,7445,0.202,7446,0.202,7447,0.202,7448,0.202,7449,0.202,7450,0.202,7451,0.202,7452,0.202,7453,0.202,7454,0.202,7455,0.202,7456,0.202,7457,0.202,7458,1.462,7459,1.462,7460,0.202,7461,0.202,7462,0.398,7463,0.398,7464,0.202,7465,0.202,7466,0.774,7467,1.462,7468,0.774,7469,0.774,7470,0.774,7471,2.078,7472,0.398,7473,0.398,7474,0.398,7475,2.078,7476,0.398,7477,0.398,7478,0.398,7479,2.078,7480,0.398,7481,0.398,7482,0.398,7483,2.078,7484,0.398,7485,0.398,7486,0.398,7487,0.202,7488,0.202,7489,0.202,7490,0.202,7491,0.774,7492,0.202,7493,0.202,7494,0.774,7495,0.202,7496,0.202,7497,0.774,7498,0.202,7499,0.202,7500,0.774,7594,1.698,7602,0.191,7605,0.191,7624,3.592,7628,0.191,7653,0.774,7677,0.191,7678,0.191,7679,0.191,7689,0.774,7744,1.297,7747,0.589,7752,0.202,7778,0.202,7779,0.202,7780,0.398,7783,0.202,7795,1.462,7802,0.202,7915,0.191,8022,0.398,8023,0.398,8024,0.398,8025,0.398,8026,0.589,8027,0.589,8028,0.589,8046,0.398,8089,0.202,8091,0.202,8093,0.202,8094,0.202,8096,0.202,8099,0.202,8100,0.202,8101,0.202,8102,0.202,8125,0.202,8129,0.202,8132,0.202,8145,0.774,8194,0.202,8201,0.202,8226,0.556,8227,0.202,8228,0.202,8229,0.202,8246,0.202,8247,0.202,8248,0.202,8249,0.202,8268,0.202,8271,0.202,8272,0.202,8294,0.202,8295,0.202,8296,0.202,8297,0.202,8313,0.202,8314,0.202,8322,0.202,8332,0.202,8333,0.202,8448,0.202,8449,0.202,8464,0.202,8465,0.202,8466,0.202,8467,0.202,8468,0.202,8469,0.202,8485,0.202,8511,0.202,8531,0.202,8532,0.202,8537,0.202,8538,0.202,8542,0.202,8547,0.202,8551,0.202,8552,0.202,8577,0.202,8586,0.202,8588,0.202,8589,0.202,8595,0.202,8617,0.202,8621,0.202,8622,0.202,8629,0.202,8632,0.202,8635,0.202,8641,0.202,8642,0.202,8651,0.202,8677,0.398,8678,0.398,8691,1.297,8692,3.135,8699,5.782,8700,1.462,8703,0.202,8704,0.202,8705,0.202,8706,0.589,8707,0.202,8708,0.589,8709,0.202,8710,0.202,8711,0.202,8712,0.589,8713,0.202,8714,0.202,8715,0.589,8716,0.202,8717,0.202,8718,0.589,8719,0.202,8720,0.202,8721,0.589,8722,0.202,8723,0.202,8724,0.589,8725,0.202,8726,0.589,8727,0.202,8728,0.589,8729,0.202,8730,0.202,8731,0.589,8732,0.202,8733,0.202,8734,0.589,8735,0.589,8736,0.589,8737,0.774,8738,0.589,8739,0.202,8740,0.202,8741,0.202,8742,0.202,8743,0.589,8744,0.589,8745,0.398,8746,0.202,8747,0.589,8748,0.202,8749,0.589,8750,0.202,8751,0.589,8752,0.589,8753,0.589,8754,0.202,8755,0.202,8756,0.589,8757,0.202,8758,0.589,8759,0.202,8760,0.589,8761,0.202,8762,0.202,8763,0.589,8764,0.202,8765,0.202,8766,0.589,8767,0.202,8768,0.589,8769,0.202,8770,0.202,8771,0.589,8772,0.202,8773,0.202,8774,0.589,8775,0.202,8776,1.128,8777,0.202,8778,0.202,8779,0.202,8780,1.128,8781,0.202,8782,0.202,8783,0.202,8784,1.128,8785,0.202,8786,0.202,8787,1.128,8788,0.202,8789,0.202,8790,1.128,8791,0.202,8792,1.128,8793,0.202,8794,0.202,8795,1.128,8796,1.128,8797,0.202,8798,0.202,8799,1.128,8800,0.202,8801,0.202,8802,1.128,8803,0.202,8804,0.202,8805,1.128,8806,0.202,8807,1.128,8808,0.202,8809,1.128,8810,0.202,8811,0.191,8812,1.128,8813,0.202,8814,0.202,8815,1.128,8816,0.202,8817,1.128,8818,0.202,8819,0.589,8820,0.202,8821,0.202,8822,0.202,8823,0.589,8824,0.202,8825,0.202,8826,0.589,8827,0.202,8828,0.202,8829,0.589,8830,0.202,8831,0.202,8832,0.589,8833,0.202,8834,0.202,8835,0.589,8836,0.202,8837,0.589,8838,0.202,8839,0.202,8840,0.589,8841,0.202,8842,0.589,8843,0.202,8844,0.202,8845,0.589,8846,0.589,8847,0.202,8848,0.589,8849,0.202,8850,0.589,8851,0.398,8852,0.202,8853,0.589,8854,0.202,8855,0.202,8856,0.589,8857,0.202,8858,0.589,8859,0.202,8860,0.202,8861,0.202,8862,0.202,8863,0.202,8864,0.202,8865,0.398,8866,0.202,8867,0.202,8869,0.202,8876,1.27,8877,2.763,8878,0.398,8879,0.953,8880,3.014,8881,2.763,8882,2.763,8883,2.222,8884,2.078,8885,1.93,8886,0.191,8887,0.202,8888,0.202,8889,0.202,8890,0.202,8891,0.589,8892,0.589,8893,0.398,8894,0.398,8895,0.774,8896,0.774,8897,0.202,8898,0.202,8899,0.774,8900,0.774,8901,0.774,8902,0.774,8903,0.398,8904,0.774,8905,0.398,8906,0.398,8907,0.202,8908,0.398,8909,0.589,8910,0.398,8911,0.589,8912,0.202,8913,0.589,8914,0.432,8915,0.219,8916,0.219,8917,3.53,8918,2.856,8919,0.219,8920,0.639,8921,1.223,8922,0.639,8923,0.839,8924,0.639,8925,0.432,8926,0.219,8927,0.639,8928,0.219,8929,0.219,8930,0.432,8931,0.219,8932,0.432,8933,0.432,8934,0.219,8935,0.432,8936,0.639,8937,4.35,8938,0.219,8939,0.219,8940,0.219,8941,0.219,8942,0.219,8943,0.219,8944,0.219,8945,0.219,8946,0.839,8947,0.219,8948,0.219,8949,0.432,8950,0.432,8951,0.219,8952,0.432,8953,1.929,8954,0.398,8955,0.219,8956,0.219,8957,0.219,8958,0.219,8959,0.219,8960,0.219,8961,0.219,8962,0.219,8963,0.219,8964,0.219,8965,0.219,8966,0.219,8967,0.219,8968,0.219,8969,0.219,8970,0.219,8971,0.219,8972,0.219,8973,0.219,8974,0.219,8975,0.219,8976,0.219,8977,0.219,8978,0.219,8979,0.219,8980,0.219,8981,0.219,8982,0.219,8983,0.219,8984,0.219,8985,0.219,8986,0.219,8987,0.219,8988,0.219,8989,0.219,8990,0.219,8991,0.219,8992,0.219,8993,0.219,8994,0.219,8995,2.094,8996,0.219,8997,0.219,8998,0.219,8999,0.219,9000,0.219,9001,0.219,9002,0.219,9003,0.219,9004,0.219,9005,0.219,9006,0.219,9007,0.219,9008,0.219,9009,0.219,9010,0.219,9011,0.219,9012,0.219,9013,0.219,9014,0.219,9015,0.219,9016,0.219,9017,0.219,9018,0.219,9019,0.219,9020,0.219,9021,0.219,9022,0.219,9023,0.219,9024,0.219,9025,0.219,9026,0.432,9027,0.432,9028,1.76,9029,0.219,9030,2.563,9031,2.712,9032,4.561,9033,4.561,9034,2.094,9035,1.929,9036,1.929,9037,4.457,9038,0.432,9039,0.432,9040,1.76,9041,4.765,9042,0.219,9043,0.219,9044,0.219,9045,0.219,9046,0.219,9047,0.219,9048,0.219,9049,0.219,9050,0.432,9051,0.432,9052,0.219,9053,0.219,9054,0.219,9055,0.219,9056,2.712,9057,0.839,9058,0.432,9059,0.432,9060,0.219,9061,0.432,9062,0.219,9063,0.839,9064,0.432,9065,1.407,9066,0.432,9067,0.219,9068,1.407,9069,0.219,9070,1.407,9071,0.219,9072,1.034,9073,0.219,9074,0.432,9075,0.219,9076,0.219,9077,0.219,9078,0.219,9079,0.219,9080,0.432,9081,0.219,9082,0.219,9083,0.219,9084,0.219,9085,0.432,9086,0.219,9087,0.219,9088,0.219,9089,0.219,9090,0.219,9091,1.76,9092,1.407,9093,0.219,9094,0.219,9095,0.219,9096,0.432,9097,0.219,9098,1.407,9099,0.219,9100,0.219,9101,2.094,9102,0.219,9103,0.219,9104,0.219,9105,0.432,9106,0.432,9107,0.219,9108,0.219,9109,0.219,9110,0.219,9111,0.432,9112,0.432,9113,0.219,9114,0.219,9115,0.219,9116,0.432,9117,0.398,9118,0.219,9119,0.219,9120,0.219,9121,0.219,9122,0.219,9123,0.219,9124,0.639,9125,0.219,9126,0.219,9127,0.639,9128,0.639,9129,0.839,9130,0.639,9131,0.432,9132,0.839,9133,0.432,9134,0.432,9135,0.432,9136,0.219,9137,0.839,9138,0.432,9139,0.432,9140,0.432,9141,0.432,9142,0.432,9143,0.432,9144,0.219,9145,0.219,9146,0.219,9147,0.432,9148,0.219,9149,0.219,9150,0.432,9151,0.432,9152,0.432,9153,0.432,9154,0.432,9155,0.432,9156,0.219,9157,0.219,9158,0.219,9159,0.219,9160,0.432,9161,0.219,9162,0.219,9163,0.432,9164,0.219,9165,0.432,9166,0.219,9167,0.219,9168,0.432,9169,0.219,9170,0.219,9171,0.432,9172,0.219,9173,0.219,9174,0.219,9175,0.432,9176,0.219,9177,0.219,9178,2.254,9179,0.219,9180,0.219,9181,0.432,9182,0.432,9183,0.639,9184,0.219,9185,0.639,9186,0.219,9187,0.219,9188,0.219,9189,0.432,9190,0.432,9191,0.432,9192,0.432,9193,0.219,9194,0.219,9195,0.219,9196,0.219,9197,0.219,9198,0.219,9199,0.219,9200,0.219,9201,0.219,9202,0.219,9203,0.219,9204,0.219,9205,0.432,9206,0.219,9207,0.219,9208,0.219,9209,0.432,9210,0.639,9211,0.639,9212,0.639,9213,0.432,9214,0.432,9215,0.432,9216,0.639,9217,0.839,9218,0.839,9219,0.839,9220,0.839,9221,0.219,9222,1.223,9223,1.407,9224,1.223,9225,1.407,9226,0.219,9227,0.219,9228,0.839,9229,0.839,9230,0.639,9231,1.034,9232,0.219,9233,0.219,9234,0.219,9235,0.639,9236,0.219,9237,0.219,9238,0.219,9239,0.219,9240,0.219,9241,0.219,9242,0.219,9243,0.219,9244,0.219,9245,0.219,9246,0.219,9247,0.219,9248,0.219,9249,0.219,9250,0.219,9251,0.219,9252,0.219,9253,0.432,9254,0.219,9255,0.219,9256,0.219,9257,0.219,9258,0.219,9259,0.432,9260,0.219,9261,0.219,9262,0.219,9263,0.219,9264,0.219,9265,0.219,9266,0.219,9267,0.219,9268,0.219,9269,1.223,9270,0.219,9271,0.219,9272,0.219,9273,0.219,9274,0.219,9275,0.219,9276,0.219,9277,0.219,9278,0.219,9279,0.219,9280,0.219,9281,0.219,9282,0.219,9283,0.219,9284,0.219,9285,0.219,9286,0.219,9287,0.219,9288,0.219,9289,0.219,9290,0.219,9291,0.219,9292,0.219,9293,1.223,9294,0.219,9295,0.432,9296,0.839,9297,0.219,9298,0.839,9299,0.219,9300,0.432,9301,0.219,9302,0.639,9303,0.432,9304,0.639,9305,0.432,9306,0.639,9307,0.432,9308,0.219,9309,0.219,9310,0.219,9311,0.219,9312,0.219,9313,0.219,9314,0.219,9315,0.219,9316,0.219,9317,0.219,9318,0.219,9319,0.219,9320,0.219,9321,0.219,9322,0.219,9323,0.432,9324,0.432,9325,0.219,9326,0.432,9327,0.432,9328,0.219,9329,0.219,9330,0.219,9331,0.219,9332,0.219,9333,0.839,9334,0.432,9335,0.432,9336,0.219,9337,0.219,9338,0.639,9339,0.219,9340,0.839,9341,0.219,9342,0.839,9343,0.219,9344,0.639,9345,0.219,9346,0.219,9347,0.219,9348,0.219,9349,0.219,9350,0.219,9351,0.219,9352,0.219,9353,0.219,9354,0.432,9355,0.219,9356,0.219,9357,0.219,9358,0.219,9359,0.219,9360,0.219,9361,0.219,9362,0.219,9363,0.219,9364,0.839,9365,0.219,9366,0.219,9367,0.839,9368,0.219,9369,0.219,9370,0.639,9371,0.219,9372,0.219,9373,0.639,9374,0.219,9375,0.219,9376,0.639,9377,0.219,9378,0.219,9379,0.219,9380,0.219,9381,0.219,9382,0.432,9383,0.219,9384,0.432,9385,0.219,9386,0.432,9387,0.219,9388,0.219,9389,0.219,9390,0.432,9391,0.219,9392,0.219,9393,0.432,9394,0.219,9395,0.219,9396,0.219,9397,0.219,9398,0.432,9399,0.219,9400,0.432,9401,0.219,9402,0.219,9403,0.219,9404,0.219,9405,0.219,9406,0.219,9407,0.219,9408,0.219,9409,0.639,9410,0.219,9411,0.219,9412,0.219,9413,0.219,9414,0.219,9415,1.223,9416,1.034,9417,0.839,9418,0.639,9419,0.219,9420,1.407,9421,1.223,9422,1.034,9423,0.839,9424,0.839,9425,1.586,9426,0.219,9427,0.219,9428,0.219,9429,0.219,9430,0.219,9431,0.219,9432,1.223,9433,0.219,9434,0.219,9435,0.219,9436,0.219,9437,0.219,9438,0.219,9439,0.219,9440,0.219,9441,0.219,9442,0.219,9443,0.219,9444,0.219,9445,0.219,9446,0.219,9447,0.219,9448,0.219,9449,0.219,9450,0.219,9451,0.219,9452,0.219,9453,0.219,9454,0.219,9455,0.219,9456,0.219,9457,0.219,9458,0.219,9459,0.219,9460,0.219,9461,0.219,9462,0.219,9463,0.219,9464,0.219,9465,0.219,9466,0.219,9467,0.219,9468,0.219,9469,0.219,9470,0.219,9471,0.219,9472,0.219,9473,0.219,9474,0.219,9475,0.219,9476,0.219,9477,0.219,9478,0.219,9479,0.219,9480,0.219,9481,0.219,9482,0.219,9483,0.432,9484,0.432,9485,0.219,9486,0.219,9487,0.219,9488,0.219,9489,0.219,9490,0.219,9491,0.219,9492,0.219,9493,0.219,9494,0.219,9495,0.219,9496,0.219,9497,0.432,9498,0.219,9499,0.219,9500,0.219,9501,0.219,9502,0.219,9503,0.219,9504,0.219,9505,0.219,9506,0.219,9507,0.219,9508,0.219,9509,0.839,9510,0.432,9511,0.219,9512,0.219,9513,0.219,9514,0.219,9515,0.219,9516,0.219,9517,0.219,9518,0.219,9519,0.219,9520,0.219,9521,0.219,9522,0.219,9523,0.219,9524,0.219,9525,0.219,9526,0.219,9527,0.219,9528,0.219]],["component/52",[5,0.286]],["keyword/52",[]],["title/53-1",[516,24.506,540,27.836,1538,27.486]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["keyword/53-1",[]],["title/53-2",[183,28.586,738,28.834,1538,24.729,1593,26.068,2536,36.501]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["keyword/53-2",[]],["title/53-3",[1538,35.372,9529,72.562]],["name/53-3",[]],["text/53-3",[]],["component/53-3",[]],["keyword/53-3",[]],["title/53-4",[851,41.245,1538,35.372]],["name/53-4",[]],["text/53-4",[]],["component/53-4",[]],["keyword/53-4",[]],["title/53-5",[1538,35.372,9530,72.562]],["name/53-5",[]],["text/53-5",[]],["component/53-5",[]],["keyword/53-5",[]],["title/53-6",[1538,35.372,9531,78.726]],["name/53-6",[]],["text/53-6",[]],["component/53-6",[]],["keyword/53-6",[]],["title/53-7",[1538,30.934,2354,46.473,7076,57.255]],["name/53-7",[]],["text/53-7",[]],["component/53-7",[]],["keyword/53-7",[]],["title/53-8",[1538,27.486,1830,42.074,4815,44.908,7076,50.872]],["name/53-8",[]],["text/53-8",[]],["component/53-8",[]],["keyword/53-8",[]],["title/53-9",[3,34.312,362,24.425,735,30.499,1538,24.729,4536,45.769]],["name/53-9",[]],["text/53-9",[]],["component/53-9",[]],["keyword/53-9",[]],["title/53-10",[1538,30.934,4795,53.374,7594,51.864]],["name/53-10",[]],["text/53-10",[]],["component/53-10",[]],["keyword/53-10",[]],["title/53",[247,28.016,516,17.476,808,38.137,1538,27.486]],["name/53",[516,0.216,1538,0.34]],["text/53",[0,0.389,1,0.383,5,0.769,6,0.725,8,0.401,9,0.446,21,0.545,29,0.61,31,1.21,46,0.452,52,0.607,138,0.531,139,0.997,154,0.545,182,5.083,183,1.681,185,1.669,188,0.846,193,1.192,207,0.427,214,0.515,221,3.945,225,2.495,239,1.093,245,0.563,246,0.424,247,2.219,250,0.83,255,1.794,263,6.419,279,2.85,286,3.148,299,0.545,303,0.76,306,0.475,315,1.426,316,0.515,325,0.625,326,2.976,335,0.563,344,0.982,346,0.41,353,0.939,357,0.768,360,1.21,366,5.264,369,1.522,371,1.614,392,0.468,393,0.607,406,0.599,407,0.599,411,0.846,412,0.529,417,1.544,432,2.306,438,0.545,442,0.616,465,0.489,470,1.154,476,1.245,483,3.864,498,0.443,502,0.991,505,0.591,506,0.534,516,2.325,526,1.555,527,0.464,539,1.043,540,5.806,541,1.067,547,0.506,553,0.932,554,2.468,565,0.755,596,0.515,707,3.275,712,2.878,725,2.327,731,1.007,734,2.167,735,4.399,738,2.006,745,3.649,747,3.669,768,2.167,808,0.607,831,4.404,834,1.461,836,2.683,847,1.706,850,0.576,851,0.51,860,3.003,910,3.777,950,1.231,965,0.551,967,1.94,1016,2.438,1026,1.801,1103,1.308,1229,0.471,1238,0.576,1248,3.382,1281,3.979,1476,1.913,1477,1.689,1479,0.563,1482,0.489,1487,0.478,1500,0.401,1501,1.455,1531,0.489,1532,0.515,1538,1.454,1543,1.032,1544,0.51,1546,0.51,1557,0.657,1572,1.283,1575,0.51,1578,0.583,1586,0.515,1593,1.218,1594,4.571,1595,0.42,1606,0.57,1609,0.973,1614,0.529,1620,0.902,1621,1.339,1661,0.551,1674,1.582,1675,1.055,1677,0.67,1715,1.011,1716,0.78,1736,0.502,1743,0.635,1758,1.541,1768,0.591,1815,0.57,1819,0.715,1820,1.122,1837,0.576,1854,0.956,1862,0.545,1863,0.734,1877,2.271,1883,0.57,1885,0.545,1904,0.896,1914,1.339,1919,5.419,1938,0.563,1939,1.385,1968,0.67,1977,2.24,1990,1.067,2012,0.683,2020,0.576,2028,0.576,2034,1.505,2045,1.742,2057,0.698,2146,0.657,2149,6.246,2186,0.625,2206,0.635,2273,2.295,2330,0.657,2343,0.83,2405,1.122,2414,1.231,2423,0.599,2444,1.107,2452,2.442,2454,6.28,2507,0.698,2524,0.898,2536,1.21,2580,0.698,2588,0.524,2672,0.715,2674,6.622,2675,4.158,2689,0.657,2702,0.78,2719,0.657,2809,0.635,2834,1.805,2837,6.459,2839,6.713,2850,0.698,2851,0.734,2870,0.625,2871,0.591,2889,1.254,2890,0.755,2916,4.81,2953,1.414,3217,0.616,3219,1.137,3416,1.888,3529,4.021,3585,0.607,3615,1.231,3678,3.494,3779,0.715,3800,0.81,3893,1.706,3895,3.382,4051,1.339,4082,0.81,4083,0.683,4210,1.587,4246,0.715,4295,0.898,4298,0.715,4444,6.894,4445,1.28,4447,3.756,4536,0.81,4547,4.074,4596,0.734,4598,2.816,4701,0.898,4705,6.275,4708,6.31,4709,3.27,4716,0.715,4721,2.54,4726,2.885,4727,1.845,4731,0.847,4735,2.816,4770,0.78,4795,1.994,4861,7.083,4907,8.654,4943,1.805,4944,8.926,4945,2.139,4954,2.371,4955,0.898,4956,0.898,4957,0.898,5022,3.556,5057,5.028,5063,4.392,5073,0.847,5076,8.884,5183,0.734,5300,0.81,5339,0.81,5340,0.81,5424,1.461,5453,0.847,5558,2.969,5627,2.06,5694,0.847,5816,0.81,6082,0.755,6216,1.414,6418,0.898,6432,2.371,6518,1.461,6763,0.847,7119,2.06,7530,4.596,7546,0.847,7594,1.938,7599,1.374,7628,6.303,7645,4.465,7646,5.236,7651,2.371,7664,6.432,7677,0.847,7678,1.587,7679,0.847,7683,1.681,7684,2.983,7685,0.898,7700,3.332,7737,1.681,7751,8.413,7753,2.371,7754,8.282,7755,6.677,7763,7.117,7764,6.432,7785,2.983,7786,0.898,7792,2.983,7793,1.681,7794,1.681,7800,1.681,7806,1.681,7808,7.117,7810,2.983,7812,7.677,7858,4.465,7859,8.282,7860,7.503,7862,2.371,7863,0.898,7864,5.573,7904,1.681,7908,4.868,7910,4.465,7912,0.898,7915,0.847,7916,0.898,7924,0.898,7944,2.371,7946,2.371,7975,4.021,8002,2.371,8007,4.021,8015,4.021,8059,7.677,8114,0.898,8138,1.681,8153,0.898,8186,1.681,8205,0.898,8226,2.816,8276,2.371,8277,0.898,8349,2.371,8350,1.681,8362,2.983,8364,1.681,8368,1.681,8382,0.898,8385,0.847,8421,0.898,8473,1.681,8555,0.898,8558,4.465,8559,4.021,8570,4.868,8580,2.371,8581,2.371,8583,2.238,8584,9.847,8644,2.371,8655,4.868,8811,0.847,9117,1.681,9529,0.898,9530,1.681,9532,3.796,9533,0.974,9534,0.974,9535,0.974,9536,0.974,9537,0.974,9538,0.974,9539,1.824,9540,0.974,9541,0.974,9542,3.83,9543,4.363,9544,0.974,9545,0.974,9546,0.974,9547,0.974,9548,0.974,9549,0.974,9550,2.572,9551,3.236,9552,0.974,9553,0.974,9554,0.974,9555,0.974,9556,0.974,9557,6.692,9558,0.974,9559,0.974,9560,0.974,9561,0.974,9562,0.974,9563,0.974,9564,0.974,9565,2.572,9566,3.236,9567,9.263,9568,1.824,9569,3.236,9570,3.236,9571,2.371,9572,10.388,9573,5.282,9574,4.363,9575,3.83,9576,5.282,9577,5.282,9578,2.572,9579,4.363,9580,3.236,9581,12.434,9582,11.565,9583,1.824,9584,2.572,9585,2.572,9586,2.572,9587,3.236,9588,0.974,9589,4.363,9590,0.974,9591,1.824,9592,4.845,9593,6.978,9594,1.824,9595,1.824,9596,1.824,9597,0.974,9598,2.572,9599,2.572,9600,5.681,9601,2.572,9602,2.572,9603,2.572,9604,1.824,9605,1.824,9606,1.824,9607,1.824,9608,1.824,9609,1.824,9610,1.824,9611,1.824,9612,1.824,9613,0.974,9614,2.572,9615,1.824,9616,1.824,9617,0.974,9618,1.824,9619,1.824,9620,0.898,9621,0.974,9622,0.974,9623,0.974,9624,0.974,9625,0.974,9626,0.974,9627,0.974,9628,0.974,9629,0.974,9630,0.974,9631,0.974,9632,0.974,9633,0.974,9634,0.974,9635,0.974,9636,0.974,9637,0.974,9638,0.974,9639,0.974,9640,0.974,9641,0.974,9642,0.974,9643,0.974,9644,1.824,9645,0.974,9646,0.974,9647,1.824,9648,0.974,9649,0.974,9650,1.824,9651,0.974,9652,0.974,9653,1.824,9654,0.974,9655,0.974,9656,1.824,9657,0.974,9658,0.974,9659,3.236,9660,1.824,9661,1.824,9662,1.824,9663,8.282,9664,6.168,9665,0.974,9666,5.282,9667,3.236,9668,9.074,9669,0.974,9670,5.282,9671,0.974,9672,3.236,9673,3.332,9674,1.824,9675,1.824,9676,1.824,9677,1.824,9678,1.681,9679,1.681,9680,1.587,9681,0.974,9682,0.974,9683,6.978,9684,5.282]],["component/53",[5,0.286]],["keyword/53",[]],["title/54-1",[138,10.334,193,18.419,233,25.341,483,26.678,576,19.677,2532,35.101]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["keyword/54-1",[]],["title/54",[29,13.126,161,11.904,185,17.12,193,14.463,233,19.899,483,20.949,576,15.451,2532,27.563,5132,32.664]],["name/54",[5132,1.178]],["text/54",[0,3.218,1,3.17,5,2.82,6,3.201,8,2.308,9,3.69,20,3.444,21,3.135,29,1.872,138,2.481,157,2.987,161,3.849,185,2.441,193,4.193,210,3.542,217,2.837,226,3.512,233,5.54,246,2.441,247,3.69,248,4.634,249,3.239,250,2.548,259,3.203,273,3.168,279,3.598,282,3.276,284,2.485,285,5.023,286,3.847,297,3.399,303,3.931,315,1.512,343,5.096,344,5.555,346,2.359,357,3.974,360,4.439,362,2.485,369,2.634,375,3.104,376,2.837,378,4.558,392,3.871,402,4.214,411,3.739,415,3.78,423,3.93,437,3.93,466,3.168,467,6.525,468,7.438,483,5.504,484,3.492,488,4.421,498,4.696,513,2.987,567,2.884,576,4.479,773,4.112,836,3.444,851,2.934,880,4.342,965,3.168,1093,2.815,1140,3.135,1148,3.043,1229,2.71,1238,3.315,1239,3.93,1487,2.75,1526,3.399,1536,3.492,1564,3.78,1575,2.934,1590,2.861,1610,4.828,1620,2.771,1622,3.043,1673,4.558,1694,3.203,1701,6.059,1754,3.315,1755,3.852,1756,3.852,1807,4.337,1814,4.219,1815,3.276,1843,4.421,1904,2.75,1939,3.015,1947,3.043,1952,3.203,1957,3.015,2050,3.714,2054,6.767,2055,4.657,2127,5.654,2154,4.337,2329,3.93,2372,3.542,2405,3.444,2467,4.342,2469,3.239,2532,7.242,2551,3.596,2566,3.852,2604,3.444,2742,4.873,2816,4.713,2849,3.78,2861,3.653,2873,6.7,3417,5.173,3483,4.485,3585,3.492,3621,4.219,3766,3.852,3960,3.78,4384,6.7,4409,4.657,4417,4.219,4448,4.657,4553,4.219,5088,5.162,5131,6.453,5132,9.985,5475,4.873,5590,4.657,5633,5.162,5817,4.873,6576,4.485,9685,5.162,9686,5.601,9687,5.601,9688,5.601,9689,5.601,9690,8.057]],["component/54",[5,0.286]],["keyword/54",[]],["title/55-1",[138,12.639,797,46.082,9691,61.173,9692,56.383]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["keyword/55-1",[]],["title/55-2",[188,31.95,235,39.811,468,41.253]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["keyword/55-2",[]],["title/55",[29,13.126,138,8.115,161,11.904,233,19.899,797,29.589,1082,25.62,1560,24.842,2656,21.551,5131,31.456]],["name/55",[5131,1.134]],["text/55",[0,0.768,1,0.756,2,1.918,5,1.013,6,1.347,8,0.792,9,0.88,20,3.373,29,0.642,31,3.509,46,0.892,52,1.198,138,2.292,161,2.261,182,3.541,188,2.545,193,3.615,209,3.703,213,2.598,221,1.514,226,2.391,228,3.338,233,4.579,235,1.112,237,1.182,243,0.937,246,0.838,247,1.553,248,1.665,249,1.961,250,3.395,255,1.065,263,6.417,264,1.035,268,2.144,279,4.643,280,1.216,282,4.04,284,1.505,286,4.785,294,1.045,298,1.983,303,5.109,315,3.149,327,1.641,334,1.138,335,1.112,337,1.49,338,1.065,341,1.124,343,2.144,344,1.035,351,1.792,353,2.825,357,4.224,359,4.817,360,1.595,369,0.904,371,4.651,376,4.856,377,3.42,378,1.918,392,0.923,402,4.165,411,4.328,416,3.249,417,3.786,428,1.983,435,2.779,441,2.085,465,1.704,466,1.087,468,3.287,470,3.469,476,3.342,477,2.836,482,2.085,483,2.426,485,1.254,488,3.434,498,1.543,502,2.472,513,3.338,540,1.543,541,1.124,545,2.304,554,1.584,567,1.746,574,1.563,576,4.09,602,3.206,707,3.373,732,1.271,733,1.065,773,1.411,790,1.298,797,6.566,860,1.016,881,1.254,897,3.192,899,1.411,900,2.489,908,1.087,910,2.007,911,4.561,918,0.951,928,1.007,965,1.918,967,4.231,1026,2.58,1062,1.216,1082,1.254,1093,0.966,1140,1.898,1153,3.469,1218,2.877,1229,0.93,1239,1.349,1476,4.957,1477,2.761,1482,2.757,1487,0.944,1507,3.754,1521,3.828,1522,1.076,1528,0.974,1538,1.523,1560,3.958,1590,0.982,1656,1.732,1661,1.087,1673,1.087,1674,1.182,1694,3.579,1701,4.018,1715,3.04,1725,2.797,1736,3.558,1741,1.939,1743,3.578,1744,1.055,1755,3.128,1756,3.773,1758,1.152,1822,1.087,1837,3.704,1841,1.167,1843,3.434,1852,1.035,1904,1.665,1906,1.138,1917,2.249,1919,4.847,1935,1.349,1939,1.035,1947,1.045,1951,5.416,1952,5.169,1957,4.866,1962,1.599,1969,1.448,1977,5.866,1979,1.349,1989,2.379,1996,1.746,1998,1.539,2000,1.076,2002,1.138,2003,1.216,2005,1.599,2034,1.124,2056,1.539,2127,1.152,2130,1.198,2154,5.684,2176,2.628,2183,2.144,2192,6.475,2273,3.287,2321,1.254,2358,1.254,2381,2.379,2384,2.431,2405,1.182,2418,1.198,2430,1.182,2444,3.329,2588,1.035,2593,1.298,2656,5.117,2675,3.773,2761,2.177,2816,1.983,2819,5.131,2837,2.332,2839,5.358,2924,2.95,2936,2.289,2980,1.378,3082,1.411,3097,1.599,3519,7.698,3585,1.198,3623,1.983,3775,4.561,3832,6.394,3893,1.275,4027,1.49,4083,5.861,4249,1.673,4409,1.599,4413,2.489,4417,1.448,4424,5.056,4444,7.037,4445,5.235,4464,1.772,4482,2.144,4562,2.628,4573,4.393,4575,6.689,4705,6.566,4708,5.355,4721,3.638,4726,2.554,4727,3.933,4733,1.448,4945,3.783,5004,1.49,5022,4.027,5131,5.012,5437,6.011,5475,3.958,5685,1.673,6497,1.599,7554,6.011,7575,6.367,7576,3.125,7577,1.772,7578,1.772,8583,7.267,9571,6.876,9685,1.772,9692,7.316,9693,1.922,9694,6.908,9695,8.352,9696,5.485,9697,3.39,9698,6.908,9699,5.485,9700,6.908,9701,3.39,9702,5.485,9703,5.485,9704,5.485,9705,5.485,9706,5.485,9707,3.39,9708,1.922,9709,6.259,9710,3.39,9711,1.922,9712,1.922,9713,5.485,9714,1.922,9715,3.39,9716,1.922,9717,1.922,9718,1.922,9719,6.259,9720,3.39,9721,1.922,9722,3.39,9723,1.922,9724,3.39,9725,3.39,9726,4.548,9727,1.922,9728,4.548,9729,4.548,9730,3.39,9731,1.922]],["component/55",[5,0.286]],["keyword/55",[]],["title/56-1",[138,12.639,139,23.712,327,29.599,2321,39.901]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["keyword/56-1",[]],["title/56",[29,14.138,138,8.741,139,16.399,161,12.822,327,20.471,2321,27.595,5129,33.881,5130,36.812]],["name/56",[5129,1.134]],["text/56",[0,3.158,1,3.111,5,1.93,6,3.83,8,1.717,9,1.908,14,2.902,23,2.243,29,1.392,31,3.038,138,2.642,139,4.471,142,3.447,147,4.627,149,3.326,150,3.058,161,2.7,193,4.247,196,3.653,206,5.125,207,3.906,221,3.531,226,4.636,240,4.31,246,3.882,247,2.958,248,2.046,250,1.896,257,2.382,258,4.879,272,2.046,279,5.15,284,1.849,286,3.632,288,6.906,294,3.509,296,2.357,298,4.625,301,2.923,306,2.031,311,2.597,314,5.439,315,1.125,323,2.264,326,2.183,327,4.934,329,2.437,330,2.146,347,1.884,350,5.05,351,2.202,361,2.987,370,2.466,373,3.822,388,5.215,392,2.001,395,2.409,402,1.86,412,2.264,417,1.987,421,3.354,437,4.532,470,2.635,479,2.865,483,2.222,497,2.528,498,3.598,505,2.528,509,2.675,523,2.597,531,4.18,533,6.393,539,2.382,546,5.272,547,2.164,568,2.923,589,4.93,772,3.058,799,2.332,802,3.354,851,3.383,890,2.409,897,4.532,911,5.37,932,3.869,1059,3.23,1140,4.427,1141,2.528,1332,4.359,1452,3.336,1477,4.252,1479,2.409,1489,6.539,1512,2.812,1521,3.579,1524,2.675,1538,1.872,1544,2.183,1546,2.183,1599,3.84,1602,6.881,1608,5.396,1609,4.217,1610,3.869,1620,3.913,1642,2.763,1644,4.084,1656,5.208,1661,3.653,1674,2.562,1676,2.243,1694,2.382,1741,3.693,1744,2.286,1757,2.286,1855,2.562,1943,4.865,1953,3.919,1990,2.437,2038,5.039,2061,2.597,2068,2.865,2190,2.923,2191,2.763,2240,2.332,2292,4.863,2321,7.777,2380,5.67,2430,5.927,2454,5.81,2458,2.923,2555,9.804,2588,2.243,2624,3.058,2760,3.138,2809,5.158,2825,3.138,2826,6.13,2851,8.688,2867,3.625,2916,2.675,2967,2.812,3217,2.635,3219,4.026,3456,3.625,3520,3.058,3623,3.777,3665,3.058,3832,2.562,3871,5.172,4034,3.138,4083,2.923,4407,3.625,4482,2.635,4818,2.923,4911,3.84,5079,8.016,5129,6.333,5130,3.625,5505,3.84,5664,3.625,5990,5.952,6392,10.99,6394,9.804,9732,3.84,9733,4.166,9734,4.166,9735,4.166,9736,4.166,9737,6.458,9738,3.84,9739,4.166]],["component/56",[5,0.286]],["keyword/56",[]],["title/57-1",[4475,56.452,9740,63.048]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["keyword/57-1",[]],["title/57-2",[735,50.934]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["keyword/57-2",[]],["title/57-3",[5138,79.976]],["name/57-3",[]],["text/57-3",[]],["component/57-3",[]],["keyword/57-3",[]],["title/57-4",[9741,84.717]],["name/57-4",[]],["text/57-4",[]],["component/57-4",[]],["keyword/57-4",[]],["title/57-5",[4450,76.436]],["name/57-5",[]],["text/57-5",[]],["component/57-5",[]],["keyword/57-5",[]],["title/57-6",[228,41.988,9742,72.562]],["name/57-6",[]],["text/57-6",[]],["component/57-6",[]],["keyword/57-6",[]],["title/57-7",[9743,84.717]],["name/57-7",[]],["text/57-7",[]],["component/57-7",[]],["keyword/57-7",[]],["title/57-8",[4451,73.608]],["name/57-8",[]],["text/57-8",[]],["component/57-8",[]],["keyword/57-8",[]],["title/57-9",[9744,84.717]],["name/57-9",[]],["text/57-9",[]],["component/57-9",[]],["keyword/57-9",[]],["title/57-10",[3223,76.436]],["name/57-10",[]],["text/57-10",[]],["component/57-10",[]],["keyword/57-10",[]],["title/57-11",[138,14.224,588,36.39,9740,55.137]],["name/57-11",[]],["text/57-11",[]],["component/57-11",[]],["keyword/57-11",[]],["title/57-12",[138,16.265,4451,63.048]],["name/57-12",[]],["text/57-12",[]],["component/57-12",[]],["keyword/57-12",[]],["title/57-13",[9745,84.717]],["name/57-13",[]],["text/57-13",[]],["component/57-13",[]],["keyword/57-13",[]],["title/57-14",[9746,84.717]],["name/57-14",[]],["text/57-14",[]],["component/57-14",[]],["keyword/57-14",[]],["title/57-15",[9747,84.717]],["name/57-15",[]],["text/57-15",[]],["component/57-15",[]],["keyword/57-15",[]],["title/57-16",[9748,84.717]],["name/57-16",[]],["text/57-16",[]],["component/57-16",[]],["keyword/57-16",[]],["title/57-17",[9749,84.717]],["name/57-17",[]],["text/57-17",[]],["component/57-17",[]],["keyword/57-17",[]],["title/57-18",[9750,84.717]],["name/57-18",[]],["text/57-18",[]],["component/57-18",[]],["keyword/57-18",[]],["title/57-19",[9751,84.717]],["name/57-19",[]],["text/57-19",[]],["component/57-19",[]],["keyword/57-19",[]],["title/57-20",[4642,79.976]],["name/57-20",[]],["text/57-20",[]],["component/57-20",[]],["keyword/57-20",[]],["title/57-21",[9752,84.717]],["name/57-21",[]],["text/57-21",[]],["component/57-21",[]],["keyword/57-21",[]],["title/57-22",[9753,84.717]],["name/57-22",[]],["text/57-22",[]],["component/57-22",[]],["keyword/57-22",[]],["title/57-23",[9754,84.717]],["name/57-23",[]],["text/57-23",[]],["component/57-23",[]],["keyword/57-23",[]],["title/57-24",[9755,84.717]],["name/57-24",[]],["text/57-24",[]],["component/57-24",[]],["keyword/57-24",[]],["title/57-25",[138,14.224,315,18.593,6442,53.374]],["name/57-25",[]],["text/57-25",[]],["component/57-25",[]],["keyword/57-25",[]],["title/57-26",[1024,36.39,4475,49.369,6442,53.374]],["name/57-26",[]],["text/57-26",[]],["component/57-26",[]],["keyword/57-26",[]],["title/57-27",[1538,35.372,2061,49.081]],["name/57-27",[]],["text/57-27",[]],["component/57-27",[]],["keyword/57-27",[]],["title/57-28",[182,34.607,506,33.564,596,32.333,4303,46.082]],["name/57-28",[]],["text/57-28",[]],["component/57-28",[]],["keyword/57-28",[]],["title/57-29",[315,18.593,596,36.39,1528,34.88]],["name/57-29",[]],["text/57-29",[]],["component/57-29",[]],["keyword/57-29",[]],["title/57-30",[363,39.811,596,36.39,6442,53.374]],["name/57-30",[]],["text/57-30",[]],["component/57-30",[]],["keyword/57-30",[]],["title/57-31",[207,30.187,388,31.13,2308,46.473]],["name/57-31",[]],["text/57-31",[]],["component/57-31",[]],["keyword/57-31",[]],["title/57-32",[207,26.821,567,31.505,2308,41.292,3724,47.424]],["name/57-32",[]],["text/57-32",[]],["component/57-32",[]],["keyword/57-32",[]],["title/57-33",[207,26.821,567,31.505,2308,41.292,9756,56.383]],["name/57-33",[]],["text/57-33",[]],["component/57-33",[]],["keyword/57-33",[]],["title/57-34",[193,22.525,360,28.775,423,42.927,596,32.333]],["name/57-34",[]],["text/57-34",[]],["component/57-34",[]],["keyword/57-34",[]],["title/57-35",[567,31.505,1502,39.275,1538,27.486,6442,47.424]],["name/57-35",[]],["text/57-35",[]],["component/57-35",[]],["keyword/57-35",[]],["title/57-36",[967,27.883,3615,37.151,4943,38.621,5558,42.667,9757,45.769]],["name/57-36",[]],["text/57-36",[]],["component/57-36",[]],["keyword/57-36",[]],["title/57-37",[3615,37.151,4804,45.769,4943,38.621,9673,47.889,9757,45.769]],["name/57-37",[]],["text/57-37",[]],["component/57-37",[]],["keyword/57-37",[]],["title/57-38",[860,36.39,3615,46.473,9758,55.137]],["name/57-38",[]],["text/57-38",[]],["component/57-38",[]],["keyword/57-38",[]],["title/57-39",[408,36.501,3615,37.151,4943,38.621,7119,44.076,9758,44.076]],["name/57-39",[]],["text/57-39",[]],["component/57-39",[]],["keyword/57-39",[]],["title/57-40",[967,27.883,3615,37.151,4943,38.621,9680,47.889,9758,44.076]],["name/57-40",[]],["text/57-40",[]],["component/57-40",[]],["keyword/57-40",[]],["title/57-41",[9757,76.436]],["name/57-41",[]],["text/57-41",[]],["component/57-41",[]],["keyword/57-41",[]],["title/57-42",[9758,73.608]],["name/57-42",[]],["text/57-42",[]],["component/57-42",[]],["keyword/57-42",[]],["title/57-43",[9759,84.717]],["name/57-43",[]],["text/57-43",[]],["component/57-43",[]],["keyword/57-43",[]],["title/57-44",[9760,84.717]],["name/57-44",[]],["text/57-44",[]],["component/57-44",[]],["keyword/57-44",[]],["title/57-45",[9761,84.717]],["name/57-45",[]],["text/57-45",[]],["component/57-45",[]],["keyword/57-45",[]],["title/57-46",[9762,84.717]],["name/57-46",[]],["text/57-46",[]],["component/57-46",[]],["keyword/57-46",[]],["title/57-47",[291,33.81,2871,41.78,4475,49.369]],["name/57-47",[]],["text/57-47",[]],["component/57-47",[]],["keyword/57-47",[]],["title/57-48",[3225,73.608]],["name/57-48",[]],["text/57-48",[]],["component/57-48",[]],["keyword/57-48",[]],["title/57-49",[291,30.041,363,35.373,596,32.333,2871,37.123]],["name/57-49",[]],["text/57-49",[]],["component/57-49",[]],["keyword/57-49",[]],["title/57-50",[231,33.154,3225,63.048]],["name/57-50",[]],["text/57-50",[]],["component/57-50",[]],["keyword/57-50",[]],["title/57-51",[3764,79.976]],["name/57-51",[]],["text/57-51",[]],["component/57-51",[]],["keyword/57-51",[]],["title/57-52",[3761,79.976]],["name/57-52",[]],["text/57-52",[]],["component/57-52",[]],["keyword/57-52",[]],["title/57",[29,15.32,161,13.893,247,20.995,344,24.676,1082,29.9,4441,27.819,9740,36.712]],["name/57",[9740,1.134]],["text/57",[0,0.541,1,0.533,2,2.093,4,2.19,5,0.405,6,0.696,8,0.199,9,0.221,10,1.164,14,0.216,23,0.502,26,0.566,29,0.827,31,2.1,46,0.629,52,0.844,63,0.469,79,0.338,137,0.309,138,2.208,139,2.281,142,1.49,145,1.931,147,1.621,148,1.357,149,0.248,151,1.732,152,0.934,157,1.32,160,0.684,161,2.446,182,2.901,188,1.303,189,0.733,193,2.508,196,2.781,204,0.533,206,0.681,207,1.231,213,2,217,2.379,220,0.812,221,1.994,223,0.675,226,2.844,228,4.145,231,1.44,233,1.581,235,0.279,239,1.483,240,1.51,241,1.522,243,0.235,244,0.289,246,1.224,247,0.973,248,2.802,250,2.425,258,1.517,259,1.785,263,6.151,264,2.76,265,1.306,268,0.305,272,3.204,273,0.273,277,0.289,279,2.914,284,1.517,286,4.163,289,0.345,290,0.522,291,4.473,294,0.262,297,0.292,298,2.612,300,0.747,303,3,306,0.66,308,0.314,315,2.686,316,1.956,326,0.488,327,2.847,330,1.906,333,1.364,336,1.092,344,2.136,346,1.558,347,0.612,353,0.902,354,0.646,356,1.87,357,2.809,360,0.824,362,1.981,363,1.623,369,0.824,371,3.977,375,0.97,376,0.244,378,1.588,388,3.65,392,0.231,395,0.279,400,0.599,402,0.416,408,4.015,410,1.696,411,0.224,415,0.325,416,0.824,417,3.313,418,0.883,420,0.729,422,0.282,423,1.97,424,0.331,432,1.956,433,3.425,435,0.244,438,0.522,445,0.716,448,0.599,459,0.246,463,0.264,465,3.203,466,0.273,469,0.775,470,2.509,477,2.131,478,1.177,483,4.96,488,0.264,493,1.177,497,1.063,502,0.262,506,5.35,510,3.257,513,0.257,516,0.892,526,1.189,530,0.444,531,0.255,537,1.306,539,0.775,540,0.616,541,0.282,545,0.887,547,1.922,548,1.603,551,2.663,553,1.89,554,3.245,567,2.641,568,0.338,574,4.799,576,2.507,581,0.267,584,2.602,585,0.363,587,0.264,588,1.308,592,0.309,596,0.716,599,0.581,602,0.224,613,1.572,707,1.411,712,0.887,722,1.123,725,3.906,731,1.099,732,1.17,734,3.015,735,2.05,738,0.252,744,3.268,756,3.606,768,4.075,783,2.784,797,0.702,799,0.98,802,0.484,807,0.98,808,2.632,811,2.19,823,0.552,830,2.867,836,0.296,843,3.773,849,0.285,860,5.257,908,0.527,917,4.278,918,0.461,928,0.71,940,0.345,942,1.614,953,0.401,967,4.228,972,5.692,975,0.331,981,1.431,1001,0.285,1012,0.279,1016,4.299,1024,1.65,1025,1.124,1026,1.986,1058,0.338,1075,1.161,1082,0.314,1093,3.203,1094,0.3,1113,2.36,1125,0.309,1142,1.012,1148,0.262,1222,1.063,1224,0.331,1229,1.198,1239,1.229,1276,0.95,1294,0.325,1396,5.426,1398,0.354,1476,3.211,1477,2.595,1479,0.539,1482,1.244,1484,0.314,1487,0.458,1492,0.273,1493,1.65,1496,0.314,1499,0.276,1502,2.004,1504,2.454,1507,4.386,1517,0.581,1522,0.522,1528,2.139,1532,0.255,1536,0.581,1538,1.261,1542,1.68,1544,0.488,1546,0.488,1547,0.285,1557,0.325,1558,0.533,1559,0.296,1563,0.363,1572,0.465,1573,0.802,1577,0.338,1578,0.289,1586,1.308,1590,1.085,1594,0.285,1595,1.209,1608,2.629,1609,0.257,1614,0.507,1615,0.686,1620,5.965,1622,1.345,1624,0.932,1634,0.314,1635,0.802,1654,0.331,1656,0.476,1657,1.894,1661,0.273,1664,0.573,1675,1.805,1676,2.403,1679,0.775,1691,0.27,1697,0.822,1701,0.599,1707,1.894,1715,0.267,1724,1.4,1725,0.296,1731,0.325,1735,2.657,1736,1.094,1741,0.533,1745,0.273,1751,0.822,1757,0.264,1762,5.449,1765,0.629,1768,1.502,1770,0.264,1785,1.919,1807,0.259,1809,1.671,1815,0.545,1820,0.296,1822,0.527,1835,0.309,1841,1.063,1843,0.743,1844,0.641,1845,0.331,1849,2.238,1852,0.259,1854,1.297,1856,0.994,1862,0.522,1868,0.722,1874,4.031,1878,1.289,1904,1.379,1906,0.285,1917,4.857,1935,1.229,1938,1.977,1939,1.84,1940,0.444,1944,0.273,1947,2.156,1952,2.932,1957,2.646,1958,0.276,1989,0.95,1990,1.642,1996,0.48,2000,0.522,2002,0.285,2011,0.386,2013,0.87,2023,0.386,2027,1.615,2028,0.552,2038,0.766,2043,0.618,2045,0.729,2071,0.345,2085,0.386,2118,0.292,2120,1.785,2123,1.161,2127,0.812,2131,0.883,2132,0.345,2147,7.675,2148,1.242,2154,2.646,2160,1.456,2162,3.777,2163,2.195,2176,0.374,2183,0.857,2186,0.599,2187,0.32,2189,0.87,2191,0.32,2206,0.883,2216,0.289,2240,1.189,2244,0.914,2245,0.386,2292,0.573,2298,0.363,2303,0.374,2309,2.754,2321,0.314,2328,1.817,2337,0.401,2343,0.966,2351,0.401,2352,1.402,2355,0.723,2358,0.314,2372,0.59,2412,0.345,2428,0.669,2430,0.573,2444,1.894,2459,0.608,2488,0.285,2490,1.124,2492,7.928,2494,0.702,2507,0.345,2532,3.875,2533,0.314,2534,1.142,2547,2.321,2558,0.325,2584,0.401,2586,3.525,2588,0.502,2598,2.281,2600,0.363,2624,0.684,2670,1.204,2689,0.325,2744,0.802,2799,1.107,2834,1.737,2837,1.931,2839,3.319,2845,2.65,2846,0.932,2870,0.599,2871,5.065,2899,0.811,2901,0.669,2937,0.338,3082,1.817,3109,0.314,3207,0.401,3223,3.077,3224,0.444,3225,3.382,3268,0.419,3416,0.684,3585,0.581,3615,5.246,3666,0.354,3678,0.386,3724,3.461,3759,1.523,3761,4.461,3764,4.278,3800,5.885,3877,0.401,3890,1.6,3891,0.812,3893,0.618,3963,0.444,4023,0.363,4027,0.374,4036,0.747,4083,0.654,4303,4.683,4348,0.723,4362,1.179,4363,1.523,4367,1.179,4368,2.716,4373,0.669,4441,0.292,4446,0.859,4450,4.745,4451,2.499,4457,0.419,4465,0.309,4467,0.374,4475,0.971,4476,5.426,4487,0.419,4538,4.227,4542,3.028,4571,4.56,4598,2.716,4613,0.419,4642,1.179,4655,0.419,4718,0.401,4721,2.632,4726,2.115,4804,1.766,4810,0.419,4834,0.374,4872,0.419,4875,0.401,4904,0.775,4921,3.273,4932,2.595,4934,0.811,4937,7.215,4943,7.223,4944,3.704,4968,1.179,4969,1.179,4972,0.419,4978,1.248,4979,1.614,4982,1.248,4983,1.614,4996,0.419,4999,0.419,5027,0.419,5028,0.419,5089,1.248,5138,1.523,5150,0.859,5241,2.23,5304,0.354,5347,0.859,5558,3.076,5622,1.559,5760,3.3,5870,4.911,5956,3.657,6218,0.374,6233,0.401,6244,2.65,6403,7.351,6404,1.614,6405,1.614,6406,1.614,6407,1.614,6408,1.614,6409,1.614,6410,1.614,6412,1.614,6442,2.868,6594,0.419,6784,0.859,7025,0.419,7119,2.963,7421,0.386,7550,0.859,8098,1.958,9663,2.281,9664,1.958,9668,2.587,9673,4.086,9678,3.151,9679,2.281,9680,2.443,9740,1.701,9741,0.444,9742,4.115,9743,3.892,9744,3.151,9745,1.614,9746,1.614,9747,1.614,9748,1.614,9749,1.614,9750,1.248,9751,1.614,9752,1.248,9753,1.248,9754,1.614,9755,2.281,9756,1.248,9757,3.511,9758,2.963,9759,3.892,9760,3.151,9761,1.958,9762,1.958,9763,0.482,9764,0.482,9765,0.482,9766,0.482,9767,0.482,9768,0.482,9769,0.482,9770,0.482,9771,0.482,9772,0.482,9773,0.482,9774,3.7,9775,3.7,9776,5.329,9777,10.483,9778,0.482,9779,0.482,9780,0.482,9781,0.482,9782,0.482,9783,0.932,9784,0.482,9785,0.482,9786,0.482,9787,7.077,9788,0.482,9789,0.482,9790,0.482,9791,0.482,9792,0.482,9793,5.706,9794,2.124,9795,2.124,9796,2.124,9797,2.124,9798,0.932,9799,5.883,9800,5.329,9801,1.354,9802,0.482,9803,0.482,9804,0.482,9805,0.482,9806,0.932,9807,0.482,9808,2.807,9809,3.121,9810,0.482,9811,0.482,9812,0.482,9813,0.482,9814,0.482,9815,0.482,9816,0.482,9817,0.482,9818,0.482,9819,0.482,9820,0.482,9821,0.482,9822,2.807,9823,1.751,9824,0.482,9825,0.482,9826,0.482,9827,0.482,9828,0.482,9829,0.482,9830,0.482,9831,0.482,9832,0.482,9833,0.482,9834,0.932,9835,0.482,9836,0.482,9837,0.482,9838,0.932,9839,0.482,9840,0.482,9841,0.482,9842,0.932,9843,0.482,9844,0.482,9845,0.482,9846,0.932,9847,0.482,9848,0.482,9849,0.482,9850,0.932,9851,0.482,9852,0.482,9853,0.482,9854,0.932,9855,0.482,9856,0.482,9857,0.482,9858,0.932,9859,0.482,9860,0.482,9861,0.482,9862,0.932,9863,0.482,9864,0.482,9865,0.482,9866,0.932,9867,0.482,9868,0.482,9869,0.482,9870,0.932,9871,0.482,9872,0.482,9873,0.482,9874,0.932,9875,0.482,9876,0.482,9877,0.482,9878,0.482,9879,0.482,9880,0.482,9881,0.482,9882,0.482,9883,0.932,9884,0.932,9885,0.482,9886,0.482,9887,0.482,9888,0.482,9889,0.482,9890,0.482,9891,0.482,9892,0.482,9893,0.482,9894,0.482,9895,0.482,9896,0.482,9897,0.482,9898,0.482,9899,0.482,9900,0.482,9901,0.482,9902,0.482,9903,0.482,9904,0.482,9905,0.482,9906,0.482,9907,0.482,9908,0.482,9909,0.482,9910,0.482,9911,0.482,9912,0.482,9913,0.482,9914,0.482,9915,0.482,9916,0.482,9917,0.482,9918,0.482,9919,0.482,9920,0.482,9921,0.482,9922,0.482,9923,0.482,9924,0.482,9925,0.482,9926,0.482,9927,0.482,9928,0.482,9929,0.482,9930,0.482,9931,0.482,9932,0.932,9933,0.932,9934,0.932,9935,0.482,9936,0.482,9937,0.482,9938,0.482,9939,0.482,9940,0.482,9941,0.482,9942,0.482,9943,0.482,9944,0.932,9945,0.482,9946,0.482,9947,0.482,9948,0.482,9949,0.482,9950,0.932,9951,0.482,9952,0.482,9953,0.932,9954,0.482,9955,0.932,9956,2.807,9957,1.751,9958,1.354,9959,1.354,9960,2.124,9961,1.751,9962,1.354,9963,1.354,9964,1.751,9965,0.482,9966,0.932,9967,0.482,9968,0.932,9969,0.932,9970,1.354,9971,1.354,9972,0.932,9973,0.932,9974,0.482,9975,0.482,9976,0.482,9977,0.482,9978,0.482,9979,0.482,9980,0.482,9981,0.482,9982,7.077,9983,4.696,9984,0.482,9985,3.121,9986,9.699,9987,9.699,9988,9.9,9989,1.751,9990,3.121,9991,3.121,9992,1.751,9993,1.751,9994,1.751,9995,1.751,9996,3.121,9997,3.121,9998,1.751,9999,1.751,10000,1.751,10001,1.751,10002,2.475,10003,1.751,10004,1.751,10005,1.751,10006,0.482,10007,1.751,10008,1.751,10009,1.751,10010,1.751,10011,0.482,10012,3.121,10013,0.482,10014,0.482,10015,1.354,10016,1.354,10017,1.354,10018,1.354,10019,0.482,10020,0.482,10021,0.932,10022,0.482,10023,0.932,10024,0.932,10025,0.482,10026,0.932,10027,0.932,10028,0.932,10029,0.932,10030,0.932,10031,0.932,10032,0.932,10033,0.932,10034,0.932,10035,0.932,10036,0.482,10037,0.482,10038,0.932,10039,0.932,10040,0.482,10041,0.482,10042,2.807,10043,3.418,10044,0.482,10045,0.482,10046,0.932,10047,0.932,10048,0.932,10049,1.751,10050,0.932,10051,0.932,10052,1.751,10053,0.932,10054,0.932,10055,0.482]],["component/57",[5,0.286]],["keyword/57",[]],["title/58-1",[138,14.224,316,36.39,1476,30.187]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["keyword/58-1",[]],["title/58-2",[138,14.224,333,44.203,1616,44.907]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["keyword/58-2",[]],["title/58-3",[138,14.224,929,42.336,1500,28.368]],["name/58-3",[]],["text/58-3",[]],["component/58-3",[]],["keyword/58-3",[]],["title/58-4",[138,12.639,1500,25.206,2020,36.207,5440,56.383]],["name/58-4",[]],["text/58-4",[]],["component/58-4",[]],["keyword/58-4",[]],["title/58-5",[138,16.265,432,41.611]],["name/58-5",[]],["text/58-5",[]],["component/58-5",[]],["keyword/58-5",[]],["title/58-6",[138,16.265,2819,54.147]],["name/58-6",[]],["text/58-6",[]],["component/58-6",[]],["keyword/58-6",[]],["title/58",[29,14.138,138,8.741,161,12.822,185,18.44,188,19.633,731,16.561,732,15.865,5135,33.881]],["name/58",[5135,1.134]],["text/58",[0,0.905,1,0.892,3,2.441,5,1.544,6,1.556,8,0.934,9,1.038,29,0.758,31,1.842,138,2.617,139,3.748,144,1.178,149,1.168,161,3.501,183,1.178,185,1.707,188,1.052,190,1.232,206,1.968,216,3.428,217,1.984,220,1.358,221,4.545,223,3.464,226,4.939,228,2.088,241,2.408,246,3.754,248,1.923,250,1.032,258,1.738,263,4.24,264,1.22,272,1.923,273,1.283,279,2.308,286,3.675,291,2.538,303,4.551,315,3.12,316,2.07,327,1.097,329,1.326,333,4.88,356,5.955,362,1.738,364,1.256,369,1.842,371,1.953,393,3.836,394,3.519,410,4.428,411,2.399,416,1.066,417,5.894,432,4.017,465,2.598,467,1.232,487,1.209,498,1.032,500,2.875,503,1.559,516,0.648,540,2.352,551,2.034,554,2.415,574,5.105,576,4.458,583,4.635,587,1.244,597,3.252,599,1.413,609,4.139,613,1.269,707,4.493,712,1.984,713,1.358,722,2.732,725,2.088,728,3.627,730,3.627,731,4.692,732,4.522,734,3.481,735,2.17,744,1.342,756,1.283,768,3.481,780,1.559,783,1.413,788,1.326,799,1.269,807,1.269,808,3.222,811,1.342,830,2.514,843,1.376,860,2.07,874,1.559,881,1.479,883,1.591,895,1.53,924,1.708,928,4.905,929,5.01,932,1.358,940,2.808,950,1.53,960,1.559,961,3.706,970,1.559,971,1.626,975,1.559,995,3.555,1001,2.318,1026,5.14,1056,1.816,1093,1.139,1139,1.708,1153,1.434,1229,1.097,1332,1.53,1476,3.573,1482,1.139,1497,1.53,1499,3.519,1500,4.095,1501,2.215,1507,2.128,1519,6.574,1535,1.376,1546,1.188,1552,1.456,1572,1.953,1578,1.358,1586,3.672,1590,1.158,1595,2.993,1616,2.554,1631,1.479,1635,1.342,1669,2.95,1690,3.85,1706,1.394,1724,1.283,1735,1.283,1739,4.112,1754,2.318,1758,4.554,1785,3.784,1854,2.708,1862,1.269,1902,1.326,1904,3.411,1939,2.782,1947,1.232,1952,2.956,1957,4.852,1995,1.504,2000,1.269,2020,1.342,2068,1.559,2071,1.626,2087,4.561,2089,2.441,2112,1.479,2128,1.376,2145,3.407,2154,5.35,2342,4.738,2343,5.517,2350,5.231,2360,1.626,2453,1.758,2583,1.394,2605,1.479,2771,1.708,2819,2.693,2909,1.479,3038,1.816,3219,4.738,3666,1.664,3696,1.758,3703,1.816,3706,1.973,3803,1.885,3832,3.784,4034,2.95,4507,1.708,4542,3.706,4738,1.708,4740,5.713,4757,4.517,4790,1.885,4809,1.885,4813,3.136,4816,2.597,4820,4.139,4823,4.298,4830,1.973,4832,2.09,5039,3.136,5135,4.928,5162,2.09,5163,2.09,5183,1.708,5184,1.758,5201,1.758,5283,4.412,5284,4.298,5298,3.256,5299,1.885,5355,1.885,5356,1.885,5404,2.09,5409,1.885,5410,1.885,5456,1.885,6019,2.09,6137,2.09,6169,1.973,6343,2.09,6368,1.885,6751,2.09,7621,1.973,7700,1.973,8385,1.973,9620,7.005,10056,5.169,10057,6.947,10058,11.332,10059,2.267,10060,2.267,10061,2.267,10062,2.267,10063,2.267,10064,2.267,10065,2.267,10066,2.267,10067,2.267,10068,2.267,10069,6.153,10070,2.267,10071,6.153,10072,2.267,10073,6.947,10074,2.267,10075,5.169,10076,6.153,10077,2.267,10078,2.267,10079,2.267,10080,2.267,10081,2.267,10082,5.169,10083,2.267,10084,2.267,10085,2.267,10086,2.267,10087,2.267,10088,2.267,10089,2.267,10090,2.267,10091,3.916,10092,2.09,10093,3.916,10094,2.267,10095,3.916,10096,2.267,10097,5.169,10098,2.267,10099,2.267,10100,2.267,10101,2.267,10102,2.267,10103,2.267,10104,2.267,10105,2.267,10106,2.267,10107,2.267,10108,2.267,10109,3.916,10110,6.153,10111,3.916,10112,2.267,10113,2.267,10114,2.267,10115,2.267,10116,2.267,10117,2.267,10118,2.267,10119,2.267,10120,2.267,10121,2.267,10122,2.267,10123,6.153,10124,2.267,10125,2.267,10126,3.916,10127,6.153,10128,2.267,10129,3.916,10130,2.267,10131,3.916,10132,3.916,10133,2.267,10134,3.916,10135,2.267,10136,2.267,10137,2.267,10138,2.267,10139,2.267,10140,2.267,10141,2.267,10142,2.267,10143,2.267,10144,2.267,10145,2.267,10146,2.267]],["component/58",[5,0.286]],["keyword/58",[]],["title/59-1",[138,11.371,1476,24.131,1477,24.277,2087,30.812,2343,25.044]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["keyword/59-1",[]],["title/59-2",[138,12.639,738,32.049,2087,34.247,2343,27.836]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["keyword/59-2",[]],["title/59-3",[138,11.371,432,29.09,1552,35.336,2087,30.812,2343,25.044]],["name/59-3",[]],["text/59-3",[]],["component/59-3",[]],["keyword/59-3",[]],["title/59-4",[138,10.334,731,19.58,732,18.758,2087,28.003,2343,22.761,2656,27.445]],["name/59-4",[]],["text/59-4",[]],["component/59-4",[]],["keyword/59-4",[]],["title/59-5",[138,10.334,731,19.58,732,18.758,2087,28.003,2343,22.761,2946,33.174]],["name/59-5",[]],["text/59-5",[]],["component/59-5",[]],["keyword/59-5",[]],["title/59-6",[161,12.822,362,18.775,731,16.561,732,15.865,1726,24.746,2087,23.685,2343,19.251,4755,32.798]],["name/59-6",[]],["text/59-6",[]],["component/59-6",[]],["keyword/59-6",[]],["title/59",[29,13.126,161,11.904,185,17.12,731,15.375,732,14.729,2087,21.989,2343,17.873,4755,30.45,4757,28.835]],["name/59",[4757,1.04]],["text/59",[0,1.197,1,1.179,5,1.482,6,1.97,8,1.235,9,1.373,21,1.678,23,1.613,29,1.002,31,1.41,138,2.588,144,3.294,149,1.544,152,2.645,161,3.685,185,1.306,188,2.943,190,3.446,207,1.314,217,3.734,220,1.796,221,3.928,223,4.072,226,1.306,233,1.518,244,2.971,258,1.33,264,1.613,272,3.62,279,3.646,283,1.733,286,4.992,291,1.472,303,4.057,306,1.461,315,2.376,329,2.9,330,1.544,341,1.753,357,1.262,360,2.332,362,3.624,369,1.41,370,1.774,371,4.072,376,2.512,388,1.355,402,2.214,410,4.437,411,2.943,420,1.613,432,3.896,438,4.925,458,1.843,465,1.506,467,3.446,487,1.598,498,3.354,513,1.598,522,3.347,541,1.753,547,1.557,552,1.955,571,1.714,573,2.4,574,4.056,576,3.212,577,3.049,584,1.661,588,4.316,593,2.748,613,2.776,707,2.868,728,4.451,729,4.656,730,4.451,731,4.969,732,4.76,733,2.748,738,3.862,768,1.695,799,1.678,807,1.678,860,5.148,918,4.04,924,2.258,928,4.278,929,1.843,967,3.734,1026,4.581,1058,2.103,1068,1.988,1093,1.506,1113,1.506,1142,2.867,1153,1.895,1229,2.399,1330,3.289,1332,2.023,1476,1.314,1477,1.322,1500,4.654,1507,1.629,1519,5.564,1546,2.598,1552,6.485,1575,1.57,1578,1.796,1588,2.776,1593,1.42,1595,5.056,1615,2.512,1622,1.629,1656,1.531,1690,4.137,1726,1.753,1736,3.266,1745,1.695,1757,1.644,1758,1.796,1807,1.613,1830,2.061,1843,1.644,1862,1.678,1885,2.776,1904,3.62,1937,1.714,1939,4.395,1944,1.695,1947,4.437,1952,1.714,1957,2.669,1996,2.554,2020,6.457,2025,1.819,2045,1.613,2067,2.971,2076,3.556,2087,7.23,2129,1.988,2152,5.903,2153,2.2,2154,3.414,2158,5.903,2342,5.09,2343,6.103,2350,4.072,2354,2.023,2362,2.149,2412,2.149,2428,3.556,2605,3.234,2656,1.644,2799,1.895,2812,2.258,2816,1.753,2828,2.258,2909,1.955,2946,1.988,3417,1.924,3474,5.616,3623,2.9,4115,4.917,4116,4.917,4143,2.762,4538,1.988,4548,1.988,4627,1.988,4740,6.176,4755,7.219,4757,6.458,4760,2.149,4815,2.2,4816,3.289,4818,2.103,4821,4.124,4826,4.124,4837,5.274,4838,5.274,4842,2.762,4843,4.57,5039,5.079,5167,2.4,5282,3.971,5283,3.556,5387,2.492,5406,2.762,6156,2.762,6360,4.57,6361,2.762,6362,2.762,6366,4.315,6368,4.124,6369,4.315,6370,4.315,6371,4.57,6372,4.57,6378,2.762,6380,2.762,6381,2.762,6383,2.762,6384,2.762,6387,2.762,6388,2.762,6389,2.762,6390,2.762,7025,2.608,10147,2.997,10148,2.997,10149,2.997,10150,2.997,10151,2.997]],["component/59",[5,0.286]],["keyword/59",[]],["title/60-1",[303,28.677,587,37.776,3417,44.203]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["keyword/60-1",[]],["title/60-2",[3961,73.608]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["keyword/60-2",[]],["title/60-3",[285,42.922,303,28.677,587,37.776]],["name/60-3",[]],["text/60-3",[]],["component/60-3",[]],["keyword/60-3",[]],["title/60-4",[5136,76.436]],["name/60-4",[]],["text/60-4",[]],["component/60-4",[]],["keyword/60-4",[]],["title/60-5",[5137,76.436]],["name/60-5",[]],["text/60-5",[]],["component/60-5",[]],["keyword/60-5",[]],["title/60-6",[10,32.385,14,30.934,3809,53.374]],["name/60-6",[]],["text/60-6",[]],["component/60-6",[]],["keyword/60-6",[]],["title/60",[29,11.482,161,10.413,185,14.976,315,9.279,731,13.45,732,12.885,1500,14.158,3959,26.637,3961,27.517,5136,28.574,5137,28.574]],["name/60",[3959,1.098]],["text/60",[0,2.102,1,2.07,5,1.573,6,2.091,8,2.169,9,1.476,10,3.138,13,1.688,14,1.448,29,1.077,31,1.516,46,2.442,138,2.605,139,1.249,142,1.404,157,1.719,158,1.703,161,3.987,185,1.404,188,1.495,189,1.349,190,4.95,193,1.938,204,1.843,206,1.619,207,2.925,210,2.038,221,3.79,223,1.607,226,3.357,228,2.807,232,1.907,246,3.97,250,2.395,261,1.659,264,4.146,272,2.585,279,4.067,282,3.902,284,4.603,286,4.909,303,2.192,315,3.464,318,1.907,325,2.069,327,1.559,329,1.885,330,2.71,351,1.703,362,2.336,369,4.521,371,3.327,373,1.907,390,1.674,398,1.703,400,2.069,402,2.979,410,3.625,416,2.476,417,2.51,421,2.734,432,1.703,438,1.804,439,2.175,441,1.981,454,2.261,457,2.216,458,1.981,463,1.768,465,2.645,466,3.774,478,3.697,487,2.807,490,1.804,498,3.863,508,1.955,510,1.688,522,2.175,526,1.548,527,1.537,539,1.843,540,4.145,545,2.666,548,1.396,551,2.734,576,3.03,581,2.916,584,1.786,588,1.703,601,3.693,613,6.445,707,3.016,731,4.885,732,4.68,733,1.786,738,1.688,748,5.832,788,1.885,860,2.782,908,1.823,928,5.252,965,1.823,1026,4.879,1093,2.645,1103,2.311,1140,1.804,1142,3.858,1229,3.727,1254,2.038,1476,2.925,1477,2.943,1482,1.619,1497,2.175,1500,3.173,1501,6.035,1507,3.625,1510,3.965,1519,4.219,1542,1.734,1546,4.035,1562,1.786,1575,1.688,1593,3.648,1595,2.267,1606,3.078,1614,3.625,1615,1.632,1620,1.594,1624,2.216,1634,4.351,1656,3.407,1658,1.885,1669,2.427,1673,2.977,1676,1.734,1691,1.804,1726,3.078,1728,2.137,1807,1.734,1822,1.823,1843,1.768,1849,2.311,1862,1.804,1868,1.719,1874,1.907,1904,3.276,1939,3.591,1947,5.935,1951,4.615,1977,3.902,1996,1.659,2000,1.804,2067,1.931,2087,2.946,2102,4.215,2145,2.804,2149,2.366,2150,2.427,2152,2.581,2155,2.427,2156,2.311,2158,2.581,2183,3.329,2188,2.916,2342,2.009,2343,4.854,2350,3.379,2359,2.804,2372,2.038,2381,2.261,2390,4.283,2412,2.311,2423,1.981,2563,2.581,2572,2.311,3109,2.102,3474,3.62,3623,1.885,3679,2.68,3755,3.864,3832,4.736,3891,1.931,3959,9.151,3961,8.028,4023,2.427,4115,2.498,4116,2.498,4126,2.366,4246,2.366,4259,2.97,4740,3.49,4757,3.864,4837,2.68,4838,2.68,4904,2.68,4921,2.498,4942,2.804,5033,2.581,5136,8.336,5137,7.059,5183,2.427,5184,2.498,5201,2.498,5204,2.581,5221,2.581,5280,4.377,5301,2.68,5304,2.366,5309,2.804,5415,2.97,6366,2.804,6368,2.68,6369,2.804,6370,2.804,10152,3.222,10153,3.222,10154,3.222,10155,3.222,10156,3.222,10157,8.488,10158,3.222,10159,3.222,10160,3.222]],["component/60",[5,0.286]],["keyword/60",[]],["title/61-1",[2204,55.777]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["keyword/61-1",[]],["title/61-2",[6,31.281,5127,63.048]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["keyword/61-2",[]],["title/61-3",[45,51.864,46,31.95,138,14.224]],["name/61-3",[]],["text/61-3",[]],["component/61-3",[]],["keyword/61-3",[]],["title/61-4",[10161,84.717]],["name/61-4",[]],["text/61-4",[]],["component/61-4",[]],["keyword/61-4",[]],["title/61-5",[10162,84.717]],["name/61-5",[]],["text/61-5",[]],["component/61-5",[]],["keyword/61-5",[]],["title/61-6",[1538,35.372,2061,49.081]],["name/61-6",[]],["text/61-6",[]],["component/61-6",[]],["keyword/61-6",[]],["title/61-7",[138,16.265,567,40.545]],["name/61-7",[]],["text/61-7",[]],["component/61-7",[]],["keyword/61-7",[]],["title/61",[29,15.32,161,13.893,576,18.033,851,24.016,1082,29.9,1500,18.889,5127,36.712]],["name/61",[5127,1.134]],["text/61",[0,3.083,1,3.037,5,1.362,6,1.812,8,1.117,9,1.241,10,3.255,29,0.906,31,3.631,138,2.614,139,1.05,147,2.368,157,2.432,161,2.696,188,2.739,214,1.432,220,1.624,221,2.036,226,3.016,228,1.445,243,1.321,247,2.703,250,1.233,263,6.361,272,1.331,279,2.635,286,1.105,302,3.984,303,3.484,306,2.222,308,1.768,315,2.259,316,2.41,346,1.141,360,4.971,376,2.31,390,3.065,402,3.735,411,1.258,416,2.145,417,5.041,421,2.368,432,4.08,433,2.579,435,2.99,439,1.829,478,1.502,484,2.842,498,2.685,505,1.645,526,1.302,527,1.293,538,2.636,540,3.806,545,2.99,547,2.368,551,1.408,554,6.04,567,4.581,574,2.102,576,3.822,588,3.119,707,2.668,712,2.99,722,3.658,733,4.278,747,2.767,800,2.041,823,5.264,836,1.666,849,3.493,851,6.935,856,2.842,908,2.579,910,1.604,914,2.254,918,1.341,930,1.69,972,3.078,1015,2.732,1038,1.943,1057,1.714,1062,3.732,1082,1.768,1094,1.69,1112,1.99,1140,1.517,1229,2.206,1247,2.041,1266,2.974,1337,2.732,1398,1.99,1482,2.966,1487,2.239,1489,1.99,1500,1.117,1507,1.473,1522,1.517,1535,2.767,1542,1.459,1544,3.626,1572,2.943,1595,1.167,1644,1.714,1656,1.384,1668,1.99,1694,1.55,1701,6.926,1702,1.567,1707,1.645,1715,2.527,1741,2.607,1768,2.767,1815,1.585,1819,1.99,1820,1.666,1837,4.096,1862,2.552,1867,3.629,1883,1.585,1904,3.398,1947,4.833,1952,7.333,1957,7.091,2000,3.304,2068,3.136,2123,3.024,2154,7.225,2162,1.74,2188,1.502,2240,2.552,2390,1.74,2469,1.567,2490,1.74,2533,1.768,2588,1.459,2589,2.101,2625,3.269,2656,1.487,2726,3.679,2819,4.76,2915,2.041,3416,1.99,3459,3.967,3479,1.902,3602,2.101,3621,2.041,3699,2.358,3941,3.791,4082,2.254,4246,1.99,4384,3.791,4465,5.37,4482,2.884,4538,3.914,4548,4.59,4571,3.435,4573,3.651,4575,3.651,4578,3.791,4587,3.967,4709,3.078,4732,5.439,4810,2.358,4910,4.202,5043,3.791,5127,4.726,5221,5.542,5545,3.347,6194,2.498,6435,2.498,6534,3.535,6679,11.353,10161,8.955,10162,8.955,10163,4.559,10164,2.71,10165,4.559,10166,2.71,10167,9.338]],["component/61",[5,0.286]],["keyword/61",[]],["title/62-1",[138,16.265,231,33.154]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["keyword/62-1",[]],["title/62-2",[46,31.95,231,28.994,284,30.554]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["keyword/62-2",[]],["title/62",[29,13.126,138,8.115,158,20.761,161,11.904,189,16.45,231,16.541,315,10.608,713,23.535,3109,25.62]],["name/62",[3109,0.924]],["text/62",[0,2.607,1,2.568,5,1.716,6,2.282,7,2.833,8,2.689,9,1.644,10,1.689,13,3.009,14,1.613,29,0.686,31,0.965,46,5.45,63,1.804,138,2.57,139,2.783,142,2.086,147,1.066,151,1.819,158,2.53,161,1.088,183,1.865,186,1.245,188,2.221,189,2.005,193,3.845,206,4.937,207,0.9,213,5.779,218,2.151,221,4.007,223,5.011,224,1.317,228,1.094,231,5.747,233,3.307,235,2.768,240,1.737,243,1,246,2.086,247,0.94,248,4.23,249,1.186,250,2.178,261,2.958,264,3.092,268,1.298,272,2.821,277,1.229,278,1.214,279,2.565,283,4.744,284,5.415,286,4.598,291,1.008,294,1.115,296,1.161,297,2.905,298,2.1,303,4.892,307,1.643,311,3.581,312,2.238,314,1.411,315,2.585,316,3.036,318,1.214,323,3.121,334,2.125,338,2.653,342,2.271,346,0.864,350,3.42,351,1.085,357,1.512,362,2.897,364,1.99,367,1.44,369,3.07,388,3.496,391,1.2,394,1.173,402,0.916,411,2.221,416,5.908,417,0.979,422,2.8,428,1.2,432,1.898,439,1.385,441,2.208,446,2.381,459,1.834,463,1.126,465,2.887,476,2.316,485,1.338,487,1.915,493,1.99,513,1.915,515,1.546,521,2.342,526,0.986,531,1.898,540,0.934,545,3.307,547,1.066,548,2.074,553,1.048,554,3.833,556,1.44,574,3.31,576,0.807,581,1.99,584,2.653,589,4.069,592,2.305,593,4.284,597,2.53,679,1.546,707,0.928,713,1.229,731,0.803,732,0.769,734,2.031,802,3.39,808,2.984,811,1.214,850,1.214,851,3.009,881,1.338,890,2.076,964,1.298,965,2.031,981,1.186,1001,1.214,1012,1.186,1093,3.28,1094,1.279,1142,1.186,1229,0.993,1484,3.122,1493,3.036,1495,1.471,1499,2.053,1500,3.186,1522,3.654,1532,3.036,1535,1.245,1536,1.279,1538,1.613,1542,1.104,1544,3.009,1545,4.761,1546,1.881,1547,1.214,1551,3.486,1560,1.298,1565,1.245,1572,1.79,1575,6.392,1577,1.44,1586,1.085,1588,3.216,1589,3.231,1590,1.834,1595,0.884,1606,1.2,1609,1.915,1614,1.115,1615,1.819,1620,2.369,1622,1.115,1634,1.338,1656,3.949,1657,1.245,1664,2.208,1672,1.411,1673,1.161,1674,1.262,1688,1.471,1690,3.917,1691,2.01,1715,1.137,1725,1.262,1739,2.125,1742,1.298,1744,3.152,1758,2.151,1802,1.361,1803,2.575,1815,1.2,1852,1.104,1854,3.009,1855,1.262,1878,2.179,1904,1.763,1906,2.125,1947,1.951,1951,1.229,1957,5.52,1968,1.411,1970,4.329,1976,2.424,1977,4.522,1979,2.52,2001,3.877,2013,1.317,2038,4.642,2050,4.329,2052,1.279,2146,1.385,2147,8.094,2154,4.637,2183,1.298,2188,1.99,2206,1.338,2216,2.151,2273,1.229,2292,4.014,2295,1.298,2358,1.338,2371,1.44,2373,1.891,2381,4.031,2428,1.471,2441,2.381,2452,2.68,2547,1.2,2558,1.385,2572,1.471,2588,1.933,2589,5.994,2604,7.269,2626,1.411,2672,5.271,2673,4.777,2678,5.824,2701,1.706,2704,1.44,2719,1.385,2745,1.44,2799,1.298,2831,2.705,2846,1.411,2875,2.53,2946,2.381,2955,2.783,3032,1.385,3083,2.783,3105,2.52,3109,1.338,3476,1.706,3770,1.785,4163,1.506,4167,3.124,4263,4.412,4439,1.643,4962,2.52,5481,2.986,5545,1.506,6080,1.643,6244,5.06,6245,5.679,6246,4.165,6247,4.165,6515,3.124,6736,3.309,6737,3.309,7698,1.891,7796,7.562,10168,2.052,10169,2.052,10170,2.052,10171,2.052,10172,4.787,10173,2.052,10174,2.052,10175,2.052,10176,2.052,10177,2.052]],["component/62",[5,0.286]],["keyword/62",[]],["title/63",[29,15.32,138,9.471,161,13.893,338,25.403,713,27.467,1938,26.508,5124,32.872]],["name/63",[5124,1.015]],["text/63",[0,4.403,1,4.337,5,1.943,6,2.584,8,1.732,9,1.925,21,2.353,29,2.173,46,1.951,138,2.797,139,1.629,147,2.183,151,3.294,152,3.468,159,1.741,161,1.971,186,2.551,188,1.951,193,3.93,204,3.718,207,2.851,209,2.837,214,3.437,223,3.965,226,4.218,247,1.925,248,2.064,249,4.598,250,3.619,258,1.865,267,2.62,272,3.193,279,3.551,296,2.378,297,2.551,299,2.353,306,3.169,327,2.034,330,4.095,335,2.431,338,4.407,346,3.349,350,6.413,353,3.349,357,1.77,358,2.431,362,3.972,365,2.585,367,2.95,369,3.059,376,5.585,388,4.627,389,2.202,390,3.377,391,3.803,392,5.126,402,1.877,407,2.585,410,2.284,412,6.777,416,4.21,421,2.183,432,2.222,440,4.452,444,3.086,450,3.014,463,4.911,465,2.112,466,2.378,494,2.488,498,3.619,509,2.699,510,2.202,513,2.242,526,3.124,527,2.005,539,2.404,545,2.129,554,1.964,557,2.329,576,2.558,580,4.312,602,3.69,713,2.518,773,4.773,788,2.459,836,2.585,874,2.891,908,2.378,932,2.518,1026,1.977,1058,2.95,1113,2.112,1148,3.533,1238,2.488,1360,2.95,1477,4.863,1479,2.431,1482,2.112,1496,5.187,1532,2.222,1545,4.312,1565,2.551,1585,2.488,1586,3.437,1588,2.353,1591,4.452,1594,2.488,1595,1.811,1608,2.353,1618,3.259,1676,2.263,1726,2.459,1736,2.165,1807,2.263,1822,2.378,1841,2.551,1855,2.585,1868,2.242,1870,4.563,1878,5.873,1937,2.404,1938,6.909,1944,2.378,1945,2.837,1953,2.551,1957,3.5,1964,5.702,2060,3.896,2072,4.472,2089,2.62,2108,3.086,2127,2.518,2154,2.263,2187,2.788,2190,2.95,2292,2.585,2324,7.182,2327,3.166,2418,2.62,2424,4.663,2490,2.699,2534,4.241,2551,2.699,2564,3.166,2588,2.263,2592,5.66,2614,2.742,2660,3.657,2689,2.837,2744,2.488,2751,3.259,2759,3.657,2764,2.459,2809,2.742,2840,3.366,2875,2.222,2888,3.874,2889,4.472,2948,5.207,2965,3.495,2968,3.086,2969,3.366,3020,3.166,3520,3.086,3585,2.62,3620,3.657,3673,5.041,3891,2.518,4124,3.874,4134,3.259,4260,3.495,4277,3.495,4373,9.231,4754,3.166,4834,5.041,5124,3.014,5222,4.663,5441,3.657,5501,3.495,5653,5.993,5729,3.657,6464,3.874,8954,3.874,10178,4.203,10179,4.203,10180,3.874,10181,4.203,10182,4.203]],["component/63",[5,0.286]],["keyword/63",[]],["title/64",[29,14.138,161,12.822,185,18.44,262,25.041,360,19.9,2592,26.757,5125,35.183,6479,35.183]],["name/64",[5125,1.178]],["text/64",[0,1.064,1,1.768,2,1.507,5,1.742,6,2.316,8,1.852,9,1.22,10,2.742,13,1.396,23,1.434,26,1.617,29,0.89,31,3.22,63,2.259,138,2.666,139,2.963,142,2.54,144,1.384,151,1.35,161,2.674,180,1.308,185,1.161,189,1.116,193,4.249,194,3.45,207,4.231,208,4.803,213,1.262,221,2.007,226,4.677,239,5.782,240,2.175,246,1.959,248,1.308,249,1.541,262,5.222,279,4.693,280,1.685,282,1.558,283,2.599,284,4.762,291,2.862,294,1.448,308,1.738,316,1.408,318,3.45,341,2.629,342,1.685,343,3.686,344,4.749,346,1.893,360,1.253,362,1.182,376,2.277,377,1.661,386,4.766,388,2.032,392,3.288,410,1.448,411,1.236,412,6.673,416,1.253,437,3.154,444,8.269,457,4.009,459,2.977,468,1.596,470,1.685,478,2.49,482,1.638,498,2.652,502,3.167,505,4.639,540,3.479,547,1.384,548,1.947,554,1.245,574,4.448,576,1.048,587,1.462,593,2.49,602,4.478,613,1.491,707,1.205,712,1.35,735,2.49,760,1.91,802,1.384,856,1.661,890,1.541,891,6.297,932,1.596,981,2.599,1012,6.077,1141,1.617,1142,6.205,1238,1.577,1247,5.156,1476,1.97,1477,1.982,1492,1.507,1493,3.618,1497,1.798,1498,1.71,1499,1.524,1521,5.824,1522,1.491,1528,2.953,1535,1.617,1536,2.802,1538,3.075,1542,2.419,1544,1.396,1546,1.396,1557,1.798,1562,2.49,1573,1.577,1575,2.354,1588,1.491,1609,4.944,1615,3.873,1620,2.884,1631,1.738,1635,1.577,1656,2.977,1690,2.277,1691,1.491,1693,1.956,1736,1.372,1741,1.524,1777,3.484,1807,3.137,1855,1.638,1869,2.216,1878,2.727,1937,1.524,1944,2.542,1953,1.617,1958,1.524,1977,6.148,2038,1.507,2060,2.693,2077,1.956,2120,1.524,2128,1.617,2148,1.558,2188,3.23,2191,1.767,2342,1.661,2394,1.91,2454,3.802,2464,2.456,2523,2.216,2525,6.086,2586,1.91,2592,6.647,2624,1.956,2735,1.798,2744,5.905,2753,6.122,2769,2.318,2849,3.034,2852,2.456,2861,1.738,2915,3.385,2940,2.842,2960,3.385,2965,2.216,3461,1.956,3493,2.318,3599,1.956,3623,1.558,3625,1.956,3757,3.223,3794,1.91,3879,2.007,3885,2.216,3907,2.007,3958,2.216,4046,2.007,4081,6.639,4114,2.318,4128,7.734,4163,1.956,4171,7.423,4370,2.318,4379,2.216,4413,1.956,4627,1.767,4754,5.759,4818,1.87,4864,3.299,4944,5.759,5024,5.956,5038,2.216,5047,2.456,5049,2.456,5051,2.456,5053,2.456,5084,2.318,5125,2.216,5221,2.134,5222,3.223,5242,5.372,5260,3.484,5261,3.599,5267,11.491,5470,2.134,5546,2.065,5794,2.318,6456,2.456,6479,8.74,6482,8.065,6483,7.214,6484,5.956,6485,8.065,6627,9.145,9532,3.91,9732,2.456,10092,2.456,10180,10.747,10183,12.669,10184,5.829,10185,2.664,10186,2.664,10187,2.664,10188,9.976,10189,8.291,10190,4.494,10191,2.664,10192,6.845,10193,2.664,10194,8.291,10195,4.494,10196,2.664,10197,2.664,10198,4.494,10199,2.664,10200,2.664]],["component/64",[5,0.286]],["keyword/64",[]],["title/65",[29,16.716,161,15.159,262,29.606,713,29.971,4211,35.868,5126,41.597]],["name/65",[5126,1.178]],["text/65",[0,2.429,1,2.393,5,2.553,6,3.924,8,2.506,9,2.785,29,2.033,46,2.822,138,2.61,139,4.152,147,3.159,149,3.132,150,4.465,151,3.081,161,2.589,193,4.155,207,3.746,208,4.268,226,4.669,247,4.523,262,6.34,272,2.987,279,4.783,284,2.699,296,3.441,330,3.132,338,5.473,343,3.847,350,4.476,360,2.861,388,4.465,392,2.922,394,3.478,398,3.215,411,3.965,412,3.305,416,2.861,439,4.105,463,3.337,478,3.37,479,4.183,480,4.465,497,3.691,498,2.768,526,4.744,527,2.901,533,4.034,540,2.768,547,3.159,554,2.841,567,5.086,574,4.553,713,3.644,748,3.691,772,4.465,788,3.557,851,3.186,890,5.711,901,4.871,1012,3.517,1026,2.861,1043,4.361,1074,5.292,1113,3.057,1141,3.691,1276,4.268,1572,3.033,1575,4.476,1588,3.405,1608,3.405,1609,5.267,1673,4.833,1741,3.478,1748,6.126,1749,6.272,1825,4.034,1868,3.244,1874,3.6,1942,3.847,1943,4.582,1944,3.441,1953,3.691,1976,4.105,2060,3.644,2068,4.183,2118,3.691,2190,4.268,2206,3.967,2321,6.987,2333,4.268,2343,2.768,2430,3.74,2454,6.442,2497,4.105,2583,3.74,2624,4.465,2826,7.656,2847,5.058,2851,6.436,2861,3.967,2940,3.847,2998,7.105,3094,5.292,3525,4.268,4036,4.871,4066,5.292,4211,9.486,4426,4.582,4430,4.582,4470,5.606,4840,5.058,4962,4.268,5079,8.213,5126,5.058,5452,4.871,5631,9.103,5666,5.606,5794,5.292,6080,4.871,6476,5.292,6490,5.292,6494,5.292,6942,5.606,9532,5.292,9738,5.606,10201,6.082,10202,6.082,10203,6.082,10204,6.082]],["component/65",[5,0.286]],["keyword/65",[]],["title/66-1",[29,16.716,161,15.159,185,21.802,576,19.677,1790,37.681,2148,29.257]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["keyword/66-1",[]],["title/66",[29,18.393,161,16.68,185,23.988,576,21.65,1789,39.466]],["name/66",[1789,1.015]],["text/66",[0,1.681,1,1.656,5,1.945,6,2.587,8,1.734,9,1.928,10,1.98,14,1.891,29,1.407,138,2.577,139,1.632,142,2.837,145,2.895,149,3.353,152,2.245,157,2.245,161,3.967,185,1.835,189,1.763,196,2.381,207,1.846,211,8.311,213,4.587,220,2.522,221,5.57,223,2.099,226,4.221,231,1.773,245,4.603,246,1.835,248,2.067,250,1.915,261,3.353,262,4.711,279,1.88,284,1.868,286,2.654,291,2.067,301,2.954,303,2.711,306,4.991,309,3.09,315,2.616,327,2.037,330,4.099,362,1.868,364,2.333,366,5.279,369,1.98,371,2.099,388,2.943,390,2.186,391,2.462,392,2.022,393,2.624,394,2.407,411,3.021,416,5.44,417,4.62,445,2.225,459,2.15,466,2.381,487,2.245,493,4.964,498,1.915,508,2.555,531,2.225,542,3.901,547,3.381,551,2.186,554,3.719,574,5.582,576,3.131,584,2.333,597,4.207,601,2.954,707,2.943,756,2.381,768,2.381,802,3.381,808,4.962,816,3.019,843,2.555,849,2.492,860,3.441,964,2.662,1001,2.492,1012,4.603,1057,2.662,1079,3.263,1112,3.09,1229,3.851,1491,2.357,1492,3.683,1500,3.28,1501,2.381,1515,2.555,1531,4,1538,1.891,1542,2.266,1551,4.83,1578,2.522,1589,2.841,1615,4.032,1618,6.171,1639,2.624,1644,4.117,1656,2.15,1658,2.462,1673,2.381,1690,3.298,1754,2.492,1789,7.91,1790,6.747,1807,2.266,1838,2.703,1852,2.266,1854,2.205,1871,2.746,1883,2.462,1904,2.067,1937,2.407,1945,2.841,1952,2.407,1957,3.504,1958,3.723,1968,2.895,1977,2.462,1995,2.792,1996,2.168,2001,4.394,2027,2.746,2077,3.09,2100,3.501,2123,2.792,2124,6.125,2154,3.504,2162,2.703,2309,2.746,2371,2.954,2381,2.954,2452,2.357,2456,2.746,2469,2.434,2497,2.841,2605,2.746,2726,2.624,2744,2.492,2764,2.462,2956,3.09,2980,3.019,3062,3.371,3755,3.09,3757,3.019,4066,3.663,4217,3.88,4450,3.501,4482,4.117,4538,4.317,4542,5.708,4589,9.173,4864,3.09,4921,3.263,4931,3.88,4937,3.501,4939,3.663,4941,3.663,4990,3.663,4996,3.663,5260,3.263,5545,4.779,7421,3.371,7538,3.88,7540,3.88,7797,8.256,7825,11.74,10205,7.96,10206,7.96,10207,7.96,10208,10.677,10209,6.51,10210,4.209,10211,4.209,10212,4.209,10213,4.209,10214,4.209,10215,4.209,10216,4.209,10217,4.209,10218,4.209,10219,4.209,10220,4.209,10221,4.209,10222,4.209,10223,4.209,10224,4.209,10225,4.209,10226,4.209]],["component/66",[5,0.286]],["keyword/66",[]],["title/67",[29,15.32,46,21.273,161,13.893,185,19.98,1477,20.22,5133,32.872,5241,29.9]],["name/67",[4410,0.362,4411,0.362,5133,0.37]],["text/67",[0,3.459,1,3.926,5,2.982,6,3.441,8,2.555,9,2.84,10,2.917,20,5.326,21,3.472,29,2.073,31,4.074,46,5.274,138,2.232,139,2.404,151,3.142,161,3.662,185,2.703,193,3.978,207,2.719,214,4.578,220,3.716,221,4.824,226,4.709,246,2.703,247,3.967,254,4.352,259,3.547,261,3.194,265,3.814,277,3.716,279,2.769,284,2.752,294,5.423,303,2.583,306,3.023,311,3.867,334,6.394,336,3.867,337,6.715,338,3.437,340,8.652,350,4.538,360,2.917,402,3.867,465,4.353,468,5.19,487,3.308,488,3.403,498,2.822,503,5.957,513,3.308,516,1.772,540,2.822,545,5.473,576,3.926,577,5.326,598,4.672,602,2.878,725,3.308,734,3.509,756,4.9,802,3.221,836,3.814,918,3.069,1139,4.672,1281,3.867,1476,3.798,1477,5.013,1491,5.587,1521,3.437,1606,3.628,1608,3.472,1620,3.069,1656,3.168,1657,3.764,1707,3.764,1760,4.808,1761,4.553,1765,6.737,1832,4.447,1855,3.814,1868,3.308,1871,4.045,1878,3.764,2012,4.352,2060,5.19,2124,3.922,2182,6.525,2362,4.447,2592,3.922,2729,4.553,2875,4.578,2878,4.808,2947,10.049,2955,4.808,3219,3.867,3625,4.553,3879,4.672,3896,5.716,4126,4.553,4303,4.672,4413,6.358,4415,6.936,4430,4.672,5133,8.981,5241,5.649,5461,5.396,5554,5.716,5581,4.967,5594,5.716,5623,5.158,5668,7.203,5751,5.396,6111,5.396,7619,5.396,10227,6.202,10228,6.202]],["component/67",[5,0.286]],["keyword/67",[]]],"invertedIndex":[["",{"_index":263,"title":{"49":{},"49-73":{},"49-74":{},"49-94":{},"51-20":{},"51-21":{},"51-22":{},"51-60":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"61":{}},"component":{},"keyword":{}}],["0",{"_index":417,"title":{"22-2":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"39":{},"40":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["0(a0",{"_index":4729,"title":{},"name":{},"text":{"29":{},"40":{}},"component":{},"keyword":{}}],["0(a1",{"_index":4711,"title":{},"name":{},"text":{"29":{},"40":{}},"component":{},"keyword":{}}],["0(addr",{"_index":10012,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["0(rs1",{"_index":4985,"title":{},"name":{},"text":{"31":{},"50":{}},"component":{},"keyword":{}}],["0(s0",{"_index":5625,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["0(s0)=1",{"_index":5686,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["0(s1",{"_index":5692,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["0(s2",{"_index":5696,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["0(s2)=1",{"_index":5687,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["0(t1",{"_index":2836,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["0,1,2,3",{"_index":8417,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0,1,2,3,4,5,6,7",{"_index":9142,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0..0xfff",{"_index":2269,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0..4",{"_index":3778,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["0..depth",{"_index":3797,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["0..n",{"_index":3669,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["0.0",{"_index":5157,"title":{},"name":{},"text":{"34":{},"51":{}},"component":{},"keyword":{}}],["0.0625",{"_index":10064,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.1",{"_index":5160,"title":{"40":{},"41":{}},"name":{},"text":{"34":{},"40":{},"41":{}},"component":{},"keyword":{}}],["0.125",{"_index":10066,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.2",{"_index":5158,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["0.25",{"_index":10068,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.3",{"_index":430,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["0.3125",{"_index":10070,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.375",{"_index":10072,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.4375",{"_index":10074,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.5",{"_index":7700,"title":{},"name":{},"text":{"51":{},"53":{},"58":{}},"component":{},"keyword":{}}],["0.625",{"_index":10077,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.7",{"_index":5159,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["0.75",{"_index":6751,"title":{},"name":{},"text":{"49":{},"58":{}},"component":{},"keyword":{}}],["0.875",{"_index":10078,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0.93",{"_index":4577,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["0.997",{"_index":6753,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["00",{"_index":2129,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"27":{},"31":{},"33":{},"37":{},"38":{},"43":{},"44":{},"49":{},"59":{}},"component":{},"keyword":{}}],["00,01",{"_index":3114,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["000",{"_index":3662,"title":{},"name":{},"text":{"19":{},"30":{},"31":{},"37":{},"44":{}},"component":{},"keyword":{}}],["0000",{"_index":4258,"title":{},"name":{},"text":{"26":{},"44":{},"45":{}},"component":{},"keyword":{}}],["00000",{"_index":6228,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["000000",{"_index":6233,"title":{},"name":{},"text":{"44":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["0000000",{"_index":6219,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000000000000",{"_index":6230,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000000000001",{"_index":6232,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000000001101",{"_index":6391,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["00000001",{"_index":10059,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["000000011101",{"_index":6393,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0000001",{"_index":6249,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000001",{"_index":8706,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0000010",{"_index":6349,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0000011",{"_index":2140,"title":{},"name":{},"text":{"8":{},"44":{}},"component":{},"keyword":{}}],["00001",{"_index":6254,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["000010",{"_index":8708,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0000100",{"_index":6287,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0000101",{"_index":6304,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000011",{"_index":8712,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0000110",{"_index":6351,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0000111",{"_index":6280,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0001",{"_index":6229,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["00010",{"_index":6251,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["000100",{"_index":8715,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0001000",{"_index":6288,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0001001",{"_index":6306,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000101",{"_index":8718,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0001010",{"_index":6353,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0001011",{"_index":6333,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0001080e",{"_index":9933,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["0001098a",{"_index":9828,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["00011",{"_index":6253,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["000110",{"_index":8721,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0001100",{"_index":6289,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0001101",{"_index":6308,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["000111",{"_index":8724,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0001110",{"_index":6355,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0001111",{"_index":6226,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0002",{"_index":1167,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["000…​000",{"_index":10058,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["001",{"_index":3663,"title":{},"name":{},"text":{"19":{},"30":{},"31":{},"37":{},"44":{}},"component":{},"keyword":{}}],["00100",{"_index":6256,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["001000",{"_index":8726,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0010000",{"_index":6291,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0010001",{"_index":6312,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["001001",{"_index":8728,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0010010",{"_index":6359,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0010011",{"_index":6215,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["00101",{"_index":8863,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["001010",{"_index":8731,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0010100",{"_index":6292,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0010101",{"_index":6313,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["001011",{"_index":8734,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0010110",{"_index":6363,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0010111",{"_index":6206,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0011",{"_index":6227,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["00110",{"_index":8864,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["001100",{"_index":8735,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["001101",{"_index":8736,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0011011",{"_index":6235,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["00111",{"_index":8865,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["001110",{"_index":8737,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["001111",{"_index":8738,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0016",{"_index":3446,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["01",{"_index":1068,"title":{},"name":{},"text":{"7":{},"8":{},"12":{},"15":{},"27":{},"31":{},"33":{},"37":{},"38":{},"43":{},"44":{},"49":{},"59":{}},"component":{},"keyword":{}}],["010",{"_index":2142,"title":{},"name":{},"text":{"8":{},"19":{},"30":{},"31":{},"37":{},"44":{}},"component":{},"keyword":{}}],["0100",{"_index":3448,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["01000",{"_index":6260,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["010000",{"_index":6234,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["0100000",{"_index":6220,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0100001",{"_index":6316,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["010001",{"_index":8743,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0100010",{"_index":6367,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0100011",{"_index":6214,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["01001",{"_index":8866,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["010010",{"_index":8744,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["010011",{"_index":8747,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0100111",{"_index":6281,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["01010",{"_index":8867,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["010100",{"_index":8749,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["010101",{"_index":8751,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["01010x",{"_index":9499,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["01011",{"_index":8868,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["010110",{"_index":8752,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0101100",{"_index":6290,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0101101",{"_index":6310,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["010111",{"_index":8753,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0101110",{"_index":6357,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0101111",{"_index":6252,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["01091186",{"_index":939,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["010b",{"_index":3091,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["010…​000",{"_index":10071,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["011",{"_index":3664,"title":{},"name":{},"text":{"19":{},"30":{},"31":{},"37":{},"44":{}},"component":{},"keyword":{}}],["01100",{"_index":6258,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["011000",{"_index":8756,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0110000010000001",{"_index":10212,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["0110000110000001",{"_index":10214,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["0110001010000001",{"_index":10215,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["0110001110000001",{"_index":10217,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["011001",{"_index":8758,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0110010010000001",{"_index":10219,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["0110010110000001",{"_index":10221,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["0110011",{"_index":6221,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["0110011010000001",{"_index":10223,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["0110011110000001",{"_index":10225,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["01101",{"_index":9505,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["011010",{"_index":8760,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["011011",{"_index":8763,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0110111",{"_index":6205,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["01101111",{"_index":10060,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["01110",{"_index":8869,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["011100",{"_index":8766,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["01110000",{"_index":10061,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["011101",{"_index":8768,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["0111011",{"_index":6239,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["01110111",{"_index":10062,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["01111",{"_index":8870,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["011110",{"_index":8771,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["01111000",{"_index":10063,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["01111011",{"_index":10065,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["011111",{"_index":8774,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["01111100",{"_index":10067,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["01111101",{"_index":10069,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["01111110",{"_index":10076,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["01111111",{"_index":10057,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["0111…​1111",{"_index":3006,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["017h",{"_index":7526,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["024263",{"_index":3428,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["024894",{"_index":3429,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["03",{"_index":1005,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["04",{"_index":1170,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["04/1522788048733065000.pdf",{"_index":1171,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["0b00))[3..0",{"_index":4689,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["0b000",{"_index":6633,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0b000))[7..0",{"_index":4680,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["0b00000",{"_index":5119,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["0b00000000",{"_index":4632,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["0b1",{"_index":4599,"title":{},"name":{},"text":{"29":{},"52":{}},"component":{},"keyword":{}}],["0b11111111",{"_index":4633,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["0s",{"_index":4796,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["0x0",{"_index":7142,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0..0xa",{"_index":6672,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x00",{"_index":4717,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x000",{"_index":3126,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x000000",{"_index":6638,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x00000000",{"_index":7083,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000001",{"_index":6725,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000002",{"_index":7144,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000004",{"_index":7145,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000007",{"_index":6723,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x00000008",{"_index":7146,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000010",{"_index":7148,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0000001b",{"_index":7156,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000020",{"_index":7150,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000036",{"_index":7157,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0000003f",{"_index":6720,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x00000040",{"_index":7152,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x00000080",{"_index":7154,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x000000c0",{"_index":6721,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x000000f8",{"_index":6726,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x000000fe",{"_index":6724,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x00002000",{"_index":2171,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00002003",{"_index":2177,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00002020",{"_index":2172,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00002023",{"_index":2178,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00003000",{"_index":2173,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00003003",{"_index":2180,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00003020",{"_index":2174,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00003023",{"_index":2181,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["0x00070e15",{"_index":9434,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x001",{"_index":3204,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0x002",{"_index":3205,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0x00214000",{"_index":8446,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0x003",{"_index":3206,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0x008",{"_index":3209,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0x009",{"_index":3210,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0x00a",{"_index":3211,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0x00b",{"_index":7633,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0x00e",{"_index":7634,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0x00f",{"_index":3212,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0x01",{"_index":7270,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x011",{"_index":3220,"title":{},"name":{},"text":{"12":{},"50":{}},"component":{},"keyword":{}}],["0x015",{"_index":3221,"title":{},"name":{},"text":{"12":{},"49":{}},"component":{},"keyword":{}}],["0x017",{"_index":3224,"title":{},"name":{},"text":{"12":{},"57":{}},"component":{},"keyword":{}}],["0x01ffffffffffffff",{"_index":4342,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["0x02",{"_index":7283,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x03",{"_index":7343,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x04",{"_index":7186,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x05",{"_index":7179,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x06",{"_index":7194,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x07",{"_index":7227,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x08",{"_index":7215,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x09",{"_index":7389,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0a",{"_index":7362,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0b",{"_index":7205,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0c",{"_index":7382,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0d",{"_index":7331,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0e",{"_index":7260,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0f",{"_index":7252,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x0ff",{"_index":3127,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x1",{"_index":7143,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x10",{"_index":7359,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x100",{"_index":3141,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x10171e25",{"_index":9462,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x104",{"_index":3247,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x105",{"_index":3248,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x106",{"_index":3249,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x10a",{"_index":3250,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x10c",{"_index":3264,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x10d",{"_index":3265,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x10e",{"_index":3266,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x10f",{"_index":3267,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x11",{"_index":7356,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x12",{"_index":7373,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x120",{"_index":3251,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x13",{"_index":7190,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x14",{"_index":7174,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x140",{"_index":3253,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x141",{"_index":3254,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x141b2229",{"_index":9453,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x142",{"_index":3255,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x143",{"_index":3256,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x144",{"_index":3257,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x14d",{"_index":4049,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["0x15",{"_index":7301,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x150",{"_index":2255,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x151",{"_index":2257,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x152",{"_index":2259,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x153",{"_index":2261,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x155",{"_index":2263,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x156",{"_index":2265,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x157",{"_index":2267,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x15d",{"_index":4050,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["0x16",{"_index":7172,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x17",{"_index":7232,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x18",{"_index":7394,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x180",{"_index":3261,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x181f262d",{"_index":9444,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x18c",{"_index":3991,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x18d",{"_index":3993,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x18e",{"_index":3995,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x18f",{"_index":3997,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x19",{"_index":7237,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x1a",{"_index":7309,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x1b",{"_index":7095,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x1c",{"_index":7212,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x1c232a31",{"_index":9435,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x1d",{"_index":7319,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x1e",{"_index":7258,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x1f",{"_index":6472,"title":{},"name":{},"text":{"45":{},"47":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x1f820000",{"_index":8415,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0x1ff",{"_index":3142,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x1ffffff12345678",{"_index":4347,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["0x2",{"_index":7109,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x20",{"_index":7401,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x200",{"_index":3161,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["0x200..0x2ff",{"_index":3694,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["0x204",{"_index":3305,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x205",{"_index":3306,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x21",{"_index":7271,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x22",{"_index":7267,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x23",{"_index":7329,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x24",{"_index":7259,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x240",{"_index":3307,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x241",{"_index":3308,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x242",{"_index":3309,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x243",{"_index":3310,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x244",{"_index":3311,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x24d",{"_index":4057,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["0x25",{"_index":7266,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x250",{"_index":2275,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x251",{"_index":2278,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x252",{"_index":2280,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x253",{"_index":2282,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x255",{"_index":2284,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x256",{"_index":2286,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x257",{"_index":2288,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x25d",{"_index":4058,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["0x26",{"_index":7191,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x27",{"_index":7279,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x28",{"_index":7176,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x280",{"_index":3312,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x29",{"_index":7328,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2a",{"_index":7184,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2b",{"_index":7180,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2c",{"_index":7178,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2c333a41",{"_index":9463,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x2d",{"_index":7370,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2e",{"_index":7322,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2f",{"_index":7342,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x2ff",{"_index":3162,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["0x3",{"_index":7108,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x30",{"_index":7314,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x300",{"_index":3181,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x301",{"_index":3319,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x302",{"_index":3320,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x303",{"_index":3321,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x30373e45",{"_index":9454,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x304",{"_index":3322,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x305",{"_index":3323,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x306",{"_index":3324,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x30a",{"_index":3334,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x30c",{"_index":3348,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x30d",{"_index":3349,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x30e",{"_index":3350,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x30f",{"_index":3351,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x31",{"_index":7364,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x310",{"_index":3325,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x312",{"_index":3326,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x31a",{"_index":3335,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x31c",{"_index":3352,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x31d",{"_index":3353,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x31e",{"_index":3354,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x31f",{"_index":3355,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x32",{"_index":7313,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x320",{"_index":3380,"title":{},"name":{},"text":{"12":{},"18":{}},"component":{},"keyword":{}}],["0x321",{"_index":3595,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["0x322",{"_index":3596,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["0x323",{"_index":3381,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x324",{"_index":3382,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x33",{"_index":7203,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x33f",{"_index":3383,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x34",{"_index":7308,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x340",{"_index":3327,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x341",{"_index":3328,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x342",{"_index":3329,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x343",{"_index":3330,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x343b4249",{"_index":9445,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x344",{"_index":3331,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x34a",{"_index":3332,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x34b",{"_index":3333,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x35",{"_index":7257,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x350",{"_index":2221,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x351",{"_index":2224,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x352",{"_index":2226,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x353",{"_index":2228,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x354",{"_index":2238,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x355",{"_index":2230,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x356",{"_index":2232,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x357",{"_index":2234,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0x36",{"_index":7282,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x37",{"_index":7337,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x38",{"_index":7293,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x383f464d",{"_index":9436,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x38c",{"_index":3975,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x38d",{"_index":3979,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x38e",{"_index":3983,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x38f",{"_index":3987,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x39",{"_index":7407,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x39c",{"_index":3977,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x39d",{"_index":3981,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x39e",{"_index":3985,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x39f",{"_index":3989,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x3a",{"_index":7398,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x3a0",{"_index":3338,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3a1",{"_index":3339,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3a2",{"_index":3340,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3a3",{"_index":3341,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3ae",{"_index":3342,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3af",{"_index":3343,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3b",{"_index":7269,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x3b0",{"_index":3344,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3b1",{"_index":3345,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3c",{"_index":7236,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x3d",{"_index":7170,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x3e",{"_index":7404,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x3ef",{"_index":3346,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x3f",{"_index":7224,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x3f800000",{"_index":9615,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["0x3ff",{"_index":3182,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x4",{"_index":7147,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x40",{"_index":3538,"title":{},"name":{},"text":{"17":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x40+i",{"_index":3541,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["0x400",{"_index":3128,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x4000",{"_index":6050,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["0x41",{"_index":3547,"title":{},"name":{},"text":{"17":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x42",{"_index":3548,"title":{},"name":{},"text":{"17":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x43",{"_index":3553,"title":{},"name":{},"text":{"17":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x44",{"_index":7189,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x45",{"_index":7338,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x46",{"_index":7275,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x47",{"_index":7226,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x48",{"_index":7408,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x484f565d",{"_index":9464,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x49",{"_index":7192,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4a",{"_index":7381,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4b",{"_index":7253,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4c",{"_index":7281,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4c535a61",{"_index":9455,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x4d",{"_index":7400,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4e",{"_index":7333,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4f",{"_index":7240,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x4ff",{"_index":3129,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x5",{"_index":7149,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x50",{"_index":7197,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x500",{"_index":3143,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x50575e65",{"_index":9446,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x51",{"_index":7349,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x52",{"_index":7280,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x53",{"_index":7332,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x54",{"_index":7204,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x545b6269",{"_index":9437,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x55",{"_index":7310,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x56",{"_index":7255,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x57",{"_index":7276,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x57f",{"_index":3144,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x58",{"_index":7263,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x580",{"_index":3145,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x59",{"_index":7235,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x5a",{"_index":7360,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x5a8",{"_index":3263,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x5b",{"_index":7348,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x5bf",{"_index":3146,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x5c",{"_index":7358,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x5c0",{"_index":3147,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x5d",{"_index":7305,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x5e",{"_index":7261,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x5f",{"_index":3539,"title":{},"name":{},"text":{"17":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x5f080000",{"_index":8411,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0x5ff",{"_index":3148,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x6",{"_index":7151,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x60",{"_index":7326,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x600",{"_index":3163,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x602",{"_index":3272,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x603",{"_index":3273,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x604",{"_index":3274,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x605",{"_index":3287,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x606",{"_index":3275,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x607",{"_index":3276,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x60a",{"_index":2387,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["0x60c",{"_index":3290,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x60d",{"_index":3291,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x60e",{"_index":3292,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x60f",{"_index":3293,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x61",{"_index":7300,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x612",{"_index":3277,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x615",{"_index":3288,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x61a",{"_index":3284,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x61c",{"_index":3294,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x61d",{"_index":3295,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x61e",{"_index":3296,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x61f",{"_index":3297,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x62",{"_index":7209,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x63",{"_index":7262,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x64",{"_index":7247,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x643",{"_index":3278,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x644",{"_index":3279,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x645",{"_index":3280,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x646b7279",{"_index":9465,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x64a",{"_index":3281,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x65",{"_index":7386,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x66",{"_index":7324,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x67",{"_index":7181,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x67f",{"_index":3164,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x68",{"_index":7242,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x680",{"_index":3165,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x686f767d",{"_index":9456,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x68c",{"_index":3999,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x68d",{"_index":4003,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x68e",{"_index":4007,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x68f",{"_index":4011,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x69",{"_index":7379,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x69c",{"_index":4001,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x69d",{"_index":4005,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x69e",{"_index":4009,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x69f",{"_index":4013,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["0x6a",{"_index":7344,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x6a8",{"_index":3285,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x6b",{"_index":7243,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x6bf",{"_index":3166,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x6c",{"_index":7347,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x6c0",{"_index":3167,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x6c737a81",{"_index":9447,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x6d",{"_index":7346,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x6e",{"_index":7391,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x6f",{"_index":7334,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x6ff",{"_index":3168,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7",{"_index":7153,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x70",{"_index":7254,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x700",{"_index":3183,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x70777e85",{"_index":9438,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x71",{"_index":7246,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x72",{"_index":7345,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x721",{"_index":3597,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["0x722",{"_index":3598,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["0x723",{"_index":3384,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x724",{"_index":3385,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x73",{"_index":7231,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x73f",{"_index":3386,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x74",{"_index":7371,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x740",{"_index":3363,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x741",{"_index":3364,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x742",{"_index":3365,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x744",{"_index":3366,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x747",{"_index":3336,"title":{},"name":{},"text":{"12":{},"21":{}},"component":{},"keyword":{}}],["0x75",{"_index":7222,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x757",{"_index":3337,"title":{},"name":{},"text":{"12":{},"21":{}},"component":{},"keyword":{}}],["0x76",{"_index":7183,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x77",{"_index":7384,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x77f",{"_index":3184,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x78",{"_index":7272,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x780",{"_index":3186,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x79",{"_index":7402,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x79cc4519",{"_index":9330,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x79f",{"_index":3187,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7a",{"_index":7202,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x7a0",{"_index":3117,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7a1",{"_index":3391,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7a2",{"_index":3392,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7a3",{"_index":3393,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7a8",{"_index":3394,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7a879d8a",{"_index":9331,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x7af",{"_index":3119,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7b",{"_index":7368,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x7b0",{"_index":3120,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7b1",{"_index":3400,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7b2",{"_index":3401,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7b3",{"_index":3402,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7bf",{"_index":3118,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7c",{"_index":7268,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x7c0",{"_index":3190,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x7d",{"_index":7396,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x7e",{"_index":7385,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x7e900000",{"_index":8443,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0x7f",{"_index":2379,"title":{},"name":{},"text":{"10":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x7fc0",{"_index":4817,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["0x7fc00000",{"_index":5343,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["0x7ff",{"_index":3191,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x8",{"_index":7155,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x80",{"_index":7218,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x800",{"_index":3130,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x8000abcd",{"_index":6747,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0x81",{"_index":7244,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x82",{"_index":7323,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x83",{"_index":7234,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x84",{"_index":7393,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x848b9299",{"_index":9457,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x85",{"_index":7239,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x86",{"_index":7193,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x87",{"_index":7273,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x88",{"_index":7365,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x888f969d",{"_index":9448,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x89",{"_index":7378,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x8a",{"_index":2385,"title":{},"name":{},"text":{"10":{},"49":{},"52":{}},"component":{},"keyword":{}}],["0x8b",{"_index":7249,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x8c",{"_index":7316,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x8c939aa1",{"_index":9439,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0x8d",{"_index":7350,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x8e",{"_index":7341,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x8f",{"_index":7223,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x8ff",{"_index":3131,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x8–0xf",{"_index":3035,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["0x9",{"_index":7113,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x90",{"_index":7165,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x900",{"_index":3149,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x91",{"_index":7199,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x92",{"_index":7352,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x93",{"_index":7312,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x94",{"_index":7220,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x95",{"_index":7217,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x96",{"_index":7383,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x97",{"_index":7380,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x97f",{"_index":3150,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x98",{"_index":7201,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x980",{"_index":3151,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x99",{"_index":7195,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9a",{"_index":7182,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9b",{"_index":7307,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9bf",{"_index":3152,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x9c",{"_index":7196,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9c0",{"_index":3153,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0x9d",{"_index":7256,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9e",{"_index":7288,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9f",{"_index":7277,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0x9ff",{"_index":3154,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xa",{"_index":6682,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa0",{"_index":7285,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa00",{"_index":3169,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xa0a7aeb5",{"_index":9458,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xa1",{"_index":7302,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa2",{"_index":7265,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa3",{"_index":7295,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa4",{"_index":7306,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa4abb2b9",{"_index":9449,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xa5",{"_index":7366,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa6",{"_index":7225,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa7",{"_index":7228,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa7f",{"_index":3170,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xa8",{"_index":7241,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xa80",{"_index":3171,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xa8afb6bd",{"_index":9440,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xa9",{"_index":7213,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xaa",{"_index":7188,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xab",{"_index":7330,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xabcd",{"_index":6748,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0xabf",{"_index":3172,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xabffffff12345678",{"_index":4339,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["0xac",{"_index":7208,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xac0",{"_index":3173,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xad",{"_index":7311,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xae",{"_index":7304,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xaf",{"_index":7351,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xaff",{"_index":3174,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb",{"_index":7111,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb..0xf",{"_index":6673,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0xb0",{"_index":7377,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb00",{"_index":3192,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb02",{"_index":3368,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb03",{"_index":3369,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb04",{"_index":3370,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb1",{"_index":7317,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb1f",{"_index":3371,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb2",{"_index":7245,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb3",{"_index":7211,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb4",{"_index":7376,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb5",{"_index":7294,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb6",{"_index":7173,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb7",{"_index":7171,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb7f",{"_index":3193,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb8",{"_index":7374,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb80",{"_index":3194,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb82",{"_index":3372,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb83",{"_index":3373,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb84",{"_index":3374,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xb9",{"_index":7387,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xb9f",{"_index":3375,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xba",{"_index":7233,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xbb",{"_index":7353,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xbbf",{"_index":3195,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xbc",{"_index":7355,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xbc0",{"_index":3196,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xbcc3cad1",{"_index":9459,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xbd",{"_index":7369,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xbe",{"_index":7185,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xbf",{"_index":7290,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xbff",{"_index":3197,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc",{"_index":9507,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xc0",{"_index":7327,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc00",{"_index":3133,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0xc00–0xc1f",{"_index":5219,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["0xc01",{"_index":3227,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0xc02",{"_index":3228,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0xc03",{"_index":3229,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc04",{"_index":3230,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc0c7ced5",{"_index":9450,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xc1",{"_index":7363,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc1f",{"_index":3231,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc2",{"_index":7175,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc20",{"_index":3213,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0xc21",{"_index":3214,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0xc22",{"_index":3215,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["0xc3",{"_index":7187,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc4",{"_index":7286,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc4cbd2d9",{"_index":9441,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xc5",{"_index":7390,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc6",{"_index":7392,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc7",{"_index":7292,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc7f",{"_index":3134,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc8",{"_index":7287,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc80",{"_index":3136,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0xc80–0xc9f",{"_index":5220,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["0xc81",{"_index":3232,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0xc82",{"_index":3233,"title":{},"name":{},"text":{"12":{},"44":{}},"component":{},"keyword":{}}],["0xc83",{"_index":3234,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc84",{"_index":3235,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc9",{"_index":7214,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xc9f",{"_index":3236,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xca",{"_index":7325,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xcb",{"_index":7406,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xcbf",{"_index":3137,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xcc",{"_index":7168,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xcc0",{"_index":3139,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xcd",{"_index":7367,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xce",{"_index":7298,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xcf",{"_index":7207,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xcff",{"_index":3140,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xc–0xf",{"_index":3034,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["0xd",{"_index":7112,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd0",{"_index":7372,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd00",{"_index":3155,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xd1",{"_index":7264,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd2",{"_index":7291,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd3",{"_index":7278,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd4",{"_index":7274,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd5",{"_index":7335,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd6",{"_index":7164,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd7",{"_index":7405,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd7f",{"_index":3156,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xd8",{"_index":7361,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xd80",{"_index":3157,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xd8dfe6e",{"_index":9460,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xd9",{"_index":7357,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xda",{"_index":7248,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xda0",{"_index":3258,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xdb",{"_index":7336,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xdbf",{"_index":3158,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xdc",{"_index":7399,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xdc0",{"_index":3159,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xdce3eaf1",{"_index":9451,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xdd",{"_index":7354,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xde",{"_index":7339,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xdf",{"_index":7219,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xdff",{"_index":3160,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xe",{"_index":7114,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe0",{"_index":7303,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe00",{"_index":3175,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xe0e7eef5",{"_index":9442,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xe1",{"_index":7169,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe12",{"_index":3282,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xe2",{"_index":7321,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe3",{"_index":7318,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe4",{"_index":7210,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe5",{"_index":7375,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe6",{"_index":7238,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe7",{"_index":7284,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe7f",{"_index":3176,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xe8",{"_index":7216,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xe80",{"_index":3177,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xe9",{"_index":7166,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xea",{"_index":7289,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xeb",{"_index":7251,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xebf",{"_index":3178,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xec",{"_index":7397,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xec0",{"_index":3179,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xed",{"_index":7206,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xee",{"_index":7403,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xef",{"_index":7200,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xeff",{"_index":3180,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf",{"_index":9508,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xf0",{"_index":7395,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf00",{"_index":3198,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf1",{"_index":7388,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf11",{"_index":3313,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf12",{"_index":3314,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf13",{"_index":3315,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf14",{"_index":3316,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf15",{"_index":3317,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf2",{"_index":7297,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf3",{"_index":7230,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf4",{"_index":7198,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf4fb0209",{"_index":9461,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xf5",{"_index":7315,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf6",{"_index":7320,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf7",{"_index":7296,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf7f",{"_index":3199,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf8",{"_index":7250,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xf80",{"_index":3200,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xf8ff060d",{"_index":9452,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xf9",{"_index":7299,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xfa",{"_index":7221,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xfb",{"_index":7177,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xfbf",{"_index":3201,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xfc",{"_index":7229,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xfc0",{"_index":3202,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xfc030a11",{"_index":9443,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["0xfd",{"_index":7340,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xfe",{"_index":7167,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["0xff",{"_index":4718,"title":{},"name":{},"text":{"29":{},"49":{},"52":{},"57":{}},"component":{},"keyword":{}}],["0xfff",{"_index":3203,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["0xffffffff",{"_index":6749,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["0xffffffff12345678",{"_index":4345,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["0xxx",{"_index":3132,"title":{},"name":{},"text":{"12":{},"26":{}},"component":{},"keyword":{}}],["0–0xfff",{"_index":2271,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["0–31",{"_index":4101,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["0—​31",{"_index":7799,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["0’",{"_index":3016,"title":{},"name":{},"text":{"10":{},"29":{}},"component":{},"keyword":{}}],["1",{"_index":707,"title":{"40-8":{},"51-20":{},"51-21":{},"51-22":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["1)/2",{"_index":3791,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["1,vm",{"_index":8134,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1..0",{"_index":4638,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["1..depth",{"_index":3796,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["1.0",{"_index":185,"title":{"8":{},"9":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"30":{},"51":{},"52":{},"54":{},"58":{},"59":{},"60":{},"64":{},"66":{},"67":{},"26-29":{},"26-30":{},"26-31":{},"26-32":{},"26-33":{},"26-34":{},"39-3":{},"66-1":{}},"name":{},"text":{"4":{},"8":{},"9":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"30":{},"33":{},"34":{},"42":{},"51":{},"52":{},"53":{},"54":{},"58":{},"59":{},"60":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["1.0.0",{"_index":1082,"title":{"27":{},"29":{},"33":{},"55":{},"57":{},"61":{}},"name":{},"text":{"7":{},"27":{},"29":{},"33":{},"49":{},"55":{},"57":{},"61":{}},"component":{},"keyword":{}}],["1.0.1",{"_index":6580,"title":{"49":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["1.01",{"_index":5130,"title":{"56":{}},"name":{},"text":{"34":{},"56":{}},"component":{},"keyword":{}}],["1.043e",{"_index":8410,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1.1",{"_index":5174,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["1.10",{"_index":431,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["1.11",{"_index":320,"title":{},"name":{},"text":{"4":{},"10":{},"26":{}},"component":{},"keyword":{}}],["1.11/1.12",{"_index":4028,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["1.12",{"_index":201,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["1.13",{"_index":184,"title":{"10":{},"26":{}},"name":{},"text":{"4":{},"10":{},"22":{},"26":{}},"component":{},"keyword":{}}],["1.25",{"_index":10079,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["1.3",{"_index":6611,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["1.5",{"_index":10080,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["1.7",{"_index":5156,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["1.75",{"_index":10081,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["1.9",{"_index":582,"title":{},"name":{},"text":{"4":{},"34":{}},"component":{},"keyword":{}}],["1.9.1",{"_index":30,"title":{},"name":{},"text":{"2":{},"4":{},"10":{}},"component":{},"keyword":{}}],["1/2",{"_index":7658,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1/3",{"_index":5925,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["1/4",{"_index":7659,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1/5",{"_index":5821,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["1/8",{"_index":5491,"title":{},"name":{},"text":{"38":{},"51":{}},"component":{},"keyword":{}}],["1/sqrt(v1",{"_index":9619,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["1/sqrt(x",{"_index":8383,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1/v2",{"_index":9614,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["1/x",{"_index":8423,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["10",{"_index":799,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"15":{},"19":{},"26":{},"27":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"48":{},"49":{},"51":{},"52":{},"56":{},"57":{},"58":{},"59":{}},"component":{},"keyword":{}}],["10..11",{"_index":9996,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["100",{"_index":3665,"title":{},"name":{},"text":{"19":{},"30":{},"31":{},"35":{},"37":{},"44":{},"51":{},"56":{}},"component":{},"keyword":{}}],["1000",{"_index":4239,"title":{},"name":{},"text":{"26":{},"44":{},"45":{}},"component":{},"keyword":{}}],["10000",{"_index":6262,"title":{},"name":{},"text":{"44":{},"51":{},"52":{}},"component":{},"keyword":{}}],["100000",{"_index":8776,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["10000000",{"_index":10082,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10000001",{"_index":10084,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10000010",{"_index":10085,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10000011",{"_index":10086,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["100001",{"_index":8780,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1000011",{"_index":6282,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["10000110",{"_index":10087,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10000111",{"_index":10088,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10001",{"_index":8862,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["100010",{"_index":8784,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["100011",{"_index":8787,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1000111",{"_index":6283,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["10001110",{"_index":10089,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10001111",{"_index":10090,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["10010",{"_index":8871,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["100100",{"_index":8790,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["100101",{"_index":8792,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1001011",{"_index":6284,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["10011",{"_index":8872,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["100110",{"_index":8795,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["100111",{"_index":8796,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1001111",{"_index":6285,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["100976\\_0000\\_00\\_en",{"_index":1268,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["100x",{"_index":3185,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["100…​000",{"_index":10073,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["101",{"_index":4935,"title":{},"name":{},"text":{"31":{},"37":{},"44":{},"51":{}},"component":{},"keyword":{}}],["1010",{"_index":3188,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["10100",{"_index":6264,"title":{},"name":{},"text":{"44":{},"51":{}},"component":{},"keyword":{}}],["101000",{"_index":8799,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1010000",{"_index":6295,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1010001",{"_index":6317,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["101001",{"_index":8802,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1010010",{"_index":6373,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1010011",{"_index":6286,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["10101",{"_index":8873,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["101010",{"_index":8805,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["101011",{"_index":8807,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["10101112",{"_index":8020,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1011",{"_index":3189,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["10110",{"_index":8874,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["101100",{"_index":8809,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["101101",{"_index":8812,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["10111",{"_index":8875,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["101110",{"_index":8815,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["101111",{"_index":8817,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["102",{"_index":8402,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1022",{"_index":4802,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["10227",{"_index":3432,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["1023",{"_index":4801,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["1024",{"_index":7020,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["103",{"_index":8401,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["104",{"_index":8435,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["105",{"_index":8400,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["106",{"_index":8399,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["107",{"_index":8434,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["108",{"_index":8398,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1080e",{"_index":9934,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10812",{"_index":9938,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10862",{"_index":9940,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10864",{"_index":9941,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10866",{"_index":9944,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109",{"_index":1076,"title":{},"name":{},"text":{"7":{},"51":{}},"component":{},"keyword":{}}],["1098a",{"_index":9829,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1098c",{"_index":9832,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1098e",{"_index":9836,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10990",{"_index":9840,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10992",{"_index":9844,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10994",{"_index":9848,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10996",{"_index":9852,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10998",{"_index":9856,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1099a",{"_index":9860,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1099c",{"_index":9864,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1099e",{"_index":9868,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109a0",{"_index":9872,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109a2",{"_index":9876,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109a4",{"_index":9879,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109f4",{"_index":9882,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109f6",{"_index":9886,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109f8",{"_index":9889,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109fa",{"_index":9892,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109fc",{"_index":9895,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["109fe",{"_index":9898,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a00",{"_index":9901,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a02",{"_index":9904,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a04",{"_index":9907,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a06",{"_index":9910,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a08",{"_index":9913,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a0a",{"_index":9916,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a0c",{"_index":9919,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a0e",{"_index":9922,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a10",{"_index":9925,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10a12",{"_index":9929,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["10kbit/sec",{"_index":7039,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["10xx",{"_index":3135,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["11",{"_index":807,"title":{"40-11":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"15":{},"19":{},"26":{},"27":{},"30":{},"31":{},"33":{},"37":{},"38":{},"40":{},"43":{},"44":{},"45":{},"48":{},"49":{},"51":{},"52":{},"57":{},"58":{},"59":{}},"component":{},"keyword":{}}],["110",{"_index":4936,"title":{},"name":{},"text":{"31":{},"37":{},"44":{},"51":{}},"component":{},"keyword":{}}],["11000",{"_index":6266,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["110000",{"_index":8819,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1100000",{"_index":6293,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1100001",{"_index":6322,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["110001",{"_index":8823,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1100010",{"_index":6379,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1100011",{"_index":6209,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["110010",{"_index":8826,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["110011",{"_index":8829,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1100111",{"_index":6208,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1101",{"_index":9939,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["110100",{"_index":8832,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1101000",{"_index":6296,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1101001",{"_index":6323,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["110101",{"_index":8835,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1101010",{"_index":6382,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1101011",{"_index":6342,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["110110",{"_index":8837,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["110111",{"_index":8840,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1101111",{"_index":6207,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["110…​000",{"_index":10075,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["111",{"_index":4828,"title":{},"name":{},"text":{"30":{},"31":{},"37":{},"44":{},"51":{}},"component":{},"keyword":{}}],["11100",{"_index":6268,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["111000",{"_index":8842,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1110000",{"_index":6294,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1110001",{"_index":6321,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["111001",{"_index":8845,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1110010",{"_index":6377,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1110011",{"_index":6231,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["111010",{"_index":8846,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["111011",{"_index":8848,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["111100",{"_index":8850,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1111000",{"_index":6297,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["1111001",{"_index":6325,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["111101",{"_index":8853,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["1111010",{"_index":6385,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["111110",{"_index":8856,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["111111",{"_index":8858,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["11111111",{"_index":10091,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["1111…​1111",{"_index":3007,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["112",{"_index":4804,"title":{"57-37":{}},"name":{},"text":{"30":{},"51":{},"57":{}},"component":{},"keyword":{}}],["112(s0",{"_index":9671,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["112|128|144|160",{"_index":10001,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["113",{"_index":8397,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["114",{"_index":8396,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["115",{"_index":8438,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["116",{"_index":8395,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["117",{"_index":8433,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["118",{"_index":8394,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["119",{"_index":8393,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["11:10",{"_index":3122,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["11:7",{"_index":2166,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["11f84",{"_index":9946,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["11th",{"_index":1318,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["11x",{"_index":3667,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["11xx",{"_index":3138,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["12",{"_index":811,"title":{"40-12":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"19":{},"26":{},"31":{},"33":{},"37":{},"40":{},"44":{},"45":{},"47":{},"50":{},"51":{},"52":{},"57":{},"58":{},"62":{}},"component":{},"keyword":{}}],["12(sp",{"_index":9960,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["12..13",{"_index":9997,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["12..14",{"_index":9991,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["120",{"_index":8439,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["121",{"_index":8392,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["122",{"_index":8440,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["123",{"_index":8391,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["123—​153",{"_index":1145,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["124",{"_index":8441,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["124—​134",{"_index":1393,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["125",{"_index":8390,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["126",{"_index":4798,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["127",{"_index":4792,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["127:64",{"_index":10132,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["128",{"_index":1153,"title":{},"name":{},"text":{"7":{},"19":{},"22":{},"26":{},"30":{},"34":{},"36":{},"37":{},"38":{},"43":{},"49":{},"51":{},"52":{},"55":{},"58":{},"59":{}},"component":{},"keyword":{}}],["128(s0",{"_index":9672,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["128+64",{"_index":6759,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["12th",{"_index":1284,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["12—​25",{"_index":882,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["13",{"_index":241,"title":{"40-12":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"17":{},"19":{},"23":{},"26":{},"30":{},"31":{},"40":{},"45":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["131",{"_index":934,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["134201344",{"_index":3784,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["136",{"_index":1077,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["136(s0",{"_index":9674,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["13:2008",{"_index":5433,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["13th",{"_index":814,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["14",{"_index":830,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"19":{},"26":{},"30":{},"31":{},"40":{},"44":{},"45":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["140",{"_index":1182,"title":{"49-73":{}},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["142",{"_index":935,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["144(s0",{"_index":9675,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["14:12",{"_index":2141,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["15",{"_index":843,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"19":{},"26":{},"29":{},"30":{},"31":{},"40":{},"44":{},"45":{},"47":{},"49":{},"51":{},"52":{},"57":{},"58":{},"66":{}},"component":{},"keyword":{}}],["15..8",{"_index":7463,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["152(s0",{"_index":9677,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["15:0",{"_index":1671,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"38":{}},"component":{},"keyword":{}}],["15:10",{"_index":9779,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["15th",{"_index":1350,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["15—​26",{"_index":894,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["16",{"_index":860,"title":{"57-38":{}},"name":{},"text":{"7":{},"8":{},"10":{},"16":{},"19":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"37":{},"38":{},"40":{},"42":{},"43":{},"45":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"66":{}},"component":{},"keyword":{}}],["16(sp",{"_index":9961,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["16*16",{"_index":6755,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["16*vlmax",{"_index":9588,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["16,382",{"_index":4806,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["16,383",{"_index":4805,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["16/sew)*lmul",{"_index":8634,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["160(s0",{"_index":9676,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["1688—​1698",{"_index":782,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["16b",{"_index":5073,"title":{},"name":{},"text":{"31":{},"51":{},"53":{}},"component":{},"keyword":{}}],["16|32|48",{"_index":9992,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["16|32|48|64",{"_index":9989,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["17",{"_index":874,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"40":{},"49":{},"51":{},"52":{},"58":{},"63":{}},"component":{},"keyword":{}}],["17825",{"_index":6806,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["17825:2016",{"_index":1065,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["17th",{"_index":892,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["17–12",{"_index":4991,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["18",{"_index":883,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"28":{},"40":{},"49":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["180",{"_index":992,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["186",{"_index":1425,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["188—​197",{"_index":767,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["19",{"_index":895,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"19":{},"26":{},"28":{},"40":{},"44":{},"49":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["192",{"_index":6750,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["192/256",{"_index":6754,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["192/256=12/16=0.75",{"_index":6936,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["1950",{"_index":4880,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["1962",{"_index":949,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1963",{"_index":4882,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["1964",{"_index":955,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1965",{"_index":968,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["197",{"_index":999,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["1974",{"_index":1431,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1980",{"_index":4886,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["1981",{"_index":740,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1983",{"_index":755,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1984",{"_index":766,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1986",{"_index":1312,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1989",{"_index":781,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1990",{"_index":893,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1994",{"_index":1392,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1996",{"_index":829,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1998",{"_index":835,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["19:15",{"_index":2159,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["1:0",{"_index":1849,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"38":{},"50":{},"51":{},"57":{},"60":{}},"component":{},"keyword":{}}],["1:0]&~0x1",{"_index":10054,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1:0]≠0",{"_index":7705,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1:1",{"_index":7712,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1:2",{"_index":7697,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1:3",{"_index":7713,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1:asidlen",{"_index":1956,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["1:asidmax",{"_index":1950,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["1:i",{"_index":4207,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["1:vmidlen",{"_index":1974,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["1:vmidmax",{"_index":1973,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["1;rf",{"_index":5948,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["1]=f[rs1",{"_index":8628,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1]=x[rs1",{"_index":8626,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1f",{"_index":4735,"title":{},"name":{},"text":{"29":{},"50":{},"53":{}},"component":{},"keyword":{}}],["1f1e1d1c1b1a19181716151413121110",{"_index":7724,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1mb",{"_index":9953,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["1s",{"_index":4846,"title":{},"name":{},"text":{"30":{},"36":{},"38":{},"39":{},"51":{}},"component":{},"keyword":{}}],["1st",{"_index":791,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1—​1",{"_index":873,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1—​15",{"_index":1117,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1—​25",{"_index":1383,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["1’",{"_index":4604,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["1…​+2n",{"_index":8282,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["1≤y<pmpaddri",{"_index":3014,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["1≥pmpaddri",{"_index":3018,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["2",{"_index":712,"title":{"52-15":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"61":{},"64":{}},"component":{},"keyword":{}}],["2(depth+4",{"_index":3677,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["2(xlen",{"_index":8563,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*b",{"_index":8432,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*sew",{"_index":4852,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["2*vlen/16",{"_index":7995,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*vlen/32",{"_index":7997,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*vlen/64",{"_index":7999,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*vlen/8",{"_index":7993,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*vlen/sew",{"_index":7671,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2*vlmax",{"_index":7803,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2.0",{"_index":713,"title":{"31":{},"35":{},"39":{},"46":{},"48":{},"62":{},"63":{},"65":{}},"name":{},"text":{"7":{},"31":{},"34":{},"35":{},"39":{},"42":{},"46":{},"48":{},"58":{},"62":{},"63":{},"65":{}},"component":{},"keyword":{}}],["2.1",{"_index":604,"title":{"28":{},"45":{},"47":{}},"name":{},"text":{"5":{},"7":{},"28":{},"34":{}},"component":{},"keyword":{}}],["2.2",{"_index":5134,"title":{"36":{},"37":{},"43":{}},"name":{},"text":{"34":{},"36":{},"37":{},"42":{},"43":{},"51":{}},"component":{},"keyword":{}}],["2.3.2",{"_index":7077,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["2.4.4.1",{"_index":6957,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["2.5",{"_index":10083,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["2/3",{"_index":5919,"title":{},"name":{},"text":{"41":{},"49":{}},"component":{},"keyword":{}}],["2/5",{"_index":5834,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["20",{"_index":881,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"34":{},"40":{},"44":{},"45":{},"50":{},"51":{},"55":{},"58":{},"62":{}},"component":{},"keyword":{}}],["20(sp",{"_index":9962,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["20/31",{"_index":6944,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["200",{"_index":7040,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["2000",{"_index":821,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2001",{"_index":906,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2002",{"_index":1441,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2003",{"_index":1160,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2004",{"_index":983,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2005",{"_index":858,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2007",{"_index":1090,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2008",{"_index":729,"title":{},"name":{},"text":{"7":{},"30":{},"36":{},"37":{},"38":{},"43":{},"51":{},"59":{}},"component":{},"keyword":{}}],["2009",{"_index":798,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2010",{"_index":32,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"49":{}},"component":{},"keyword":{}}],["2011",{"_index":723,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["2012",{"_index":1134,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2013",{"_index":1241,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2014",{"_index":715,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2015",{"_index":993,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2016",{"_index":1051,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["2016.pdf",{"_index":1055,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2017",{"_index":33,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["2018",{"_index":1020,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2019",{"_index":609,"title":{},"name":{},"text":{"5":{},"7":{},"30":{},"34":{},"58":{}},"component":{},"keyword":{}}],["20190608",{"_index":5161,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["201911",{"_index":1371,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["20191213",{"_index":5155,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["20191214",{"_index":606,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["201x",{"_index":5172,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["202",{"_index":1095,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["2020",{"_index":1006,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["2021",{"_index":1040,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["20211203",{"_index":319,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["2024",{"_index":275,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["20240411",{"_index":5152,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["20241017",{"_index":200,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["20241101",{"_index":187,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["2025",{"_index":5149,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["20250508",{"_index":140,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{},"keyword":{}}],["21",{"_index":924,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"51":{},"58":{},"59":{}},"component":{},"keyword":{}}],["210",{"_index":4161,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["212",{"_index":3774,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["212—​219",{"_index":1408,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["216",{"_index":7625,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["22",{"_index":940,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"49":{},"51":{},"57":{},"58":{}},"component":{},"keyword":{}}],["224",{"_index":6690,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["2295—​2306",{"_index":1242,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["22n",{"_index":8312,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["23",{"_index":950,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"26":{},"30":{},"31":{},"49":{},"51":{},"52":{},"53":{},"58":{}},"component":{},"keyword":{}}],["23.3",{"_index":9621,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["23:16",{"_index":6734,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["24",{"_index":780,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"44":{},"45":{},"49":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["24(sp",{"_index":9963,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["24:20",{"_index":2165,"title":{},"name":{},"text":{"8":{},"30":{}},"component":{},"keyword":{}}],["25",{"_index":970,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"27":{},"31":{},"44":{},"46":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["255",{"_index":3670,"title":{},"name":{},"text":{"19":{},"49":{},"51":{}},"component":{},"keyword":{}}],["256",{"_index":3666,"title":{},"name":{},"text":{"19":{},"22":{},"31":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["25—​0",{"_index":2375,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["26",{"_index":971,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"44":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["267–275",{"_index":922,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["27",{"_index":960,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"19":{},"26":{},"31":{},"44":{},"49":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["27,26,25,24,23,22,21,20,19,18,9,8,1",{"_index":10008,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["28",{"_index":975,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"45":{},"47":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["28(sp",{"_index":9964,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["280—​310",{"_index":1421,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["29",{"_index":961,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"23":{},"26":{},"35":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["294—​305",{"_index":907,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["29:24",{"_index":6733,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["29:28",{"_index":2860,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["29th",{"_index":1221,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["2:0",{"_index":3022,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["2:0]≠0",{"_index":7702,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2:1",{"_index":6764,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["2:8",{"_index":7642,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2b",{"_index":8425,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2b+1",{"_index":8424,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2cce",{"_index":3790,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["2f",{"_index":7583,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["2g+2",{"_index":3028,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["2n",{"_index":2768,"title":{},"name":{},"text":{"10":{},"51":{},"52":{}},"component":{},"keyword":{}}],["2sew",{"_index":8189,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2vlmul[2:0",{"_index":7666,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["2xlen",{"_index":2529,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["2xlen+1",{"_index":3008,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["2xlen+2",{"_index":3009,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["2xlen+3",{"_index":3010,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["2·xlen",{"_index":4584,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["2·xlen−2:xlen",{"_index":4590,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["2×xlen",{"_index":5514,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["2✕xlen",{"_index":4560,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["2✕xlen−2:xlen",{"_index":4561,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["3",{"_index":722,"title":{"40-8":{},"49-73":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"22":{},"26":{},"28":{},"29":{},"30":{},"31":{},"34":{},"37":{},"38":{},"40":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"61":{}},"component":{},"keyword":{}}],["3%20ig.pdf",{"_index":1187,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3*4",{"_index":7937,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["3.053e",{"_index":8447,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["3.1",{"_index":1189,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3.1.5.1.1",{"_index":6757,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["3.274e38",{"_index":8414,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["3.6",{"_index":1361,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3/3",{"_index":5920,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["3/5",{"_index":5850,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["3/fips%20140",{"_index":1186,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3/shake",{"_index":7036,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["30",{"_index":995,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"38":{},"45":{},"47":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["3090",{"_index":8668,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["30:4",{"_index":2425,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["30–0",{"_index":4117,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["31",{"_index":1001,"title":{"49-74":{},"49-109":{}},"name":{},"text":{"7":{},"8":{},"10":{},"22":{},"25":{},"26":{},"29":{},"31":{},"37":{},"44":{},"45":{},"47":{},"49":{},"51":{},"52":{},"57":{},"58":{},"62":{},"66":{}},"component":{},"keyword":{}}],["317—​331",{"_index":1321,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["31:0",{"_index":2145,"title":{},"name":{},"text":{"8":{},"58":{},"60":{}},"component":{},"keyword":{}}],["31:12",{"_index":7522,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["31:25",{"_index":2164,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["31:30",{"_index":6728,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["31st",{"_index":801,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["31—​8",{"_index":5334,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["32",{"_index":371,"title":{"26-20":{}},"name":{"44":{}},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"12":{},"16":{},"19":{},"22":{},"23":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"66":{}},"component":{},"keyword":{}}],["32(sp",{"_index":9968,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["321—​345",{"_index":1126,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["32764",{"_index":3782,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["32905",{"_index":8951,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["32907",{"_index":1164,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["32b",{"_index":6186,"title":{},"name":{},"text":{"44":{},"51":{}},"component":{},"keyword":{}}],["32bit",{"_index":3848,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["32nd",{"_index":1209,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["32|48|64",{"_index":9993,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["33",{"_index":1021,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"49":{},"51":{}},"component":{},"keyword":{}}],["334—​342",{"_index":1353,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["339—​354",{"_index":1135,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["33:2",{"_index":1823,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["33:32",{"_index":4394,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["33—​40",{"_index":969,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["34",{"_index":904,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"31":{},"49":{},"51":{}},"component":{},"keyword":{}}],["34th",{"_index":902,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["35",{"_index":1034,"title":{},"name":{},"text":{"7":{},"8":{},"49":{},"51":{}},"component":{},"keyword":{}}],["351—​365",{"_index":1285,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["35th",{"_index":1389,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["36",{"_index":1041,"title":{},"name":{},"text":{"7":{},"8":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["36(sp",{"_index":9969,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["360",{"_index":4881,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["364—​383",{"_index":1401,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["37",{"_index":1056,"title":{},"name":{},"text":{"7":{},"8":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["377—​384",{"_index":822,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["38",{"_index":857,"title":{},"name":{},"text":{"7":{},"8":{},"26":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["38d",{"_index":1089,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["38th",{"_index":853,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["38—​45",{"_index":1313,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["39",{"_index":1069,"title":{"26-23":{}},"name":{},"text":{"7":{},"8":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["398—​425",{"_index":1258,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["39th",{"_index":1418,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["39—​56",{"_index":1156,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["3rd",{"_index":4769,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["4",{"_index":725,"title":{"40-9":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"16":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"67":{}},"component":{},"keyword":{}}],["4(a0",{"_index":9711,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["4(s0",{"_index":5626,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["4(sp",{"_index":9958,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["4(t1",{"_index":2838,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["4*sew",{"_index":9178,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["4*vlen/8",{"_index":8003,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["4*vlen/sew",{"_index":7673,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["4,096",{"_index":3111,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["4,6",{"_index":2110,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["4.0",{"_index":25,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"34":{}},"component":{},"keyword":{}}],["4.1",{"_index":6934,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["4.1.1",{"_index":3750,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["4.3",{"_index":6766,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["4.3.2",{"_index":6935,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["4.4",{"_index":3749,"title":{},"name":{},"text":{"19":{},"49":{}},"component":{},"keyword":{}}],["4.5",{"_index":7024,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["4.a.5",{"_index":6961,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["4/5",{"_index":5865,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["40",{"_index":1079,"title":{},"name":{},"text":{"7":{},"8":{},"45":{},"49":{},"51":{},"66":{}},"component":{},"keyword":{}}],["40(sp",{"_index":9970,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["4095",{"_index":3780,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["4096",{"_index":3770,"title":{},"name":{},"text":{"19":{},"50":{},"62":{}},"component":{},"keyword":{}}],["40f6",{"_index":9887,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["41",{"_index":1084,"title":{},"name":{},"text":{"7":{},"8":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["411—​436",{"_index":1149,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["42",{"_index":1092,"title":{},"name":{},"text":{"7":{},"8":{},"49":{},"51":{}},"component":{},"keyword":{}}],["43",{"_index":1097,"title":{},"name":{},"text":{"7":{},"8":{},"49":{},"51":{}},"component":{},"keyword":{}}],["432—​445",{"_index":1161,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["43—​54",{"_index":859,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["44",{"_index":1102,"title":{},"name":{},"text":{"7":{},"8":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["44(sp",{"_index":9971,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["443",{"_index":742,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["4466",{"_index":9890,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["44d6",{"_index":9893,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["45",{"_index":1118,"title":{},"name":{},"text":{"7":{},"8":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["4501",{"_index":9883,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["450—​466",{"_index":1101,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["458",{"_index":743,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["46",{"_index":1127,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["47",{"_index":1136,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"27":{},"49":{},"51":{}},"component":{},"keyword":{}}],["48",{"_index":408,"title":{"26-25":{},"57-39":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"26":{},"27":{},"31":{},"34":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["48(sp",{"_index":9972,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["48|64|80",{"_index":9994,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["48—​53",{"_index":1305,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["49",{"_index":1150,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["4946",{"_index":9896,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["496",{"_index":5003,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["49:48",{"_index":4396,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["49b6",{"_index":9899,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["4a26",{"_index":9902,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["4a96",{"_index":9905,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["4b",{"_index":3873,"title":{},"name":{},"text":{"21":{},"26":{}},"component":{},"keyword":{}}],["4b0001",{"_index":9227,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["4b06",{"_index":9908,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["4k",{"_index":7570,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["4n",{"_index":9412,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["4–0",{"_index":332,"title":{},"name":{},"text":{"4":{},"26":{}},"component":{},"keyword":{}}],["4—​0",{"_index":5333,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["5",{"_index":734,"title":{"40-10":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"19":{},"21":{},"26":{},"29":{},"30":{},"31":{},"37":{},"38":{},"40":{},"45":{},"48":{},"49":{},"51":{},"52":{},"53":{},"57":{},"58":{},"62":{},"67":{}},"component":{},"keyword":{}}],["5,7",{"_index":2737,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["5.3.5",{"_index":6665,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["5.506e",{"_index":8416,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["5.6",{"_index":4970,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["5/5",{"_index":5892,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["50",{"_index":1157,"title":{},"name":{},"text":{"7":{},"8":{},"31":{},"49":{},"51":{}},"component":{},"keyword":{}}],["500",{"_index":2391,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["51",{"_index":1162,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["512",{"_index":5002,"title":{},"name":{},"text":{"31":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["52",{"_index":1172,"title":{},"name":{},"text":{"7":{},"27":{},"30":{},"49":{},"51":{}},"component":{},"keyword":{}}],["52(sp",{"_index":9973,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["524224",{"_index":3783,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["53",{"_index":1179,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["54",{"_index":716,"title":{},"name":{},"text":{"7":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["55",{"_index":872,"title":{},"name":{},"text":{"7":{},"10":{},"49":{},"51":{}},"component":{},"keyword":{}}],["56",{"_index":1193,"title":{},"name":{},"text":{"7":{},"10":{},"23":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["56(sp",{"_index":9981,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["569—​577",{"_index":985,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["56aa3350",{"_index":9406,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["57",{"_index":1194,"title":{"26-27":{}},"name":{},"text":{"7":{},"8":{},"23":{},"26":{},"27":{},"49":{},"51":{}},"component":{},"keyword":{}}],["57:0",{"_index":3586,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["58",{"_index":1116,"title":{},"name":{},"text":{"7":{},"18":{},"23":{},"49":{},"51":{}},"component":{},"keyword":{}}],["59",{"_index":1213,"title":{},"name":{},"text":{"7":{},"8":{},"18":{},"23":{},"49":{},"51":{}},"component":{},"keyword":{}}],["59–0",{"_index":4118,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["5:3",{"_index":7643,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["5:4",{"_index":5103,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["5bf2",{"_index":9911,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["5c62",{"_index":9914,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["5cd2",{"_index":9917,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["5d42",{"_index":9920,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["5db2",{"_index":9923,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["5–0",{"_index":4233,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["6",{"_index":744,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"19":{},"26":{},"31":{},"33":{},"37":{},"38":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["6.25",{"_index":5488,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["60",{"_index":1224,"title":{},"name":{},"text":{"7":{},"9":{},"17":{},"18":{},"19":{},"23":{},"26":{},"31":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["60(sp",{"_index":9980,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["608—​625",{"_index":1212,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["61",{"_index":1233,"title":{},"name":{},"text":{"7":{},"18":{},"23":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["6105",{"_index":9942,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["6125",{"_index":9926,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["61:58",{"_index":3592,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["62",{"_index":724,"title":{},"name":{},"text":{"7":{},"17":{},"18":{},"23":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["62:36",{"_index":2426,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["63",{"_index":1254,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"18":{},"22":{},"23":{},"25":{},"26":{},"27":{},"31":{},"35":{},"47":{},"49":{},"51":{},"52":{},"60":{}},"component":{},"keyword":{}}],["63:0",{"_index":10135,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["63:32",{"_index":1669,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"18":{},"19":{},"58":{},"60":{}},"component":{},"keyword":{}}],["63:41",{"_index":2037,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["63:50",{"_index":2040,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["63:59",{"_index":2042,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["63–39",{"_index":4220,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["63–48",{"_index":4226,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{},"keyword":{}}],["63–54",{"_index":4229,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["63–57",{"_index":4228,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["64",{"_index":967,"title":{"57-36":{},"57-40":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"42":{},"43":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"59":{}},"component":{},"keyword":{}}],["64b",{"_index":7733,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["64g",{"_index":6180,"title":{},"name":{"44":{}},"text":{},"component":{},"keyword":{}}],["64k",{"_index":8636,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["64kib",{"_index":7631,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["64|80|96|112",{"_index":9995,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["65",{"_index":1263,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["65,536",{"_index":7627,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["66",{"_index":1272,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["6600",{"_index":958,"title":{},"name":{},"text":{"7":{},"31":{},"35":{}},"component":{},"keyword":{}}],["67",{"_index":1278,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["677d9197",{"_index":9407,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["68",{"_index":1286,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["69",{"_index":1297,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["6:0",{"_index":2139,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["7",{"_index":756,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"19":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"37":{},"38":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"57":{},"58":{},"66":{},"67":{}},"component":{},"keyword":{}}],["7)..i",{"_index":4630,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["7)..j",{"_index":4652,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["7,6,5,4,3,2,1,0",{"_index":9143,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["7..0",{"_index":7462,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["70",{"_index":1306,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["71",{"_index":1314,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["711d",{"_index":9830,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["71e0106f",{"_index":9945,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["72",{"_index":1322,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["73",{"_index":1335,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["73a012ef",{"_index":9935,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["74",{"_index":1348,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["75",{"_index":1354,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["754",{"_index":728,"title":{},"name":{},"text":{"7":{},"30":{},"34":{},"36":{},"37":{},"38":{},"43":{},"51":{},"58":{},"59":{}},"component":{},"keyword":{}}],["754/2008",{"_index":8031,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["76",{"_index":1326,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["77",{"_index":1365,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["78",{"_index":1373,"title":{},"name":{},"text":{"7":{},"31":{},"49":{},"51":{}},"component":{},"keyword":{}}],["79",{"_index":1384,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["7:4",{"_index":3124,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{},"keyword":{}}],["7—​5",{"_index":5332,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["8",{"_index":768,"title":{"40-10":{}},"name":{},"text":{"7":{},"8":{},"10":{},"19":{},"26":{},"29":{},"30":{},"31":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"59":{},"66":{}},"component":{},"keyword":{}}],["8(a0",{"_index":9720,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["8(a6",{"_index":9723,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["8(sp",{"_index":9959,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["8))[7..0",{"_index":7455,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["8*vlen/8",{"_index":7692,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["8*vlen/sew",{"_index":7675,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["8,9,11",{"_index":2736,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["8..11",{"_index":9990,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["80",{"_index":1396,"title":{},"name":{},"text":{"7":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["800",{"_index":1017,"title":{"49-73":{},"49-108":{}},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["80000",{"_index":5432,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["8082",{"_index":9930,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["80x86",{"_index":4890,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["81",{"_index":1402,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["8191",{"_index":3781,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["82",{"_index":1411,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["83",{"_index":752,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["84",{"_index":1428,"title":{},"name":{},"text":{"7":{},"12":{},"51":{}},"component":{},"keyword":{}}],["843—​857",{"_index":1253,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["85",{"_index":1432,"title":{},"name":{},"text":{"7":{},"20":{},"51":{}},"component":{},"keyword":{}}],["86",{"_index":1433,"title":{},"name":{},"text":{"7":{},"26":{},"51":{}},"component":{},"keyword":{}}],["87",{"_index":1444,"title":{},"name":{},"text":{"7":{},"27":{},"51":{}},"component":{},"keyword":{}}],["88",{"_index":8408,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["89",{"_index":8437,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["8998",{"_index":8950,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["89—​104",{"_index":1442,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["8b",{"_index":4210,"title":{},"name":{},"text":{"26":{},"51":{},"53":{}},"component":{},"keyword":{}}],["8bpp",{"_index":7941,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["8n",{"_index":9413,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["9",{"_index":783,"title":{"40-11":{}},"name":{},"text":{"7":{},"8":{},"10":{},"19":{},"26":{},"31":{},"37":{},"38":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["9.570e37",{"_index":8444,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["9.800e18",{"_index":8412,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["90",{"_index":6762,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["90a",{"_index":1033,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["90b",{"_index":1018,"title":{"49-73":{},"49-108":{}},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["90b/c",{"_index":6758,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["90b_entropyassess",{"_index":6896,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["90c",{"_index":1039,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["91",{"_index":6477,"title":{},"name":{},"text":{"45":{},"47":{},"51":{}},"component":{},"keyword":{}}],["92",{"_index":8407,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["93",{"_index":8406,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["94",{"_index":8436,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["95",{"_index":8405,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["96",{"_index":917,"title":{},"name":{},"text":{"7":{},"51":{},"57":{}},"component":{},"keyword":{}}],["96|112",{"_index":9998,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["96|112|128",{"_index":9999,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["96|112|128|144",{"_index":10000,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["97",{"_index":8404,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["97—​108",{"_index":1347,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["98",{"_index":839,"title":{},"name":{},"text":{"7":{},"51":{}},"component":{},"keyword":{}}],["99",{"_index":8403,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["9:8",{"_index":3123,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["9–0",{"_index":4230,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["_",{"_index":6122,"title":{},"name":{},"text":{"42":{},"49":{}},"component":{},"keyword":{}}],["__",{"_index":4255,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["__builtin_popcount",{"_index":4615,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["__builtin_popcountl",{"_index":4616,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["__byte_order__",{"_index":4713,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["__line__",{"_index":7159,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["__order_little_endian__",{"_index":4714,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["__riscv_restore_12",{"_index":9947,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["__riscv_save_12",{"_index":9937,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["_auipc",{"_index":6448,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["_definit",{"_index":4332,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["_determining_the_value_of_pmlen",{"_index":4337,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["_i",{"_index":6058,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["_isa_extens",{"_index":4388,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["_memory_accesses_subject_to_pointer_mask",{"_index":4334,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["_pointer_masking_extens",{"_index":4319,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["_reg_name_",{"_index":6063,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["_s",{"_index":4623,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["_ssnpm",{"_index":4369,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["_u",{"_index":4628,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["a*b",{"_index":9563,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["a+va.vpn[i]×ptes",{"_index":4182,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["a.k.a",{"_index":2741,"title":{},"name":{},"text":{"10":{},"37":{}},"component":{},"keyword":{}}],["a.~address",{"_index":5891,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["a/d",{"_index":293,"title":{"26-32":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["a0",{"_index":2839,"title":{},"name":{},"text":{"10":{},"28":{},"29":{},"31":{},"40":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["a0,0",{"_index":9884,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["a0,0(s0",{"_index":5566,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a0,0(s1",{"_index":5614,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a0,fflags,x0",{"_index":5674,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a0=0",{"_index":5690,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a0=1",{"_index":5559,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a0=dest",{"_index":9547,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["a0]=0",{"_index":7585,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["a1",{"_index":2837,"title":{},"name":{},"text":{"10":{},"28":{},"29":{},"31":{},"40":{},"49":{},"51":{},"52":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["a1,(s1",{"_index":5762,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,0(s0",{"_index":5677,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,0(s1",{"_index":5603,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,0(s2",{"_index":5616,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,0(s4",{"_index":5648,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,loop",{"_index":5755,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,t1,(s1",{"_index":5763,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1,t1,0(s1",{"_index":5754,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1:a0",{"_index":2833,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["a1=0",{"_index":5597,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1=0x100000001",{"_index":5809,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1=1",{"_index":5620,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1=2",{"_index":5641,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1=s0",{"_index":5701,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1=src",{"_index":9548,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["a1=t",{"_index":5700,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a1=v",{"_index":5651,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2",{"_index":4444,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"40":{},"51":{},"52":{},"53":{},"55":{}},"component":{},"keyword":{}}],["a2,0(s0",{"_index":5619,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2,0(s1",{"_index":5601,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2,0(s2",{"_index":5649,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2,4(s1",{"_index":5805,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2,a0,0(s1",{"_index":5689,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2,a1,a1",{"_index":5617,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2,t1,0(s2",{"_index":5799,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2=0",{"_index":5621,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2=1",{"_index":5598,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a2=n",{"_index":9549,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["a2=v",{"_index":5652,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a3",{"_index":4705,"title":{},"name":{},"text":{"29":{},"31":{},"40":{},"51":{},"52":{},"53":{},"55":{}},"component":{},"keyword":{}}],["a3,0(s0",{"_index":5604,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a3,0(s2",{"_index":5688,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a3,a2,a2",{"_index":5806,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a3=0",{"_index":5599,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a3=1",{"_index":5803,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a3b1bac6",{"_index":9405,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["a4",{"_index":4708,"title":{},"name":{},"text":{"29":{},"31":{},"40":{},"51":{},"53":{},"55":{}},"component":{},"keyword":{}}],["a4,4(s2",{"_index":5800,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a4=0",{"_index":5804,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a5",{"_index":4945,"title":{},"name":{},"text":{"31":{},"51":{},"53":{},"55":{}},"component":{},"keyword":{}}],["a5,0(s1",{"_index":5679,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a5,a4,a4",{"_index":5801,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["a6",{"_index":8583,"title":{},"name":{},"text":{"51":{},"53":{},"55":{}},"component":{},"keyword":{}}],["a7",{"_index":9571,"title":{},"name":{},"text":{"53":{},"55":{}},"component":{},"keyword":{}}],["a=0",{"_index":2994,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["a=pte.ppn×pages",{"_index":4191,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["a[1",{"_index":3021,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["a[i",{"_index":9543,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["aaddress",{"_index":6519,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["aaron",{"_index":630,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["ab",{"_index":5401,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["aba",{"_index":4424,"title":{},"name":{},"text":{"28":{},"55":{}},"component":{},"keyword":{}}],["abandon",{"_index":7622,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["abbrevi",{"_index":1530,"title":{},"name":{},"text":{"8":{},"12":{},"15":{},"33":{},"42":{},"44":{},"51":{}},"component":{},"keyword":{}}],["abc",{"_index":6145,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["abel",{"_index":615,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["abi",{"_index":2534,"title":{},"name":{},"text":{"10":{},"15":{},"26":{},"27":{},"31":{},"34":{},"36":{},"38":{},"42":{},"45":{},"50":{},"51":{},"57":{},"63":{}},"component":{},"keyword":{}}],["abil",{"_index":1998,"title":{},"name":{},"text":{"8":{},"21":{},"27":{},"48":{},"55":{}},"component":{},"keyword":{}}],["abov",{"_index":1675,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"17":{},"18":{},"19":{},"22":{},"26":{},"27":{},"30":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["abs/1802.09517",{"_index":1450,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["absenc",{"_index":4384,"title":{},"name":{},"text":{"27":{},"52":{},"54":{},"61":{}},"component":{},"keyword":{}}],["absolut",{"_index":4624,"title":{},"name":{},"text":{"29":{},"37":{},"45":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["abstract",{"_index":3472,"title":{},"name":{},"text":{"15":{},"26":{},"27":{},"38":{},"41":{},"49":{}},"component":{},"keyword":{}}],["abund",{"_index":6917,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["academ",{"_index":6508,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{},"keyword":{}}],["academia",{"_index":5417,"title":{},"name":{},"text":{"38":{},"49":{},"52":{}},"component":{},"keyword":{}}],["acceler",{"_index":1332,"title":{},"name":{},"text":{"7":{},"29":{},"33":{},"38":{},"39":{},"45":{},"49":{},"51":{},"52":{},"56":{},"58":{},"59":{}},"component":{},"keyword":{}}],["accept",{"_index":4809,"title":{},"name":{},"text":{"30":{},"35":{},"51":{},"58":{}},"component":{},"keyword":{}}],["access",{"_index":284,"title":{"9":{},"21":{},"9-5":{},"10-40":{},"11-5":{},"12-10":{},"19-13":{},"27-8":{},"33-12":{},"49-76":{},"49-111":{},"62-2":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"60":{},"62":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["accident",{"_index":3098,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["accommod",{"_index":1821,"title":{},"name":{},"text":{"8":{},"10":{},"22":{},"26":{},"28":{},"33":{},"36":{},"38":{},"49":{},"51":{}},"component":{},"keyword":{}}],["accompani",{"_index":4291,"title":{},"name":{},"text":{"26":{},"34":{},"49":{}},"component":{},"keyword":{}}],["accomplish",{"_index":2056,"title":{},"name":{},"text":{"8":{},"10":{},"23":{},"49":{},"55":{}},"component":{},"keyword":{}}],["accord",{"_index":2112,"title":{},"name":{},"text":{"8":{},"12":{},"21":{},"26":{},"27":{},"30":{},"33":{},"36":{},"37":{},"40":{},"41":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["accordingli",{"_index":558,"title":{},"name":{},"text":{"4":{},"8":{},"26":{},"29":{},"38":{},"40":{},"51":{},"52":{}},"component":{},"keyword":{}}],["account",{"_index":2548,"title":{},"name":{},"text":{"10":{},"27":{},"40":{},"49":{}},"component":{},"keyword":{}}],["accru",{"_index":3208,"title":{},"name":{},"text":{"12":{},"37":{},"44":{},"51":{}},"component":{},"keyword":{}}],["accumul",{"_index":3776,"title":{},"name":{},"text":{"19":{},"30":{},"40":{},"48":{},"51":{}},"component":{},"keyword":{}}],["accur",{"_index":2804,"title":{},"name":{},"text":{"10":{},"19":{},"45":{},"50":{},"51":{}},"component":{},"keyword":{}}],["accuraci",{"_index":5250,"title":{},"name":{},"text":{"35":{},"51":{}},"component":{},"keyword":{}}],["achiev",{"_index":4553,"title":{},"name":{},"text":{"29":{},"40":{},"49":{},"50":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["acm",{"_index":913,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["acm/iee",{"_index":903,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["acquir",{"_index":4413,"title":{},"name":{},"text":{"28":{},"40":{},"41":{},"48":{},"50":{},"55":{},"64":{},"67":{}},"component":{},"keyword":{}}],["acquire+releas",{"_index":5663,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["acquire/releas",{"_index":339,"title":{},"name":{},"text":{"4":{},"26":{}},"component":{},"keyword":{}}],["acquirercpc",{"_index":5853,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["acquirercsc",{"_index":5854,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["acquisit",{"_index":4469,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["acq|acqrel",{"_index":5949,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["acq|rel|acqrel",{"_index":5951,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["act",{"_index":1495,"title":{},"name":{},"text":{"8":{},"10":{},"28":{},"30":{},"38":{},"49":{},"51":{},"52":{},"62":{}},"component":{},"keyword":{}}],["action",{"_index":2001,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"16":{},"30":{},"38":{},"41":{},"45":{},"49":{},"50":{},"62":{},"66":{}},"component":{},"keyword":{}}],["activ",{"_index":1526,"title":{"51-30":{}},"name":{},"text":{"8":{},"10":{},"11":{},"19":{},"21":{},"23":{},"26":{},"27":{},"28":{},"30":{},"34":{},"38":{},"40":{},"48":{},"49":{},"50":{},"51":{},"54":{}},"component":{},"keyword":{}}],["active(x",{"_index":7776,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["actual",{"_index":280,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"19":{},"23":{},"26":{},"27":{},"33":{},"35":{},"38":{},"40":{},"49":{},"51":{},"52":{},"55":{},"64":{}},"component":{},"keyword":{}}],["acycl",{"_index":6001,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["acyclic[po",{"_index":5893,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["acyclic[rel",{"_index":5913,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ad",{"_index":217,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"15":{},"17":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"57":{},"58":{},"59":{}},"component":{},"keyword":{}}],["adam",{"_index":130,"title":{},"name":{},"text":{"2":{},"49":{}},"component":{},"keyword":{}}],["adapt",{"_index":852,"title":{},"name":{},"text":{"7":{},"35":{},"40":{},"41":{},"49":{}},"component":{},"keyword":{}}],["add",{"_index":540,"title":{"30-16":{},"51-57":{},"51-60":{},"51-69":{},"51-70":{},"51-74":{},"51-75":{},"51-85":{},"51-86":{},"52-34":{},"53-1":{}},"name":{},"text":{"4":{},"8":{},"10":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"60":{},"61":{},"62":{},"64":{},"65":{},"67":{}},"component":{},"keyword":{}}],["add.uw",{"_index":4487,"title":{"29-21":{}},"name":{},"text":{"29":{},"57":{}},"component":{},"keyword":{}}],["add/sub",{"_index":8886,"title":{"52-27":{},"52-28":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["add/subtract",{"_index":7600,"title":{"51-58":{},"51-81":{},"51-82":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["add[i]w/subw/sxxw",{"_index":6503,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["add_ref(long",{"_index":9624,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["addd",{"_index":5464,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["added/execut",{"_index":3917,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["addend",{"_index":4667,"title":{},"name":{},"text":{"29":{},"37":{},"51":{}},"component":{},"keyword":{}}],["adder",{"_index":2633,"title":{},"name":{},"text":{"10":{},"29":{},"45":{}},"component":{},"keyword":{}}],["addi",{"_index":4721,"title":{},"name":{},"text":{"29":{},"31":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["addi4spn",{"_index":4923,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["addit",{"_index":188,"title":{"58":{},"25-1":{},"25-6":{},"42-5":{},"55-2":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"13":{},"15":{},"16":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{}},"component":{},"keyword":{}}],["addition",{"_index":220,"title":{},"name":{},"text":{"4":{},"10":{},"11":{},"19":{},"24":{},"26":{},"31":{},"33":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"59":{},"61":{},"66":{},"67":{}},"component":{},"keyword":{}}],["addiw",{"_index":4871,"title":{},"name":{},"text":{"31":{},"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["addr",{"_index":2160,"title":{},"name":{},"text":{"8":{},"40":{},"41":{},"57":{}},"component":{},"keyword":{}}],["addr=sp",{"_index":10006,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["addr=sp+stack_adj",{"_index":10015,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["addrdep",{"_index":5828,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["addrdep+datadep).rfi",{"_index":5831,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["addrdep.^po",{"_index":5832,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["address",{"_index":357,"title":{"8-12":{},"8-15":{},"8-20":{},"8-30":{},"8-31":{},"10-16":{},"10-50":{},"12-1":{},"16-2":{},"19-20":{},"26-8":{},"26-17":{},"26-21":{},"26-22":{},"26-24":{},"26-26":{},"26-28":{},"26-31":{},"27-15":{},"29-5":{},"33-13":{},"40-8":{},"51-39":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"19":{},"20":{},"21":{},"23":{},"24":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"59":{},"62":{},"63":{}},"component":{},"keyword":{}}],["address+bump",{"_index":7917,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["address.~address",{"_index":5881,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["address/data",{"_index":5095,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["addw",{"_index":5030,"title":{},"name":{},"text":{"31":{},"38":{},"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["adequ",{"_index":3950,"title":{},"name":{},"text":{"22":{},"26":{},"38":{}},"component":{},"keyword":{}}],["adher",{"_index":6595,"title":{},"name":{},"text":{"49":{},"50":{},"52":{}},"component":{},"keyword":{}}],["adjac",{"_index":5476,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["adjust",{"_index":4303,"title":{"57-28":{}},"name":{},"text":{"26":{},"31":{},"49":{},"51":{},"57":{},"67":{}},"component":{},"keyword":{}}],["administ",{"_index":2401,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["administr",{"_index":1168,"title":{},"name":{},"text":{"7":{},"50":{}},"component":{},"keyword":{}}],["admit",{"_index":4216,"title":{},"name":{},"text":{"26":{},"28":{},"40":{},"41":{}},"component":{},"keyword":{}}],["admittedli",{"_index":9623,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["adopt",{"_index":1533,"title":{},"name":{},"text":{"8":{},"10":{},"30":{},"31":{},"34":{},"38":{},"45":{},"51":{}},"component":{},"keyword":{}}],["adu",{"_index":1766,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["adue=0",{"_index":1769,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["adue=1",{"_index":1767,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["advanc",{"_index":996,"title":{},"name":{},"text":{"7":{},"22":{},"25":{},"26":{},"31":{},"35":{},"45":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["advantag",{"_index":4052,"title":{},"name":{},"text":{"25":{},"28":{},"30":{},"38":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["adversari",{"_index":6907,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["advertis",{"_index":8669,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["advis",{"_index":4784,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["advisori",{"_index":6781,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ae",{"_index":998,"title":{"49-10":{},"49-11":{},"49-89":{},"52-14":{}},"name":{},"text":{"7":{},"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["aee",{"_index":3469,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["aes32dsi",{"_index":6535,"title":{"49-21":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes32dsmi",{"_index":6536,"title":{"49-22":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes32esi",{"_index":6537,"title":{"49-23":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes32esmi",{"_index":6538,"title":{"49-24":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64",{"_index":6541,"title":{"49-27":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64d",{"_index":6539,"title":{"49-25":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64ds(rs2",{"_index":6649,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64dsm",{"_index":6540,"title":{"49-26":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64dsm(rs2",{"_index":6656,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64es(rs2",{"_index":6659,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64esm",{"_index":6542,"title":{"49-28":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64esm(rs2",{"_index":6662,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64im",{"_index":6543,"title":{"49-29":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64im(rs1",{"_index":6666,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64ks1i",{"_index":6544,"title":{"49-30":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64ks1i(rnum",{"_index":6674,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64ks2",{"_index":6545,"title":{"49-31":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes64ks2(rs2",{"_index":6687,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_apply_fwd_sbox_to_each_byt",{"_index":7440,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_apply_fwd_sbox_to_each_byte(wd",{"_index":6661,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_apply_fwd_sbox_to_each_byte(x",{"_index":7441,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_apply_inv_sbox_to_each_byt",{"_index":7446,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_apply_inv_sbox_to_each_byte(wd",{"_index":6655,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_apply_inv_sbox_to_each_byte(x",{"_index":7447,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_decode_rcon",{"_index":7139,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_decode_rcon((rnd>>1",{"_index":9081,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_decode_rcon(r",{"_index":7140,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_decode_rcon(rnum",{"_index":6680,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_get_column",{"_index":7434,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_get_column(state,c",{"_index":7437,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_get_column(x",{"_index":7467,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_byte_fwd",{"_index":7106,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_byte_fwd(so",{"_index":6646,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_byte_inv",{"_index":7110,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_byte_inv(so",{"_index":6643,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_fwd",{"_index":7115,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_fwd(aes_get_column(x",{"_index":7497,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_fwd(sb[31..0",{"_index":6664,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_mixcolumn_fwd(sb[63..32",{"_index":6663,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_mixcolumn_fwd(x",{"_index":7116,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv",{"_index":7133,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv(aes_get_column(x",{"_index":7500,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv(sb[31..0",{"_index":6658,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv(sb[63..32",{"_index":6657,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv(x",{"_index":7134,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv(x(rs1)[31",{"_index":6668,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_mixcolumn_inv(x(rs1)[63..32",{"_index":6670,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_mixcolumns_fwd",{"_index":7495,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumns_fwd(sr",{"_index":9055,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_mixcolumns_fwd(x",{"_index":7496,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumns_inv",{"_index":7498,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_mixcolumns_inv(ark",{"_index":9046,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_mixcolumns_inv(x",{"_index":7499,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_rotword",{"_index":9512,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_rotword(x",{"_index":9513,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_rv64_shiftrows_fwd",{"_index":7456,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_rv64_shiftrows_fwd(rs2",{"_index":7457,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_rv64_shiftrows_fwd(x(rs2)[63..0",{"_index":6660,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_rv64_shiftrows_inv",{"_index":7460,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_rv64_shiftrows_inv(rs2",{"_index":7461,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_rv64_shiftrows_inv(x(rs2)[63..0",{"_index":6651,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_sbox_fwd",{"_index":7417,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(si",{"_index":6645,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x",{"_index":7418,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[15",{"_index":7426,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[23..16",{"_index":7425,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[31..24",{"_index":7424,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[39..32",{"_index":7445,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[47..40",{"_index":7444,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[55..48",{"_index":7443,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd(x[63..56",{"_index":7442,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_fwd_t",{"_index":7409,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv",{"_index":7419,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(si",{"_index":6639,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x",{"_index":7420,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[15",{"_index":7431,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[23..16",{"_index":7430,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[31..24",{"_index":7429,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[39..32",{"_index":7451,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[47..40",{"_index":7450,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[55..48",{"_index":7449,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv(x[63..56",{"_index":7448,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_sbox_inv_t",{"_index":7410,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_shift_rows_fwd",{"_index":7464,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_shift_rows_fwd(sb",{"_index":9051,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_shift_rows_fwd(x",{"_index":7465,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_shift_rows_inv",{"_index":7487,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_shift_rows_inv(st",{"_index":9038,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_shift_rows_inv(x",{"_index":7488,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subbytes_fwd",{"_index":7489,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subbytes_fwd(st",{"_index":9050,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_subbytes_fwd(x",{"_index":7490,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subbytes_inv",{"_index":7492,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subbytes_inv(sr",{"_index":9039,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_subbytes_inv(x",{"_index":7493,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subword_fwd",{"_index":7422,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subword_fwd(aes_get_column(x",{"_index":7491,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subword_fwd(aes_rotword(currentroundkey[3",{"_index":9066,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_subword_fwd(currentroundkey[3",{"_index":9079,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["aes_subword_fwd(tmp2",{"_index":6685,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["aes_subword_fwd(x",{"_index":7423,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subword_inv",{"_index":7427,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subword_inv(aes_get_column(x",{"_index":7494,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["aes_subword_inv(x",{"_index":7428,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["affect",{"_index":318,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"18":{},"19":{},"22":{},"26":{},"27":{},"30":{},"40":{},"41":{},"49":{},"51":{},"52":{},"60":{},"62":{},"64":{}},"component":{},"keyword":{}}],["affili",{"_index":3434,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["afip",{"_index":966,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["aforement",{"_index":4449,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["afterthought",{"_index":5485,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["ag",{"_index":5592,"title":{},"name":{},"text":{"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["again",{"_index":3105,"title":{},"name":{},"text":{"11":{},"28":{},"35":{},"38":{},"40":{},"41":{},"49":{},"51":{},"52":{},"62":{}},"component":{},"keyword":{}}],["against",{"_index":1062,"title":{},"name":{},"text":{"7":{},"8":{},"11":{},"15":{},"21":{},"26":{},"27":{},"29":{},"42":{},"45":{},"49":{},"50":{},"51":{},"52":{},"55":{},"61":{}},"component":{},"keyword":{}}],["agent",{"_index":2760,"title":{"33-6":{}},"name":{},"text":{"10":{},"33":{},"38":{},"40":{},"51":{},"56":{}},"component":{},"keyword":{}}],["aggress",{"_index":5553,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["agnost",{"_index":2546,"title":{"51-10":{}},"name":{},"text":{"10":{},"38":{},"40":{},"51":{},"52":{}},"component":{},"keyword":{}}],["agnostic/mask",{"_index":7688,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["agnostic/undisturb",{"_index":8508,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["agre",{"_index":5591,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["agreement",{"_index":4281,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["ahead",{"_index":6430,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["ai",{"_index":1027,"title":{"49-74":{},"49-109":{}},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["aia",{"_index":3923,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["aia’",{"_index":3934,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["aid",{"_index":2398,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"30":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["aim",{"_index":2420,"title":{},"name":{},"text":{"10":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["air",{"_index":5691,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["aka",{"_index":5989,"title":{},"name":{},"text":{"41":{},"45":{},"51":{}},"component":{},"keyword":{}}],["akp",{"_index":9577,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["al",{"_index":863,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["alan",{"_index":1436,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["alarm",{"_index":6744,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["albeit",{"_index":4085,"title":{},"name":{},"text":{"26":{},"51":{}},"component":{},"keyword":{}}],["albert",{"_index":103,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["alex",{"_index":617,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["alexandr",{"_index":649,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["algorithm",{"_index":359,"title":{"49-16":{},"49-17":{},"52-18":{},"52-19":{},"52-20":{},"52-21":{},"52-22":{},"52-23":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"26":{},"30":{},"49":{},"51":{},"52":{},"55":{}},"component":{},"keyword":{}}],["alia",{"_index":1713,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"28":{},"51":{}},"component":{},"keyword":{}}],["alias",{"_index":1668,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"26":{},"48":{},"51":{},"61":{}},"component":{},"keyword":{}}],["align",{"_index":1843,"title":{"51-50":{}},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"59":{},"60":{}},"component":{},"keyword":{}}],["allen",{"_index":51,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["allevi",{"_index":6931,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["alloc",{"_index":239,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"12":{},"18":{},"21":{},"22":{},"26":{},"31":{},"33":{},"34":{},"37":{},"44":{},"45":{},"46":{},"50":{},"51":{},"53":{},"57":{},"64":{}},"component":{},"keyword":{}}],["allow",{"_index":306,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"63":{},"66":{},"67":{}},"component":{},"keyword":{}}],["allowlist",{"_index":3854,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["alloy",{"_index":5812,"title":{"41-1":{}},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["alon",{"_index":1567,"title":{},"name":{},"text":{"8":{},"26":{},"31":{},"40":{}},"component":{},"keyword":{}}],["along",{"_index":424,"title":{},"name":{},"text":{"4":{},"19":{},"26":{},"28":{},"29":{},"31":{},"35":{},"38":{},"40":{},"49":{},"57":{}},"component":{},"keyword":{}}],["alongsid",{"_index":1810,"title":{},"name":{},"text":{"8":{},"31":{}},"component":{},"keyword":{}}],["alpha",{"_index":5346,"title":{},"name":{},"text":{"37":{},"40":{},"45":{}},"component":{},"keyword":{}}],["alpha=1",{"_index":9564,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["alphabet",{"_index":45,"title":{"29-20":{},"61-3":{}},"name":{},"text":{"2":{},"5":{},"10":{},"29":{},"42":{}},"component":{},"keyword":{}}],["alphanumer",{"_index":6124,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["alreadi",{"_index":1945,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"23":{},"26":{},"27":{},"40":{},"41":{},"51":{},"52":{},"63":{},"66":{}},"component":{},"keyword":{}}],["alter",{"_index":2077,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"42":{},"51":{},"64":{},"66":{}},"component":{},"keyword":{}}],["altern",{"_index":2764,"title":{},"name":{},"text":{"10":{},"12":{},"15":{},"19":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"63":{},"66":{}},"component":{},"keyword":{}}],["although",{"_index":1937,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"37":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{},"59":{},"63":{},"64":{},"66":{}},"component":{},"keyword":{}}],["altogeth",{"_index":5038,"title":{},"name":{},"text":{"31":{},"38":{},"45":{},"64":{}},"component":{},"keyword":{}}],["alu",{"_index":5062,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["alway",{"_index":1590,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"58":{},"62":{}},"component":{},"keyword":{}}],["ambigu",{"_index":2869,"title":{},"name":{},"text":{"10":{},"34":{},"42":{},"49":{}},"component":{},"keyword":{}}],["amd",{"_index":1259,"title":{},"name":{},"text":{"7":{},"35":{},"49":{}},"component":{},"keyword":{}}],["amdahl",{"_index":951,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["amelior",{"_index":4127,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["amen",{"_index":5041,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["amend",{"_index":5357,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["amo",{"_index":468,"title":{"10-42":{},"41-23":{},"55-2":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"28":{},"34":{},"40":{},"41":{},"44":{},"45":{},"48":{},"50":{},"54":{},"55":{},"64":{},"67":{}},"component":{},"keyword":{}}],["amo<op>.{w|d",{"_index":5778,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["amo<op>.{w|d}.aq",{"_index":5780,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["amo<op>.{w|d}.aqrl",{"_index":5712,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["amo<op>.{w|d}.rl",{"_index":5782,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["amo[add|and|or|xor|swap|min[u]|max[u]].[b|h",{"_index":9689,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["amoadd",{"_index":2928,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amoadd.d",{"_index":6271,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoadd.w",{"_index":6255,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoand",{"_index":2925,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amoand.d",{"_index":6273,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoand.w",{"_index":6259,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoarithmet",{"_index":2924,"title":{},"name":{},"text":{"10":{},"40":{},"55":{}},"component":{},"keyword":{}}],["amoca",{"_index":9685,"title":{},"name":{},"text":{"54":{},"55":{}},"component":{},"keyword":{}}],["amocas.[b|h",{"_index":9690,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["amocas.d",{"_index":9695,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocas.d.aqrl",{"_index":9712,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocas.q",{"_index":9709,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocas.q.aqrl",{"_index":9726,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocas.w",{"_index":9694,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocas.w/d/q",{"_index":9692,"title":{"55-1":{}},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocasd",{"_index":9729,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocasq",{"_index":9730,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocasw",{"_index":9728,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amocasw/d/q",{"_index":9731,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["amolog",{"_index":2923,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amomax",{"_index":2930,"title":{},"name":{},"text":{"10":{},"40":{}},"component":{},"keyword":{}}],["amomax.d",{"_index":6276,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amomax.w",{"_index":6265,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amomaxu",{"_index":2932,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amomaxu.d",{"_index":6278,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amomaxu.w",{"_index":6269,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amomin",{"_index":2929,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amomin.d",{"_index":6275,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amomin.w",{"_index":6263,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amominu",{"_index":2931,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amominu.d",{"_index":6277,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amominu.w",{"_index":6267,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amonon",{"_index":2921,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amoor",{"_index":2926,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["amoor.d",{"_index":6274,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoor.w",{"_index":6261,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amort",{"_index":10178,"title":{},"name":{},"text":{"63":{}},"component":{},"keyword":{}}],["amortis",{"_index":6616,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["amoswap",{"_index":2922,"title":{},"name":{},"text":{"10":{},"11":{},"28":{},"34":{},"40":{}},"component":{},"keyword":{}}],["amoswap.d",{"_index":6270,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoswap.d.aq",{"_index":5753,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["amoswap.rl",{"_index":5766,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["amoswap.w",{"_index":5667,"title":{},"name":{},"text":{"40":{},"44":{},"48":{}},"component":{},"keyword":{}}],["amoswap.w.aq",{"_index":4471,"title":{},"name":{},"text":{"28":{},"40":{}},"component":{},"keyword":{}}],["amoswap.w.rl",{"_index":4472,"title":{},"name":{},"text":{"28":{},"40":{}},"component":{},"keyword":{}}],["amount",{"_index":2646,"title":{},"name":{},"text":{"10":{},"22":{},"26":{},"29":{},"30":{},"31":{},"40":{},"45":{},"47":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["amoxor",{"_index":2927,"title":{},"name":{},"text":{"10":{},"34":{}},"component":{},"keyword":{}}],["amoxor.d",{"_index":6272,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amoxor.w",{"_index":6257,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["amo|stcond];rfi;[r",{"_index":5960,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["amp",{"_index":9582,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ampl",{"_index":4219,"title":{},"name":{},"text":{"26":{},"49":{}},"component":{},"keyword":{}}],["amplif",{"_index":7068,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["analog",{"_index":1519,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"22":{},"26":{},"28":{},"31":{},"36":{},"37":{},"43":{},"45":{},"47":{},"51":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["analysi",{"_index":1289,"title":{},"name":{},"text":{"7":{},"26":{},"35":{},"41":{},"49":{}},"component":{},"keyword":{}}],["analyz",{"_index":5571,"title":{},"name":{},"text":{"40":{},"49":{},"50":{}},"component":{},"keyword":{}}],["and",{"_index":9093,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["and/or",{"_index":1565,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"17":{},"19":{},"21":{},"26":{},"28":{},"31":{},"35":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"62":{},"63":{}},"component":{},"keyword":{}}],["andanalysi",{"_index":1155,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["anderson",{"_index":1225,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["andi",{"_index":79,"title":{},"name":{},"text":{"2":{},"5":{},"29":{},"31":{},"44":{},"45":{},"47":{},"48":{},"49":{},"57":{}},"component":{},"keyword":{}}],["andn",{"_index":4488,"title":{"29-22":{},"49-32":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["andrew",{"_index":34,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["andrey",{"_index":1098,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["android",{"_index":5499,"title":{},"name":{},"text":{"38":{},"49":{}},"component":{},"keyword":{}}],["andw",{"_index":5467,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["ann",{"_index":763,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["annot",{"_index":340,"title":{},"name":{},"text":{"4":{},"40":{},"41":{},"48":{},"67":{}},"component":{},"keyword":{}}],["announc",{"_index":6090,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["annual",{"_index":854,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["anonym",{"_index":6976,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["anoth",{"_index":1492,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"22":{},"23":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"40":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"57":{},"64":{},"66":{}},"component":{},"keyword":{}}],["ansi/iee",{"_index":726,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["answer",{"_index":7043,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["anthoni",{"_index":65,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["anticip",{"_index":205,"title":{},"name":{},"text":{"4":{},"10":{},"22":{},"27":{},"30":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["anymor",{"_index":8575,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["anyth",{"_index":3413,"title":{},"name":{},"text":{"12":{},"19":{},"21":{},"40":{},"41":{},"49":{}},"component":{},"keyword":{}}],["anyway",{"_index":3887,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{},"keyword":{}}],["anywher",{"_index":3493,"title":{},"name":{},"text":{"15":{},"45":{},"64":{}},"component":{},"keyword":{}}],["ap",{"_index":9566,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["apart",{"_index":1737,"title":{},"name":{},"text":{"8":{},"36":{},"41":{},"49":{}},"component":{},"keyword":{}}],["app",{"_index":4300,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["appar",{"_index":5257,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["appear",{"_index":1222,"title":{},"name":{},"text":{"7":{},"10":{},"16":{},"22":{},"26":{},"27":{},"28":{},"29":{},"33":{},"35":{},"36":{},"38":{},"40":{},"41":{},"42":{},"48":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["append",{"_index":3418,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["appendic",{"_index":5482,"title":{},"name":{},"text":{"38":{},"48":{}},"component":{},"keyword":{}}],["appendix",{"_index":2953,"title":{},"name":{},"text":{"10":{},"32":{},"40":{},"41":{},"49":{},"53":{}},"component":{},"keyword":{}}],["appli",{"_index":341,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"30":{},"33":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"55":{},"59":{},"64":{}},"component":{},"keyword":{}}],["applic",{"_index":1148,"title":{"51-139":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"15":{},"17":{},"19":{},"21":{},"22":{},"26":{},"27":{},"30":{},"31":{},"32":{},"35":{},"38":{},"39":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"57":{},"63":{}},"component":{},"keyword":{}}],["approach",{"_index":2551,"title":{},"name":{},"text":{"10":{},"21":{},"26":{},"27":{},"30":{},"31":{},"37":{},"40":{},"41":{},"46":{},"49":{},"50":{},"51":{},"54":{},"63":{}},"component":{},"keyword":{}}],["appropri",{"_index":2118,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"25":{},"26":{},"28":{},"31":{},"33":{},"36":{},"41":{},"45":{},"47":{},"49":{},"51":{},"52":{},"57":{},"65":{}},"component":{},"keyword":{}}],["approv",{"_index":1328,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["approxim",{"_index":7076,"title":{"53-7":{},"53-8":{}},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["april",{"_index":1190,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["aq",{"_index":1755,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"40":{},"41":{},"44":{},"48":{},"50":{},"54":{},"55":{}},"component":{},"keyword":{}}],["aq/rl",{"_index":5749,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["aq=1",{"_index":7579,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["aq];po;[m",{"_index":5962,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["arbitrari",{"_index":1825,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"26":{},"27":{},"35":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"65":{}},"component":{},"keyword":{}}],["arbitrarili",{"_index":1872,"title":{},"name":{},"text":{"8":{},"26":{},"28":{},"38":{}},"component":{},"keyword":{}}],["arbor",{"_index":764,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["arch",{"_index":4029,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{},"keyword":{}}],["architect",{"_index":4156,"title":{},"name":{},"text":{"26":{},"28":{},"30":{},"31":{},"38":{},"40":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["architectur",{"_index":10,"title":{"3-1":{},"6-1":{},"10-4":{},"60-6":{}},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["area",{"_index":1133,"title":{},"name":{},"text":{"7":{},"19":{},"38":{},"40":{},"46":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["arg",{"_index":9583,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["argl",{"_index":6133,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["argu",{"_index":3939,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["arguabl",{"_index":3603,"title":{},"name":{},"text":{"18":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["argument",{"_index":1968,"title":{},"name":{},"text":{"8":{},"27":{},"30":{},"39":{},"45":{},"49":{},"51":{},"52":{},"53":{},"62":{},"66":{}},"component":{},"keyword":{}}],["aria",{"_index":1159,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["aris",{"_index":1814,"title":{},"name":{},"text":{"8":{},"10":{},"22":{},"26":{},"40":{},"41":{},"54":{}},"component":{},"keyword":{}}],["arisen",{"_index":5338,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["arithmet",{"_index":733,"title":{"37-4":{},"51-52":{},"51-53":{},"51-54":{},"51-55":{},"51-56":{},"51-73":{}},"name":{},"text":{"7":{},"27":{},"29":{},"30":{},"31":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"47":{},"49":{},"51":{},"55":{},"59":{},"60":{},"61":{}},"component":{},"keyword":{}}],["ark",{"_index":9040,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["arm",{"_index":1264,"title":{},"name":{},"text":{"7":{},"31":{},"37":{},"38":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["aros",{"_index":5466,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["around",{"_index":2396,"title":{},"name":{},"text":{"10":{},"23":{},"28":{},"31":{},"38":{},"40":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["arrang",{"_index":6075,"title":{},"name":{},"text":{"41":{},"49":{},"51":{}},"component":{},"keyword":{}}],["array",{"_index":2208,"title":{},"name":{},"text":{"9":{},"29":{},"41":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["arriv",{"_index":313,"title":{},"name":{},"text":{"4":{},"10":{},"40":{}},"component":{},"keyword":{}}],["artifact",{"_index":5430,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["arvind",{"_index":612,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["arx",{"_index":6866,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["asanovi",{"_index":43,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["asanovi'c",{"_index":786,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ascend",{"_index":6458,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["ascertain",{"_index":2332,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["asciidoc",{"_index":271,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["ashenden",{"_index":48,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["asic",{"_index":5419,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["asid",{"_index":443,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"33":{}},"component":{},"keyword":{}}],["asid[8:7]=3",{"_index":4119,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["asid[8:7]≠3",{"_index":4120,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["asid[asidlen",{"_index":4122,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["asidlen",{"_index":1954,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["asidlen<asidmax",{"_index":4139,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["asidmax",{"_index":1955,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["ask",{"_index":3802,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["asm",{"_index":810,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["asm(\"beqz",{"_index":7568,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["asm(\"csrw",{"_index":7571,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["asm(\"ld",{"_index":10017,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["asm(\"li",{"_index":10020,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["asm(\"lw",{"_index":10016,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["asm(\"ret",{"_index":10021,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["asm(\"sd",{"_index":10013,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["asm(\"sspopchk",{"_index":7573,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["asm(\"sspush",{"_index":7572,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["asm(\"ssrdp",{"_index":7563,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["asm(\"sw",{"_index":10011,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["aspect",{"_index":2029,"title":{},"name":{},"text":{"8":{},"15":{},"30":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["aspir",{"_index":3442,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["assembl",{"_index":808,"title":{"53":{}},"name":{},"text":{"7":{},"10":{},"31":{},"33":{},"37":{},"38":{},"41":{},"45":{},"47":{},"50":{},"51":{},"53":{},"57":{},"58":{},"62":{},"66":{}},"component":{},"keyword":{}}],["assert",{"_index":1685,"title":{},"name":{},"text":{"8":{},"10":{},"20":{},"49":{}},"component":{},"keyword":{}}],["assert(r",{"_index":7141,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["assess",{"_index":6933,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["asset",{"_index":2747,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["assign",{"_index":1729,"title":{},"name":{},"text":{"8":{},"10":{},"23":{},"26":{},"48":{},"50":{},"52":{}},"component":{},"keyword":{}}],["assist",{"_index":1811,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"50":{}},"component":{},"keyword":{}}],["associ",{"_index":428,"title":{},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"23":{},"26":{},"27":{},"28":{},"30":{},"38":{},"40":{},"50":{},"51":{},"55":{},"62":{}},"component":{},"keyword":{}}],["assort",{"_index":4372,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["assum",{"_index":1606,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"21":{},"25":{},"26":{},"28":{},"30":{},"32":{},"33":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"60":{},"62":{},"67":{}},"component":{},"keyword":{}}],["assumpt",{"_index":2006,"title":{},"name":{},"text":{"8":{},"27":{},"40":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["astrid",{"_index":9567,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["asymmetr",{"_index":6423,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["asymmetri",{"_index":5465,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["asynchron",{"_index":2443,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"38":{},"51":{}},"component":{},"keyword":{}}],["atkin",{"_index":611,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["atom",{"_index":233,"title":{"28":{},"54":{},"55":{},"10-41":{},"10-44":{},"28-1":{},"28-4":{},"40-6":{},"48-7":{},"50-11":{},"54-1":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"27":{},"28":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"48":{},"50":{},"51":{},"54":{},"55":{},"57":{},"59":{},"62":{}},"component":{},"keyword":{}}],["atomic_<op>(memory_order_acq_rel",{"_index":5783,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_<op>(memory_order_acquir",{"_index":5779,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_<op>(memory_order_relax",{"_index":5777,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_<op>(memory_order_releas",{"_index":5781,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_<op>(memory_order_seq_cst",{"_index":5765,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_load(memory_order_acquir",{"_index":5768,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_load(memory_order_relax",{"_index":5767,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_load(memory_order_seq_cst",{"_index":5769,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_store(memory_order_relax",{"_index":5770,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_store(memory_order_releas",{"_index":5771,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_store(memory_order_seq_cst",{"_index":5772,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_thread_fence(memory_order_acq_rel",{"_index":5775,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_thread_fence(memory_order_acquir",{"_index":5773,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_thread_fence(memory_order_releas",{"_index":5774,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atomic_thread_fence(memory_order_seq_cst",{"_index":5776,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["atop",{"_index":1486,"title":{},"name":{},"text":{"8":{},"22":{}},"component":{},"keyword":{}}],["atsec",{"_index":1362,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["attach",{"_index":2919,"title":{},"name":{},"text":{"10":{},"15":{},"38":{},"39":{}},"component":{},"keyword":{}}],["attack",{"_index":1061,"title":{},"name":{},"text":{"7":{},"11":{},"21":{},"26":{},"27":{},"35":{},"49":{},"50":{},"52":{}},"component":{},"keyword":{}}],["attain",{"_index":4973,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["attempt",{"_index":1547,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"22":{},"25":{},"26":{},"28":{},"31":{},"35":{},"38":{},"40":{},"49":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["attend",{"_index":10168,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["attest",{"_index":6776,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["attract",{"_index":4154,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["attribut",{"_index":24,"title":{"10-38":{}},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"10":{},"26":{},"33":{},"34":{},"38":{},"40":{},"50":{}},"component":{},"keyword":{}}],["audienc",{"_index":4736,"title":{"30-2":{},"49-3":{},"52-2":{}},"name":{},"text":{},"component":{},"keyword":{}}],["audit",{"_index":6809,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["augment",{"_index":1980,"title":{},"name":{},"text":{"8":{},"42":{},"48":{},"51":{}},"component":{},"keyword":{}}],["august",{"_index":754,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["auipc",{"_index":5195,"title":{},"name":{},"text":{"34":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{}},"component":{},"keyword":{}}],["auipc+jalr",{"_index":10038,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["auipc+jr",{"_index":10039,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["auipc+jr/jalr",{"_index":10040,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["auipc/jalr",{"_index":5178,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["aumasson",{"_index":6824,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["austria",{"_index":1252,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["authent",{"_index":4565,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["author",{"_index":489,"title":{},"name":{},"text":{"4":{},"34":{},"50":{},"51":{}},"component":{},"keyword":{}}],["authorit",{"_index":5074,"title":{"32":{}},"name":{},"text":{"32":{}},"component":{},"keyword":{}}],["autofdo",{"_index":3619,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["automat",{"_index":1563,"title":{},"name":{},"text":{"8":{},"19":{},"26":{},"27":{},"40":{},"45":{},"57":{}},"component":{},"keyword":{}}],["autonom",{"_index":5435,"title":{},"name":{},"text":{"38":{},"49":{}},"component":{},"keyword":{}}],["autonomi",{"_index":5434,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["autovector",{"_index":8536,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["auxiliari",{"_index":5198,"title":{},"name":{},"text":{"34":{},"41":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["avail",{"_index":539,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"21":{},"26":{},"27":{},"28":{},"29":{},"38":{},"40":{},"41":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"60":{},"63":{}},"component":{},"keyword":{}}],["avenu",{"_index":6963,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["averag",{"_index":3789,"title":{"51-75":{}},"name":{},"text":{"19":{},"33":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["avert",{"_index":3531,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["avižieni",{"_index":39,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["avl",{"_index":7597,"title":{"51-34":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["avoid",{"_index":502,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"11":{},"12":{},"19":{},"21":{},"23":{},"26":{},"27":{},"28":{},"29":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"64":{}},"component":{},"keyword":{}}],["awar",{"_index":1997,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"27":{},"31":{},"38":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["award",{"_index":3427,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["away",{"_index":4336,"title":{},"name":{},"text":{"27":{},"28":{},"40":{},"45":{},"50":{},"51":{}},"component":{},"keyword":{}}],["ax",{"_index":5594,"title":{},"name":{},"text":{"40":{},"67":{}},"component":{},"keyword":{}}],["axiom",{"_index":4434,"title":{"40-5":{},"40-6":{},"40-7":{},"48-5":{},"48-6":{},"48-7":{},"48-8":{}},"name":{},"text":{"28":{},"33":{},"40":{},"41":{},"48":{}},"component":{},"keyword":{}}],["axiomat",{"_index":5589,"title":{"41-1":{},"41-2":{}},"name":{},"text":{"40":{},"41":{},"48":{}},"component":{},"keyword":{}}],["b",{"_index":225,"title":{"29":{}},"name":{"29":{}},"text":{"4":{},"7":{},"8":{},"10":{},"19":{},"26":{},"29":{},"30":{},"31":{},"33":{},"34":{},"40":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["b+1",{"_index":8426,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["b/j",{"_index":6424,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["b0",{"_index":7121,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["b1",{"_index":7124,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["b2",{"_index":7127,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["b27022dc",{"_index":9408,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["b3",{"_index":7130,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["b8fa",{"_index":9949,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["b[i",{"_index":9542,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["b[n",{"_index":9411,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bachmey",{"_index":50,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["back",{"_index":541,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"19":{},"21":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"40":{},"45":{},"49":{},"51":{},"52":{},"53":{},"55":{},"57":{},"59":{}},"component":{},"keyword":{}}],["back_cfi_not_act",{"_index":7569,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["backdoor",{"_index":7078,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["background",{"_index":4307,"title":{"27-2":{},"33-3":{},"49-79":{}},"name":{},"text":{"27":{},"30":{},"33":{},"49":{},"52":{}},"component":{},"keyword":{}}],["backward",{"_index":203,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"21":{},"22":{},"26":{},"27":{},"28":{},"42":{},"45":{},"47":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["bad",{"_index":530,"title":{},"name":{},"text":{"4":{},"57":{}},"component":{},"keyword":{}}],["badli",{"_index":3870,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["bag",{"_index":5915,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["baish",{"_index":1010,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bak",{"_index":1307,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["balanc",{"_index":4104,"title":{},"name":{},"text":{"26":{},"40":{}},"component":{},"keyword":{}}],["balaram",{"_index":861,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["band",{"_index":4313,"title":{},"name":{},"text":{"27":{},"49":{}},"component":{},"keyword":{}}],["bandwidth",{"_index":3624,"title":{},"name":{},"text":{"19":{},"26":{},"30":{},"31":{},"49":{}},"component":{},"keyword":{}}],["bank",{"_index":2383,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["bar",{"_index":6629,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["barbara",{"_index":1211,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bardou",{"_index":1201,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bare",{"_index":419,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"27":{},"38":{}},"component":{},"keyword":{}}],["bargl",{"_index":6134,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["barker",{"_index":1008,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["barrel",{"_index":5236,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["barrier",{"_index":5347,"title":{},"name":{},"text":{"37":{},"57":{}},"component":{},"keyword":{}}],["base",{"_index":346,"title":{"23":{},"33":{},"45":{},"46":{},"47":{},"8-15":{},"10-10":{},"10-16":{},"26-3":{},"26-8":{},"26-20":{},"26-23":{},"26-25":{},"26-27":{},"26-30":{},"31-4":{},"31-5":{},"35-1":{},"38-5":{},"42-2":{},"45-2":{},"45-3":{},"49-83":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"12":{},"15":{},"16":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"57":{},"61":{},"62":{},"63":{},"64":{}},"component":{},"keyword":{}}],["base+0x14",{"_index":4090,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["base+0x1c",{"_index":2631,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["base+4×caus",{"_index":2627,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["base+offset",{"_index":5348,"title":{},"name":{},"text":{"37":{},"45":{}},"component":{},"keyword":{}}],["baselin",{"_index":1513,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["basi",{"_index":1833,"title":{},"name":{},"text":{"8":{},"21":{},"26":{},"40":{},"52":{}},"component":{},"keyword":{}}],["basic",{"_index":930,"title":{"29-6":{},"52-10":{}},"name":{},"text":{"7":{},"8":{},"10":{},"23":{},"27":{},"28":{},"29":{},"30":{},"35":{},"40":{},"41":{},"49":{},"51":{},"52":{},"61":{}},"component":{},"keyword":{}}],["batch",{"_index":4273,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["batten",{"_index":614,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["baudet",{"_index":1255,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["baum",{"_index":53,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["bc",{"_index":5757,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["bcfa",{"_index":9951,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["bclr",{"_index":4489,"title":{"29-23":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bclri",{"_index":4490,"title":{"29-24":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["be",{"_index":152,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"36":{},"37":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"59":{},"63":{},"66":{}},"component":{},"keyword":{}}],["beamer",{"_index":620,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["bear",{"_index":4389,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["becam",{"_index":4767,"title":{},"name":{},"text":{"30":{},"37":{}},"component":{},"keyword":{}}],["becom",{"_index":1697,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"25":{},"26":{},"27":{},"29":{},"30":{},"32":{},"37":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["befor",{"_index":151,"title":{"51-111":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"38":{},"40":{},"41":{},"42":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"57":{},"62":{},"63":{},"64":{},"65":{},"67":{}},"component":{},"keyword":{}}],["beforehand",{"_index":4270,"title":{},"name":{},"text":{"26":{},"51":{}},"component":{},"keyword":{}}],["began",{"_index":4130,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["begin",{"_index":2057,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"38":{},"40":{},"42":{},"51":{},"53":{}},"component":{},"keyword":{}}],["begun",{"_index":3722,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["behalf",{"_index":2724,"title":{},"name":{},"text":{"10":{},"17":{},"19":{},"38":{}},"component":{},"keyword":{}}],["behav",{"_index":1765,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"26":{},"27":{},"33":{},"38":{},"40":{},"49":{},"57":{},"67":{}},"component":{},"keyword":{}}],["behavior",{"_index":261,"title":{"18-4":{},"19-14":{},"30-5":{},"38-7":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"25":{},"26":{},"27":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"60":{},"62":{},"66":{},"67":{}},"component":{},"keyword":{}}],["behaviour",{"_index":6784,"title":{},"name":{},"text":{"49":{},"57":{}},"component":{},"keyword":{}}],["behren",{"_index":55,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["belgium",{"_index":6879,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["belief",{"_index":5469,"title":{},"name":{},"text":{"38":{},"51":{}},"component":{},"keyword":{}}],["believ",{"_index":2053,"title":{},"name":{},"text":{"8":{},"22":{},"37":{},"38":{},"44":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["belong",{"_index":3828,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["below",{"_index":1990,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"17":{},"19":{},"22":{},"26":{},"28":{},"29":{},"33":{},"35":{},"36":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"53":{},"56":{},"57":{}},"component":{},"keyword":{}}],["ben",{"_index":651,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{},"keyword":{}}],["benchmark",{"_index":4872,"title":{},"name":{},"text":{"31":{},"49":{},"57":{}},"component":{},"keyword":{}}],["benefici",{"_index":5471,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["benefit",{"_index":1867,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"26":{},"27":{},"30":{},"31":{},"36":{},"37":{},"38":{},"39":{},"40":{},"44":{},"45":{},"49":{},"50":{},"51":{},"61":{}},"component":{},"keyword":{}}],["benign",{"_index":3069,"title":{},"name":{},"text":{"11":{},"26":{}},"component":{},"keyword":{}}],["beq",{"_index":4724,"title":{},"name":{},"text":{"29":{},"31":{},"44":{},"45":{},"48":{},"50":{}},"component":{},"keyword":{}}],["beqz",{"_index":5063,"title":{},"name":{},"text":{"31":{},"40":{},"50":{},"53":{}},"component":{},"keyword":{}}],["berkeley",{"_index":721,"title":{"13-1":{}},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["bernabeu",{"_index":616,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["bernard",{"_index":1300,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["best",{"_index":4785,"title":{},"name":{},"text":{"30":{},"45":{},"48":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["better",{"_index":3893,"title":{},"name":{},"text":{"21":{},"26":{},"28":{},"30":{},"31":{},"35":{},"39":{},"40":{},"41":{},"49":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["between",{"_index":1615,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"57":{},"59":{},"60":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["bext",{"_index":4491,"title":{"29-25":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bexti",{"_index":4492,"title":{"29-26":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["beyond",{"_index":1838,"title":{"40-13":{}},"name":{},"text":{"8":{},"10":{},"15":{},"26":{},"27":{},"29":{},"34":{},"38":{},"40":{},"44":{},"45":{},"49":{},"51":{},"66":{}},"component":{},"keyword":{}}],["bf16",{"_index":4737,"title":{"30":{},"30-4":{},"30-5":{},"30-14":{},"30-15":{},"30-16":{}},"name":{},"text":{"30":{},"34":{}},"component":{},"keyword":{}}],["bf16.",{"_index":4845,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["bfloat16",{"_index":4750,"title":{"30":{}},"name":{"30":{}},"text":{"30":{},"34":{},"51":{}},"component":{},"keyword":{}}],["bge",{"_index":6211,"title":{},"name":{},"text":{"44":{},"45":{},"48":{}},"component":{},"keyword":{}}],["bgeu",{"_index":6213,"title":{},"name":{},"text":{"44":{},"45":{},"48":{}},"component":{},"keyword":{}}],["bgez",{"_index":8573,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["bgt",{"_index":6451,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["bgtu",{"_index":4719,"title":{},"name":{},"text":{"29":{},"45":{}},"component":{},"keyword":{}}],["bi",{"_index":401,"title":{},"name":{},"text":{"4":{},"34":{},"38":{},"52":{}},"component":{},"keyword":{}}],["bia",{"_index":1381,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["bias",{"_index":1342,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["bibliographi",{"_index":15,"title":{"7":{},"30-23":{}},"name":{"7":{}},"text":{"1":{},"7":{}},"component":{},"keyword":{}}],["big",{"_index":399,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"29":{},"34":{},"38":{},"45":{},"52":{}},"component":{},"keyword":{}}],["bill",{"_index":647,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["binari",{"_index":577,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"15":{},"26":{},"28":{},"30":{},"31":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"49":{},"51":{},"59":{},"67":{}},"component":{},"keyword":{}}],["binary/execut",{"_index":7533,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["binary128",{"_index":4763,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["binary16",{"_index":4752,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["binary32",{"_index":4761,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["binary64",{"_index":4762,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["binv",{"_index":4493,"title":{"29-27":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["binvi",{"_index":4494,"title":{"29-28":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bio",{"_index":3482,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["birth",{"_index":6969,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bist",{"_index":6730,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bit",{"_index":286,"title":{"29":{},"26-20":{},"26-23":{},"26-25":{},"26-27":{},"26-32":{},"27-16":{},"29-6":{},"29-8":{},"29-16":{},"29-17":{},"49-94":{},"49-105":{},"51-110":{},"51-111":{},"51-112":{},"51-113":{},"52-10":{},"52-12":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["bit(",{"_index":3742,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["bit*sew",{"_index":8215,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["bit/set",{"_index":3411,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["bit_to_bool(h[127",{"_index":9151,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bit_to_bool(s[bit",{"_index":9149,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bit_to_bool(x[7",{"_index":7094,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bit_to_bool(y[0",{"_index":7100,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bit_to_bool(y[1",{"_index":7101,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bit_to_bool(y[2",{"_index":7102,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bit_to_bool(y[3",{"_index":7104,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bit_to_bool(y[bit",{"_index":9158,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bitcount",{"_index":4605,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bitmanip",{"_index":4537,"title":{"49-7":{},"49-87":{},"49-92":{},"52-68":{}},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["bitmanipul",{"_index":6628,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bits('n",{"_index":4597,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bits(128",{"_index":7435,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bits(16",{"_index":4646,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["bits(256",{"_index":9269,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bits(3",{"_index":9419,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bits(32",{"_index":6637,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bits(4",{"_index":4688,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["bits(4*sew",{"_index":9185,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bits(5",{"_index":6717,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bits(64",{"_index":6650,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["bits(8",{"_index":4643,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["bits(egw",{"_index":9235,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bits(sew",{"_index":9101,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bits(width",{"_index":9116,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bits(xlen/2",{"_index":4636,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["bitwis",{"_index":1701,"title":{"29-12":{},"51-61":{}},"name":{},"text":{"8":{},"28":{},"29":{},"31":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"61":{}},"component":{},"keyword":{}}],["bit×xlen",{"_index":5510,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["bit—a",{"_index":3516,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["bkp",{"_index":9579,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["bkpt",{"_index":6475,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["blaauw",{"_index":952,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["black",{"_index":3473,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["blau",{"_index":758,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ble",{"_index":6452,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["bless",{"_index":5905,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["bleu",{"_index":6453,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["block",{"_index":910,"title":{"33-5":{},"33-20":{},"33-21":{},"33-22":{},"49-13":{},"52-14":{},"52-16":{}},"name":{},"text":{"7":{},"11":{},"17":{},"21":{},"22":{},"25":{},"30":{},"33":{},"41":{},"49":{},"52":{},"53":{},"55":{},"61":{}},"component":{},"keyword":{}}],["blocks/trng",{"_index":1334,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["blt",{"_index":6210,"title":{},"name":{},"text":{"44":{},"45":{},"48":{}},"component":{},"keyword":{}}],["bltu",{"_index":6212,"title":{},"name":{},"text":{"44":{},"45":{},"48":{}},"component":{},"keyword":{}}],["bltz",{"_index":7916,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["blue",{"_index":7947,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["blum",{"_index":1336,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["blum’",{"_index":7032,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bne",{"_index":4445,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"35":{},"40":{},"44":{},"45":{},"48":{},"53":{},"55":{}},"component":{},"keyword":{}}],["bnez",{"_index":4447,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"40":{},"51":{},"53":{}},"component":{},"keyword":{}}],["bnp",{"_index":9575,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["board",{"_index":2881,"title":{},"name":{},"text":{"10":{},"34":{}},"component":{},"keyword":{}}],["bodi",{"_index":5548,"title":{"51-30":{}},"name":{},"text":{"40":{},"41":{},"51":{},"52":{}},"component":{},"keyword":{}}],["body(x",{"_index":7771,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["boehm",{"_index":622,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["bohan",{"_index":1108,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bold",{"_index":9493,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bonzini",{"_index":57,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["book",{"_index":947,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bool",{"_index":9150,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["boolean",{"_index":4568,"title":{},"name":{},"text":{"29":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["boot",{"_index":2363,"title":{},"name":{},"text":{"10":{},"15":{},"19":{},"21":{}},"component":{},"keyword":{}}],["bootrom",{"_index":3869,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["bootrom/firmwar",{"_index":3881,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["border",{"_index":5497,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["boringssl",{"_index":6787,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["borrow",{"_index":7601,"title":{"51-60":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["borrow_out(vs2[i",{"_index":8118,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["both",{"_index":545,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"15":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"60":{},"61":{},"62":{},"63":{},"67":{}},"component":{},"keyword":{}}],["bottleneck",{"_index":4157,"title":{},"name":{},"text":{"26":{},"31":{}},"component":{},"keyword":{}}],["bottom",{"_index":3011,"title":{},"name":{},"text":{"10":{},"19":{},"31":{},"42":{}},"component":{},"keyword":{}}],["bound",{"_index":533,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"29":{},"35":{},"45":{},"49":{},"50":{},"51":{},"56":{},"65":{}},"component":{},"keyword":{}}],["boundari",{"_index":1844,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"31":{},"32":{},"38":{},"40":{},"45":{},"49":{},"50":{},"57":{}},"component":{},"keyword":{}}],["boundary’",{"_index":6997,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["box",{"_index":3474,"title":{"30-9":{},"36-2":{}},"name":{},"text":{"15":{},"30":{},"34":{},"36":{},"37":{},"43":{},"51":{},"59":{},"60":{}},"component":{},"keyword":{}}],["boxedvalu",{"_index":5274,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["boyl",{"_index":1011,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bp",{"_index":9568,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["bpfrz",{"_index":3638,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["bradburi",{"_index":618,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["brain",{"_index":4772,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["branch",{"_index":849,"title":{"45-11":{}},"name":{},"text":{"7":{},"10":{},"19":{},"28":{},"31":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"57":{},"61":{},"66":{}},"component":{},"keyword":{}}],["branch/arithmet",{"_index":4928,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["branch/jump",{"_index":6061,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["branchless",{"_index":4732,"title":{},"name":{},"text":{"29":{},"61":{}},"component":{},"keyword":{}}],["branch’",{"_index":6812,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["brazil",{"_index":819,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["breach",{"_index":4302,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["break",{"_index":2109,"title":{},"name":{},"text":{"8":{},"10":{},"38":{},"40":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["breakpoint",{"_index":415,"title":{"10-32":{},"31-13":{},"33-14":{},"45-14":{}},"name":{},"text":{"4":{},"8":{},"10":{},"19":{},"26":{},"45":{},"54":{},"57":{}},"component":{},"keyword":{}}],["brendan",{"_index":691,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["brent",{"_index":689,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["brev",{"_index":9514,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["brev(x",{"_index":9515,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["brev8",{"_index":4513,"title":{"29-50":{},"49-33":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["brev8(get_velem(vd,egw=128,i",{"_index":9157,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["brev8(get_velem(vs2,egw=128,i",{"_index":9147,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["brev8(i",{"_index":9148,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["brev8(z",{"_index":9155,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["breviti",{"_index":8915,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["bridg",{"_index":1292,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["brief",{"_index":4779,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["briefli",{"_index":3465,"title":{},"name":{},"text":{"15":{},"49":{}},"component":{},"keyword":{}}],["brigg",{"_index":624,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["bring",{"_index":3486,"title":{},"name":{},"text":{"15":{},"51":{}},"component":{},"keyword":{}}],["bristol",{"_index":6863,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["broad",{"_index":6194,"title":{},"name":{},"text":{"44":{},"61":{}},"component":{},"keyword":{}}],["broadcast",{"_index":4151,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["broaden",{"_index":559,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["broader",{"_index":2912,"title":{},"name":{},"text":{"10":{},"40":{}},"component":{},"keyword":{}}],["broadli",{"_index":4021,"title":{},"name":{},"text":{"23":{},"44":{}},"component":{},"keyword":{}}],["broken",{"_index":5496,"title":{},"name":{},"text":{"38":{},"40":{},"41":{},"51":{}},"component":{},"keyword":{}}],["brought",{"_index":5624,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["brownout",{"_index":2865,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["bruce",{"_index":645,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["bs",{"_index":6630,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bs*8",{"_index":6634,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bs,rs2,rs1,rd",{"_index":6632,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["bset",{"_index":4495,"title":{"29-29":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bseti",{"_index":4496,"title":{"29-30":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bsi",{"_index":1029,"title":{"49-74":{},"49-109":{}},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["bstride",{"_index":9569,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["btb",{"_index":6435,"title":{},"name":{},"text":{"45":{},"61":{}},"component":{},"keyword":{}}],["bu",{"_index":2899,"title":{},"name":{},"text":{"10":{},"40":{},"57":{}},"component":{},"keyword":{}}],["buchholz",{"_index":941,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["buffer",{"_index":3625,"title":{},"name":{},"text":{"19":{},"26":{},"27":{},"33":{},"40":{},"41":{},"64":{},"67":{}},"component":{},"keyword":{}}],["bug",{"_index":1632,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"26":{}},"component":{},"keyword":{}}],["buggi",{"_index":3900,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["build",{"_index":1228,"title":{},"name":{},"text":{"7":{},"27":{},"28":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{}},"component":{},"keyword":{}}],["built",{"_index":2938,"title":{},"name":{},"text":{"10":{},"28":{},"30":{},"37":{},"38":{},"40":{},"45":{},"49":{},"50":{}},"component":{},"keyword":{}}],["builtin",{"_index":4614,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["bukin",{"_index":59,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["bulb",{"_index":10172,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["bulk",{"_index":3521,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["bulldoz",{"_index":5231,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["buller",{"_index":1035,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["bullet",{"_index":4150,"title":{},"name":{},"text":{"26":{},"33":{}},"component":{},"keyword":{}}],["bump",{"_index":7808,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["burden",{"_index":1665,"title":{},"name":{},"text":{"8":{},"10":{},"40":{}},"component":{},"keyword":{}}],["burdensom",{"_index":8942,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["burst",{"_index":2918,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["buse",{"_index":2883,"title":{},"name":{},"text":{"10":{},"28":{},"38":{},"40":{}},"component":{},"keyword":{}}],["busi",{"_index":9735,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["bypass",{"_index":2021,"title":{},"name":{},"text":{"8":{},"21":{},"27":{},"49":{}},"component":{},"keyword":{}}],["byte",{"_index":483,"title":{"54":{},"29-14":{},"49-94":{},"51-13":{},"54-1":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{}},"component":{},"keyword":{}}],["bytefield/hedelegreg.edn",{"_index":1660,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["bytes/destin",{"_index":7813,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["bytes/sourc",{"_index":7807,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["bytes=4",{"_index":10004,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["bytes=8",{"_index":10005,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c",{"_index":735,"title":{"31":{},"31-14":{},"53-9":{},"57-2":{}},"name":{"31":{}},"text":{"7":{},"8":{},"10":{},"13":{},"19":{},"22":{},"28":{},"31":{},"34":{},"38":{},"40":{},"41":{},"42":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"64":{}},"component":{},"keyword":{}}],["c)))[31..0",{"_index":7439,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["c++11",{"_index":4464,"title":{},"name":{},"text":{"28":{},"55":{}},"component":{},"keyword":{}}],["c+d",{"_index":9767,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c+f",{"_index":9766,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.[sz]ext",{"_index":9786,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.add",{"_index":5024,"title":{},"name":{},"text":{"31":{},"49":{},"64":{}},"component":{},"keyword":{}}],["c.addi",{"_index":2491,"title":{},"name":{},"text":{"10":{},"26":{},"31":{},"49":{},"50":{}},"component":{},"keyword":{}}],["c.addi16sp",{"_index":4996,"title":{},"name":{},"text":{"31":{},"57":{},"66":{}},"component":{},"keyword":{}}],["c.addi4spn",{"_index":5008,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.addiw",{"_index":4999,"title":{},"name":{},"text":{"31":{},"49":{},"57":{}},"component":{},"keyword":{}}],["c.addw",{"_index":5029,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.and",{"_index":5025,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.andi",{"_index":5020,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.beqz",{"_index":4987,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.bnez",{"_index":4988,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.ebreak",{"_index":2842,"title":{},"name":{},"text":{"10":{},"19":{},"31":{}},"component":{},"keyword":{}}],["c.f",{"_index":9765,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.fld",{"_index":4979,"title":{},"name":{},"text":{"31":{},"57":{}},"component":{},"keyword":{}}],["c.fld[sp",{"_index":10155,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["c.fldsp",{"_index":4363,"title":{},"name":{},"text":{"27":{},"31":{},"57":{}},"component":{},"keyword":{}}],["c.flw",{"_index":4978,"title":{},"name":{},"text":{"31":{},"57":{}},"component":{},"keyword":{}}],["c.flw[sp",{"_index":10152,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["c.flwsp",{"_index":4362,"title":{},"name":{},"text":{"27":{},"31":{},"57":{}},"component":{},"keyword":{}}],["c.fsd",{"_index":4983,"title":{},"name":{},"text":{"31":{},"57":{}},"component":{},"keyword":{}}],["c.fsd[sp",{"_index":10156,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["c.fsdsp",{"_index":4368,"title":{},"name":{},"text":{"27":{},"31":{},"57":{}},"component":{},"keyword":{}}],["c.fsw",{"_index":4982,"title":{},"name":{},"text":{"31":{},"57":{}},"component":{},"keyword":{}}],["c.fsw[sp",{"_index":10153,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["c.fswsp",{"_index":4367,"title":{},"name":{},"text":{"27":{},"31":{},"57":{}},"component":{},"keyword":{}}],["c.j",{"_index":3763,"title":{},"name":{},"text":{"19":{},"31":{},"50":{}},"component":{},"keyword":{}}],["c.jal",{"_index":3760,"title":{},"name":{},"text":{"19":{},"31":{},"50":{}},"component":{},"keyword":{}}],["c.jalr",{"_index":3758,"title":{},"name":{},"text":{"19":{},"31":{},"50":{}},"component":{},"keyword":{}}],["c.jr",{"_index":3762,"title":{},"name":{},"text":{"19":{},"31":{},"50":{}},"component":{},"keyword":{}}],["c.lbu",{"_index":9745,"title":{"57-13":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.ld",{"_index":4977,"title":{},"name":{},"text":{"31":{},"50":{}},"component":{},"keyword":{}}],["c.ldsp",{"_index":4360,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{},"keyword":{}}],["c.lh",{"_index":9747,"title":{"57-15":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.lhu",{"_index":9746,"title":{"57-14":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.li",{"_index":4989,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.lqsp",{"_index":4361,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["c.lui",{"_index":4990,"title":{},"name":{},"text":{"31":{},"49":{},"66":{}},"component":{},"keyword":{}}],["c.lw",{"_index":4975,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.lwsp",{"_index":4359,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{},"keyword":{}}],["c.mop.1",{"_index":7538,"title":{},"name":{},"text":{"50":{},"66":{}},"component":{},"keyword":{}}],["c.mop.11",{"_index":10220,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mop.13",{"_index":10222,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mop.15",{"_index":10224,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mop.3",{"_index":10213,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mop.5",{"_index":7540,"title":{},"name":{},"text":{"50":{},"66":{}},"component":{},"keyword":{}}],["c.mop.7",{"_index":10216,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mop.9",{"_index":10218,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mop.n",{"_index":10208,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["c.mul",{"_index":9755,"title":{"57-24":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.mv",{"_index":5021,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.nop",{"_index":4998,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.not",{"_index":9754,"title":{"57-23":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.ntl.all",{"_index":5053,"title":{},"name":{},"text":{"31":{},"64":{}},"component":{},"keyword":{}}],["c.ntl.p1",{"_index":5047,"title":{},"name":{},"text":{"31":{},"64":{}},"component":{},"keyword":{}}],["c.ntl.pall",{"_index":5049,"title":{},"name":{},"text":{"31":{},"64":{}},"component":{},"keyword":{}}],["c.ntl.s1",{"_index":5051,"title":{},"name":{},"text":{"31":{},"64":{}},"component":{},"keyword":{}}],["c.or",{"_index":5026,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.sb",{"_index":9748,"title":{"57-16":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.sd",{"_index":4981,"title":{},"name":{},"text":{"31":{},"50":{}},"component":{},"keyword":{}}],["c.sdsp",{"_index":4365,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{},"keyword":{}}],["c.sext.b",{"_index":9751,"title":{"57-19":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.sext.h",{"_index":9752,"title":{"57-21":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.sext.w",{"_index":9773,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.sh",{"_index":9749,"title":{"57-17":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.slli",{"_index":5013,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.slli64",{"_index":5054,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.sqsp",{"_index":4366,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["c.srai",{"_index":5018,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.srai64",{"_index":5056,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.srli",{"_index":5017,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.srli64",{"_index":5055,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.sspopchk",{"_index":3085,"title":{},"name":{},"text":{"11":{},"27":{},"50":{}},"component":{},"keyword":{}}],["c.sspush",{"_index":3075,"title":{},"name":{},"text":{"11":{},"27":{},"50":{}},"component":{},"keyword":{}}],["c.sspush/sspopchk/c.sspopchk",{"_index":3102,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["c.sub",{"_index":5028,"title":{},"name":{},"text":{"31":{},"49":{},"57":{}},"component":{},"keyword":{}}],["c.subw",{"_index":5031,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["c.sw",{"_index":4980,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["c.swsp",{"_index":4364,"title":{},"name":{},"text":{"27":{},"31":{}},"component":{},"keyword":{}}],["c.xor",{"_index":5027,"title":{},"name":{},"text":{"31":{},"49":{},"57":{}},"component":{},"keyword":{}}],["c.zext.b",{"_index":9750,"title":{"57-18":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c.zext.h",{"_index":4642,"title":{"57-20":{}},"name":{},"text":{"29":{},"57":{}},"component":{},"keyword":{}}],["c.zext.w",{"_index":9753,"title":{"57-22":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c/c",{"_index":1447,"title":{},"name":{},"text":{"7":{},"40":{}},"component":{},"keyword":{}}],["c0da",{"_index":9861,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c1",{"_index":9302,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["c11",{"_index":4463,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["c11/c++11",{"_index":4466,"title":{},"name":{},"text":{"28":{},"40":{}},"component":{},"keyword":{}}],["c2",{"_index":9312,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["c2d6",{"_index":9857,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c4d2",{"_index":9841,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c6ce",{"_index":9837,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c8ca",{"_index":9833,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["c99",{"_index":5337,"title":{},"name":{},"text":{"37":{},"51":{}},"component":{},"keyword":{}}],["c[i",{"_index":9544,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_a",{"_index":9626,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_a[i",{"_index":9642,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_add",{"_index":6856,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_addi",{"_index":6842,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_addiw",{"_index":6843,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_addw",{"_index":6853,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_and",{"_index":6851,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_andi",{"_index":6847,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_b",{"_index":9627,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_b[i",{"_index":9643,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_c",{"_index":9625,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_c[i",{"_index":9641,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_col_loop",{"_index":9596,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_lui",{"_index":6844,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_mv",{"_index":6855,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_nop",{"_index":6841,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_or",{"_index":6850,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_row_loop",{"_index":9595,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["c_slli",{"_index":6854,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_srai",{"_index":6846,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_srli",{"_index":6845,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_sub",{"_index":6848,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_subw",{"_index":6852,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["c_xor",{"_index":6849,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ca",{"_index":797,"title":{"55":{},"55-1":{}},"name":{},"text":{"7":{},"28":{},"31":{},"55":{},"57":{}},"component":{},"keyword":{}}],["caa6",{"_index":9853,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cabl",{"_index":7065,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cach",{"_index":412,"title":{"33":{},"26-31":{},"33-4":{},"33-5":{},"33-6":{},"33-20":{},"33-21":{},"33-22":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"38":{},"40":{},"41":{},"45":{},"49":{},"53":{},"56":{},"63":{},"64":{},"65":{}},"component":{},"keyword":{}}],["cacheabl",{"_index":2325,"title":{"10-46":{},"40-14":{}},"name":{},"text":{"10":{},"26":{},"33":{},"40":{}},"component":{},"keyword":{}}],["cacheless",{"_index":9738,"title":{},"name":{},"text":{"56":{},"65":{}},"component":{},"keyword":{}}],["calc",{"_index":8114,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["calcul",{"_index":2670,"title":{},"name":{},"text":{"10":{},"19":{},"29":{},"33":{},"34":{},"40":{},"41":{},"45":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["california",{"_index":720,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["call",{"_index":510,"title":{"32":{},"10-32":{},"45-14":{}},"name":{"32":{}},"text":{"4":{},"7":{},"8":{},"10":{},"15":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"30":{},"31":{},"32":{},"34":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"60":{},"63":{}},"component":{},"keyword":{}}],["call/jump",{"_index":3046,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["callabl",{"_index":7513,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["calle",{"_index":5275,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["caller",{"_index":5078,"title":{},"name":{},"text":{"32":{},"49":{}},"component":{},"keyword":{}}],["calls/jump",{"_index":7518,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["came",{"_index":3433,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["camellia",{"_index":1152,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["canada",{"_index":805,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["candid",{"_index":3945,"title":{},"name":{},"text":{"22":{},"40":{},"41":{},"51":{}},"component":{},"keyword":{}}],["candidates[r",{"_index":5835,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["canon",{"_index":4816,"title":{},"name":{},"text":{"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"42":{},"43":{},"45":{},"49":{},"51":{},"58":{},"59":{}},"component":{},"keyword":{}}],["canonic",{"_index":5395,"title":{},"name":{},"text":{"37":{},"51":{}},"component":{},"keyword":{}}],["can’t",{"_index":3868,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{},"keyword":{}}],["cap",{"_index":6030,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["capabl",{"_index":1490,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"19":{},"21":{},"26":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["capac",{"_index":1247,"title":{},"name":{},"text":{"7":{},"26":{},"27":{},"33":{},"51":{},"61":{},"64":{}},"component":{},"keyword":{}}],["captur",{"_index":529,"title":{},"name":{},"text":{"4":{},"10":{},"19":{},"26":{},"27":{},"30":{},"31":{},"35":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["care",{"_index":4162,"title":{},"name":{},"text":{"26":{},"27":{},"40":{},"51":{}},"component":{},"keyword":{}}],["carefulli",{"_index":2545,"title":{},"name":{},"text":{"10":{},"38":{},"40":{},"41":{},"49":{}},"component":{},"keyword":{}}],["carolin",{"_index":695,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["carri",{"_index":4482,"title":{"29-15":{},"29-18":{},"49-8":{},"49-95":{},"51-60":{},"52-28":{}},"name":{},"text":{"29":{},"40":{},"48":{},"49":{},"51":{},"52":{},"55":{},"56":{},"61":{},"66":{}},"component":{},"keyword":{}}],["carry_out(vs2[i",{"_index":8107,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["carryless",{"_index":8876,"title":{"52-11":{},"52-19":{},"52-22":{},"52-68":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["case",{"_index":1620,"title":{"42-1":{}},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"56":{},"57":{},"60":{},"62":{},"64":{},"67":{}},"component":{},"keyword":{}}],["castro",{"_index":1377,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cat",{"_index":5917,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["catalog",{"_index":2357,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["catch",{"_index":3880,"title":{},"name":{},"text":{"21":{},"36":{},"38":{}},"component":{},"keyword":{}}],["categor",{"_index":2914,"title":{},"name":{},"text":{"10":{},"38":{}},"component":{},"keyword":{}}],["categori",{"_index":1571,"title":{},"name":{},"text":{"8":{},"10":{},"34":{},"38":{},"42":{},"49":{},"51":{}},"component":{},"keyword":{}}],["category—for",{"_index":6126,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["cater",{"_index":2738,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["caus",{"_index":206,"title":{"8-18":{},"8-35":{},"10-24":{},"26-14":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"32":{},"33":{},"35":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"51":{},"56":{},"57":{},"58":{},"60":{},"62":{}},"component":{},"keyword":{}}],["cause=18",{"_index":7524,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["caution",{"_index":3682,"title":{},"name":{},"text":{"19":{},"21":{}},"component":{},"keyword":{}}],["cb",{"_index":4920,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["cbc",{"_index":6940,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cbcfe",{"_index":1775,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"33":{}},"component":{},"keyword":{}}],["cbie",{"_index":1776,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"33":{}},"component":{},"keyword":{}}],["cbo",{"_index":3076,"title":{},"name":{},"text":{"11":{},"33":{}},"component":{},"keyword":{}}],["cbo.clean",{"_index":5081,"title":{"33-24":{}},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["cbo.flush",{"_index":4269,"title":{"33-25":{}},"name":{},"text":{"26":{},"33":{}},"component":{},"keyword":{}}],["cbo.inv",{"_index":5082,"title":{"33-26":{}},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["cbo.zero",{"_index":4379,"title":{"33-27":{}},"name":{},"text":{"27":{},"33":{},"64":{}},"component":{},"keyword":{}}],["cbqri",{"_index":4294,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["cbze",{"_index":1773,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"33":{}},"component":{},"keyword":{}}],["cc",{"_index":3767,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cc[11:0",{"_index":3708,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cc[15:0",{"_index":3702,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cc[15:12",{"_index":3705,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cca2",{"_index":9849,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["ccc",{"_index":1180,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cce",{"_index":3704,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cce+10:cc",{"_index":3772,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cce=3",{"_index":3786,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cce==0",{"_index":3773,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cce>1",{"_index":3785,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ccfg",{"_index":3535,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["ccm",{"_index":3707,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ccp",{"_index":9581,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ccv",{"_index":3701,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ccv=0",{"_index":3792,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ccv=1",{"_index":3808,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cdc",{"_index":4883,"title":{},"name":{},"text":{"31":{},"35":{}},"component":{},"keyword":{}}],["cde",{"_index":2777,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["cde=0",{"_index":2781,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["cde=1",{"_index":2780,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["cdeleg",{"_index":3534,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["ce86",{"_index":9845,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["ceas",{"_index":2477,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["cede",{"_index":2437,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["ceil(avl",{"_index":7801,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ceil(egw",{"_index":8928,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ceil(emul",{"_index":7926,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ceil(vl/8",{"_index":7867,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["celio",{"_index":61,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["cell",{"_index":7003,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["center",{"_index":3449,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["cert",{"_index":6779,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["certain",{"_index":1664,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"22":{},"23":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"38":{},"40":{},"49":{},"51":{},"52":{},"57":{},"62":{}},"component":{},"keyword":{}}],["certif",{"_index":6570,"title":{"49-100":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["certifi",{"_index":6882,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cfg",{"_index":7516,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["cfi",{"_index":3041,"title":{"11":{},"50":{}},"name":{"11":{},"50":{}},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["ch(e,f,g",{"_index":9190,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ch(x",{"_index":9207,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["chacha20",{"_index":6868,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["chain",{"_index":1345,"title":{},"name":{},"text":{"7":{},"21":{},"40":{},"49":{},"51":{}},"component":{},"keyword":{}}],["challeng",{"_index":2466,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{},"keyword":{}}],["chanc",{"_index":4967,"title":{},"name":{},"text":{"31":{},"40":{}},"component":{},"keyword":{}}],["chang",{"_index":63,"title":{"51-36":{}},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"46":{},"47":{},"49":{},"51":{},"52":{},"57":{},"62":{},"64":{}},"component":{},"keyword":{}}],["changelog",{"_index":6524,"title":{"49-1":{}},"name":{},"text":{},"component":{},"keyword":{}}],["change—even",{"_index":1978,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["channel",{"_index":1246,"title":{},"name":{},"text":{"7":{},"10":{},"22":{},"26":{},"27":{},"35":{},"40":{},"49":{},"50":{},"52":{}},"component":{},"keyword":{}}],["chapter",{"_index":487,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"14":{},"26":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"52":{},"58":{},"59":{},"60":{},"62":{},"66":{},"67":{}},"component":{},"keyword":{}}],["char",{"_index":7910,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["charact",{"_index":2341,"title":{},"name":{},"text":{"10":{},"42":{},"51":{}},"component":{},"keyword":{}}],["character",{"_index":1301,"title":{},"name":{},"text":{"7":{},"10":{},"38":{},"49":{}},"component":{},"keyword":{}}],["characterist",{"_index":387,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"33":{},"38":{}},"component":{},"keyword":{}}],["che",{"_index":1283,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cheap",{"_index":4330,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["cheapest",{"_index":2046,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["cheapli",{"_index":6431,"title":{},"name":{},"text":{"45":{},"52":{}},"component":{},"keyword":{}}],["check",{"_index":245,"title":{"49-114":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"21":{},"26":{},"27":{},"28":{},"30":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"53":{},"66":{}},"component":{},"keyword":{}}],["checker",{"_index":2892,"title":{},"name":{},"text":{"10":{},"27":{}},"component":{},"keyword":{}}],["checklist",{"_index":6569,"title":{"49-100":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["checkpoint",{"_index":7581,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["chi",{"_index":6874,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["chiefli",{"_index":6589,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["china",{"_index":1115,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["chip",{"_index":772,"title":{},"name":{},"text":{"7":{},"10":{},"15":{},"19":{},"38":{},"40":{},"56":{},"65":{}},"component":{},"keyword":{}}],["chisnal",{"_index":64,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["choic",{"_index":2497,"title":{},"name":{},"text":{"10":{},"16":{},"26":{},"27":{},"35":{},"38":{},"40":{},"49":{},"51":{},"52":{},"65":{},"66":{}},"component":{},"keyword":{}}],["choos",{"_index":281,"title":{},"name":{},"text":{"4":{},"10":{},"19":{},"22":{},"26":{},"27":{},"32":{},"35":{},"40":{},"45":{},"51":{},"52":{}},"component":{},"keyword":{}}],["chose",{"_index":2062,"title":{},"name":{},"text":{"8":{},"30":{},"37":{},"38":{},"45":{},"51":{},"52":{}},"component":{},"keyword":{}}],["chosen",{"_index":1995,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"31":{},"38":{},"40":{},"45":{},"49":{},"51":{},"52":{},"58":{},"66":{}},"component":{},"keyword":{}}],["christian",{"_index":642,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["christof",{"_index":1137,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["christoph",{"_index":60,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["chuanhua",{"_index":62,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["chunk",{"_index":2209,"title":{},"name":{},"text":{"9":{},"29":{}},"component":{},"keyword":{}}],["churn",{"_index":7872,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ci",{"_index":4914,"title":{},"name":{},"text":{"31":{},"52":{}},"component":{},"keyword":{}}],["cipher",{"_index":980,"title":{"49-13":{},"52-14":{},"52-16":{}},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["ciphertext",{"_index":6815,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["circuit",{"_index":817,"title":{},"name":{},"text":{"7":{},"10":{},"39":{},"45":{},"49":{}},"component":{},"keyword":{}}],["circuitri",{"_index":5543,"title":{},"name":{},"text":{"39":{},"45":{},"49":{}},"component":{},"keyword":{}}],["circular",{"_index":2528,"title":{},"name":{},"text":{"10":{},"19":{},"29":{},"38":{}},"component":{},"keyword":{}}],["circumst",{"_index":1730,"title":{},"name":{},"text":{"8":{},"22":{},"26":{},"28":{},"40":{},"49":{}},"component":{},"keyword":{}}],["cisc",{"_index":4893,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["cite",{"_index":605,"title":{},"name":{},"text":{"5":{},"49":{}},"component":{},"keyword":{}}],["cite:[gbt:sm3,iso:sm3",{"_index":6710,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cite:[gbt:sm4",{"_index":6714,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cite:[hale98,halile99,balumi:11",{"_index":7009,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cite:[kisc01,kisc11",{"_index":6908,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cite:[ni19,nicc21",{"_index":6902,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cite:[nist:fips:202,nist:fips:180:4",{"_index":6922,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ciw",{"_index":4917,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["cj",{"_index":4929,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["ck",{"_index":9409,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ck(4",{"_index":9424,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["cl",{"_index":4918,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["claim",{"_index":5037,"title":{},"name":{},"text":{"31":{},"49":{},"51":{}},"component":{},"keyword":{}}],["clair",{"_index":128,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["clarif",{"_index":266,"title":{},"name":{},"text":{"4":{},"34":{}},"component":{},"keyword":{}}],["clarifi",{"_index":276,"title":{},"name":{},"text":{"4":{},"34":{},"40":{},"48":{}},"component":{},"keyword":{}}],["clariti",{"_index":9613,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["class",{"_index":1025,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"23":{},"26":{},"28":{},"33":{},"37":{},"38":{},"44":{},"45":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["classic",{"_index":1514,"title":{"49-125":{}},"name":{},"text":{"8":{},"10":{},"15":{},"38":{},"49":{}},"component":{},"keyword":{}}],["classif",{"_index":2961,"title":{},"name":{},"text":{"10":{},"49":{}},"component":{},"keyword":{}}],["classifi",{"_index":2946,"title":{"36-7":{},"37-9":{},"43-5":{},"51-93":{},"59-5":{}},"name":{},"text":{"10":{},"33":{},"34":{},"36":{},"43":{},"51":{},"59":{},"62":{}},"component":{},"keyword":{}}],["claus",{"_index":4681,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["clayton",{"_index":625,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["clb",{"_index":9780,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["clean",{"_index":2585,"title":{},"name":{},"text":{"10":{},"21":{},"26":{},"33":{},"51":{}},"component":{},"keyword":{}}],["cleaner",{"_index":4133,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["cleanli",{"_index":2680,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["clear",{"_index":323,"title":{"19-12":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"34":{},"37":{},"38":{},"39":{},"41":{},"45":{},"49":{},"51":{},"52":{},"56":{},"62":{}},"component":{},"keyword":{}}],["clearer",{"_index":5164,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["clearli",{"_index":5609,"title":{},"name":{},"text":{"40":{},"44":{},"49":{}},"component":{},"keyword":{}}],["clh",{"_index":9782,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["client",{"_index":5457,"title":{},"name":{},"text":{"38":{},"41":{},"49":{}},"component":{},"keyword":{}}],["clip",{"_index":5386,"title":{"51-78":{}},"name":{},"text":{"37":{},"51":{},"52":{}},"component":{},"keyword":{}}],["clip(roundoff_signed(vs2[i",{"_index":8328,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["clip(roundoff_signed(vs2[i]*vs1[i",{"_index":8309,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["clip(roundoff_signed(vs2[i]*x[rs1",{"_index":8311,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["clip(roundoff_unsigned(vs2[i",{"_index":8324,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["clmul",{"_index":4497,"title":{"29-31":{},"49-34":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["clmul(op1,op2,sew",{"_index":9114,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["clmul(x",{"_index":9115,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["clmulh",{"_index":4498,"title":{"29-32":{},"49-35":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["clmulh(op1",{"_index":9121,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["clmulh(x",{"_index":9122,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["clmulr",{"_index":4499,"title":{"29-33":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["clobber",{"_index":5675,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["clock",{"_index":2702,"title":{},"name":{},"text":{"10":{},"18":{},"35":{},"49":{},"53":{}},"component":{},"keyword":{}}],["clonabl",{"_index":6974,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["close",{"_index":2175,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"26":{},"42":{},"49":{},"51":{}},"component":{},"keyword":{}}],["closest",{"_index":8283,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["cluster",{"_index":5438,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["clz",{"_index":4500,"title":{"29-34":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["clzw",{"_index":4501,"title":{"29-35":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["cm.jalt",{"_index":3761,"title":{"57-52":{}},"name":{},"text":{"19":{},"57":{}},"component":{},"keyword":{}}],["cm.jt",{"_index":3764,"title":{"57-51":{}},"name":{},"text":{"19":{},"57":{}},"component":{},"keyword":{}}],["cm.jt/cm.jalt",{"_index":10041,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.mva01",{"_index":9762,"title":{"57-46":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.mva01s.",{"_index":10036,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.mvsa01",{"_index":9761,"title":{"57-45":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.mvsa01.",{"_index":10025,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.pop",{"_index":9758,"title":{"57-38":{},"57-39":{},"57-40":{},"57-42":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.pop.",{"_index":10014,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popret",{"_index":9760,"title":{"57-44":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popret(z",{"_index":3765,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cm.popret.",{"_index":10022,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz",{"_index":9759,"title":{"57-43":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(1",{"_index":9885,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(10",{"_index":9912,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(11",{"_index":9915,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(12",{"_index":9918,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(15",{"_index":9928,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(16",{"_index":9931,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(2",{"_index":9888,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(3",{"_index":9891,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(4",{"_index":9894,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(5",{"_index":9897,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(6",{"_index":9900,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(7",{"_index":9903,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(8",{"_index":9906,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz(9",{"_index":9909,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.popretz.",{"_index":10019,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push",{"_index":9757,"title":{"57-36":{},"57-37":{},"57-41":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(1",{"_index":9831,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(10",{"_index":9867,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(11",{"_index":9871,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(12",{"_index":9875,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(2",{"_index":9835,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(3",{"_index":9839,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(4",{"_index":9843,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(5",{"_index":9847,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(6",{"_index":9851,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(7",{"_index":9855,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(8",{"_index":9859,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push(9",{"_index":9863,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cm.push.",{"_index":9984,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cmjt",{"_index":9790,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cmmv",{"_index":9789,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cmo",{"_index":4377,"title":{"33":{}},"name":{"33":{}},"text":{"27":{},"33":{},"34":{}},"component":{},"keyword":{}}],["cmov",{"_index":6872,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cmpp",{"_index":9791,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cmvp",{"_index":1183,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["cnp",{"_index":9576,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["cnsa",{"_index":6962,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["co",{"_index":1991,"title":{},"name":{},"text":{"8":{},"19":{},"26":{},"40":{},"41":{}},"component":{},"keyword":{}}],["coars",{"_index":7511,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["coarser",{"_index":481,"title":{},"name":{},"text":{"4":{},"10":{},"40":{}},"component":{},"keyword":{}}],["code",{"_index":247,"title":{"53":{},"57":{},"8-35":{},"40-16":{},"49-129":{},"52-69":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{},"67":{}},"component":{},"keyword":{}}],["code=2",{"_index":3056,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["code=3",{"_index":7547,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["coder",{"_index":4829,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["codifi",{"_index":2105,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["coeffici",{"_index":9137,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["cofpmf",{"_index":4030,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["coher",{"_index":2324,"title":{"10-46":{},"33-6":{},"40-14":{}},"name":{},"text":{"10":{},"26":{},"33":{},"34":{},"40":{},"41":{},"63":{}},"component":{},"keyword":{}}],["coin",{"_index":1339,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["coincident",{"_index":2144,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["cold",{"_index":2884,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["colin",{"_index":112,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["collabor",{"_index":6861,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["colleagu",{"_index":4782,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["collect",{"_index":1731,"title":{},"name":{},"text":{"8":{},"10":{},"17":{},"19":{},"22":{},"26":{},"27":{},"29":{},"41":{},"45":{},"52":{},"57":{}},"component":{},"keyword":{}}],["collis",{"_index":2403,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["colophon",{"_index":5123,"title":{},"name":{"34":{}},"text":{},"component":{},"keyword":{}}],["column",{"_index":6518,"title":{},"name":{},"text":{"48":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["column’",{"_index":7738,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["combin",{"_index":850,"title":{"29-13":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"15":{},"17":{},"21":{},"26":{},"27":{},"29":{},"38":{},"40":{},"41":{},"44":{},"45":{},"49":{},"51":{},"52":{},"53":{},"62":{}},"component":{},"keyword":{}}],["combinatorica",{"_index":1346,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["come",{"_index":3952,"title":{},"name":{},"text":{"22":{},"23":{},"31":{},"38":{},"40":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["comfort",{"_index":7029,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["command",{"_index":2366,"title":{},"name":{},"text":{"10":{},"41":{}},"component":{},"keyword":{}}],["comment",{"_index":4810,"title":{},"name":{},"text":{"30":{},"57":{},"61":{}},"component":{},"keyword":{}}],["commentari",{"_index":434,"title":{},"name":{},"text":{"4":{},"15":{},"34":{},"38":{},"40":{},"41":{},"45":{}},"component":{},"keyword":{}}],["commerci",{"_index":1196,"title":{},"name":{},"text":{"7":{},"10":{},"31":{},"38":{},"44":{},"45":{}},"component":{},"keyword":{}}],["commit",{"_index":5622,"title":{"41-18":{},"41-20":{},"41-23":{},"41-24":{}},"name":{},"text":{"40":{},"41":{},"51":{},"57":{}},"component":{},"keyword":{}}],["committe",{"_index":4758,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["common",{"_index":23,"title":{"49-74":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"8":{},"10":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"45":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"59":{},"64":{}},"component":{},"keyword":{}}],["commonli",{"_index":1969,"title":{},"name":{},"text":{"8":{},"29":{},"31":{},"40":{},"49":{},"52":{},"55":{}},"component":{},"keyword":{}}],["commun",{"_index":1250,"title":{},"name":{},"text":{"7":{},"10":{},"15":{},"22":{},"28":{},"33":{},"38":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["comp0",{"_index":9702,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["comp1",{"_index":9703,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["compact",{"_index":4245,"title":{},"name":{},"text":{"26":{},"30":{},"51":{}},"component":{},"keyword":{}}],["compact_non_zero",{"_index":8582,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["compact_non_zero(size_t",{"_index":8579,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["compactli",{"_index":9136,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["compani",{"_index":948,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["companion",{"_index":5189,"title":{},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["compar",{"_index":2656,"title":{"55":{},"36-6":{},"37-8":{},"43-4":{},"51-64":{},"51-92":{},"52-29":{},"59-4":{}},"name":{},"text":{"10":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"36":{},"37":{},"40":{},"43":{},"45":{},"47":{},"49":{},"50":{},"51":{},"55":{},"59":{},"61":{}},"component":{},"keyword":{}}],["comparand",{"_index":2829,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["comparison",{"_index":2819,"title":{"58-6":{}},"name":{},"text":{"10":{},"25":{},"26":{},"36":{},"37":{},"45":{},"51":{},"55":{},"58":{},"61":{}},"component":{},"keyword":{}}],["compat",{"_index":204,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"21":{},"22":{},"25":{},"26":{},"27":{},"31":{},"37":{},"38":{},"40":{},"41":{},"42":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"57":{},"60":{},"63":{}},"component":{},"keyword":{}}],["compel",{"_index":3944,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["compet",{"_index":10165,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["compil",{"_index":836,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"28":{},"31":{},"37":{},"38":{},"45":{},"47":{},"49":{},"50":{},"51":{},"53":{},"54":{},"57":{},"61":{},"63":{},"67":{}},"component":{},"keyword":{}}],["complement",{"_index":2071,"title":{},"name":{},"text":{"8":{},"10":{},"38":{},"41":{},"45":{},"49":{},"51":{},"57":{},"58":{}},"component":{},"keyword":{}}],["compler",{"_index":6098,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["complet",{"_index":1608,"title":{"41-13":{},"41-22":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"19":{},"21":{},"26":{},"28":{},"31":{},"38":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"63":{},"65":{},"67":{}},"component":{},"keyword":{}}],["completes/retir",{"_index":3723,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["complex",{"_index":2490,"title":{},"name":{},"text":{"10":{},"19":{},"28":{},"31":{},"34":{},"35":{},"36":{},"40":{},"44":{},"45":{},"49":{},"51":{},"57":{},"61":{},"63":{}},"component":{},"keyword":{}}],["compli",{"_index":3674,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["complianc",{"_index":4789,"title":{},"name":{},"text":{"30":{},"40":{},"49":{}},"component":{},"keyword":{}}],["compliant",{"_index":4760,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"36":{},"37":{},"40":{},"43":{},"49":{},"59":{}},"component":{},"keyword":{}}],["complic",{"_index":2762,"title":{},"name":{},"text":{"10":{},"15":{},"26":{},"28":{},"30":{},"31":{},"37":{},"38":{},"40":{},"45":{},"51":{}},"component":{},"keyword":{}}],["compon",{"_index":2458,"title":{},"name":{},"text":{"10":{},"15":{},"19":{},"29":{},"34":{},"38":{},"40":{},"48":{},"49":{},"56":{}},"component":{},"keyword":{}}],["compos",{"_index":800,"title":{},"name":{},"text":{"7":{},"10":{},"19":{},"49":{},"50":{},"51":{},"61":{}},"component":{},"keyword":{}}],["composit",{"_index":789,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["compress",{"_index":2148,"title":{"31":{},"31-2":{},"49-85":{},"51-128":{},"66-1":{}},"name":{},"text":{"8":{},"10":{},"19":{},"27":{},"28":{},"31":{},"34":{},"38":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{},"64":{}},"component":{},"keyword":{}}],["compris",{"_index":3479,"title":{},"name":{},"text":{"15":{},"22":{},"28":{},"29":{},"33":{},"35":{},"36":{},"41":{},"52":{},"61":{}},"component":{},"keyword":{}}],["compromis",{"_index":3899,"title":{},"name":{},"text":{"21":{},"22":{},"49":{},"51":{}},"component":{},"keyword":{}}],["comput",{"_index":738,"title":{"31-7":{},"36-4":{},"37-6":{},"43-2":{},"45-5":{},"47-2":{},"53-2":{},"59-2":{}},"name":{},"text":{"7":{},"10":{},"18":{},"19":{},"26":{},"28":{},"30":{},"31":{},"33":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"59":{},"60":{}},"component":{},"keyword":{}}],["computation(",{"_index":9657,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["concaten",{"_index":6114,"title":{},"name":{},"text":{"42":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["conceiv",{"_index":2506,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["concept",{"_index":309,"title":{},"name":{},"text":{"4":{},"16":{},"27":{},"31":{},"34":{},"40":{},"51":{},"66":{}},"component":{},"keyword":{}}],["conceptu",{"_index":1963,"title":{},"name":{},"text":{"8":{},"40":{},"49":{}},"component":{},"keyword":{}}],["concern",{"_index":2719,"title":{},"name":{},"text":{"10":{},"11":{},"28":{},"30":{},"31":{},"38":{},"48":{},"49":{},"51":{},"52":{},"53":{},"62":{}},"component":{},"keyword":{}}],["concis",{"_index":6111,"title":{},"name":{},"text":{"42":{},"48":{},"67":{}},"component":{},"keyword":{}}],["conclud",{"_index":6028,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["conclus",{"_index":4971,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["concret",{"_index":3476,"title":{},"name":{},"text":{"15":{},"40":{},"48":{},"62":{}},"component":{},"keyword":{}}],["concurr",{"_index":900,"title":{},"name":{},"text":{"7":{},"26":{},"28":{},"40":{},"41":{},"49":{},"52":{},"55":{}},"component":{},"keyword":{}}],["condens",{"_index":5490,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["condit",{"_index":851,"title":{"61":{},"28-2":{},"28-3":{},"45-11":{},"49-103":{},"53-4":{}},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"22":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"53":{},"54":{},"56":{},"61":{},"62":{},"65":{}},"component":{},"keyword":{}}],["condition",{"_index":2101,"title":{"49-122":{},"49-123":{}},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"49":{},"51":{}},"component":{},"keyword":{}}],["confer",{"_index":753,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{},"keyword":{}}],["confidenti",{"_index":7071,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["config",{"_index":4044,"title":{"25-10":{}},"name":{},"text":{},"component":{},"keyword":{}}],["configur",{"_index":375,"title":{"8-7":{},"10-26":{},"10-27":{},"10-28":{},"18-3":{},"26-16":{},"26-35":{},"51-31":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"23":{},"26":{},"27":{},"35":{},"45":{},"49":{},"50":{},"51":{},"54":{},"57":{}},"component":{},"keyword":{}}],["confirm",{"_index":1826,"title":{},"name":{},"text":{"8":{},"40":{}},"component":{},"keyword":{}}],["conflict",{"_index":2337,"title":{},"name":{},"text":{"10":{},"31":{},"38":{},"57":{}},"component":{},"keyword":{}}],["conform",{"_index":2136,"title":{},"name":{},"text":{"8":{},"22":{},"34":{},"38":{},"40":{},"45":{},"48":{}},"component":{},"keyword":{}}],["confus",{"_index":2958,"title":{},"name":{},"text":{"10":{},"34":{},"40":{},"41":{},"42":{},"49":{},"51":{}},"component":{},"keyword":{}}],["congruenti",{"_index":6919,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["conjunct",{"_index":4034,"title":{},"name":{},"text":{"23":{},"41":{},"47":{},"49":{},"52":{},"56":{},"58":{}},"component":{},"keyword":{}}],["connect",{"_index":2882,"title":{},"name":{},"text":{"10":{},"27":{},"49":{}},"component":{},"keyword":{}}],["consciou",{"_index":6804,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["consecut",{"_index":2236,"title":{},"name":{},"text":{"9":{},"10":{},"26":{},"40":{},"49":{},"51":{}},"component":{},"keyword":{}}],["consequ",{"_index":2050,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"23":{},"26":{},"28":{},"38":{},"41":{},"47":{},"50":{},"51":{},"54":{},"62":{}},"component":{},"keyword":{}}],["conserv",{"_index":1873,"title":{},"name":{},"text":{"8":{},"10":{},"40":{},"45":{},"46":{},"49":{}},"component":{},"keyword":{}}],["consid",{"_index":1532,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"62":{},"63":{}},"component":{},"keyword":{}}],["consider",{"_index":2539,"title":{"49-106":{},"49-111":{}},"name":{},"text":{"10":{},"28":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["consist",{"_index":513,"title":{"48":{},"51-51":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"18":{},"26":{},"27":{},"28":{},"30":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"59":{},"62":{},"63":{},"67":{}},"component":{},"keyword":{}}],["const",{"_index":8570,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["constant",{"_index":216,"title":{"31-8":{},"51-2":{}},"name":{},"text":{"4":{},"10":{},"31":{},"35":{},"38":{},"45":{},"47":{},"49":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["constant[3:0",{"_index":9180,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["constitu",{"_index":4385,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["constitut",{"_index":5449,"title":{},"name":{},"text":{"38":{},"49":{}},"component":{},"keyword":{}}],["constrain",{"_index":342,"title":{"33-16":{}},"name":{},"text":{"4":{},"10":{},"12":{},"28":{},"31":{},"33":{},"38":{},"40":{},"45":{},"49":{},"50":{},"51":{},"52":{},"62":{},"64":{}},"component":{},"keyword":{}}],["constraint",{"_index":218,"title":{"51-35":{},"51-50":{},"52-6":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"28":{},"31":{},"33":{},"34":{},"38":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"62":{}},"component":{},"keyword":{}}],["construct",{"_index":1038,"title":{},"name":{},"text":{"7":{},"28":{},"40":{},"41":{},"45":{},"49":{},"50":{},"52":{},"61":{}},"component":{},"keyword":{}}],["consult",{"_index":4254,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["consum",{"_index":4818,"title":{},"name":{},"text":{"30":{},"33":{},"37":{},"46":{},"49":{},"51":{},"52":{},"56":{},"59":{},"64":{}},"component":{},"keyword":{}}],["consumpt",{"_index":480,"title":{},"name":{},"text":{"4":{},"10":{},"19":{},"22":{},"26":{},"38":{},"45":{},"65":{}},"component":{},"keyword":{}}],["contact",{"_index":135,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["contain",{"_index":157,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"16":{},"17":{},"19":{},"23":{},"25":{},"26":{},"28":{},"29":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{},"54":{},"57":{},"60":{},"61":{},"66":{}},"component":{},"keyword":{}}],["contend",{"_index":9732,"title":{},"name":{},"text":{"56":{},"64":{}},"component":{},"keyword":{}}],["content",{"_index":484,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"13":{},"18":{},"21":{},"26":{},"34":{},"37":{},"38":{},"40":{},"45":{},"49":{},"50":{},"51":{},"54":{},"61":{}},"component":{},"keyword":{}}],["contenti",{"_index":8238,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["contest",{"_index":6600,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["context",{"_index":1868,"title":{"10-14":{},"51-5":{},"51-6":{}},"name":{},"text":{"8":{},"10":{},"12":{},"16":{},"17":{},"19":{},"22":{},"26":{},"28":{},"30":{},"32":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"60":{},"63":{},"65":{},"67":{}},"component":{},"keyword":{}}],["contigu",{"_index":2419,"title":{"26-29":{}},"name":{},"text":{"10":{},"26":{},"28":{},"31":{},"33":{},"51":{}},"component":{},"keyword":{}}],["conting",{"_index":3064,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["continu",{"_index":1559,"title":{"49-114":{},"49-121":{}},"name":{},"text":{"8":{},"10":{},"11":{},"18":{},"19":{},"22":{},"25":{},"28":{},"30":{},"34":{},"38":{},"41":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["contract",{"_index":6782,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["contradict",{"_index":2339,"title":{},"name":{},"text":{"10":{},"40":{}},"component":{},"keyword":{}}],["contradictori",{"_index":473,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["contrari",{"_index":4164,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["contrast",{"_index":2078,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"27":{},"28":{},"38":{},"39":{},"41":{}},"component":{},"keyword":{}}],["contraven",{"_index":3517,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["contribut",{"_index":5590,"title":{},"name":{},"text":{"40":{},"49":{},"51":{},"54":{}},"component":{},"keyword":{}}],["contributor",{"_index":16,"title":{"2-1":{},"5-1":{}},"name":{"2":{},"5":{}},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["contriv",{"_index":2524,"title":{},"name":{},"text":{"10":{},"53":{}},"component":{},"keyword":{}}],["control",{"_index":189,"title":{"11":{},"12":{},"19":{},"50":{},"62":{},"9-5":{},"10-9":{},"10-10":{},"10-12":{},"11-5":{},"19-2":{},"19-3":{},"19-4":{},"19-5":{},"19-6":{},"19-8":{},"19-9":{},"19-10":{},"19-13":{},"23-1":{},"26-3":{},"26-5":{},"26-7":{},"31-6":{},"33-18":{},"37-2":{},"45-9":{},"49-76":{},"49-112":{},"51-17":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"60":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["control+control",{"_index":5721,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["controllers—th",{"_index":4287,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["conveni",{"_index":2937,"title":{},"name":{},"text":{"10":{},"22":{},"31":{},"36":{},"38":{},"41":{},"48":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["convent",{"_index":490,"title":{"32":{},"42":{},"12-1":{},"42-11":{}},"name":{"32":{}},"text":{"4":{},"10":{},"12":{},"15":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"40":{},"42":{},"45":{},"47":{},"50":{},"51":{},"60":{}},"component":{},"keyword":{}}],["convention",{"_index":3100,"title":{},"name":{},"text":{"11":{},"42":{},"45":{},"50":{}},"component":{},"keyword":{}}],["converg",{"_index":8420,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["convers",{"_index":1552,"title":{"36-5":{},"37-7":{},"59-3":{}},"name":{},"text":{"8":{},"11":{},"28":{},"30":{},"34":{},"36":{},"37":{},"43":{},"47":{},"51":{},"58":{},"59":{}},"component":{},"keyword":{}}],["convert",{"_index":2020,"title":{"30-14":{},"30-15":{},"43-3":{},"51-96":{},"51-97":{},"51-98":{},"58-4":{}},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"26":{},"30":{},"36":{},"37":{},"43":{},"45":{},"51":{},"53":{},"58":{},"59":{}},"component":{},"keyword":{}}],["cookbook",{"_index":8916,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["cooper",{"_index":4777,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["coordin",{"_index":4105,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["cop/jop",{"_index":3047,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["cope",{"_index":3409,"title":{},"name":{},"text":{"12":{},"26":{},"38":{}},"component":{},"keyword":{}}],["copi",{"_index":1862,"title":{"52-30":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"21":{},"23":{},"26":{},"27":{},"29":{},"31":{},"33":{},"37":{},"40":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"57":{},"58":{},"59":{},"60":{},"61":{}},"component":{},"keyword":{}}],["coprocessor",{"_index":776,"title":{},"name":{},"text":{"7":{},"10":{},"26":{},"30":{},"38":{},"45":{}},"component":{},"keyword":{}}],["copysign",{"_index":5402,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["core",{"_index":497,"title":{},"name":{},"text":{"4":{},"10":{},"15":{},"19":{},"26":{},"28":{},"30":{},"35":{},"38":{},"39":{},"40":{},"45":{},"46":{},"49":{},"51":{},"52":{},"56":{},"57":{},"65":{}},"component":{},"keyword":{}}],["cores/bas",{"_index":1333,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["corner",{"_index":4787,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["coroutin",{"_index":6445,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["corpor",{"_index":3452,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["corr",{"_index":1449,"title":{},"name":{},"text":{"7":{},"40":{}},"component":{},"keyword":{}}],["correct",{"_index":137,"title":{},"name":{},"text":{"2":{},"5":{},"11":{},"19":{},"26":{},"27":{},"30":{},"34":{},"35":{},"40":{},"45":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["correctli",{"_index":1871,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"28":{},"36":{},"40":{},"45":{},"47":{},"49":{},"50":{},"51":{},"66":{},"67":{}},"component":{},"keyword":{}}],["corrector",{"_index":7034,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["correl",{"_index":1341,"title":{},"name":{},"text":{"7":{},"8":{},"49":{}},"component":{},"keyword":{}}],["correspond",{"_index":597,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"16":{},"17":{},"19":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"58":{},"62":{},"66":{}},"component":{},"keyword":{}}],["correspondingli",{"_index":3957,"title":{},"name":{},"text":{"22":{},"23":{},"38":{}},"component":{},"keyword":{}}],["corrupt",{"_index":2749,"title":{},"name":{},"text":{"10":{},"19":{},"50":{}},"component":{},"keyword":{}}],["corswapinh",{"_index":3651,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cost",{"_index":2390,"title":{},"name":{},"text":{"10":{},"15":{},"26":{},"31":{},"36":{},"37":{},"38":{},"39":{},"40":{},"45":{},"50":{},"51":{},"52":{},"60":{},"61":{}},"component":{},"keyword":{}}],["costli",{"_index":1972,"title":{},"name":{},"text":{"8":{},"51":{}},"component":{},"keyword":{}}],["couldn’t",{"_index":3909,"title":{},"name":{},"text":{"21":{},"35":{}},"component":{},"keyword":{}}],["coulter",{"_index":66,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["count",{"_index":255,"title":{"23":{},"19-19":{},"23-1":{},"23-2":{},"29-8":{},"29-9":{},"51-109":{}},"name":{},"text":{"4":{},"10":{},"12":{},"17":{},"18":{},"19":{},"23":{},"26":{},"29":{},"31":{},"34":{},"35":{},"37":{},"45":{},"46":{},"49":{},"51":{},"52":{},"53":{},"55":{}},"component":{},"keyword":{}}],["count/instruct",{"_index":5233,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["counter",{"_index":476,"title":{"17":{},"35":{},"8-8":{},"8-17":{},"10-20":{},"10-21":{},"10-23":{},"17-1":{},"17-2":{},"17-4":{},"18-3":{},"18-4":{},"25-5":{},"25-9":{},"26-10":{},"26-11":{},"26-13":{},"35-1":{},"35-2":{}},"name":{"35":{}},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"16":{},"17":{},"18":{},"19":{},"22":{},"23":{},"26":{},"28":{},"31":{},"34":{},"35":{},"44":{},"45":{},"49":{},"52":{},"53":{},"55":{},"62":{}},"component":{},"keyword":{}}],["counter(",{"_index":3530,"title":{},"name":{},"text":{"17":{},"18":{},"23":{}},"component":{},"keyword":{}}],["counter/tim",{"_index":3226,"title":{},"name":{},"text":{"12":{},"34":{}},"component":{},"keyword":{}}],["counteren",{"_index":3954,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["counterintuit",{"_index":5368,"title":{},"name":{},"text":{"37":{},"40":{},"51":{}},"component":{},"keyword":{}}],["countermeasur",{"_index":6603,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["counterpart",{"_index":5039,"title":{},"name":{},"text":{"31":{},"36":{},"43":{},"58":{},"59":{}},"component":{},"keyword":{}}],["countri",{"_index":6613,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["coupl",{"_index":4841,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["cours",{"_index":1932,"title":{},"name":{},"text":{"8":{},"21":{},"26":{},"40":{},"49":{},"51":{}},"component":{},"keyword":{}}],["cover",{"_index":537,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"15":{},"19":{},"21":{},"22":{},"26":{},"27":{},"31":{},"35":{},"38":{},"40":{},"41":{},"45":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["covert",{"_index":1245,"title":{},"name":{},"text":{"7":{},"22":{},"49":{}},"component":{},"keyword":{}}],["cow",{"_index":3089,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["co|rfe|fr|ppo",{"_index":6003,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["co|rf|fr|po",{"_index":6002,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["cp",{"_index":9570,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["cpi",{"_index":5234,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["cpop",{"_index":4502,"title":{"29-36":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["cpopw",{"_index":4503,"title":{"29-37":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["cpu",{"_index":2328,"title":{},"name":{},"text":{"10":{},"18":{},"19":{},"27":{},"30":{},"45":{},"49":{},"57":{}},"component":{},"keyword":{}}],["cr",{"_index":4913,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["crack",{"_index":6790,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["crash",{"_index":1379,"title":{},"name":{},"text":{"7":{},"50":{}},"component":{},"keyword":{}}],["cray",{"_index":4884,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["crc",{"_index":4591,"title":{},"name":{},"text":{"29":{},"52":{}},"component":{},"keyword":{}}],["creat",{"_index":2206,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"26":{},"30":{},"36":{},"41":{},"49":{},"50":{},"52":{},"53":{},"57":{},"62":{},"65":{}},"component":{},"keyword":{}}],["creation",{"_index":2290,"title":{},"name":{},"text":{"9":{},"23":{},"26":{},"38":{},"49":{}},"component":{},"keyword":{}}],["creativ",{"_index":22,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"34":{}},"component":{},"keyword":{}}],["criteria",{"_index":1044,"title":{"49-74":{}},"name":{},"text":{"7":{},"19":{},"49":{}},"component":{},"keyword":{}}],["critic",{"_index":2448,"title":{},"name":{},"text":{"10":{},"11":{},"17":{},"20":{},"24":{},"26":{},"28":{},"29":{},"37":{},"40":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["croatia",{"_index":1420,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["croatia.cs.ru.nl/2016/slides/peterschwabe.pdf",{"_index":6831,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cross",{"_index":2815,"title":{},"name":{},"text":{"10":{},"49":{},"51":{}},"component":{},"keyword":{}}],["crossbar",{"_index":4486,"title":{"29-19":{},"49-9":{},"49-98":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["crucial",{"_index":4293,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["cryptanalysi",{"_index":6921,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cryptanalyt",{"_index":6915,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["crypto",{"_index":1208,"title":{"52-67":{}},"name":{"49":{},"52":{}},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["crypto/documents/cal",{"_index":1053,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cryptograph",{"_index":1063,"title":{"49-103":{},"49-122":{},"49-123":{},"52-67":{}},"name":{},"text":{"7":{},"12":{},"29":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["cryptographi",{"_index":1047,"title":{"49":{},"52":{},"29-17":{},"29-18":{},"49-7":{},"49-18":{},"49-86":{},"49-92":{},"49-126":{},"52-12":{}},"name":{},"text":{"7":{},"29":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["cryptolog",{"_index":1144,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["cryptosystem",{"_index":6979,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["crystal",{"_index":2806,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["cs",{"_index":4919,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["csb",{"_index":9781,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["csh",{"_index":9784,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["csr",{"_index":231,"title":{"9":{},"12":{},"62":{},"8-2":{},"8-24":{},"9-2":{},"9-3":{},"9-4":{},"9-5":{},"10-1":{},"10-49":{},"11-5":{},"12-1":{},"12-2":{},"12-3":{},"12-7":{},"12-8":{},"12-9":{},"12-10":{},"16-3":{},"18-2":{},"19-1":{},"26-1":{},"48-9":{},"49-71":{},"49-107":{},"57-50":{},"62-1":{},"62-2":{}},"name":{"9":{},"12":{}},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"57":{},"62":{},"66":{}},"component":{},"keyword":{}}],["csr\"",{"_index":2093,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["csr[11:0",{"_index":3110,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["csr[11:10",{"_index":3113,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["csr[11:8",{"_index":3112,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["csr[9:8",{"_index":3115,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["csrind",{"_index":3966,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["csrinst",{"_index":6420,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["csrr",{"_index":2672,"title":{},"name":{},"text":{"10":{},"35":{},"40":{},"44":{},"48":{},"51":{},"53":{},"62":{}},"component":{},"keyword":{}}],["csrrc",{"_index":2673,"title":{},"name":{},"text":{"10":{},"44":{},"48":{},"62":{}},"component":{},"keyword":{}}],["csrrc/csrrsi/csrrci",{"_index":5225,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["csrrc[i",{"_index":10171,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["csrrci",{"_index":6247,"title":{},"name":{},"text":{"44":{},"48":{},"62":{}},"component":{},"keyword":{}}],["csrrs/csrrc",{"_index":6736,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{},"keyword":{}}],["csrrs[i",{"_index":10170,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["csrrsi",{"_index":6246,"title":{},"name":{},"text":{"44":{},"48":{},"62":{}},"component":{},"keyword":{}}],["csrrsi/csrrci",{"_index":6737,"title":{},"name":{},"text":{"49":{},"62":{}},"component":{},"keyword":{}}],["csrrw",{"_index":2678,"title":{},"name":{},"text":{"10":{},"26":{},"44":{},"48":{},"49":{},"50":{},"62":{}},"component":{},"keyword":{}}],["csrrw[i",{"_index":10169,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["csrrwi",{"_index":6245,"title":{},"name":{},"text":{"44":{},"48":{},"62":{}},"component":{},"keyword":{}}],["csrs/csrc",{"_index":10176,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["csrsi/csrci",{"_index":10177,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["csrw",{"_index":10175,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["csrwi",{"_index":7698,"title":{},"name":{},"text":{"51":{},"62":{}},"component":{},"keyword":{}}],["csr’",{"_index":2096,"title":{},"name":{},"text":{"8":{},"9":{},"12":{}},"component":{},"keyword":{}}],["css",{"_index":4915,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["cstride",{"_index":9572,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ctgrind",{"_index":6833,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ctr",{"_index":3614,"title":{"19-12":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctr_drbg",{"_index":6727,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ctrcyclecount",{"_index":3768,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrdata",{"_index":3613,"title":{"19-10":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrdata.ccv=0",{"_index":3712,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrdata.typ",{"_index":3709,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrl",{"_index":5576,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["ctrldep",{"_index":5830,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ctrldep.*po",{"_index":5897,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ctrsourc",{"_index":3610,"title":{"19-8":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrsource.pc",{"_index":3726,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrsource.v",{"_index":3688,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrsource.v=0",{"_index":3795,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrtarget",{"_index":3611,"title":{"19-9":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctrtarget.pc",{"_index":3727,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ctz",{"_index":4504,"title":{"29-38":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["ctz/clz",{"_index":4700,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["ctzw",{"_index":4505,"title":{"29-39":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["cu",{"_index":9785,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["cumul",{"_index":5666,"title":{},"name":{},"text":{"40":{},"65":{}},"component":{},"keyword":{}}],["cur_ssp",{"_index":7566,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["current",{"_index":353,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"63":{}},"component":{},"keyword":{}}],["currentroundkey[0",{"_index":9067,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["currentroundkey[1",{"_index":9069,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["currentroundkey[2",{"_index":9071,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["currentroundkey[3",{"_index":9073,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["currentroundkey[3:0",{"_index":9064,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["curv",{"_index":8945,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["custom",{"_index":278,"title":{"10-35":{},"19-22":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"19":{},"22":{},"23":{},"26":{},"31":{},"34":{},"38":{},"44":{},"45":{},"46":{},"47":{},"49":{},"51":{},"62":{}},"component":{},"keyword":{}}],["custom[3:0",{"_index":3655,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["cutoff",{"_index":7022,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cve",{"_index":6780,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["cy",{"_index":1798,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["cyck",{"_index":3580,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["cycl",{"_index":1802,"title":{"18":{},"19-19":{}},"name":{},"text":{"8":{},"10":{},"12":{},"18":{},"19":{},"26":{},"35":{},"40":{},"44":{},"49":{},"62":{}},"component":{},"keyword":{}}],["cycle1",{"_index":3543,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["cyclecfg",{"_index":3564,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["cyclecfg14",{"_index":3545,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["cyclecfgh14",{"_index":3546,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["cycleh",{"_index":2088,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"44":{}},"component":{},"keyword":{}}],["cycleh1",{"_index":3544,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["cycles/second",{"_index":5230,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["cyclic",{"_index":5607,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["czero.eqz",{"_index":10161,"title":{"61-4":{}},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["czero.nez",{"_index":10162,"title":{"61-5":{}},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["d",{"_index":410,"title":{"36":{},"36-1":{}},"name":{"36":{}},"text":{"4":{},"7":{},"8":{},"10":{},"15":{},"26":{},"28":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"40":{},"42":{},"43":{},"48":{},"49":{},"51":{},"52":{},"57":{},"58":{},"59":{},"60":{},"63":{},"64":{}},"component":{},"keyword":{}}],["d\"=1",{"_index":2368,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["d)rbg",{"_index":6926,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["d66e",{"_index":9880,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["d86a",{"_index":9877,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["da66",{"_index":9873,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["dabbelt",{"_index":68,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["daesung",{"_index":1158,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dalrympl",{"_index":70,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["damag",{"_index":6987,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["dan",{"_index":1071,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["danger",{"_index":3911,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["daniel",{"_index":91,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["darpa",{"_index":3443,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["data",{"_index":376,"title":{"49-19":{},"49-77":{},"52-24":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"16":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"59":{},"61":{},"63":{},"64":{}},"component":{},"keyword":{}}],["databas",{"_index":1404,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["datadep",{"_index":5829,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["datapath",{"_index":2754,"title":{},"name":{},"text":{"10":{},"34":{},"36":{},"51":{}},"component":{},"keyword":{}}],["dataset",{"_index":6893,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["datatyp",{"_index":5300,"title":{},"name":{},"text":{"36":{},"45":{},"51":{},"53":{}},"component":{},"keyword":{}}],["datawidth",{"_index":7739,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["date",{"_index":543,"title":{},"name":{},"text":{"4":{},"10":{},"34":{},"40":{},"46":{}},"component":{},"keyword":{}}],["datum",{"_index":2637,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["david",{"_index":40,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["dc",{"_index":841,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dc62",{"_index":9869,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["dcsr",{"_index":3060,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{},"keyword":{}}],["ddata",{"_index":6520,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["ddec",{"_index":1304,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["de",{"_index":3440,"title":{},"name":{},"text":{"13":{},"49":{}},"component":{},"keyword":{}}],["de5e",{"_index":9865,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["deactiv",{"_index":7535,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["dead",{"_index":6732,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["deadlin",{"_index":9737,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["dealloc",{"_index":5089,"title":{},"name":{},"text":{"33":{},"57":{}},"component":{},"keyword":{}}],["dealt",{"_index":6599,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["death",{"_index":6970,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["debat",{"_index":4416,"title":{},"name":{},"text":{"28":{},"40":{}},"component":{},"keyword":{}}],["debias",{"_index":6910,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["debug",{"_index":594,"title":{"15-3":{},"33-14":{}},"name":{},"text":{"4":{},"10":{},"11":{},"12":{},"15":{},"19":{},"20":{},"21":{},"27":{},"31":{},"33":{},"36":{},"45":{},"51":{}},"component":{},"keyword":{}}],["debug/trac",{"_index":3262,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["debugg",{"_index":2841,"title":{},"name":{},"text":{"10":{},"31":{},"45":{},"51":{}},"component":{},"keyword":{}}],["dec",{"_index":1054,"title":{},"name":{},"text":{"7":{},"29":{}},"component":{},"keyword":{}}],["decad",{"_index":5458,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["decay",{"_index":7060,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["decemb",{"_index":608,"title":{},"name":{},"text":{"5":{},"7":{},"34":{}},"component":{},"keyword":{}}],["decid",{"_index":3907,"title":{},"name":{},"text":{"21":{},"30":{},"31":{},"38":{},"40":{},"51":{},"64":{}},"component":{},"keyword":{}}],["decim",{"_index":6137,"title":{},"name":{},"text":{"42":{},"58":{}},"component":{},"keyword":{}}],["decis",{"_index":3461,"title":{},"name":{},"text":{"15":{},"26":{},"27":{},"37":{},"38":{},"45":{},"51":{},"64":{}},"component":{},"keyword":{}}],["declar",{"_index":6814,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["decod",{"_index":2123,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"19":{},"31":{},"37":{},"38":{},"41":{},"45":{},"49":{},"57":{},"61":{},"66":{}},"component":{},"keyword":{}}],["decompos",{"_index":3037,"title":{},"name":{},"text":{"10":{},"26":{},"41":{},"48":{}},"component":{},"keyword":{}}],["decomposit",{"_index":6513,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["decompress",{"_index":4924,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["decoupl",{"_index":2542,"title":{},"name":{},"text":{"10":{},"26":{},"31":{},"33":{},"37":{},"38":{},"40":{},"51":{}},"component":{},"keyword":{}}],["decreas",{"_index":1716,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"51":{},"53":{}},"component":{},"keyword":{}}],["decrement",{"_index":3678,"title":{},"name":{},"text":{"19":{},"50":{},"51":{},"53":{},"57":{}},"component":{},"keyword":{}}],["decrypt",{"_index":6526,"title":{"49-10":{}},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["dedic",{"_index":2727,"title":{},"name":{},"text":{"10":{},"26":{},"35":{},"45":{},"46":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["deem",{"_index":544,"title":{},"name":{},"text":{"4":{},"22":{},"51":{}},"component":{},"keyword":{}}],["deep",{"_index":3622,"title":{},"name":{},"text":{"19":{},"35":{}},"component":{},"keyword":{}}],["deepli",{"_index":4349,"title":{},"name":{},"text":{"27":{},"40":{}},"component":{},"keyword":{}}],["def",{"_index":6147,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["default",{"_index":1657,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"18":{},"19":{},"21":{},"26":{},"27":{},"30":{},"37":{},"38":{},"39":{},"40":{},"42":{},"49":{},"51":{},"57":{},"62":{},"67":{}},"component":{},"keyword":{}}],["defeat",{"_index":5750,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["defend",{"_index":3043,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["defer",{"_index":4278,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["defin",{"_index":221,"title":{"31-11":{},"51-2":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["definit",{"_index":1770,"title":{"27-3":{},"48-1":{},"51-30":{}},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["defs.cat",{"_index":5924,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["degrad",{"_index":10203,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["degre",{"_index":8676,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["deinterleav",{"_index":4564,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["delay",{"_index":5452,"title":{},"name":{},"text":{"38":{},"45":{},"49":{},"50":{},"65":{}},"component":{},"keyword":{}}],["deleg",{"_index":397,"title":{"17":{},"8-4":{},"8-26":{},"10-17":{},"17-1":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"17":{},"19":{},"23":{},"25":{},"49":{}},"component":{},"keyword":{}}],["delegat",{"_index":2638,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["deliber",{"_index":4066,"title":{},"name":{},"text":{"26":{},"65":{},"66":{}},"component":{},"keyword":{}}],["deliv",{"_index":2470,"title":{},"name":{},"text":{"10":{},"11":{},"17":{},"25":{},"26":{},"27":{},"40":{}},"component":{},"keyword":{}}],["deliveri",{"_index":2662,"title":{},"name":{},"text":{"10":{},"11":{},"27":{}},"component":{},"keyword":{}}],["delta",{"_index":598,"title":{"8-9":{}},"name":{},"text":{"4":{},"8":{},"12":{},"23":{},"35":{},"67":{}},"component":{},"keyword":{}}],["delta(",{"_index":3582,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["demand",{"_index":2974,"title":{"49-113":{}},"name":{},"text":{"10":{},"38":{},"49":{},"51":{}},"component":{},"keyword":{}}],["demonstr",{"_index":4701,"title":{},"name":{},"text":{"29":{},"53":{}},"component":{},"keyword":{}}],["deni",{"_index":2990,"title":{},"name":{},"text":{"10":{},"21":{},"49":{},"50":{}},"component":{},"keyword":{}}],["denni",{"_index":75,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["denomin",{"_index":8281,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["denorm",{"_index":8431,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["denot",{"_index":1520,"title":{},"name":{},"text":{"8":{},"38":{},"49":{},"51":{}},"component":{},"keyword":{}}],["dens",{"_index":2976,"title":{},"name":{},"text":{"10":{},"38":{},"45":{}},"component":{},"keyword":{}}],["denser",{"_index":4878,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["densiti",{"_index":4866,"title":{},"name":{},"text":{"31":{},"38":{}},"component":{},"keyword":{}}],["dep",{"_index":5896,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["depart",{"_index":718,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["depend",{"_index":1229,"title":{"40-11":{},"40-12":{},"48-3":{},"48-9":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"17":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["depict",{"_index":2033,"title":{},"name":{},"text":{"8":{},"51":{}},"component":{},"keyword":{}}],["deplet",{"_index":6769,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["deprec",{"_index":5463,"title":{},"name":{},"text":{"38":{},"51":{}},"component":{},"keyword":{}}],["depth",{"_index":3607,"title":{"19-5":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["depth=1",{"_index":9662,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["derek",{"_index":610,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["deriv",{"_index":28,"title":{},"name":{},"text":{"2":{},"5":{},"27":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["descend",{"_index":6459,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["describ",{"_index":144,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"17":{},"19":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"58":{},"59":{},"64":{}},"component":{},"keyword":{}}],["descript",{"_index":433,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"18":{},"19":{},"23":{},"25":{},"26":{},"27":{},"29":{},"30":{},"33":{},"34":{},"38":{},"41":{},"44":{},"45":{},"49":{},"51":{},"52":{},"57":{},"61":{}},"component":{},"keyword":{}}],["design",{"_index":390,"title":{"49-100":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"19":{},"26":{},"27":{},"28":{},"30":{},"31":{},"34":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"60":{},"61":{},"63":{},"66":{}},"component":{},"keyword":{}}],["designer’",{"_index":1236,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["desir",{"_index":2726,"title":{},"name":{},"text":{"10":{},"12":{},"19":{},"23":{},"27":{},"28":{},"30":{},"31":{},"33":{},"36":{},"38":{},"40":{},"45":{},"49":{},"51":{},"61":{},"66":{}},"component":{},"keyword":{}}],["despit",{"_index":2544,"title":{},"name":{},"text":{"10":{},"19":{},"30":{},"38":{},"49":{}},"component":{},"keyword":{}}],["dest",{"_index":5694,"title":{},"name":{},"text":{"40":{},"51":{},"53":{}},"component":{},"keyword":{}}],["destin",{"_index":1715,"title":{"48-10":{}},"name":{},"text":{"8":{},"10":{},"19":{},"26":{},"28":{},"29":{},"30":{},"31":{},"34":{},"36":{},"37":{},"39":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"61":{},"62":{}},"component":{},"keyword":{}}],["destroy",{"_index":2598,"title":{},"name":{},"text":{"10":{},"57":{}},"component":{},"keyword":{}}],["destruct",{"_index":5009,"title":{},"name":{},"text":{"31":{},"38":{},"49":{},"51":{}},"component":{},"keyword":{}}],["detail",{"_index":1751,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"17":{},"19":{},"20":{},"24":{},"26":{},"27":{},"33":{},"35":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["detect",{"_index":1517,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"26":{},"28":{},"29":{},"30":{},"31":{},"37":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["detector",{"_index":7070,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["determin",{"_index":1744,"title":{"27-6":{},"51-145":{},"51-146":{}},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"18":{},"19":{},"21":{},"23":{},"26":{},"27":{},"28":{},"33":{},"35":{},"38":{},"40":{},"41":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"62":{}},"component":{},"keyword":{}}],["determinist",{"_index":1032,"title":{"49-105":{}},"name":{},"text":{"7":{},"10":{},"12":{},"26":{},"49":{},"51":{}},"component":{},"keyword":{}}],["deutsch",{"_index":627,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["dev",{"_index":1277,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["devast",{"_index":6977,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["develop",{"_index":871,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"13":{},"21":{},"30":{},"31":{},"34":{},"38":{},"44":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["deviat",{"_index":2103,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["devic",{"_index":589,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"15":{},"16":{},"26":{},"27":{},"28":{},"33":{},"38":{},"40":{},"45":{},"49":{},"51":{},"56":{},"62":{}},"component":{},"keyword":{}}],["devil’",{"_index":1308,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["di",{"_index":9268,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["diagnos",{"_index":5223,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["diagnosi",{"_index":2872,"title":{},"name":{},"text":{"10":{},"20":{}},"component":{},"keyword":{}}],["diagnost",{"_index":1302,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["diagram",{"_index":5572,"title":{},"name":{},"text":{"40":{},"49":{},"51":{}},"component":{},"keyword":{}}],["dichtl",{"_index":7035,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["dictat",{"_index":3668,"title":{},"name":{},"text":{"19":{},"26":{},"38":{}},"component":{},"keyword":{}}],["dictionari",{"_index":10037,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["didn’t",{"_index":5486,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["diel",{"_index":8953,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["differ",{"_index":1586,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"17":{},"18":{},"19":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"62":{},"63":{}},"component":{},"keyword":{}}],["differenti",{"_index":3414,"title":{},"name":{},"text":{"12":{},"26":{},"49":{},"52":{}},"component":{},"keyword":{}}],["differential/feedback",{"_index":7008,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["difficult",{"_index":2326,"title":{},"name":{},"text":{"10":{},"35":{},"38":{},"40":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["difficulti",{"_index":7525,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["dig07",{"_index":3431,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["digit",{"_index":1293,"title":{},"name":{},"text":{"7":{},"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["dimens",{"_index":7800,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["diminish",{"_index":10154,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["diod",{"_index":7017,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["dircallinh",{"_index":3647,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["direct",{"_index":1707,"title":{"49-111":{}},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"17":{},"19":{},"26":{},"30":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{},"57":{},"61":{},"67":{}},"component":{},"keyword":{}}],["directli",{"_index":1548,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"17":{},"19":{},"21":{},"25":{},"26":{},"29":{},"33":{},"35":{},"37":{},"38":{},"40":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["dirjmpinh",{"_index":3650,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["dirljmpinh",{"_index":3654,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["dirti",{"_index":569,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"33":{},"37":{},"51":{}},"component":{},"keyword":{}}],["disabl",{"_index":1512,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"16":{},"19":{},"21":{},"23":{},"26":{},"27":{},"49":{},"51":{},"56":{}},"component":{},"keyword":{}}],["disable/en",{"_index":2609,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["disadvantag",{"_index":4427,"title":{},"name":{},"text":{"28":{},"38":{}},"component":{},"keyword":{}}],["disallow",{"_index":2602,"title":{},"name":{},"text":{"10":{},"21":{},"28":{},"31":{},"40":{},"45":{}},"component":{},"keyword":{}}],["disambigu",{"_index":1818,"title":{},"name":{},"text":{"8":{},"22":{},"27":{},"42":{}},"component":{},"keyword":{}}],["disassembl",{"_index":2543,"title":{},"name":{},"text":{"10":{},"38":{},"45":{}},"component":{},"keyword":{}}],["discard",{"_index":2384,"title":{},"name":{},"text":{"10":{},"12":{},"27":{},"28":{},"40":{},"41":{},"45":{},"51":{},"55":{}},"component":{},"keyword":{}}],["discern",{"_index":3080,"title":{},"name":{},"text":{"11":{},"51":{}},"component":{},"keyword":{}}],["disciplin",{"_index":507,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["disconnect",{"_index":5495,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["discourag",{"_index":2960,"title":{},"name":{},"text":{"10":{},"26":{},"40":{},"48":{},"49":{},"51":{},"64":{}},"component":{},"keyword":{}}],["discov",{"_index":2138,"title":{},"name":{},"text":{"8":{},"10":{},"33":{},"49":{}},"component":{},"keyword":{}}],["discover",{"_index":4259,"title":{},"name":{},"text":{"26":{},"60":{}},"component":{},"keyword":{}}],["discoveri",{"_index":2901,"title":{"21-6":{},"33-17":{}},"name":{},"text":{"10":{},"13":{},"30":{},"33":{},"49":{},"52":{},"57":{}},"component":{},"keyword":{}}],["discrep",{"_index":5549,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["discret",{"_index":1386,"title":{},"name":{},"text":{"7":{},"10":{},"49":{}},"component":{},"keyword":{}}],["discuss",{"_index":2072,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"28":{},"33":{},"40":{},"44":{},"49":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["disj",{"_index":5916,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["disjoint",{"_index":2402,"title":{},"name":{},"text":{"10":{},"38":{},"40":{},"51":{}},"component":{},"keyword":{}}],["dispatch",{"_index":7740,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["displac",{"_index":3813,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["disrupt",{"_index":4247,"title":{},"name":{},"text":{"26":{},"51":{}},"component":{},"keyword":{}}],["distil",{"_index":7028,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["distinct",{"_index":556,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"21":{},"38":{},"40":{},"41":{},"49":{},"62":{}},"component":{},"keyword":{}}],["distinguish",{"_index":1732,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"23":{},"26":{},"33":{},"40":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["distribut",{"_index":915,"title":{},"name":{},"text":{"7":{},"49":{},"51":{}},"component":{},"keyword":{}}],["disturb",{"_index":5407,"title":{},"name":{},"text":{"37":{},"51":{}},"component":{},"keyword":{}}],["div",{"_index":5522,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["div[u",{"_index":5528,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["div[u]w",{"_index":5536,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["div[w",{"_index":5541,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["diverg",{"_index":6909,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["divers",{"_index":6596,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["divert",{"_index":7502,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["divid",{"_index":2895,"title":{"51-67":{}},"name":{},"text":{"10":{},"12":{},"26":{},"28":{},"34":{},"35":{},"37":{},"38":{},"39":{},"42":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["dividend",{"_index":5526,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["divis",{"_index":2354,"title":{"39":{},"39-2":{},"53-7":{}},"name":{},"text":{"10":{},"30":{},"37":{},"38":{},"39":{},"42":{},"45":{},"49":{},"59":{}},"component":{},"keyword":{}}],["divisor",{"_index":5538,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["divu",{"_index":5523,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["divu[w",{"_index":5539,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["divuw",{"_index":5533,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["divw",{"_index":5532,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["diy",{"_index":5921,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["dlopen",{"_index":7534,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["dma",{"_index":2903,"title":{},"name":{},"text":{"10":{},"27":{},"40":{}},"component":{},"keyword":{}}],["dma_rmb",{"_index":5733,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["dma_wmb",{"_index":5734,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["dmb",{"_index":5724,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["dmb.ld",{"_index":5725,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["dmb.st",{"_index":5726,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["dmitri",{"_index":106,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["do",{"_index":1695,"title":{},"name":{},"text":{"8":{},"26":{},"27":{},"49":{}},"component":{},"keyword":{}}],["doc",{"_index":711,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["doc/supp",{"_index":7089,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["dockser",{"_index":629,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["document",{"_index":19,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"15":{},"27":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"41":{},"42":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["doe",{"_index":3439,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["doesn't",{"_index":4446,"title":{},"name":{},"text":{"28":{},"57":{}},"component":{},"keyword":{}}],["doesn’t",{"_index":3877,"title":{},"name":{},"text":{"21":{},"22":{},"52":{},"57":{}},"component":{},"keyword":{}}],["domain",{"_index":2811,"title":{},"name":{},"text":{"10":{},"15":{},"26":{},"28":{},"29":{},"30":{},"37":{},"38":{},"41":{},"44":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["domin",{"_index":5498,"title":{},"name":{},"text":{"38":{},"45":{}},"component":{},"keyword":{}}],["don't",{"_index":4731,"title":{},"name":{},"text":{"29":{},"41":{},"53":{}},"component":{},"keyword":{}}],["donahu",{"_index":72,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["done",{"_index":1674,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"23":{},"36":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"62":{}},"component":{},"keyword":{}}],["dongdai",{"_index":1106,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["don’t",{"_index":3853,"title":{},"name":{},"text":{"21":{},"26":{},"35":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["dot",{"_index":4540,"title":{},"name":{},"text":{"29":{},"30":{}},"component":{},"keyword":{}}],["doubl",{"_index":928,"title":{"20":{},"24":{},"36":{},"10-9":{},"26-7":{},"36-3":{},"36-4":{},"36-5":{},"36-6":{},"36-7":{}},"name":{},"text":{"7":{},"8":{},"10":{},"16":{},"20":{},"22":{},"24":{},"26":{},"28":{},"31":{},"36":{},"37":{},"38":{},"40":{},"42":{},"43":{},"51":{},"52":{},"55":{},"57":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["doubleword",{"_index":4417,"title":{},"name":{},"text":{"28":{},"29":{},"38":{},"50":{},"51":{},"54":{},"55":{}},"component":{},"keyword":{}}],["down",{"_index":2414,"title":{},"name":{},"text":{"10":{},"19":{},"21":{},"25":{},"28":{},"30":{},"35":{},"37":{},"48":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["download",{"_index":11,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["downward",{"_index":7531,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["dpa",{"_index":6618,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["dpc",{"_index":3404,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["draft",{"_index":156,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"11":{},"34":{},"46":{},"51":{}},"component":{},"keyword":{}}],["drain",{"_index":5605,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["dramat",{"_index":3626,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["draw",{"_index":6967,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["drawback",{"_index":4966,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["drawn",{"_index":5573,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["drbg",{"_index":6574,"title":{"49-105":{},"49-124":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["drive",{"_index":6464,"title":{},"name":{},"text":{"45":{},"63":{}},"component":{},"keyword":{}}],["driven",{"_index":5429,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["driver",{"_index":2911,"title":{},"name":{},"text":{"10":{},"17":{},"26":{},"45":{},"49":{}},"component":{},"keyword":{}}],["drng",{"_index":1356,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["drop",{"_index":5197,"title":{},"name":{},"text":{"34":{},"51":{}},"component":{},"keyword":{}}],["drutarovsk'i",{"_index":1280,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["drw",{"_index":3403,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["dscratch0",{"_index":3405,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["dscratch1",{"_index":3406,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["dss",{"_index":1424,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dst",{"_index":8569,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["dst_reg",{"_index":6064,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["dte",{"_index":1795,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["dual",{"_index":824,"title":{},"name":{},"text":{"7":{},"21":{},"22":{}},"component":{},"keyword":{}}],["due",{"_index":1815,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"19":{},"22":{},"23":{},"26":{},"27":{},"31":{},"33":{},"35":{},"38":{},"40":{},"45":{},"49":{},"51":{},"53":{},"54":{},"57":{},"61":{},"62":{}},"component":{},"keyword":{}}],["dummi",{"_index":2848,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["duplic",{"_index":1539,"title":{},"name":{},"text":{"8":{},"10":{},"27":{}},"component":{},"keyword":{}}],["durat",{"_index":5079,"title":{},"name":{},"text":{"32":{},"50":{},"56":{},"65":{}},"component":{},"keyword":{}}],["durbin",{"_index":631,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["dure",{"_index":1768,"title":{},"name":{},"text":{"8":{},"10":{},"17":{},"20":{},"21":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"38":{},"40":{},"49":{},"51":{},"53":{},"57":{},"61":{}},"component":{},"keyword":{}}],["dw",{"_index":4425,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["dworkin",{"_index":1085,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["dyn",{"_index":4827,"title":{},"name":{},"text":{"30":{},"37":{}},"component":{},"keyword":{}}],["dynam",{"_index":832,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"26":{},"27":{},"28":{},"30":{},"31":{},"35":{},"36":{},"37":{},"38":{},"40":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["dz",{"_index":5340,"title":{},"name":{},"text":{"37":{},"48":{},"51":{},"53":{}},"component":{},"keyword":{}}],["e",{"_index":957,"title":{},"name":{},"text":{"7":{},"10":{},"19":{},"40":{},"41":{},"42":{},"51":{},"52":{}},"component":{},"keyword":{}}],["e.*~po.~start",{"_index":5890,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["e.^po",{"_index":5884,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["e.^~po",{"_index":5883,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["e.address.~address",{"_index":5886,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["e.g",{"_index":2188,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"18":{},"19":{},"21":{},"26":{},"27":{},"28":{},"31":{},"33":{},"35":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"60":{},"61":{},"62":{},"64":{}},"component":{},"keyword":{}}],["e.g.cycl",{"_index":2090,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["e1",{"_index":9306,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["e16",{"_index":7786,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["e2",{"_index":9314,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["e32",{"_index":7684,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["e64",{"_index":7787,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["e64,m4,ta,mu",{"_index":9682,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["e64,m8,ta,mu",{"_index":9669,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["e8",{"_index":7785,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["e8,m1,ta,mu",{"_index":9665,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["e8,mf2,ta,mu",{"_index":9681,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["eabi",{"_index":9983,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["each",{"_index":459,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"18":{},"19":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["eager",{"_index":6094,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["eagerli",{"_index":4146,"title":{},"name":{},"text":{"26":{},"41":{}},"component":{},"keyword":{}}],["earli",{"_index":2104,"title":{"41-14":{}},"name":{},"text":{"8":{},"10":{},"21":{},"26":{},"34":{},"36":{},"38":{},"40":{},"41":{},"49":{}},"component":{},"keyword":{}}],["earlier",{"_index":2146,"title":{},"name":{},"text":{"8":{},"10":{},"28":{},"36":{},"38":{},"40":{},"41":{},"45":{},"47":{},"51":{},"53":{},"62":{}},"component":{},"keyword":{}}],["earliest",{"_index":5478,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["early_sc_fail(res_continu",{"_index":6033,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["eas",{"_index":2416,"title":{},"name":{},"text":{"10":{},"26":{},"38":{},"51":{}},"component":{},"keyword":{}}],["easi",{"_index":4027,"title":{},"name":{},"text":{"23":{},"30":{},"49":{},"52":{},"55":{},"57":{}},"component":{},"keyword":{}}],["easier",{"_index":4080,"title":{},"name":{},"text":{"26":{},"28":{},"49":{}},"component":{},"keyword":{}}],["easili",{"_index":1516,"title":{},"name":{},"text":{"8":{},"23":{},"41":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["ebreak",{"_index":2743,"title":{},"name":{},"text":{"10":{},"14":{},"19":{},"31":{},"34":{},"35":{},"44":{},"45":{},"47":{},"48":{}},"component":{},"keyword":{}}],["ecal",{"_index":2083,"title":{},"name":{},"text":{"8":{},"10":{},"14":{},"21":{},"34":{},"35":{},"38":{},"44":{},"45":{},"47":{},"48":{}},"component":{},"keyword":{}}],["ecall/ebreak",{"_index":6395,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["ecdsa",{"_index":7084,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ecosystem",{"_index":6768,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ed",{"_index":1230,"title":{},"name":{},"text":{"7":{},"31":{}},"component":{},"keyword":{}}],["edg",{"_index":3050,"title":{},"name":{},"text":{"11":{},"40":{},"50":{}},"component":{},"keyword":{}}],["edit",{"_index":461,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{},"keyword":{}}],["editor",{"_index":607,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["educ",{"_index":5416,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["eec",{"_index":717,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["eei",{"_index":5441,"title":{},"name":{},"text":{"38":{},"45":{},"63":{}},"component":{},"keyword":{}}],["eew",{"_index":4850,"title":{"51-145":{}},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["eew/8",{"_index":7980,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew/emul",{"_index":7746,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew/emul=2*sew/2*lmul",{"_index":8054,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew/sew)*lmul",{"_index":7842,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=1",{"_index":7749,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=16",{"_index":8633,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=2*sew",{"_index":7747,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["eew=32",{"_index":8683,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=32b",{"_index":8698,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=64",{"_index":8682,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=8",{"_index":7838,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=8b",{"_index":8697,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eew=sew",{"_index":7744,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["effect",{"_index":1575,"title":{"33-16":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"16":{},"19":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"59":{},"60":{},"62":{},"64":{},"65":{}},"component":{},"keyword":{}}],["effective_address[xlen",{"_index":4329,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["effici",{"_index":788,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"19":{},"26":{},"28":{},"29":{},"30":{},"31":{},"34":{},"38":{},"41":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"58":{},"60":{},"63":{},"65":{}},"component":{},"keyword":{}}],["effort",{"_index":2125,"title":{},"name":{},"text":{"8":{},"26":{},"38":{},"49":{}},"component":{},"keyword":{}}],["eg",{"_index":8692,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["eg_len",{"_index":9032,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["eg_start",{"_index":9033,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["egs=4",{"_index":8700,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["egs=8",{"_index":8952,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["egsmax",{"_index":8695,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["egss",{"_index":8694,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["egw",{"_index":8699,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["egw=128",{"_index":8937,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["egw=256",{"_index":8939,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["egw>vlen",{"_index":8701,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ei",{"_index":9267,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["eight",{"_index":2980,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"31":{},"50":{},"51":{},"52":{},"55":{},"66":{}},"component":{},"keyword":{}}],["eighth",{"_index":1406,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["eip",{"_index":1327,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["eita",{"_index":1131,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["eix",{"_index":7900,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["elaps",{"_index":2867,"title":{},"name":{},"text":{"10":{},"19":{},"56":{}},"component":{},"keyword":{}}],["electr",{"_index":6930,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["electro",{"_index":6604,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["electron",{"_index":1303,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["element",{"_index":1281,"title":{"51-8":{},"51-19":{},"51-30":{},"51-116":{},"51-142":{},"51-143":{},"51-147":{},"52-5":{}},"name":{},"text":{"7":{},"29":{},"30":{},"49":{},"50":{},"51":{},"52":{},"53":{},"67":{}},"component":{},"keyword":{}}],["element’",{"_index":8562,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["elen",{"_index":7623,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["elen=32",{"_index":7644,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["elen=64",{"_index":7660,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["eleven",{"_index":9221,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["elf",{"_index":708,"title":{},"name":{},"text":{"7":{},"21":{},"34":{},"41":{},"50":{}},"component":{},"keyword":{}}],["elid",{"_index":2495,"title":{},"name":{},"text":{"10":{},"26":{},"40":{},"51":{}},"component":{},"keyword":{}}],["elimin",{"_index":4023,"title":{},"name":{},"text":{"23":{},"25":{},"39":{},"40":{},"52":{},"57":{},"60":{}},"component":{},"keyword":{}}],["elis",{"_index":898,"title":{},"name":{},"text":{"7":{},"28":{}},"component":{},"keyword":{}}],["ellipt",{"_index":8944,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["elp",{"_index":1782,"title":{"10-15":{},"26-6":{}},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"26":{},"50":{}},"component":{},"keyword":{}}],["elsewher",{"_index":5788,"title":{},"name":{},"text":{"40":{},"45":{}},"component":{},"keyword":{}}],["em",{"_index":6606,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["eman",{"_index":4086,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["emax",{"_index":4791,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["embed",{"_index":1075,"title":{"51-138":{}},"name":{},"text":{"7":{},"15":{},"30":{},"31":{},"38":{},"40":{},"45":{},"46":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["embench",{"_index":9824,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["embodi",{"_index":3467,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["emerg",{"_index":6057,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["emiss",{"_index":7058,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["emit",{"_index":7507,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["employ",{"_index":457,"title":{},"name":{},"text":{"4":{},"26":{},"31":{},"37":{},"38":{},"40":{},"49":{},"50":{},"52":{},"60":{},"64":{}},"component":{},"keyword":{}}],["empti",{"_index":5664,"title":{},"name":{},"text":{"40":{},"41":{},"56":{}},"component":{},"keyword":{}}],["emul",{"_index":467,"title":{"19-20":{},"51-146":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"15":{},"18":{},"19":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"34":{},"35":{},"38":{},"40":{},"45":{},"48":{},"49":{},"51":{},"52":{},"54":{},"58":{},"59":{}},"component":{},"keyword":{}}],["emul<1/8",{"_index":7844,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=(eew/sew)*lmul",{"_index":7824,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=1",{"_index":7758,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=16",{"_index":7757,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=2",{"_index":7929,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=2*lmul",{"_index":7748,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=8",{"_index":7927,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul=lmul",{"_index":7745,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul>1",{"_index":7928,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul>8",{"_index":7843,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["emul≤8",{"_index":7756,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["enabl",{"_index":354,"title":{"8-8":{},"9-5":{},"10-8":{},"10-20":{},"11-2":{},"11-6":{},"19-13":{},"22-1":{},"22-2":{},"25-5":{},"25-9":{},"26-11":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"30":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["enable(",{"_index":3745,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["enable/dis",{"_index":4063,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["enabling/dis",{"_index":4401,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["enclav",{"_index":6968,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["enclos",{"_index":5503,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["encod",{"_index":574,"title":{"38-5":{},"45-4":{},"46-2":{},"51-29":{},"51-32":{},"51-34":{},"51-38":{},"51-40":{},"51-53":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"19":{},"21":{},"22":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"45":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"58":{},"59":{},"61":{},"62":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["encoding[5",{"_index":9796,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["encoding[6",{"_index":9798,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["encompass",{"_index":2218,"title":{},"name":{},"text":{"9":{},"10":{},"17":{},"19":{},"33":{}},"component":{},"keyword":{}}],["encount",{"_index":2108,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"37":{},"38":{},"45":{},"63":{}},"component":{},"keyword":{}}],["encourag",{"_index":1509,"title":{},"name":{},"text":{"8":{},"49":{}},"component":{},"keyword":{}}],["encroach",{"_index":3955,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["encrypt",{"_index":997,"title":{"49-11":{}},"name":{},"text":{"7":{},"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["encrypt/decrypt",{"_index":6626,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["encryption/decrypt",{"_index":9085,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["end",{"_index":2034,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"15":{},"22":{},"26":{},"28":{},"29":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"49":{},"50":{},"51":{},"53":{},"55":{}},"component":{},"keyword":{}}],["end_row",{"_index":9594,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["endeavor",{"_index":5473,"title":{},"name":{},"text":{"38":{},"52":{}},"component":{},"keyword":{}}],["endian",{"_index":400,"title":{"10-12":{},"26-5":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"29":{},"34":{},"38":{},"45":{},"49":{},"51":{},"52":{},"57":{},"60":{}},"component":{},"keyword":{}}],["endif",{"_index":3775,"title":{},"name":{},"text":{"19":{},"29":{},"50":{},"55":{}},"component":{},"keyword":{}}],["endors",{"_index":3457,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["energi",{"_index":479,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"29":{},"31":{},"38":{},"44":{},"45":{},"49":{},"56":{},"65":{}},"component":{},"keyword":{}}],["enforc",{"_index":3032,"title":{"50-2":{}},"name":{},"text":{"10":{},"11":{},"21":{},"26":{},"27":{},"34":{},"38":{},"40":{},"49":{},"50":{},"62":{}},"component":{},"keyword":{}}],["engin",{"_index":1226,"title":{},"name":{},"text":{"7":{},"10":{},"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["english",{"_index":1028,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["enhanc",{"_index":2793,"title":{"21":{}},"name":{},"text":{"10":{},"21":{}},"component":{},"keyword":{}}],["enough",{"_index":2187,"title":{},"name":{},"text":{"8":{},"9":{},"12":{},"22":{},"31":{},"37":{},"38":{},"40":{},"41":{},"49":{},"51":{},"57":{},"63":{}},"component":{},"keyword":{}}],["enqueu",{"_index":3519,"title":{},"name":{},"text":{"16":{},"55":{}},"component":{},"keyword":{}}],["ensur",{"_index":1591,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"38":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["entail",{"_index":4107,"title":{},"name":{},"text":{"26":{},"38":{}},"component":{},"keyword":{}}],["entangl",{"_index":7054,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["enter",{"_index":1642,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"20":{},"22":{},"26":{},"27":{},"28":{},"40":{},"49":{},"50":{},"56":{}},"component":{},"keyword":{}}],["entir",{"_index":2183,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"26":{},"33":{},"35":{},"38":{},"41":{},"45":{},"48":{},"49":{},"51":{},"55":{},"57":{},"60":{},"62":{}},"component":{},"keyword":{}}],["entireti",{"_index":6857,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["entiti",{"_index":5472,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["entrench",{"_index":4221,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["entri",{"_index":356,"title":{"8-36":{},"19-7":{},"33-14":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"16":{},"19":{},"21":{},"26":{},"27":{},"28":{},"32":{},"45":{},"47":{},"50":{},"51":{},"57":{},"58":{}},"component":{},"keyword":{}}],["entropi",{"_index":1013,"title":{"49":{},"49-15":{},"49-70":{},"49-72":{},"49-99":{},"49-102":{}},"name":{},"text":{"7":{},"10":{},"12":{},"49":{},"52":{}},"component":{},"keyword":{}}],["entry/exit",{"_index":4965,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["entry’",{"_index":2993,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["enumer",{"_index":1662,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["envcfg",{"_index":3965,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["environ",{"_index":389,"title":{"8-7":{},"10-27":{},"10-32":{},"25-10":{},"26-16":{},"38-2":{},"45-14":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"17":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"45":{},"47":{},"48":{},"49":{},"51":{},"63":{}},"component":{},"keyword":{}}],["environment",{"_index":6906,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["environment’",{"_index":5450,"title":{},"name":{},"text":{"38":{},"39":{}},"component":{},"keyword":{}}],["epc",{"_index":2843,"title":{},"name":{},"text":{"10":{},"19":{},"51":{}},"component":{},"keyword":{}}],["epilogu",{"_index":4969,"title":{},"name":{},"text":{"31":{},"50":{},"57":{}},"component":{},"keyword":{}}],["eplan",{"_index":5547,"title":{},"name":{"40":{}},"text":{},"component":{},"keyword":{}}],["equal",{"_index":1837,"title":{},"name":{},"text":{"8":{},"10":{},"25":{},"26":{},"27":{},"29":{},"31":{},"33":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"61":{}},"component":{},"keyword":{}}],["equat",{"_index":6767,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["equival",{"_index":2162,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"29":{},"30":{},"31":{},"40":{},"41":{},"42":{},"49":{},"51":{},"57":{},"61":{},"66":{}},"component":{},"keyword":{}}],["errant",{"_index":2603,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["erron",{"_index":5492,"title":{},"name":{},"text":{"38":{},"40":{}},"component":{},"keyword":{}}],["error",{"_index":244,"title":{"49-115":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"20":{},"21":{},"24":{},"26":{},"27":{},"34":{},"35":{},"36":{},"38":{},"45":{},"49":{},"51":{},"57":{},"59":{}},"component":{},"keyword":{}}],["es",{"_index":6571,"title":{"49-102":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["es16",{"_index":6731,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["escal",{"_index":3825,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["espasa",{"_index":633,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["especi",{"_index":4158,"title":{},"name":{},"text":{"26":{},"35":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["essenc",{"_index":6816,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["essenti",{"_index":2220,"title":{},"name":{},"text":{"9":{},"19":{},"26":{},"29":{},"35":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["est(1/v2",{"_index":9616,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["establish",{"_index":2143,"title":{},"name":{},"text":{"8":{},"28":{},"42":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["estim",{"_index":1248,"title":{"51-88":{},"51-89":{}},"name":{},"text":{"7":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["et",{"_index":862,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["etc",{"_index":2533,"title":{},"name":{},"text":{"10":{},"19":{},"22":{},"26":{},"27":{},"33":{},"40":{},"41":{},"47":{},"49":{},"50":{},"52":{},"57":{},"61":{}},"component":{},"keyword":{}}],["eurocrypt",{"_index":1417,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["evalu",{"_index":1043,"title":{},"name":{},"text":{"7":{},"10":{},"18":{},"26":{},"33":{},"45":{},"49":{},"51":{},"65":{}},"component":{},"keyword":{}}],["even",{"_index":351,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"60":{},"62":{}},"component":{},"keyword":{}}],["evenli",{"_index":7804,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["event",{"_index":890,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"17":{},"18":{},"19":{},"22":{},"23":{},"25":{},"26":{},"28":{},"33":{},"35":{},"38":{},"40":{},"41":{},"45":{},"49":{},"51":{},"56":{},"62":{},"64":{},"65":{}},"component":{},"keyword":{}}],["eventu",{"_index":2820,"title":{"28-3":{}},"name":{},"text":{"10":{},"15":{},"23":{},"25":{},"26":{},"28":{},"31":{},"33":{},"35":{},"38":{},"40":{},"45":{},"51":{}},"component":{},"keyword":{}}],["everyth",{"_index":3916,"title":{},"name":{},"text":{"21":{},"38":{}},"component":{},"keyword":{}}],["evict",{"_index":4172,"title":{},"name":{},"text":{"26":{},"28":{}},"component":{},"keyword":{}}],["evl",{"_index":7979,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["evl=ceil(vl/8",{"_index":7865,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["evl=nfields*vlen/eew",{"_index":7978,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["evolv",{"_index":4152,"title":{},"name":{},"text":{"26":{},"40":{}},"component":{},"keyword":{}}],["evtyushkin",{"_index":1243,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ex",{"_index":7901,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["exacerb",{"_index":4124,"title":{},"name":{},"text":{"26":{},"63":{}},"component":{},"keyword":{}}],["exact",{"_index":2070,"title":{},"name":{},"text":{"8":{},"22":{},"23":{},"26":{},"30":{},"36":{},"43":{},"51":{},"52":{}},"component":{},"keyword":{}}],["exactli",{"_index":1569,"title":{},"name":{},"text":{"8":{},"10":{},"23":{},"26":{},"31":{},"37":{},"40":{},"41":{},"48":{},"51":{}},"component":{},"keyword":{}}],["examin",{"_index":2360,"title":{},"name":{},"text":{"10":{},"11":{},"30":{},"37":{},"38":{},"49":{},"50":{},"52":{},"58":{}},"component":{},"keyword":{}}],["exampl",{"_index":1538,"title":{"53":{},"27-5":{},"51-36":{},"51-114":{},"53-1":{},"53-2":{},"53-3":{},"53-4":{},"53-5":{},"53-6":{},"53-7":{},"53-8":{},"53-9":{},"53-10":{},"57-27":{},"57-35":{},"61-6":{}},"name":{"53":{}},"text":{"8":{},"9":{},"10":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"35":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["exc.cod",{"_index":2106,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["exce",{"_index":2971,"title":{},"name":{},"text":{"10":{},"49":{},"51":{}},"component":{},"keyword":{}}],["except",{"_index":246,"title":{"8-17":{},"10-23":{},"26-13":{},"30-11":{},"33-11":{},"33-12":{},"33-13":{},"33-14":{},"38-6":{},"51-80":{},"51-131":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"62":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["exchang",{"_index":9693,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["excinh",{"_index":3641,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["excinh/intrinh",{"_index":3746,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["excl",{"_index":9764,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["exclud",{"_index":2131,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"19":{},"22":{},"26":{},"27":{},"28":{},"41":{},"45":{},"46":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["exclus",{"_index":1693,"title":{},"name":{},"text":{"8":{},"28":{},"29":{},"34":{},"40":{},"49":{},"52":{},"64":{}},"component":{},"keyword":{}}],["excruciatingli",{"_index":6789,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["execut",{"_index":388,"title":{"21":{},"38-2":{},"41-4":{},"49-19":{},"49-77":{},"52-24":{},"57-31":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"59":{},"62":{},"63":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["executable—ar",{"_index":2059,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["exempt",{"_index":4400,"title":{},"name":{},"text":{"27":{},"52":{}},"component":{},"keyword":{}}],["exercis",{"_index":5448,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["exhaust",{"_index":4019,"title":{},"name":{},"text":{"22":{},"41":{},"49":{}},"component":{},"keyword":{}}],["exhibit",{"_index":2753,"title":{},"name":{},"text":{"10":{},"26":{},"49":{},"51":{},"64":{}},"component":{},"keyword":{}}],["exist",{"_index":551,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"60":{},"61":{},"66":{}},"component":{},"keyword":{}}],["exit",{"_index":3895,"title":{},"name":{},"text":{"21":{},"28":{},"45":{},"47":{},"51":{},"53":{}},"component":{},"keyword":{}}],["exot",{"_index":7018,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["exp[0",{"_index":8387,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["expand",{"_index":2027,"title":{},"name":{},"text":{"8":{},"26":{},"29":{},"31":{},"32":{},"34":{},"38":{},"42":{},"47":{},"49":{},"50":{},"51":{},"57":{},"66":{}},"component":{},"keyword":{}}],["expans",{"_index":7421,"title":{},"name":{},"text":{"49":{},"51":{},"52":{},"57":{},"66":{}},"component":{},"keyword":{}}],["expect",{"_index":149,"title":{"10-15":{},"11-3":{},"26-6":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"15":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"40":{},"41":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"58":{},"59":{},"65":{},"66":{}},"component":{},"keyword":{}}],["expenditur",{"_index":9736,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["expens",{"_index":2327,"title":{},"name":{},"text":{"10":{},"27":{},"40":{},"45":{},"49":{},"52":{},"63":{}},"component":{},"keyword":{}}],["experi",{"_index":5423,"title":{},"name":{},"text":{"38":{},"41":{},"45":{}},"component":{},"keyword":{}}],["experienc",{"_index":7918,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["experiment",{"_index":4223,"title":{},"name":{},"text":{"26":{},"38":{},"42":{},"49":{}},"component":{},"keyword":{}}],["expert",{"_index":4764,"title":{},"name":{},"text":{"30":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["expertis",{"_index":4786,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["expir",{"_index":5506,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["explain",{"_index":1621,"title":{"40-3":{}},"name":{},"text":{"8":{},"22":{},"27":{},"32":{},"40":{},"49":{},"53":{}},"component":{},"keyword":{}}],["explan",{"_index":2300,"title":{},"name":{},"text":{"9":{},"29":{},"30":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["explanatori",{"_index":2951,"title":{"40":{}},"name":{},"text":{"10":{},"40":{},"48":{}},"component":{},"keyword":{}}],["explicit",{"_index":283,"title":{"12-10":{},"40-10":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"19":{},"22":{},"26":{},"27":{},"33":{},"34":{},"36":{},"37":{},"38":{},"41":{},"45":{},"48":{},"49":{},"51":{},"59":{},"62":{},"64":{}},"component":{},"keyword":{}}],["explicitli",{"_index":2128,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"22":{},"26":{},"27":{},"30":{},"32":{},"34":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{},"58":{},"64":{}},"component":{},"keyword":{}}],["exploit",{"_index":4081,"title":{},"name":{},"text":{"26":{},"37":{},"45":{},"49":{},"64":{}},"component":{},"keyword":{}}],["explor",{"_index":6008,"title":{},"name":{},"text":{"41":{},"49":{}},"component":{},"keyword":{}}],["expo",{"_index":4794,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["expon",{"_index":3703,"title":{},"name":{},"text":{"19":{},"30":{},"36":{},"51":{},"58":{}},"component":{},"keyword":{}}],["exponenti",{"_index":7074,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["expos",{"_index":254,"title":{},"name":{},"text":{"4":{},"10":{},"19":{},"26":{},"33":{},"35":{},"40":{},"49":{},"51":{},"67":{}},"component":{},"keyword":{}}],["express",{"_index":3468,"title":{},"name":{},"text":{"15":{},"27":{},"29":{},"30":{},"33":{},"41":{},"49":{}},"component":{},"keyword":{}}],["expressli",{"_index":2086,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"51":{}},"component":{},"keyword":{}}],["ext",{"_index":4411,"title":{},"name":{"28":{},"29":{},"31":{},"36":{},"37":{},"39":{},"43":{},"51":{},"67":{}},"text":{"41":{}},"component":{},"keyword":{}}],["ext.adoc#zbkb",{"_index":6615,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ext.adoc#zbkc",{"_index":6617,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ext.adoc#zbkx",{"_index":6619,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["extend",{"_index":1093,"title":{"52-31":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"19":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"62":{}},"component":{},"keyword":{}}],["extend(sew",{"_index":8524,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["extens",{"_index":161,"title":{"8":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"39":{},"42":{},"43":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"10-14":{},"19-22":{},"22-1":{},"25-6":{},"26-29":{},"26-30":{},"26-31":{},"26-32":{},"26-33":{},"26-34":{},"27-9":{},"27-10":{},"28-2":{},"28-4":{},"29-4":{},"29-11":{},"30-13":{},"33-15":{},"33-19":{},"35-1":{},"35-2":{},"39-3":{},"40-18":{},"42-3":{},"42-5":{},"42-6":{},"42-7":{},"42-8":{},"42-9":{},"49-6":{},"49-15":{},"49-18":{},"51-3":{},"51-18":{},"51-59":{},"51-136":{},"51-137":{},"51-138":{},"51-139":{},"51-140":{},"51-141":{},"52-9":{},"59-6":{},"66-1":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["extension",{"_index":6005,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["extension’",{"_index":2293,"title":{},"name":{},"text":{"9":{},"10":{},"22":{}},"component":{},"keyword":{}}],["extent",{"_index":3601,"title":{},"name":{},"text":{"18":{},"21":{},"49":{}},"component":{},"keyword":{}}],["extern",{"_index":523,"title":{"8-6":{},"19-17":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"15":{},"19":{},"26":{},"36":{},"38":{},"40":{},"41":{},"45":{},"49":{},"51":{},"56":{}},"component":{},"keyword":{}}],["extra",{"_index":2026,"title":{},"name":{},"text":{"8":{},"21":{},"36":{},"40":{},"45":{},"52":{}},"component":{},"keyword":{}}],["extract",{"_index":2907,"title":{},"name":{},"text":{"10":{},"29":{},"36":{},"49":{},"51":{}},"component":{},"keyword":{}}],["extractor",{"_index":6911,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["extran",{"_index":9687,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["extrem",{"_index":2824,"title":{},"name":{},"text":{"10":{},"25":{},"40":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["exts((x(rs1",{"_index":6699,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["exts(hi_half",{"_index":4649,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["exts(load_mem[x(rs1c)+extz(uimm)][15..0",{"_index":9804,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["exts(result",{"_index":4664,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["exts(result[31..0",{"_index":4660,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["exts(x(rs)[15..0",{"_index":4666,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["exts(x(rs)[7..0",{"_index":4665,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["exts(x(rsdc)[15..0",{"_index":9813,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["exts(x(rsdc)[7..0",{"_index":9811,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extz(0b0",{"_index":4654,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["extz(hi_half",{"_index":4641,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["extz(load_mem[x(rs1c)+extz(uimm)][15..0",{"_index":9803,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extz(mem[x(rs1c)+extz(uimm)][7..0",{"_index":9802,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extz(result",{"_index":6686,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["extz(x(rs)[15..0",{"_index":4692,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["extz(x(rs)[31..0",{"_index":4668,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["extz(x(rs1)[31..0",{"_index":4574,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["extz(x(rsdc)[15..0",{"_index":9812,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extz(x(rsdc)[31..0",{"_index":9814,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["extz(x(rsdc)[7..0",{"_index":9810,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["f",{"_index":613,"title":{"37":{},"37-1":{}},"name":{"37":{}},"text":{"5":{},"7":{},"10":{},"22":{},"28":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"48":{},"49":{},"51":{},"52":{},"57":{},"58":{},"59":{},"60":{},"64":{}},"component":{},"keyword":{}}],["f\"=0",{"_index":2367,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["f.pr",{"_index":5861,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["f/d",{"_index":9772,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["f/d/q",{"_index":8450,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["f0",{"_index":5268,"title":{},"name":{},"text":{"36":{},"37":{}},"component":{},"keyword":{}}],["f0–f31",{"_index":2571,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["f1",{"_index":5310,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f10",{"_index":4947,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f11",{"_index":4948,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f12",{"_index":4949,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f13",{"_index":4950,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f14",{"_index":4951,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f15",{"_index":4926,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f16",{"_index":5317,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f17",{"_index":5318,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f18",{"_index":5319,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f19",{"_index":5320,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f2",{"_index":5311,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f20",{"_index":5321,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f21",{"_index":5322,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f22",{"_index":5323,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f23",{"_index":5324,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f24",{"_index":5325,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f25",{"_index":5326,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f26",{"_index":5327,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f27",{"_index":5328,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f28",{"_index":5329,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f29",{"_index":5330,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f3",{"_index":5312,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f3,f1,f2",{"_index":5672,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["f30",{"_index":5331,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f31",{"_index":5269,"title":{},"name":{},"text":{"36":{},"37":{}},"component":{},"keyword":{}}],["f4",{"_index":5313,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f5",{"_index":5314,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f6",{"_index":5315,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f6,f4,f5",{"_index":5673,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["f7",{"_index":5316,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["f8",{"_index":4925,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f9",{"_index":4946,"title":{},"name":{},"text":{"31":{},"37":{}},"component":{},"keyword":{}}],["f[rd",{"_index":8592,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["f[rs1",{"_index":8045,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["f[rs1]/vs2[i",{"_index":8354,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["fa0",{"_index":4954,"title":{},"name":{},"text":{"31":{},"53":{}},"component":{},"keyword":{}}],["fa1",{"_index":4955,"title":{},"name":{},"text":{"31":{},"53":{}},"component":{},"keyword":{}}],["fa2",{"_index":4956,"title":{},"name":{},"text":{"31":{},"53":{}},"component":{},"keyword":{}}],["fa3",{"_index":4957,"title":{},"name":{},"text":{"31":{},"53":{}},"component":{},"keyword":{}}],["fa4",{"_index":4958,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fa5",{"_index":4959,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fabric",{"_index":2397,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["fabs.",{"_index":5400,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["facil",{"_index":1581,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"25":{},"26":{},"27":{},"35":{},"51":{}},"component":{},"keyword":{}}],["facilit",{"_index":1832,"title":{},"name":{},"text":{"8":{},"9":{},"11":{},"26":{},"27":{},"40":{},"41":{},"48":{},"67":{}},"component":{},"keyword":{}}],["fact",{"_index":2182,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{},"41":{},"49":{},"67":{}},"component":{},"keyword":{}}],["factor",{"_index":1388,"title":{},"name":{},"text":{"7":{},"8":{},"28":{},"31":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["fadd",{"_index":5671,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["fadd.",{"_index":5350,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fadd.d",{"_index":6303,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fadd.h",{"_index":6350,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fadd.q",{"_index":6331,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fail",{"_index":1218,"title":{"41-14":{},"41-21":{}},"name":{},"text":{"7":{},"8":{},"10":{},"21":{},"26":{},"28":{},"33":{},"38":{},"40":{},"41":{},"48":{},"49":{},"51":{},"55":{}},"component":{},"keyword":{}}],["failur",{"_index":2900,"title":{},"name":{},"text":{"10":{},"21":{},"28":{},"34":{},"38":{},"49":{}},"component":{},"keyword":{}}],["fair",{"_index":5633,"title":{},"name":{},"text":{"40":{},"54":{}},"component":{},"keyword":{}}],["fairli",{"_index":6588,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["faithfulli",{"_index":4842,"title":{},"name":{},"text":{"30":{},"59":{}},"component":{},"keyword":{}}],["falcon",{"_index":6818,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["fall",{"_index":962,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"25":{},"28":{},"29":{},"33":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["fallen",{"_index":2822,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{},"keyword":{}}],["fals",{"_index":3875,"title":{},"name":{},"text":{"21":{},"40":{},"41":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["famili",{"_index":1139,"title":{},"name":{},"text":{"7":{},"27":{},"38":{},"40":{},"49":{},"58":{},"67":{}},"component":{},"keyword":{}}],["familiar",{"_index":4783,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["fanout",{"_index":6429,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["far",{"_index":2619,"title":{},"name":{},"text":{"10":{},"13":{},"31":{},"40":{},"41":{},"48":{},"50":{}},"component":{},"keyword":{}}],["fashion",{"_index":1971,"title":{},"name":{},"text":{"8":{},"10":{},"18":{},"49":{}},"component":{},"keyword":{}}],["fast",{"_index":909,"title":{},"name":{},"text":{"7":{},"10":{},"45":{}},"component":{},"keyword":{}}],["faster",{"_index":2005,"title":{},"name":{},"text":{"8":{},"41":{},"51":{},"55":{}},"component":{},"keyword":{}}],["fatal",{"_index":3078,"title":{"49-115":{}},"name":{},"text":{"11":{},"37":{},"38":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["fault",{"_index":363,"title":{"8-32":{},"33-12":{},"51-44":{},"57-30":{},"57-49":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"18":{},"21":{},"26":{},"27":{},"28":{},"33":{},"34":{},"38":{},"45":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["faulted—for",{"_index":1816,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["favor",{"_index":74,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"34":{},"51":{}},"component":{},"keyword":{}}],["fcfiact",{"_index":3522,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["fclass",{"_index":5414,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fclass.",{"_index":5213,"title":{},"name":{},"text":{"34":{},"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fclass.d",{"_index":5214,"title":{},"name":{},"text":{"34":{},"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fclass.h",{"_index":6378,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fclass.q",{"_index":6177,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcsr",{"_index":2572,"title":{},"name":{},"text":{"10":{},"12":{},"22":{},"34":{},"37":{},"44":{},"48":{},"60":{},"62":{}},"component":{},"keyword":{}}],["fcvt.bf16.",{"_index":4745,"title":{"30-18":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["fcvt.d.",{"_index":5299,"title":{},"name":{},"text":{"36":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["fcvt.d.h",{"_index":6369,"title":{},"name":{},"text":{"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fcvt.d.l",{"_index":5287,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.d.l[u",{"_index":5294,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fcvt.d.lu",{"_index":5291,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.d.q",{"_index":6170,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.d.w",{"_index":5286,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.d.w[u",{"_index":5297,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fcvt.d.wu",{"_index":5290,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.h.",{"_index":6368,"title":{},"name":{},"text":{"44":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fcvt.h.d",{"_index":6370,"title":{},"name":{},"text":{"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fcvt.h.l",{"_index":6389,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.h.l[u",{"_index":10151,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["fcvt.h.lu",{"_index":6390,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.h.q",{"_index":6372,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.h.w",{"_index":6383,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.h.wu",{"_index":6384,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.int.",{"_index":5296,"title":{},"name":{},"text":{"36":{},"37":{}},"component":{},"keyword":{}}],["fcvt.int.d",{"_index":5295,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fcvt.l.",{"_index":5376,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.l.d",{"_index":5285,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.l.h",{"_index":6387,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.l.q",{"_index":6159,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.l[u].",{"_index":5384,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fcvt.l[u].d",{"_index":5293,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fcvt.l[u].h",{"_index":10150,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["fcvt.l[u].q",{"_index":6166,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["fcvt.lu.",{"_index":5380,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.lu.d",{"_index":5289,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.lu.h",{"_index":6388,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.lu.q",{"_index":6163,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.q.",{"_index":6169,"title":{},"name":{},"text":{"43":{},"44":{},"58":{}},"component":{},"keyword":{}}],["fcvt.q.d",{"_index":6171,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.q.h",{"_index":6371,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.q.l",{"_index":6161,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.q.l[u",{"_index":6167,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["fcvt.q.lu",{"_index":6165,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.q.w",{"_index":6160,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.q.wu",{"_index":6164,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.s.bf16",{"_index":4746,"title":{"30-19":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["fcvt.s.d",{"_index":5298,"title":{},"name":{},"text":{"36":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["fcvt.s.h",{"_index":6366,"title":{},"name":{},"text":{"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fcvt.s.l",{"_index":5378,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.s.l[u",{"_index":5385,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fcvt.s.lu",{"_index":5382,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.s.q",{"_index":6168,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.s.w",{"_index":5377,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.s.wu",{"_index":5381,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.w.",{"_index":5375,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.w.d",{"_index":5284,"title":{},"name":{},"text":{"36":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["fcvt.w.h",{"_index":6380,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.w.q",{"_index":6158,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvt.w[u].",{"_index":5383,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fcvt.w[u].d",{"_index":5292,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fcvt.wu.",{"_index":5379,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.wu.d",{"_index":5288,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fcvt.wu.h",{"_index":6381,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fcvt.wu.q",{"_index":6162,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fcvtmod.w.d",{"_index":10123,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fdiv.",{"_index":5353,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fdiv.d",{"_index":6309,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fdiv.h",{"_index":6356,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fdiv.q",{"_index":6335,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fe",{"_index":1390,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["feasibl",{"_index":3079,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["featur",{"_index":1883,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"21":{},"22":{},"23":{},"26":{},"27":{},"31":{},"36":{},"37":{},"38":{},"45":{},"49":{},"50":{},"51":{},"53":{},"61":{},"66":{}},"component":{},"keyword":{}}],["februari",{"_index":1177,"title":{},"name":{},"text":{"7":{},"34":{}},"component":{},"keyword":{}}],["feder",{"_index":989,"title":{},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["feed",{"_index":5279,"title":{},"name":{},"text":{"36":{},"41":{},"49":{}},"component":{},"keyword":{}}],["felt",{"_index":4876,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fenc",{"_index":338,"title":{"63":{},"8-23":{},"8-33":{},"26-19":{},"40-9":{},"41-24":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"27":{},"28":{},"33":{},"34":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"55":{},"62":{},"63":{},"65":{},"67":{}},"component":{},"keyword":{}}],["fence(kind",{"_index":6038,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.(pr",{"_index":5872,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.(pw",{"_index":5875,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.i",{"_index":4373,"title":{},"name":{},"text":{"27":{},"33":{},"34":{},"38":{},"40":{},"44":{},"48":{},"57":{},"63":{}},"component":{},"keyword":{}}],["fence.pr.pw.sr.sw",{"_index":5910,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.pr.pw.sw",{"_index":5908,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.pr.sr",{"_index":5906,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.pr.sr.sw",{"_index":5909,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.pw.sw",{"_index":5907,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.r.r",{"_index":5926,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.r.rw",{"_index":5930,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.r.w",{"_index":5928,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.rw.r",{"_index":5938,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.rw.rw",{"_index":5942,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.rw.w",{"_index":5940,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.tso",{"_index":5662,"title":{},"name":{},"text":{"40":{},"41":{},"44":{},"45":{}},"component":{},"keyword":{}}],["fence.tso’",{"_index":6469,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["fence.w.r",{"_index":5932,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.w.rw",{"_index":5936,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fence.w.w",{"_index":5934,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fenceprsr",{"_index":5871,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fenceprsr).(^po",{"_index":5877,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fenceprsw",{"_index":5873,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fenceprsw).(^po",{"_index":5878,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencepwsr",{"_index":5874,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencepwsr).(^po",{"_index":5879,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencepwsw",{"_index":5876,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencepwsw).(^po",{"_index":5880,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencerel(fence.tso",{"_index":5944,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencetso",{"_index":5860,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["fencetso.(pr",{"_index":5864,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["feq.",{"_index":5408,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["feq.d",{"_index":6318,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["feq.h",{"_index":6374,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["feq.q",{"_index":6339,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["ferguson",{"_index":76,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["fetch",{"_index":1938,"title":{"63":{},"41-9":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"50":{},"51":{},"53":{},"57":{},"63":{}},"component":{},"keyword":{}}],["fetchabl",{"_index":5479,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["few",{"_index":1515,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"21":{},"22":{},"26":{},"27":{},"31":{},"35":{},"37":{},"38":{},"40":{},"42":{},"45":{},"47":{},"49":{},"51":{},"52":{},"66":{}},"component":{},"keyword":{}}],["fewer",{"_index":4298,"title":{},"name":{},"text":{"26":{},"30":{},"31":{},"37":{},"38":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["fewest",{"_index":6437,"title":{},"name":{},"text":{"45":{},"51":{}},"component":{},"keyword":{}}],["ff1(x",{"_index":9323,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ff2(x",{"_index":9324,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ff_j(a",{"_index":9299,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ff_j(a1",{"_index":9310,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ff_j(x",{"_index":9325,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["fflag",{"_index":2574,"title":{},"name":{},"text":{"10":{},"12":{},"37":{},"40":{},"44":{},"48":{},"51":{}},"component":{},"keyword":{}}],["fi",{"_index":9266,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["fiber",{"_index":7063,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["field",{"_index":223,"title":{"12-3":{},"12-7":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"30":{},"31":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"43":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"66":{}},"component":{},"keyword":{}}],["field—​it",{"_index":10211,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["field’",{"_index":3415,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["fifo",{"_index":3627,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["fifteenth",{"_index":912,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["fifth",{"_index":5425,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["figur",{"_index":1583,"title":{},"name":{},"text":{"8":{},"10":{},"14":{},"15":{},"16":{},"19":{},"22":{},"26":{},"31":{},"37":{},"40":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["file",{"_index":5304,"title":{},"name":{},"text":{"36":{},"37":{},"45":{},"50":{},"51":{},"52":{},"57":{},"60":{}},"component":{},"keyword":{}}],["fill",{"_index":2412,"title":{},"name":{},"text":{"10":{},"26":{},"37":{},"45":{},"47":{},"51":{},"57":{},"59":{},"60":{}},"component":{},"keyword":{}}],["filter",{"_index":3579,"title":{"18":{},"23":{},"19-18":{}},"name":{},"text":{"18":{},"19":{},"23":{},"41":{},"49":{}},"component":{},"keyword":{}}],["final",{"_index":265,"title":{"49-124":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"26":{},"28":{},"30":{},"33":{},"37":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"57":{},"67":{}},"component":{},"keyword":{}}],["find",{"_index":1380,"title":{"51-110":{}},"name":{},"text":{"7":{},"30":{},"31":{},"40":{},"51":{}},"component":{},"keyword":{}}],["fine",{"_index":4064,"title":{"26-31":{}},"name":{},"text":{},"component":{},"keyword":{}}],["finer",{"_index":4260,"title":{},"name":{},"text":{"26":{},"34":{},"45":{},"63":{}},"component":{},"keyword":{}}],["fingerprint",{"_index":6973,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["finish",{"_index":5816,"title":{"41-28":{}},"name":{},"text":{"41":{},"49":{},"53":{}},"component":{},"keyword":{}}],["finit",{"_index":1343,"title":{},"name":{},"text":{"7":{},"40":{},"41":{},"51":{}},"component":{},"keyword":{}}],["fiom",{"_index":1746,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["fiom=1",{"_index":1750,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["fip",{"_index":991,"title":{"49-73":{}},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["firmwar",{"_index":3840,"title":{},"name":{},"text":{"21":{},"26":{},"49":{}},"component":{},"keyword":{}}],["first",{"_index":1736,"title":{"51-44":{},"51-110":{},"51-111":{},"51-112":{},"51-113":{}},"name":{},"text":{"8":{},"10":{},"12":{},"19":{},"21":{},"22":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"59":{},"63":{},"64":{}},"component":{},"keyword":{}}],["fischer",{"_index":1299,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["fit",{"_index":2913,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"30":{},"33":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["five",{"_index":2700,"title":{},"name":{},"text":{"10":{},"23":{},"26":{},"28":{},"38":{},"45":{},"51":{}},"component":{},"keyword":{}}],["fix",{"_index":599,"title":{"51-15":{},"51-16":{},"51-73":{},"51-78":{}},"name":{},"text":{"4":{},"10":{},"12":{},"27":{},"31":{},"34":{},"38":{},"41":{},"45":{},"49":{},"51":{},"57":{},"58":{}},"component":{},"keyword":{}}],["fk",{"_index":9404,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["fk[0:3",{"_index":9403,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["flag",{"_index":3219,"title":{"51-16":{},"51-80":{}},"name":{},"text":{"12":{},"22":{},"30":{},"34":{},"37":{},"39":{},"40":{},"41":{},"45":{},"50":{},"51":{},"53":{},"56":{},"58":{},"67":{}},"component":{},"keyword":{}}],["flash",{"_index":3918,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["flat",{"_index":5459,"title":{},"name":{},"text":{"38":{},"45":{}},"component":{},"keyword":{}}],["flatten",{"_index":591,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["flavor",{"_index":6006,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["flaw",{"_index":6943,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["fld",{"_index":2150,"title":{},"name":{},"text":{"8":{},"27":{},"31":{},"36":{},"44":{},"48":{},"60":{}},"component":{},"keyword":{}}],["fld/fsd",{"_index":7847,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["fld_fsd",{"_index":6512,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["fldsp",{"_index":5064,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fle",{"_index":10145,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fle.",{"_index":5410,"title":{},"name":{},"text":{"37":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["fle.d",{"_index":6320,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fle.h",{"_index":6376,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fle.q",{"_index":6341,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["flen",{"_index":2618,"title":{},"name":{},"text":{"10":{},"30":{},"34":{},"36":{},"37":{},"51":{}},"component":{},"keyword":{}}],["flen=128",{"_index":6155,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["flen=32",{"_index":5307,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["flen=64",{"_index":5270,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fleq.",{"_index":10137,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fleq.d",{"_index":10139,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fleq.h",{"_index":10141,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fleq.q",{"_index":10143,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["flexibl",{"_index":2625,"title":{},"name":{},"text":{"10":{},"15":{},"19":{},"21":{},"38":{},"40":{},"48":{},"51":{},"61":{}},"component":{},"keyword":{}}],["flh",{"_index":2152,"title":{},"name":{},"text":{"8":{},"30":{},"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["flh/fsh",{"_index":7845,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["fli",{"_index":9410,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["fli.",{"_index":9620,"title":{},"name":{},"text":{"53":{},"58":{}},"component":{},"keyword":{}}],["fli.d",{"_index":10093,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fli.fmt",{"_index":10100,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fli.h",{"_index":10097,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fli.q",{"_index":10095,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["flip",{"_index":1340,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"19":{}},"component":{},"keyword":{}}],["fln/fsn",{"_index":5277,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["float",{"_index":731,"title":{"30":{},"36":{},"37":{},"43":{},"58":{},"59":{},"60":{},"36-4":{},"36-5":{},"36-6":{},"36-7":{},"37-2":{},"37-6":{},"37-7":{},"37-8":{},"37-9":{},"43-4":{},"43-5":{},"51-79":{},"51-80":{},"51-81":{},"51-82":{},"51-83":{},"51-84":{},"51-85":{},"51-86":{},"51-87":{},"51-88":{},"51-89":{},"51-90":{},"51-91":{},"51-92":{},"51-93":{},"51-94":{},"51-95":{},"51-96":{},"51-97":{},"51-98":{},"51-102":{},"51-103":{},"51-104":{},"51-105":{},"51-106":{},"51-119":{},"51-124":{},"51-126":{},"51-140":{},"51-141":{},"59-4":{},"59-5":{},"59-6":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"22":{},"27":{},"28":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"42":{},"43":{},"44":{},"45":{},"49":{},"51":{},"52":{},"53":{},"57":{},"58":{},"59":{},"60":{},"62":{}},"component":{},"keyword":{}}],["float*a",{"_index":9556,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["float*b",{"_index":9559,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["float*c",{"_index":9561,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["floor((3*b",{"_index":8386,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["flop",{"_index":2184,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["flow",{"_index":2456,"title":{"11":{},"50":{},"49-116":{}},"name":{},"text":{"10":{},"11":{},"19":{},"26":{},"38":{},"39":{},"41":{},"45":{},"49":{},"50":{},"66":{}},"component":{},"keyword":{}}],["flq",{"_index":2151,"title":{},"name":{},"text":{"8":{},"27":{},"43":{},"44":{}},"component":{},"keyword":{}}],["flq/fsq",{"_index":7848,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["flt",{"_index":10146,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["flt.",{"_index":5409,"title":{},"name":{},"text":{"37":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["flt.d",{"_index":6319,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["flt.h",{"_index":6375,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["flt.q",{"_index":6340,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fltq.",{"_index":10138,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fltq.d",{"_index":10140,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fltq.h",{"_index":10142,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fltq.q",{"_index":10144,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["flur",{"_index":635,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["flush",{"_index":1964,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"33":{},"40":{},"45":{},"49":{},"63":{}},"component":{},"keyword":{}}],["flw",{"_index":2149,"title":{},"name":{},"text":{"8":{},"27":{},"31":{},"37":{},"44":{},"48":{},"53":{},"60":{}},"component":{},"keyword":{}}],["flw/fsw",{"_index":7846,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["flwsp",{"_index":5066,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fm",{"_index":6224,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{},"keyword":{}}],["fm=0",{"_index":6476,"title":{},"name":{},"text":{"45":{},"47":{},"65":{}},"component":{},"keyword":{}}],["fm=0000",{"_index":6465,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["fm=1000",{"_index":6466,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["fma",{"_index":5185,"title":{},"name":{},"text":{"34":{},"37":{},"51":{}},"component":{},"keyword":{}}],["fmacc",{"_index":4859,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["fmadd.",{"_index":5362,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fmadd.d",{"_index":6299,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fmadd.h",{"_index":6345,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmadd.q",{"_index":6327,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmax",{"_index":5163,"title":{},"name":{},"text":{"34":{},"58":{}},"component":{},"keyword":{}}],["fmax.",{"_index":5356,"title":{},"name":{},"text":{"37":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["fmax.d",{"_index":6315,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fmax.fmt",{"_index":5169,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["fmax.h",{"_index":6365,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmax.q",{"_index":6338,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmaxm.",{"_index":10102,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmaxm.d",{"_index":10104,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmaxm.h",{"_index":10106,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmaxm.q",{"_index":10108,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmin",{"_index":5162,"title":{},"name":{},"text":{"34":{},"58":{}},"component":{},"keyword":{}}],["fmin.",{"_index":5355,"title":{},"name":{},"text":{"37":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["fmin.d",{"_index":6314,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fmin.fmt",{"_index":5168,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["fmin.h",{"_index":6364,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmin.q",{"_index":6337,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fminm.",{"_index":10101,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fminm.d",{"_index":10103,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fminm.h",{"_index":10105,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fminm.q",{"_index":10107,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmsub",{"_index":5372,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fmsub.",{"_index":5363,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fmsub.d",{"_index":6300,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fmsub.h",{"_index":6346,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmsub.q",{"_index":6328,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmt",{"_index":5167,"title":{},"name":{},"text":{"34":{},"36":{},"37":{},"43":{},"59":{}},"component":{},"keyword":{}}],["fmt=d",{"_index":10094,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmt=h",{"_index":10099,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmt=q",{"_index":10096,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmul.",{"_index":5351,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fmul.d",{"_index":6307,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fmul.h",{"_index":6354,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmul.q",{"_index":6334,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fmv.",{"_index":5398,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fmv.d.x",{"_index":5204,"title":{},"name":{},"text":{"34":{},"36":{},"44":{},"48":{},"60":{}},"component":{},"keyword":{}}],["fmv.h.x",{"_index":4838,"title":{},"name":{},"text":{"30":{},"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fmv.n.x/fmv.x.n",{"_index":5278,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fmv.q.x",{"_index":6176,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["fmv.s.x",{"_index":5181,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fmv.w.x",{"_index":5183,"title":{},"name":{},"text":{"34":{},"37":{},"44":{},"48":{},"53":{},"58":{},"60":{}},"component":{},"keyword":{}}],["fmv.x.",{"_index":5182,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fmv.x.d",{"_index":5201,"title":{},"name":{},"text":{"34":{},"36":{},"44":{},"48":{},"58":{},"60":{}},"component":{},"keyword":{}}],["fmv.x.h",{"_index":4837,"title":{},"name":{},"text":{"30":{},"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fmv.x.q",{"_index":6175,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["fmv.x.w",{"_index":5184,"title":{},"name":{},"text":{"34":{},"37":{},"44":{},"48":{},"58":{},"60":{}},"component":{},"keyword":{}}],["fmvh.x.d",{"_index":10126,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmvh.x.q",{"_index":10131,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmvp.d.x",{"_index":10129,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fmvp.q.x",{"_index":10134,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fneg.",{"_index":5399,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fnmadd",{"_index":5367,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fnmadd.",{"_index":5365,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fnmadd.d",{"_index":6302,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fnmadd.fmt",{"_index":5179,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["fnmadd.h",{"_index":6348,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fnmadd.q",{"_index":6330,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fnmsub",{"_index":5366,"title":{},"name":{},"text":{"37":{},"51":{}},"component":{},"keyword":{}}],["fnmsub.",{"_index":5364,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fnmsub.d",{"_index":6301,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fnmsub.fmt",{"_index":5180,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["fnmsub.h",{"_index":6347,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fnmsub.q",{"_index":6329,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fno",{"_index":3799,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["focardi",{"_index":1202,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["focu",{"_index":3938,"title":{},"name":{},"text":{"22":{},"38":{}},"component":{},"keyword":{}}],["focus",{"_index":572,"title":{},"name":{},"text":{"4":{},"49":{}},"component":{},"keyword":{}}],["fold",{"_index":4839,"title":{},"name":{},"text":{"30":{},"38":{}},"component":{},"keyword":{}}],["foley",{"_index":759,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["follow",{"_index":31,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"10":{},"11":{},"12":{},"13":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"64":{},"67":{}},"component":{},"keyword":{}}],["footprint",{"_index":5814,"title":{"41-16":{}},"name":{},"text":{"41":{},"52":{}},"component":{},"keyword":{}}],["fop",{"_index":8043,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["for(i",{"_index":10007,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["foral",{"_index":4595,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["forbid",{"_index":5608,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["forbidden",{"_index":4456,"title":{},"name":{},"text":{"28":{},"40":{},"49":{}},"component":{},"keyword":{}}],["forc",{"_index":1863,"title":{},"name":{},"text":{"8":{},"15":{},"38":{},"40":{},"50":{},"51":{},"53":{}},"component":{},"keyword":{}}],["forcibl",{"_index":4435,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["foreach",{"_index":4588,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["foreach(i",{"_index":4683,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["forese",{"_index":7048,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["forev",{"_index":3956,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["forgeri",{"_index":7086,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["fork",{"_index":5446,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["form",{"_index":2547,"title":{},"name":{},"text":{"10":{},"15":{},"19":{},"22":{},"25":{},"26":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"40":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"57":{},"62":{}},"component":{},"keyword":{}}],["formal",{"_index":931,"title":{"41":{},"41-1":{},"41-2":{}},"name":{"41":{}},"text":{"7":{},"26":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["format",{"_index":588,"title":{"30-3":{},"30-4":{},"31-2":{},"45-3":{},"51-25":{},"51-52":{},"57-11":{}},"name":{},"text":{"4":{},"8":{},"10":{},"15":{},"18":{},"19":{},"26":{},"28":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"47":{},"51":{},"57":{},"59":{},"60":{},"61":{}},"component":{},"keyword":{}}],["format’",{"_index":4807,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["former",{"_index":1965,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{},"keyword":{}}],["formerli",{"_index":1329,"title":{},"name":{},"text":{"7":{},"21":{}},"component":{},"keyword":{}}],["formula",{"_index":3681,"title":{},"name":{},"text":{"19":{},"49":{}},"component":{},"keyword":{}}],["forth",{"_index":1647,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["forthcom",{"_index":4271,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["fortun",{"_index":5693,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["forward",{"_index":2060,"title":{"41-11":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"26":{},"28":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"63":{},"64":{},"65":{},"67":{}},"component":{},"keyword":{}}],["found",{"_index":2161,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"30":{},"38":{},"40":{},"42":{},"46":{},"49":{},"51":{}},"component":{},"keyword":{}}],["foundat",{"_index":501,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"34":{}},"component":{},"keyword":{}}],["four",{"_index":482,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"16":{},"22":{},"26":{},"28":{},"29":{},"36":{},"38":{},"40":{},"42":{},"45":{},"50":{},"51":{},"52":{},"55":{},"64":{}},"component":{},"keyword":{}}],["fp",{"_index":5283,"title":{},"name":{},"text":{"36":{},"37":{},"43":{},"44":{},"49":{},"51":{},"52":{},"58":{},"59":{}},"component":{},"keyword":{}}],["fp/store",{"_index":7741,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["fp128",{"_index":4803,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["fp16",{"_index":4751,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["fp16’",{"_index":4766,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["fp32",{"_index":4768,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["fp64",{"_index":4800,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["fpga",{"_index":1282,"title":{},"name":{},"text":{"7":{},"38":{},"39":{},"49":{}},"component":{},"keyword":{}}],["fpr",{"_index":5271,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["fpu",{"_index":4381,"title":{},"name":{},"text":{"27":{},"30":{}},"component":{},"keyword":{}}],["fr",{"_index":5575,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["fraction",{"_index":4795,"title":{"51-76":{},"53-10":{}},"name":{},"text":{"30":{},"31":{},"51":{},"53":{}},"component":{},"keyword":{}}],["fragment",{"_index":2399,"title":{},"name":{},"text":{"10":{},"26":{},"41":{}},"component":{},"keyword":{}}],["frame",{"_index":3800,"title":{},"name":{},"text":{"19":{},"50":{},"53":{},"57":{}},"component":{},"keyword":{}}],["frames",{"_index":9591,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["framework",{"_index":5460,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["frcsr",{"_index":5207,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fre;co",{"_index":6004,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["free",{"_index":1743,"title":{},"name":{},"text":{"8":{},"10":{},"18":{},"27":{},"28":{},"31":{},"37":{},"38":{},"40":{},"49":{},"51":{},"52":{},"53":{},"55":{}},"component":{},"keyword":{}}],["freedom",{"_index":4461,"title":{},"name":{},"text":{"28":{},"51":{}},"component":{},"keyword":{}}],["freeli",{"_index":4163,"title":{},"name":{},"text":{"26":{},"27":{},"31":{},"38":{},"40":{},"49":{},"62":{},"64":{}},"component":{},"keyword":{}}],["freez",{"_index":3616,"title":{"19-21":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["frequenc",{"_index":1317,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"35":{},"49":{},"52":{}},"component":{},"keyword":{}}],["frequency/voltag",{"_index":2810,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["frequent",{"_index":3528,"title":{},"name":{},"text":{"17":{},"19":{},"31":{},"35":{},"37":{},"39":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["freshli",{"_index":6081,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["freudenberg",{"_index":636,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["frflag",{"_index":5211,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fri",{"_index":5642,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["frm",{"_index":2573,"title":{},"name":{},"text":{"10":{},"12":{},"30":{},"37":{},"44":{},"48":{},"51":{}},"component":{},"keyword":{}}],["from/to",{"_index":8018,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["front",{"_index":5729,"title":{},"name":{},"text":{"40":{},"45":{},"63":{}},"component":{},"keyword":{}}],["fround.",{"_index":10109,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fround.d",{"_index":10113,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fround.fmt",{"_index":10121,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fround.h",{"_index":10115,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["fround.q",{"_index":10117,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["froundnx.",{"_index":10111,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["froundnx.d",{"_index":10114,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["froundnx.fmt",{"_index":10119,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["froundnx.h",{"_index":10116,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["froundnx.q",{"_index":10118,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["frozen",{"_index":148,"title":{},"name":{},"text":{"4":{},"19":{},"32":{},"34":{},"51":{},"57":{}},"component":{},"keyword":{}}],["frrm",{"_index":5209,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["frysing",{"_index":84,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["fs",{"_index":2102,"title":{},"name":{},"text":{"8":{},"10":{},"22":{},"51":{},"60":{}},"component":{},"keyword":{}}],["fs0",{"_index":4952,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fs1",{"_index":4953,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fs=clean",{"_index":2606,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["fs=initi",{"_index":2599,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["fs=off",{"_index":2597,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["fs[1:0",{"_index":2567,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["fscsr",{"_index":5208,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fsd",{"_index":2156,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"31":{},"36":{},"44":{},"48":{},"60":{}},"component":{},"keyword":{}}],["fsdsp",{"_index":5069,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["fse",{"_index":1351,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["fsflag",{"_index":5212,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fsgnj",{"_index":5390,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fsgnj.",{"_index":5387,"title":{},"name":{},"text":{"37":{},"44":{},"48":{},"59":{}},"component":{},"keyword":{}}],["fsgnj.d",{"_index":5301,"title":{},"name":{},"text":{"36":{},"44":{},"48":{},"60":{}},"component":{},"keyword":{}}],["fsgnj.h",{"_index":6360,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fsgnj.q",{"_index":6172,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fsgnjn",{"_index":5393,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fsgnjn.",{"_index":5388,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fsgnjn.d",{"_index":5302,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fsgnjn.h",{"_index":6361,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fsgnjn.q",{"_index":6173,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fsgnjx",{"_index":5394,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["fsgnjx.",{"_index":5389,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fsgnjx.d",{"_index":5303,"title":{},"name":{},"text":{"36":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fsgnjx.h",{"_index":6362,"title":{},"name":{},"text":{"44":{},"59":{}},"component":{},"keyword":{}}],["fsgnjx.q",{"_index":6174,"title":{},"name":{},"text":{"43":{},"44":{}},"component":{},"keyword":{}}],["fsh",{"_index":2158,"title":{},"name":{},"text":{"8":{},"30":{},"44":{},"59":{},"60":{}},"component":{},"keyword":{}}],["fsq",{"_index":2157,"title":{},"name":{},"text":{"8":{},"27":{},"43":{},"44":{}},"component":{},"keyword":{}}],["fsqrt.",{"_index":5354,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fsqrt.d",{"_index":6311,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fsqrt.h",{"_index":6358,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fsqrt.q",{"_index":6336,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fsrm",{"_index":5210,"title":{},"name":{},"text":{"34":{},"37":{}},"component":{},"keyword":{}}],["fsub.",{"_index":5352,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["fsub.d",{"_index":6305,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["fsub.h",{"_index":6352,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fsub.q",{"_index":6332,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["fsw",{"_index":2155,"title":{},"name":{},"text":{"8":{},"27":{},"31":{},"37":{},"44":{},"48":{},"60":{}},"component":{},"keyword":{}}],["fswsp",{"_index":5071,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["ft0",{"_index":9600,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft1",{"_index":9601,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft10",{"_index":9611,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft11",{"_index":9612,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft12",{"_index":9584,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft13",{"_index":9585,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft14",{"_index":9586,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft15",{"_index":9587,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft2",{"_index":9602,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft3",{"_index":9603,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft4",{"_index":9605,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft5",{"_index":9606,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft6",{"_index":9607,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft7",{"_index":9608,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft8",{"_index":9609,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ft9",{"_index":9610,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["full",{"_index":2216,"title":{},"name":{},"text":{"9":{},"10":{},"19":{},"22":{},"26":{},"29":{},"31":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"49":{},"50":{},"51":{},"52":{},"57":{},"62":{}},"component":{},"keyword":{}}],["fulli",{"_index":2134,"title":{},"name":{},"text":{"8":{},"19":{},"26":{},"30":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["fun",{"_index":5822,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["funct1",{"_index":9783,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["funct12",{"_index":10182,"title":{},"name":{},"text":{"63":{}},"component":{},"keyword":{}}],["funct2",{"_index":4934,"title":{},"name":{},"text":{"31":{},"44":{},"57":{}},"component":{},"keyword":{}}],["funct3",{"_index":2153,"title":{},"name":{},"text":{"8":{},"31":{},"43":{},"44":{},"45":{},"51":{},"52":{},"59":{}},"component":{},"keyword":{}}],["funct3=0",{"_index":10127,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["funct3[2:0",{"_index":8021,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["funct4",{"_index":4930,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["funct5",{"_index":9788,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["funct6",{"_index":4932,"title":{},"name":{},"text":{"31":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["funct7",{"_index":6199,"title":{},"name":{},"text":{"44":{},"45":{}},"component":{},"keyword":{}}],["funct7=1011001",{"_index":10130,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["funct7=1011011",{"_index":10136,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["funct7=1110001",{"_index":10128,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["funct7=1110011",{"_index":10133,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["function",{"_index":1024,"title":{"49-12":{},"49-14":{},"57-26":{}},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"12":{},"15":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["function_entri",{"_index":7549,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["function’",{"_index":7553,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["fund",{"_index":3421,"title":{"13-1":{}},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["fundament",{"_index":3600,"title":{},"name":{},"text":{"18":{},"49":{}},"component":{},"keyword":{}}],["furnish",{"_index":1772,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["further",{"_index":1622,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"17":{},"18":{},"19":{},"21":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"37":{},"38":{},"39":{},"40":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"54":{},"57":{},"59":{},"62":{}},"component":{},"keyword":{}}],["furthermor",{"_index":1535,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"17":{},"26":{},"28":{},"30":{},"31":{},"33":{},"40":{},"45":{},"48":{},"50":{},"51":{},"52":{},"58":{},"61":{},"62":{},"64":{}},"component":{},"keyword":{}}],["fuse",{"_index":4627,"title":{"51-85":{},"51-86":{}},"name":{},"text":{"29":{},"30":{},"36":{},"37":{},"39":{},"45":{},"49":{},"51":{},"52":{},"59":{},"64":{}},"component":{},"keyword":{}}],["fusion",{"_index":5043,"title":{},"name":{},"text":{"31":{},"34":{},"45":{},"61":{}},"component":{},"keyword":{}}],["futur",{"_index":330,"title":{"40-18":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"56":{},"57":{},"59":{},"60":{},"63":{},"65":{},"66":{}},"component":{},"keyword":{}}],["fuzzi",{"_index":5238,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["fw",{"_index":5981,"title":{},"name":{},"text":{"41":{},"51":{}},"component":{},"keyword":{}}],["g",{"_index":292,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"26":{},"40":{},"41":{},"42":{},"44":{},"52":{}},"component":{},"keyword":{}}],["g.h",{"_index":746,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["g1",{"_index":9304,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["g2",{"_index":9313,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gadget",{"_index":7512,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["gain",{"_index":4759,"title":{},"name":{},"text":{"30":{},"31":{}},"component":{},"keyword":{}}],["galoi",{"_index":6870,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["galois/count",{"_index":1086,"title":{},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["garbag",{"_index":4317,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["gari",{"_index":81,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["gate",{"_index":5243,"title":{},"name":{},"text":{"35":{},"49":{},"51":{}},"component":{},"keyword":{}}],["gather",{"_index":4693,"title":{"51-127":{}},"name":{},"text":{"29":{},"49":{},"51":{}},"component":{},"keyword":{}}],["gauthier",{"_index":78,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["gave",{"_index":4897,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["gb/t",{"_index":1163,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gcc",{"_index":4613,"title":{},"name":{},"text":{"29":{},"45":{},"57":{}},"component":{},"keyword":{}}],["gcc10",{"_index":9827,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["gcm",{"_index":1087,"title":{"52-20":{},"52-23":{}},"name":{},"text":{"7":{},"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["gcm/gmac",{"_index":8878,"title":{"52-13":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["geilen",{"_index":1617,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["geilen:1",{"_index":1738,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["gener",{"_index":527,"title":{"29-5":{},"31-8":{},"37-3":{},"49-104":{},"49-105":{}},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"60":{},"61":{},"63":{},"65":{}},"component":{},"keyword":{}}],["generator.pdf",{"_index":1262,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["genuin",{"_index":3093,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["get",{"_index":1596,"title":{},"name":{},"text":{"8":{},"12":{},"49":{}},"component":{},"keyword":{}}],["get_es_bitstr",{"_index":6939,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["get_velem(vd",{"_index":9035,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_velem(vd,egw=128,i",{"_index":9145,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_velem(vs1",{"_index":9098,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_velem(vs1,egw=128,i",{"_index":9146,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_velem(vs1,i",{"_index":9111,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_velem(vs2",{"_index":9037,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["get_velem(vs2,i",{"_index":9113,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["getbyt",{"_index":7452,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["getbyte(rs1",{"_index":7458,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["getbyte(rs2",{"_index":7459,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["getbyte(x",{"_index":7453,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["getnois",{"_index":6578,"title":{"49-127":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["gf",{"_index":7091,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gf(2",{"_index":4558,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["gf(2128",{"_index":9132,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gf[2",{"_index":9131,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gfmul",{"_index":7099,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gfmul(s0",{"_index":7135,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gfmul(s1",{"_index":7136,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gfmul(s2",{"_index":7137,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gfmul(s3",{"_index":7138,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gfmul(so",{"_index":7107,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["gg1(x",{"_index":9326,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gg2(x",{"_index":9327,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gg_j(e",{"_index":9301,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gg_j(e1",{"_index":9311,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gg_j(x",{"_index":9328,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gharachorloo",{"_index":884,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ghash",{"_index":4566,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["ghashh",{"_index":8946,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ghash’",{"_index":9133,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ghi",{"_index":6149,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["ghz",{"_index":5252,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["gi",{"_index":9265,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["gianluca",{"_index":639,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["gib",{"_index":4074,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["gibbon",{"_index":887,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gift",{"_index":1124,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["gigapag",{"_index":4225,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["github",{"_index":6594,"title":{},"name":{},"text":{"49":{},"52":{},"57":{}},"component":{},"keyword":{}}],["give",{"_index":2013,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"21":{},"28":{},"37":{},"38":{},"41":{},"45":{},"48":{},"49":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["given",{"_index":299,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"63":{}},"component":{},"keyword":{}}],["glew",{"_index":80,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["global",{"_index":446,"title":{"10-8":{},"40-4":{}},"name":{},"text":{"4":{},"8":{},"10":{},"16":{},"21":{},"26":{},"33":{},"40":{},"41":{},"48":{},"62":{}},"component":{},"keyword":{}}],["globl",{"_index":4704,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["gm/t",{"_index":1166,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gmac",{"_index":1088,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["gmbh",{"_index":1363,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gmo",{"_index":5833,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["gmo.gmo",{"_index":5903,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["gmo0",{"_index":5978,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["go",{"_index":3902,"title":{},"name":{},"text":{"21":{},"22":{},"26":{},"41":{},"49":{}},"component":{},"keyword":{}}],["goal",{"_index":2565,"title":{"49-78":{}},"name":{},"text":{"10":{},"35":{},"38":{},"44":{},"49":{}},"component":{},"keyword":{}}],["goe",{"_index":2111,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["goldberg",{"_index":1429,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gone",{"_index":7066,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["good",{"_index":4770,"title":{},"name":{},"text":{"30":{},"31":{},"49":{},"52":{},"53":{}},"component":{},"keyword":{}}],["googl",{"_index":3454,"title":{},"name":{},"text":{"13":{},"30":{}},"component":{},"keyword":{}}],["govern",{"_index":3456,"title":{},"name":{},"text":{"13":{},"49":{},"56":{}},"component":{},"keyword":{}}],["gpa",{"_index":4084,"title":{},"name":{},"text":{"26":{},"27":{}},"component":{},"keyword":{}}],["gpr",{"_index":6502,"title":{},"name":{},"text":{"47":{},"51":{},"52":{}},"component":{},"keyword":{}}],["gpr[rs1",{"_index":6875,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["gpr[rs2",{"_index":6876,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["gradual",{"_index":4808,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["grain",{"_index":3020,"title":{"26-31":{}},"name":{},"text":{"10":{},"26":{},"34":{},"45":{},"50":{},"63":{}},"component":{},"keyword":{}}],["grant",{"_index":1936,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"22":{},"31":{},"33":{},"49":{}},"component":{},"keyword":{}}],["granul",{"_index":234,"title":{"10-44":{}},"name":{},"text":{"4":{},"10":{},"28":{},"29":{},"34":{},"41":{},"48":{},"51":{}},"component":{},"keyword":{}}],["granular",{"_index":2893,"title":{"48-9":{}},"name":{},"text":{"10":{},"19":{},"26":{},"33":{},"40":{},"41":{},"48":{},"51":{}},"component":{},"keyword":{}}],["graph",{"_index":7515,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["graphic",{"_index":3471,"title":{},"name":{},"text":{"15":{},"30":{}},"component":{},"keyword":{}}],["gratuit",{"_index":4280,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["gray",{"_index":638,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["great",{"_index":6821,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["greater",{"_index":1631,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"19":{},"25":{},"31":{},"35":{},"38":{},"45":{},"49":{},"50":{},"51":{},"58":{},"64":{}},"component":{},"keyword":{}}],["greatest",{"_index":4974,"title":{},"name":{},"text":{"31":{},"49":{},"51":{}},"component":{},"keyword":{}}],["greatli",{"_index":3845,"title":{},"name":{},"text":{"21":{},"50":{}},"component":{},"keyword":{}}],["green",{"_index":7945,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["greg",{"_index":73,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["grevi",{"_index":6858,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["group",{"_index":3891,"title":{"51-9":{},"51-142":{},"51-143":{},"51-147":{},"52-5":{}},"name":{},"text":{"21":{},"22":{},"26":{},"29":{},"30":{},"31":{},"33":{},"34":{},"41":{},"49":{},"51":{},"52":{},"57":{},"60":{},"63":{}},"component":{},"keyword":{}}],["grover",{"_index":1403,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["grover’",{"_index":7075,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["grow",{"_index":4374,"title":{},"name":{},"text":{"27":{},"41":{},"50":{}},"component":{},"keyword":{}}],["growth",{"_index":2248,"title":{},"name":{},"text":{"9":{},"36":{}},"component":{},"keyword":{}}],["guarante",{"_index":1944,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"21":{},"25":{},"26":{},"27":{},"28":{},"29":{},"33":{},"35":{},"36":{},"37":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"51":{},"57":{},"59":{},"63":{},"64":{},"65":{}},"component":{},"keyword":{}}],["guard",{"_index":3097,"title":{},"name":{},"text":{"11":{},"28":{},"50":{},"55":{}},"component":{},"keyword":{}}],["guess",{"_index":6760,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["guest",{"_index":1458,"title":{"8-6":{},"8-12":{},"8-31":{},"8-32":{},"33-12":{}},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"22":{},"25":{},"26":{},"27":{},"33":{},"38":{},"49":{},"51":{}},"component":{},"keyword":{}}],["guest’",{"_index":2080,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["guid",{"_index":1227,"title":{"29-72":{}},"name":{},"text":{"7":{},"45":{},"49":{}},"component":{},"keyword":{}}],["guida",{"_index":640,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["guidanc",{"_index":1181,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["guide.html",{"_index":1358,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["guidelin",{"_index":5546,"title":{"40-16":{},"40-17":{}},"name":{},"text":{"40":{},"49":{},"52":{},"64":{}},"component":{},"keyword":{}}],["guo",{"_index":82,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["gupta",{"_index":888,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["gva",{"_index":1648,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["gva=1",{"_index":1651,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["h",{"_index":571,"title":{"8":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"17":{},"19":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"36":{},"37":{},"40":{},"42":{},"43":{},"48":{},"49":{},"52":{},"59":{}},"component":{},"keyword":{}}],["h'",{"_index":4458,"title":{},"name":{},"text":{"28":{},"33":{}},"component":{},"keyword":{}}],["h),(k),(a),(c),(d),(g",{"_index":5655,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["h,g.f,e,d,c,b,a",{"_index":9259,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["half",{"_index":2087,"title":{"59":{},"51-140":{},"51-141":{},"59-1":{},"59-2":{},"59-3":{},"59-4":{},"59-5":{},"59-6":{}},"name":{},"text":{"8":{},"12":{},"16":{},"22":{},"27":{},"29":{},"34":{},"35":{},"37":{},"38":{},"43":{},"49":{},"51":{},"52":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["half/bottom",{"_index":3518,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["halfword",{"_index":2532,"title":{"54":{},"54-1":{}},"name":{},"text":{"10":{},"29":{},"34":{},"38":{},"49":{},"51":{},"54":{},"57":{}},"component":{},"keyword":{}}],["halv",{"_index":4562,"title":{},"name":{},"text":{"29":{},"30":{},"35":{},"49":{},"51":{},"55":{}},"component":{},"keyword":{}}],["ham",{"_index":4611,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["hamburg",{"_index":641,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{},"keyword":{}}],["hammock",{"_index":833,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["han",{"_index":621,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["hand",{"_index":2626,"title":{},"name":{},"text":{"10":{},"15":{},"21":{},"22":{},"26":{},"33":{},"40":{},"41":{},"47":{},"49":{},"62":{}},"component":{},"keyword":{}}],["handl",{"_index":596,"title":{"30-11":{},"51-131":{},"57-28":{},"57-29":{},"57-30":{},"57-34":{},"57-49":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"16":{},"18":{},"19":{},"20":{},"26":{},"27":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["handle_illeg",{"_index":6676,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["handler",{"_index":2120,"title":{"16-2":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"27":{},"35":{},"37":{},"38":{},"39":{},"45":{},"50":{},"51":{},"57":{},"64":{}},"component":{},"keyword":{}}],["handler’",{"_index":3818,"title":{},"name":{},"text":{"20":{}},"component":{},"keyword":{}}],["hang",{"_index":6927,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["happen",{"_index":2044,"title":{},"name":{},"text":{"8":{},"21":{},"28":{},"30":{},"31":{},"35":{},"40":{},"41":{},"45":{}},"component":{},"keyword":{}}],["hard",{"_index":2864,"title":{},"name":{},"text":{"10":{},"21":{},"25":{},"49":{}},"component":{},"keyword":{}}],["harden",{"_index":4314,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hardwar",{"_index":243,"title":{"10-19":{},"26-32":{},"35-2":{},"38-1":{},"49-111":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"15":{},"16":{},"17":{},"19":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"49":{},"51":{},"52":{},"55":{},"57":{},"61":{},"62":{}},"component":{},"keyword":{}}],["hardware/softwar",{"_index":4315,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hardwir",{"_index":1510,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"39":{},"45":{},"49":{},"60":{}},"component":{},"keyword":{}}],["hardwired—for",{"_index":2973,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["harm",{"_index":2185,"title":{},"name":{},"text":{"8":{},"49":{}},"component":{},"keyword":{}}],["harmless",{"_index":3936,"title":{},"name":{},"text":{"22":{},"49":{}},"component":{},"keyword":{}}],["harmon",{"_index":7012,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hart",{"_index":350,"title":{"10-6":{},"38-2":{},"41-6":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"26":{},"28":{},"33":{},"34":{},"35":{},"38":{},"40":{},"41":{},"45":{},"48":{},"50":{},"51":{},"56":{},"62":{},"63":{},"65":{},"67":{}},"component":{},"keyword":{}}],["hart.start.*po",{"_index":5888,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["hart/cor",{"_index":5232,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["hart_id",{"_index":6076,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["hart’",{"_index":2424,"title":{},"name":{},"text":{"10":{},"22":{},"26":{},"28":{},"38":{},"40":{},"41":{},"48":{},"63":{}},"component":{},"keyword":{}}],["hash",{"_index":987,"title":{"49-12":{},"49-14":{},"52-15":{},"52-17":{}},"name":{},"text":{"7":{},"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["hash_drbg",{"_index":7041,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hasn't",{"_index":9800,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["hauser",{"_index":86,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["have",{"_index":2052,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"25":{},"26":{},"27":{},"31":{},"36":{},"37":{},"38":{},"40":{},"45":{},"48":{},"50":{},"51":{},"52":{},"62":{}},"component":{},"keyword":{}}],["hazard",{"_index":8606,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["hbi",{"_index":3489,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["hcontext",{"_index":3286,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hcounteren",{"_index":1461,"title":{"8-8":{},"25-9":{}},"name":{},"text":{"8":{},"12":{},"23":{},"25":{}},"component":{},"keyword":{}}],["head",{"_index":9718,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["header",{"_index":9661,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["health",{"_index":6575,"title":{"49-112":{},"49-121":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["heavili",{"_index":6612,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hedeleg",{"_index":1453,"title":{"8-4":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["hedelegh",{"_index":230,"title":{},"name":{},"text":{"4":{},"8":{},"12":{},"22":{}},"component":{},"keyword":{}}],["hee",{"_index":3488,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["heisenberg",{"_index":7055,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["held",{"_index":1951,"title":{},"name":{},"text":{"8":{},"12":{},"19":{},"26":{},"28":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"50":{},"51":{},"52":{},"55":{},"60":{},"62":{}},"component":{},"keyword":{}}],["help",{"_index":2405,"title":{},"name":{},"text":{"10":{},"11":{},"20":{},"26":{},"28":{},"31":{},"32":{},"35":{},"36":{},"40":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{}},"component":{},"keyword":{}}],["henc",{"_index":1691,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"26":{},"29":{},"31":{},"35":{},"36":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"51":{},"57":{},"60":{},"62":{},"64":{}},"component":{},"keyword":{}}],["henceforth",{"_index":2464,"title":{},"name":{},"text":{"10":{},"64":{}},"component":{},"keyword":{}}],["hening",{"_index":1216,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hennessi",{"_index":889,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["henvcfg",{"_index":253,"title":{"8-7":{},"25-10":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"22":{},"25":{},"27":{},"33":{}},"component":{},"keyword":{}}],["henvcfg.adu",{"_index":2775,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["henvcfg.cbcf",{"_index":5112,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["henvcfg.cbi",{"_index":5108,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["henvcfg.cbz",{"_index":5116,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["henvcfg.dt",{"_index":1796,"title":{},"name":{},"text":{"8":{},"10":{},"24":{}},"component":{},"keyword":{}}],["henvcfg.lp",{"_index":3053,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["henvcfg.pbmt",{"_index":2082,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["henvcfg.pmm",{"_index":4399,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["henvcfg.ss",{"_index":2785,"title":{},"name":{},"text":{"10":{},"11":{},"50":{}},"component":{},"keyword":{}}],["henvcfg.sse=0",{"_index":3073,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["henvcfgh",{"_index":385,"title":{},"name":{},"text":{"4":{},"8":{},"12":{},"22":{}},"component":{},"keyword":{}}],["herber",{"_index":643,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["herd",{"_index":5579,"title":{"41-2":{}},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["here",{"_index":2186,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"27":{},"30":{},"35":{},"38":{},"40":{},"41":{},"49":{},"51":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["herein",{"_index":6584,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["hern'andez",{"_index":1376,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["heterogen",{"_index":5421,"title":{},"name":{},"text":{"38":{},"51":{}},"component":{},"keyword":{}}],["heurist",{"_index":6886,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hex",{"_index":3121,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["hexadecim",{"_index":2408,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["hfenc",{"_index":2092,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["hfence.gvma",{"_index":1858,"title":{},"name":{},"text":{"8":{},"11":{},"26":{},"27":{}},"component":{},"keyword":{}}],["hfence.gvma’",{"_index":1967,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hfence.vvma",{"_index":1941,"title":{},"name":{},"text":{"8":{},"11":{},"26":{}},"component":{},"keyword":{}}],["hgatp",{"_index":1465,"title":{"8-12":{}},"name":{},"text":{"8":{},"10":{},"12":{},"27":{}},"component":{},"keyword":{}}],["hgatp.mod",{"_index":1975,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{}},"component":{},"keyword":{}}],["hgatp.mode=sv48x4",{"_index":4405,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hgatp.mode=sv57x4",{"_index":4404,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hgatp.vmid",{"_index":1946,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hgeie",{"_index":1460,"title":{"8-6":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["hgeip",{"_index":1459,"title":{"8-6":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["hi",{"_index":9264,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["hi_half",{"_index":4639,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["hide",{"_index":2734,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{},"keyword":{}}],["hideleg",{"_index":1454,"title":{"8-4":{}},"name":{},"text":{"8":{},"12":{},"17":{}},"component":{},"keyword":{}}],["hie",{"_index":1457,"title":{"8-5":{},"25-8":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["hie.sgei",{"_index":1699,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hie.vsei",{"_index":1704,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hie.vssi",{"_index":1712,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hie.vsti",{"_index":1709,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{},"keyword":{}}],["hierarch",{"_index":2966,"title":{},"name":{},"text":{"10":{},"45":{}},"component":{},"keyword":{}}],["hierarchi",{"_index":4128,"title":{},"name":{},"text":{"26":{},"33":{},"38":{},"40":{},"41":{},"64":{}},"component":{},"keyword":{}}],["hierarchy—should",{"_index":10186,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["high",{"_index":965,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"15":{},"21":{},"22":{},"25":{},"26":{},"27":{},"29":{},"34":{},"39":{},"40":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"60":{},"62":{}},"component":{},"keyword":{}}],["higher",{"_index":2067,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"21":{},"22":{},"26":{},"27":{},"30":{},"31":{},"33":{},"37":{},"38":{},"40":{},"49":{},"50":{},"59":{},"60":{}},"component":{},"keyword":{}}],["highest",{"_index":2107,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"45":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["highestsetbit",{"_index":4594,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["highestsetbit(r",{"_index":4602,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["highestsetbit32",{"_index":4603,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["highli",{"_index":899,"title":{},"name":{},"text":{"7":{},"10":{},"28":{},"38":{},"46":{},"49":{},"52":{},"55":{}},"component":{},"keyword":{}}],["highlight",{"_index":5557,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["hill",{"_index":946,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hindman",{"_index":785,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hindsight",{"_index":4908,"title":{},"name":{},"text":{"31":{},"38":{},"40":{}},"component":{},"keyword":{}}],["hint",{"_index":262,"title":{"64":{},"65":{},"31-15":{},"45-15":{},"47-6":{}},"name":{},"text":{"4":{},"10":{},"26":{},"29":{},"31":{},"33":{},"34":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["hinval",{"_index":4376,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hinval.gvma",{"_index":1987,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["hinval.vvma",{"_index":1988,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["hip",{"_index":1456,"title":{"8-5":{},"25-8":{}},"name":{},"text":{"8":{},"12":{},"25":{}},"component":{},"keyword":{}}],["hip.sgeip",{"_index":1698,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hip.vseip",{"_index":1703,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hip.vssip",{"_index":1711,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hip.vstip",{"_index":1708,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{},"keyword":{}}],["hip/hi",{"_index":4062,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["histogram",{"_index":7021,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["histor",{"_index":6602,"title":{},"name":{},"text":{"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["histori",{"_index":2959,"title":{"13":{}},"name":{"13":{}},"text":{"10":{},"13":{},"19":{}},"component":{},"keyword":{}}],["hlv",{"_index":1625,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["hlv.b",{"_index":1920,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlv.bu",{"_index":1921,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlv.d",{"_index":1926,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlv.h",{"_index":1922,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlv.hu",{"_index":1923,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlv.w",{"_index":1924,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlv.wu",{"_index":1925,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlvx",{"_index":1626,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["hlvx.hu",{"_index":1933,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hlvx.wu",{"_index":1934,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hmac_drbg",{"_index":7042,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hodg",{"_index":770,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hold",{"_index":1614,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"16":{},"17":{},"19":{},"26":{},"27":{},"28":{},"30":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"60":{},"62":{}},"component":{},"keyword":{}}],["hole",{"_index":2291,"title":{},"name":{},"text":{"9":{},"10":{},"33":{},"34":{},"51":{}},"component":{},"keyword":{}}],["homogen",{"_index":7923,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["homonym",{"_index":4071,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["honor",{"_index":2854,"title":{},"name":{},"text":{"10":{},"21":{}},"component":{},"keyword":{}}],["hook",{"_index":2552,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["hope",{"_index":4780,"title":{},"name":{},"text":{"30":{},"38":{},"49":{},"52":{}},"component":{},"keyword":{}}],["horizont",{"_index":2640,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{},"keyword":{}}],["horner",{"_index":87,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["host",{"_index":1485,"title":{},"name":{},"text":{"8":{},"15":{},"22":{},"38":{},"49":{}},"component":{},"keyword":{}}],["hostil",{"_index":6898,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hot",{"_index":794,"title":{},"name":{},"text":{"7":{},"10":{},"19":{}},"component":{},"keyword":{}}],["hotpar~'09",{"_index":796,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hoult",{"_index":646,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["hpm",{"_index":3542,"title":{},"name":{},"text":{"17":{},"19":{}},"component":{},"keyword":{}}],["hpm_n_",{"_index":1801,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["hpmcounter",{"_index":1804,"title":{},"name":{},"text":{"8":{},"23":{}},"component":{},"keyword":{}}],["hpmcounter3",{"_index":3237,"title":{},"name":{},"text":{"12":{},"35":{}},"component":{},"keyword":{}}],["hpmcounter31",{"_index":3239,"title":{},"name":{},"text":{"12":{},"35":{}},"component":{},"keyword":{}}],["hpmcounter312",{"_index":3558,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmcounter31h",{"_index":3242,"title":{},"name":{},"text":{"12":{},"35":{}},"component":{},"keyword":{}}],["hpmcounter31h2",{"_index":3559,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmcounter32",{"_index":3554,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmcounter3h",{"_index":3240,"title":{},"name":{},"text":{"12":{},"35":{}},"component":{},"keyword":{}}],["hpmcounter3h2",{"_index":3555,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmcounter4",{"_index":3238,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["hpmcounter4h",{"_index":3241,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["hpmcountern",{"_index":2718,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["hpmcounternh",{"_index":2722,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["hpmevent312",{"_index":3560,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmevent31h23",{"_index":3561,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmevent32",{"_index":3556,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmevent3h23",{"_index":3557,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmeventi",{"_index":3562,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hpmn",{"_index":2717,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["hr0011",{"_index":3445,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["hro",{"_index":3283,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["hrw",{"_index":2276,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{},"keyword":{}}],["hs",{"_index":1488,"title":{},"name":{},"text":{"8":{},"9":{},"11":{},"19":{},"24":{},"25":{},"26":{},"27":{},"49":{}},"component":{},"keyword":{}}],["hstateen",{"_index":3947,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen0",{"_index":2303,"title":{},"name":{},"text":{"9":{},"12":{},"17":{},"19":{},"22":{},"57":{}},"component":{},"keyword":{}}],["hstateen0.ctr",{"_index":3716,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["hstateen0.ctr=0",{"_index":3718,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["hstateen0.ctr=1",{"_index":3717,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["hstateen0[60",{"_index":3568,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hstateen0[60]=0",{"_index":2305,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["hstateen0h",{"_index":3301,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen1",{"_index":3298,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen1h",{"_index":3302,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen2",{"_index":3299,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen2h",{"_index":3303,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen3",{"_index":3300,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen3h",{"_index":3304,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["hstateen4",{"_index":4000,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen4h",{"_index":4002,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen5",{"_index":4004,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen5h",{"_index":4006,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen6",{"_index":4008,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen6h",{"_index":4010,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen7",{"_index":4012,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstateen7h",{"_index":4014,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["hstatu",{"_index":1452,"title":{"8-3":{}},"name":{},"text":{"8":{},"12":{},"27":{},"56":{}},"component":{},"keyword":{}}],["hstatus.hu=0",{"_index":1853,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.hu=1",{"_index":1907,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.hupmm",{"_index":4397,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hstatus.spv",{"_index":2116,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.spv=0",{"_index":2199,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.spvp",{"_index":2010,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.spvp=0",{"_index":1908,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.spvp=1",{"_index":1909,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.vgein",{"_index":1705,"title":{},"name":{},"text":{"8":{},"22":{}},"component":{},"keyword":{}}],["hstatus.vsb",{"_index":1881,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.vtsr=1",{"_index":2098,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hstatus.vtvm",{"_index":1960,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["hstatus.vtvm=1",{"_index":2099,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["hstatus.vtw=1",{"_index":2097,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hsv",{"_index":1627,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["hsv.b",{"_index":1928,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hsv.d",{"_index":1931,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hsv.h",{"_index":1929,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hsv.w",{"_index":1930,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hsxlen",{"_index":1574,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{},"keyword":{}}],["hsxlen=32",{"_index":1579,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hsxlen=64",{"_index":1580,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["htimedelta",{"_index":1462,"title":{"8-9":{}},"name":{},"text":{"8":{},"12":{},"25":{}},"component":{},"keyword":{}}],["htimedeltah",{"_index":1534,"title":{},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["htinst",{"_index":1464,"title":{"8-11":{},"8-37":{}},"name":{},"text":{"8":{},"12":{},"33":{}},"component":{},"keyword":{}}],["http://alloy.mit.edu",{"_index":5818,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["http://arxiv.org/abs/1802.09517",{"_index":1451,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["http://arxiv.org/pdf/qu",{"_index":1409,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["http://csrc.nist.gov/groups/st/post",{"_index":1052,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["http://diy.inria.fr",{"_index":5922,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["http://diy.inria.fr/cats7/riscv",{"_index":5923,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100976_0000_00_en",{"_index":1271,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["http://svn.clairexen.net/handicraft/2020/lut4perm/demo02.cc",{"_index":7501,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["http://www.cl.cam.ac.uk",{"_index":6016,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["http://www.gmbz.org.cn/upload/2018",{"_index":1169,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://apps.nsa.gov/iaarchive/programs/iad",{"_index":1198,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://arxiv.org/abs/2102.02196",{"_index":1178,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://arxiv.org/abs/qu",{"_index":1394,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://arxiv.org/pdf/1910.01700.pdf",{"_index":1422,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://commoncriteriaportal.org/cc",{"_index":1191,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://csrc.nist.gov/csrc/media/projects/cryptograph",{"_index":1184,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.1145/248052.248106",{"_index":923,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.1145/844128.844138",{"_index":1443,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.6028/nist.fips.140",{"_index":1192,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.6028/nist.fips.180",{"_index":994,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.6028/nist.fips.186",{"_index":1427,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.6028/nist.fips.197",{"_index":1000,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.6028/nist.fips.202",{"_index":1096,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://doi.org/10.6028/nist.sp.800",{"_index":1091,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://github.com/daniellustig/riscv",{"_index":5819,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["https://github.com/litmu",{"_index":5585,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["https://github.com/rem",{"_index":973,"title":{},"name":{},"text":{"7":{},"41":{}},"component":{},"keyword":{}}],["https://github.com/riscv/riscv",{"_index":7088,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://github.com/scarv/xcrypto",{"_index":1083,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://github.com/usnistgov/90b",{"_index":6891,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://github.com/usnistgov/sp800",{"_index":6895,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://github.com/veorq/cryptocod",{"_index":6825,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://hal.arch",{"_index":937,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://software.intel.com/content/www/us/en/develop/articles/intel",{"_index":1357,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://summerschool",{"_index":6830,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://tches.iacr.org/index.php/tches/article/view/8729",{"_index":1078,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.amd.com/system/files/techdocs/amd",{"_index":1261,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.amongbytes.com/post/20210709",{"_index":6838,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://www.bearssl.org/constanttime.html",{"_index":6822,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://www.bsi.bund.de/shareddocs/downloads/de/bsi/zertifizierung/interpretationen/ais_31_functionality_classes_for_random_number_generators_e.html",{"_index":1030,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.bsi.bund.de/shareddocs/downloads/en/bsi/publications/studies/linuxrng/linuxrng_en.pdf",{"_index":1364,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.cl.cam.ac.uk/~rja14/book.html",{"_index":1232,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.imperialviolet.org/2010/04/01/ctgrind.html",{"_index":6834,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://www.itu.int/rec/t",{"_index":1369,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.kb.cert.org/vuls/id/997481",{"_index":6839,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["https://www.rambus.com/security/crypto",{"_index":1331,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["https://www.usenix.org/conference/usenixsecurity20/presentation/moghimi",{"_index":1223,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["htval",{"_index":1463,"title":{"8-10":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["htval’",{"_index":1813,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hu",{"_index":1623,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hu=0",{"_index":1629,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["hu=1",{"_index":1628,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["huawei",{"_index":3455,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["huffman",{"_index":648,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["human",{"_index":2417,"title":{},"name":{},"text":{"10":{},"49":{}},"component":{},"keyword":{}}],["hundr",{"_index":4299,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["hung",{"_index":7019,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hungri",{"_index":7037,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hupmm",{"_index":4395,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hurley",{"_index":1374,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hurt",{"_index":9086,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["huyghen",{"_index":7013,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["hvien",{"_index":3576,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hvip",{"_index":1455,"title":{"8-5":{},"25-8":{}},"name":{},"text":{"8":{},"12":{},"17":{}},"component":{},"keyword":{}}],["hvip.lcofi",{"_index":3578,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["hvip.vstip",{"_index":1710,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{},"keyword":{}}],["hwacha",{"_index":6132,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["hwasan",{"_index":4312,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["hyesoon",{"_index":844,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["hyp",{"_index":2773,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["hypervisor",{"_index":180,"title":{"8":{},"8-2":{},"8-3":{},"8-4":{},"8-5":{},"8-6":{},"8-7":{},"8-8":{},"8-9":{},"8-10":{},"8-11":{},"8-12":{},"8-21":{},"8-22":{},"8-23":{},"25-6":{},"25-8":{},"25-9":{},"33-15":{},"42-7":{}},"name":{"8":{}},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"22":{},"24":{},"25":{},"26":{},"27":{},"33":{},"38":{},"42":{},"49":{},"51":{},"64":{}},"component":{},"keyword":{}}],["hypothet",{"_index":4276,"title":{},"name":{},"text":{"26":{},"40":{}},"component":{},"keyword":{}}],["i'",{"_index":3012,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["i+1",{"_index":8618,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["i+offset",{"_index":8611,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["i.",{"_index":2000,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"50":{},"51":{},"52":{},"55":{},"57":{},"58":{},"60":{},"61":{}},"component":{},"keyword":{}}],["i.e.,zvfbfmin",{"_index":4835,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["i/en",{"_index":1372,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["i/o",{"_index":311,"title":{"10-39":{},"40-15":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"28":{},"33":{},"34":{},"38":{},"40":{},"41":{},"45":{},"48":{},"56":{},"62":{},"67":{}},"component":{},"keyword":{}}],["i<0",{"_index":4190,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["i<n",{"_index":8581,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["i=0",{"_index":8580,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["i=i",{"_index":4189,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["i=level",{"_index":4179,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["i>0",{"_index":4192,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["iacr",{"_index":1073,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ialign",{"_index":471,"title":{},"name":{},"text":{"4":{},"10":{},"16":{},"26":{},"34":{},"38":{},"45":{}},"component":{},"keyword":{}}],["ialign=16",{"_index":4865,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{},"keyword":{}}],["ialign=32",{"_index":1663,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"45":{}},"component":{},"keyword":{}}],["ibm",{"_index":864,"title":{},"name":{},"text":{"7":{},"31":{},"49":{},"51":{}},"component":{},"keyword":{}}],["ic0",{"_index":7470,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic0[15",{"_index":7482,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic0[23..16",{"_index":7485,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic0[31..24",{"_index":7472,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic1",{"_index":7469,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic1[15",{"_index":7486,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic1[23..16",{"_index":7473,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic1[31..24",{"_index":7476,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic2",{"_index":7468,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic2[15",{"_index":7474,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic2[23..16",{"_index":7477,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic2[31..24",{"_index":7480,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic3",{"_index":7466,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic3[15",{"_index":7478,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic3[23..16",{"_index":7481,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ic3[31..24",{"_index":7484,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["id",{"_index":2313,"title":{"10-3":{},"10-4":{},"10-5":{},"10-6":{}},"name":{},"text":{"10":{},"12":{},"26":{},"51":{}},"component":{},"keyword":{}}],["idea",{"_index":3894,"title":{},"name":{},"text":{"21":{},"30":{},"40":{}},"component":{},"keyword":{}}],["ideal",{"_index":7000,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["idempot",{"_index":423,"title":{"10-47":{},"57-34":{}},"name":{},"text":{"4":{},"10":{},"11":{},"26":{},"40":{},"51":{},"54":{},"57":{}},"component":{},"keyword":{}}],["iden",{"_index":5862,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ident",{"_index":2032,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"22":{},"26":{},"27":{},"31":{},"38":{},"39":{},"40":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["identif",{"_index":6770,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["identifi",{"_index":199,"title":{"26-34":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"19":{},"26":{},"27":{},"30":{},"33":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["idiom",{"_index":4473,"title":{},"name":{},"text":{"28":{},"29":{},"51":{}},"component":{},"keyword":{}}],["idl",{"_index":2560,"title":{},"name":{},"text":{"10":{},"45":{}},"component":{},"keyword":{}}],["idx",{"_index":4678,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["ie",{"_index":5979,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["iec",{"_index":5431,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["ieee",{"_index":730,"title":{},"name":{},"text":{"7":{},"30":{},"34":{},"36":{},"37":{},"38":{},"43":{},"51":{},"58":{},"59":{}},"component":{},"keyword":{}}],["ieee/acm",{"_index":855,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["if(((vstart%egs)<>0",{"_index":9088,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["if((unsigned(rnd[3:0",{"_index":9076,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["if(lmul*vlen",{"_index":9030,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["if(unsigned(rnum",{"_index":6675,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ifd",{"_index":4877,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["iff",{"_index":6106,"title":{},"name":{},"text":{"41":{},"51":{}},"component":{},"keyword":{}}],["ignor",{"_index":1807,"title":{"12-4":{},"27-4":{}},"name":{},"text":{"8":{},"10":{},"12":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"36":{},"37":{},"38":{},"40":{},"45":{},"47":{},"49":{},"51":{},"52":{},"54":{},"57":{},"59":{},"60":{},"63":{},"64":{},"66":{}},"component":{},"keyword":{}}],["ii",{"_index":13,"title":{"3-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"34":{},"38":{},"42":{},"60":{},"62":{},"64":{}},"component":{},"keyword":{}}],["iid",{"_index":7005,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ilen",{"_index":2757,"title":{},"name":{},"text":{"10":{},"26":{},"38":{}},"component":{},"keyword":{}}],["ill",{"_index":5266,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["illeg",{"_index":531,"title":{"31-11":{},"33-11":{},"51-11":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"19":{},"22":{},"25":{},"26":{},"27":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"62":{},"66":{}},"component":{},"keyword":{}}],["illustr",{"_index":2176,"title":{},"name":{},"text":{"8":{},"49":{},"50":{},"51":{},"55":{},"57":{}},"component":{},"keyword":{}}],["imafd",{"_index":5194,"title":{},"name":{},"text":{"34":{},"38":{},"44":{}},"component":{},"keyword":{}}],["imafdc",{"_index":6197,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["imafdq",{"_index":5188,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["imafdqlcbkjtpvh",{"_index":6125,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["imafdzicsr_zifencei",{"_index":6116,"title":{},"name":{},"text":{"42":{},"44":{}},"component":{},"keyword":{}}],["imag",{"_index":3480,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["imaginari",{"_index":7948,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["imm",{"_index":4545,"title":{},"name":{},"text":{"29":{},"31":{},"44":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["imm12(ra",{"_index":6449,"title":{},"name":{},"text":{"45":{},"50":{}},"component":{},"keyword":{}}],["imm12(ra)_",{"_index":6447,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["imm20",{"_index":6446,"title":{},"name":{},"text":{"45":{},"50":{}},"component":{},"keyword":{}}],["imm=0",{"_index":4994,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{},"keyword":{}}],["imm[10:1",{"_index":6425,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["imm[11:0",{"_index":5117,"title":{},"name":{},"text":{"33":{},"44":{}},"component":{},"keyword":{}}],["imm[11:5",{"_index":6200,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["imm[12|10:5",{"_index":6201,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["imm[20|10:1|11|19:12",{"_index":6204,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["imm[31:12",{"_index":6203,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["imm[4:0",{"_index":5118,"title":{},"name":{},"text":{"33":{},"44":{},"51":{}},"component":{},"keyword":{}}],["imm[4:1|11",{"_index":6202,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["imm[5",{"_index":6504,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["imm[x",{"_index":6422,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["immedi",{"_index":316,"title":{"31-9":{},"45-4":{},"45-6":{},"47-3":{},"58-1":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"23":{},"25":{},"26":{},"29":{},"31":{},"34":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"61":{},"62":{},"64":{}},"component":{},"keyword":{}}],["imm≠0",{"_index":4997,"title":{},"name":{},"text":{"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["impact",{"_index":1564,"title":{},"name":{},"text":{"8":{},"10":{},"17":{},"19":{},"26":{},"27":{},"31":{},"33":{},"45":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["imped",{"_index":4459,"title":{},"name":{},"text":{"28":{},"35":{}},"component":{},"keyword":{}}],["implement",{"_index":226,"title":{"10-5":{},"40-17":{},"49-117":{},"51-2":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["implementation’",{"_index":2523,"title":{},"name":{},"text":{"10":{},"26":{},"51":{},"64":{}},"component":{},"keyword":{}}],["impli",{"_index":336,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"19":{},"26":{},"27":{},"28":{},"33":{},"34":{},"38":{},"39":{},"40":{},"42":{},"49":{},"51":{},"57":{},"67":{}},"component":{},"keyword":{}}],["implic",{"_index":3809,"title":{"60-6":{}},"name":{},"text":{"19":{},"31":{},"37":{},"40":{},"49":{}},"component":{},"keyword":{}}],["implicit",{"_index":422,"title":{"12-8":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"16":{},"17":{},"19":{},"26":{},"27":{},"28":{},"34":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["implicitli",{"_index":2605,"title":{},"name":{},"text":{"10":{},"12":{},"19":{},"22":{},"26":{},"38":{},"40":{},"45":{},"48":{},"50":{},"51":{},"58":{},"59":{},"66":{}},"component":{},"keyword":{}}],["import",{"_index":2696,"title":{},"name":{},"text":{"10":{},"21":{},"30":{},"31":{},"35":{},"38":{},"40":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["importantli",{"_index":5489,"title":{},"name":{},"text":{"38":{},"40":{},"49":{}},"component":{},"keyword":{}}],["impos",{"_index":2371,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"28":{},"33":{},"40":{},"45":{},"51":{},"62":{},"66":{}},"component":{},"keyword":{}}],["imposs",{"_index":1696,"title":{},"name":{},"text":{"8":{},"10":{},"40":{},"45":{},"52":{}},"component":{},"keyword":{}}],["impract",{"_index":4432,"title":{},"name":{},"text":{"28":{},"38":{}},"component":{},"keyword":{}}],["imprecis",{"_index":2600,"title":{"51-133":{}},"name":{},"text":{"10":{},"19":{},"35":{},"38":{},"51":{},"57":{}},"component":{},"keyword":{}}],["improv",{"_index":267,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"20":{},"26":{},"29":{},"31":{},"33":{},"34":{},"38":{},"42":{},"44":{},"45":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["imsic",{"_index":3967,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["inaccess",{"_index":305,"title":{},"name":{},"text":{"4":{},"9":{},"21":{},"22":{},"34":{},"38":{}},"component":{},"keyword":{}}],["inaccuraci",{"_index":5166,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["inact",{"_index":1527,"title":{"51-30":{}},"name":{},"text":{"8":{},"19":{},"26":{},"51":{},"52":{}},"component":{},"keyword":{}}],["inactive(x",{"_index":7777,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["inadvert",{"_index":4076,"title":{},"name":{},"text":{"26":{},"50":{}},"component":{},"keyword":{}}],["inb",{"_index":6693,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["inbetween",{"_index":8334,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["inc",{"_index":4606,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["incent",{"_index":6397,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["includ",{"_index":272,"title":{"51-112":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"14":{},"15":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"49":{},"51":{},"52":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"65":{}},"component":{},"keyword":{}}],["inclus",{"_index":1618,"title":{},"name":{},"text":{"8":{},"22":{},"34":{},"51":{},"63":{},"66":{}},"component":{},"keyword":{}}],["incoher",{"_index":2948,"title":{},"name":{},"text":{"10":{},"26":{},"34":{},"40":{},"63":{}},"component":{},"keyword":{}}],["incom",{"_index":2024,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["incompat",{"_index":4904,"title":{},"name":{},"text":{"31":{},"40":{},"57":{},"60":{}},"component":{},"keyword":{}}],["incongru",{"_index":5413,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["inconsequenti",{"_index":6980,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["inconsist",{"_index":4249,"title":{},"name":{},"text":{"26":{},"37":{},"55":{}},"component":{},"keyword":{}}],["incorpor",{"_index":2310,"title":{},"name":{},"text":{"9":{},"48":{}},"component":{},"keyword":{}}],["incorrect",{"_index":3497,"title":{},"name":{},"text":{"15":{},"34":{},"45":{}},"component":{},"keyword":{}}],["incorrectli",{"_index":4252,"title":{},"name":{},"text":{"26":{},"36":{},"51":{}},"component":{},"keyword":{}}],["increas",{"_index":2372,"title":{},"name":{},"text":{"10":{},"15":{},"19":{},"21":{},"26":{},"31":{},"35":{},"37":{},"38":{},"45":{},"49":{},"50":{},"51":{},"54":{},"57":{},"60":{}},"component":{},"keyword":{}}],["increment",{"_index":477,"title":{},"name":{},"text":{"4":{},"10":{},"18":{},"19":{},"23":{},"28":{},"31":{},"34":{},"35":{},"40":{},"41":{},"45":{},"50":{},"51":{},"52":{},"55":{},"57":{}},"component":{},"keyword":{}}],["incur",{"_index":2812,"title":{},"name":{},"text":{"10":{},"19":{},"25":{},"50":{},"51":{},"52":{},"59":{}},"component":{},"keyword":{}}],["indcallinh",{"_index":3646,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["inde",{"_index":5702,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["indefinit",{"_index":3096,"title":{},"name":{},"text":{"11":{},"28":{},"38":{}},"component":{},"keyword":{}}],["indent",{"_index":9538,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["independ",{"_index":1337,"title":{"49-19":{},"49-77":{},"52-24":{}},"name":{},"text":{"7":{},"8":{},"10":{},"27":{},"28":{},"29":{},"33":{},"34":{},"38":{},"40":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"61":{}},"component":{},"keyword":{}}],["index",{"_index":4,"title":{"51-14":{},"51-43":{},"51-48":{},"51-116":{}},"name":{"1":{},"3":{},"6":{}},"text":{"9":{},"10":{},"17":{},"19":{},"26":{},"27":{},"29":{},"31":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["index<32",{"_index":10045,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["index<<2",{"_index":10050,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["index<<3",{"_index":10051,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["index>=32",{"_index":10055,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["indic",{"_index":1521,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"17":{},"19":{},"22":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"40":{},"41":{},"42":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"64":{},"67":{}},"component":{},"keyword":{}}],["indirect",{"_index":1970,"title":{"9":{}},"name":{"9":{}},"text":{"8":{},"9":{},"11":{},"17":{},"19":{},"40":{},"41":{},"45":{},"48":{},"50":{},"62":{}},"component":{},"keyword":{}}],["indirect_cal",{"_index":7508,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["indirect_jump",{"_index":7509,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["indirectli",{"_index":2211,"title":{},"name":{},"text":{"9":{},"10":{},"33":{},"50":{},"51":{}},"component":{},"keyword":{}}],["indistinguish",{"_index":5121,"title":{},"name":{},"text":{"33":{},"49":{}},"component":{},"keyword":{}}],["individu",{"_index":1725,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"41":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"62":{}},"component":{},"keyword":{}}],["indjmpinh",{"_index":3648,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["indljmpinh",{"_index":3653,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["industri",{"_index":3453,"title":{},"name":{},"text":{"13":{},"38":{}},"component":{},"keyword":{}}],["ineffici",{"_index":2891,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["inexact",{"_index":4830,"title":{},"name":{},"text":{"30":{},"37":{},"58":{}},"component":{},"keyword":{}}],["inexpens",{"_index":4109,"title":{},"name":{},"text":{"26":{},"52":{}},"component":{},"keyword":{}}],["inf",{"_index":8385,"title":{},"name":{},"text":{"51":{},"53":{},"58":{}},"component":{},"keyword":{}}],["infect",{"_index":2730,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["infer",{"_index":3458,"title":{},"name":{},"text":{"13":{},"30":{},"40":{}},"component":{},"keyword":{}}],["infin",{"_index":4739,"title":{"30-7":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["infinit",{"_index":2453,"title":{},"name":{},"text":{"10":{},"40":{},"41":{},"48":{},"51":{},"58":{}},"component":{},"keyword":{}}],["infinity—i.",{"_index":10098,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["infloc",{"_index":5995,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["infloc;rf;rmw;inflocext",{"_index":5999,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["infloc;rmw;inflocext",{"_index":5998,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["inflocext",{"_index":5996,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["influenc",{"_index":4429,"title":{},"name":{},"text":{"28":{},"49":{}},"component":{},"keyword":{}}],["inform",{"_index":981,"title":{"49-81":{},"49-116":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"18":{},"19":{},"23":{},"26":{},"30":{},"32":{},"33":{},"34":{},"40":{},"41":{},"45":{},"49":{},"51":{},"52":{},"57":{},"62":{},"64":{}},"component":{},"keyword":{}}],["infrequ",{"_index":5405,"title":{},"name":{},"text":{"37":{},"39":{},"49":{}},"component":{},"keyword":{}}],["ingal",{"_index":644,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["ingrid",{"_index":1109,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["inher",{"_index":2878,"title":{},"name":{},"text":{"10":{},"15":{},"22":{},"40":{},"49":{},"67":{}},"component":{},"keyword":{}}],["inhibit",{"_index":2317,"title":{"10-21":{},"17-2":{}},"name":{},"text":{"10":{},"12":{},"18":{},"19":{},"23":{}},"component":{},"keyword":{}}],["init",{"_index":5889,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["initi",{"_index":2452,"title":{"41-10":{},"41-16":{}},"name":{},"text":{"10":{},"11":{},"16":{},"19":{},"21":{},"22":{},"23":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"37":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{},"53":{},"62":{},"66":{}},"component":{},"keyword":{}}],["initial_fetch_address",{"_index":6078,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["initial_register_st",{"_index":6077,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["initiatives/cnsa",{"_index":1199,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["inject",{"_index":522,"title":{"51-91":{}},"name":{},"text":{"4":{},"7":{},"10":{},"36":{},"37":{},"43":{},"49":{},"50":{},"51":{},"59":{},"60":{}},"component":{},"keyword":{}}],["inlin",{"_index":4448,"title":{},"name":{},"text":{"28":{},"45":{},"49":{},"54":{}},"component":{},"keyword":{}}],["inner",{"_index":9589,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["innermost",{"_index":10184,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["innoc",{"_index":6993,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["innocu",{"_index":927,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["input",{"_index":1758,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"29":{},"30":{},"34":{},"36":{},"37":{},"41":{},"45":{},"47":{},"49":{},"51":{},"52":{},"53":{},"55":{},"58":{},"59":{},"62":{}},"component":{},"keyword":{}}],["input[(i",{"_index":4631,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["input[(j",{"_index":4651,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["input[i",{"_index":9103,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["input[j",{"_index":9124,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["insecur",{"_index":7085,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["insensit",{"_index":6112,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["insert",{"_index":1989,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"29":{},"39":{},"45":{},"49":{},"51":{},"55":{},"57":{}},"component":{},"keyword":{}}],["insid",{"_index":1330,"title":{},"name":{},"text":{"7":{},"12":{},"29":{},"30":{},"31":{},"38":{},"40":{},"43":{},"45":{},"49":{},"51":{},"52":{},"59":{}},"component":{},"keyword":{}}],["insn",{"_index":3459,"title":{},"name":{"14":{}},"text":{"49":{},"61":{}},"component":{},"keyword":{}}],["inspect",{"_index":4354,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["inspir",{"_index":6864,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["inst.lpl",{"_index":7528,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["inst[15:13",{"_index":5058,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["inst[1:0",{"_index":5059,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["inst[1:0]=11",{"_index":6184,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["inst[25",{"_index":7759,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["inst[28",{"_index":7857,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["inst[31",{"_index":6428,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["inst[4:2",{"_index":6185,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["inst[6:5",{"_index":6187,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["inst[7",{"_index":6426,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["inst[i",{"_index":6427,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["instal",{"_index":2766,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{},"keyword":{}}],["instanc",{"_index":2137,"title":{"41-5":{}},"name":{},"text":{"8":{},"10":{},"15":{},"19":{},"26":{},"38":{},"40":{},"41":{},"49":{},"50":{}},"component":{},"keyword":{}}],["instance’",{"_index":6023,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["instant",{"_index":5262,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["instanti",{"_index":5815,"title":{"41-17":{}},"name":{},"text":{"41":{},"49":{}},"component":{},"keyword":{}}],["instead",{"_index":1546,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"19":{},"20":{},"21":{},"22":{},"26":{},"27":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"49":{},"51":{},"52":{},"53":{},"56":{},"57":{},"58":{},"59":{},"60":{},"62":{},"64":{}},"component":{},"keyword":{}}],["institut",{"_index":1050,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["instmemori",{"_index":10047,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["instmemory[table_address][xlen",{"_index":10053,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["instret",{"_index":1803,"title":{"18":{}},"name":{},"text":{"8":{},"10":{},"12":{},"18":{},"26":{},"35":{},"44":{},"62":{}},"component":{},"keyword":{}}],["instret1",{"_index":3549,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["instretcfg",{"_index":3565,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["instretcfg14",{"_index":3551,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["instretcfgh14",{"_index":3552,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["instreth",{"_index":2721,"title":{},"name":{},"text":{"10":{},"12":{},"44":{}},"component":{},"keyword":{}}],["instreth1",{"_index":3550,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["instruct",{"_index":138,"title":{"3":{},"6":{},"14":{},"28":{},"31":{},"44":{},"45":{},"46":{},"47":{},"49":{},"52":{},"55":{},"56":{},"58":{},"62":{},"63":{},"8-11":{},"8-21":{},"8-22":{},"8-23":{},"8-29":{},"8-37":{},"10-31":{},"10-33":{},"10-35":{},"16-4":{},"19-11":{},"19-12":{},"26-18":{},"26-19":{},"26-33":{},"28-1":{},"28-2":{},"28-3":{},"29-2":{},"29-3":{},"29-16":{},"29-20":{},"30-17":{},"31-2":{},"31-3":{},"31-6":{},"31-7":{},"31-8":{},"31-11":{},"31-12":{},"31-13":{},"31-14":{},"31-15":{},"31-16":{},"33-1":{},"33-11":{},"33-20":{},"33-21":{},"33-22":{},"33-23":{},"36-3":{},"36-4":{},"36-5":{},"36-6":{},"36-7":{},"37-5":{},"37-6":{},"37-7":{},"37-8":{},"37-9":{},"38-5":{},"41-4":{},"41-5":{},"41-9":{},"41-18":{},"41-28":{},"42-3":{},"42-6":{},"42-7":{},"42-8":{},"43-1":{},"43-2":{},"43-3":{},"43-4":{},"43-5":{},"45-3":{},"45-5":{},"45-6":{},"45-8":{},"45-9":{},"45-12":{},"45-13":{},"45-15":{},"46-2":{},"47-2":{},"47-3":{},"47-5":{},"47-6":{},"49-7":{},"49-8":{},"49-9":{},"49-12":{},"49-13":{},"49-14":{},"49-20":{},"49-80":{},"49-83":{},"49-88":{},"49-89":{},"49-90":{},"49-91":{},"49-92":{},"49-98":{},"50-3":{},"50-5":{},"50-7":{},"51-25":{},"51-31":{},"51-38":{},"51-41":{},"51-42":{},"51-43":{},"51-45":{},"51-49":{},"51-52":{},"51-53":{},"51-54":{},"51-55":{},"51-56":{},"51-60":{},"51-61":{},"51-62":{},"51-63":{},"51-64":{},"51-65":{},"51-66":{},"51-67":{},"51-68":{},"51-69":{},"51-70":{},"51-71":{},"51-72":{},"51-73":{},"51-77":{},"51-78":{},"51-79":{},"51-81":{},"51-82":{},"51-83":{},"51-85":{},"51-86":{},"51-87":{},"51-88":{},"51-89":{},"51-90":{},"51-91":{},"51-92":{},"51-93":{},"51-94":{},"51-95":{},"51-96":{},"51-97":{},"51-98":{},"51-100":{},"51-101":{},"51-102":{},"51-106":{},"51-107":{},"51-108":{},"51-114":{},"51-115":{},"51-116":{},"51-117":{},"51-118":{},"51-119":{},"51-120":{},"51-121":{},"51-122":{},"51-124":{},"51-125":{},"51-126":{},"51-127":{},"51-128":{},"51-149":{},"52-6":{},"52-7":{},"52-25":{},"52-26":{},"52-39":{},"52-67":{},"52-68":{},"54-1":{},"55-1":{},"56-1":{},"57-11":{},"57-12":{},"57-25":{},"58-1":{},"58-2":{},"58-3":{},"58-4":{},"58-5":{},"58-6":{},"59-1":{},"59-2":{},"59-3":{},"59-4":{},"59-5":{},"61-3":{},"61-7":{},"62-1":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["instruction(",{"_index":4250,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["instruction_kind",{"_index":6060,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["instruction_tre",{"_index":6079,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["instruction—​even",{"_index":8032,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["instruction’",{"_index":2068,"title":{},"name":{},"text":{"8":{},"10":{},"29":{},"37":{},"45":{},"51":{},"52":{},"56":{},"58":{},"61":{},"65":{}},"component":{},"keyword":{}}],["instrument",{"_index":6480,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["insuffici",{"_index":2085,"title":{},"name":{},"text":{"8":{},"26":{},"40":{},"49":{},"57":{}},"component":{},"keyword":{}}],["insul",{"_index":2611,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["int",{"_index":4596,"title":{},"name":{},"text":{"29":{},"36":{},"40":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["int*i",{"_index":9535,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["int*x",{"_index":9534,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["int*z",{"_index":9536,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["int16",{"_index":9550,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["int32_t",{"_index":9541,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["int8",{"_index":9552,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["int8_t",{"_index":9540,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["intact",{"_index":5080,"title":{},"name":{},"text":{"32":{}},"component":{},"keyword":{}}],["integ",{"_index":1500,"title":{"39":{},"45":{},"46":{},"47":{},"60":{},"61":{},"29-10":{},"31-7":{},"31-8":{},"31-9":{},"31-10":{},"42-2":{},"45-2":{},"45-5":{},"45-6":{},"45-7":{},"47-2":{},"47-3":{},"47-4":{},"51-56":{},"51-57":{},"51-58":{},"51-59":{},"51-60":{},"51-63":{},"51-64":{},"51-65":{},"51-66":{},"51-67":{},"51-68":{},"51-69":{},"51-70":{},"51-71":{},"51-72":{},"51-100":{},"51-101":{},"51-118":{},"52-35":{},"58-3":{},"58-4":{}},"name":{},"text":{"8":{},"10":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"45":{},"46":{},"47":{},"48":{},"51":{},"52":{},"53":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["integr",{"_index":816,"title":{"11":{},"50":{}},"name":{},"text":{"7":{},"10":{},"11":{},"41":{},"49":{},"50":{},"66":{}},"component":{},"keyword":{}}],["integrity(cfi",{"_index":3042,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["intel",{"_index":1296,"title":{},"name":{},"text":{"7":{},"13":{},"49":{}},"component":{},"keyword":{}}],["intel’",{"_index":1290,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["intend",{"_index":1679,"title":{"30-2":{},"49-3":{},"52-2":{}},"name":{},"text":{"8":{},"10":{},"15":{},"18":{},"19":{},"21":{},"26":{},"27":{},"29":{},"30":{},"33":{},"34":{},"35":{},"38":{},"40":{},"42":{},"45":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["intens",{"_index":3937,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["intent",{"_index":2394,"title":{},"name":{},"text":{"10":{},"19":{},"22":{},"30":{},"35":{},"40":{},"51":{},"52":{},"64":{}},"component":{},"keyword":{}}],["intention",{"_index":5509,"title":{},"name":{},"text":{"38":{},"40":{}},"component":{},"keyword":{}}],["inter",{"_index":2697,"title":{},"name":{},"text":{"10":{},"35":{},"38":{},"40":{}},"component":{},"keyword":{}}],["interact",{"_index":1498,"title":{"27-14":{},"27-15":{}},"name":{},"text":{"8":{},"15":{},"26":{},"27":{},"33":{},"35":{},"39":{},"40":{},"41":{},"48":{},"49":{},"51":{},"64":{}},"component":{},"keyword":{}}],["intercept",{"_index":2549,"title":{},"name":{},"text":{"10":{},"12":{},"45":{},"49":{}},"component":{},"keyword":{}}],["interchang",{"_index":3752,"title":{},"name":{},"text":{"19":{},"30":{}},"component":{},"keyword":{}}],["interconnect",{"_index":2957,"title":{},"name":{},"text":{"10":{},"38":{},"40":{}},"component":{},"keyword":{}}],["interest",{"_index":3464,"title":{},"name":{},"text":{"15":{},"30":{},"38":{},"46":{},"49":{},"52":{}},"component":{},"keyword":{}}],["interfac",{"_index":578,"title":{"49-127":{}},"name":{},"text":{"4":{},"7":{},"10":{},"15":{},"19":{},"26":{},"34":{},"35":{},"38":{},"41":{},"42":{},"45":{},"49":{}},"component":{},"keyword":{}}],["interfer",{"_index":4288,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["interim",{"_index":2823,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{},"keyword":{}}],["interleav",{"_index":4563,"title":{},"name":{},"text":{"29":{},"40":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["intermedi",{"_index":2828,"title":{},"name":{},"text":{"10":{},"12":{},"26":{},"30":{},"45":{},"52":{},"59":{}},"component":{},"keyword":{}}],["intermix",{"_index":3807,"title":{},"name":{},"text":{"19":{},"31":{}},"component":{},"keyword":{}}],["intern",{"_index":26,"title":{"41-27":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"10":{},"19":{},"26":{},"34":{},"36":{},"37":{},"38":{},"41":{},"45":{},"49":{},"51":{},"52":{},"57":{},"64":{}},"component":{},"keyword":{}}],["internal(next_st",{"_index":6043,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["internal_error(__file__",{"_index":7158,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["internation",{"_index":6904,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["internet",{"_index":6614,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["interoper",{"_index":5764,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["interpret",{"_index":1747,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"33":{},"37":{},"40":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["interprocessor",{"_index":2661,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["interrog",{"_index":2765,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["interrupt",{"_index":240,"title":{"16":{},"25":{},"8-5":{},"8-6":{},"8-14":{},"8-26":{},"8-27":{},"10-8":{},"10-18":{},"10-34":{},"10-37":{},"16-1":{},"17-4":{},"25-3":{},"25-4":{},"25-8":{},"26-9":{},"38-6":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"22":{},"23":{},"25":{},"26":{},"27":{},"34":{},"38":{},"41":{},"45":{},"50":{},"51":{},"56":{},"57":{},"62":{},"64":{}},"component":{},"keyword":{}}],["interrupt/except",{"_index":9957,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["intersect",{"_index":2073,"title":{},"name":{},"text":{"8":{},"45":{}},"component":{},"keyword":{}}],["interspers",{"_index":5087,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["interv",{"_index":2857,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["interven",{"_index":3741,"title":{},"name":{},"text":{"19":{},"26":{},"29":{},"40":{},"41":{}},"component":{},"keyword":{}}],["intervent",{"_index":1727,"title":{},"name":{},"text":{"8":{},"37":{}},"component":{},"keyword":{}}],["intra",{"_index":5581,"title":{"41-4":{}},"name":{},"text":{"40":{},"41":{},"51":{},"67":{}},"component":{},"keyword":{}}],["intrinh",{"_index":3642,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["intro",{"_index":3460,"title":{},"name":{"15":{},"38":{}},"text":{},"component":{},"keyword":{}}],["introduc",{"_index":2469,"title":{},"name":{},"text":{"10":{},"11":{},"18":{},"19":{},"20":{},"21":{},"22":{},"26":{},"27":{},"30":{},"31":{},"33":{},"34":{},"38":{},"40":{},"41":{},"42":{},"49":{},"50":{},"52":{},"54":{},"61":{},"66":{}},"component":{},"keyword":{}}],["introduct",{"_index":2204,"title":{"15":{},"38":{},"9-1":{},"18-1":{},"21-1":{},"27-1":{},"30-1":{},"33-2":{},"45-1":{},"49-2":{},"51-1":{},"52-1":{},"61-1":{}},"name":{},"text":{"15":{},"21":{},"38":{},"41":{},"49":{},"51":{}},"component":{},"keyword":{}}],["intuit",{"_index":4892,"title":{},"name":{},"text":{"31":{},"40":{},"41":{}},"component":{},"keyword":{}}],["invalid",{"_index":2089,"title":{"26-31":{}},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"26":{},"28":{},"30":{},"31":{},"33":{},"36":{},"37":{},"40":{},"49":{},"51":{},"58":{},"63":{}},"component":{},"keyword":{}}],["invari",{"_index":4356,"title":{},"name":{},"text":{"27":{},"45":{},"47":{}},"component":{},"keyword":{}}],["invas",{"_index":1060,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["invers",{"_index":2376,"title":{},"name":{},"text":{"10":{},"29":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["invert",{"_index":565,"title":{},"name":{},"text":{"4":{},"29":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["invis",{"_index":2498,"title":{},"name":{},"text":{"10":{},"26":{},"34":{},"37":{},"38":{},"45":{}},"component":{},"keyword":{}}],["invmixcolumn",{"_index":9044,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["invoc",{"_index":3817,"title":{},"name":{},"text":{"20":{},"51":{},"52":{}},"component":{},"keyword":{}}],["invok",{"_index":3067,"title":{},"name":{},"text":{"11":{},"19":{},"24":{},"26":{},"27":{},"49":{},"50":{}},"component":{},"keyword":{}}],["involv",{"_index":568,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"40":{},"41":{},"49":{},"50":{},"56":{},"57":{}},"component":{},"keyword":{}}],["invshiftrow",{"_index":9026,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["invsubbyt",{"_index":9027,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["io",{"_index":3483,"title":{},"name":{},"text":{"15":{},"26":{},"38":{},"51":{},"54":{}},"component":{},"keyword":{}}],["io,io",{"_index":2954,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["iommu",{"_index":4382,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["iorw",{"_index":4268,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["iorw,iorw",{"_index":5736,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["iot",{"_index":6585,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["iota",{"_index":7610,"title":{"51-115":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ip",{"_index":1325,"title":{},"name":{},"text":{"7":{},"38":{},"49":{}},"component":{},"keyword":{}}],["ipc",{"_index":4285,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["ir",{"_index":1800,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["ireg",{"_index":2246,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["irreduc",{"_index":9134,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["irrelev",{"_index":1940,"title":{},"name":{},"text":{"8":{},"57":{}},"component":{},"keyword":{}}],["irrespect",{"_index":1962,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"55":{}},"component":{},"keyword":{}}],["is",{"_index":1081,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["is_lp_expect",{"_index":7519,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["isa",{"_index":5,"title":{"10":{},"26":{},"33":{},"42":{},"10-2":{},"10-10":{},"26-3":{},"27-10":{},"38-3":{},"42-2":{},"45-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"keyword":{}}],["isb",{"_index":5727,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["isca",{"_index":739,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["iselect",{"_index":2254,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["isgreat",{"_index":8482,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["isi",{"_index":3438,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["isn’t",{"_index":3973,"title":{},"name":{},"text":{"22":{},"33":{}},"component":{},"keyword":{}}],["iso/iec",{"_index":1064,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["iso:sm4",{"_index":6715,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["isol",{"_index":3490,"title":{},"name":{},"text":{"15":{},"38":{}},"component":{},"keyword":{}}],["isr",{"_index":3812,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["issu",{"_index":3585,"title":{"40-19":{}},"name":{},"text":{"18":{},"26":{},"27":{},"30":{},"34":{},"35":{},"37":{},"40":{},"48":{},"49":{},"52":{},"53":{},"54":{},"55":{},"57":{},"63":{}},"component":{},"keyword":{}}],["isync",{"_index":5720,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["it'",{"_index":5870,"title":{},"name":{},"text":{"41":{},"57":{}},"component":{},"keyword":{}}],["itcc",{"_index":984,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["item",{"_index":7921,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["iter",{"_index":6082,"title":{},"name":{},"text":{"41":{},"48":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["itself",{"_index":2002,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"16":{},"19":{},"22":{},"27":{},"28":{},"30":{},"31":{},"33":{},"38":{},"40":{},"43":{},"48":{},"49":{},"50":{},"52":{},"55":{},"57":{}},"component":{},"keyword":{}}],["itu",{"_index":1366,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ityp",{"_index":3711,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["it’",{"_index":3872,"title":{},"name":{},"text":{"21":{},"40":{},"49":{},"50":{}},"component":{},"keyword":{}}],["iv",{"_index":5370,"title":{},"name":{},"text":{"37":{},"45":{}},"component":{},"keyword":{}}],["ivi",{"_index":1291,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["iw",{"_index":5987,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["j",{"_index":52,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"10":{},"26":{},"29":{},"31":{},"34":{},"40":{},"44":{},"45":{},"48":{},"49":{},"52":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["j[al]r/mv/add",{"_index":5068,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["jacob",{"_index":49,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["jal",{"_index":3759,"title":{},"name":{},"text":{"19":{},"31":{},"34":{},"41":{},"44":{},"45":{},"48":{},"50":{},"57":{}},"component":{},"keyword":{}}],["jal/jalr",{"_index":7504,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["jalr",{"_index":3754,"title":{},"name":{},"text":{"19":{},"28":{},"31":{},"34":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"50":{}},"component":{},"keyword":{}}],["jalr/c.jalr/c.jr",{"_index":3055,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["jam",{"_index":7704,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["jan",{"_index":637,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["januari",{"_index":1019,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["japan",{"_index":6877,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["jaqu",{"_index":1412,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jare",{"_index":846,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["java",{"_index":5669,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["javascript",{"_index":10124,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["jb",{"_index":978,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jean",{"_index":6823,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["jedec",{"_index":496,"title":{},"name":{},"text":{"4":{},"10":{}},"component":{},"keyword":{}}],["jedec’",{"_index":2388,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["jeffrey",{"_index":875,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jit",{"_index":5501,"title":{},"name":{},"text":{"38":{},"40":{},"48":{},"63":{}},"component":{},"keyword":{}}],["jiter",{"_index":7521,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["jitter",{"_index":1175,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["jkl",{"_index":6151,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["jmp_buf",{"_index":7562,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["joannou",{"_index":650,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["job",{"_index":5505,"title":{},"name":{},"text":{"38":{},"56":{}},"component":{},"keyword":{}}],["johansson",{"_index":89,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["john",{"_index":85,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["johnson",{"_index":6887,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["joint",{"_index":963,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jona",{"_index":675,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["jonathan",{"_index":54,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["jose",{"_index":682,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["joseph",{"_index":668,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["josh",{"_index":110,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["journal",{"_index":869,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jr",{"_index":953,"title":{},"name":{},"text":{"7":{},"28":{},"45":{},"57":{}},"component":{},"keyword":{}}],["jssc",{"_index":778,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["juan",{"_index":1434,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["judg",{"_index":2335,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["juhani",{"_index":678,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["juli",{"_index":1426,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["jump",{"_index":2871,"title":{"45-10":{},"57-47":{},"57-49":{}},"name":{},"text":{"10":{},"12":{},"16":{},"19":{},"21":{},"22":{},"28":{},"31":{},"38":{},"40":{},"41":{},"45":{},"48":{},"50":{},"53":{},"57":{}},"component":{},"keyword":{}}],["jump/cal",{"_index":7503,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["june",{"_index":806,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["justif",{"_index":6884,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["justifi",{"_index":2411,"title":{},"name":{},"text":{"10":{},"22":{},"26":{},"38":{},"39":{},"40":{}},"component":{},"keyword":{}}],["jvt",{"_index":3225,"title":{"57-48":{},"57-50":{}},"name":{},"text":{"12":{},"22":{},"57":{}},"component":{},"keyword":{}}],["jvt.base",{"_index":10042,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["jvt.mode",{"_index":10043,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["j×ptesiz",{"_index":4242,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["k",{"_index":745,"title":{},"name":{},"text":{"7":{},"10":{},"29":{},"40":{},"49":{},"52":{},"53":{}},"component":{},"keyword":{}}],["k0/k1",{"_index":2728,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["k_loop",{"_index":9604,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["kade",{"_index":108,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["karaklaj",{"_index":1234,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kat",{"_index":7044,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["katz",{"_index":771,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kaufer",{"_index":1036,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kazuhiko",{"_index":1129,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kazumaro",{"_index":1151,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["keccak",{"_index":9095,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["keep",{"_index":2423,"title":{},"name":{},"text":{"10":{},"21":{},"22":{},"23":{},"26":{},"30":{},"31":{},"33":{},"37":{},"38":{},"40":{},"41":{},"45":{},"49":{},"51":{},"52":{},"53":{},"60":{}},"component":{},"keyword":{}}],["keller",{"_index":652,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["kelsey",{"_index":1031,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ken",{"_index":628,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["kept",{"_index":8954,"title":{},"name":{},"text":{"52":{},"63":{}},"component":{},"keyword":{}}],["kerckhoffs’",{"_index":6807,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["kernel",{"_index":3526,"title":{},"name":{},"text":{"17":{},"21":{},"27":{},"38":{},"40":{},"49":{}},"component":{},"keyword":{}}],["key",{"_index":1415,"title":{},"name":{},"text":{"7":{},"40":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["keyelem",{"_index":9034,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["keyexpans",{"_index":9397,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["keyschedul",{"_index":6620,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["kib",{"_index":1842,"title":{},"name":{},"text":{"8":{},"26":{},"31":{},"45":{},"50":{}},"component":{},"keyword":{}}],["killmann",{"_index":1022,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kind",{"_index":2126,"title":{},"name":{},"text":{"8":{},"21":{},"38":{},"40":{},"41":{},"49":{}},"component":{},"keyword":{}}],["know",{"_index":2333,"title":{},"name":{},"text":{"10":{},"22":{},"30":{},"36":{},"38":{},"41":{},"49":{},"51":{},"52":{},"65":{}},"component":{},"keyword":{}}],["knowledg",{"_index":2167,"title":{},"name":{},"text":{"8":{},"49":{}},"component":{},"keyword":{}}],["known",{"_index":1585,"title":{"40-19":{}},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"22":{},"26":{},"27":{},"29":{},"30":{},"33":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"63":{}},"component":{},"keyword":{}}],["kocher",{"_index":1287,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kong",{"_index":769,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["korea",{"_index":6878,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["kri",{"_index":6835,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["krste",{"_index":42,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["kruckemy",{"_index":90,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["kt",{"_index":9573,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["kumar",{"_index":1120,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["kurd",{"_index":654,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["kuznyechik",{"_index":6880,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["kwiatkowski",{"_index":6836,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["l",{"_index":626,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"21":{},"34":{},"39":{},"49":{},"52":{}},"component":{},"keyword":{}}],["l1",{"_index":5267,"title":{},"name":{},"text":{"35":{},"64":{}},"component":{},"keyword":{}}],["l1/l2",{"_index":10192,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l1/l2/l3",{"_index":10195,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l1tf/foreshadow",{"_index":6797,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["l2",{"_index":10180,"title":{},"name":{},"text":{"63":{},"64":{}},"component":{},"keyword":{}}],["l2/l3",{"_index":10191,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l2/l3/l4",{"_index":10196,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l3",{"_index":10188,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l3/l4",{"_index":10193,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l3/l4/l5",{"_index":10197,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l4",{"_index":10194,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l4/l5",{"_index":10190,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l5",{"_index":10198,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["l_a",{"_index":9629,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_a[i",{"_index":9645,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_b",{"_index":9630,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_b[i",{"_index":9646,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_c",{"_index":9628,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_c[i",{"_index":9644,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_d",{"_index":9631,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_d[i",{"_index":9648,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_e",{"_index":9632,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_e[i",{"_index":9649,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_f",{"_index":9633,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_f[i",{"_index":9647,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_g",{"_index":9634,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_g[i",{"_index":9651,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_h",{"_index":9635,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_h[i",{"_index":9652,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_i",{"_index":9636,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_i[i",{"_index":9650,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_j",{"_index":9637,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_j[i",{"_index":9655,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_k",{"_index":9638,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_k[i",{"_index":9654,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_l",{"_index":9639,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_l[i",{"_index":9653,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_m",{"_index":9640,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["l_m[i",{"_index":9656,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["la",{"_index":2835,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["lab",{"_index":3425,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["label",{"_index":3408,"title":{},"name":{},"text":{"12":{},"34":{},"40":{},"41":{},"45":{},"50":{}},"component":{},"keyword":{}}],["laboratori",{"_index":6805,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lacharm",{"_index":1349,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["lack",{"_index":2915,"title":{},"name":{},"text":{"10":{},"28":{},"37":{},"40":{},"51":{},"61":{},"64":{}},"component":{},"keyword":{}}],["laid",{"_index":6510,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["land",{"_index":1886,"title":{"10-15":{},"11-1":{},"11-2":{},"11-3":{},"26-6":{},"50-1":{},"50-2":{},"50-3":{}},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"50":{}},"component":{},"keyword":{}}],["lane",{"_index":7802,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["langley",{"_index":6832,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["languag",{"_index":803,"title":{},"name":{},"text":{"7":{},"27":{},"28":{},"37":{},"39":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["laps",{"_index":7087,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["larg",{"_index":1238,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"25":{},"26":{},"28":{},"30":{},"31":{},"34":{},"37":{},"38":{},"45":{},"46":{},"49":{},"51":{},"52":{},"53":{},"54":{},"63":{},"64":{}},"component":{},"keyword":{}}],["larger",{"_index":2028,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"19":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"37":{},"38":{},"40":{},"41":{},"45":{},"49":{},"51":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["largest",{"_index":2422,"title":{},"name":{},"text":{"10":{},"27":{},"39":{},"51":{},"52":{}},"component":{},"keyword":{}}],["last",{"_index":268,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"19":{},"26":{},"31":{},"37":{},"40":{},"41":{},"42":{},"50":{},"51":{},"52":{},"55":{},"57":{},"62":{}},"component":{},"keyword":{}}],["lastli",{"_index":2197,"title":{},"name":{},"text":{"8":{},"40":{}},"component":{},"keyword":{}}],["latch",{"_index":5264,"title":{},"name":{},"text":{"35":{},"49":{}},"component":{},"keyword":{}}],["late",{"_index":4879,"title":{"41-21":{}},"name":{},"text":{"31":{},"38":{},"41":{}},"component":{},"keyword":{}}],["latenc",{"_index":1141,"title":{"49-19":{},"49-77":{},"52-24":{}},"name":{},"text":{"7":{},"16":{},"17":{},"19":{},"26":{},"29":{},"33":{},"36":{},"37":{},"40":{},"49":{},"51":{},"52":{},"56":{},"64":{},"65":{}},"component":{},"keyword":{}}],["latency/area",{"_index":6591,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["later",{"_index":542,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"16":{},"21":{},"22":{},"26":{},"28":{},"30":{},"31":{},"32":{},"33":{},"34":{},"38":{},"40":{},"46":{},"49":{},"51":{},"52":{},"66":{}},"component":{},"keyword":{}}],["latest",{"_index":4452,"title":{},"name":{},"text":{"28":{},"33":{},"40":{},"48":{},"52":{}},"component":{},"keyword":{}}],["latest_among[",{"_index":5839,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["latest_among[candidates[r",{"_index":5843,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["latex",{"_index":270,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["latter",{"_index":1966,"title":{},"name":{},"text":{"8":{},"12":{},"18":{},"21":{},"26":{},"31":{},"40":{}},"component":{},"keyword":{}}],["lattic",{"_index":1220,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["laudon",{"_index":886,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["launch",{"_index":4213,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["lausann",{"_index":1319,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["layer",{"_index":2364,"title":{},"name":{},"text":{"10":{},"15":{},"38":{},"49":{}},"component":{},"keyword":{}}],["layout",{"_index":1659,"title":{"51-24":{}},"name":{},"text":{"8":{},"10":{},"26":{},"50":{},"51":{}},"component":{},"keyword":{}}],["lazi",{"_index":6795,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lazili",{"_index":2553,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["lb",{"_index":1913,"title":{},"name":{},"text":{"8":{},"27":{},"40":{},"44":{},"45":{},"47":{},"48":{}},"component":{},"keyword":{}}],["lb+fence.r.rw+data",{"_index":6055,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["lbb0_4",{"_index":9659,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["lbu",{"_index":1914,"title":{},"name":{},"text":{"8":{},"27":{},"29":{},"44":{},"45":{},"47":{},"48":{},"53":{}},"component":{},"keyword":{}}],["lcofi",{"_index":242,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"17":{},"19":{},"23":{},"26":{}},"component":{},"keyword":{}}],["lcofifrz",{"_index":3640,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["lcofip",{"_index":2688,"title":{},"name":{},"text":{"10":{},"23":{},"26":{}},"component":{},"keyword":{}}],["ld",{"_index":1919,"title":{},"name":{},"text":{"8":{},"27":{},"31":{},"40":{},"44":{},"47":{},"48":{},"50":{},"53":{},"55":{}},"component":{},"keyword":{}}],["lda",{"_index":9558,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ldb",{"_index":9560,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ldc",{"_index":9562,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ldone",{"_index":4720,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["ldsp",{"_index":5067,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["ldst",{"_index":5349,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["lead",{"_index":2409,"title":{},"name":{},"text":{"10":{},"11":{},"19":{},"26":{},"29":{},"31":{},"36":{},"40":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["leading/trail",{"_index":4478,"title":{"29-8":{}},"name":{},"text":{},"component":{},"keyword":{}}],["leaf",{"_index":4137,"title":{},"name":{},"text":{"26":{},"50":{}},"component":{},"keyword":{}}],["leak",{"_index":3583,"title":{},"name":{},"text":{"18":{},"19":{},"32":{},"49":{},"50":{}},"component":{},"keyword":{}}],["leakag",{"_index":6778,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["leap",{"_index":1378,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["learn",{"_index":2906,"title":{},"name":{},"text":{"10":{},"30":{},"45":{},"51":{}},"component":{},"keyword":{}}],["leav",{"_index":325,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"21":{},"31":{},"32":{},"37":{},"38":{},"41":{},"45":{},"51":{},"52":{},"53":{},"60":{}},"component":{},"keyword":{}}],["lectur",{"_index":6827,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["led",{"_index":4898,"title":{},"name":{},"text":{"31":{},"35":{},"38":{},"49":{}},"component":{},"keyword":{}}],["lee",{"_index":37,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["left",{"_index":1639,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"19":{},"21":{},"27":{},"29":{},"30":{},"31":{},"39":{},"40":{},"45":{},"47":{},"49":{},"51":{},"52":{},"66":{}},"component":{},"keyword":{}}],["leftmost",{"_index":6421,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["legaci",{"_index":2898,"title":{},"name":{},"text":{"10":{},"28":{},"38":{},"45":{}},"component":{},"keyword":{}}],["legal",{"_index":2488,"title":{"12-5":{},"12-6":{}},"name":{},"text":{"10":{},"12":{},"19":{},"26":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"45":{},"47":{},"48":{},"50":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["legitim",{"_index":4077,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["lem",{"_index":6013,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["length",{"_index":1820,"title":{"38-5":{},"51-12":{},"51-13":{},"51-137":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{},"28":{},"31":{},"34":{},"38":{},"45":{},"51":{},"52":{},"53":{},"57":{},"61":{}},"component":{},"keyword":{}}],["lengthen",{"_index":4546,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lenoski",{"_index":885,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["lepilogu",{"_index":4725,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["leq",{"_index":5412,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["less",{"_index":398,"title":{"29-15":{},"29-18":{},"49-8":{},"49-95":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"29":{},"31":{},"37":{},"38":{},"39":{},"40":{},"45":{},"49":{},"51":{},"52":{},"60":{},"65":{}},"component":{},"keyword":{}}],["lessen",{"_index":6965,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lesser",{"_index":2832,"title":{},"name":{},"text":{"10":{},"42":{},"45":{}},"component":{},"keyword":{}}],["letter",{"_index":1508,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"42":{},"51":{}},"component":{},"keyword":{}}],["level",{"_index":602,"title":{"10":{},"26":{},"8-24":{},"9-2":{},"9-3":{},"9-4":{},"10-1":{},"10-29":{},"15-2":{},"25-1":{},"42-6":{},"42-7":{},"42-8":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"22":{},"23":{},"25":{},"26":{},"27":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"42":{},"45":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"63":{},"64":{},"67":{}},"component":{},"keyword":{}}],["levels=2",{"_index":4181,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["level’",{"_index":1687,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["leverag",{"_index":3710,"title":{},"name":{},"text":{"19":{},"27":{},"45":{}},"component":{},"keyword":{}}],["lfoundnul",{"_index":4730,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lfsr",{"_index":6918,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lg2(2*sew",{"_index":8144,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lg2(sew",{"_index":8135,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lh",{"_index":1915,"title":{},"name":{},"text":{"8":{},"27":{},"44":{},"45":{},"47":{},"48":{}},"component":{},"keyword":{}}],["lhu",{"_index":1916,"title":{},"name":{},"text":{"8":{},"27":{},"44":{},"45":{},"47":{},"48":{}},"component":{},"keyword":{}}],["li",{"_index":2834,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"28":{},"29":{},"31":{},"40":{},"51":{},"53":{},"57":{}},"component":{},"keyword":{}}],["liberti",{"_index":1273,"title":{},"name":{},"text":{"7":{},"52":{}},"component":{},"keyword":{}}],["libpicojpeg.c",{"_index":9826,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["librari",{"_index":3,"title":{"1":{},"53-9":{}},"name":{},"text":{"1":{},"7":{},"11":{},"27":{},"28":{},"36":{},"37":{},"38":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["licens",{"_index":27,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"10":{},"34":{},"49":{}},"component":{},"keyword":{}}],["lie",{"_index":2943,"title":{},"name":{},"text":{"10":{},"26":{},"28":{}},"component":{},"keyword":{}}],["life",{"_index":6978,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lifecycl",{"_index":4576,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["lifetim",{"_index":6995,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lift",{"_index":3864,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["light",{"_index":7796,"title":{},"name":{},"text":{"51":{},"62":{}},"component":{},"keyword":{}}],["lightweight",{"_index":1002,"title":{},"name":{},"text":{"7":{},"40":{},"49":{}},"component":{},"keyword":{}}],["likelihood",{"_index":2004,"title":{},"name":{},"text":{"8":{},"49":{}},"component":{},"keyword":{}}],["likewis",{"_index":1672,"title":{},"name":{},"text":{"8":{},"17":{},"22":{},"26":{},"30":{},"40":{},"41":{},"45":{},"48":{},"52":{},"62":{}},"component":{},"keyword":{}}],["limit",{"_index":1610,"title":{"41-29":{}},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"38":{},"40":{},"49":{},"51":{},"52":{},"54":{},"56":{}},"component":{},"keyword":{}}],["line",{"_index":4754,"title":{},"name":{},"text":{"30":{},"38":{},"40":{},"41":{},"45":{},"63":{},"64":{}},"component":{},"keyword":{}}],["linear",{"_index":5983,"title":{},"name":{},"text":{"41":{},"49":{}},"component":{},"keyword":{}}],["linearizations(m\\iw,gmo0",{"_index":5984,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["link",{"_index":3082,"title":{},"name":{},"text":{"11":{},"31":{},"38":{},"41":{},"45":{},"50":{},"55":{},"57":{}},"component":{},"keyword":{}}],["linkag",{"_index":3649,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["linker",{"_index":4875,"title":{},"name":{},"text":{"31":{},"38":{},"50":{},"57":{}},"component":{},"keyword":{}}],["linux",{"_index":1360,"title":{},"name":{},"text":{"7":{},"19":{},"21":{},"23":{},"27":{},"34":{},"38":{},"40":{},"49":{},"63":{}},"component":{},"keyword":{}}],["lisa",{"_index":977,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["list",{"_index":1528,"title":{"14":{},"44":{},"12-2":{},"31-16":{},"48-10":{},"49-82":{},"51-149":{},"57-29":{}},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"14":{},"17":{},"19":{},"22":{},"23":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"40":{},"41":{},"42":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"55":{},"57":{},"64":{}},"component":{},"keyword":{}}],["list(bits(32",{"_index":9433,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["list(bits(8",{"_index":9509,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["list’",{"_index":6788,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["lit",{"_index":10173,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["liter",{"_index":6777,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["literatur",{"_index":5578,"title":{},"name":{},"text":{"40":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["lith",{"_index":787,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["litmu",{"_index":5544,"title":{"40-2":{}},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["litmus_lrsdsc",{"_index":5628,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["litmustest",{"_index":6011,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["littl",{"_index":1654,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"34":{},"38":{},"39":{},"45":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["live",{"_index":2830,"title":{},"name":{},"text":{"10":{},"49":{}},"component":{},"keyword":{}}],["livelock",{"_index":4428,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["lloop",{"_index":4722,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lmul",{"_index":7594,"title":{"51-20":{},"51-21":{},"51-22":{},"53-10":{}},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["lmul*vlen",{"_index":8925,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["lmul*vlen/sew",{"_index":7667,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lmul<sewmin/elen",{"_index":7663,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lmul=1",{"_index":7651,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["lmul=1/2",{"_index":7737,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["lmul=1/4",{"_index":7725,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lmul=1/8",{"_index":7789,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lmul=2",{"_index":7677,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["lmul=4",{"_index":7678,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["lmul=8",{"_index":7628,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["lmul>1",{"_index":7653,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["lo_half",{"_index":4635,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["load",{"_index":1476,"title":{"8-22":{},"28-2":{},"31-3":{},"31-4":{},"31-5":{},"33-9":{},"36-3":{},"37-5":{},"40-5":{},"41-10":{},"41-11":{},"41-12":{},"41-13":{},"43-1":{},"45-12":{},"47-5":{},"48-6":{},"51-37":{},"51-44":{},"51-46":{},"51-47":{},"51-48":{},"58-1":{},"59-1":{}},"name":{},"text":{"8":{},"10":{},"11":{},"18":{},"21":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"64":{},"67":{}},"component":{},"keyword":{}}],["load/stor",{"_index":1624,"title":{"51-38":{},"51-39":{},"51-40":{},"51-45":{},"51-49":{}},"name":{},"text":{"8":{},"27":{},"41":{},"51":{},"57":{},"60":{}},"component":{},"keyword":{}}],["load/store/amo",{"_index":404,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"50":{}},"component":{},"keyword":{}}],["load_continu",{"_index":6032,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["load_mem(kind",{"_index":6031,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["load_mem(plain_load",{"_index":6051,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["loader",{"_index":3481,"title":{},"name":{},"text":{"15":{},"49":{},"50":{}},"component":{},"keyword":{}}],["loadnorm",{"_index":5857,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["loadreserv",{"_index":5858,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["loadreserve.pair",{"_index":5899,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["loads/stor",{"_index":4333,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["loadvalu",{"_index":5842,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["load—that",{"_index":10227,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["loc",{"_index":5810,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["loc&([w];gmo);wr",{"_index":5992,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["loc;[w",{"_index":5955,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["loc?;[w];po",{"_index":5947,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["local",{"_index":2592,"title":{"64":{},"17-4":{}},"name":{},"text":{"10":{},"17":{},"18":{},"19":{},"23":{},"26":{},"40":{},"41":{},"45":{},"49":{},"51":{},"63":{},"64":{},"67":{}},"component":{},"keyword":{}}],["locat",{"_index":2430,"title":{"50-11":{}},"name":{},"text":{"10":{},"11":{},"26":{},"27":{},"28":{},"33":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"55":{},"56":{},"57":{},"65":{}},"component":{},"keyword":{}}],["location(",{"_index":5630,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lock",{"_index":897,"title":{"10-51":{}},"name":{},"text":{"7":{},"10":{},"15":{},"21":{},"26":{},"28":{},"40":{},"55":{},"56":{}},"component":{},"keyword":{}}],["lockdown",{"_index":3858,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{},"keyword":{}}],["loewenstein",{"_index":655,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["log",{"_index":6745,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["log2(2*sew",{"_index":9479,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["log2(sew",{"_index":9163,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["log2(xlen",{"_index":4580,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["logarithm",{"_index":1387,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["logic",{"_index":1702,"title":{"10-52":{},"29-7":{},"49-96":{},"51-61":{},"51-108":{},"52-32":{}},"name":{},"text":{"8":{},"10":{},"16":{},"19":{},"25":{},"27":{},"29":{},"31":{},"33":{},"39":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"61":{}},"component":{},"keyword":{}}],["logical/shift",{"_index":6438,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["lone",{"_index":5852,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["long",{"_index":2916,"title":{},"name":{},"text":{"10":{},"22":{},"26":{},"27":{},"29":{},"31":{},"34":{},"35":{},"38":{},"40":{},"41":{},"49":{},"51":{},"53":{},"56":{}},"component":{},"keyword":{}}],["longer",{"_index":439,"title":{},"name":{},"text":{"4":{},"10":{},"26":{},"38":{},"40":{},"41":{},"49":{},"51":{},"60":{},"61":{},"62":{},"65":{}},"component":{},"keyword":{}}],["longjmp",{"_index":7567,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["look",{"_index":1641,"title":{},"name":{},"text":{"8":{},"29":{},"49":{}},"component":{},"keyword":{}}],["lookup",{"_index":4567,"title":{},"name":{},"text":{"29":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["loom",{"_index":4016,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["loop",{"_index":2454,"title":{"33-16":{}},"name":{},"text":{"10":{},"28":{},"29":{},"33":{},"40":{},"45":{},"49":{},"50":{},"51":{},"53":{},"56":{},"64":{},"65":{}},"component":{},"keyword":{}}],["loop:lr.{w|d",{"_index":5747,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["loop:lr.{w|d}.aq",{"_index":5713,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["loop:lr.{w|d}.aqrl",{"_index":5784,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["loos",{"_index":4840,"title":{},"name":{},"text":{"30":{},"40":{},"51":{},"65":{}},"component":{},"keyword":{}}],["loosen",{"_index":4123,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["lose",{"_index":2681,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["loss",{"_index":2450,"title":{},"name":{},"text":{"10":{},"23":{},"26":{},"31":{},"42":{},"45":{},"51":{}},"component":{},"keyword":{}}],["lost",{"_index":3683,"title":{},"name":{},"text":{"19":{},"51":{}},"component":{},"keyword":{}}],["lot",{"_index":9658,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["low",{"_index":1140,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"15":{},"16":{},"19":{},"21":{},"22":{},"25":{},"26":{},"29":{},"35":{},"36":{},"38":{},"39":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"60":{},"61":{}},"component":{},"keyword":{}}],["lower",{"_index":1996,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"21":{},"22":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"59":{},"60":{},"66":{}},"component":{},"keyword":{}}],["lowest",{"_index":1845,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"26":{},"34":{},"38":{},"45":{},"47":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["lowestsetbit",{"_index":4619,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lowestsetbit(r",{"_index":4620,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lowestsetbit32",{"_index":4621,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lowestsetbit32(r",{"_index":4622,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lowmc",{"_index":1416,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["lp64",{"_index":4617,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lp_expect",{"_index":1887,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"50":{}},"component":{},"keyword":{}}],["lp_inst",{"_index":3057,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["lpad",{"_index":1784,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"50":{}},"component":{},"keyword":{}}],["lpe",{"_index":1781,"title":{"11-2":{}},"name":{},"text":{"8":{},"10":{},"11":{},"26":{}},"component":{},"keyword":{}}],["lpl",{"_index":7523,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["lprologu",{"_index":4707,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lr",{"_index":437,"title":{},"name":{},"text":{"4":{},"10":{},"28":{},"33":{},"40":{},"41":{},"48":{},"54":{},"56":{},"64":{}},"component":{},"keyword":{}}],["lr.aq",{"_index":5789,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lr.d",{"_index":4421,"title":{},"name":{},"text":{"28":{},"40":{},"44":{},"48":{}},"component":{},"keyword":{}}],["lr.d.aq",{"_index":5761,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lr.rl",{"_index":4442,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["lr.w",{"_index":4418,"title":{},"name":{},"text":{"28":{},"40":{},"44":{},"48":{}},"component":{},"keyword":{}}],["lr.{w|d",{"_index":5716,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lr.{w|d}.aq",{"_index":5787,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lr.{w|d}.aqrl",{"_index":5722,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lr/sc",{"_index":343,"title":{"31-14":{},"33-16":{}},"name":{},"text":{"4":{},"10":{},"26":{},"28":{},"31":{},"33":{},"34":{},"40":{},"41":{},"48":{},"54":{},"55":{},"64":{},"65":{}},"component":{},"keyword":{}}],["lsb",{"_index":5502,"title":{},"name":{},"text":{"38":{},"51":{}},"component":{},"keyword":{}}],["lsimpleloop",{"_index":4728,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["lubicz",{"_index":1256,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["luc",{"_index":658,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["lui",{"_index":4992,"title":{},"name":{},"text":{"31":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{}},"component":{},"keyword":{}}],["lui/addi16sp",{"_index":5060,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["lui/jalr",{"_index":5177,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["lumop",{"_index":7835,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lumop[4:0",{"_index":7837,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lumop[4:0]/sumop[4:0",{"_index":7822,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["lustig",{"_index":92,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["lut",{"_index":4679,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["lutomirski",{"_index":93,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["lw",{"_index":1917,"title":{},"name":{},"text":{"8":{},"27":{},"28":{},"31":{},"38":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"55":{},"57":{}},"component":{},"keyword":{}}],["lwl/lwr",{"_index":6461,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["lwsp",{"_index":5065,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["lwsync",{"_index":5718,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["lwu",{"_index":1918,"title":{},"name":{},"text":{"8":{},"27":{},"44":{},"47":{},"48":{}},"component":{},"keyword":{}}],["l{b|h|w|d",{"_index":5709,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["l{b|h|w|d}.aq",{"_index":5785,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["m",{"_index":326,"title":{"39":{}},"name":{"39":{}},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{},"27":{},"33":{},"34":{},"36":{},"38":{},"39":{},"40":{},"42":{},"48":{},"49":{},"50":{},"53":{},"56":{},"57":{}},"component":{},"keyword":{}}],["m/h",{"_index":3729,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["m/u",{"_index":2635,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["m1",{"_index":7792,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["m13",{"_index":9392,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["m16",{"_index":9394,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["m2",{"_index":7793,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["m3",{"_index":9391,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["m4",{"_index":7685,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["m6",{"_index":9393,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["m8",{"_index":7794,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["m9",{"_index":9390,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["m=0",{"_index":3635,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["m\\\"uller",{"_index":1359,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["m\\iw",{"_index":5988,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];addr;[m",{"_index":5969,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];ctrl;[w",{"_index":5973,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];data;[w",{"_index":5971,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];fencerel(fence.rw.r);[r",{"_index":5939,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];fencerel(fence.rw.rw);[m",{"_index":5943,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];fencerel(fence.rw.w);[w",{"_index":5941,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];po",{"_index":5954,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["m];po;[rl",{"_index":5964,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ma",{"_index":7645,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["maa",{"_index":95,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["mac",{"_index":5192,"title":{},"name":{},"text":{"34":{},"49":{},"50":{}},"component":{},"keyword":{}}],["machin",{"_index":159,"title":{"10":{},"21":{},"8-22":{},"8-24":{},"8-25":{},"8-26":{},"8-27":{},"8-28":{},"8-29":{},"9-2":{},"10-1":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-7":{},"10-16":{},"10-17":{},"10-18":{},"10-20":{},"10-21":{},"10-22":{},"10-23":{},"10-24":{},"10-25":{},"10-26":{},"10-27":{},"10-28":{},"10-29":{},"10-30":{},"10-31":{},"18-3":{},"19-2":{},"25-1":{},"25-3":{},"25-5":{},"42-8":{}},"name":{"10":{}},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{},"26":{},"27":{},"28":{},"30":{},"35":{},"36":{},"37":{},"38":{},"41":{},"42":{},"45":{},"49":{},"51":{},"63":{}},"component":{},"keyword":{}}],["machineri",{"_index":921,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["machine’",{"_index":381,"title":{},"name":{},"text":{"4":{},"8":{},"10":{}},"component":{},"keyword":{}}],["macro",{"_index":5042,"title":{},"name":{},"text":{"31":{},"34":{},"40":{},"45":{}},"component":{},"keyword":{}}],["madd",{"_index":6188,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["made",{"_index":186,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"23":{},"26":{},"28":{},"31":{},"34":{},"35":{},"38":{},"40":{},"41":{},"45":{},"46":{},"49":{},"50":{},"62":{},"63":{}},"component":{},"keyword":{}}],["madison",{"_index":827,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mag",{"_index":8430,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mag16",{"_index":2942,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["magnet",{"_index":6605,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["magnitud",{"_index":2421,"title":{},"name":{},"text":{"10":{},"30":{},"37":{},"45":{},"51":{}},"component":{},"keyword":{}}],["magnn",{"_index":2941,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mail",{"_index":6862,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["main",{"_index":296,"title":{"10-39":{},"40-13":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"19":{},"22":{},"26":{},"28":{},"29":{},"31":{},"33":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{},"56":{},"62":{},"63":{},"65":{}},"component":{},"keyword":{}}],["mainli",{"_index":1561,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["maintain",{"_index":580,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"19":{},"23":{},"26":{},"38":{},"47":{},"49":{},"50":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["mainten",{"_index":4277,"title":{},"name":{},"text":{"26":{},"50":{},"51":{},"63":{}},"component":{},"keyword":{}}],["maj(a,b,c",{"_index":9192,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["maj(x",{"_index":9208,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["majc",{"_index":878,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["major",{"_index":393,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"31":{},"34":{},"36":{},"37":{},"38":{},"42":{},"44":{},"50":{},"51":{},"53":{},"58":{},"66":{}},"component":{},"keyword":{}}],["make",{"_index":214,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"35":{},"38":{},"39":{},"40":{},"41":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"53":{},"61":{},"63":{},"67":{}},"component":{},"keyword":{}}],["malici",{"_index":3498,"title":{},"name":{},"text":{"15":{},"21":{},"49":{}},"component":{},"keyword":{}}],["manag",{"_index":194,"title":{"33":{},"8-23":{},"8-33":{},"26-19":{},"26-33":{},"26-35":{},"33-20":{}},"name":{},"text":{"4":{},"8":{},"10":{},"15":{},"17":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"33":{},"51":{},"64":{}},"component":{},"keyword":{}}],["manau",{"_index":818,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mandat",{"_index":2861,"title":{},"name":{},"text":{"10":{},"21":{},"26":{},"27":{},"34":{},"35":{},"37":{},"39":{},"45":{},"49":{},"51":{},"54":{},"64":{},"65":{}},"component":{},"keyword":{}}],["mandatori",{"_index":367,"title":{},"name":{},"text":{"4":{},"15":{},"27":{},"33":{},"34":{},"38":{},"49":{},"51":{},"62":{},"63":{}},"component":{},"keyword":{}}],["manerkar",{"_index":657,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["mani",{"_index":1661,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"22":{},"26":{},"28":{},"30":{},"31":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{}},"component":{},"keyword":{}}],["manifest",{"_index":2897,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["manipul",{"_index":2761,"title":{"29":{},"29-6":{},"29-17":{},"52-10":{},"52-12":{}},"name":{},"text":{"10":{},"29":{},"33":{},"37":{},"45":{},"47":{},"49":{},"51":{},"52":{},"55":{}},"component":{},"keyword":{}}],["manner",{"_index":2074,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"28":{},"31":{},"38":{},"40":{},"49":{}},"component":{},"keyword":{}}],["manti",{"_index":1143,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["mantissa",{"_index":3706,"title":{},"name":{},"text":{"19":{},"30":{},"58":{}},"component":{},"keyword":{}}],["manual",{"_index":7,"title":{"3":{},"6":{}},"name":{},"text":{"1":{},"5":{},"7":{},"8":{},"10":{},"12":{},"14":{},"26":{},"27":{},"28":{},"34":{},"35":{},"38":{},"40":{},"42":{},"45":{},"49":{},"52":{},"62":{}},"component":{},"keyword":{}}],["manufactur",{"_index":2378,"title":{},"name":{},"text":{"10":{},"15":{},"49":{}},"component":{},"keyword":{}}],["manycor",{"_index":5420,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["map",{"_index":1493,"title":{"10-29":{},"12-1":{},"40-16":{},"51-19":{},"51-20":{},"51-21":{},"51-22":{},"51-23":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"17":{},"26":{},"27":{},"28":{},"29":{},"31":{},"34":{},"35":{},"38":{},"40":{},"41":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{},"62":{},"64":{}},"component":{},"keyword":{}}],["maranget",{"_index":659,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["marc",{"_index":77,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["march",{"_index":274,"title":{},"name":{},"text":{"4":{},"7":{},"49":{}},"component":{},"keyword":{}}],["marchid",{"_index":2314,"title":{"10-4":{}},"name":{},"text":{"10":{},"12":{},"49":{}},"component":{},"keyword":{}}],["margaret",{"_index":661,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["margin",{"_index":5305,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["mark",{"_index":146,"title":{"26-33":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"21":{},"26":{},"28":{},"31":{},"34":{},"40":{},"41":{},"44":{},"45":{},"47":{},"50":{},"51":{}},"component":{},"keyword":{}}],["marker",{"_index":6487,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["marketto",{"_index":1315,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["markku",{"_index":677,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["markov",{"_index":1344,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["marshal",{"_index":660,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["marson",{"_index":1288,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["martin",{"_index":94,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["martonosi",{"_index":662,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["mask",{"_index":183,"title":{"27":{},"27-7":{},"27-8":{},"27-9":{},"27-16":{},"51-10":{},"51-24":{},"51-28":{},"51-29":{},"51-107":{},"51-108":{},"51-109":{},"51-110":{},"51-111":{},"51-112":{},"51-113":{},"51-114":{},"51-148":{},"53-2":{}},"name":{},"text":{"4":{},"10":{},"16":{},"17":{},"19":{},"23":{},"26":{},"27":{},"37":{},"49":{},"51":{},"52":{},"53":{},"58":{},"62":{}},"component":{},"keyword":{}}],["mask(x",{"_index":7774,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["maskabl",{"_index":2322,"title":{"16":{},"10-37":{}},"name":{},"text":{"10":{},"12":{},"16":{},"51":{}},"component":{},"keyword":{}}],["master",{"_index":2949,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["match",{"_index":1558,"title":{"10-50":{},"10-52":{}},"name":{},"text":{"8":{},"9":{},"10":{},"13":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"37":{},"40":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["materi",{"_index":2952,"title":{"40":{},"49-128":{}},"name":{},"text":{"10":{},"34":{},"40":{},"41":{},"48":{},"49":{}},"component":{},"keyword":{}}],["math",{"_index":5404,"title":{},"name":{},"text":{"37":{},"58":{}},"component":{},"keyword":{}}],["mathemat",{"_index":5335,"title":{},"name":{},"text":{"37":{},"41":{},"49":{}},"component":{},"keyword":{}}],["matric",{"_index":9565,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["matrix",{"_index":9557,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["matt",{"_index":118,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["matter",{"_index":7072,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["max",{"_index":3779,"title":{"29-40":{},"51-105":{}},"name":{},"text":{"19":{},"29":{},"30":{},"37":{},"51":{},"53":{}},"component":{},"keyword":{}}],["max(largest",{"_index":4406,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["max(vlmax,vlen/sew",{"_index":7773,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["max(vstart",{"_index":8604,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["max/bia",{"_index":4797,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["maxim",{"_index":1850,"title":{},"name":{},"text":{"8":{},"10":{},"22":{},"26":{},"31":{},"45":{},"50":{}},"component":{},"keyword":{}}],["maximum",{"_index":1616,"title":{"58-2":{}},"name":{},"text":{"8":{},"10":{},"19":{},"27":{},"28":{},"29":{},"30":{},"35":{},"37":{},"38":{},"50":{},"51":{},"58":{}},"component":{},"keyword":{}}],["maximumnumb",{"_index":5171,"title":{},"name":{},"text":{"34":{},"37":{},"51":{}},"component":{},"keyword":{}}],["maxnum",{"_index":5359,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["maxu",{"_index":4506,"title":{"29-41":{}},"name":{},"text":{"29":{},"51":{}},"component":{},"keyword":{}}],["mayb",{"_index":2051,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mb",{"_index":5735,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["mbadaddr",{"_index":524,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["mbe",{"_index":2514,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mbe=0",{"_index":2517,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mbe=1",{"_index":2518,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mbox{\\em",{"_index":5411,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["mcaus",{"_index":555,"title":{"10-24":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"16":{},"26":{}},"component":{},"keyword":{}}],["mccoy",{"_index":664,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["mcgraw",{"_index":945,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mcid",{"_index":4290,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["mckay",{"_index":1009,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mconfigptr",{"_index":374,"title":{"10-26":{}},"name":{},"text":{"4":{},"10":{},"12":{}},"component":{},"keyword":{}}],["mcontext",{"_index":3398,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mcontrol6.load=1",{"_index":5101,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["mcontrol6.s",{"_index":5097,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["mcontrol6.select=0",{"_index":5094,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["mcontrol6.select=1",{"_index":5099,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["mcontrol6.size=0",{"_index":5098,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["mcontrol6.store=1",{"_index":5100,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["mcounteren",{"_index":1805,"title":{"10-20":{},"25-5":{}},"name":{},"text":{"8":{},"10":{},"12":{},"17":{},"23":{},"25":{},"26":{}},"component":{},"keyword":{}}],["mcounteren[i]=1",{"_index":3540,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["mcountinhibit",{"_index":474,"title":{"10-21":{}},"name":{},"text":{"4":{},"10":{},"12":{},"17":{},"18":{}},"component":{},"keyword":{}}],["mcountinhibit.ci",{"_index":2725,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mctrctl",{"_index":3604,"title":{"19-2":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mctrctl.m",{"_index":3731,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mctrctl.mte",{"_index":3733,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mctrctlh",{"_index":3659,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mctrdepth",{"_index":3692,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mctrstatu",{"_index":3693,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mcu",{"_index":6928,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mcycl",{"_index":2701,"title":{},"name":{},"text":{"10":{},"12":{},"19":{},"62":{}},"component":{},"keyword":{}}],["mcyclecfg",{"_index":3566,"title":{"18-3":{}},"name":{},"text":{"17":{},"18":{}},"component":{},"keyword":{}}],["mcyclecfgh",{"_index":3593,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["mcycleh",{"_index":2713,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["mdt",{"_index":2468,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mean",{"_index":1757,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"16":{},"17":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"42":{},"43":{},"45":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"59":{}},"component":{},"keyword":{}}],["meaning",{"_index":3744,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["meaningless",{"_index":4811,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["meant",{"_index":3879,"title":{},"name":{},"text":{"21":{},"27":{},"31":{},"40":{},"51":{},"64":{},"67":{}},"component":{},"keyword":{}}],["meantim",{"_index":2596,"title":{},"name":{},"text":{"10":{},"40":{}},"component":{},"keyword":{}}],["measur",{"_index":4088,"title":{},"name":{},"text":{"26":{},"31":{},"35":{},"38":{},"49":{}},"component":{},"keyword":{}}],["mechala",{"_index":1355,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mechan",{"_index":463,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"19":{},"20":{},"21":{},"25":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"38":{},"40":{},"45":{},"49":{},"51":{},"52":{},"57":{},"60":{},"62":{},"63":{},"65":{}},"component":{},"keyword":{}}],["medeleg",{"_index":549,"title":{"10-17":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{}},"component":{},"keyword":{}}],["medeleg[11",{"_index":2643,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["medeleg[16",{"_index":2644,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["medelegh",{"_index":229,"title":{},"name":{},"text":{"4":{},"10":{},"12":{}},"component":{},"keyword":{}}],["mediat",{"_index":4037,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["meet",{"_index":1219,"title":{},"name":{},"text":{"7":{},"19":{},"22":{},"26":{},"49":{}},"component":{},"keyword":{}}],["megan",{"_index":124,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["megapag",{"_index":4175,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["mei",{"_index":2663,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["meip",{"_index":2652,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["meltdown",{"_index":6793,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mem",{"_index":2807,"title":{},"name":{},"text":{"10":{},"40":{},"44":{},"51":{}},"component":{},"keyword":{}}],["mem[ssp",{"_index":7544,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["mem[x(rs1",{"_index":7575,"title":{},"name":{},"text":{"50":{},"55":{}},"component":{},"keyword":{}}],["mem[x(rs1)+0",{"_index":9699,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["mem[x(rs1)+4",{"_index":9701,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["mem[x(rs1)+8",{"_index":9710,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["mem[x(rs1c)+extz(uimm)][15..0",{"_index":9807,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["mem[x(rs1c)+extz(uimm)][7..0",{"_index":9805,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["mem_load",{"_index":6072,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["mem_stor",{"_index":6074,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["mem_valu",{"_index":6044,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["member",{"_index":4304,"title":{},"name":{},"text":{"26":{},"33":{},"49":{},"51":{}},"component":{},"keyword":{}}],["memcpi",{"_index":9529,"title":{"53-3":{}},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["memcpy(void",{"_index":9546,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["memori",{"_index":193,"title":{"21":{},"41":{},"48":{},"54":{},"8-23":{},"8-33":{},"10-11":{},"10-29":{},"10-38":{},"10-39":{},"10-45":{},"10-48":{},"10-49":{},"10-53":{},"11-7":{},"26-4":{},"26-19":{},"26-20":{},"26-21":{},"26-23":{},"26-24":{},"26-25":{},"26-26":{},"26-27":{},"26-28":{},"26-30":{},"26-33":{},"27-8":{},"28-4":{},"33-4":{},"33-7":{},"38-4":{},"40-4":{},"40-13":{},"41-3":{},"41-7":{},"41-10":{},"41-11":{},"41-12":{},"41-16":{},"41-17":{},"45-13":{},"48-1":{},"48-2":{},"48-5":{},"51-50":{},"51-51":{},"54-1":{},"57-34":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"60":{},"62":{},"63":{},"64":{},"65":{},"67":{}},"component":{},"keyword":{}}],["memory_order_seq_cst",{"_index":4437,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["memory_port",{"_index":5820,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["memoryev",{"_index":5827,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["memoryevent.acquirercpc",{"_index":5866,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["memoryevent.acquirercsc",{"_index":5867,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["memoryevent.releasercpc",{"_index":5868,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["memoryevent.releasercsc",{"_index":5869,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["memorymodel",{"_index":5481,"title":{},"name":{},"text":{"38":{},"40":{},"41":{},"62":{}},"component":{},"keyword":{}}],["memory’",{"_index":3888,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["meng",{"_index":1122,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["menhorn",{"_index":666,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["mention",{"_index":3843,"title":{},"name":{},"text":{"21":{},"27":{},"38":{},"49":{}},"component":{},"keyword":{}}],["menvcfg",{"_index":252,"title":{"10-27":{},"25-10":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"25":{},"27":{},"33":{}},"component":{},"keyword":{}}],["menvcfg.adu",{"_index":2776,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["menvcfg.cbcf",{"_index":5110,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["menvcfg.cbi",{"_index":5106,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["menvcfg.cbz",{"_index":5114,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["menvcfg.cd",{"_index":3569,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["menvcfg.cde=0",{"_index":3572,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["menvcfg.cde=1",{"_index":3537,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["menvcfg.dt",{"_index":2786,"title":{},"name":{},"text":{"10":{},"24":{}},"component":{},"keyword":{}}],["menvcfg.lp",{"_index":3052,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["menvcfg.pbmt",{"_index":2772,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["menvcfg.ss",{"_index":1793,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"50":{}},"component":{},"keyword":{}}],["menvcfg.sse=0",{"_index":3072,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["menvcfgh",{"_index":384,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"25":{}},"component":{},"keyword":{}}],["mepc",{"_index":2115,"title":{"10-23":{}},"name":{},"text":{"8":{},"10":{},"12":{},"16":{}},"component":{},"keyword":{}}],["mepc[0",{"_index":2731,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mepc[1",{"_index":2733,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mepc[1:0",{"_index":2732,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mere",{"_index":4167,"title":{},"name":{},"text":{"26":{},"49":{},"62":{}},"component":{},"keyword":{}}],["merg",{"_index":1993,"title":{"51-71":{},"51-94":{},"52-35":{}},"name":{},"text":{"8":{},"21":{},"40":{},"51":{}},"component":{},"keyword":{}}],["messag",{"_index":2698,"title":{},"name":{},"text":{"10":{},"28":{},"49":{},"52":{}},"component":{},"keyword":{}}],["messagesch",{"_index":9179,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["messageschedplusc[1:0",{"_index":9187,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["messageschedplusc[3:2",{"_index":9188,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["messageshedplusc[3:0",{"_index":9186,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["met",{"_index":2170,"title":{},"name":{},"text":{"8":{},"33":{}},"component":{},"keyword":{}}],["metadata",{"_index":3612,"title":{"19-10":{}},"name":{},"text":{"19":{},"26":{}},"component":{},"keyword":{}}],["metal",{"_index":5442,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["metast",{"_index":7006,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["method",{"_index":1058,"title":{},"name":{},"text":{"7":{},"9":{},"19":{},"26":{},"30":{},"49":{},"52":{},"57":{},"59":{},"63":{}},"component":{},"keyword":{}}],["methodolog",{"_index":1188,"title":{},"name":{},"text":{"7":{},"49":{},"50":{}},"component":{},"keyword":{}}],["meticul",{"_index":2455,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["metric",{"_index":4284,"title":{},"name":{},"text":{"26":{},"31":{},"35":{},"49":{}},"component":{},"keyword":{}}],["mew",{"_index":7819,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mexico",{"_index":1391,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mf2",{"_index":7791,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mf4",{"_index":7790,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mf8",{"_index":7788,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mffsr",{"_index":5205,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["mftx.",{"_index":5199,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["mftx.d",{"_index":5200,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["mhartid",{"_index":2316,"title":{"10-6":{}},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["mhpmcounter",{"_index":2710,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mhpmcounter3",{"_index":2705,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["mhpmcounter31",{"_index":2706,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["mhpmcounter31h",{"_index":3379,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmcounter3h",{"_index":3377,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmcounter4",{"_index":3376,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmcounter4h",{"_index":3378,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmcountern",{"_index":2711,"title":{},"name":{},"text":{"10":{},"23":{}},"component":{},"keyword":{}}],["mhpmcounternh",{"_index":2715,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mhpmcounterx/mhpmeventx",{"_index":2251,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mhpmcounterxh/mhpmeventxh",{"_index":2253,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mhpmevent",{"_index":4020,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["mhpmevent3",{"_index":2708,"title":{},"name":{},"text":{"10":{},"12":{},"23":{}},"component":{},"keyword":{}}],["mhpmevent31",{"_index":2709,"title":{},"name":{},"text":{"10":{},"12":{},"23":{}},"component":{},"keyword":{}}],["mhpmevent31h",{"_index":3390,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmevent3h",{"_index":3388,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmevent4",{"_index":3387,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmevent4h",{"_index":3389,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mhpmeventi",{"_index":3563,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["mhpmeventn",{"_index":2712,"title":{},"name":{},"text":{"10":{},"23":{}},"component":{},"keyword":{}}],["mhpmeventn.of",{"_index":2690,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["mhpmeventnh",{"_index":2716,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mhpmeventx",{"_index":4035,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["mhz",{"_index":5254,"title":{},"name":{},"text":{"35":{},"49":{}},"component":{},"keyword":{}}],["mi",{"_index":765,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mib",{"_index":4174,"title":{},"name":{},"text":{"26":{},"45":{},"50":{}},"component":{},"keyword":{}}],["michael",{"_index":114,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["micro",{"_index":750,"title":{},"name":{},"text":{"7":{},"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["microarchitectur",{"_index":856,"title":{},"name":{},"text":{"7":{},"10":{},"26":{},"28":{},"31":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"51":{},"52":{},"61":{},"64":{}},"component":{},"keyword":{}}],["microcod",{"_index":5418,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["microcontrol",{"_index":4467,"title":{},"name":{},"text":{"28":{},"31":{},"38":{},"39":{},"46":{},"57":{}},"component":{},"keyword":{}}],["micromip",{"_index":4900,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["microop",{"_index":7648,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["microprocessor",{"_index":775,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["microsoft",{"_index":3426,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["middl",{"_index":3477,"title":{},"name":{},"text":{"15":{},"35":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["middlewar",{"_index":6785,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mideleg",{"_index":550,"title":{"8-26":{},"10-17":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"17":{},"23":{}},"component":{},"keyword":{}}],["mideleg[5",{"_index":2641,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["midori",{"_index":1146,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["mie",{"_index":1478,"title":{"8-27":{},"10-18":{},"25-3":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["mie.lcofi",{"_index":2687,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mie.mei",{"_index":2651,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mie.msi",{"_index":2658,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mie.mti",{"_index":2654,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mie.sei",{"_index":2669,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mie.ssi",{"_index":2685,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mie.sti",{"_index":2683,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{},"keyword":{}}],["mie/si",{"_index":4033,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["mie=mpi",{"_index":2195,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["migrat",{"_index":3673,"title":{},"name":{},"text":{"19":{},"26":{},"28":{},"36":{},"51":{},"63":{}},"component":{},"keyword":{}}],["mike",{"_index":83,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["militari",{"_index":7047,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["millicod",{"_index":4972,"title":{},"name":{},"text":{"31":{},"45":{},"57":{}},"component":{},"keyword":{}}],["mimic",{"_index":2679,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mimpid",{"_index":2315,"title":{"10-5":{}},"name":{},"text":{"10":{},"12":{},"49":{}},"component":{},"keyword":{}}],["min",{"_index":4507,"title":{"29-42":{},"51-105":{}},"name":{},"text":{"29":{},"30":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["min(vl",{"_index":8603,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["min/max",{"_index":7602,"title":{"51-65":{},"51-90":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["mind",{"_index":5247,"title":{},"name":{},"text":{"35":{},"52":{}},"component":{},"keyword":{}}],["minh",{"_index":3571,"title":{},"name":{},"text":{"17":{},"18":{},"23":{}},"component":{},"keyword":{}}],["minim",{"_index":1726,"title":{"51-140":{},"59-6":{}},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"27":{},"29":{},"30":{},"31":{},"35":{},"36":{},"38":{},"40":{},"41":{},"45":{},"49":{},"51":{},"52":{},"59":{},"60":{},"63":{}},"component":{},"keyword":{}}],["minimum",{"_index":333,"title":{"51-137":{},"58-2":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"28":{},"29":{},"35":{},"37":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["minimum/maximum",{"_index":4479,"title":{"29-10":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["minimumnumb",{"_index":5170,"title":{},"name":{},"text":{"34":{},"37":{},"51":{}},"component":{},"keyword":{}}],["minnum",{"_index":5358,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["minor",{"_index":2844,"title":{},"name":{},"text":{"10":{},"31":{},"38":{},"42":{}},"component":{},"keyword":{}}],["minstret",{"_index":2703,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["minstretcfg",{"_index":3567,"title":{"18-3":{}},"name":{},"text":{"17":{},"18":{}},"component":{},"keyword":{}}],["minstretcfgh",{"_index":3594,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["minstreth",{"_index":2714,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["minu",{"_index":3771,"title":{"29-43":{}},"name":{},"text":{"19":{},"29":{},"51":{}},"component":{},"keyword":{}}],["minuend",{"_index":8245,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mip",{"_index":521,"title":{"8-27":{},"10-18":{},"25-3":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"25":{},"26":{},"31":{},"37":{},"38":{},"45":{},"62":{}},"component":{},"keyword":{}}],["mip.lcofip",{"_index":2686,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mip.meip",{"_index":2650,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mip.msip",{"_index":2657,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mip.mtip",{"_index":2653,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mip.seip",{"_index":2668,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mip.ssip",{"_index":2684,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mip.stip",{"_index":2682,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{},"keyword":{}}],["mip/mi",{"_index":4097,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["mip/mie/sip/si",{"_index":4031,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["mip/sip",{"_index":4032,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["miph",{"_index":2237,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mips16",{"_index":4896,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["mireg",{"_index":2225,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mireg2",{"_index":2227,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mireg3",{"_index":2229,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mireg4",{"_index":2231,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mireg5",{"_index":2233,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mireg6",{"_index":2235,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["miregi",{"_index":2241,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mirror",{"_index":4059,"title":{},"name":{},"text":{"25":{},"51":{}},"component":{},"keyword":{}}],["misa",{"_index":454,"title":{"10-2":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"16":{},"26":{},"38":{},"51":{},"60":{}},"component":{},"keyword":{}}],["misa.b",{"_index":222,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["misa.c",{"_index":9741,"title":{"57-4":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["misa.f",{"_index":3962,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["misa.f=0",{"_index":2336,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["misa.mxl",{"_index":212,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["misa.v",{"_index":227,"title":{},"name":{},"text":{"4":{},"51":{}},"component":{},"keyword":{}}],["misa[7",{"_index":1511,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["misabas",{"_index":4072,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["misalign",{"_index":232,"title":{"10-44":{},"33-13":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"37":{},"40":{},"41":{},"45":{},"48":{},"50":{},"51":{},"60":{}},"component":{},"keyword":{}}],["misc",{"_index":5061,"title":{},"name":{},"text":{"31":{},"44":{}},"component":{},"keyword":{}}],["misdescrib",{"_index":462,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["miselect",{"_index":2223,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["miselect/mireg",{"_index":2242,"title":{},"name":{},"text":{"9":{},"19":{}},"component":{},"keyword":{}}],["mismatch",{"_index":6517,"title":{},"name":{},"text":{"48":{},"50":{}},"component":{},"keyword":{}}],["misp",{"_index":3697,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mispredict",{"_index":1905,"title":{},"name":{},"text":{"8":{},"19":{},"45":{}},"component":{},"keyword":{}}],["miss",{"_index":2190,"title":{},"name":{},"text":{"8":{},"10":{},"28":{},"31":{},"35":{},"38":{},"51":{},"56":{},"63":{},"65":{}},"component":{},"keyword":{}}],["misspecul",{"_index":8019,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mistakenli",{"_index":3095,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["mitig",{"_index":1059,"title":{},"name":{},"text":{"7":{},"21":{},"28":{},"49":{},"51":{},"56":{}},"component":{},"keyword":{}}],["mix",{"_index":2536,"title":{"40-20":{},"51-23":{},"53-2":{}},"name":{},"text":{"10":{},"26":{},"31":{},"37":{},"40":{},"41":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["mixcol",{"_index":7098,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["mixcolumn",{"_index":6621,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["ml",{"_index":4765,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["mlpe",{"_index":2795,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mm",{"_index":2774,"title":{},"name":{"40":{},"41":{}},"text":{"10":{}},"component":{},"keyword":{}}],["mmap",{"_index":4335,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["mmio",{"_index":5705,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["mml",{"_index":2792,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mmu",{"_index":3898,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["mmwp",{"_index":2791,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mmwp/mml",{"_index":3867,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["mncaus",{"_index":2474,"title":{},"name":{},"text":{"10":{},"12":{},"16":{}},"component":{},"keyword":{}}],["mnemon",{"_index":4538,"title":{},"name":{},"text":{"29":{},"30":{},"33":{},"37":{},"43":{},"45":{},"49":{},"51":{},"52":{},"57":{},"59":{},"61":{},"66":{}},"component":{},"keyword":{}}],["mnepc",{"_index":2473,"title":{},"name":{},"text":{"10":{},"12":{},"16":{}},"component":{},"keyword":{}}],["mnepc[0",{"_index":3503,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mnepc[1",{"_index":3505,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mnepc[1:0",{"_index":3504,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mno",{"_index":6153,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["mnois",{"_index":7080,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mnoise[31",{"_index":7081,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mnpelp",{"_index":3510,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mnpp",{"_index":3507,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mnpv",{"_index":3508,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mnret",{"_index":2481,"title":{"16-4":{}},"name":{},"text":{"10":{},"11":{},"16":{}},"component":{},"keyword":{}}],["mnscratch",{"_index":3367,"title":{},"name":{},"text":{"12":{},"16":{}},"component":{},"keyword":{}}],["mnstatu",{"_index":2475,"title":{},"name":{},"text":{"10":{},"12":{},"16":{}},"component":{},"keyword":{}}],["mnstatus.mnpelp",{"_index":3523,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mnstatus.nmi",{"_index":2472,"title":{},"name":{},"text":{"10":{},"16":{}},"component":{},"keyword":{}}],["mobil",{"_index":4906,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["mod",{"_index":10125,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["mode",{"_index":258,"title":{"18":{},"21":{},"23":{},"25":{},"8-1":{},"10-31":{},"10-51":{},"15-3":{},"19-15":{},"19-16":{},"19-20":{},"27-7":{},"30-10":{},"33-14":{},"51-15":{},"51-39":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"30":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"58":{},"59":{},"63":{}},"component":{},"keyword":{}}],["mode(",{"_index":3632,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mode/h",{"_index":4045,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["mode=bar",{"_index":1836,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["mode=direct",{"_index":2628,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["mode=vector",{"_index":2629,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["model",{"_index":2875,"title":{"41":{},"48":{},"21-2":{},"41-3":{},"45-2":{},"46-1":{},"48-1":{},"48-2":{},"48-5":{},"51-3":{},"51-51":{}},"name":{},"text":{"10":{},"12":{},"15":{},"16":{},"21":{},"26":{},"28":{},"33":{},"34":{},"35":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{},"62":{},"63":{},"67":{}},"component":{},"keyword":{}}],["modern",{"_index":2802,"title":{},"name":{},"text":{"10":{},"17":{},"26":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["mode’",{"_index":1859,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"27":{}},"component":{},"keyword":{}}],["modif",{"_index":485,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"17":{},"19":{},"21":{},"27":{},"31":{},"34":{},"36":{},"45":{},"50":{},"55":{},"62":{}},"component":{},"keyword":{}}],["modifi",{"_index":593,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"18":{},"19":{},"21":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"51":{},"59":{},"62":{},"64":{}},"component":{},"keyword":{}}],["modified/written",{"_index":3921,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["modul",{"_index":145,"title":{"12-7":{},"12-9":{}},"name":{},"text":{"4":{},"7":{},"19":{},"33":{},"34":{},"49":{},"50":{},"57":{},"66":{}},"component":{},"keyword":{}}],["modular",{"_index":5440,"title":{"58-4":{}},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["modulo",{"_index":2970,"title":{},"name":{},"text":{"10":{},"26":{},"38":{},"52":{}},"component":{},"keyword":{}}],["moghimi",{"_index":1214,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["moment",{"_index":1570,"title":{},"name":{},"text":{"8":{},"22":{}},"component":{},"keyword":{}}],["monitor",{"_index":595,"title":{"10-19":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"15":{},"17":{},"21":{},"26":{},"28":{},"35":{},"49":{}},"component":{},"keyword":{}}],["monitor/mwait",{"_index":10201,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["monitoring/tun",{"_index":5246,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["monoton",{"_index":5255,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["mont",{"_index":69,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["montgomeri",{"_index":6819,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["moor",{"_index":1316,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["mop",{"_index":7825,"title":{},"name":{},"text":{"51":{},"66":{}},"component":{},"keyword":{}}],["mop.r.28",{"_index":7539,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["mop.r.n",{"_index":10205,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["mop.rr.7",{"_index":7537,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["mop.rr.n",{"_index":10206,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["mop[1:0",{"_index":7820,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mop[1:0]!=11",{"_index":7834,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["more",{"_index":526,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"60":{},"61":{},"62":{},"63":{},"65":{}},"component":{},"keyword":{}}],["moreov",{"_index":5344,"title":{},"name":{},"text":{"37":{},"40":{},"50":{}},"component":{},"keyword":{}}],["mostli",{"_index":4867,"title":{},"name":{},"text":{"31":{},"38":{},"41":{},"45":{}},"component":{},"keyword":{}}],["motiv",{"_index":536,"title":{},"name":{},"text":{"4":{},"26":{},"30":{},"31":{},"38":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["move",{"_index":432,"title":{"36-5":{},"37-7":{},"43-3":{},"51-72":{},"51-95":{},"51-118":{},"51-119":{},"51-130":{},"58-5":{},"59-3":{}},"name":{},"text":{"4":{},"9":{},"19":{},"28":{},"31":{},"34":{},"36":{},"37":{},"40":{},"43":{},"44":{},"45":{},"50":{},"51":{},"53":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{}},"component":{},"keyword":{}}],["move_tail",{"_index":9725,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["movement",{"_index":7548,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["mp+fence.w.w+fr",{"_index":5636,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["mpelp",{"_index":2621,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{},"keyword":{}}],["mpie",{"_index":2114,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["mpie=1",{"_index":2196,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mpp",{"_index":1984,"title":{},"name":{},"text":{"8":{},"10":{},"33":{}},"component":{},"keyword":{}}],["mpp=",{"_index":2512,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mpp=0",{"_index":2194,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mpp=3",{"_index":1985,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mpp’",{"_index":2508,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mprv",{"_index":1882,"title":{},"name":{},"text":{"8":{},"10":{},"27":{},"33":{}},"component":{},"keyword":{}}],["mprv=0",{"_index":2007,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["mprv=1",{"_index":2008,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["mpv",{"_index":1981,"title":{},"name":{},"text":{"8":{},"33":{}},"component":{},"keyword":{}}],["mpv=0",{"_index":2193,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mret",{"_index":321,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"16":{},"26":{}},"component":{},"keyword":{}}],["mro",{"_index":3318,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["mrw",{"_index":2222,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{},"keyword":{}}],["ms]ctrctl",{"_index":3730,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["msave",{"_index":9932,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["msb",{"_index":2393,"title":{},"name":{},"text":{"10":{},"27":{},"37":{},"51":{}},"component":{},"keyword":{}}],["mscratch",{"_index":2318,"title":{"10-22":{}},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["mseccfg",{"_index":379,"title":{"10-28":{}},"name":{},"text":{"4":{},"10":{},"12":{},"21":{},"27":{},"49":{}},"component":{},"keyword":{}}],["mseccfg.[s,u]se",{"_index":6966,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mseccfg.mlp",{"_index":2863,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{},"keyword":{}}],["mseccfg.mml",{"_index":3822,"title":{"21-4":{}},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["mseccfg.mmwp",{"_index":3855,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["mseccfg.rlb",{"_index":3849,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["mseccfg.sse",{"_index":6772,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mseccfg.sseed=1",{"_index":6774,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mseccfg.use",{"_index":6773,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["mseccfgh",{"_index":380,"title":{},"name":{},"text":{"4":{},"10":{},"12":{}},"component":{},"keyword":{}}],["msi",{"_index":2691,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["msip",{"_index":2659,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mstateen",{"_index":2301,"title":{},"name":{},"text":{"9":{},"22":{}},"component":{},"keyword":{}}],["mstateen0",{"_index":2298,"title":{},"name":{},"text":{"9":{},"12":{},"17":{},"19":{},"22":{},"26":{},"57":{}},"component":{},"keyword":{}}],["mstateen0.ctr",{"_index":3713,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mstateen0.ctr=0",{"_index":3715,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mstateen0.ctr=1",{"_index":3714,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mstateen0.srmcfg",{"_index":4296,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["mstateen0[60",{"_index":2302,"title":{},"name":{},"text":{"9":{},"17":{}},"component":{},"keyword":{}}],["mstateen0[60]=0",{"_index":2299,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mstateen0[60]=1",{"_index":2306,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["mstateen0h",{"_index":3359,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen1",{"_index":3356,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen1h",{"_index":3360,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen2",{"_index":3357,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen2h",{"_index":3361,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen3",{"_index":3358,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen3h",{"_index":3362,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["mstateen4",{"_index":3976,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen4h",{"_index":3978,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen5",{"_index":3980,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen5h",{"_index":3982,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen6",{"_index":3984,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen6h",{"_index":3986,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen7",{"_index":3988,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstateen7h",{"_index":3990,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["mstatu",{"_index":373,"title":{"8-25":{},"10-7":{},"10-8":{},"10-9":{},"10-10":{},"10-11":{},"10-12":{},"10-13":{},"10-14":{},"10-15":{},"51-5":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"22":{},"26":{},"33":{},"56":{},"60":{}},"component":{},"keyword":{}}],["mstatus.f",{"_index":8335,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mstatus.mi",{"_index":3502,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mstatus.mpp",{"_index":447,"title":{},"name":{},"text":{"4":{},"16":{}},"component":{},"keyword":{}}],["mstatus.mprv",{"_index":324,"title":{},"name":{},"text":{"4":{},"16":{},"21":{}},"component":{},"keyword":{}}],["mstatus.mprv=0",{"_index":2516,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mstatus.mpv",{"_index":3509,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["mstatus.sd",{"_index":7638,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mstatus.tvm",{"_index":1959,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["mstatus.tvm=0",{"_index":1961,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mstatus.tvm=1",{"_index":1834,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["mstatus.tw=0",{"_index":1607,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mstatus.v",{"_index":7637,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mstatus.xi",{"_index":464,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["mstatus/mstatush",{"_index":2113,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["mstatus[10:9",{"_index":7635,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["mstatush",{"_index":368,"title":{"8-25":{},"10-7":{},"10-12":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{}},"component":{},"keyword":{}}],["msub",{"_index":6189,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["mte",{"_index":3634,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["mtfsr",{"_index":5206,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["mti",{"_index":2692,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mtie",{"_index":2800,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mtime",{"_index":2319,"title":{"10-30":{}},"name":{},"text":{"10":{},"17":{},"25":{}},"component":{},"keyword":{}}],["mtimecmp",{"_index":2320,"title":{"10-30":{}},"name":{},"text":{"10":{},"25":{}},"component":{},"keyword":{}}],["mtinst",{"_index":1481,"title":{"8-29":{},"8-37":{}},"name":{},"text":{"8":{},"12":{},"33":{}},"component":{},"keyword":{}}],["mtip",{"_index":2655,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mtval",{"_index":528,"title":{"10-25":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{}},"component":{},"keyword":{}}],["mtval/stval",{"_index":2065,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mtval2",{"_index":1480,"title":{"8-28":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["mtval2/htval",{"_index":2069,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mtval2’",{"_index":2018,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["mtval’",{"_index":2767,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mtvec",{"_index":517,"title":{"10-16":{}},"name":{},"text":{"4":{},"10":{},"12":{},"16":{}},"component":{},"keyword":{}}],["mu",{"_index":7683,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["much",{"_index":1942,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"26":{},"28":{},"30":{},"31":{},"38":{},"40":{},"41":{},"45":{},"49":{},"51":{},"52":{},"65":{}},"component":{},"keyword":{}}],["mul",{"_index":4744,"title":{"30-16":{}},"name":{},"text":{"30":{},"39":{},"44":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["mulh",{"_index":5511,"title":{},"name":{},"text":{"39":{},"44":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["mulh[[s]u",{"_index":5518,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["mulhsu",{"_index":5513,"title":{},"name":{},"text":{"39":{},"44":{},"48":{},"49":{}},"component":{},"keyword":{}}],["mulhu",{"_index":5512,"title":{},"name":{},"text":{"39":{},"44":{},"48":{},"49":{}},"component":{},"keyword":{}}],["multi",{"_index":2917,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"28":{},"39":{},"40":{},"42":{},"49":{},"51":{}},"component":{},"keyword":{}}],["multibyt",{"_index":2530,"title":{},"name":{},"text":{"10":{},"45":{}},"component":{},"keyword":{}}],["multicomput",{"_index":5439,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["multicor",{"_index":866,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["multimedia",{"_index":6198,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["multipl",{"_index":1113,"title":{"39":{},"29-15":{},"29-18":{},"39-1":{},"52-11":{},"52-22":{}},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"15":{},"18":{},"19":{},"22":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"59":{},"63":{},"65":{}},"component":{},"keyword":{}}],["multiplex",{"_index":2818,"title":{},"name":{},"text":{"10":{},"25":{},"38":{},"45":{}},"component":{},"keyword":{}}],["multipli",{"_index":2045,"title":{"49-8":{},"49-84":{},"49-95":{},"51-66":{},"51-68":{},"51-69":{},"51-70":{},"51-76":{},"51-84":{},"51-85":{},"51-86":{},"52-19":{},"52-33":{},"52-34":{},"52-68":{}},"name":{},"text":{"8":{},"10":{},"29":{},"30":{},"36":{},"37":{},"38":{},"39":{},"45":{},"49":{},"51":{},"52":{},"53":{},"57":{},"59":{}},"component":{},"keyword":{}}],["multiplicand",{"_index":5374,"title":{},"name":{},"text":{"37":{},"39":{},"51":{},"52":{}},"component":{},"keyword":{}}],["multiply/divid",{"_index":2346,"title":{"51-83":{}},"name":{},"text":{"10":{},"28":{},"38":{},"51":{}},"component":{},"keyword":{}}],["multiprocessor",{"_index":773,"title":{},"name":{},"text":{"7":{},"10":{},"28":{},"38":{},"50":{},"54":{},"55":{},"63":{}},"component":{},"keyword":{}}],["multiprogram",{"_index":3478,"title":{},"name":{},"text":{"15":{},"38":{}},"component":{},"keyword":{}}],["multitask",{"_index":5263,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["multithread",{"_index":901,"title":{},"name":{},"text":{"7":{},"35":{},"38":{},"48":{},"65":{}},"component":{},"keyword":{}}],["mulw",{"_index":5521,"title":{},"name":{},"text":{"39":{},"44":{},"48":{},"49":{}},"component":{},"keyword":{}}],["mundkur",{"_index":97,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["muralidaran",{"_index":697,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["mustn’t",{"_index":6473,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["mutabl",{"_index":7520,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["mutat",{"_index":2601,"title":{},"name":{},"text":{"10":{},"31":{},"45":{}},"component":{},"keyword":{}}],["mutex",{"_index":4106,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["mutual",{"_index":1692,"title":{},"name":{},"text":{"8":{},"10":{},"28":{},"51":{}},"component":{},"keyword":{}}],["mux",{"_index":2649,"title":{},"name":{},"text":{"10":{},"28":{},"31":{},"36":{}},"component":{},"keyword":{}}],["mv",{"_index":5022,"title":{},"name":{},"text":{"31":{},"34":{},"37":{},"45":{},"50":{},"51":{},"53":{},"55":{}},"component":{},"keyword":{}}],["mvendorid",{"_index":495,"title":{"10-3":{}},"name":{},"text":{"4":{},"10":{},"12":{},"49":{}},"component":{},"keyword":{}}],["mvien",{"_index":3575,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["mvip",{"_index":3574,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["mxl",{"_index":512,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["mxlen",{"_index":215,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"16":{},"19":{}},"component":{},"keyword":{}}],["mxlen..xlen",{"_index":2493,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mxlen=2mxl+4",{"_index":2334,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["mxlen=32",{"_index":1983,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["mxlen=64",{"_index":1982,"title":{},"name":{},"text":{"8":{},"10":{},"19":{}},"component":{},"keyword":{}}],["mxlen≥sxlen",{"_index":287,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["mxr",{"_index":317,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"27":{},"33":{}},"component":{},"keyword":{}}],["mxr=0",{"_index":2500,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["mxr=1",{"_index":2504,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["mxtf.",{"_index":5202,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["mxtf.d",{"_index":5203,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["myer",{"_index":669,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["müllner",{"_index":667,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["n",{"_index":366,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"19":{},"29":{},"34":{},"36":{},"49":{},"51":{},"52":{},"53":{},"66":{}},"component":{},"keyword":{}}],["n+1",{"_index":7672,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["n+3",{"_index":7674,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["n+64",{"_index":6932,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["n+7",{"_index":7676,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["n/a",{"_index":2610,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["n<flen",{"_index":5272,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["n=1",{"_index":4232,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["na4",{"_index":2996,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["naehrig",{"_index":1413,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["nagarajan",{"_index":671,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["name",{"_index":1531,"title":{"42":{},"42-3":{},"42-5":{},"42-6":{},"42-7":{},"42-8":{},"42-9":{},"42-11":{}},"name":{"42":{}},"text":{"8":{},"9":{},"10":{},"12":{},"15":{},"19":{},"23":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"48":{},"49":{},"51":{},"53":{},"66":{}},"component":{},"keyword":{}}],["namesak",{"_index":3419,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["nan",{"_index":4740,"title":{"30-8":{},"30-9":{},"36-2":{},"37-3":{}},"name":{},"text":{"30":{},"34":{},"36":{},"37":{},"43":{},"51":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["nanbox",{"_index":6156,"title":{},"name":{},"text":{"43":{},"59":{}},"component":{},"keyword":{}}],["nand2",{"_index":6901,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["napot",{"_index":2995,"title":{"26-29":{}},"name":{},"text":{"10":{},"26":{},"33":{}},"component":{},"keyword":{}}],["napot_bit",{"_index":4243,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["narrow",{"_index":3417,"title":{"36-2":{},"51-55":{},"51-63":{},"51-78":{},"51-98":{},"60-1":{}},"name":{},"text":{"12":{},"26":{},"30":{},"34":{},"36":{},"38":{},"51":{},"54":{},"59":{}},"component":{},"keyword":{}}],["narrowest",{"_index":7652,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nat",{"_index":7436,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["nathan",{"_index":665,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["nation",{"_index":1049,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["nativ",{"_index":2329,"title":{},"name":{},"text":{"10":{},"12":{},"15":{},"30":{},"38":{},"40":{},"48":{},"49":{},"51":{},"54":{}},"component":{},"keyword":{}}],["natur",{"_index":2816,"title":{},"name":{},"text":{"10":{},"11":{},"18":{},"26":{},"27":{},"28":{},"31":{},"33":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"45":{},"49":{},"50":{},"51":{},"54":{},"55":{},"59":{}},"component":{},"keyword":{}}],["nc",{"_index":4262,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["ncsc",{"_index":7046,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["near",{"_index":5086,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["nearest",{"_index":4822,"title":{},"name":{},"text":{"30":{},"37":{},"51":{}},"component":{},"keyword":{}}],["nearli",{"_index":5596,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["necess",{"_index":9094,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["necessari",{"_index":1857,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"28":{},"40":{},"41":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["necessarili",{"_index":2377,"title":{},"name":{},"text":{"10":{},"13":{},"23":{},"25":{},"26":{},"29":{},"31":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["necessit",{"_index":2055,"title":{},"name":{},"text":{"8":{},"11":{},"22":{},"54":{}},"component":{},"keyword":{}}],["need",{"_index":421,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"60":{},"61":{},"63":{}},"component":{},"keyword":{}}],["neg",{"_index":1808,"title":{},"name":{},"text":{"8":{},"29":{},"30":{},"36":{},"37":{},"39":{},"40":{},"45":{},"51":{}},"component":{},"keyword":{}}],["negat",{"_index":4477,"title":{"29-7":{},"49-96":{}},"name":{},"text":{"29":{},"37":{},"51":{},"52":{}},"component":{},"keyword":{}}],["neglig",{"_index":2049,"title":{},"name":{},"text":{"8":{},"45":{},"49":{}},"component":{},"keyword":{}}],["neighbor",{"_index":5793,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["ness",{"_index":674,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["nest",{"_index":1518,"title":{},"name":{},"text":{"8":{},"10":{},"16":{}},"component":{},"keyword":{}}],["network",{"_index":5500,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["neumann",{"_index":7030,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["neumann’",{"_index":6913,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["neuschäfer",{"_index":98,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["never",{"_index":1902,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"22":{},"23":{},"26":{},"28":{},"30":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"58":{}},"component":{},"keyword":{}}],["nevertheless",{"_index":2537,"title":{},"name":{},"text":{"10":{},"26":{},"37":{},"40":{},"51":{}},"component":{},"keyword":{}}],["new",{"_index":918,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"59":{},"61":{},"67":{}},"component":{},"keyword":{}}],["newer",{"_index":5462,"title":{},"name":{},"text":{"38":{},"40":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["newli",{"_index":3630,"title":{},"name":{},"text":{"19":{},"23":{},"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["newton",{"_index":8418,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["next",{"_index":2273,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"16":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"33":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"62":{}},"component":{},"keyword":{}}],["next.count",{"_index":9724,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["next.ptr",{"_index":9722,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["next_stat",{"_index":6035,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["nf",{"_index":7841,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nf=0",{"_index":7840,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nf[2:0",{"_index":7821,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nfield",{"_index":7925,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nfields=4",{"_index":7930,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nibbl",{"_index":2413,"title":{},"name":{},"text":{"10":{},"29":{},"49":{}},"component":{},"keyword":{}}],["nice",{"_index":6829,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["nikhil",{"_index":100,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["nine",{"_index":4912,"title":{},"name":{},"text":{"31":{},"40":{}},"component":{},"keyword":{}}],["nist",{"_index":986,"title":{"49-10":{},"49-11":{},"49-12":{},"49-16":{},"49-73":{},"49-108":{},"52-14":{},"52-15":{},"52-18":{},"52-19":{},"52-20":{}},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["nm",{"_index":1274,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["nmadd",{"_index":6191,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["nmi",{"_index":2478,"title":{},"name":{},"text":{"10":{},"12":{},"16":{}},"component":{},"keyword":{}}],["nmie",{"_index":2476,"title":{},"name":{},"text":{"10":{},"16":{}},"component":{},"keyword":{}}],["nmie=0",{"_index":3513,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["nmie=1",{"_index":3511,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["nmsub",{"_index":6190,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["no1",{"_index":5507,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["no_lp_expect",{"_index":1783,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"50":{}},"component":{},"keyword":{}}],["node",{"_index":5437,"title":{},"name":{},"text":{"38":{},"51":{},"55":{}},"component":{},"keyword":{}}],["node_t",{"_index":9715,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["nois",{"_index":1367,"title":{"49-119":{},"49-120":{}},"name":{},"text":{"7":{},"18":{},"49":{}},"component":{},"keyword":{}}],["noise_test",{"_index":7082,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["noisi",{"_index":7016,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["nokia",{"_index":3435,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["nomin",{"_index":1529,"title":{},"name":{},"text":{"8":{},"35":{}},"component":{},"keyword":{}}],["non",{"_index":360,"title":{"16":{},"64":{},"10-37":{},"42-9":{},"49-103":{},"49-122":{},"57-34":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"16":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"53":{},"54":{},"55":{},"57":{},"59":{},"61":{},"64":{},"65":{},"67":{}},"component":{},"keyword":{}}],["nonadher",{"_index":10199,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["nonc",{"_index":6810,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["nondecreas",{"_index":5256,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["none",{"_index":2586,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"40":{},"41":{},"45":{},"47":{},"57":{},"64":{}},"component":{},"keyword":{}}],["nonetheless",{"_index":6590,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["nonexist",{"_index":4078,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["noninit",{"_index":5887,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["nonmask",{"_index":3512,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["nonneg",{"_index":6454,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["nonstandard",{"_index":5345,"title":{},"name":{},"text":{"37":{},"49":{}},"component":{},"keyword":{}}],["nonzero",{"_index":302,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"22":{},"26":{},"28":{},"31":{},"32":{},"39":{},"49":{},"51":{},"61":{}},"component":{},"keyword":{}}],["nop",{"_index":2853,"title":{"31-12":{},"45-8":{}},"name":{},"text":{"10":{},"31":{},"34":{},"41":{},"45":{},"51":{}},"component":{},"keyword":{}}],["norm",{"_index":5424,"title":{},"name":{},"text":{"38":{},"40":{},"41":{},"49":{},"53":{}},"component":{},"keyword":{}}],["normal",{"_index":1499,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"16":{},"19":{},"21":{},"26":{},"30":{},"32":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"57":{},"58":{},"62":{},"64":{}},"component":{},"keyword":{}}],["notabl",{"_index":3036,"title":{},"name":{},"text":{"10":{},"19":{},"30":{},"40":{}},"component":{},"keyword":{}}],["notat",{"_index":5577,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["note",{"_index":1854,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"15":{},"19":{},"21":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"62":{},"66":{}},"component":{},"keyword":{}}],["noth",{"_index":3915,"title":{},"name":{},"text":{"21":{},"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["notic",{"_index":4108,"title":{},"name":{},"text":{"26":{},"30":{},"41":{}},"component":{},"keyword":{}}],["notifi",{"_index":4135,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["notion",{"_index":4440,"title":{},"name":{},"text":{"28":{},"40":{},"41":{},"48":{}},"component":{},"keyword":{}}],["notori",{"_index":2964,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["nov",{"_index":933,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["novel",{"_index":4153,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["novemb",{"_index":828,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["now",{"_index":407,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"15":{},"21":{},"26":{},"27":{},"31":{},"34":{},"36":{},"38":{},"40":{},"41":{},"43":{},"47":{},"51":{},"53":{},"63":{}},"component":{},"keyword":{}}],["nr",{"_index":8646,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["nreg",{"_index":8647,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ns",{"_index":5258,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["nsa",{"_index":6798,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["nsa/css",{"_index":1195,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["nsec",{"_index":5253,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["nt",{"_index":9574,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["ntbren",{"_index":3644,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ntl",{"_index":10183,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["ntl.all",{"_index":6485,"title":{},"name":{},"text":{"45":{},"47":{},"64":{}},"component":{},"keyword":{}}],["ntl.p1",{"_index":6482,"title":{},"name":{},"text":{"45":{},"47":{},"64":{}},"component":{},"keyword":{}}],["ntl.pall",{"_index":6483,"title":{},"name":{},"text":{"45":{},"47":{},"64":{}},"component":{},"keyword":{}}],["ntl.s1",{"_index":6484,"title":{},"name":{},"text":{"45":{},"47":{},"64":{}},"component":{},"keyword":{}}],["nul",{"_index":4699,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["null",{"_index":2998,"title":{},"name":{},"text":{"10":{},"29":{},"45":{},"65":{}},"component":{},"keyword":{}}],["nullari",{"_index":10226,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["numa",{"_index":9686,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["number",{"_index":1026,"title":{"27-16":{},"30-3":{},"30-6":{},"42-10":{},"49-104":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"15":{},"18":{},"19":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"63":{},"65":{}},"component":{},"keyword":{}}],["number’",{"_index":5406,"title":{},"name":{},"text":{"37":{},"59":{}},"component":{},"keyword":{}}],["numer",{"_index":583,"title":{},"name":{},"text":{"4":{},"34":{},"38":{},"42":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["nv",{"_index":5339,"title":{},"name":{},"text":{"37":{},"48":{},"51":{},"53":{}},"component":{},"keyword":{}}],["nvbit",{"_index":4323,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["nvbits[0000000",{"_index":4343,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["nvbits[1010101",{"_index":4340,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["nvbits[1111111",{"_index":4346,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["nvidia",{"_index":3436,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["nvl",{"_index":9580,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["nx",{"_index":5342,"title":{},"name":{},"text":{"37":{},"48":{},"51":{}},"component":{},"keyword":{}}],["ny",{"_index":920,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["nyquist",{"_index":6888,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["nzimm=0",{"_index":5007,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["nzimm[9:4",{"_index":5005,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["nzimm≠0",{"_index":5006,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["nzuimm=0",{"_index":5012,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["nzuimm[9:2",{"_index":5010,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["nzuimm≠0",{"_index":5011,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["o",{"_index":679,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"33":{},"45":{},"51":{},"62":{}},"component":{},"keyword":{}}],["oberhaus",{"_index":676,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["obey",{"_index":4140,"title":{},"name":{},"text":{"26":{},"40":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["obfusc",{"_index":2720,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["object",{"_index":2613,"title":{},"name":{},"text":{"10":{},"27":{},"40":{},"50":{},"51":{}},"component":{},"keyword":{}}],["obligatori",{"_index":4793,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["oblivi",{"_index":3933,"title":{},"name":{},"text":{"22":{},"38":{}},"component":{},"keyword":{}}],["observ",{"_index":2292,"title":{},"name":{},"text":{"9":{},"10":{},"18":{},"19":{},"26":{},"28":{},"35":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"56":{},"57":{},"62":{},"63":{}},"component":{},"keyword":{}}],["obtain",{"_index":2358,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"37":{},"38":{},"39":{},"41":{},"45":{},"49":{},"50":{},"51":{},"55":{},"57":{},"62":{}},"component":{},"keyword":{}}],["obviat",{"_index":192,"title":{"26-33":{}},"name":{},"text":{"4":{},"8":{},"10":{}},"component":{},"keyword":{}}],["obviou",{"_index":3824,"title":{},"name":{},"text":{"21":{},"40":{},"49":{}},"component":{},"keyword":{}}],["obvious",{"_index":1869,"title":{},"name":{},"text":{"8":{},"22":{},"49":{},"64":{}},"component":{},"keyword":{}}],["oc0",{"_index":7471,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["oc1",{"_index":7475,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["oc2",{"_index":7479,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["oc3",{"_index":7483,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["occas",{"_index":6801,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["occasion",{"_index":2825,"title":{},"name":{},"text":{"10":{},"25":{},"26":{},"28":{},"40":{},"45":{},"56":{}},"component":{},"keyword":{}}],["occup",{"_index":4295,"title":{},"name":{},"text":{"26":{},"53":{}},"component":{},"keyword":{}}],["occupi",{"_index":5033,"title":{},"name":{},"text":{"31":{},"35":{},"51":{},"52":{},"60":{}},"component":{},"keyword":{}}],["occur",{"_index":2038,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"18":{},"19":{},"20":{},"22":{},"25":{},"26":{},"27":{},"28":{},"35":{},"38":{},"39":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"62":{},"64":{}},"component":{},"keyword":{}}],["occurr",{"_index":2463,"title":{},"name":{},"text":{"10":{},"18":{},"26":{},"49":{}},"component":{},"keyword":{}}],["octob",{"_index":959,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["odd",{"_index":2381,"title":{},"name":{},"text":{"10":{},"29":{},"30":{},"45":{},"49":{},"51":{},"55":{},"60":{},"62":{},"66":{}},"component":{},"keyword":{}}],["odd/even",{"_index":4694,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["off",{"_index":6999,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["offer",{"_index":3621,"title":{},"name":{},"text":{"19":{},"22":{},"26":{},"31":{},"49":{},"54":{},"61":{}},"component":{},"keyword":{}}],["offici",{"_index":1048,"title":{},"name":{},"text":{"7":{},"13":{},"30":{},"32":{},"34":{},"40":{},"49":{}},"component":{},"keyword":{}}],["offload",{"_index":504,"title":{},"name":{},"text":{"4":{},"38":{}},"component":{},"keyword":{}}],["offset",{"_index":1809,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"31":{},"33":{},"37":{},"45":{},"47":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["offset(bas",{"_index":5120,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["offset(rs1",{"_index":4976,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["offset(sp",{"_index":9592,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["offset(x2",{"_index":4960,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["old",{"_index":1979,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"34":{},"40":{},"50":{},"51":{},"55":{},"62":{}},"component":{},"keyword":{}}],["older",{"_index":3628,"title":{},"name":{},"text":{"19":{},"22":{},"40":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["oldest",{"_index":3725,"title":{},"name":{},"text":{"19":{},"52":{}},"component":{},"keyword":{}}],["olof",{"_index":88,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["omiss",{"_index":5091,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["omit",{"_index":3766,"title":{},"name":{},"text":{"19":{},"26":{},"31":{},"33":{},"37":{},"38":{},"40":{},"42":{},"45":{},"51":{},"54":{}},"component":{},"keyword":{}}],["on",{"_index":1572,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"44":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"61":{},"62":{},"65":{}},"component":{},"keyword":{}}],["onc",{"_index":2163,"title":{},"name":{},"text":{"8":{},"18":{},"19":{},"21":{},"23":{},"27":{},"28":{},"33":{},"35":{},"38":{},"45":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["one’",{"_index":9815,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["onlin",{"_index":936,"title":{},"name":{},"text":{"7":{},"41":{},"49":{}},"component":{},"keyword":{}}],["onto",{"_index":4046,"title":{},"name":{},"text":{"25":{},"38":{},"40":{},"45":{},"50":{},"52":{},"64":{}},"component":{},"keyword":{}}],["onur",{"_index":845,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["op",{"_index":1785,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"31":{},"34":{},"36":{},"37":{},"40":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["op1",{"_index":9091,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["op2",{"_index":9092,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["op>.{w|d",{"_index":5743,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["op>.{w|d}.aq",{"_index":5744,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["op>.{w|d}.aqrl",{"_index":5746,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["op>.{w|d}.rl",{"_index":5745,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["opaqu",{"_index":2612,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["opcfg",{"_index":8029,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["opcod",{"_index":394,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"19":{},"31":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"50":{},"51":{},"52":{},"58":{},"62":{},"65":{},"66":{}},"component":{},"keyword":{}}],["open",{"_index":2392,"title":{},"name":{},"text":{"10":{},"21":{},"22":{},"37":{},"38":{}},"component":{},"keyword":{}}],["openssl",{"_index":6786,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["oper",{"_index":576,"title":{"33":{},"51":{},"54":{},"61":{},"66":{},"16-5":{},"28-4":{},"31-9":{},"31-10":{},"33-5":{},"39-1":{},"39-2":{},"41-3":{},"41-10":{},"41-11":{},"41-12":{},"41-13":{},"41-16":{},"41-17":{},"41-19":{},"41-20":{},"41-22":{},"41-23":{},"45-7":{},"47-4":{},"51-23":{},"51-99":{},"54-1":{},"66-1":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["operand",{"_index":1947,"title":{"30-4":{},"51-26":{},"51-27":{}},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"43":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{}},"component":{},"keyword":{}}],["operands—e.g",{"_index":10147,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["operand’",{"_index":4819,"title":{},"name":{},"text":{"30":{},"45":{},"51":{}},"component":{},"keyword":{}}],["operation(",{"_index":6068,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["opfvf",{"_index":8027,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opfvv",{"_index":8023,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opivi",{"_index":8025,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opivv",{"_index":8022,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opivx",{"_index":8026,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opmvv",{"_index":8024,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opmvx",{"_index":8028,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["opportun",{"_index":3514,"title":{},"name":{},"text":{"16":{},"19":{},"38":{}},"component":{},"keyword":{}}],["oppos",{"_index":499,"title":{},"name":{},"text":{"4":{},"26":{},"28":{},"34":{},"38":{},"40":{}},"component":{},"keyword":{}}],["opposit",{"_index":2538,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"37":{},"40":{},"51":{}},"component":{},"keyword":{}}],["opst",{"_index":6729,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["opst=es16",{"_index":6735,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["opt",{"_index":1992,"title":{},"name":{},"text":{"8":{},"19":{},"28":{},"33":{}},"component":{},"keyword":{}}],["opt.cat",{"_index":6000,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["optic",{"_index":7064,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["optim",{"_index":2583,"title":{"29-72":{}},"name":{},"text":{"10":{},"19":{},"21":{},"26":{},"28":{},"29":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"51":{},"52":{},"58":{},"65":{}},"component":{},"keyword":{}}],["optimis",{"_index":6597,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["option",{"_index":378,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"15":{},"17":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"33":{},"37":{},"38":{},"40":{},"41":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{}},"component":{},"keyword":{}}],["oracl",{"_index":1207,"title":{},"name":{},"text":{"7":{},"13":{},"41":{},"49":{}},"component":{},"keyword":{}}],["orc.b",{"_index":4508,"title":{"29-44":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["order",{"_index":46,"title":{"67":{},"10-45":{},"28-1":{},"29-20":{},"33-7":{},"33-8":{},"40-4":{},"40-8":{},"40-15":{},"45-13":{},"48-4":{},"51-103":{},"61-3":{},"62-2":{}},"name":{},"text":{"2":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"19":{},"21":{},"22":{},"26":{},"28":{},"29":{},"31":{},"33":{},"34":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"60":{},"62":{},"63":{},"65":{},"67":{}},"component":{},"keyword":{}}],["ordering—h",{"_index":10204,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["orderli",{"_index":5504,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["ordinari",{"_index":4438,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["ordinarili",{"_index":1553,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"22":{},"26":{},"38":{},"51":{}},"component":{},"keyword":{}}],["organ",{"_index":1066,"title":{},"name":{},"text":{"7":{},"10":{},"33":{},"37":{},"38":{},"42":{},"51":{}},"component":{},"keyword":{}}],["organis",{"_index":6840,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ori",{"_index":4734,"title":{},"name":{},"text":{"29":{},"33":{},"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["orient",{"_index":3044,"title":{},"name":{},"text":{"11":{},"45":{},"50":{}},"component":{},"keyword":{}}],["origin",{"_index":488,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"22":{},"26":{},"28":{},"29":{},"31":{},"34":{},"37":{},"38":{},"40":{},"42":{},"45":{},"47":{},"49":{},"50":{},"51":{},"54":{},"55":{},"57":{},"67":{}},"component":{},"keyword":{}}],["orn",{"_index":4509,"title":{"29-45":{},"49-36":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["orthogon",{"_index":5373,"title":{},"name":{},"text":{"37":{},"51":{}},"component":{},"keyword":{}}],["os",{"_index":1496,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"17":{},"21":{},"22":{},"23":{},"26":{},"32":{},"49":{},"51":{},"57":{},"63":{}},"component":{},"keyword":{}}],["os/hypervisor",{"_index":4038,"title":{},"name":{},"text":{"24":{}},"component":{},"keyword":{}}],["oscil",{"_index":1174,"title":{"49-118":{}},"name":{},"text":{"7":{},"10":{},"49":{}},"component":{},"keyword":{}}],["oss",{"_index":3470,"title":{},"name":{},"text":{"15":{},"19":{}},"component":{},"keyword":{}}],["os’",{"_index":1994,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["other",{"_index":1557,"title":{},"name":{},"text":{"8":{},"10":{},"17":{},"19":{},"29":{},"40":{},"41":{},"49":{},"51":{},"53":{},"57":{},"64":{}},"component":{},"keyword":{}}],["otherpriv",{"_index":4070,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["otherwis",{"_index":1544,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"48":{},"49":{},"51":{},"52":{},"53":{},"56":{},"57":{},"61":{},"62":{},"64":{}},"component":{},"keyword":{}}],["ou",{"_index":104,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["ousterhout",{"_index":105,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["out",{"_index":2588,"title":{},"name":{},"text":{"10":{},"12":{},"16":{},"19":{},"21":{},"26":{},"27":{},"29":{},"30":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{},"61":{},"62":{},"63":{}},"component":{},"keyword":{}}],["outcom",{"_index":5583,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["outer",{"_index":2965,"title":{},"name":{},"text":{"10":{},"38":{},"63":{},"64":{}},"component":{},"keyword":{}}],["outgo",{"_index":4305,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["outlin",{"_index":6497,"title":{},"name":{},"text":{"46":{},"49":{},"50":{},"55":{}},"component":{},"keyword":{}}],["output",{"_index":1094,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"29":{},"30":{},"35":{},"36":{},"37":{},"40":{},"45":{},"49":{},"51":{},"52":{},"57":{},"61":{},"62":{}},"component":{},"keyword":{}}],["output[(i",{"_index":4629,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["output[i",{"_index":9518,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["output[i+7..i",{"_index":9105,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["output[i..(i",{"_index":4650,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["output[k..(k",{"_index":9160,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["output[sew",{"_index":9102,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["outset",{"_index":4909,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["outsid",{"_index":2270,"title":{},"name":{},"text":{"9":{},"26":{},"30":{},"33":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["outstand",{"_index":2847,"title":{},"name":{},"text":{"10":{},"34":{},"41":{},"65":{}},"component":{},"keyword":{}}],["outweigh",{"_index":2620,"title":{},"name":{},"text":{"10":{},"26":{},"31":{}},"component":{},"keyword":{}}],["ouvertes.fr/h",{"_index":938,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["over",{"_index":1543,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"17":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"31":{},"36":{},"38":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["overal",{"_index":2752,"title":{},"name":{},"text":{"10":{},"17":{},"26":{},"49":{}},"component":{},"keyword":{}}],["overboard",{"_index":3953,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["overflow",{"_index":256,"title":{"23":{},"17-4":{},"23-1":{},"23-2":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"17":{},"18":{},"19":{},"23":{},"26":{},"27":{},"30":{},"34":{},"35":{},"37":{},"38":{},"39":{},"45":{},"47":{},"51":{}},"component":{},"keyword":{}}],["overhead",{"_index":2614,"title":{},"name":{},"text":{"10":{},"17":{},"19":{},"25":{},"26":{},"27":{},"35":{},"37":{},"39":{},"40":{},"45":{},"49":{},"51":{},"63":{}},"component":{},"keyword":{}}],["overlap",{"_index":2870,"title":{"40-8":{}},"name":{},"text":{"10":{},"26":{},"28":{},"29":{},"33":{},"38":{},"40":{},"41":{},"45":{},"48":{},"51":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["overlay",{"_index":7743,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["overli",{"_index":3884,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["overrid",{"_index":307,"title":{},"name":{},"text":{"4":{},"8":{},"21":{},"26":{},"62":{}},"component":{},"keyword":{}}],["overridden",{"_index":2294,"title":{},"name":{},"text":{"9":{},"10":{},"26":{}},"component":{},"keyword":{}}],["overview",{"_index":4475,"title":{"29-1":{},"31-1":{},"38-3":{},"49-6":{},"52-9":{},"57-1":{},"57-26":{},"57-47":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["overwrit",{"_index":2449,"title":{},"name":{},"text":{"10":{},"16":{},"26":{},"33":{},"40":{},"51":{}},"component":{},"keyword":{}}],["overwritten",{"_index":2494,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"31":{},"41":{},"51":{},"57":{}},"component":{},"keyword":{}}],["ow",{"_index":5369,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["own",{"_index":3101,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["o’rear",{"_index":102,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["p",{"_index":749,"title":{},"name":{},"text":{"7":{},"10":{},"30":{},"34":{},"42":{},"48":{},"51":{}},"component":{},"keyword":{}}],["p0",{"_index":6136,"title":{},"name":{},"text":{"42":{},"49":{}},"component":{},"keyword":{}}],["p1",{"_index":6627,"title":{},"name":{},"text":{"49":{},"52":{},"64":{}},"component":{},"keyword":{}}],["p1p13",{"_index":3971,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["p2",{"_index":6947,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["p3",{"_index":6949,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["p4",{"_index":6951,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["p5",{"_index":6953,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["p6",{"_index":6955,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["p7",{"_index":6959,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["p_0(tt2",{"_index":9307,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["p_0(x",{"_index":9332,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["p_1(x",{"_index":9388,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["pa",{"_index":4177,"title":{},"name":{},"text":{"26":{},"45":{}},"component":{},"keyword":{}}],["pa.pgoff",{"_index":4202,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pa.ppn[i",{"_index":4204,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pa.ppn[level",{"_index":4206,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pabit",{"_index":4322,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pack",{"_index":2348,"title":{"29-46":{},"49-37":{},"49-97":{}},"name":{},"text":{"10":{},"29":{},"30":{},"34":{},"36":{},"42":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["packag",{"_index":6894,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["packh",{"_index":4510,"title":{"29-47":{},"49-38":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["packw",{"_index":4511,"title":{"29-48":{},"49-39":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["pact",{"_index":838,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["pad",{"_index":1206,"title":{"10-15":{},"11-1":{},"11-2":{},"11-3":{},"26-6":{},"50-1":{},"50-2":{},"50-3":{}},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"26":{},"30":{},"49":{},"50":{}},"component":{},"keyword":{}}],["page",{"_index":290,"title":{"8-32":{},"10-53":{},"26-20":{},"26-23":{},"26-25":{},"26-27":{},"26-30":{},"33-12":{}},"name":{},"text":{"4":{},"5":{},"8":{},"10":{},"11":{},"18":{},"21":{},"26":{},"27":{},"28":{},"33":{},"38":{},"45":{},"48":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["pagesize=212",{"_index":4180,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pair",{"_index":3832,"title":{"41-15":{}},"name":{},"text":{"21":{},"26":{},"28":{},"30":{},"34":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"55":{},"56":{},"58":{},"60":{}},"component":{},"keyword":{}}],["pall",{"_index":10189,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["palmer",{"_index":67,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["pan",{"_index":784,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["paolo",{"_index":56,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["paper",{"_index":1352,"title":{},"name":{},"text":{"7":{},"13":{},"49":{}},"component":{},"keyword":{}}],["par",{"_index":3424,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["paragraph",{"_index":3462,"title":{},"name":{},"text":{"15":{},"23":{},"36":{},"38":{},"41":{}},"component":{},"keyword":{}}],["parallel",{"_index":790,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"22":{},"26":{},"28":{},"38":{},"45":{},"49":{},"51":{},"52":{},"55":{}},"component":{},"keyword":{}}],["paramet",{"_index":4320,"title":{"51-2":{}},"name":{},"text":{"27":{},"30":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["parameteris",{"_index":6691,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["paravirtu",{"_index":4103,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["parcel",{"_index":5484,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["parent",{"_index":3810,"title":{},"name":{},"text":{"19":{},"49":{}},"component":{},"keyword":{}}],["pariti",{"_index":2382,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["parlanc",{"_index":2389,"title":{},"name":{},"text":{"10":{},"37":{}},"component":{},"keyword":{}}],["part",{"_index":391,"title":{},"name":{},"text":{"4":{},"7":{},"9":{},"10":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"32":{},"34":{},"37":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"62":{},"63":{},"66":{}},"component":{},"keyword":{}}],["parti",{"_index":6900,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["partial",{"_index":2215,"title":{},"name":{},"text":{"9":{},"10":{},"13":{},"19":{},"26":{},"31":{},"36":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["partial/unalign",{"_index":4712,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["particip",{"_index":2671,"title":{},"name":{},"text":{"10":{},"48":{},"51":{}},"component":{},"keyword":{}}],["particular",{"_index":1588,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"16":{},"22":{},"26":{},"27":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"49":{},"51":{},"52":{},"59":{},"62":{},"63":{},"64":{},"65":{}},"component":{},"keyword":{}}],["particularli",{"_index":2566,"title":{},"name":{},"text":{"10":{},"26":{},"29":{},"30":{},"39":{},"40":{},"45":{},"49":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["partit",{"_index":2030,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["partli",{"_index":2121,"title":{},"name":{},"text":{"8":{},"38":{},"51":{}},"component":{},"keyword":{}}],["partner",{"_index":2094,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["partway",{"_index":7951,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["pass",{"_index":1728,"title":{},"name":{},"text":{"8":{},"10":{},"25":{},"26":{},"28":{},"30":{},"35":{},"41":{},"45":{},"49":{},"51":{},"52":{},"60":{}},"component":{},"keyword":{}}],["past",{"_index":2012,"title":{},"name":{},"text":{"8":{},"23":{},"35":{},"40":{},"41":{},"49":{},"50":{},"51":{},"53":{},"67":{}},"component":{},"keyword":{}}],["path",{"_index":825,"title":{},"name":{},"text":{"7":{},"10":{},"19":{},"21":{},"26":{},"27":{},"29":{},"37":{},"40":{},"41":{},"45":{},"51":{}},"component":{},"keyword":{}}],["pathway",{"_index":6996,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pattern",{"_index":329,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"12":{},"26":{},"27":{},"30":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["patterson",{"_index":41,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["paul",{"_index":71,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["paus",{"_index":4211,"title":{"65":{}},"name":{},"text":{"26":{},"34":{},"35":{},"44":{},"45":{},"47":{},"49":{},"65":{}},"component":{},"keyword":{}}],["pavlov",{"_index":107,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["payload",{"_index":5282,"title":{},"name":{},"text":{"36":{},"37":{},"43":{},"51":{},"59":{}},"component":{},"keyword":{}}],["pbmt",{"_index":427,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["pbmt=io",{"_index":295,"title":{},"name":{},"text":{"4":{},"26":{}},"component":{},"keyword":{}}],["pbmt=nc",{"_index":4266,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pbmt=pma",{"_index":4265,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pbmte",{"_index":251,"title":{},"name":{},"text":{"4":{},"8":{},"10":{}},"component":{},"keyword":{}}],["pbmte=0",{"_index":1764,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["pbmte=1",{"_index":1763,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["pc",{"_index":418,"title":{},"name":{},"text":{"4":{},"10":{},"16":{},"19":{},"26":{},"31":{},"34":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"57":{}},"component":{},"keyword":{}}],["pc'+4",{"_index":6439,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["pc+2",{"_index":4984,"title":{},"name":{},"text":{"31":{},"50":{}},"component":{},"keyword":{}}],["pc+4",{"_index":6440,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["pc=mepc",{"_index":2198,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["pc=sepc",{"_index":2202,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["pc=vsepc",{"_index":2203,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["pc[1:0",{"_index":7527,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["pcie",{"_index":5707,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["pdf",{"_index":12,"title":{},"name":{},"text":{"1":{}},"component":{},"keyword":{}}],["pedagog",{"_index":6396,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["pelp",{"_index":3059,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["penalti",{"_index":2813,"title":{},"name":{},"text":{"10":{},"45":{},"52":{}},"component":{},"keyword":{}}],["pend",{"_index":314,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"19":{},"23":{},"25":{},"26":{},"41":{},"56":{},"62":{}},"component":{},"keyword":{}}],["pending_mem_loads(load_continu",{"_index":6067,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["pending_mem_stores(store_continu",{"_index":6069,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["peopl",{"_index":4026,"title":{},"name":{},"text":{"23":{},"30":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["people’",{"_index":4781,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["per",{"_index":1742,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"19":{},"21":{},"26":{},"27":{},"35":{},"40":{},"41":{},"48":{},"49":{},"50":{},"51":{},"62":{}},"component":{},"keyword":{}}],["perceiv",{"_index":3657,"title":{},"name":{},"text":{"19":{},"38":{}},"component":{},"keyword":{}}],["perceived/examined/read",{"_index":3922,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["percept",{"_index":4018,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["perf",{"_index":3618,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["perfect",{"_index":3444,"title":{},"name":{},"text":{"13":{},"49":{}},"component":{},"keyword":{}}],["perfectli",{"_index":5606,"title":{},"name":{},"text":{"40":{},"49":{}},"component":{},"keyword":{}}],["perform",{"_index":411,"title":{"10-19":{},"26-10":{},"35-2":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"61":{},"62":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["perf’",{"_index":3689,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["perhap",{"_index":1999,"title":{},"name":{},"text":{"8":{},"19":{},"22":{},"26":{},"38":{},"40":{},"45":{},"51":{}},"component":{},"keyword":{}}],["period",{"_index":2796,"title":{},"name":{},"text":{"10":{},"33":{},"35":{},"49":{}},"component":{},"keyword":{}}],["peripher",{"_index":2902,"title":{},"name":{},"text":{"10":{},"35":{}},"component":{},"keyword":{}}],["perman",{"_index":5035,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["permiss",{"_index":1935,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"21":{},"26":{},"27":{},"28":{},"33":{},"55":{},"57":{}},"component":{},"keyword":{}}],["permissions—read",{"_index":2058,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["permit",{"_index":395,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"22":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"37":{},"40":{},"45":{},"48":{},"49":{},"51":{},"56":{},"57":{}},"component":{},"keyword":{}}],["permut",{"_index":979,"title":{"29-19":{},"49-9":{},"49-94":{},"49-98":{},"51-117":{},"52-36":{}},"name":{},"text":{"7":{},"29":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["persist",{"_index":3777,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["perspect",{"_index":4348,"title":{},"name":{},"text":{"27":{},"38":{},"40":{},"48":{},"49":{},"57":{}},"component":{},"keyword":{}}],["petapag",{"_index":4231,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["peter",{"_index":47,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"49":{}},"component":{},"keyword":{}}],["ph/9508027",{"_index":1395,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ph/9605043",{"_index":1410,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["phase",{"_index":2447,"title":{},"name":{},"text":{"10":{},"26":{},"49":{}},"component":{},"keyword":{}}],["phenomena",{"_index":6905,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["phenomenon",{"_index":7052,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["phi",{"_index":1310,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["phil",{"_index":663,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["philipp",{"_index":693,"title":{},"name":{},"text":{"5":{},"49":{}},"component":{},"keyword":{}}],["phillip",{"_index":109,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["philosophi",{"_index":4910,"title":{},"name":{},"text":{"31":{},"61":{}},"component":{},"keyword":{}}],["photon",{"_index":7069,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["physic",{"_index":557,"title":{"8-31":{},"10-38":{},"10-48":{},"10-49":{},"10-53":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"15":{},"19":{},"21":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"35":{},"38":{},"40":{},"45":{},"49":{},"51":{},"63":{}},"component":{},"keyword":{}}],["pi",{"_index":1752,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{}},"component":{},"keyword":{}}],["pick",{"_index":4887,"title":{},"name":{},"text":{"31":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["picojpeg",{"_index":9825,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["piec",{"_index":5226,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["pierr",{"_index":926,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["pipelin",{"_index":2889,"title":{"40-12":{}},"name":{},"text":{"10":{},"26":{},"36":{},"37":{},"40":{},"41":{},"45":{},"48":{},"53":{},"63":{}},"component":{},"keyword":{}}],["pitfal",{"_index":7010,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pixel",{"_index":7940,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["place",{"_index":1694,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"51":{},"54":{},"55":{},"56":{},"61":{}},"component":{},"keyword":{}}],["placehold",{"_index":5075,"title":{"32":{}},"name":{},"text":{"32":{}},"component":{},"keyword":{}}],["plain",{"_index":5728,"title":{},"name":{},"text":{"40":{},"45":{},"52":{}},"component":{},"keyword":{}}],["plain(don",{"_index":6099,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(early_sc_fail(res_continu",{"_index":6086,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(fence(kind",{"_index":6100,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(internal(next_st",{"_index":6107,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(isa_st",{"_index":6066,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(load_continuation(mem_valu",{"_index":6085,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(load_mem(kind",{"_index":6083,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(next_st",{"_index":6091,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(read_cont(reg_valu",{"_index":6104,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(read_reg(reg_nam",{"_index":6101,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(res_continuation(fals",{"_index":6087,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(res_continuation(tru",{"_index":6088,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(store_continuation(fals",{"_index":6096,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(store_continuation(tru",{"_index":6097,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(store_ea(kind",{"_index":6089,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(store_memv(mem_valu",{"_index":6092,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plain(write_reg(reg_nam",{"_index":6105,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["plaintext",{"_index":6783,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["plan",{"_index":942,"title":{},"name":{},"text":{"7":{},"57":{}},"component":{},"keyword":{}}],["platform",{"_index":277,"title":{"38-1":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"15":{},"19":{},"20":{},"26":{},"28":{},"31":{},"34":{},"35":{},"38":{},"40":{},"45":{},"57":{},"62":{},"67":{}},"component":{},"keyword":{}}],["platforms—design",{"_index":1154,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["platform’",{"_index":2645,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["play",{"_index":4353,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pleas",{"_index":134,"title":{},"name":{},"text":{"2":{},"5":{},"11":{},"49":{}},"component":{},"keyword":{}}],["plic",{"_index":486,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["plu",{"_index":2630,"title":{},"name":{},"text":{"10":{},"15":{},"23":{},"26":{},"34":{},"38":{},"40":{},"44":{},"45":{},"52":{}},"component":{},"keyword":{}}],["plug",{"_index":3940,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["pluggabl",{"_index":2885,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pm",{"_index":4310,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pma",{"_index":235,"title":{"10-40":{},"10-41":{},"10-42":{},"10-43":{},"10-44":{},"10-45":{},"10-46":{},"10-47":{},"55-2":{}},"name":{},"text":{"4":{},"10":{},"11":{},"26":{},"28":{},"33":{},"34":{},"40":{},"41":{},"48":{},"51":{},"55":{},"57":{},"62":{}},"component":{},"keyword":{}}],["pma(",{"_index":4261,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pmas—for",{"_index":2886,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmlen",{"_index":4308,"title":{"27-6":{}},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen+1st",{"_index":4325,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen=0",{"_index":4393,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen=16",{"_index":4351,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen=7",{"_index":4338,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen=xlen",{"_index":4350,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen{0",{"_index":4331,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmlen{effective_address[xlen",{"_index":4328,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["pmm",{"_index":1778,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{}},"component":{},"keyword":{}}],["pmp",{"_index":348,"title":{"21":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"15":{},"21":{},"26":{},"27":{},"33":{}},"component":{},"keyword":{}}],["pmp0cfg",{"_index":3027,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmp0cfg–pmp63cfg",{"_index":2979,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpaddr",{"_index":455,"title":{},"name":{},"text":{"4":{},"10":{},"21":{}},"component":{},"keyword":{}}],["pmpaddr0",{"_index":2988,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpaddr1",{"_index":3347,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["pmpaddr63",{"_index":2989,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpaddr[i",{"_index":3834,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpaddri",{"_index":3013,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpaddr}_i\\)[g",{"_index":3024,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpcfg",{"_index":456,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{},"keyword":{}}],["pmpcfg.a",{"_index":2999,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpcfg.l",{"_index":3838,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfg.lrwx=1111",{"_index":3862,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfg.lwrx=0111",{"_index":3913,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfg.rw=01",{"_index":3861,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfg.x",{"_index":3863,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfg0",{"_index":2981,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpcfg0–pmpcfg15",{"_index":2978,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpcfg1",{"_index":2984,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpcfg14",{"_index":2983,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpcfg15",{"_index":2986,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpcfg2",{"_index":2982,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpcfg2[31:0",{"_index":2987,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpcfg3",{"_index":2985,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{},"keyword":{}}],["pmpcfg[i",{"_index":3833,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfg[i].a",{"_index":3836,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["pmpcfgi",{"_index":3015,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpcfgi.a=tor",{"_index":3019,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpicfg",{"_index":3029,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["pmpicfg.a",{"_index":3030,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["po",{"_index":1753,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{},"41":{}},"component":{},"keyword":{}}],["po_loc",{"_index":5823,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["po_loc.rfi",{"_index":5902,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["podc",{"_index":916,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["poem",{"_index":3447,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["point",{"_index":732,"title":{"30":{},"36":{},"37":{},"43":{},"58":{},"59":{},"60":{},"36-4":{},"36-5":{},"36-6":{},"36-7":{},"37-2":{},"37-6":{},"37-7":{},"37-8":{},"37-9":{},"43-4":{},"43-5":{},"51-15":{},"51-16":{},"51-73":{},"51-78":{},"51-79":{},"51-80":{},"51-81":{},"51-82":{},"51-83":{},"51-84":{},"51-85":{},"51-86":{},"51-87":{},"51-88":{},"51-89":{},"51-90":{},"51-91":{},"51-92":{},"51-93":{},"51-94":{},"51-95":{},"51-102":{},"51-103":{},"51-104":{},"51-105":{},"51-106":{},"51-119":{},"51-124":{},"51-126":{},"51-140":{},"51-141":{},"59-4":{},"59-5":{},"59-6":{}},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"12":{},"19":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"58":{},"59":{},"60":{},"62":{}},"component":{},"keyword":{}}],["point/integ",{"_index":7604,"title":{"51-96":{},"51-97":{},"51-98":{}},"name":{},"text":{},"component":{},"keyword":{}}],["pointer",{"_index":182,"title":{"27":{},"10-26":{},"11-5":{},"27-7":{},"27-8":{},"27-9":{},"31-4":{},"50-6":{},"57-28":{}},"name":{},"text":{"4":{},"10":{},"12":{},"19":{},"26":{},"27":{},"29":{},"31":{},"34":{},"36":{},"45":{},"50":{},"51":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["pointer_t",{"_index":9713,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["poisson",{"_index":7014,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["polar",{"_index":563,"title":{},"name":{},"text":{"4":{},"19":{},"51":{}},"component":{},"keyword":{}}],["polici",{"_index":2735,"title":{"49-5":{},"52-4":{}},"name":{},"text":{"10":{},"13":{},"21":{},"26":{},"38":{},"49":{},"50":{},"51":{},"52":{},"64":{}},"component":{},"keyword":{}}],["poll",{"_index":2826,"title":{},"name":{},"text":{"10":{},"21":{},"25":{},"49":{},"56":{},"65":{}},"component":{},"keyword":{}}],["pollut",{"_index":4114,"title":{},"name":{},"text":{"26":{},"45":{},"64":{}},"component":{},"keyword":{}}],["polymorph",{"_index":8507,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["polynomi",{"_index":4557,"title":{},"name":{},"text":{"29":{},"52":{}},"component":{},"keyword":{}}],["ponomarev",{"_index":1244,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["pool",{"_index":4301,"title":{},"name":{},"text":{"26":{},"49":{}},"component":{},"keyword":{}}],["poor",{"_index":6456,"title":{},"name":{},"text":{"45":{},"64":{}},"component":{},"keyword":{}}],["poorli",{"_index":8239,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["pop",{"_index":2845,"title":{"50-9":{}},"name":{},"text":{"10":{},"19":{},"45":{},"50":{},"57":{}},"component":{},"keyword":{}}],["pop/popret",{"_index":9756,"title":{"57-33":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["popcount",{"_index":4608,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["popret",{"_index":9822,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["popul",{"_index":2554,"title":{"29-9":{},"51-109":{}},"name":{},"text":{"10":{},"26":{},"29":{},"38":{},"52":{}},"component":{},"keyword":{}}],["popular",{"_index":3466,"title":{},"name":{},"text":{"15":{},"30":{},"31":{}},"component":{},"keyword":{}}],["por",{"_index":8198,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["pornin",{"_index":6820,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["port",{"_index":4126,"title":{"40-16":{}},"name":{},"text":{"26":{},"28":{},"37":{},"40":{},"45":{},"60":{},"67":{}},"component":{},"keyword":{}}],["portabl",{"_index":208,"title":{"52-8":{}},"name":{},"text":{"4":{},"28":{},"37":{},"38":{},"49":{},"51":{},"52":{},"64":{},"65":{}},"component":{},"keyword":{}}],["portion",{"_index":1630,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"26":{},"27":{},"31":{},"36":{},"37":{},"38":{},"40":{},"45":{},"47":{},"48":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["pose",{"_index":3106,"title":{},"name":{},"text":{"11":{},"40":{}},"component":{},"keyword":{}}],["posit",{"_index":1739,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"13":{},"18":{},"22":{},"26":{},"29":{},"30":{},"31":{},"34":{},"37":{},"38":{},"45":{},"49":{},"50":{},"51":{},"52":{},"58":{},"62":{}},"component":{},"keyword":{}}],["posix",{"_index":4079,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["possibl",{"_index":445,"title":{"40-18":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"66":{}},"component":{},"keyword":{}}],["post",{"_index":1045,"title":{"49-126":{}},"name":{},"text":{"7":{},"10":{},"25":{},"41":{},"49":{}},"component":{},"keyword":{}}],["postur",{"_index":7536,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["pot",{"_index":8693,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["potenti",{"_index":2304,"title":{},"name":{},"text":{"9":{},"10":{},"22":{},"27":{},"31":{},"33":{},"41":{},"45":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["power",{"_index":2809,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"33":{},"35":{},"38":{},"40":{},"41":{},"46":{},"49":{},"51":{},"53":{},"56":{},"63":{}},"component":{},"keyword":{}}],["power/em",{"_index":6607,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["power7",{"_index":865,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["powerpc",{"_index":4901,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{},"keyword":{}}],["pp",{"_index":741,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ppn",{"_index":1829,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["ppn[1:0",{"_index":1846,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["ppo",{"_index":337,"title":{},"name":{},"text":{"4":{},"33":{},"40":{},"41":{},"55":{},"67":{}},"component":{},"keyword":{}}],["ppo:→st",{"_index":5582,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["ppo_fenc",{"_index":5826,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ppoca",{"_index":5612,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["pqc",{"_index":6817,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pr",{"_index":1759,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{},"41":{}},"component":{},"keyword":{}}],["pr/pw/sr/sw",{"_index":5863,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["practic",{"_index":210,"title":{},"name":{},"text":{"4":{},"7":{},"10":{},"22":{},"23":{},"30":{},"35":{},"38":{},"40":{},"45":{},"47":{},"48":{},"49":{},"51":{},"54":{},"60":{}},"component":{},"keyword":{}}],["pragmat",{"_index":6802,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["prashanth",{"_index":96,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["pre",{"_index":3932,"title":{},"name":{},"text":{"22":{},"26":{},"40":{},"51":{}},"component":{},"keyword":{}}],["preambl",{"_index":17,"title":{"2":{},"5":{}},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["preced",{"_index":2295,"title":{},"name":{},"text":{"9":{},"10":{},"19":{},"21":{},"26":{},"28":{},"33":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"62":{}},"component":{},"keyword":{}}],["preceis",{"_index":5151,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["precipit",{"_index":3506,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["precis",{"_index":2343,"title":{"30":{},"36":{},"37":{},"43":{},"59":{},"36-3":{},"36-4":{},"36-5":{},"36-6":{},"36-7":{},"37-5":{},"37-6":{},"37-7":{},"37-8":{},"37-9":{},"43-1":{},"43-2":{},"43-3":{},"43-4":{},"43-5":{},"51-132":{},"51-140":{},"51-141":{},"59-1":{},"59-2":{},"59-3":{},"59-4":{},"59-5":{},"59-6":{}},"name":{},"text":{"10":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"42":{},"43":{},"45":{},"50":{},"51":{},"53":{},"57":{},"58":{},"59":{},"60":{},"65":{}},"component":{},"keyword":{}}],["precise/imprecis",{"_index":7616,"title":{"51-134":{}},"name":{},"text":{},"component":{},"keyword":{}}],["preclud",{"_index":2063,"title":{},"name":{},"text":{"8":{},"40":{},"52":{}},"component":{},"keyword":{}}],["precondit",{"_index":6024,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["precursor",{"_index":4885,"title":{},"name":{},"text":{"31":{},"41":{}},"component":{},"keyword":{}}],["pred",{"_index":5841,"title":{},"name":{},"text":{"41":{},"44":{},"45":{}},"component":{},"keyword":{}}],["pred=0",{"_index":6489,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["pred=w",{"_index":6494,"title":{},"name":{},"text":{"45":{},"47":{},"65":{}},"component":{},"keyword":{}}],["predecessor",{"_index":1748,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"33":{},"40":{},"41":{},"45":{},"49":{},"65":{}},"component":{},"keyword":{}}],["predecessor/successor",{"_index":6470,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["predecessor=rw",{"_index":6467,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["predic",{"_index":834,"title":{},"name":{},"text":{"7":{},"41":{},"45":{},"51":{},"53":{}},"component":{},"keyword":{}}],["predict",{"_index":3602,"title":{},"name":{},"text":{"18":{},"39":{},"45":{},"49":{},"50":{},"61":{}},"component":{},"keyword":{}}],["predictor",{"_index":3699,"title":{},"name":{},"text":{"19":{},"45":{},"61":{}},"component":{},"keyword":{}}],["pred≠w",{"_index":6493,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["preempt",{"_index":5451,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["preemption",{"_index":2694,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["preemptiv",{"_index":4436,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["prefac",{"_index":143,"title":{"4":{},"34":{}},"name":{"4":{}},"text":{"4":{},"34":{}},"component":{},"keyword":{}}],["prefer",{"_index":10092,"title":{},"name":{},"text":{"58":{},"64":{}},"component":{},"keyword":{}}],["preferenti",{"_index":2852,"title":{},"name":{},"text":{"10":{},"64":{}},"component":{},"keyword":{}}],["prefetch",{"_index":4171,"title":{"33-22":{}},"name":{},"text":{"26":{},"33":{},"40":{},"64":{}},"component":{},"keyword":{}}],["prefetch.i",{"_index":5083,"title":{"33-28":{}},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["prefetch.r",{"_index":5084,"title":{"33-29":{}},"name":{},"text":{"33":{},"64":{}},"component":{},"keyword":{}}],["prefetch.w",{"_index":5085,"title":{"33-30":{}},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["prefix",{"_index":5470,"title":{},"name":{},"text":{"38":{},"40":{},"42":{},"51":{},"64":{}},"component":{},"keyword":{}}],["prepar",{"_index":1295,"title":{},"name":{},"text":{"7":{},"22":{}},"component":{},"keyword":{}}],["preprint",{"_index":1176,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["prerequisit",{"_index":9799,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["presenc",{"_index":601,"title":{},"name":{},"text":{"4":{},"10":{},"21":{},"27":{},"34":{},"40":{},"42":{},"51":{},"60":{},"66":{}},"component":{},"keyword":{}}],["present",{"_index":438,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"14":{},"19":{},"21":{},"26":{},"27":{},"28":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"47":{},"49":{},"51":{},"53":{},"57":{},"59":{},"60":{}},"component":{},"keyword":{}}],["preserv",{"_index":1885,"title":{"11-3":{},"12-4":{},"33-8":{},"40-4":{},"48-4":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"19":{},"27":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"47":{},"48":{},"50":{},"51":{},"52":{},"53":{},"59":{}},"component":{},"keyword":{}}],["pressur",{"_index":4246,"title":{},"name":{},"text":{"26":{},"40":{},"45":{},"51":{},"52":{},"53":{},"60":{},"61":{}},"component":{},"keyword":{}}],["prestart",{"_index":7595,"title":{"51-30":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["prestart(x",{"_index":7770,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["preston",{"_index":623,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["presum",{"_index":2243,"title":{},"name":{},"text":{"9":{},"22":{},"40":{}},"component":{},"keyword":{}}],["pretend",{"_index":5235,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["preval",{"_index":4922,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["prevent",{"_index":1806,"title":{"21":{}},"name":{},"text":{"8":{},"10":{},"11":{},"17":{},"21":{},"22":{},"25":{},"26":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["previou",{"_index":335,"title":{"10-15":{},"26-6":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"26":{},"27":{},"33":{},"34":{},"36":{},"40":{},"41":{},"42":{},"46":{},"51":{},"52":{},"53":{},"55":{},"63":{}},"component":{},"keyword":{}}],["previous",{"_index":509,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"19":{},"26":{},"37":{},"41":{},"45":{},"47":{},"49":{},"51":{},"56":{},"63":{}},"component":{},"keyword":{}}],["primari",{"_index":2564,"title":{},"name":{},"text":{"10":{},"27":{},"31":{},"38":{},"49":{},"51":{},"63":{}},"component":{},"keyword":{}}],["primarili",{"_index":2428,"title":{},"name":{},"text":{"10":{},"27":{},"35":{},"36":{},"45":{},"51":{},"57":{},"59":{},"62":{}},"component":{},"keyword":{}}],["primit",{"_index":4426,"title":{"48-2":{}},"name":{},"text":{"28":{},"40":{},"41":{},"48":{},"49":{},"65":{}},"component":{},"keyword":{}}],["princip",{"_index":6019,"title":{},"name":{},"text":{"41":{},"58":{}},"component":{},"keyword":{}}],["principl",{"_index":914,"title":{},"name":{},"text":{"7":{},"41":{},"49":{},"61":{}},"component":{},"keyword":{}}],["print",{"_index":2407,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["prior",{"_index":2441,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"16":{},"19":{},"26":{},"27":{},"40":{},"45":{},"49":{},"50":{},"51":{},"62":{}},"component":{},"keyword":{}}],["priorit",{"_index":2648,"title":{},"name":{},"text":{"10":{},"15":{},"40":{}},"component":{},"keyword":{}}],["prioriti",{"_index":403,"title":{"10-52":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"16":{},"21":{},"26":{},"50":{}},"component":{},"keyword":{}}],["priv",{"_index":18,"title":{},"name":{"2":{},"3":{},"4":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"text":{"10":{},"23":{},"26":{}},"component":{},"keyword":{}}],["priv_mod",{"_index":5105,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["privaci",{"_index":1382,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["privat",{"_index":444,"title":{},"name":{},"text":{"4":{},"10":{},"26":{},"28":{},"40":{},"49":{},"63":{},"64":{}},"component":{},"keyword":{}}],["privileg",{"_index":14,"title":{"14":{},"18":{},"3-1":{},"8-1":{},"10-8":{},"10-11":{},"10-31":{},"10-51":{},"15-1":{},"15-2":{},"19-15":{},"26-4":{},"27-7":{},"60-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"33":{},"34":{},"35":{},"38":{},"40":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"56":{},"57":{},"60":{},"62":{},"66":{}},"component":{},"keyword":{}}],["privilege_mod",{"_index":7574,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["prng",{"_index":6573,"title":{"49-104":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["probabl",{"_index":6080,"title":{},"name":{},"text":{"41":{},"49":{},"51":{},"62":{},"65":{}},"component":{},"keyword":{}}],["probe",{"_index":2359,"title":{},"name":{},"text":{"10":{},"51":{},"60":{}},"component":{},"keyword":{}}],["problem",{"_index":209,"title":{},"name":{},"text":{"4":{},"10":{},"18":{},"22":{},"26":{},"27":{},"28":{},"35":{},"40":{},"49":{},"55":{},"63":{}},"component":{},"keyword":{}}],["problemat",{"_index":3412,"title":{},"name":{},"text":{"12":{},"34":{},"49":{}},"component":{},"keyword":{}}],["proc",{"_index":813,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["proce",{"_index":2740,"title":{},"name":{},"text":{"10":{},"45":{}},"component":{},"keyword":{}}],["procedur",{"_index":5004,"title":{},"name":{},"text":{"31":{},"32":{},"45":{},"49":{},"50":{},"55":{}},"component":{},"keyword":{}}],["proceed",{"_index":751,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["process",{"_index":587,"title":{"26-22":{},"60-1":{},"60-3":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"17":{},"19":{},"21":{},"26":{},"29":{},"32":{},"33":{},"34":{},"36":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"64":{}},"component":{},"keyword":{}}],["processmark",{"_index":9823,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["processor",{"_index":868,"title":{"51-138":{},"51-139":{}},"name":{},"text":{"7":{},"10":{},"11":{},"22":{},"27":{},"30":{},"31":{},"35":{},"38":{},"40":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["processors—equip",{"_index":4286,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["processor’",{"_index":4069,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["produc",{"_index":3623,"title":{},"name":{},"text":{"19":{},"26":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"40":{},"43":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"55":{},"56":{},"59":{},"60":{},"64":{}},"component":{},"keyword":{}}],["product",{"_index":4559,"title":{},"name":{},"text":{"29":{},"30":{},"37":{},"39":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["profil",{"_index":2244,"title":{},"name":{},"text":{"9":{},"11":{},"17":{},"18":{},"19":{},"26":{},"27":{},"34":{},"45":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["program",{"_index":802,"title":{"8-17":{},"10-23":{},"26-13":{},"33-8":{},"40-4":{},"48-4":{},"49-81":{}},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"16":{},"19":{},"26":{},"28":{},"31":{},"33":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"62":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["program/documents/fips%20140",{"_index":1185,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["program_loc",{"_index":6059,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["programm",{"_index":3599,"title":{"45-2":{},"46-1":{}},"name":{},"text":{"18":{},"38":{},"40":{},"49":{},"51":{},"64":{}},"component":{},"keyword":{}}],["programmer’",{"_index":809,"title":{"51-3":{}},"name":{},"text":{"7":{},"45":{}},"component":{},"keyword":{}}],["progress",{"_index":2940,"title":{"40-7":{},"48-8":{}},"name":{},"text":{"10":{},"15":{},"28":{},"29":{},"30":{},"38":{},"40":{},"41":{},"48":{},"49":{},"51":{},"52":{},"64":{},"65":{}},"component":{},"keyword":{}}],["prohibit",{"_index":2639,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"33":{},"34":{},"35":{},"49":{},"51":{}},"component":{},"keyword":{}}],["project",{"_index":943,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"44":{},"49":{},"52":{}},"component":{},"keyword":{}}],["project/lem",{"_index":6014,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["project/rmem",{"_index":6010,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["project/sail",{"_index":974,"title":{},"name":{},"text":{"7":{},"41":{}},"component":{},"keyword":{}}],["prolifer",{"_index":4776,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["prologu",{"_index":4968,"title":{},"name":{},"text":{"31":{},"50":{},"57":{}},"component":{},"keyword":{}}],["prologue/epilogu",{"_index":9954,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["promot",{"_index":8543,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["promptli",{"_index":9739,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["pronounc",{"_index":5415,"title":{},"name":{},"text":{"38":{},"60":{}},"component":{},"keyword":{}}],["proof",{"_index":6916,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["propag",{"_index":5215,"title":{"37-3":{},"41-19":{},"41-20":{},"41-23":{}},"name":{},"text":{"34":{},"36":{},"37":{},"40":{},"41":{},"51":{}},"component":{},"keyword":{}}],["proper",{"_index":3685,"title":{},"name":{},"text":{"19":{},"31":{},"39":{},"47":{},"52":{}},"component":{},"keyword":{}}],["properli",{"_index":2595,"title":{},"name":{},"text":{"10":{},"26":{},"30":{},"41":{}},"component":{},"keyword":{}}],["properti",{"_index":2876,"title":{},"name":{},"text":{"10":{},"28":{},"33":{},"37":{},"40":{},"45":{},"47":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["proport",{"_index":6942,"title":{},"name":{},"text":{"49":{},"65":{}},"component":{},"keyword":{}}],["propos",{"_index":237,"title":{"21-3":{},"21-5":{}},"name":{},"text":{"4":{},"7":{},"15":{},"21":{},"22":{},"23":{},"25":{},"30":{},"34":{},"37":{},"38":{},"40":{},"49":{},"51":{},"52":{},"55":{}},"component":{},"keyword":{}}],["protect",{"_index":534,"title":{"8-12":{},"8-20":{},"10-48":{},"10-49":{},"10-53":{},"11-7":{},"26-17":{},"26-21":{},"26-24":{},"26-26":{},"26-28":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"21":{},"22":{},"26":{},"27":{},"28":{},"33":{},"38":{},"40":{},"49":{},"50":{},"52":{}},"component":{},"keyword":{}}],["protocol",{"_index":4087,"title":{},"name":{},"text":{"26":{},"33":{},"40":{},"41":{},"49":{}},"component":{},"keyword":{}}],["prototyp",{"_index":7514,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["provabl",{"_index":7031,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["prove",{"_index":2169,"title":{},"name":{},"text":{"8":{},"26":{},"38":{}},"component":{},"keyword":{}}],["provid",{"_index":498,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"17":{},"19":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["provis",{"_index":5221,"title":{},"name":{},"text":{"35":{},"37":{},"60":{},"61":{},"64":{}},"component":{},"keyword":{}}],["provision",{"_index":6025,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["psabi",{"_index":709,"title":{},"name":{},"text":{"7":{},"32":{},"34":{}},"component":{},"keyword":{}}],["pseudo",{"_index":1399,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["pseudocod",{"_index":4476,"title":{"29-3":{},"33-1":{},"41-4":{},"41-27":{}},"name":{},"text":{"41":{},"52":{},"57":{}},"component":{},"keyword":{}}],["pseudocode_st",{"_index":6065,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["pseudoinstruct",{"_index":1484,"title":{"8-37":{}},"name":{},"text":{"8":{},"29":{},"31":{},"34":{},"35":{},"37":{},"45":{},"47":{},"49":{},"50":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["pseudorandom",{"_index":6572,"title":{"49-104":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pseudorandomli",{"_index":6012,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["pte",{"_index":195,"title":{"26-33":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"21":{},"26":{},"50":{}},"component":{},"keyword":{}}],["pte(",{"_index":4251,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.a",{"_index":4200,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.a=0",{"_index":4198,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.d",{"_index":4201,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.d=0",{"_index":4199,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.n=1",{"_index":4234,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.napot_bit",{"_index":4235,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.ppn[i",{"_index":4193,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.ppn[i][pte.napot_bit",{"_index":4240,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.ppn[level",{"_index":4208,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.r",{"_index":4195,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.r=0",{"_index":4185,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.r=1",{"_index":4187,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.u",{"_index":4194,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.v=0",{"_index":4184,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.w",{"_index":4196,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.w=1",{"_index":4186,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.x",{"_index":4197,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.x=1",{"_index":4188,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte.xwr",{"_index":3090,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["pte.xwr=001",{"_index":3088,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["pte.xwr=010b",{"_index":1791,"title":{},"name":{},"text":{"8":{},"10":{},"11":{}},"component":{},"keyword":{}}],["ptesiz",{"_index":4209,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["ptesize=4",{"_index":4183,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["pte’",{"_index":4142,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["ptg.2",{"_index":6564,"title":{"49-74":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.1",{"_index":6946,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.2",{"_index":6948,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.3",{"_index":6950,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.4",{"_index":6952,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.5",{"_index":6954,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.6",{"_index":6956,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.2.7",{"_index":6960,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptg.3",{"_index":6945,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ptr",{"_index":9714,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["pub",{"_index":8948,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["public",{"_index":990,"title":{},"name":{},"text":{"7":{},"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["puf",{"_index":6975,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["pult",{"_index":681,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["pum",{"_index":564,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["pun",{"_index":5427,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["pure",{"_index":2535,"title":{},"name":{},"text":{"10":{},"26":{},"27":{},"31":{},"38":{},"49":{}},"component":{},"keyword":{}}],["purpos",{"_index":1852,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"17":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"55":{},"57":{},"62":{},"66":{}},"component":{},"keyword":{}}],["pursu",{"_index":7742,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["push",{"_index":3724,"title":{"50-8":{},"57-32":{}},"name":{},"text":{"19":{},"45":{},"50":{},"57":{}},"component":{},"keyword":{}}],["push/pop",{"_index":6442,"title":{"57-25":{},"57-26":{},"57-30":{},"57-35":{}},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["push/popret",{"_index":9948,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["put",{"_index":153,"title":{},"name":{},"text":{"4":{},"21":{},"30":{},"34":{},"40":{},"50":{},"52":{}},"component":{},"keyword":{}}],["pw",{"_index":1760,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{},"41":{},"67":{}},"component":{},"keyword":{}}],["q",{"_index":2342,"title":{"43":{}},"name":{"43":{}},"text":{"10":{},"28":{},"34":{},"36":{},"37":{},"41":{},"42":{},"43":{},"48":{},"49":{},"51":{},"58":{},"59":{},"60":{},"64":{}},"component":{},"keyword":{}}],["qemu",{"_index":5444,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["qkd",{"_index":7062,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["qnan",{"_index":4814,"title":{},"name":{},"text":{"30":{},"34":{},"36":{},"37":{},"51":{}},"component":{},"keyword":{}}],["qo",{"_index":4065,"title":{"26-34":{}},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["qrng",{"_index":7050,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["quad",{"_index":2350,"title":{"43":{},"43-1":{},"43-2":{},"43-3":{},"43-4":{},"43-5":{}},"name":{},"text":{"10":{},"31":{},"36":{},"37":{},"42":{},"43":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["quadrant",{"_index":5019,"title":{},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["quadword",{"_index":5475,"title":{},"name":{},"text":{"38":{},"54":{},"55":{}},"component":{},"keyword":{}}],["qualifi",{"_index":2084,"title":{},"name":{},"text":{"8":{},"9":{},"19":{}},"component":{},"keyword":{}}],["qualiti",{"_index":197,"title":{"26-34":{}},"name":{},"text":{"4":{},"26":{},"40":{},"49":{}},"component":{},"keyword":{}}],["quantifi",{"_index":7061,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["quantiti",{"_index":2531,"title":{},"name":{},"text":{"10":{},"29":{},"51":{}},"component":{},"keyword":{}}],["quantum",{"_index":1046,"title":{"49-125":{},"49-126":{}},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["quarter",{"_index":6501,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["queri",{"_index":1733,"title":{},"name":{},"text":{"8":{},"26":{},"49":{}},"component":{},"keyword":{}}],["question",{"_index":4272,"title":{},"name":{},"text":{"26":{},"38":{},"40":{}},"component":{},"keyword":{}}],["queue",{"_index":911,"title":{},"name":{},"text":{"7":{},"16":{},"55":{},"56":{}},"component":{},"keyword":{}}],["queue_t",{"_index":9717,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["quick",{"_index":8919,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["quickli",{"_index":2331,"title":{},"name":{},"text":{"10":{},"23":{},"26":{},"38":{},"45":{}},"component":{},"keyword":{}}],["quiet",{"_index":4813,"title":{},"name":{},"text":{"30":{},"36":{},"37":{},"51":{},"58":{}},"component":{},"keyword":{}}],["quit",{"_index":4129,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["quotient",{"_index":5527,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["r",{"_index":747,"title":{},"name":{},"text":{"7":{},"10":{},"21":{},"26":{},"28":{},"29":{},"33":{},"37":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"61":{}},"component":{},"keyword":{}}],["r\"(cur_ssp",{"_index":7564,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["r,r",{"_index":5602,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["r,rw",{"_index":5555,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["r.^~po",{"_index":5838,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r.pair",{"_index":5847,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r.~^gmo",{"_index":5836,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r.~rf.^gmo",{"_index":5846,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r/i/s/u",{"_index":6419,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["r/w",{"_index":3908,"title":{},"name":{},"text":{"21":{},"45":{}},"component":{},"keyword":{}}],["r/w/x",{"_index":3031,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["r0",{"_index":5756,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["r0p0",{"_index":1270,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["r1",{"_index":5760,"title":{},"name":{},"text":{"40":{},"41":{},"49":{},"57":{}},"component":{},"keyword":{}}],["r10",{"_index":5970,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r11",{"_index":5972,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r12",{"_index":5974,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r13",{"_index":5976,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r1sc>1",{"_index":10026,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["r1sc[2:1]>0,r1sc[2:1]==0,r1sc[2:0",{"_index":10029,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["r2",{"_index":5956,"title":{},"name":{},"text":{"41":{},"57":{}},"component":{},"keyword":{}}],["r2sc>1",{"_index":10027,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["r2sc[2:1]>0,r2sc[2:1]==0,r2sc[2:0",{"_index":10031,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["r3",{"_index":5959,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r4",{"_index":5360,"title":{},"name":{},"text":{"37":{},"41":{},"44":{}},"component":{},"keyword":{}}],["r5",{"_index":5961,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r6",{"_index":5963,"title":{},"name":{},"text":{"41":{},"45":{}},"component":{},"keyword":{}}],["r7",{"_index":5965,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r8",{"_index":5967,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r9",{"_index":5968,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r=0",{"_index":2991,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{},"keyword":{}}],["r=0,w=1",{"_index":3914,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["r=1",{"_index":2501,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["r];(addr|data);[w];rfi;[r",{"_index":5975,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r];addr;[m];po;[w",{"_index":5977,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r];f;[m",{"_index":5946,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r];fencerel(fence.r.r);[r",{"_index":5927,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r];fencerel(fence.r.rw);[m",{"_index":5931,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r];fencerel(fence.r.w);[w",{"_index":5929,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["r];po",{"_index":5957,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["ra",{"_index":3615,"title":{"19-20":{},"57-36":{},"57-37":{},"57-38":{},"57-39":{},"57-40":{}},"name":{},"text":{"19":{},"28":{},"45":{},"50":{},"53":{},"57":{}},"component":{},"keyword":{}}],["ra,92(sp",{"_index":9846,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["ra,s0",{"_index":9950,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["ra=*[a0",{"_index":7584,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["ra=ssp",{"_index":7587,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["radioact",{"_index":7059,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["radix",{"_index":4155,"title":{},"name":{},"text":{"26":{},"30":{}},"component":{},"keyword":{}}],["rais",{"_index":364,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"22":{},"25":{},"26":{},"28":{},"30":{},"31":{},"33":{},"37":{},"38":{},"39":{},"45":{},"49":{},"50":{},"51":{},"52":{},"58":{},"62":{},"66":{}},"component":{},"keyword":{}}],["ram",{"_index":2888,"title":{},"name":{},"text":{"10":{},"63":{}},"component":{},"keyword":{}}],["rambu",{"_index":1323,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["random",{"_index":1014,"title":{"49-105":{},"49-124":{},"49-125":{}},"name":{},"text":{"7":{},"12":{},"49":{},"51":{}},"component":{},"keyword":{}}],["randomli",{"_index":6007,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rang",{"_index":2240,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"21":{},"26":{},"27":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"61":{}},"component":{},"keyword":{}}],["range(rmw",{"_index":5953,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["raphson",{"_index":8419,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rapid",{"_index":7781,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rapidli",{"_index":7001,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rare",{"_index":2879,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"38":{},"40":{},"45":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["rarer",{"_index":6457,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["rasemu",{"_index":3633,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["rasemu=1",{"_index":3687,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["rashint",{"_index":7505,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["rate",{"_index":3769,"title":{},"name":{},"text":{"19":{},"22":{},"35":{},"49":{}},"component":{},"keyword":{}}],["ratif",{"_index":155,"title":{},"name":{},"text":{"4":{},"32":{},"34":{},"51":{}},"component":{},"keyword":{}}],["ratifi",{"_index":141,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"27":{},"29":{},"34":{},"37":{},"49":{},"51":{}},"component":{},"keyword":{}}],["ratio",{"_index":6763,"title":{},"name":{},"text":{"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["ration",{"_index":5371,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["rational",{"_index":2693,"title":{"21-7":{},"49-80":{},"49-88":{},"49-99":{},"49-106":{}},"name":{},"text":{"10":{},"27":{},"45":{},"49":{}},"component":{},"keyword":{}}],["ravi",{"_index":896,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["raw",{"_index":6892,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ray",{"_index":122,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["rbg",{"_index":1037,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["rbg2(p",{"_index":6937,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rbg3",{"_index":6938,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rc",{"_index":6679,"title":{},"name":{},"text":{"49":{},"61":{}},"component":{},"keyword":{}}],["rc4",{"_index":6689,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rcid",{"_index":4289,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["rcid=0",{"_index":4297,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["rcpc",{"_index":5668,"title":{},"name":{},"text":{"40":{},"41":{},"48":{},"67":{}},"component":{},"keyword":{}}],["rcpc/releas",{"_index":6045,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rcsc",{"_index":4415,"title":{},"name":{},"text":{"28":{},"40":{},"41":{},"48":{},"67":{}},"component":{},"keyword":{}}],["rcsc/releas",{"_index":6046,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rcsc];po;[rcsc",{"_index":5966,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rd",{"_index":2154,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"54":{},"55":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"66":{}},"component":{},"keyword":{}}],["rd'/rs1",{"_index":9787,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rd+1",{"_index":9696,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["rd,r",{"_index":4625,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rd,rd,k",{"_index":4653,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rd,rs,(xlen",{"_index":4550,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["rd,rs,rd",{"_index":4626,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["rd/rs1",{"_index":4931,"title":{},"name":{},"text":{"31":{},"66":{}},"component":{},"keyword":{}}],["rd=rs1",{"_index":6444,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["rd=rs1=x0",{"_index":6491,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["rd=x0",{"_index":4962,"title":{},"name":{},"text":{"31":{},"34":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"62":{},"65":{}},"component":{},"keyword":{}}],["rd=x2",{"_index":4995,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rdcycl",{"_index":3243,"title":{},"name":{},"text":{"12":{},"35":{},"44":{}},"component":{},"keyword":{}}],["rdcycleh",{"_index":5227,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["rdh",{"_index":5519,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rdinstret",{"_index":3245,"title":{},"name":{},"text":{"12":{},"35":{},"44":{}},"component":{},"keyword":{}}],["rdinstreth",{"_index":5229,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["rdl",{"_index":5520,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rdn",{"_index":4824,"title":{},"name":{},"text":{"30":{},"37":{},"51":{}},"component":{},"keyword":{}}],["rdnpc",{"_index":5196,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["rdq",{"_index":5529,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rdr",{"_index":5531,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rdtime",{"_index":3244,"title":{},"name":{},"text":{"12":{},"35":{},"44":{}},"component":{},"keyword":{}}],["rdtimeh",{"_index":5228,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["rdw",{"_index":5824,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rd′/rs1",{"_index":4933,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rd≠x0",{"_index":4961,"title":{},"name":{},"text":{"31":{},"45":{},"47":{},"50":{},"51":{}},"component":{},"keyword":{}}],["rd≠{x0,x2",{"_index":4993,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["re",{"_index":1276,"title":{},"name":{},"text":{"7":{},"10":{},"16":{},"18":{},"21":{},"31":{},"49":{},"51":{},"57":{},"65":{}},"component":{},"keyword":{}}],["reach",{"_index":361,"title":{},"name":{},"text":{"4":{},"26":{},"31":{},"34":{},"40":{},"49":{},"50":{},"51":{},"56":{}},"component":{},"keyword":{}}],["reachabl",{"_index":4214,"title":{},"name":{},"text":{"26":{},"41":{},"50":{}},"component":{},"keyword":{}}],["react",{"_index":7027,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["read",{"_index":213,"title":{"12-4":{},"12-6":{},"12-8":{},"41-25":{},"50-10":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["read/execut",{"_index":3865,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["read/modify/writ",{"_index":3410,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["read/writ",{"_index":1577,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"19":{},"21":{},"26":{},"37":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["read/write/execut",{"_index":3866,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["read_cont",{"_index":6102,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["read_continu",{"_index":6040,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["read_reg(reg_nam",{"_index":6039,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["read_reg(x2",{"_index":6049,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["read_sourc",{"_index":6103,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["readabl",{"_index":1554,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"23":{},"26":{},"42":{},"45":{},"51":{}},"component":{},"keyword":{}}],["reader",{"_index":3463,"title":{},"name":{},"text":{"15":{},"38":{},"40":{},"52":{}},"component":{},"keyword":{}}],["readi",{"_index":5165,"title":{},"name":{},"text":{"34":{},"41":{}},"component":{},"keyword":{}}],["readili",{"_index":4775,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["reads/writ",{"_index":4386,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["real",{"_index":2043,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"30":{},"35":{},"38":{},"40":{},"45":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["realis",{"_index":6800,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["realist",{"_index":5248,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["realiti",{"_index":4318,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["realiz",{"_index":4082,"title":{},"name":{},"text":{"26":{},"31":{},"53":{},"61":{}},"component":{},"keyword":{}}],["realli",{"_index":2296,"title":{},"name":{},"text":{"9":{},"17":{},"19":{},"22":{},"25":{}},"component":{},"keyword":{}}],["rearrang",{"_index":5176,"title":{},"name":{},"text":{"34":{},"51":{}},"component":{},"keyword":{}}],["reason",{"_index":932,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"16":{},"21":{},"22":{},"27":{},"28":{},"31":{},"38":{},"40":{},"45":{},"47":{},"49":{},"51":{},"56":{},"58":{},"63":{},"64":{}},"component":{},"keyword":{}}],["reassoci",{"_index":4149,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["reboot",{"_index":6988,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rec",{"_index":1370,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["recal",{"_index":3974,"title":{},"name":{},"text":{"22":{},"49":{}},"component":{},"keyword":{}}],["receiv",{"_index":1740,"title":{},"name":{},"text":{"8":{},"10":{},"40":{},"51":{}},"component":{},"keyword":{}}],["recent",{"_index":3794,"title":{},"name":{},"text":{"19":{},"21":{},"26":{},"28":{},"33":{},"40":{},"41":{},"52":{},"64":{}},"component":{},"keyword":{}}],["recipi",{"_index":4096,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["reciproc",{"_index":7603,"title":{"51-88":{},"51-89":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["reclaim",{"_index":492,"title":{},"name":{},"text":{"4":{},"26":{}},"component":{},"keyword":{}}],["recod",{"_index":5280,"title":{},"name":{},"text":{"36":{},"37":{},"38":{},"60":{}},"component":{},"keyword":{}}],["recogn",{"_index":2751,"title":{},"name":{},"text":{"10":{},"19":{},"30":{},"42":{},"52":{},"63":{}},"component":{},"keyword":{}}],["recognis",{"_index":6587,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["recommend",{"_index":1012,"title":{"49-99":{}},"name":{},"text":{"7":{},"9":{},"10":{},"19":{},"26":{},"28":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"44":{},"49":{},"50":{},"51":{},"52":{},"57":{},"62":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["recompil",{"_index":3798,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["reconfigur",{"_index":2910,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["record",{"_index":191,"title":{"19":{},"19-2":{},"19-3":{},"19-4":{},"19-5":{},"19-6":{},"19-8":{},"19-9":{},"19-10":{}},"name":{},"text":{"4":{},"10":{},"19":{},"26":{},"41":{},"49":{}},"component":{},"keyword":{}}],["recov",{"_index":2451,"title":{},"name":{},"text":{"10":{},"45":{},"49":{}},"component":{},"keyword":{}}],["recover",{"_index":3081,"title":{},"name":{},"text":{"11":{},"16":{}},"component":{},"keyword":{}}],["recoveri",{"_index":4089,"title":{},"name":{},"text":{"26":{},"51":{}},"component":{},"keyword":{}}],["rectangl",{"_index":1110,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["rectifi",{"_index":460,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{},"keyword":{}}],["recurs",{"_index":573,"title":{},"name":{},"text":{"4":{},"15":{},"41":{},"43":{},"59":{}},"component":{},"keyword":{}}],["recycl",{"_index":4148,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["red",{"_index":7943,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["redefin",{"_index":211,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"31":{},"50":{},"66":{}},"component":{},"keyword":{}}],["redirect",{"_index":2634,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["reduc",{"_index":478,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"15":{},"19":{},"26":{},"27":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"42":{},"45":{},"46":{},"49":{},"50":{},"51":{},"52":{},"57":{},"60":{},"61":{},"64":{},"65":{}},"component":{},"keyword":{}}],["reduct",{"_index":4441,"title":{"57":{},"51-99":{},"51-100":{},"51-101":{},"51-102":{},"51-103":{},"51-104":{},"51-105":{},"51-106":{}},"name":{},"text":{"28":{},"29":{},"31":{},"34":{},"45":{},"46":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["redund",{"_index":503,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"29":{},"34":{},"40":{},"41":{},"49":{},"58":{},"67":{}},"component":{},"keyword":{}}],["redundantli",{"_index":4168,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["reentranc",{"_index":2461,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["reentrant",{"_index":2460,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["reexecut",{"_index":10200,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["refer",{"_index":2,"title":{"1":{}},"name":{},"text":{"1":{},"7":{},"8":{},"10":{},"17":{},"19":{},"26":{},"27":{},"29":{},"30":{},"31":{},"34":{},"37":{},"38":{},"40":{},"41":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"64":{}},"component":{},"keyword":{}}],["referenc",{"_index":3103,"title":{},"name":{},"text":{"11":{},"26":{},"40":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["refil",{"_index":2969,"title":{},"name":{},"text":{"10":{},"26":{},"27":{},"38":{},"63":{}},"component":{},"keyword":{}}],["reflect",{"_index":224,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"13":{},"19":{},"23":{},"25":{},"26":{},"34":{},"40":{},"45":{},"47":{},"48":{},"51":{},"62":{}},"component":{},"keyword":{}}],["reformat",{"_index":8557,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["refresh",{"_index":6924,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["refus",{"_index":5554,"title":{},"name":{},"text":{"40":{},"67":{}},"component":{},"keyword":{}}],["reg",{"_index":5695,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["reg_l",{"_index":4710,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["reg_list",{"_index":9776,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["reg_list=\"ra",{"_index":9986,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["reg_nam",{"_index":6047,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["reg_read",{"_index":6070,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["reg_valu",{"_index":6042,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["reg_writ",{"_index":6071,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["regain",{"_index":2438,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["regard",{"_index":5336,"title":{},"name":{},"text":{"37":{},"40":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["regardless",{"_index":441,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"16":{},"19":{},"22":{},"26":{},"28":{},"33":{},"38":{},"40":{},"45":{},"49":{},"51":{},"55":{},"60":{},"62":{}},"component":{},"keyword":{}}],["regfil",{"_index":5308,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["region",{"_index":297,"title":{"10-39":{}},"name":{},"text":{"4":{},"8":{},"10":{},"21":{},"26":{},"28":{},"31":{},"33":{},"34":{},"38":{},"40":{},"45":{},"48":{},"51":{},"54":{},"57":{},"62":{},"63":{}},"component":{},"keyword":{}}],["regist",{"_index":315,"title":{"12":{},"60":{},"62":{},"8-3":{},"8-4":{},"8-5":{},"8-6":{},"8-7":{},"8-8":{},"8-9":{},"8-10":{},"8-11":{},"8-12":{},"8-13":{},"8-14":{},"8-15":{},"8-16":{},"8-17":{},"8-18":{},"8-19":{},"8-20":{},"8-25":{},"8-26":{},"8-27":{},"8-28":{},"8-29":{},"10-2":{},"10-3":{},"10-4":{},"10-5":{},"10-6":{},"10-7":{},"10-8":{},"10-9":{},"10-10":{},"10-11":{},"10-12":{},"10-13":{},"10-14":{},"10-15":{},"10-16":{},"10-17":{},"10-18":{},"10-20":{},"10-21":{},"10-22":{},"10-23":{},"10-24":{},"10-25":{},"10-26":{},"10-27":{},"10-28":{},"10-29":{},"10-30":{},"17-2":{},"18-3":{},"19-2":{},"19-3":{},"19-4":{},"19-5":{},"19-6":{},"19-7":{},"19-8":{},"19-9":{},"19-10":{},"22-2":{},"23-2":{},"25-2":{},"25-3":{},"25-4":{},"25-5":{},"25-7":{},"25-8":{},"25-9":{},"26-2":{},"26-3":{},"26-4":{},"26-5":{},"26-6":{},"26-7":{},"26-8":{},"26-9":{},"26-11":{},"26-12":{},"26-13":{},"26-14":{},"26-15":{},"26-16":{},"26-17":{},"26-35":{},"31-5":{},"31-9":{},"31-10":{},"33-18":{},"36-1":{},"37-1":{},"37-2":{},"41-25":{},"41-26":{},"45-6":{},"45-7":{},"47-1":{},"47-3":{},"47-4":{},"48-10":{},"50-10":{},"51-4":{},"51-7":{},"51-9":{},"51-12":{},"51-13":{},"51-14":{},"51-15":{},"51-17":{},"51-19":{},"51-24":{},"51-49":{},"51-108":{},"51-127":{},"51-130":{},"57-25":{},"57-29":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["register(",{"_index":3835,"title":{},"name":{},"text":{"21":{},"40":{},"48":{}},"component":{},"keyword":{}}],["register(hvip",{"_index":1680,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["register—in",{"_index":3025,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["register’",{"_index":2168,"title":{},"name":{},"text":{"8":{},"12":{},"26":{},"27":{}},"component":{},"keyword":{}}],["regular",{"_index":1497,"title":{},"name":{},"text":{"8":{},"10":{},"27":{},"31":{},"40":{},"45":{},"48":{},"50":{},"51":{},"58":{},"60":{},"64":{}},"component":{},"keyword":{}}],["regularli",{"_index":5795,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["reiniti",{"_index":2591,"title":{},"name":{},"text":{"10":{},"23":{}},"component":{},"keyword":{}}],["reinoud",{"_index":132,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["reinterpret",{"_index":2527,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["reject",{"_index":6984,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rel",{"_index":405,"title":{},"name":{},"text":{"4":{},"10":{},"26":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["relacqrel",{"_index":5950,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["relat",{"_index":3960,"title":{},"name":{},"text":{"22":{},"26":{},"30":{},"33":{},"38":{},"40":{},"41":{},"42":{},"49":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["relationship",{"_index":8696,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["relax",{"_index":260,"title":{},"name":{},"text":{"4":{},"10":{},"22":{},"27":{},"28":{},"33":{},"34":{},"38":{},"40":{},"45":{},"51":{}},"component":{},"keyword":{}}],["releas",{"_index":20,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"10":{},"21":{},"28":{},"29":{},"30":{},"34":{},"40":{},"41":{},"42":{},"48":{},"49":{},"50":{},"54":{},"55":{},"67":{}},"component":{},"keyword":{}}],["releasercpc",{"_index":5855,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["releasercsc",{"_index":5856,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["relev",{"_index":2846,"title":{},"name":{},"text":{"10":{},"19":{},"22":{},"26":{},"30":{},"31":{},"33":{},"49":{},"52":{},"57":{},"62":{}},"component":{},"keyword":{}}],["reli",{"_index":1870,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"26":{},"27":{},"28":{},"33":{},"38":{},"51":{},"63":{}},"component":{},"keyword":{}}],["reliabl",{"_index":3801,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["reliev",{"_index":4217,"title":{},"name":{},"text":{"26":{},"66":{}},"component":{},"keyword":{}}],["relinquish",{"_index":4470,"title":{},"name":{},"text":{"28":{},"65":{}},"component":{},"keyword":{}}],["reload",{"_index":3529,"title":{},"name":{},"text":{"17":{},"53":{}},"component":{},"keyword":{}}],["reloc",{"_index":6808,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rem",{"_index":5524,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["rem[u",{"_index":5530,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rem[u]w",{"_index":5537,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rem[w",{"_index":5542,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["remain",{"_index":538,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"31":{},"34":{},"38":{},"40":{},"48":{},"49":{},"51":{},"61":{}},"component":{},"keyword":{}}],["remaind",{"_index":5044,"title":{},"name":{},"text":{"31":{},"33":{},"39":{},"45":{},"47":{},"49":{},"51":{}},"component":{},"keyword":{}}],["remark",{"_index":4143,"title":{},"name":{},"text":{"26":{},"59":{}},"component":{},"keyword":{}}],["remedi",{"_index":3584,"title":{},"name":{},"text":{"18":{}},"component":{},"keyword":{}}],["remind",{"_index":4145,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["remit",{"_index":6799,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["remot",{"_index":2660,"title":{},"name":{},"text":{"10":{},"26":{},"63":{}},"component":{},"keyword":{}}],["remov",{"_index":365,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"19":{},"21":{},"27":{},"29":{},"31":{},"34":{},"36":{},"37":{},"38":{},"41":{},"46":{},"49":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["removed/modifi",{"_index":3850,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["remu",{"_index":5525,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["remu[w",{"_index":5540,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["remuw",{"_index":5535,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["remw",{"_index":5534,"title":{},"name":{},"text":{"39":{},"44":{},"48":{}},"component":{},"keyword":{}}],["renam",{"_index":511,"title":{},"name":{},"text":{"4":{},"31":{},"34":{},"36":{},"41":{},"45":{},"51":{}},"component":{},"keyword":{}}],["renau",{"_index":683,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["render",{"_index":3896,"title":{},"name":{},"text":{"21":{},"67":{}},"component":{},"keyword":{}}],["renumb",{"_index":5187,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["reorder",{"_index":2955,"title":{},"name":{},"text":{"10":{},"28":{},"38":{},"40":{},"62":{},"67":{}},"component":{},"keyword":{}}],["reorgan",{"_index":8279,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["repeat",{"_index":2855,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"30":{},"49":{},"51":{}},"component":{},"keyword":{}}],["repeatedli",{"_index":4457,"title":{},"name":{},"text":{"28":{},"52":{},"57":{}},"component":{},"keyword":{}}],["repetit",{"_index":6941,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["replac",{"_index":308,"title":{},"name":{},"text":{"4":{},"8":{},"15":{},"26":{},"27":{},"29":{},"31":{},"34":{},"45":{},"49":{},"51":{},"57":{},"61":{},"64":{}},"component":{},"keyword":{}}],["replay",{"_index":5654,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["replic",{"_index":4355,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["replica",{"_index":1537,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["repo",{"_index":2395,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["report",{"_index":1294,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"18":{},"19":{},"26":{},"34":{},"38":{},"45":{},"51":{},"57":{}},"component":{},"keyword":{}}],["repositori",{"_index":5588,"title":{},"name":{},"text":{"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["repres",{"_index":1724,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"17":{},"19":{},"23":{},"26":{},"27":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"49":{},"51":{},"57":{},"58":{}},"component":{},"keyword":{}}],["represent",{"_index":2909,"title":{"21-5":{}},"name":{},"text":{"10":{},"19":{},"26":{},"36":{},"37":{},"38":{},"40":{},"41":{},"49":{},"51":{},"52":{},"58":{},"59":{}},"component":{},"keyword":{}}],["reproduc",{"_index":3751,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["repurpos",{"_index":575,"title":{},"name":{},"text":{"4":{},"26":{},"51":{}},"component":{},"keyword":{}}],["request",{"_index":2689,"title":{},"name":{},"text":{"10":{},"21":{},"23":{},"25":{},"26":{},"38":{},"41":{},"45":{},"50":{},"53":{},"57":{},"63":{}},"component":{},"keyword":{}}],["requir",{"_index":250,"title":{"49-72":{},"49-73":{},"49-74":{},"49-75":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{}},"component":{},"keyword":{}}],["res_continu",{"_index":6048,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["reschedul",{"_index":10181,"title":{},"name":{},"text":{"63":{}},"component":{},"keyword":{}}],["research",{"_index":870,"title":{"13-1":{}},"name":{},"text":{"7":{},"13":{},"26":{},"38":{},"48":{},"49":{}},"component":{},"keyword":{}}],["reseed",{"_index":6925,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["resembl",{"_index":7033,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["reserv",{"_index":327,"title":{"56":{},"10-43":{},"12-4":{},"56-1":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"46":{},"47":{},"49":{},"51":{},"52":{},"55":{},"56":{},"57":{},"58":{},"60":{},"63":{},"66":{}},"component":{},"keyword":{}}],["reserved/stor",{"_index":4408,"title":{"28-2":{}},"name":{},"text":{"28":{},"34":{},"48":{}},"component":{},"keyword":{}}],["reset",{"_index":406,"title":{"10-36":{},"51-18":{}},"name":{},"text":{"4":{},"10":{},"12":{},"16":{},"19":{},"21":{},"22":{},"26":{},"32":{},"35":{},"37":{},"38":{},"49":{},"50":{},"51":{},"53":{}},"component":{},"keyword":{}}],["reset/halt",{"_index":6991,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["resid",{"_index":2968,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"31":{},"38":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["resili",{"_index":6897,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["resist",{"_index":6608,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["resolut",{"_index":3819,"title":{},"name":{},"text":{"20":{},"40":{}},"component":{},"keyword":{}}],["resolv",{"_index":5175,"title":{},"name":{},"text":{"34":{},"40":{}},"component":{},"keyword":{}}],["resort",{"_index":9688,"title":{},"name":{},"text":{"54":{}},"component":{},"keyword":{}}],["resourc",{"_index":3525,"title":{"26-35":{}},"name":{},"text":{"17":{},"21":{},"26":{},"33":{},"35":{},"38":{},"45":{},"49":{},"65":{}},"component":{},"keyword":{}}],["resp.pw",{"_index":5660,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["resp.stor",{"_index":5659,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["resp.sw",{"_index":5661,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["respect",{"_index":1690,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"15":{},"17":{},"18":{},"19":{},"22":{},"23":{},"25":{},"26":{},"27":{},"29":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"58":{},"59":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["respond",{"_index":2439,"title":{},"name":{},"text":{"10":{},"11":{},"51":{}},"component":{},"keyword":{}}],["respons",{"_index":2459,"title":{},"name":{},"text":{"10":{},"19":{},"22":{},"25":{},"26":{},"27":{},"28":{},"30":{},"33":{},"38":{},"49":{},"51":{},"52":{},"57":{}},"component":{},"keyword":{}}],["rest",{"_index":2808,"title":{},"name":{},"text":{"10":{},"15":{},"29":{},"31":{},"40":{},"41":{},"48":{},"49":{}},"component":{},"keyword":{}}],["restart",{"_index":2479,"title":{},"name":{},"text":{"10":{},"11":{},"31":{},"41":{},"51":{}},"component":{},"keyword":{}}],["restor",{"_index":2189,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"19":{},"26":{},"31":{},"32":{},"33":{},"36":{},"45":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["restrict",{"_index":1594,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"19":{},"21":{},"26":{},"28":{},"31":{},"33":{},"37":{},"38":{},"40":{},"41":{},"44":{},"49":{},"51":{},"52":{},"53":{},"57":{},"63":{}},"component":{},"keyword":{}}],["restrict_to_current_encod",{"_index":5911,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["result",{"_index":1904,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"16":{},"17":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"47":{},"49":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["result[i+3..i",{"_index":4690,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["result[i+7..i",{"_index":4656,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["result_wid",{"_index":9817,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["result_wide[(sizeof(xlen",{"_index":9821,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["results—e.g",{"_index":10149,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["result’",{"_index":5391,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["resum",{"_index":2191,"title":{"16":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"26":{},"38":{},"51":{},"56":{},"57":{},"64":{}},"component":{},"keyword":{}}],["resumpt",{"_index":8667,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ret",{"_index":4726,"title":{},"name":{},"text":{"29":{},"45":{},"50":{},"51":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["retain",{"_index":1550,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"39":{},"51":{}},"component":{},"keyword":{}}],["retinh",{"_index":3652,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["retir",{"_index":2704,"title":{},"name":{},"text":{"10":{},"12":{},"18":{},"19":{},"28":{},"35":{},"38":{},"40":{},"44":{},"62":{}},"component":{},"keyword":{}}],["retire_fail",{"_index":9031,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["retire_success",{"_index":4685,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["retri",{"_index":2192,"title":{},"name":{},"text":{"8":{},"11":{},"28":{},"35":{},"40":{},"55":{}},"component":{},"keyword":{}}],["retriev",{"_index":7411,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["return",{"_index":553,"title":{"8-38":{},"10-33":{},"19-20":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"62":{}},"component":{},"keyword":{}}],["return(i",{"_index":4600,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["reus",{"_index":1856,"title":{},"name":{},"text":{"8":{},"26":{},"29":{},"30":{},"31":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["rev",{"_index":1269,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["rev8",{"_index":4512,"title":{"29-49":{},"49-40":{}},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["rev8(a1",{"_index":9321,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(a2",{"_index":9322,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(ai",{"_index":9286,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(bi",{"_index":9285,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(c1",{"_index":9319,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(c2",{"_index":9320,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(ci",{"_index":9284,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(di",{"_index":9283,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(e1",{"_index":9317,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(e2",{"_index":9318,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(ei",{"_index":9282,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(fi",{"_index":9281,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(g1",{"_index":9315,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(g2",{"_index":9316,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(gi",{"_index":9280,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(hi",{"_index":9279,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w0i",{"_index":9290,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w1i",{"_index":9289,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w4i",{"_index":9288,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w5i",{"_index":9287,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[0",{"_index":9359,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[1",{"_index":9358,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[10",{"_index":9347,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[11",{"_index":9346,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[12",{"_index":9345,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[13",{"_index":9343,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[14",{"_index":9341,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[15",{"_index":9339,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[16",{"_index":9377,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[17",{"_index":9378,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[18",{"_index":9379,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[19",{"_index":9380,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[2",{"_index":9357,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[20",{"_index":9381,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[21",{"_index":9383,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[22",{"_index":9385,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[23",{"_index":9387,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[3",{"_index":9355,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[4",{"_index":9353,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[5",{"_index":9352,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[6",{"_index":9351,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[7",{"_index":9350,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[8",{"_index":9349,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(w[9",{"_index":9348,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rev8(x",{"_index":9520,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["reveal",{"_index":6983,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["revers",{"_index":3827,"title":{"29-14":{}},"name":{},"text":{"21":{},"29":{},"45":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["reverse_bits_in_byt",{"_index":9516,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["reverse_bits_in_byte(input[i+7..i",{"_index":9106,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["reverse_bits_in_byte(x",{"_index":9517,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["reverse_bits_in_byte(x(rs1)[i+7..i",{"_index":4657,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["revert",{"_index":1788,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"19":{},"25":{},"26":{},"50":{}},"component":{},"keyword":{}}],["review",{"_index":4543,"title":{},"name":{},"text":{"29":{},"49":{},"51":{}},"component":{},"keyword":{}}],["revis",{"_index":429,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"34":{},"38":{},"48":{},"51":{}},"component":{},"keyword":{}}],["revok",{"_index":2975,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rework",{"_index":5186,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["rf",{"_index":5574,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["rf.rf",{"_index":5901,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rf.~rf",{"_index":5895,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rf\\rfgmo)|(rfgmo\\rf",{"_index":5993,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rfc",{"_index":8949,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rfcon",{"_index":5994,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rfe",{"_index":5982,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rfgmo",{"_index":5986,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rfi",{"_index":5637,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["rgb",{"_index":7939,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ri,ri",{"_index":5738,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["rich",{"_index":3524,"title":{},"name":{},"text":{"17":{},"23":{},"31":{}},"component":{},"keyword":{}}],["richard",{"_index":1070,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["richer",{"_index":2365,"title":{},"name":{},"text":{"10":{},"35":{},"38":{},"51":{}},"component":{},"keyword":{}}],["rig",{"_index":10174,"title":{},"name":{},"text":{"62":{}},"component":{},"keyword":{}}],["right",{"_index":1566,"title":{"51-63":{}},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"31":{},"40":{},"45":{},"47":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["rightmost",{"_index":3487,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["rima",{"_index":38,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["ring",{"_index":1173,"title":{"49-118":{}},"name":{},"text":{"7":{},"29":{},"49":{}},"component":{},"keyword":{}}],["risc",{"_index":0,"title":{"1":{},"3":{},"6":{},"14":{},"15-1":{},"38-1":{},"38-2":{},"38-3":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["riscv",{"_index":5587,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["riscv.cat",{"_index":5918,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["riscv_mm",{"_index":5849,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["riscv_save_0>/<riscv_restore_0",{"_index":9952,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rise",{"_index":2944,"title":{},"name":{},"text":{"10":{},"28":{},"41":{},"48":{}},"component":{},"keyword":{}}],["rishiyur",{"_index":99,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["risk",{"_index":2467,"title":{},"name":{},"text":{"10":{},"21":{},"22":{},"38":{},"49":{},"54":{}},"component":{},"keyword":{}}],["rk'[0:3",{"_index":9399,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk0",{"_index":9423,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk1",{"_index":9422,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk2",{"_index":9421,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk3",{"_index":9420,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk4",{"_index":9415,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk5",{"_index":9416,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk6",{"_index":9417,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk7",{"_index":9418,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rk[0:3",{"_index":9398,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rkey",{"_index":9036,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rl",{"_index":1756,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"40":{},"41":{},"44":{},"48":{},"50":{},"54":{},"55":{}},"component":{},"keyword":{}}],["rl=1",{"_index":7580,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["rlb",{"_index":2790,"title":{},"name":{},"text":{"10":{},"21":{}},"component":{},"keyword":{}}],["rlist",{"_index":9982,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rlist=15",{"_index":9967,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rlist=4",{"_index":9974,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rlist=7",{"_index":9965,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rlist=8",{"_index":9976,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rlist=9",{"_index":9978,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rm",{"_index":4820,"title":{},"name":{},"text":{"30":{},"36":{},"37":{},"44":{},"58":{}},"component":{},"keyword":{}}],["rm=111",{"_index":6523,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["rmb",{"_index":5737,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["rmem",{"_index":6009,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rmm",{"_index":4826,"title":{},"name":{},"text":{"30":{},"37":{},"51":{},"59":{}},"component":{},"keyword":{}}],["rmw",{"_index":5711,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["rnd",{"_index":9056,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rnd=1",{"_index":9402,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rnd[0]==1",{"_index":9078,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rnd[3",{"_index":9063,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rnd[3:0",{"_index":9062,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rnds=1",{"_index":9262,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rne",{"_index":4821,"title":{},"name":{},"text":{"30":{},"37":{},"51":{},"59":{}},"component":{},"keyword":{}}],["rng",{"_index":6899,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rnmi",{"_index":2471,"title":{"16-1":{},"16-2":{},"16-3":{},"16-5":{}},"name":{"16":{}},"text":{"10":{},"11":{},"16":{},"20":{}},"component":{},"keyword":{}}],["rnu",{"_index":7699,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rnum",{"_index":6671,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["robert",{"_index":700,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["robust",{"_index":6761,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rod",{"_index":7703,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rodata",{"_index":3910,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["roger",{"_index":632,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["rogu",{"_index":6794,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["roi",{"_index":3656,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["rol",{"_index":4514,"title":{"29-51":{},"49-41":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rol32",{"_index":9522,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32((",{"_index":9432,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32((m13",{"_index":9396,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32((m3",{"_index":9395,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32((x",{"_index":9333,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(a",{"_index":9297,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(a1",{"_index":9309,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(b",{"_index":9303,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(f",{"_index":9305,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(i",{"_index":6722,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rol32(mix",{"_index":6644,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rol32(r1",{"_index":6712,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rol32(rol32(a",{"_index":9294,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(rol32(a1",{"_index":9308,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(so",{"_index":6641,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rol32(t_j(j",{"_index":9295,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rol32(x,n",{"_index":9523,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["role",{"_index":560,"title":{},"name":{},"text":{"4":{},"27":{},"49":{}},"component":{},"keyword":{}}],["rolw",{"_index":4515,"title":{"29-52":{},"49-42":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rom",{"_index":2361,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["roman",{"_index":5428,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["room",{"_index":2247,"title":{},"name":{},"text":{"9":{},"34":{},"52":{}},"component":{},"keyword":{}}],["root",{"_index":1830,"title":{"51-87":{},"51-88":{},"53-8":{}},"name":{},"text":{"8":{},"10":{},"26":{},"30":{},"37":{},"49":{},"51":{},"59":{}},"component":{},"keyword":{}}],["rop",{"_index":3045,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["ror",{"_index":4516,"title":{"29-53":{},"49-43":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["ror32(inb",{"_index":6694,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ror32(tmp1",{"_index":6683,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["ror64(x(rs1",{"_index":6706,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rori",{"_index":4517,"title":{"29-54":{},"49-44":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["roriw",{"_index":4518,"title":{"29-55":{},"49-45":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rorw",{"_index":4519,"title":{"29-56":{},"49-46":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rotat",{"_index":4480,"title":{"29-12":{},"49-93":{}},"name":{},"text":{"29":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["rotr(x,1",{"_index":9248,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,11",{"_index":9202,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,13",{"_index":9195,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,14",{"_index":9204,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,17",{"_index":9252,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,18",{"_index":9205,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,19",{"_index":9253,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,2",{"_index":9194,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,22",{"_index":9196,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,25",{"_index":9203,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,28",{"_index":9197,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,34",{"_index":9198,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,39",{"_index":9199,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,41",{"_index":9206,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,6",{"_index":9201,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,61",{"_index":9255,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,7",{"_index":9246,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,8",{"_index":9249,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rotr(x,n",{"_index":9209,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rough",{"_index":5794,"title":{},"name":{},"text":{"40":{},"64":{},"65":{}},"component":{},"keyword":{}}],["roughli",{"_index":4911,"title":{},"name":{},"text":{"31":{},"56":{}},"component":{},"keyword":{}}],["round",{"_index":929,"title":{"30-10":{},"51-15":{},"51-76":{},"58-3":{}},"name":{},"text":{"7":{},"12":{},"30":{},"34":{},"36":{},"37":{},"39":{},"43":{},"44":{},"49":{},"51":{},"52":{},"58":{},"59":{}},"component":{},"keyword":{}}],["round_key",{"_index":9430,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["round_key(rk0",{"_index":9426,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["round_key(rk1",{"_index":9427,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["round_key(rk2",{"_index":9428,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["round_key(rk3",{"_index":9429,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["round_key(x",{"_index":9431,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["rounder",{"_index":4833,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["roundkeyb[0",{"_index":9080,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["roundkeyb[1",{"_index":9082,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["roundkeyb[2",{"_index":9083,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["roundkeyb[3",{"_index":9084,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["roundkeyb[3:0",{"_index":9077,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["roundoff_signed(v",{"_index":7708,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["roundoff_signed(vs2[i",{"_index":8302,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["roundoff_signed(vs2[i],vs1[i",{"_index":8319,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["roundoff_unsigned(v",{"_index":7706,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["roundoff_unsigned(vs2[i",{"_index":8299,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["roundtointegr",{"_index":10122,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["roundtointegralexact",{"_index":10120,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["rout",{"_index":2699,"title":{},"name":{},"text":{"10":{},"15":{},"38":{}},"component":{},"keyword":{}}],["routin",{"_index":2507,"title":{},"name":{},"text":{"10":{},"18":{},"19":{},"31":{},"45":{},"49":{},"51":{},"53":{},"57":{}},"component":{},"keyword":{}}],["roux",{"_index":925,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["row",{"_index":5057,"title":{},"name":{},"text":{"31":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["rs",{"_index":3756,"title":{},"name":{},"text":{"19":{},"29":{},"45":{},"49":{}},"component":{},"keyword":{}}],["rs1",{"_index":1957,"title":{},"name":{},"text":{"8":{},"19":{},"26":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"39":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"58":{},"59":{},"61":{},"62":{},"63":{},"66":{}},"component":{},"keyword":{}}],["rs1,rs2",{"_index":4582,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["rs1,shamt",{"_index":4583,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["rs1/imm",{"_index":8046,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["rs1=0",{"_index":8593,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rs1=rs2=x0",{"_index":4212,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["rs1=x0",{"_index":1976,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"31":{},"45":{},"47":{},"48":{},"49":{},"51":{},"62":{},"65":{}},"component":{},"keyword":{}}],["rs1=x1",{"_index":6441,"title":{},"name":{},"text":{"45":{},"50":{}},"component":{},"keyword":{}}],["rs1=x5",{"_index":7506,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["rs1[4:0",{"_index":7814,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rs1_data",{"_index":4663,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rs1_val",{"_index":4585,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rs1×unsign",{"_index":5517,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["rs1≠x0",{"_index":1948,"title":{},"name":{},"text":{"8":{},"26":{},"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["rs1≠x0,fm=0",{"_index":6506,"title":{},"name":{},"text":{"47":{}},"component":{},"keyword":{}}],["rs2",{"_index":1952,"title":{},"name":{},"text":{"8":{},"26":{},"28":{},"29":{},"31":{},"34":{},"36":{},"37":{},"39":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"54":{},"55":{},"57":{},"58":{},"59":{},"61":{},"66":{}},"component":{},"keyword":{}}],["rs2!=x0",{"_index":7882,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rs2'",{"_index":5392,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["rs2+1",{"_index":9697,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["rs2,rs1,rd",{"_index":4682,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rs2/imm",{"_index":8030,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rs2=1",{"_index":10056,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["rs2=4",{"_index":10110,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["rs2=5",{"_index":10112,"title":{},"name":{},"text":{"58":{}},"component":{},"keyword":{}}],["rs2=x0",{"_index":2075,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"29":{},"31":{},"51":{}},"component":{},"keyword":{}}],["rs2=x2",{"_index":5046,"title":{},"name":{},"text":{"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["rs2=x3",{"_index":5048,"title":{},"name":{},"text":{"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["rs2=x4",{"_index":5050,"title":{},"name":{},"text":{"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["rs2=x5",{"_index":5052,"title":{},"name":{},"text":{"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["rs2[4:0",{"_index":6505,"title":{},"name":{},"text":{"47":{},"51":{}},"component":{},"keyword":{}}],["rs2_val",{"_index":4586,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["rs2c",{"_index":9816,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rs2d",{"_index":6522,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["rs2≠x0",{"_index":1949,"title":{},"name":{},"text":{"8":{},"26":{},"31":{}},"component":{},"keyword":{}}],["rs2≠x2",{"_index":5045,"title":{},"name":{},"text":{"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["rs3",{"_index":5361,"title":{},"name":{},"text":{"37":{},"44":{},"48":{}},"component":{},"keyword":{}}],["rs[i",{"_index":4607,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["rsd",{"_index":9775,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rsdc",{"_index":9808,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rsrveventu",{"_index":2935,"title":{},"name":{},"text":{"10":{},"26":{},"40":{}},"component":{},"keyword":{}}],["rsrvnone",{"_index":2933,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rsrvnoneventu",{"_index":2934,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rsw",{"_index":4169,"title":{"40-20":{}},"name":{},"text":{"26":{},"40":{},"41":{}},"component":{},"keyword":{}}],["rsw);ppo;[w",{"_index":5811,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["rtc",{"_index":2805,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rtl",{"_index":7090,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rtmp",{"_index":10167,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["rtz",{"_index":4823,"title":{},"name":{},"text":{"30":{},"37":{},"51":{},"58":{}},"component":{},"keyword":{}}],["rudimentari",{"_index":2356,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rule",{"_index":294,"title":{"40-3":{},"40-8":{},"40-9":{},"40-10":{},"40-11":{},"40-12":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"17":{},"21":{},"25":{},"26":{},"33":{},"38":{},"40":{},"41":{},"42":{},"48":{},"49":{},"51":{},"55":{},"56":{},"57":{},"62":{},"64":{},"67":{}},"component":{},"keyword":{}}],["rule/entri",{"_index":3837,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["rule13",{"_index":5698,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["rules/set",{"_index":3839,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["run",{"_index":1491,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"31":{},"33":{},"35":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"52":{},"66":{},"67":{}},"component":{},"keyword":{}}],["runtim",{"_index":2526,"title":{},"name":{},"text":{"10":{},"26":{},"27":{},"38":{},"39":{},"40":{},"45":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["rup",{"_index":4825,"title":{},"name":{},"text":{"30":{},"37":{},"51":{}},"component":{},"keyword":{}}],["ruslan",{"_index":58,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["russia",{"_index":6881,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["rv",{"_index":6179,"title":{},"name":{"44":{}},"text":{},"component":{},"keyword":{}}],["rv128",{"_index":5216,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["rv128i",{"_index":5154,"title":{},"name":{},"text":{"34":{},"38":{}},"component":{},"keyword":{}}],["rv32",{"_index":228,"title":{"57-6":{}},"name":{"45":{}},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"18":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"29":{},"31":{},"33":{},"36":{},"38":{},"43":{},"46":{},"47":{},"49":{},"50":{},"51":{},"55":{},"57":{},"58":{},"60":{},"61":{},"62":{}},"component":{},"keyword":{}}],["rv32/64g",{"_index":6178,"title":{"44":{}},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rv32/rv64",{"_index":6243,"title":{},"name":{},"text":{"44":{},"49":{},"50":{}},"component":{},"keyword":{}}],["rv32a",{"_index":4357,"title":{},"name":{},"text":{"27":{},"44":{},"48":{}},"component":{},"keyword":{}}],["rv32c",{"_index":4868,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rv32d",{"_index":3038,"title":{},"name":{},"text":{"10":{},"26":{},"44":{},"48":{},"58":{}},"component":{},"keyword":{}}],["rv32dc/rv64dc",{"_index":4964,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rv32e",{"_index":1504,"title":{"46":{},"46-1":{},"46-2":{}},"name":{"46":{}},"text":{"8":{},"10":{},"31":{},"34":{},"38":{},"42":{},"45":{},"46":{},"57":{}},"component":{},"keyword":{}}],["rv32e/64",{"_index":2344,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rv32e/rv64",{"_index":6498,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["rv32f",{"_index":6279,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv32fc",{"_index":4963,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rv32g",{"_index":6182,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rv32gc",{"_index":6195,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv32i",{"_index":1502,"title":{"45":{},"57-35":{}},"name":{},"text":{"8":{},"10":{},"31":{},"34":{},"38":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"57":{}},"component":{},"keyword":{}}],["rv32i/64i",{"_index":2345,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["rv32i/a",{"_index":6109,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["rv32i/e",{"_index":4873,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rv32i/rv64i",{"_index":6499,"title":{},"name":{},"text":{"46":{},"50":{}},"component":{},"keyword":{}}],["rv32i2",{"_index":6142,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32i2_m2_a2",{"_index":6123,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32i2_p2",{"_index":6139,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32i2p2",{"_index":6138,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32id",{"_index":6119,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32if",{"_index":6117,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32ifd",{"_index":6120,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32ifdzicsr",{"_index":6121,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32ifzicsr",{"_index":6118,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32im_zc",{"_index":9769,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rv32imacv",{"_index":6143,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32imaczicsr_zifencei",{"_index":6128,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32imavc",{"_index":6144,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv32imc",{"_index":9768,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rv32imcf",{"_index":9770,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rv32imf_zc",{"_index":9771,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rv32m",{"_index":6248,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv32q",{"_index":6326,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rv32zdinx",{"_index":10157,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["rv32zfh",{"_index":6344,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rv32zqinx",{"_index":10160,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["rv64",{"_index":1507,"title":{},"name":{"47":{}},"text":{"8":{},"9":{},"10":{},"12":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"36":{},"37":{},"38":{},"39":{},"43":{},"46":{},"49":{},"50":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{}},"component":{},"keyword":{}}],["rv64a",{"_index":4358,"title":{},"name":{},"text":{"27":{},"41":{},"44":{},"48":{}},"component":{},"keyword":{}}],["rv64c",{"_index":4869,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rv64d",{"_index":6324,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv64e",{"_index":1505,"title":{"46":{},"46-1":{},"46-2":{}},"name":{},"text":{"8":{},"10":{},"31":{},"34":{},"38":{},"42":{},"45":{},"46":{}},"component":{},"keyword":{}}],["rv64f",{"_index":6298,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv64g",{"_index":6183,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rv64gc",{"_index":6196,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv64gcv",{"_index":8684,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rv64gcv_zve64f",{"_index":8685,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rv64gcv_zve64f_zve32x_zvl128b",{"_index":8686,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["rv64i",{"_index":1503,"title":{"47":{}},"name":{},"text":{"8":{},"10":{},"31":{},"34":{},"38":{},"41":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["rv64i/e",{"_index":4874,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["rv64i1m1a1f1d1",{"_index":6141,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv64i1p0m1p0a1p0f1p0d1p0",{"_index":6140,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv64idv",{"_index":9554,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["rv64imafd",{"_index":6115,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv64izifencei_xargle_xbargl",{"_index":6135,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["rv64m",{"_index":6250,"title":{},"name":{},"text":{"44":{},"48":{}},"component":{},"keyword":{}}],["rv64q",{"_index":6343,"title":{},"name":{},"text":{"44":{},"58":{}},"component":{},"keyword":{}}],["rv64zfh",{"_index":6386,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rv64zqinx",{"_index":10159,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["rv64’",{"_index":372,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["rv8",{"_index":5445,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["rva",{"_index":9778,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["rvb",{"_index":6567,"title":{"49-87":{}},"name":{},"text":{},"component":{},"keyword":{}}],["rvc",{"_index":4862,"title":{"31-16":{},"49-85":{}},"name":{},"text":{"31":{},"50":{}},"component":{},"keyword":{}}],["rvg",{"_index":6193,"title":{},"name":{},"text":{"44":{}},"component":{},"keyword":{}}],["rvi",{"_index":4916,"title":{"49-83":{}},"name":{},"text":{"31":{},"49":{}},"component":{},"keyword":{}}],["rvk",{"_index":6566,"title":{"49-86":{}},"name":{},"text":{},"component":{},"keyword":{}}],["rvm",{"_index":6565,"title":{"49-84":{}},"name":{},"text":{},"component":{},"keyword":{}}],["rvtso",{"_index":2947,"title":{},"name":{},"text":{"10":{},"40":{},"51":{},"67":{}},"component":{},"keyword":{}}],["rvv",{"_index":4371,"title":{},"name":{},"text":{"27":{},"52":{}},"component":{},"keyword":{}}],["rvwmo",{"_index":334,"title":{"40":{},"48":{},"40-1":{},"40-3":{},"48-1":{}},"name":{"48":{}},"text":{"4":{},"10":{},"26":{},"28":{},"33":{},"34":{},"38":{},"40":{},"41":{},"45":{},"48":{},"51":{},"55":{},"62":{},"67":{}},"component":{},"keyword":{}}],["rvwmo—​i.",{"_index":2945,"title":{},"name":{},"text":{"10":{},"28":{}},"component":{},"keyword":{}}],["rw",{"_index":3847,"title":{},"name":{},"text":{"21":{},"28":{},"40":{}},"component":{},"keyword":{}}],["rw,rw",{"_index":5665,"title":{},"name":{},"text":{"40":{},"45":{}},"component":{},"keyword":{}}],["rw,w",{"_index":5556,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["rw,w/fenc",{"_index":5748,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["rx",{"_index":5396,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["ry",{"_index":5397,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["s",{"_index":420,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"33":{},"37":{},"40":{},"41":{},"43":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"59":{}},"component":{},"keyword":{}}],["s\"=1",{"_index":2370,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["s'equin",{"_index":736,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["s,u]se",{"_index":6775,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["s.~^gmo",{"_index":5840,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["s/h",{"_index":3058,"title":{},"name":{},"text":{"11":{},"17":{},"18":{},"23":{},"24":{},"25":{},"26":{},"27":{},"49":{}},"component":{},"keyword":{}}],["s/u",{"_index":3860,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["s0",{"_index":4943,"title":{"57-36":{},"57-37":{},"57-39":{},"57-40":{}},"name":{},"text":{"31":{},"40":{},"49":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["s0,88(sp",{"_index":9850,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s0,s0,a2",{"_index":5618,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s0,s0,a3",{"_index":5807,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s0,s0,a5",{"_index":5802,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s0,s0,t3",{"_index":5640,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s1",{"_index":4944,"title":{},"name":{},"text":{"31":{},"40":{},"49":{},"52":{},"53":{},"57":{},"64":{}},"component":{},"keyword":{}}],["s1,84(sp",{"_index":9854,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s1,s1,a2",{"_index":5678,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s10",{"_index":9668,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s10,48(sp);#cm.popretz(13",{"_index":9921,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s10,48(sp);#cm.push(13",{"_index":9878,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s11",{"_index":9673,"title":{"57-37":{}},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s11,44(sp);#cm.popretz(14",{"_index":9924,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s11,44(sp);#cm.push(14",{"_index":9881,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s2",{"_index":5558,"title":{"57-36":{}},"name":{},"text":{"40":{},"49":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["s2,0(s1",{"_index":5699,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s2,80(sp",{"_index":9834,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s3",{"_index":7119,"title":{"57-39":{}},"name":{},"text":{"49":{},"52":{},"53":{},"57":{}},"component":{},"keyword":{}}],["s3,76(sp",{"_index":9838,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s4",{"_index":9680,"title":{"57-40":{}},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s4,72(sp",{"_index":9842,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s4,s2,t2",{"_index":5647,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["s5",{"_index":9956,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s5,68(sp",{"_index":9858,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s6",{"_index":9664,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s6,64(sp",{"_index":9862,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s7",{"_index":9678,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s7,60(sp",{"_index":9866,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s8",{"_index":9679,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s8,56(sp",{"_index":9870,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s9",{"_index":9663,"title":{},"name":{},"text":{"53":{},"57":{}},"component":{},"keyword":{}}],["s9,52(sp",{"_index":9874,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["s=0",{"_index":3637,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["saarinen",{"_index":680,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{},"keyword":{}}],["sac",{"_index":8250,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["safe",{"_index":2132,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"30":{},"35":{},"40":{},"49":{},"52":{},"57":{}},"component":{},"keyword":{}}],["safeguard",{"_index":2746,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["safer",{"_index":3886,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["safeti",{"_index":1448,"title":{},"name":{},"text":{"7":{},"27":{},"49":{}},"component":{},"keyword":{}}],["sail",{"_index":972,"title":{"49-4":{},"49-129":{},"52-3":{},"52-69":{}},"name":{},"text":{"7":{},"29":{},"33":{},"41":{},"49":{},"52":{},"57":{},"61":{}},"component":{},"keyword":{}}],["sake",{"_index":8914,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["same",{"_index":369,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"66":{}},"component":{},"keyword":{}}],["same_addr[",{"_index":5885,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["same_addr[r",{"_index":5837,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["same_address",{"_index":5900,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["same_hart[",{"_index":5882,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["same_hart[r",{"_index":5845,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["sampl",{"_index":760,"title":{},"name":{},"text":{"7":{},"10":{},"17":{},"19":{},"28":{},"35":{},"40":{},"49":{},"64":{}},"component":{},"keyword":{}}],["sampler",{"_index":6985,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["samsung",{"_index":3437,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["sandbox",{"_index":4316,"title":{},"name":{},"text":{"27":{},"49":{}},"component":{},"keyword":{}}],["sanit",{"_index":6837,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["santa",{"_index":1210,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sarkar",{"_index":686,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["sat_by_forward",{"_index":6084,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["satisfactori",{"_index":6920,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["satisfi",{"_index":2967,"title":{"41-11":{},"41-12":{},"41-23":{}},"name":{},"text":{"10":{},"26":{},"27":{},"33":{},"40":{},"41":{},"48":{},"49":{},"56":{}},"component":{},"keyword":{}}],["satp",{"_index":328,"title":{"26-17":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"27":{}},"component":{},"keyword":{}}],["satp.asid",{"_index":4147,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["satp.mod",{"_index":2513,"title":{},"name":{},"text":{"10":{},"11":{},"26":{}},"component":{},"keyword":{}}],["satp.ppn",{"_index":4113,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["satp.ppn×pages",{"_index":4178,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["satur",{"_index":3218,"title":{"51-16":{},"51-74":{},"51-76":{}},"name":{},"text":{"12":{},"19":{},"51":{},"52":{}},"component":{},"keyword":{}}],["save",{"_index":2444,"title":{},"name":{},"text":{"10":{},"11":{},"16":{},"19":{},"26":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"45":{},"46":{},"49":{},"50":{},"51":{},"53":{},"55":{},"57":{}},"component":{},"keyword":{}}],["save/restor",{"_index":2584,"title":{},"name":{},"text":{"10":{},"19":{},"31":{},"57":{}},"component":{},"keyword":{}}],["saved/restor",{"_index":10044,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["saved_ssp",{"_index":7565,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["saxpi",{"_index":9530,"title":{"53-5":{}},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["saxpy(size_t",{"_index":9553,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["say",{"_index":5645,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sb",{"_index":1927,"title":{},"name":{},"text":{"8":{},"27":{},"44":{},"45":{},"47":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["sb_in",{"_index":6718,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sbe",{"_index":2515,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sbe=0",{"_index":2519,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sbe=1",{"_index":2520,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sbi",{"_index":579,"title":{},"name":{},"text":{"4":{},"8":{},"15":{},"19":{},"25":{},"26":{},"38":{}},"component":{},"keyword":{}}],["sbox",{"_index":4570,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["sbox_lookup",{"_index":7413,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sbox_lookup(x",{"_index":7414,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sbreak",{"_index":5191,"title":{},"name":{},"text":{"34":{},"45":{}},"component":{},"keyword":{}}],["sc",{"_index":2849,"title":{"41-14":{},"41-15":{},"41-20":{},"41-21":{}},"name":{},"text":{"10":{},"28":{},"40":{},"41":{},"48":{},"49":{},"54":{},"64":{}},"component":{},"keyword":{}}],["sc.aq",{"_index":4443,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["sc.aqrl",{"_index":5790,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sc.d",{"_index":4422,"title":{},"name":{},"text":{"28":{},"40":{},"44":{},"48":{}},"component":{},"keyword":{}}],["sc.w",{"_index":4420,"title":{},"name":{},"text":{"28":{},"40":{},"44":{},"48":{}},"component":{},"keyword":{}}],["sc.{w|d",{"_index":5717,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sc.{w|d}.aqrl",{"_index":5714,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sc.{w|d}.rl",{"_index":5723,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sc0003624",{"_index":3441,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["scalabl",{"_index":880,"title":{},"name":{},"text":{"7":{},"26":{},"40":{},"41":{},"48":{},"54":{}},"component":{},"keyword":{}}],["scalar",{"_index":1072,"title":{"49":{},"30-9":{},"30-14":{},"49-18":{},"49-86":{},"51-26":{},"51-118":{},"51-119":{},"52-7":{}},"name":{"49":{}},"text":{"7":{},"30":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["scalar/immedi",{"_index":9171,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["scale",{"_index":1239,"title":{"51-77":{}},"name":{},"text":{"7":{},"10":{},"28":{},"31":{},"36":{},"51":{},"54":{},"55":{},"57":{}},"component":{},"keyword":{}}],["scall",{"_index":5190,"title":{},"name":{},"text":{"34":{},"45":{}},"component":{},"keyword":{}}],["scarc",{"_index":5040,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["scatter",{"_index":4669,"title":{},"name":{},"text":{"29":{},"49":{},"51":{}},"component":{},"keyword":{}}],["scatter/gath",{"_index":7823,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["scaus",{"_index":331,"title":{"26-14":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["scenario",{"_index":2525,"title":{},"name":{},"text":{"10":{},"11":{},"18":{},"19":{},"26":{},"27":{},"40":{},"64":{}},"component":{},"keyword":{}}],["schedul",{"_index":4051,"title":{},"name":{},"text":{"25":{},"26":{},"29":{},"31":{},"45":{},"49":{},"52":{},"53":{}},"component":{},"keyword":{}}],["scheid",{"_index":111,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["schema",{"_index":2770,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["scheme",{"_index":458,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"27":{},"29":{},"31":{},"32":{},"34":{},"37":{},"38":{},"42":{},"43":{},"49":{},"50":{},"51":{},"59":{},"60":{}},"component":{},"keyword":{}}],["schindler",{"_index":1023,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["schmidt",{"_index":113,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["schwabe",{"_index":6826,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["scienc",{"_index":1114,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sclaimei",{"_index":3929,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sclreienum",{"_index":3928,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sclreipnum",{"_index":3926,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["scontext",{"_index":1556,"title":{},"name":{},"text":{"8":{},"12":{},"22":{}},"component":{},"keyword":{}}],["scope",{"_index":3527,"title":{"49-78":{}},"name":{},"text":{"17":{},"21":{},"26":{},"38":{},"45":{},"49":{}},"component":{},"keyword":{}}],["scott",{"_index":619,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["scounteren",{"_index":1555,"title":{"26-11":{}},"name":{},"text":{"8":{},"12":{},"26":{}},"component":{},"keyword":{}}],["scountinhibit",{"_index":3252,"title":{"17-2":{}},"name":{},"text":{"12":{},"17":{}},"component":{},"keyword":{}}],["scountovf",{"_index":3260,"title":{"17-3":{},"23-2":{}},"name":{},"text":{"12":{},"17":{},"23":{}},"component":{},"keyword":{}}],["scrambl",{"_index":4927,"title":{},"name":{},"text":{"31":{},"45":{},"51":{}},"component":{},"keyword":{}}],["scratch",{"_index":1470,"title":{"8-16":{},"10-22":{},"26-12":{}},"name":{},"text":{"8":{},"10":{},"12":{},"16":{},"26":{},"28":{}},"component":{},"keyword":{}}],["scratchpad",{"_index":2887,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["script",{"_index":7079,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sctrclr",{"_index":3672,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl",{"_index":3605,"title":{"19-3":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.",{"_index":3728,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.bpfrz",{"_index":3737,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.bpfrz=1",{"_index":3815,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.lcofifrz",{"_index":3736,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.lcofifrz=1",{"_index":3811,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.s=1",{"_index":3739,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctl.ste",{"_index":3734,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrctlh",{"_index":3660,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrdepth",{"_index":3608,"title":{"19-5":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrstatu",{"_index":3609,"title":{"19-6":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrstatus.frozen",{"_index":3639,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sctrstatus.frozen=1",{"_index":3684,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sc’",{"_index":4433,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["sd",{"_index":1877,"title":{},"name":{},"text":{"8":{},"10":{},"27":{},"31":{},"40":{},"44":{},"47":{},"48":{},"50":{},"53":{}},"component":{},"keyword":{}}],["sd=(fs==0b11",{"_index":2615,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sdsp",{"_index":5072,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["sdt",{"_index":1888,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["sdtrig",{"_index":2213,"title":{},"name":{},"text":{"9":{},"19":{},"22":{}},"component":{},"keyword":{}}],["se0",{"_index":3964,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["search",{"_index":586,"title":{},"name":{},"text":{"4":{},"7":{},"29":{},"41":{},"49":{}},"component":{},"keyword":{}}],["sec:hcaus",{"_index":3116,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["sec:henvcfg",{"_index":4040,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{},"keyword":{}}],["sec:herd",{"_index":5580,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sec:lrsc",{"_index":6514,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["sec:lrscseq",{"_index":5036,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["sec:menvcfg",{"_index":4039,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{},"keyword":{}}],["second",{"_index":1479,"title":{"8-28":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"21":{},"26":{},"28":{},"29":{},"31":{},"34":{},"38":{},"40":{},"41":{},"42":{},"48":{},"49":{},"50":{},"51":{},"53":{},"56":{},"57":{},"63":{}},"component":{},"keyword":{}}],["secondari",{"_index":4173,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["seconds/tick",{"_index":5249,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["secret",{"_index":4569,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["sect",{"_index":6765,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["section",{"_index":584,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"11":{},"15":{},"17":{},"19":{},"21":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"51":{},"52":{},"57":{},"59":{},"60":{},"62":{},"66":{}},"component":{},"keyword":{}}],["secur",{"_index":382,"title":{"10-28":{},"49-75":{},"49-111":{},"49-112":{},"52-15":{},"52-17":{}},"name":{},"text":{"4":{},"7":{},"10":{},"11":{},"12":{},"15":{},"21":{},"22":{},"26":{},"27":{},"33":{},"38":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{}},"component":{},"keyword":{}}],["see",{"_index":1676,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"20":{},"24":{},"25":{},"26":{},"27":{},"30":{},"31":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"60":{},"63":{}},"component":{},"keyword":{}}],["seed",{"_index":3222,"title":{"49-71":{},"49-76":{},"49-107":{}},"name":{},"text":{"12":{},"49":{}},"component":{},"keyword":{}}],["seed/key",{"_index":6923,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["seed/stat",{"_index":7002,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["seed[15:0",{"_index":6741,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["seed[31:0",{"_index":6929,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["seed[31:30",{"_index":6739,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["seed[31:30]=opst",{"_index":6743,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["seem",{"_index":3892,"title":{},"name":{},"text":{"21":{},"35":{},"40":{}},"component":{},"keyword":{}}],["seemingli",{"_index":5676,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["seen",{"_index":3885,"title":{},"name":{},"text":{"21":{},"31":{},"40":{},"64":{}},"component":{},"keyword":{}}],["segment",{"_index":3901,"title":{"51-45":{},"51-46":{},"51-47":{},"51-48":{}},"name":{},"text":{"21":{},"26":{},"45":{},"51":{}},"component":{},"keyword":{}}],["segment’",{"_index":7931,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["segreg",{"_index":2404,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sei",{"_index":1717,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["seie",{"_index":2665,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["seip",{"_index":519,"title":{},"name":{},"text":{"4":{},"10":{},"26":{}},"component":{},"keyword":{}}],["select",{"_index":823,"title":{"51-8":{},"51-134":{}},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"12":{},"17":{},"19":{},"23":{},"26":{},"30":{},"31":{},"37":{},"44":{},"45":{},"49":{},"51":{},"52":{},"57":{},"61":{}},"component":{},"keyword":{}}],["select/mov",{"_index":10163,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["selector",{"_index":2707,"title":{},"name":{},"text":{"10":{},"12":{},"17":{},"26":{}},"component":{},"keyword":{}}],["self",{"_index":472,"title":{"49-100":{}},"name":{},"text":{"4":{},"18":{},"41":{},"49":{}},"component":{},"keyword":{}}],["semant",{"_index":282,"title":{"29-3":{},"33-1":{}},"name":{},"text":{"4":{},"11":{},"26":{},"27":{},"28":{},"29":{},"33":{},"34":{},"37":{},"39":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"54":{},"55":{},"60":{},"64":{}},"component":{},"keyword":{}}],["semi",{"_index":6803,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["semiconductor",{"_index":3451,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["semihost",{"_index":6471,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["sens",{"_index":3876,"title":{},"name":{},"text":{"21":{},"28":{},"35":{},"40":{},"49":{},"51":{}},"component":{},"keyword":{}}],["sensibl",{"_index":5611,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["sensit",{"_index":2457,"title":{"42-1":{}},"name":{},"text":{"10":{},"33":{},"49":{}},"component":{},"keyword":{}}],["sensor",{"_index":6990,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sent",{"_index":4095,"title":{},"name":{},"text":{"26":{},"27":{},"40":{}},"component":{},"keyword":{}}],["senvcfg",{"_index":383,"title":{"26-16":{}},"name":{},"text":{"4":{},"8":{},"12":{},"22":{},"26":{},"27":{},"33":{}},"component":{},"keyword":{}}],["senvcfg.cbcf",{"_index":5111,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["senvcfg.cbi",{"_index":5107,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["senvcfg.cbz",{"_index":5115,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["senvcfg.lp",{"_index":3054,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["senvcfg.pmm",{"_index":4398,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["senvcfg.pmm/henvcfg.pmm",{"_index":4402,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["senvcfg.ss",{"_index":1792,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"50":{}},"component":{},"keyword":{}}],["separ",{"_index":581,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"31":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"42":{},"44":{},"45":{},"49":{},"51":{},"57":{},"60":{},"62":{}},"component":{},"keyword":{}}],["sepc",{"_index":1903,"title":{"26-13":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["sepc[0",{"_index":4098,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sepc[1",{"_index":4100,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sepc[1:0",{"_index":4099,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["septemb",{"_index":820,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sequenc",{"_index":567,"title":{"31-14":{},"57-32":{},"57-33":{},"57-35":{},"61-7":{}},"name":{},"text":{"4":{},"10":{},"12":{},"16":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"61":{},"65":{}},"component":{},"keyword":{}}],["sequenti",{"_index":4414,"title":{},"name":{},"text":{"28":{},"31":{},"40":{},"45":{},"48":{}},"component":{},"keyword":{}}],["seqz",{"_index":6433,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["seri",{"_index":4036,"title":{},"name":{},"text":{"23":{},"26":{},"30":{},"57":{},"65":{}},"component":{},"keyword":{}}],["serial",{"_index":5090,"title":{},"name":{},"text":{"33":{},"37":{},"45":{}},"component":{},"keyword":{}}],["seriou",{"_index":4378,"title":{},"name":{},"text":{"27":{},"49":{}},"component":{},"keyword":{}}],["serv",{"_index":2119,"title":{},"name":{},"text":{"8":{},"18":{},"19":{},"23":{},"25":{},"26":{},"40":{},"49":{}},"component":{},"keyword":{}}],["server",{"_index":867,"title":{},"name":{},"text":{"7":{},"15":{},"31":{},"38":{},"52":{}},"component":{},"keyword":{}}],["servic",{"_index":198,"title":{"26-34":{}},"name":{},"text":{"4":{},"10":{},"16":{},"19":{},"23":{},"25":{},"26":{},"40":{},"45":{}},"component":{},"keyword":{}}],["set",{"_index":139,"title":{"3":{},"6":{},"14":{},"44":{},"45":{},"46":{},"47":{},"56":{},"21-4":{},"31-16":{},"42-3":{},"42-6":{},"42-7":{},"42-8":{},"46-2":{},"49-83":{},"51-31":{},"51-35":{},"51-110":{},"51-111":{},"51-112":{},"51-113":{},"51-144":{},"52-29":{},"56-1":{}},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["set_velem(vd",{"_index":9041,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["setjmp",{"_index":7561,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["setjmp/longjmp",{"_index":3806,"title":{},"name":{},"text":{"19":{},"50":{}},"component":{},"keyword":{}}],["settabl",{"_index":3515,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["settl",{"_index":4125,"title":{},"name":{},"text":{"26":{},"28":{},"49":{},"52":{}},"component":{},"keyword":{}}],["setup",{"_index":3246,"title":{},"name":{},"text":{"12":{},"25":{}},"component":{},"keyword":{}}],["set—a",{"_index":4419,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["seven",{"_index":5584,"title":{},"name":{},"text":{"40":{},"51":{}},"component":{},"keyword":{}}],["sever",{"_index":1536,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"26":{},"28":{},"29":{},"31":{},"34":{},"38":{},"45":{},"49":{},"51":{},"52":{},"54":{},"57":{},"62":{},"64":{}},"component":{},"keyword":{}}],["sew",{"_index":4849,"title":{"51-36":{}},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["sew/2",{"_index":8090,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew/4",{"_index":8092,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew/8",{"_index":8095,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew/lmul",{"_index":7732,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew/lmul=16",{"_index":7735,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew/lmul=8",{"_index":9545,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["sew32",{"_index":9233,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sew64",{"_index":9234,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sew=16",{"_index":8687,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew=16b",{"_index":7718,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew=32",{"_index":7795,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["sew=32b",{"_index":7719,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew=64",{"_index":8145,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["sew=64b",{"_index":7721,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew=8",{"_index":7629,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sew=8b",{"_index":7717,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sewel",{"_index":684,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["sewmin",{"_index":7656,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sewmin/8",{"_index":7981,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sewmin/elen",{"_index":7655,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sewmin=8",{"_index":7657,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sewmin>xlen",{"_index":7982,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sext.b",{"_index":4520,"title":{"29-57":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sext.h",{"_index":4521,"title":{"29-58":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sext.w",{"_index":5000,"title":{},"name":{},"text":{"31":{},"47":{}},"component":{},"keyword":{}}],["sext_or_truncate_to_sew(x(vs1",{"_index":9099,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sfenc",{"_index":2095,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["sfence.inval.ir",{"_index":4275,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sfence.vm",{"_index":561,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["sfence.vma",{"_index":349,"title":{"27-14":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"27":{},"33":{},"40":{},"48":{}},"component":{},"keyword":{}}],["sfence.w.inv",{"_index":4274,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sgei",{"_index":1720,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sgeie",{"_index":2014,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sgeip",{"_index":1700,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sgemm",{"_index":9531,"title":{"53-6":{}},"name":{},"text":{},"component":{},"keyword":{}}],["sgemm_nn",{"_index":9590,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["sgemm_nn(size_t",{"_index":9555,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["sh",{"_index":988,"title":{},"name":{},"text":{"7":{},"8":{},"27":{},"42":{},"44":{},"45":{},"47":{},"48":{},"52":{}},"component":{},"keyword":{}}],["sh1add",{"_index":4522,"title":{"29-59":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sh1add.uw",{"_index":4523,"title":{"29-60":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sh2add",{"_index":4524,"title":{"29-61":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sh2add.uw",{"_index":4525,"title":{"29-62":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sh3add",{"_index":4526,"title":{"29-63":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sh3add.uw",{"_index":4527,"title":{"29-64":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sha",{"_index":1003,"title":{"52-15":{}},"name":{},"text":{"7":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["sha2",{"_index":6568,"title":{"49-90":{}},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sha256",{"_index":6867,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sha256sig0",{"_index":6546,"title":{"49-47":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sig0(rs1,rd",{"_index":6692,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sig1",{"_index":6547,"title":{"49-48":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sig1(rs1,rd",{"_index":6695,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sum0",{"_index":6548,"title":{"49-49":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sum0(rs1,rd",{"_index":6696,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sum1",{"_index":6549,"title":{"49-50":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha256sum1(rs1,rd",{"_index":6697,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha3",{"_index":4674,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["sha3/keccak",{"_index":6873,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512",{"_index":6869,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sha512sig0",{"_index":6556,"title":{"49-57":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig0(rs1",{"_index":6705,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig0h",{"_index":6550,"title":{"49-51":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig0h(rs2",{"_index":6698,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig0l",{"_index":6551,"title":{"49-52":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig0l(rs2",{"_index":6700,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig1",{"_index":6557,"title":{"49-58":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig1(rs1",{"_index":6707,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig1h",{"_index":6552,"title":{"49-53":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig1h(rs2",{"_index":6701,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig1l",{"_index":6553,"title":{"49-54":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sig1l(rs2",{"_index":6702,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum0",{"_index":6558,"title":{"49-59":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum0(rs1",{"_index":6708,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum0r",{"_index":6554,"title":{"49-55":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum0r(rs2",{"_index":6703,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum1",{"_index":6559,"title":{"49-60":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum1(rs1",{"_index":6709,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum1r",{"_index":6555,"title":{"49-56":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sha512sum1r(rs2",{"_index":6704,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shadow",{"_index":491,"title":{"11-4":{},"11-5":{},"11-6":{},"11-7":{},"50-4":{},"50-6":{},"50-8":{},"50-9":{},"50-11":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"23":{},"26":{},"45":{},"50":{},"51":{}},"component":{},"keyword":{}}],["shailend",{"_index":876,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["shake",{"_index":634,"title":{},"name":{},"text":{"5":{},"49":{}},"component":{},"keyword":{}}],["shake256",{"_index":7045,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shall",{"_index":1545,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"28":{},"33":{},"37":{},"38":{},"45":{},"49":{},"51":{},"52":{},"62":{},"63":{}},"component":{},"keyword":{}}],["shamt",{"_index":4544,"title":{},"name":{},"text":{"29":{},"31":{},"44":{},"49":{}},"component":{},"keyword":{}}],["shamt)[7..0",{"_index":6636,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shamt=0",{"_index":5016,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["shamt=31",{"_index":6486,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["shamt=7",{"_index":6488,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["shamt[4..0",{"_index":4661,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["shamt[5",{"_index":5015,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["shamt[5..0",{"_index":4662,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["shamt[5:0",{"_index":5014,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["shamt[5]=1",{"_index":4581,"title":{},"name":{},"text":{"29":{},"31":{},"49":{}},"component":{},"keyword":{}}],["shamt≠31",{"_index":6495,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["shamt≠7",{"_index":6496,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["shanbhogu",{"_index":688,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["shangmi",{"_index":6530,"title":{"49-13":{},"49-14":{},"49-17":{},"52-16":{},"52-17":{},"52-21":{},"52-22":{},"52-23":{}},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["shannon",{"_index":6752,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shape",{"_index":345,"title":{},"name":{},"text":{"4":{},"28":{},"49":{}},"component":{},"keyword":{}}],["share",{"_index":891,"title":{"41-7":{}},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"12":{},"21":{},"26":{},"28":{},"29":{},"31":{},"36":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"64":{}},"component":{},"keyword":{}}],["sheung",{"_index":877,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["shfli",{"_index":6859,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shghi",{"_index":6150,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["shift",{"_index":1812,"title":{"51-62":{},"51-63":{},"51-77":{},"52-37":{}},"name":{},"text":{"8":{},"10":{},"29":{},"30":{},"31":{},"36":{},"39":{},"45":{},"47":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["shifter",{"_index":2814,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["shiftrow",{"_index":6647,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["shlcofideleg",{"_index":181,"title":{},"name":{},"text":{"4":{},"8":{}},"component":{},"keyword":{}}],["shootdown",{"_index":4136,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["shor",{"_index":1385,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["short",{"_index":1489,"title":{},"name":{},"text":{"8":{},"10":{},"31":{},"41":{},"45":{},"51":{},"56":{},"61":{}},"component":{},"keyword":{}}],["shortag",{"_index":4017,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["shortcom",{"_index":10164,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["shortcut",{"_index":5912,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["shorten",{"_index":566,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["shorter",{"_index":4863,"title":{},"name":{},"text":{"31":{},"51":{}},"component":{},"keyword":{}}],["shortest",{"_index":2756,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["shorthand",{"_index":5173,"title":{},"name":{},"text":{"34":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["shot",{"_index":6577,"title":{"49-119":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["shouldn’t",{"_index":5244,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["show",{"_index":1835,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"26":{},"27":{},"30":{},"31":{},"35":{},"38":{},"40":{},"44":{},"45":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["shown",{"_index":1578,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"17":{},"26":{},"28":{},"30":{},"31":{},"37":{},"40":{},"43":{},"45":{},"51":{},"52":{},"53":{},"57":{},"58":{},"59":{},"66":{}},"component":{},"keyword":{}}],["shr",{"_index":9257,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["shr(x,10",{"_index":9254,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["shr(x,3",{"_index":9247,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["shr(x,6",{"_index":9256,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["shr(x,7",{"_index":9250,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["shrink",{"_index":7798,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["shub",{"_index":1397,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["shuffl",{"_index":8280,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["si",{"_index":1440,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"26":{},"40":{},"49":{}},"component":{},"keyword":{}}],["siam",{"_index":1400,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["side",{"_index":2604,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"15":{},"26":{},"27":{},"28":{},"29":{},"35":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"52":{},"54":{},"62":{}},"component":{},"keyword":{}}],["sideway",{"_index":4609,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["sie",{"_index":1689,"title":{"25-4":{},"26-9":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["sie.lcofi",{"_index":1894,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["sie.sei",{"_index":4092,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sie.ssi",{"_index":4094,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sie.sti",{"_index":4055,"title":{},"name":{},"text":{"25":{},"26":{}},"component":{},"keyword":{}}],["sie=spi",{"_index":2200,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sieh",{"_index":3930,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sig",{"_index":5851,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["sig0(w[1",{"_index":9238,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig0(w[2",{"_index":9240,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig0(w[3",{"_index":9242,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig0(w[4",{"_index":9244,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig0(x",{"_index":9245,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig1(w[14",{"_index":9237,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig1(w[15",{"_index":9239,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig1(w[16",{"_index":9241,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig1(w[17",{"_index":9243,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig1(x",{"_index":9251,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sig=00",{"_index":8429,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sig=01",{"_index":8427,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sig=1",{"_index":8428,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sig[msb",{"_index":8388,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sig_out[msb",{"_index":8389,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sigma0",{"_index":6622,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sigma1",{"_index":6623,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sign",{"_index":1939,"title":{"29-11":{},"51-91":{}},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"43":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["signal",{"_index":1706,"title":{"16-1":{}},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"20":{},"23":{},"25":{},"26":{},"30":{},"34":{},"37":{},"38":{},"40":{},"45":{},"49":{},"51":{},"58":{}},"component":{},"keyword":{}}],["signatur",{"_index":1423,"title":{},"name":{},"text":{"7":{},"49":{},"50":{}},"component":{},"keyword":{}}],["signed(v",{"_index":7709,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["signed(vs1[i",{"_index":8264,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["signed(vs2",{"_index":8222,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["signed(vs2[i",{"_index":8270,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["signed(x(rs2c",{"_index":9820,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["signed(x(rsdc",{"_index":9819,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["signed(x[rs1",{"_index":8267,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["signed/unsign",{"_index":8097,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["signed×sign",{"_index":5515,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["signextend(temp[31:0",{"_index":7577,"title":{},"name":{},"text":{"50":{},"55":{}},"component":{},"keyword":{}}],["signifi",{"_index":2763,"title":{},"name":{},"text":{"10":{},"30":{},"38":{},"51":{}},"component":{},"keyword":{}}],["signific",{"_index":1735,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"19":{},"22":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"45":{},"49":{},"51":{},"52":{},"57":{},"58":{}},"component":{},"keyword":{}}],["significand",{"_index":4790,"title":{},"name":{},"text":{"30":{},"37":{},"51":{},"58":{}},"component":{},"keyword":{}}],["significantli",{"_index":150,"title":{},"name":{},"text":{"4":{},"26":{},"31":{},"34":{},"49":{},"50":{},"56":{},"65":{}},"component":{},"keyword":{}}],["sigop",{"_index":1439,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sigsac",{"_index":1249,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["silenc",{"_index":7160,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["silent",{"_index":5796,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["simd",{"_index":2349,"title":{},"name":{},"text":{"10":{},"34":{},"42":{},"45":{},"48":{}},"component":{},"keyword":{}}],["similar",{"_index":1673,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"21":{},"25":{},"26":{},"29":{},"30":{},"31":{},"33":{},"36":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"60":{},"62":{},"65":{},"66":{}},"component":{},"keyword":{}}],["similarli",{"_index":1754,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"17":{},"19":{},"22":{},"23":{},"26":{},"27":{},"28":{},"31":{},"34":{},"38":{},"40":{},"41":{},"45":{},"47":{},"51":{},"54":{},"58":{},"66":{}},"component":{},"keyword":{}}],["simionato",{"_index":1203,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["simm",{"_index":8648,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["simm5",{"_index":8188,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["simm[2:0",{"_index":8649,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["simm[4:0",{"_index":8650,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["simpl",{"_index":908,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"15":{},"21":{},"26":{},"28":{},"29":{},"30":{},"31":{},"35":{},"37":{},"39":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"51":{},"55":{},"57":{},"60":{},"61":{},"63":{}},"component":{},"keyword":{}}],["simpler",{"_index":570,"title":{},"name":{},"text":{"4":{},"8":{},"26":{},"34":{},"38":{},"40":{},"41":{},"45":{},"49":{}},"component":{},"keyword":{}}],["simplest",{"_index":3496,"title":{},"name":{},"text":{"15":{},"45":{},"50":{},"51":{}},"component":{},"keyword":{}}],["simpli",{"_index":2124,"title":{},"name":{},"text":{"8":{},"10":{},"18":{},"19":{},"25":{},"26":{},"31":{},"37":{},"40":{},"41":{},"45":{},"48":{},"49":{},"51":{},"66":{},"67":{}},"component":{},"keyword":{}}],["simplic",{"_index":2647,"title":{},"name":{},"text":{"10":{},"15":{},"19":{},"26":{},"38":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["simplif",{"_index":4138,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["simplifi",{"_index":508,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"19":{},"21":{},"26":{},"28":{},"31":{},"34":{},"37":{},"38":{},"39":{},"42":{},"45":{},"51":{},"52":{},"60":{},"66":{}},"component":{},"keyword":{}}],["simul",{"_index":3485,"title":{},"name":{},"text":{"15":{},"38":{},"41":{}},"component":{},"keyword":{}}],["simulation/emul",{"_index":6481,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["simultan",{"_index":1714,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"40":{},"48":{},"49":{}},"component":{},"keyword":{}}],["singl",{"_index":1595,"title":{"37":{},"29-16":{},"37-5":{},"37-6":{},"37-7":{},"37-8":{},"37-9":{},"51-57":{},"51-62":{},"51-66":{},"51-69":{},"51-74":{},"51-75":{},"51-76":{},"51-77":{},"51-81":{},"51-83":{},"51-85":{},"51-96":{},"51-100":{},"51-102":{},"51-103":{},"51-104":{},"51-105":{}},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{}},"component":{},"keyword":{}}],["single—or",{"_index":10148,"title":{},"name":{},"text":{"59":{}},"component":{},"keyword":{}}],["singular",{"_index":6998,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sinh",{"_index":3587,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{},"keyword":{}}],["sinval",{"_index":4375,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["sinval.vma",{"_index":1612,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["sip",{"_index":1688,"title":{"25-4":{},"26-9":{}},"name":{},"text":{"8":{},"10":{},"12":{},"19":{},"25":{},"26":{},"62":{}},"component":{},"keyword":{}}],["sip.lcofip",{"_index":1893,"title":{},"name":{},"text":{"8":{},"19":{},"26":{}},"component":{},"keyword":{}}],["sip.seip",{"_index":4091,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sip.ssip",{"_index":4093,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sip.stip",{"_index":4054,"title":{},"name":{},"text":{"25":{},"26":{}},"component":{},"keyword":{}}],["sip/si",{"_index":1889,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["siph",{"_index":3931,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sireg",{"_index":2258,"title":{},"name":{},"text":{"9":{},"17":{},"19":{},"22":{}},"component":{},"keyword":{}}],["sireg*/siselect",{"_index":3719,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sireg/sireg2",{"_index":2250,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["sireg2",{"_index":2260,"title":{},"name":{},"text":{"9":{},"17":{},"19":{}},"component":{},"keyword":{}}],["sireg3",{"_index":2262,"title":{},"name":{},"text":{"9":{},"17":{},"19":{}},"component":{},"keyword":{}}],["sireg4",{"_index":2264,"title":{},"name":{},"text":{"9":{},"17":{},"19":{}},"component":{},"keyword":{}}],["sireg4/sireg5",{"_index":2252,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["sireg5",{"_index":2266,"title":{},"name":{},"text":{"9":{},"17":{},"19":{}},"component":{},"keyword":{}}],["sireg6",{"_index":2268,"title":{},"name":{},"text":{"9":{},"17":{},"19":{}},"component":{},"keyword":{}}],["siregi",{"_index":2272,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["siselect",{"_index":2249,"title":{},"name":{},"text":{"9":{},"17":{},"19":{},"22":{}},"component":{},"keyword":{}}],["siselect=0x200",{"_index":3680,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["sit",{"_index":5468,"title":{},"name":{},"text":{"38":{},"40":{}},"component":{},"keyword":{}}],["sitaram",{"_index":1435,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["site",{"_index":7510,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["situat",{"_index":1819,"title":{},"name":{},"text":{"8":{},"10":{},"22":{},"26":{},"40":{},"51":{},"53":{},"61":{}},"component":{},"keyword":{}}],["six",{"_index":2245,"title":{},"name":{},"text":{"9":{},"31":{},"40":{},"51":{},"57":{}},"component":{},"keyword":{}}],["sixteen",{"_index":2977,"title":{},"name":{},"text":{"10":{},"51":{},"52":{}},"component":{},"keyword":{}}],["size",{"_index":344,"title":{"57":{},"40-20":{},"51-143":{}},"name":{},"text":{"4":{},"8":{},"10":{},"19":{},"26":{},"27":{},"28":{},"29":{},"31":{},"33":{},"35":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"64":{}},"component":{},"keyword":{}}],["size_t",{"_index":7908,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["sizeof(xlen",{"_index":4655,"title":{},"name":{},"text":{"29":{},"49":{},"57":{}},"component":{},"keyword":{}}],["sizhuo",{"_index":705,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["skeleton",{"_index":5455,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["sketch",{"_index":5153,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["skinni",{"_index":1138,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["skip",{"_index":2122,"title":{},"name":{},"text":{"8":{},"15":{},"26":{},"36":{},"38":{},"50":{}},"component":{},"keyword":{}}],["sla",{"_index":4282,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sleep",{"_index":2868,"title":{},"name":{},"text":{"10":{},"35":{},"49":{}},"component":{},"keyword":{}}],["slice",{"_index":1111,"title":{},"name":{},"text":{"7":{},"10":{},"41":{},"49":{}},"component":{},"keyword":{}}],["slide",{"_index":6828,"title":{"51-120":{},"52-38":{}},"name":{},"text":{"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["slide1down",{"_index":7614,"title":{"51-125":{},"51-126":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["slide1up",{"_index":7613,"title":{"51-123":{},"51-124":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["slidedown",{"_index":7612,"title":{"51-122":{}},"name":{},"text":{},"component":{},"keyword":{}}],["slideup",{"_index":7611,"title":{"51-121":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["slight",{"_index":5023,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{},"keyword":{}}],["slightli",{"_index":409,"title":{},"name":{},"text":{"4":{},"10":{},"26":{},"31":{},"38":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["sll",{"_index":4716,"title":{},"name":{},"text":{"29":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["sll/srl",{"_index":4554,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["slli",{"_index":4547,"title":{},"name":{},"text":{"29":{},"31":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["slli.uw",{"_index":4528,"title":{"29-65":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["slliw",{"_index":6236,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["sllw",{"_index":6240,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["slot",{"_index":5453,"title":{},"name":{},"text":{"38":{},"45":{},"53":{}},"component":{},"keyword":{}}],["slow",{"_index":2758,"title":{},"name":{},"text":{"10":{},"19":{},"22":{},"28":{},"49":{}},"component":{},"keyword":{}}],["slower",{"_index":7694,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["slowli",{"_index":6463,"title":{},"name":{},"text":{"45":{},"51":{}},"component":{},"keyword":{}}],["slt",{"_index":6222,"title":{},"name":{},"text":{"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["slt/sltu",{"_index":4431,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["slti",{"_index":6216,"title":{},"name":{},"text":{"44":{},"45":{},"47":{},"48":{},"49":{},"53":{}},"component":{},"keyword":{}}],["sltiu",{"_index":6217,"title":{},"name":{},"text":{"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["sltu",{"_index":4733,"title":{},"name":{},"text":{"29":{},"44":{},"45":{},"47":{},"48":{},"49":{},"55":{}},"component":{},"keyword":{}}],["sm",{"_index":3533,"title":{},"name":{},"text":{"17":{},"42":{},"52":{}},"component":{},"keyword":{}}],["sm3",{"_index":6532,"title":{"49-14":{},"49-91":{},"52-17":{}},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sm3p0",{"_index":6560,"title":{"49-61":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sm3p0(rs1",{"_index":6711,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sm3p1",{"_index":6561,"title":{"49-62":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sm3p1(rs1",{"_index":6713,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sm4",{"_index":1165,"title":{"49-13":{},"49-91":{},"52-16":{}},"name":{},"text":{"7":{},"49":{},"52":{}},"component":{},"keyword":{}}],["sm4_round",{"_index":9474,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_round(x",{"_index":9475,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_round(x0",{"_index":9470,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_round(x1",{"_index":9471,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_round(x2",{"_index":9472,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_round(x3",{"_index":9473,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_sbox",{"_index":7432,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sm4_sbox(sb_in",{"_index":6719,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sm4_sbox(x",{"_index":7433,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sm4_sbox(x[15",{"_index":9528,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_sbox(x[23..16",{"_index":9527,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_sbox(x[31..24",{"_index":9526,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_sbox_tabl",{"_index":7162,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["sm4_subword",{"_index":9524,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_subword(b",{"_index":9425,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4_subword(x",{"_index":9525,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sm4ed",{"_index":6562,"title":{"49-63":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sm4k",{"_index":6563,"title":{"49-64":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["smaia",{"_index":3573,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["smaia/ssaia",{"_index":2205,"title":{},"name":{},"text":{"9":{},"17":{}},"component":{},"keyword":{}}],["small",{"_index":1125,"title":{},"name":{},"text":{"7":{},"10":{},"22":{},"30":{},"31":{},"35":{},"36":{},"38":{},"40":{},"41":{},"45":{},"46":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["smaller",{"_index":2330,"title":{},"name":{},"text":{"10":{},"26":{},"29":{},"30":{},"31":{},"37":{},"40":{},"46":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["smaller/larg",{"_index":4549,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["smallest",{"_index":2972,"title":{},"name":{},"text":{"10":{},"30":{},"49":{},"51":{}},"component":{},"keyword":{}}],["smalltalk",{"_index":762,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["smap",{"_index":3830,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["smap/smep",{"_index":3846,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["smcdeleg",{"_index":166,"title":{"17":{}},"name":{"17":{}},"text":{"4":{},"10":{},"17":{}},"component":{},"keyword":{}}],["smcdeleg/ssccfg",{"_index":3536,"title":{},"name":{},"text":{"17":{},"18":{}},"component":{},"keyword":{}}],["smcntrpmf",{"_index":164,"title":{"18":{}},"name":{"18":{}},"text":{"4":{},"17":{},"18":{}},"component":{},"keyword":{}}],["smcsrind",{"_index":2217,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["smcsrind/sscsrind",{"_index":162,"title":{"9":{}},"name":{},"text":{"4":{},"9":{},"17":{}},"component":{},"keyword":{}}],["smctr",{"_index":168,"title":{"19":{}},"name":{"19":{}},"text":{"4":{},"19":{}},"component":{},"keyword":{}}],["smctr/ssctr",{"_index":3691,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["smdbltrp",{"_index":167,"title":{"20":{}},"name":{"20":{}},"text":{"4":{},"10":{},"16":{},"20":{}},"component":{},"keyword":{}}],["smep",{"_index":3831,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["smepmp",{"_index":163,"title":{"21":{},"21-6":{}},"name":{"21":{}},"text":{"4":{},"10":{},"21":{}},"component":{},"keyword":{}}],["smith",{"_index":1375,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["smjkl",{"_index":6152,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["smmpm",{"_index":2794,"title":{"27-13":{}},"name":{},"text":{"10":{},"27":{}},"component":{},"keyword":{}}],["smnpm",{"_index":2783,"title":{"27-12":{}},"name":{},"text":{"10":{},"27":{}},"component":{},"keyword":{}}],["smoke",{"_index":6883,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["smp_load_acquir",{"_index":5741,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["smp_mb",{"_index":5730,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["smp_rmb",{"_index":5731,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["smp_store_releas",{"_index":5742,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["smp_wmb",{"_index":5732,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["smrnmi",{"_index":165,"title":{"16":{}},"name":{},"text":{"4":{},"10":{},"16":{},"20":{}},"component":{},"keyword":{}}],["smstateen",{"_index":160,"title":{},"name":{"22":{}},"text":{"4":{},"9":{},"17":{},"19":{},"22":{},"26":{},"57":{}},"component":{},"keyword":{}}],["smstateen/ssstateen",{"_index":3721,"title":{"22":{}},"name":{},"text":{"19":{},"22":{}},"component":{},"keyword":{}}],["smt",{"_index":5237,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["snan",{"_index":4812,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["snapshot",{"_index":5265,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["snez",{"_index":6436,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["snippet",{"_index":5629,"title":{},"name":{},"text":{"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["snoop",{"_index":5653,"title":{},"name":{},"text":{"40":{},"63":{}},"component":{},"keyword":{}}],["snooping/invalid",{"_index":10179,"title":{},"name":{},"text":{"63":{}},"component":{},"keyword":{}}],["soar",{"_index":761,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["soc",{"_index":6500,"title":{},"name":{},"text":{"46":{}},"component":{},"keyword":{}}],["societi",{"_index":905,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["soft",{"_index":5193,"title":{},"name":{},"text":{"34":{},"39":{}},"component":{},"keyword":{}}],["softwar",{"_index":207,"title":{"15-1":{},"21-6":{},"29-72":{},"33-17":{},"38-2":{},"52-8":{},"57-31":{},"57-32":{},"57-33":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"59":{},"60":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["software—i.",{"_index":10185,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["soi",{"_index":1275,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sole",{"_index":3083,"title":{},"name":{},"text":{"11":{},"22":{},"33":{},"38":{},"49":{},"62":{}},"component":{},"keyword":{}}],["solut",{"_index":3941,"title":{},"name":{},"text":{"22":{},"35":{},"40":{},"61":{}},"component":{},"keyword":{}}],["solvabl",{"_index":7073,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["someth",{"_index":5697,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["sometim",{"_index":301,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"38":{},"40":{},"41":{},"49":{},"52":{},"56":{},"66":{}},"component":{},"keyword":{}}],["somewhat",{"_index":5657,"title":{},"name":{},"text":{"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["soon",{"_index":3883,"title":{},"name":{},"text":{"21":{},"41":{}},"component":{},"keyword":{}}],["sophist",{"_index":5791,"title":{},"name":{},"text":{"40":{},"45":{}},"component":{},"keyword":{}}],["sought",{"_index":6958,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sourc",{"_index":435,"title":{"49":{},"19-8":{},"48-10":{},"49-15":{},"49-70":{},"49-72":{},"49-75":{},"49-99":{},"49-102":{},"49-110":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"19":{},"26":{},"28":{},"29":{},"30":{},"31":{},"34":{},"36":{},"37":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"61":{}},"component":{},"keyword":{}}],["source/destin",{"_index":8098,"title":{},"name":{},"text":{"51":{},"57":{}},"component":{},"keyword":{}}],["sp",{"_index":1016,"title":{"49-73":{},"49-108":{}},"name":{},"text":{"7":{},"31":{},"49":{},"53":{},"57":{}},"component":{},"keyword":{}}],["sp+=stack_adj",{"_index":10018,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["sp,sp",{"_index":7550,"title":{},"name":{},"text":{"50":{},"57":{}},"component":{},"keyword":{}}],["sp,sp,32",{"_index":9943,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["sp,sp,8",{"_index":7552,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["sp,sp,96",{"_index":9927,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["sp=x2",{"_index":5001,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["space",{"_index":493,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"26":{},"27":{},"28":{},"30":{},"31":{},"34":{},"36":{},"37":{},"38":{},"40":{},"42":{},"45":{},"46":{},"47":{},"49":{},"50":{},"51":{},"52":{},"57":{},"62":{},"66":{}},"component":{},"keyword":{}}],["space/bandwidth",{"_index":4753,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["space’",{"_index":4131,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sparc",{"_index":5461,"title":{},"name":{},"text":{"38":{},"45":{},"67":{}},"component":{},"keyword":{}}],["spars",{"_index":4222,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["spatial",{"_index":6478,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["speak",{"_index":4986,"title":{},"name":{},"text":{"31":{},"38":{},"40":{},"48":{}},"component":{},"keyword":{}}],["spec",{"_index":44,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"9":{},"19":{},"21":{},"23":{},"27":{},"29":{},"35":{},"37":{},"38":{},"45":{},"47":{},"51":{}},"component":{},"keyword":{}}],["special",{"_index":1015,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"17":{},"19":{},"26":{},"29":{},"30":{},"31":{},"37":{},"38":{},"40":{},"41":{},"44":{},"45":{},"47":{},"51":{},"52":{},"61":{}},"component":{},"keyword":{}}],["specialis",{"_index":6586,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["specialist",{"_index":6609,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["specif",{"_index":6,"title":{"41":{},"12-3":{},"41-1":{},"41-2":{},"49-4":{},"49-80":{},"49-106":{},"52-3":{},"61-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["specifi",{"_index":248,"title":{"28-1":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"22":{},"26":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"40":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"62":{},"63":{},"64":{},"66":{}},"component":{},"keyword":{}}],["spectr",{"_index":6792,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{},"keyword":{}}],["spectrum",{"_index":5551,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["specul",{"_index":355,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"26":{},"28":{},"33":{},"38":{},"40":{},"41":{},"45":{},"49":{},"50":{}},"component":{},"keyword":{}}],["speed",{"_index":532,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"26":{},"29":{},"40":{},"45":{},"49":{}},"component":{},"keyword":{}}],["speedup",{"_index":5658,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["spelp",{"_index":1884,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{}},"component":{},"keyword":{}}],["spent",{"_index":4455,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["spie",{"_index":600,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["spie=1",{"_index":2201,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["spike",{"_index":5443,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["spill",{"_index":7530,"title":{},"name":{},"text":{"50":{},"51":{},"53":{}},"component":{},"keyword":{}}],["spill/fil",{"_index":7873,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["spimm",{"_index":9793,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["spimm=0",{"_index":9975,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["spimm=1",{"_index":9977,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["spimm=2",{"_index":9979,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["spimm=3",{"_index":9966,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["spin",{"_index":5631,"title":{},"name":{},"text":{"40":{},"65":{}},"component":{},"keyword":{}}],["spin_lock(i",{"_index":5759,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["spin_unlock(i",{"_index":5758,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["spinlock",{"_index":4468,"title":{},"name":{},"text":{"28":{},"40":{}},"component":{},"keyword":{}}],["spinney",{"_index":690,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["spirit",{"_index":4067,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["spite",{"_index":10228,"title":{},"name":{},"text":{"67":{}},"component":{},"keyword":{}}],["splat",{"_index":8226,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["split",{"_index":4248,"title":{},"name":{},"text":{"26":{},"37":{},"41":{},"45":{},"51":{}},"component":{},"keyword":{}}],["sponsor",{"_index":3423,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["spontan",{"_index":6027,"title":{},"name":{},"text":{"41":{},"49":{}},"component":{},"keyword":{}}],["spp",{"_index":1636,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["spp=0",{"_index":1643,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["springer",{"_index":1100,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sptbr",{"_index":535,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["spur",{"_index":5426,"title":{},"name":{},"text":{"38":{},"45":{}},"component":{},"keyword":{}}],["spuriou",{"_index":2821,"title":{},"name":{},"text":{"10":{},"25":{},"37":{},"51":{}},"component":{},"keyword":{}}],["spurious",{"_index":2827,"title":{},"name":{},"text":{"10":{},"28":{}},"component":{},"keyword":{}}],["spv",{"_index":1633,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["spv=0",{"_index":1650,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["spvp",{"_index":1637,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["sqrt(v1",{"_index":9618,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["squar",{"_index":4815,"title":{"51-87":{},"51-88":{},"53-8":{}},"name":{},"text":{"30":{},"37":{},"49":{},"51":{},"59":{}},"component":{},"keyword":{}}],["sr",{"_index":1761,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{},"41":{},"49":{},"52":{},"67":{}},"component":{},"keyword":{}}],["sr[63..0",{"_index":6654,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sra",{"_index":6223,"title":{},"name":{},"text":{"44":{},"45":{},"47":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["srai",{"_index":4551,"title":{},"name":{},"text":{"29":{},"31":{},"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["sraiw",{"_index":6238,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["sram",{"_index":2894,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sraw",{"_index":6242,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["src",{"_index":7546,"title":{},"name":{},"text":{"50":{},"51":{},"53":{}},"component":{},"keyword":{}}],["src1",{"_index":8558,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["src2",{"_index":8559,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["src[i",{"_index":8612,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["src_reg",{"_index":6062,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["sreg",{"_index":10023,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["sret",{"_index":322,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"16":{},"26":{}},"component":{},"keyword":{}}],["srl",{"_index":4715,"title":{},"name":{},"text":{"29":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{}},"component":{},"keyword":{}}],["srl/sll",{"_index":4555,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["srli",{"_index":4552,"title":{},"name":{},"text":{"29":{},"31":{},"44":{},"45":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["srliw",{"_index":6237,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["srlw",{"_index":6241,"title":{},"name":{},"text":{"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["srmcfg",{"_index":3972,"title":{"26-35":{}},"name":{},"text":{"22":{},"26":{}},"component":{},"keyword":{}}],["sro",{"_index":3259,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["srw",{"_index":2256,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{},"keyword":{}}],["ss",{"_index":3070,"title":{},"name":{},"text":{"11":{},"17":{},"23":{},"25":{},"42":{}},"component":{},"keyword":{}}],["ss1",{"_index":9293,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ss2",{"_index":9296,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ssaia",{"_index":3970,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["ssamoswap",{"_index":3077,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["ssamoswap.d",{"_index":7543,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["ssamoswap.w",{"_index":7542,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["ssamoswap.w/d",{"_index":1794,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"27":{},"50":{}},"component":{},"keyword":{}}],["ssccfg",{"_index":2782,"title":{},"name":{},"text":{"10":{},"17":{}},"component":{},"keyword":{}}],["sscofpmf",{"_index":178,"title":{"23":{}},"name":{"23":{}},"text":{"4":{},"10":{},"17":{},"18":{},"19":{},"23":{},"26":{}},"component":{},"keyword":{}}],["sscratch",{"_index":1901,"title":{"26-12":{}},"name":{},"text":{"8":{},"12":{},"26":{}},"component":{},"keyword":{}}],["sscsrind",{"_index":2219,"title":{},"name":{},"text":{"9":{},"19":{},"22":{}},"component":{},"keyword":{}}],["ssctr",{"_index":3631,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["ssdbltrap",{"_index":2019,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["ssdbltrp",{"_index":179,"title":{"24":{}},"name":{"24":{}},"text":{"4":{},"8":{},"10":{},"24":{},"26":{}},"component":{},"keyword":{}}],["ssdef",{"_index":6148,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sse",{"_index":1787,"title":{"11-6":{}},"name":{},"text":{"8":{},"10":{},"19":{},"26":{}},"component":{},"keyword":{}}],["sseed",{"_index":2787,"title":{},"name":{},"text":{"10":{},"49":{}},"component":{},"keyword":{}}],["sseteienum",{"_index":3927,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sseteipnum",{"_index":3925,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["ssi",{"_index":1718,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["ssie",{"_index":2667,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["ssip",{"_index":2664,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["ssnpm",{"_index":1779,"title":{"27-11":{}},"name":{},"text":{"8":{},"26":{},"27":{}},"component":{},"keyword":{}}],["ssp",{"_index":3040,"title":{"11-5":{},"50-6":{},"50-10":{}},"name":{},"text":{"11":{},"12":{},"49":{},"50":{}},"component":{},"keyword":{}}],["ssp=ra",{"_index":7588,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["sspm",{"_index":4390,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["sspopchk",{"_index":3084,"title":{},"name":{},"text":{"11":{},"27":{},"50":{}},"component":{},"keyword":{}}],["sspush",{"_index":3074,"title":{},"name":{},"text":{"11":{},"27":{},"50":{}},"component":{},"keyword":{}}],["sspush/c.sspush/sspopchk/c.sspopchk/ssamoswap.w/d",{"_index":3104,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["ssqosid",{"_index":176,"title":{"26-34":{}},"name":{},"text":{"4":{},"22":{},"26":{}},"component":{},"keyword":{}}],["ssrdp",{"_index":7541,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["ssstateen",{"_index":2307,"title":{},"name":{},"text":{"9":{},"22":{}},"component":{},"keyword":{}}],["sstateen",{"_index":3946,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sstateen0",{"_index":3268,"title":{},"name":{},"text":{"12":{},"22":{},"57":{}},"component":{},"keyword":{}}],["sstateen1",{"_index":3269,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["sstateen2",{"_index":3270,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["sstateen3",{"_index":3271,"title":{},"name":{},"text":{"12":{},"22":{}},"component":{},"keyword":{}}],["sstateen4",{"_index":3992,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sstateen5",{"_index":3994,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sstateen6",{"_index":3996,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sstateen7",{"_index":3998,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sstatu",{"_index":562,"title":{"26-2":{},"26-3":{},"26-4":{},"26-5":{},"26-6":{},"26-7":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"22":{},"24":{},"26":{},"33":{}},"component":{},"keyword":{}}],["sstatus.f",{"_index":1866,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sstatus.mxr",{"_index":1911,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sstatus.sdt",{"_index":2480,"title":{},"name":{},"text":{"10":{},"24":{}},"component":{},"keyword":{}}],["sstatus.spp",{"_index":1638,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sstatus.sum",{"_index":1910,"title":{},"name":{},"text":{"8":{},"21":{}},"component":{},"keyword":{}}],["sstatus.v",{"_index":1876,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["sstatus[10:9",{"_index":7636,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sstatush",{"_index":3942,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["sstc",{"_index":177,"title":{"25":{}},"name":{"25":{}},"text":{"4":{},"8":{},"10":{},"25":{}},"component":{},"keyword":{}}],["st",{"_index":4410,"title":{},"name":{"28":{},"29":{},"31":{},"36":{},"37":{},"39":{},"43":{},"51":{},"67":{}},"text":{"49":{}},"component":{},"keyword":{}}],["stabl",{"_index":6181,"title":{},"name":{},"text":{"44":{},"49":{}},"component":{},"keyword":{}}],["stack",{"_index":506,"title":{"10-8":{},"11-4":{},"11-5":{},"11-6":{},"11-7":{},"15-1":{},"19-20":{},"31-4":{},"50-4":{},"50-6":{},"50-8":{},"50-9":{},"50-11":{},"57-28":{}},"name":{},"text":{"4":{},"10":{},"11":{},"12":{},"15":{},"19":{},"26":{},"31":{},"34":{},"41":{},"45":{},"50":{},"53":{},"57":{}},"component":{},"keyword":{}}],["stack_adj",{"_index":9777,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["stack_adj_bas",{"_index":9988,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["stack_switch",{"_index":7582,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["stage",{"_index":289,"title":{"8-30":{},"27-15":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"49":{},"57":{}},"component":{},"keyword":{}}],["staircas",{"_index":1309,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["stale",{"_index":2963,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"33":{}},"component":{},"keyword":{}}],["stall",{"_index":2851,"title":{},"name":{},"text":{"10":{},"26":{},"35":{},"40":{},"53":{},"56":{},"65":{}},"component":{},"keyword":{}}],["stand",{"_index":4592,"title":{},"name":{},"text":{"29":{},"30":{},"31":{},"48":{}},"component":{},"keyword":{}}],["standalon",{"_index":5474,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["standard",{"_index":362,"title":{"51":{},"42-5":{},"42-9":{},"49-18":{},"49-101":{},"51-136":{},"51-137":{},"53-9":{},"59-6":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"64":{},"66":{}},"component":{},"keyword":{}}],["standardis",{"_index":6598,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["starnet",{"_index":3450,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["start",{"_index":3217,"title":{"51-14":{}},"name":{},"text":{"12":{},"22":{},"23":{},"29":{},"30":{},"31":{},"35":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{}},"component":{},"keyword":{}}],["startup",{"_index":6462,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["starvat",{"_index":4462,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["stat",{"_index":5240,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["state",{"_index":142,"title":{"32":{},"9-5":{},"10-15":{},"11-2":{},"11-3":{},"11-6":{},"19-13":{},"22-1":{},"22-2":{},"26-6":{},"33-18":{},"36-1":{},"37-1":{},"41-5":{},"41-6":{},"41-7":{},"47-1":{},"49-115":{},"51-18":{},"51-19":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"26":{},"29":{},"30":{},"31":{},"32":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"60":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["stateen",{"_index":3948,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["stateen0",{"_index":3963,"title":{},"name":{},"text":{"22":{},"57":{}},"component":{},"keyword":{}}],["statement",{"_index":2210,"title":{},"name":{},"text":{"9":{},"28":{},"49":{}},"component":{},"keyword":{}}],["static",{"_index":3033,"title":{},"name":{},"text":{"10":{},"31":{},"34":{},"36":{},"37":{},"38":{},"41":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["statist",{"_index":4292,"title":{},"name":{},"text":{"26":{},"49":{}},"component":{},"keyword":{}}],["statu",{"_index":158,"title":{"12":{},"62":{},"8-3":{},"8-13":{},"8-25":{},"10-7":{},"10-14":{},"19-6":{},"26-2":{},"33-18":{},"37-2":{},"51-5":{},"51-6":{},"51-17":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"15":{},"16":{},"19":{},"23":{},"26":{},"33":{},"34":{},"37":{},"44":{},"45":{},"49":{},"51":{},"60":{},"62":{}},"component":{},"keyword":{}}],["status",{"_index":6740,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["stay",{"_index":5706,"title":{},"name":{},"text":{"40":{},"45":{}},"component":{},"keyword":{}}],["stce",{"_index":1771,"title":{},"name":{},"text":{"8":{},"10":{},"25":{}},"component":{},"keyword":{}}],["stcond",{"_index":5952,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["std",{"_index":727,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ste",{"_index":3636,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["steel",{"_index":1204,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["stefan",{"_index":101,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["step",{"_index":2850,"title":{"41-27":{}},"name":{},"text":{"10":{},"26":{},"30":{},"41":{},"49":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["steve",{"_index":126,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["sti",{"_index":1719,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["stick",{"_index":4024,"title":{},"name":{},"text":{"23":{},"40":{}},"component":{},"keyword":{}}],["sticki",{"_index":3856,"title":{},"name":{},"text":{"21":{},"23":{}},"component":{},"keyword":{}}],["stie",{"_index":2666,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["still",{"_index":494,"title":{},"name":{},"text":{"4":{},"8":{},"11":{},"12":{},"15":{},"21":{},"26":{},"27":{},"28":{},"30":{},"35":{},"36":{},"37":{},"40":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["stimecmp",{"_index":4042,"title":{"25-2":{}},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["stimecmp/stimecmph",{"_index":4060,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["stimecmph",{"_index":4048,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["stip",{"_index":2642,"title":{},"name":{},"text":{"10":{},"25":{},"26":{}},"component":{},"keyword":{}}],["stip/sti",{"_index":4053,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["stipul",{"_index":2748,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["stitch",{"_index":3690,"title":{},"name":{},"text":{"19":{},"50":{}},"component":{},"keyword":{}}],["stoc",{"_index":1407,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["stochast",{"_index":6885,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["stop",{"_index":475,"title":{},"name":{},"text":{"4":{},"26":{},"45":{}},"component":{},"keyword":{}}],["stopei",{"_index":3968,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["stopi",{"_index":3814,"title":{},"name":{},"text":{"19":{},"22":{}},"component":{},"keyword":{}}],["stopper",{"_index":6992,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["storag",{"_index":2362,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"30":{},"32":{},"51":{},"52":{},"59":{},"67":{}},"component":{},"keyword":{}}],["store",{"_index":1477,"title":{"67":{},"8-22":{},"28-3":{},"31-3":{},"31-4":{},"31-5":{},"36-3":{},"37-5":{},"41-11":{},"41-16":{},"41-17":{},"41-18":{},"41-19":{},"41-20":{},"41-22":{},"43-1":{},"45-12":{},"47-5":{},"51-37":{},"51-46":{},"51-47":{},"51-48":{},"59-1":{}},"name":{},"text":{"8":{},"10":{},"11":{},"19":{},"21":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"53":{},"55":{},"56":{},"57":{},"59":{},"60":{},"63":{},"64":{},"67":{}},"component":{},"keyword":{}}],["store.~pair",{"_index":5844,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["store/amo",{"_index":1678,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"33":{}},"component":{},"keyword":{}}],["store/amo/ss",{"_index":3087,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["store_continu",{"_index":6037,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["store_ea",{"_index":6053,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["store_ea(kind",{"_index":6034,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["store_memv",{"_index":6054,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["store_memv(mem_valu",{"_index":6036,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["storecondit",{"_index":5825,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["storeconditional)).^po",{"_index":5898,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["storenorm",{"_index":5859,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["stores/satisfi",{"_index":6095,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["str",{"_index":7911,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["straddl",{"_index":2064,"title":{},"name":{},"text":{"8":{},"51":{}},"component":{},"keyword":{}}],["straightforward",{"_index":2956,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"31":{},"40":{},"45":{},"51":{},"66":{}},"component":{},"keyword":{}}],["strain",{"_index":3943,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["strategi",{"_index":6576,"title":{"49-117":{}},"name":{},"text":{"49":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["strcmp",{"_index":4536,"title":{"29-74":{},"53-9":{}},"name":{},"text":{"29":{},"53":{}},"component":{},"keyword":{}}],["strcmp(const",{"_index":9622,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["strcpi",{"_index":4556,"title":{},"name":{},"text":{"29":{},"51":{}},"component":{},"keyword":{}}],["strcpy(char",{"_index":8568,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["stream",{"_index":5222,"title":{},"name":{},"text":{"35":{},"38":{},"40":{},"45":{},"48":{},"49":{},"50":{},"63":{},"64":{}},"component":{},"keyword":{}}],["strength",{"_index":6771,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["strengthen",{"_index":5751,"title":{},"name":{},"text":{"40":{},"41":{},"67":{}},"component":{},"keyword":{}}],["stretch",{"_index":944,"title":{},"name":{},"text":{"7":{},"31":{}},"component":{},"keyword":{}}],["strict",{"_index":5251,"title":{},"name":{},"text":{"35":{},"38":{},"50":{},"51":{}},"component":{},"keyword":{}}],["stricter",{"_index":2632,"title":{},"name":{},"text":{"10":{},"26":{},"34":{},"40":{}},"component":{},"keyword":{}}],["strictli",{"_index":202,"title":{},"name":{},"text":{"4":{},"10":{},"31":{},"40":{}},"component":{},"keyword":{}}],["stride",{"_index":7599,"title":{"51-41":{},"51-42":{},"51-44":{},"51-46":{},"51-47":{}},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["strike",{"_index":5656,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["string",{"_index":585,"title":{},"name":{},"text":{"4":{},"10":{},"29":{},"42":{},"49":{},"51":{},"57":{}},"component":{},"keyword":{}}],["stringent",{"_index":7517,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["stripmin",{"_index":7598,"title":{"51-36":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["strlen",{"_index":4535,"title":{"29-73":{}},"name":{},"text":{"29":{},"51":{}},"component":{},"keyword":{}}],["strlen(const",{"_index":7909,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["strncpi",{"_index":8572,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["strncpy(char",{"_index":8571,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["strong",{"_index":2950,"title":{},"name":{},"text":{"10":{},"26":{},"40":{},"49":{}},"component":{},"keyword":{}}],["stronger",{"_index":4439,"title":{},"name":{},"text":{"28":{},"38":{},"40":{},"41":{},"62":{}},"component":{},"keyword":{}}],["strongli",{"_index":2831,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"40":{},"50":{},"51":{},"62":{}},"component":{},"keyword":{}}],["structur",{"_index":377,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"16":{},"26":{},"27":{},"28":{},"33":{},"38":{},"40":{},"45":{},"49":{},"50":{},"51":{},"55":{},"64":{}},"component":{},"keyword":{}}],["structures—includ",{"_index":3039,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["stval",{"_index":1649,"title":{"26-15":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{},"27":{}},"component":{},"keyword":{}}],["stval’",{"_index":4102,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["stvec",{"_index":518,"title":{"26-8":{}},"name":{},"text":{"4":{},"8":{},"12":{},"26":{},"27":{}},"component":{},"keyword":{}}],["style",{"_index":3048,"title":{},"name":{},"text":{"11":{},"15":{},"28":{},"38":{},"41":{},"49":{},"50":{},"52":{}},"component":{},"keyword":{}}],["sub",{"_index":4709,"title":{},"name":{},"text":{"29":{},"31":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"61":{}},"component":{},"keyword":{}}],["subarray",{"_index":7922,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["subblock",{"_index":2874,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["subbyt",{"_index":6648,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["subdivid",{"_index":5477,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["subfield",{"_index":2415,"title":{},"name":{},"text":{"10":{},"12":{},"34":{},"45":{}},"component":{},"keyword":{}}],["subhadeep",{"_index":1119,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["subject",{"_index":2022,"title":{"27-8":{}},"name":{},"text":{"8":{},"11":{},"22":{},"23":{},"26":{},"27":{},"30":{},"33":{},"40":{},"41":{},"48":{},"49":{},"52":{}},"component":{},"keyword":{}}],["subkey",{"_index":9129,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["submatrix",{"_index":9597,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["submiss",{"_index":1042,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["submit",{"_index":9734,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["subnorm",{"_index":4738,"title":{"30-6":{},"37-4":{}},"name":{},"text":{"30":{},"36":{},"37":{},"51":{},"58":{}},"component":{},"keyword":{}}],["subroutin",{"_index":4870,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{},"keyword":{}}],["subscript",{"_index":7767,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["subsect",{"_index":6017,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["subsequ",{"_index":1855,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"30":{},"31":{},"33":{},"38":{},"40":{},"45":{},"48":{},"51":{},"52":{},"56":{},"62":{},"63":{},"64":{},"67":{}},"component":{},"keyword":{}}],["subset",{"_index":1745,"title":{"42-11":{},"49-77":{}},"name":{},"text":{"8":{},"10":{},"12":{},"17":{},"19":{},"26":{},"27":{},"28":{},"33":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"59":{}},"component":{},"keyword":{}}],["subspac",{"_index":2859,"title":{},"name":{},"text":{"10":{},"31":{},"45":{},"47":{}},"component":{},"keyword":{}}],["substanti",{"_index":2563,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"51":{},"60":{}},"component":{},"keyword":{}}],["substitut",{"_index":1541,"title":{},"name":{},"text":{"8":{},"9":{},"19":{},"52":{}},"component":{},"keyword":{}}],["subsum",{"_index":525,"title":{},"name":{},"text":{"4":{},"26":{},"28":{},"40":{},"41":{}},"component":{},"keyword":{}}],["subsumpt",{"_index":5797,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["subsystem",{"_index":1494,"title":{},"name":{},"text":{"8":{},"27":{},"38":{}},"component":{},"keyword":{}}],["subtl",{"_index":5635,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["subtli",{"_index":5684,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["subtract",{"_index":4548,"title":{"51-57":{},"51-60":{},"51-74":{},"51-75":{}},"name":{},"text":{"29":{},"30":{},"31":{},"37":{},"41":{},"45":{},"51":{},"59":{},"61":{}},"component":{},"keyword":{}}],["subtrahend",{"_index":8357,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["subvers",{"_index":3049,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["subw",{"_index":5032,"title":{},"name":{},"text":{"31":{},"44":{},"47":{},"48":{},"49":{}},"component":{},"keyword":{}}],["subword",{"_index":2873,"title":{},"name":{},"text":{"10":{},"49":{},"52":{},"54":{}},"component":{},"keyword":{}}],["succ",{"_index":6225,"title":{},"name":{},"text":{"44":{},"45":{},"47":{}},"component":{},"keyword":{}}],["succ=0",{"_index":6490,"title":{},"name":{},"text":{"45":{},"47":{},"65":{}},"component":{},"keyword":{}}],["succe",{"_index":2503,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"33":{},"40":{},"41":{},"48":{}},"component":{},"keyword":{}}],["succeed",{"_index":4264,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["success",{"_index":2936,"title":{"28-3":{}},"name":{},"text":{"10":{},"21":{},"26":{},"28":{},"34":{},"40":{},"41":{},"48":{},"49":{},"51":{},"55":{}},"component":{},"keyword":{}}],["successfulli",{"_index":3890,"title":{},"name":{},"text":{"21":{},"40":{},"45":{},"49":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["successor",{"_index":1749,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"33":{},"40":{},"41":{},"45":{},"65":{}},"component":{},"keyword":{}}],["successor=rw",{"_index":6468,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["succinctli",{"_index":6113,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["succ≠0",{"_index":6492,"title":{},"name":{},"text":{"45":{},"47":{}},"component":{},"keyword":{}}],["such",{"_index":1656,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"35":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"64":{},"66":{},"67":{}},"component":{},"keyword":{}}],["sucsrind",{"_index":2311,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["suffer",{"_index":4423,"title":{},"name":{},"text":{"28":{},"35":{}},"component":{},"keyword":{}}],["suffic",{"_index":2076,"title":{},"name":{},"text":{"8":{},"10":{},"16":{},"26":{},"28":{},"35":{},"40":{},"51":{},"59":{}},"component":{},"keyword":{}}],["suffici",{"_index":2003,"title":{},"name":{},"text":{"8":{},"9":{},"12":{},"19":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"38":{},"40":{},"45":{},"49":{},"51":{},"55":{}},"component":{},"keyword":{}}],["suffix",{"_index":4539,"title":{},"name":{},"text":{"29":{},"38":{},"45":{},"47":{},"51":{},"52":{}},"component":{},"keyword":{}}],["suggest",{"_index":136,"title":{"49-127":{}},"name":{},"text":{"2":{},"5":{},"11":{},"26":{},"29":{},"34":{},"40":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["suit",{"_index":1197,"title":{"49-10":{},"49-11":{},"49-12":{},"49-13":{},"49-14":{},"49-16":{},"49-17":{},"52-14":{},"52-15":{},"52-16":{},"52-17":{},"52-18":{},"52-19":{},"52-20":{},"52-21":{},"52-22":{},"52-23":{}},"name":{},"text":{"7":{},"40":{},"41":{},"49":{},"52":{}},"component":{},"keyword":{}}],["suitabl",{"_index":1112,"title":{},"name":{},"text":{"7":{},"10":{},"26":{},"28":{},"38":{},"49":{},"61":{},"66":{}},"component":{},"keyword":{}}],["suite.cfm",{"_index":1200,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sum",{"_index":442,"title":{"51-103":{},"51-104":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{},"29":{},"30":{},"31":{},"33":{},"37":{},"45":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["sum(sign",{"_index":8525,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sum(zero",{"_index":8523,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sum0",{"_index":6624,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sum0(a",{"_index":9191,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sum0(x",{"_index":9193,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sum1",{"_index":6625,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["sum1(",{"_index":9189,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sum1(x",{"_index":9200,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["sum=0",{"_index":2509,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["sum=1",{"_index":2511,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["sum_i",{"_index":8561,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sumio",{"_index":1130,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["summar",{"_index":515,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"39":{},"42":{},"62":{}},"component":{},"keyword":{}}],["summari",{"_index":2587,"title":{"50-5":{}},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["summat",{"_index":4610,"title":{},"name":{},"text":{"29":{},"51":{}},"component":{},"keyword":{}}],["sumop",{"_index":7836,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sumop[4:0",{"_index":7839,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sunar",{"_index":1215,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["superflu",{"_index":4474,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["superpag",{"_index":1438,"title":{},"name":{},"text":{"7":{},"26":{}},"component":{},"keyword":{}}],["superposit",{"_index":7053,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["superscalar",{"_index":5309,"title":{},"name":{},"text":{"37":{},"45":{},"60":{}},"component":{},"keyword":{}}],["supersed",{"_index":236,"title":{},"name":{},"text":{"4":{},"11":{},"34":{},"40":{},"41":{}},"component":{},"keyword":{}}],["superset",{"_index":2011,"title":{},"name":{},"text":{"8":{},"38":{},"45":{},"52":{},"57":{}},"component":{},"keyword":{}}],["supervisor",{"_index":169,"title":{"25":{},"26":{},"8-2":{},"8-13":{},"8-14":{},"8-15":{},"8-16":{},"8-17":{},"8-18":{},"8-19":{},"8-20":{},"9-3":{},"9-4":{},"17-2":{},"19-3":{},"19-4":{},"19-5":{},"19-6":{},"19-12":{},"23-2":{},"25-1":{},"25-2":{},"25-4":{},"25-7":{},"26-1":{},"26-2":{},"26-8":{},"26-9":{},"26-10":{},"26-12":{},"26-13":{},"26-14":{},"26-15":{},"26-16":{},"26-17":{},"26-18":{},"26-19":{},"26-35":{},"42-6":{}},"name":{"26":{}},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"33":{},"38":{},"42":{},"45":{},"50":{},"51":{}},"component":{},"keyword":{}}],["supervisor/hypervisor",{"_index":3532,"title":{},"name":{},"text":{"17":{}},"component":{},"keyword":{}}],["supm",{"_index":4391,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["supplant",{"_index":10202,"title":{},"name":{},"text":{"65":{}},"component":{},"keyword":{}}],["supplement",{"_index":1686,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["supplementari",{"_index":6579,"title":{"49-128":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["suppli",{"_index":500,"title":{},"name":{},"text":{"4":{},"8":{},"26":{},"27":{},"31":{},"37":{},"51":{},"58":{}},"component":{},"keyword":{}}],["support",{"_index":402,"title":{"8":{},"10-13":{},"10-40":{},"25-10":{},"49-129":{},"52-69":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"59":{},"60":{},"61":{},"62":{},"63":{},"67":{}},"component":{},"keyword":{}}],["suppos",{"_index":2445,"title":{},"name":{},"text":{"10":{},"11":{},"22":{},"40":{},"51":{}},"component":{},"keyword":{}}],["suppress",{"_index":2373,"title":{},"name":{},"text":{"10":{},"62":{}},"component":{},"keyword":{}}],["supv",{"_index":4041,"title":{},"name":{},"text":{"24":{}},"component":{},"keyword":{}}],["sure",{"_index":3905,"title":{},"name":{},"text":{"21":{},"40":{}},"component":{},"keyword":{}}],["surfac",{"_index":3844,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["surpris",{"_index":4891,"title":{},"name":{},"text":{"31":{},"40":{}},"component":{},"keyword":{}}],["surround",{"_index":2406,"title":{},"name":{},"text":{"10":{},"28":{},"41":{}},"component":{},"keyword":{}}],["survey",{"_index":1430,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["suscept",{"_index":7067,"title":{},"name":{},"text":{"49":{},"50":{}},"component":{},"keyword":{}}],["susmit",{"_index":685,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["suspend",{"_index":5447,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["sv",{"_index":6129,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sv32",{"_index":1506,"title":{"26-20":{}},"name":{},"text":{"8":{},"10":{},"26":{},"42":{}},"component":{},"keyword":{}}],["sv32pte",{"_index":2502,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sv32x4",{"_index":1839,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["sv39",{"_index":425,"title":{"26-23":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"27":{},"42":{}},"component":{},"keyword":{}}],["sv39x4",{"_index":1827,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["sv48",{"_index":426,"title":{"26-25":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"27":{},"42":{}},"component":{},"keyword":{}}],["sv48x4",{"_index":1828,"title":{},"name":{},"text":{"8":{},"27":{}},"component":{},"keyword":{}}],["sv57",{"_index":413,"title":{"26-27":{}},"name":{},"text":{"4":{},"8":{},"26":{},"27":{}},"component":{},"keyword":{}}],["sv57x4",{"_index":414,"title":{},"name":{},"text":{"4":{},"8":{},"27":{}},"component":{},"keyword":{}}],["sv59",{"_index":6130,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["sv64",{"_index":4121,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["svade",{"_index":170,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["svadu",{"_index":174,"title":{"26-32":{}},"name":{},"text":{"4":{},"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["svc",{"_index":6474,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["svinval",{"_index":173,"title":{"26-31":{}},"name":{},"text":{"4":{},"26":{}},"component":{},"keyword":{}}],["svnapot",{"_index":171,"title":{"26-29":{}},"name":{},"text":{"4":{},"11":{},"26":{}},"component":{},"keyword":{}}],["svpbmt",{"_index":172,"title":{"26-30":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"26":{}},"component":{},"keyword":{}}],["svvptc",{"_index":175,"title":{"26-33":{}},"name":{},"text":{"4":{},"26":{}},"component":{},"keyword":{}}],["sw",{"_index":1762,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"31":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"57":{}},"component":{},"keyword":{}}],["swap",{"_index":1560,"title":{"55":{},"50-11":{}},"name":{},"text":{"8":{},"10":{},"19":{},"22":{},"26":{},"28":{},"37":{},"38":{},"40":{},"50":{},"51":{},"52":{},"55":{},"62":{}},"component":{},"keyword":{}}],["swap0",{"_index":9705,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["swap1",{"_index":9706,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["swappabl",{"_index":7617,"title":{"51-135":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["sweeney",{"_index":692,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["swing",{"_index":9727,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["switch",{"_index":1874,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"32":{},"33":{},"35":{},"37":{},"38":{},"49":{},"50":{},"51":{},"57":{},"60":{},"65":{}},"component":{},"keyword":{}}],["switch(byt",{"_index":10010,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["switch(xlen",{"_index":10048,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["switzerland",{"_index":1320,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["swsp",{"_index":5070,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["sxl",{"_index":2427,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sxlen",{"_index":2274,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"26":{},"50":{}},"component":{},"keyword":{}}],["sxlen..xlen",{"_index":4075,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sxlen=32",{"_index":2483,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["sxlen=64",{"_index":4068,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["sxlen=mxlen",{"_index":2485,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["sxlen≥uxlen",{"_index":219,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["symbol",{"_index":777,"title":{},"name":{},"text":{"7":{},"50":{}},"component":{},"keyword":{}}],["symmetr",{"_index":3804,"title":{},"name":{},"text":{"19":{},"49":{}},"component":{},"keyword":{}}],["symposium",{"_index":815,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["sync",{"_index":5719,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["synchron",{"_index":249,"title":{"40-10":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"18":{},"19":{},"26":{},"28":{},"35":{},"38":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"54":{},"55":{},"62":{},"63":{},"64":{}},"component":{},"keyword":{}}],["synopsi",{"_index":4571,"title":{},"name":{},"text":{"29":{},"30":{},"33":{},"49":{},"52":{},"57":{},"61":{}},"component":{},"keyword":{}}],["syntact",{"_index":5545,"title":{"40-11":{},"48-3":{}},"name":{},"text":{"40":{},"41":{},"48":{},"61":{},"62":{},"66":{}},"component":{},"keyword":{}}],["syntax",{"_index":4542,"title":{},"name":{},"text":{"29":{},"33":{},"40":{},"45":{},"51":{},"52":{},"57":{},"58":{},"66":{}},"component":{},"keyword":{}}],["synthes",{"_index":3686,"title":{"51-129":{}},"name":{},"text":{"19":{},"29":{},"30":{},"37":{},"45":{},"51":{}},"component":{},"keyword":{}}],["synthesi",{"_index":879,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["synthet",{"_index":10166,"title":{},"name":{},"text":{"61":{}},"component":{},"keyword":{}}],["sys/asm.h",{"_index":4703,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["syst",{"_index":1240,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["system",{"_index":392,"title":{"10-35":{},"26-20":{},"26-23":{},"26-25":{},"26-27":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"31":{},"32":{},"33":{},"34":{},"36":{},"38":{},"40":{},"41":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"63":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["system/360",{"_index":954,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["system’",{"_index":3859,"title":{},"name":{},"text":{"21":{},"27":{},"28":{}},"component":{},"keyword":{}}],["szreg",{"_index":4706,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["szreg(a1",{"_index":4723,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["s{b|h|w|d",{"_index":5710,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["s{b|h|w|d}.rl",{"_index":5786,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t",{"_index":831,"title":{},"name":{},"text":{"7":{},"10":{},"34":{},"49":{},"51":{},"53":{}},"component":{},"keyword":{}}],["t0",{"_index":2674,"title":{},"name":{},"text":{"10":{},"28":{},"29":{},"31":{},"40":{},"45":{},"49":{},"50":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["t0,11f48",{"_index":9936,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["t0::tn",{"_index":9510,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["t0[9",{"_index":2676,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["t1",{"_index":2675,"title":{"49-113":{}},"name":{},"text":{"10":{},"28":{},"30":{},"40":{},"45":{},"49":{},"51":{},"52":{},"53":{},"55":{}},"component":{},"keyword":{}}],["t1,0(s0",{"_index":5562,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t1,0(s1",{"_index":5600,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t1,0(s2",{"_index":5615,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t1,1",{"_index":5560,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t1,4(s1",{"_index":5808,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t1[9",{"_index":2677,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["t2",{"_index":4727,"title":{"49-114":{}},"name":{},"text":{"29":{},"30":{},"40":{},"45":{},"49":{},"52":{},"53":{},"55":{}},"component":{},"keyword":{}}],["t2,0(s0",{"_index":5565,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t2,0(s1",{"_index":5638,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t2,2",{"_index":5564,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t2,a0,a0",{"_index":5646,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t3",{"_index":5627,"title":{"49-115":{}},"name":{},"text":{"40":{},"45":{},"49":{},"53":{}},"component":{},"keyword":{}}],["t3,0(s0",{"_index":5569,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t3,3",{"_index":5567,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t3,a1,a1",{"_index":5639,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t3,a2,a2",{"_index":5650,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t4",{"_index":6432,"title":{},"name":{},"text":{"45":{},"53":{}},"component":{},"keyword":{}}],["t4,0(s0",{"_index":5563,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t4,4",{"_index":5561,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t5",{"_index":9578,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["t5,0(s0",{"_index":5570,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t5,5",{"_index":5568,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["t6",{"_index":9593,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["t_j(j",{"_index":9329,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ta",{"_index":7646,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["tabl",{"_index":291,"title":{"21-4":{},"57-47":{},"57-49":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"17":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"59":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["table[255",{"_index":7415,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["table_address[xlen",{"_index":10049,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["tablewalk",{"_index":4170,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["tabul",{"_index":6890,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tackl",{"_index":6791,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tag",{"_index":1446,"title":{},"name":{},"text":{"7":{},"8":{},"26":{},"27":{},"36":{},"41":{},"45":{}},"component":{},"keyword":{}}],["tail",{"_index":4083,"title":{"51-10":{},"51-30":{}},"name":{},"text":{"26":{},"50":{},"51":{},"52":{},"53":{},"55":{},"56":{},"57":{}},"component":{},"keyword":{}}],["tail(x",{"_index":7772,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["tail.count",{"_index":9721,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["tail.ptr",{"_index":9719,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["take",{"_index":1542,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"18":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"49":{},"51":{},"52":{},"57":{},"60":{},"61":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["taken",{"_index":1635,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"19":{},"25":{},"26":{},"28":{},"33":{},"38":{},"39":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"57":{},"58":{},"64":{}},"component":{},"keyword":{}}],["taken/not",{"_index":3698,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["tamper",{"_index":3826,"title":{},"name":{},"text":{"21":{},"49":{},"50":{}},"component":{},"keyword":{}}],["target",{"_index":2744,"title":{"19-9":{}},"name":{},"text":{"10":{},"11":{},"19":{},"26":{},"27":{},"30":{},"31":{},"34":{},"38":{},"40":{},"41":{},"44":{},"45":{},"49":{},"50":{},"52":{},"57":{},"63":{},"64":{},"66":{}},"component":{},"keyword":{}}],["target_address",{"_index":10046,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["target_address[xlen",{"_index":10052,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["tariq",{"_index":653,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["task",{"_index":3520,"title":{},"name":{},"text":{"16":{},"26":{},"34":{},"38":{},"49":{},"52":{},"56":{},"63":{}},"component":{},"keyword":{}}],["tassiaux",{"_index":1257,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["taylor",{"_index":115,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{},"keyword":{}}],["tc",{"_index":4047,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["tdata1",{"_index":3395,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["tdata1.type=2",{"_index":5096,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["tdata1.type=6",{"_index":5093,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["tdata2",{"_index":3396,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["tdata3",{"_index":3397,"title":{},"name":{},"text":{"12":{}},"component":{},"keyword":{}}],["team",{"_index":4773,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["techdoc",{"_index":1260,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["technic",{"_index":1267,"title":{},"name":{},"text":{"7":{},"40":{},"49":{}},"component":{},"keyword":{}}],["techniqu",{"_index":837,"title":{},"name":{},"text":{"7":{},"8":{},"26":{},"29":{},"31":{},"33":{},"37":{},"40":{},"45":{},"49":{},"50":{}},"component":{},"keyword":{}}],["technolog",{"_index":982,"title":{},"name":{},"text":{"7":{},"38":{}},"component":{},"keyword":{}}],["temp",{"_index":7554,"title":{},"name":{},"text":{"50":{},"51":{},"55":{}},"component":{},"keyword":{}}],["temp0",{"_index":9698,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["temp1",{"_index":9700,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["temp[31:0",{"_index":7576,"title":{},"name":{},"text":{"50":{},"55":{}},"component":{},"keyword":{}}],["temperatur",{"_index":7011,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["templat",{"_index":2858,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["tempor",{"_index":6479,"title":{"64":{}},"name":{},"text":{"45":{},"51":{},"64":{}},"component":{},"keyword":{}}],["temporari",{"_index":3416,"title":{},"name":{},"text":{"12":{},"21":{},"45":{},"49":{},"51":{},"53":{},"57":{},"61":{}},"component":{},"keyword":{}}],["temporarili",{"_index":1943,"title":{},"name":{},"text":{"8":{},"10":{},"21":{},"26":{},"49":{},"56":{},"65":{}},"component":{},"keyword":{}}],["tempt",{"_index":8484,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["ten",{"_index":3924,"title":{},"name":{},"text":{"22":{},"26":{},"40":{}},"component":{},"keyword":{}}],["tend",{"_index":4774,"title":{},"name":{},"text":{"30":{},"40":{},"44":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["tension",{"_index":4218,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["tent",{"_index":2347,"title":{},"name":{},"text":{"10":{},"51":{}},"component":{},"keyword":{}}],["terapag",{"_index":4227,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["term",{"_index":1573,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"21":{},"26":{},"27":{},"31":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{},"48":{},"49":{},"50":{},"51":{},"57":{},"64":{}},"component":{},"keyword":{}}],["termin",{"_index":2380,"title":{},"name":{},"text":{"10":{},"26":{},"29":{},"38":{},"40":{},"41":{},"45":{},"51":{},"56":{}},"component":{},"keyword":{}}],["terminolog",{"_index":2877,"title":{"15-1":{},"38-1":{},"49-101":{}},"name":{},"text":{"10":{},"15":{},"41":{},"49":{},"51":{}},"component":{},"keyword":{}}],["ternari",{"_index":6871,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["tero",{"_index":7007,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["terpstra",{"_index":117,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["test",{"_index":1057,"title":{"40-2":{},"49-112":{},"49-113":{},"49-121":{},"49-127":{}},"name":{},"text":{"7":{},"15":{},"28":{},"29":{},"40":{},"41":{},"49":{},"50":{},"52":{},"61":{},"66":{}},"component":{},"keyword":{}}],["tests/litmu",{"_index":5586,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["text",{"_index":1677,"title":{},"name":{},"text":{"8":{},"15":{},"21":{},"23":{},"27":{},"29":{},"34":{},"38":{},"40":{},"52":{},"53":{}},"component":{},"keyword":{}}],["tf32",{"_index":4799,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["that’",{"_index":3906,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["themselv",{"_index":1549,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"28":{},"38":{},"40":{},"49":{}},"component":{},"keyword":{}}],["theoret",{"_index":6516,"title":{},"name":{},"text":{"48":{},"49":{}},"component":{},"keyword":{}}],["theori",{"_index":1147,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["therebi",{"_index":3092,"title":{},"name":{},"text":{"11":{},"19":{},"26":{},"31":{},"50":{}},"component":{},"keyword":{}}],["therefor",{"_index":2309,"title":{},"name":{},"text":{"9":{},"10":{},"26":{},"27":{},"31":{},"36":{},"40":{},"41":{},"45":{},"48":{},"49":{},"52":{},"57":{},"66":{}},"component":{},"keyword":{}}],["therein",{"_index":8955,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["thereof",{"_index":4253,"title":{},"name":{},"text":{"26":{},"40":{},"41":{},"48":{}},"component":{},"keyword":{}}],["there’",{"_index":7015,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["thermal",{"_index":6889,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["thin",{"_index":3484,"title":{},"name":{},"text":{"15":{},"40":{}},"component":{},"keyword":{}}],["thing",{"_index":4460,"title":{},"name":{},"text":{"28":{},"40":{},"41":{}},"component":{},"keyword":{}}],["think",{"_index":6022,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["third",{"_index":3399,"title":{},"name":{},"text":{"12":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["thirti",{"_index":5218,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["thoma",{"_index":119,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"49":{}},"component":{},"keyword":{}}],["thorn",{"_index":121,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["thornton",{"_index":956,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["those",{"_index":1562,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"33":{},"38":{},"39":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"51":{},"52":{},"60":{},"64":{}},"component":{},"keyword":{}}],["though",{"_index":1658,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"19":{},"22":{},"26":{},"27":{},"30":{},"35":{},"38":{},"40":{},"44":{},"45":{},"49":{},"51":{},"52":{},"60":{},"66":{}},"component":{},"keyword":{}}],["thought",{"_index":3086,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["thousand",{"_index":5436,"title":{},"name":{},"text":{"38":{},"40":{},"49":{}},"component":{},"keyword":{}}],["thread",{"_index":2418,"title":{},"name":{},"text":{"10":{},"12":{},"15":{},"17":{},"22":{},"26":{},"32":{},"35":{},"36":{},"38":{},"40":{},"41":{},"45":{},"46":{},"51":{},"55":{},"63":{}},"component":{},"keyword":{}}],["threat",{"_index":3820,"title":{"21-2":{}},"name":{},"text":{"21":{},"49":{}},"component":{},"keyword":{}}],["three",{"_index":2130,"title":{},"name":{},"text":{"8":{},"10":{},"15":{},"26":{},"28":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"40":{},"45":{},"49":{},"51":{},"52":{},"55":{}},"component":{},"keyword":{}}],["threshold",{"_index":6994,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["through",{"_index":273,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"17":{},"19":{},"21":{},"22":{},"26":{},"30":{},"34":{},"37":{},"38":{},"40":{},"44":{},"47":{},"48":{},"49":{},"50":{},"51":{},"54":{},"57":{},"58":{}},"component":{},"keyword":{}}],["throughout",{"_index":4321,"title":{},"name":{},"text":{"27":{},"33":{},"49":{},"52":{}},"component":{},"keyword":{}}],["throughput",{"_index":7805,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["throwback",{"_index":6989,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["thu",{"_index":2066,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"18":{},"19":{},"25":{},"26":{},"28":{},"29":{},"31":{},"38":{},"46":{},"50":{},"52":{}},"component":{},"keyword":{}}],["thumb",{"_index":4895,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["thumb2",{"_index":4899,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["ti",{"_index":2905,"title":{},"name":{},"text":{"10":{},"15":{},"30":{},"37":{},"45":{}},"component":{},"keyword":{}}],["tick",{"_index":2797,"title":{},"name":{},"text":{"10":{},"35":{}},"component":{},"keyword":{}}],["tighter",{"_index":5487,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["tightli",{"_index":2904,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tile",{"_index":6418,"title":{},"name":{},"text":{"45":{},"53":{}},"component":{},"keyword":{}}],["till",{"_index":7556,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["time",{"_index":147,"title":{"8-9":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"15":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"30":{},"33":{},"34":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"44":{},"45":{},"49":{},"50":{},"51":{},"52":{},"56":{},"57":{},"61":{},"62":{},"63":{},"65":{}},"component":{},"keyword":{}}],["timecmp",{"_index":2817,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{},"keyword":{}}],["timefram",{"_index":4279,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["timeh",{"_index":2723,"title":{},"name":{},"text":{"10":{},"12":{},"44":{}},"component":{},"keyword":{}}],["timeout",{"_index":2555,"title":{},"name":{},"text":{"10":{},"56":{}},"component":{},"keyword":{}}],["timer",{"_index":312,"title":{"25":{},"10-30":{},"25-2":{},"25-7":{},"26-10":{},"35-1":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"15":{},"25":{},"26":{},"35":{},"38":{},"44":{},"62":{}},"component":{},"keyword":{}}],["timer/softwar",{"_index":2695,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["timescal",{"_index":6601,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["time—for",{"_index":2880,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tini",{"_index":4831,"title":{},"name":{},"text":{"30":{},"37":{}},"component":{},"keyword":{}}],["tkbrinh",{"_index":3645,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["tl",{"_index":6610,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["tlb",{"_index":2890,"title":{},"name":{},"text":{"10":{},"26":{},"27":{},"28":{},"41":{},"53":{}},"component":{},"keyword":{}}],["tlbleed",{"_index":6796,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tm",{"_index":1799,"title":{},"name":{},"text":{"8":{},"10":{},"25":{},"26":{}},"component":{},"keyword":{}}],["tmp1",{"_index":6677,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tmp2",{"_index":6681,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tmp3",{"_index":6684,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tn",{"_index":9511,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["to/from",{"_index":7532,"title":{},"name":{},"text":{"50":{},"51":{}},"component":{},"keyword":{}}],["to_bits(2",{"_index":9818,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["to_bits(6",{"_index":7454,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["to_bits(7",{"_index":7438,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["today",{"_index":1311,"title":{},"name":{},"text":{"7":{},"22":{},"49":{}},"component":{},"keyword":{}}],["todo",{"_index":5122,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["togeth",{"_index":2079,"title":{},"name":{},"text":{"8":{},"9":{},"15":{},"21":{},"26":{},"29":{},"38":{},"41":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["toggl",{"_index":3743,"title":{},"name":{},"text":{"19":{},"28":{}},"component":{},"keyword":{}}],["toler",{"_index":7025,"title":{},"name":{},"text":{"49":{},"57":{},"59":{}},"component":{},"keyword":{}}],["tommi",{"_index":120,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["tomoyasu",{"_index":1128,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["tomsich",{"_index":694,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["took",{"_index":2636,"title":{},"name":{},"text":{"10":{},"16":{}},"component":{},"keyword":{}}],["tool",{"_index":2400,"title":{},"name":{},"text":{"10":{},"19":{},"27":{},"31":{},"34":{},"37":{},"38":{},"41":{},"42":{},"49":{},"51":{}},"component":{},"keyword":{}}],["toolchain",{"_index":5454,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["top",{"_index":2939,"title":{},"name":{},"text":{"10":{},"12":{},"16":{},"27":{},"31":{},"38":{},"40":{},"41":{},"42":{},"49":{},"50":{}},"component":{},"keyword":{}}],["topic",{"_index":795,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["tor",{"_index":2997,"title":{},"name":{},"text":{"10":{},"21":{}},"component":{},"keyword":{}}],["tor/off",{"_index":3026,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["torbjørn",{"_index":672,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["toronto",{"_index":804,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["toss",{"_index":6914,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["total",{"_index":5241,"title":{"67":{}},"name":{},"text":{"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"46":{},"48":{},"49":{},"51":{},"52":{},"57":{},"67":{}},"component":{},"keyword":{}}],["total[^gmo",{"_index":5894,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["total[rel",{"_index":5914,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["touch",{"_index":4215,"title":{},"name":{},"text":{"26":{},"40":{},"49":{},"51":{}},"component":{},"keyword":{}}],["toward",{"_index":2771,"title":{},"name":{},"text":{"10":{},"30":{},"37":{},"39":{},"45":{},"51":{},"58":{}},"component":{},"keyword":{}}],["tpm",{"_index":1217,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["trace",{"_index":3620,"title":{},"name":{},"text":{"19":{},"49":{},"63":{}},"component":{},"keyword":{}}],["track",{"_index":1582,"title":{"48-9":{}},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"28":{},"36":{},"40":{},"48":{},"50":{},"51":{}},"component":{},"keyword":{}}],["tractabl",{"_index":6507,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["trade",{"_index":3494,"title":{},"name":{},"text":{"15":{},"30":{},"49":{}},"component":{},"keyword":{}}],["tradeoff",{"_index":6592,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["tradit",{"_index":3935,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["traffic",{"_index":5306,"title":{},"name":{},"text":{"36":{},"38":{},"45":{}},"component":{},"keyword":{}}],["trail",{"_index":2410,"title":{},"name":{},"text":{"10":{},"29":{},"30":{},"52":{}},"component":{},"keyword":{}}],["train",{"_index":4771,"title":{},"name":{},"text":{"30":{},"45":{}},"component":{},"keyword":{}}],["tran",{"_index":1237,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["transact",{"_index":1074,"title":{},"name":{},"text":{"7":{},"28":{},"65":{}},"component":{},"keyword":{}}],["transcendent",{"_index":5403,"title":{},"name":{},"text":{"37":{}},"component":{},"keyword":{}}],["transfer",{"_index":190,"title":{"19":{},"19-2":{},"19-3":{},"19-4":{},"19-5":{},"19-6":{},"19-8":{},"19-9":{},"19-10":{},"19-18":{},"31-6":{},"45-9":{}},"name":{},"text":{"4":{},"10":{},"19":{},"21":{},"30":{},"31":{},"33":{},"36":{},"37":{},"38":{},"43":{},"45":{},"50":{},"51":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["transform",{"_index":1483,"title":{"8-37":{},"27-4":{}},"name":{},"text":{"8":{},"12":{},"27":{},"33":{},"49":{},"52":{}},"component":{},"keyword":{}}],["transformed_effective_address",{"_index":4327,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["transient",{"_index":7557,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["transit",{"_index":1646,"title":{"19-15":{},"19-16":{},"41-8":{}},"name":{},"text":{"8":{},"10":{},"11":{},"17":{},"18":{},"19":{},"20":{},"41":{},"49":{},"51":{}},"component":{},"keyword":{}}],["transitori",{"_index":2962,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["translat",{"_index":358,"title":{"8-12":{},"8-20":{},"8-30":{},"8-31":{},"26-17":{},"26-22":{},"26-29":{},"26-31":{},"27-15":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"11":{},"12":{},"15":{},"26":{},"27":{},"28":{},"33":{},"38":{},"51":{},"63":{}},"component":{},"keyword":{}}],["transliter",{"_index":269,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["transpar",{"_index":1437,"title":{},"name":{},"text":{"7":{},"12":{},"26":{},"38":{}},"component":{},"keyword":{}}],["transpos",{"_index":7924,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["trap",{"_index":548,"title":{"20":{},"24":{},"8-4":{},"8-10":{},"8-11":{},"8-15":{},"8-19":{},"8-28":{},"8-29":{},"8-34":{},"8-35":{},"8-36":{},"8-38":{},"10-9":{},"10-16":{},"10-17":{},"10-25":{},"10-33":{},"11-3":{},"19-17":{},"26-7":{},"26-8":{},"26-15":{},"33-10":{},"38-6":{},"51-132":{},"51-133":{},"51-134":{},"51-135":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"20":{},"24":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"41":{},"45":{},"49":{},"50":{},"51":{},"57":{},"60":{},"62":{},"64":{}},"component":{},"keyword":{}}],["travers",{"_index":2769,"title":{},"name":{},"text":{"10":{},"26":{},"64":{}},"component":{},"keyword":{}}],["trbg",{"_index":7038,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["treat",{"_index":1906,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"51":{},"52":{},"55":{},"57":{},"62":{}},"component":{},"keyword":{}}],["treatment",{"_index":3570,"title":{},"name":{},"text":{"17":{},"19":{},"51":{}},"component":{},"keyword":{}}],["tree",{"_index":590,"title":{},"name":{},"text":{"4":{},"26":{},"41":{},"51":{}},"component":{},"keyword":{}}],["tretinh",{"_index":3643,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["tri",{"_index":2593,"title":{},"name":{},"text":{"10":{},"15":{},"21":{},"27":{},"28":{},"30":{},"35":{},"38":{},"41":{},"49":{},"52":{},"55":{}},"component":{},"keyword":{}}],["trick",{"_index":3829,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["trigger",{"_index":2558,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"21":{},"26":{},"27":{},"33":{},"35":{},"49":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["trim",{"_index":7903,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["trippel",{"_index":696,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["trivial",{"_index":2023,"title":{},"name":{},"text":{"8":{},"40":{},"41":{},"45":{},"57":{}},"component":{},"keyword":{}}],["trng",{"_index":1324,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["troublesom",{"_index":4159,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["true",{"_index":1266,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"18":{},"26":{},"37":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"61":{}},"component":{},"keyword":{}}],["truli",{"_index":3094,"title":{},"name":{},"text":{"11":{},"49":{},"65":{}},"component":{},"keyword":{}}],["truncat",{"_index":3696,"title":{},"name":{},"text":{"19":{},"25":{},"30":{},"51":{},"52":{},"58":{}},"component":{},"keyword":{}}],["trust",{"_index":3492,"title":{},"name":{},"text":{"15":{},"49":{}},"component":{},"keyword":{}}],["trustzon",{"_index":1265,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["truth",{"_index":3821,"title":{"21-4":{}},"name":{},"text":{},"component":{},"keyword":{}}],["ts",{"_index":6986,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tsay",{"_index":1205,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["tselect",{"_index":2212,"title":{},"name":{},"text":{"9":{},"12":{}},"component":{},"keyword":{}}],["tseng",{"_index":812,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["tso",{"_index":5623,"title":{},"name":{},"text":{"40":{},"41":{},"45":{},"67":{}},"component":{},"keyword":{}}],["tsr",{"_index":1601,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["tsr=0",{"_index":2562,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tsr=1",{"_index":2561,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tt",{"_index":3023,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tt1",{"_index":9298,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["tt2",{"_index":9300,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["tu",{"_index":7682,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["tune",{"_index":5242,"title":{},"name":{},"text":{"35":{},"64":{}},"component":{},"keyword":{}}],["tunnel",{"_index":7057,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["tupl",{"_index":6018,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["turan",{"_index":1007,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["turn",{"_index":2589,"title":{},"name":{},"text":{"10":{},"40":{},"41":{},"49":{},"61":{},"62":{}},"component":{},"keyword":{}}],["tval",{"_index":5092,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["tvm",{"_index":1603,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["tvm=0",{"_index":2550,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tvm=1",{"_index":1986,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{},"keyword":{}}],["tw",{"_index":1602,"title":{},"name":{},"text":{"8":{},"10":{},"56":{}},"component":{},"keyword":{}}],["tw=0",{"_index":2556,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["tw=1",{"_index":2557,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["twelv",{"_index":2386,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["twenti",{"_index":1405,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["twice",{"_index":3581,"title":{},"name":{},"text":{"18":{},"49":{},"51":{}},"component":{},"keyword":{}}],["twine",{"_index":1132,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["two",{"_index":1482,"title":{"8-30":{},"27-15":{}},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"23":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"60":{},"61":{},"63":{}},"component":{},"keyword":{}}],["two’",{"_index":5456,"title":{},"name":{},"text":{"38":{},"45":{},"51":{},"58":{}},"component":{},"keyword":{}}],["type",{"_index":1487,"title":{"10-40":{},"19-18":{},"26-30":{},"49-120":{},"51-7":{},"51-11":{},"51-96":{},"51-97":{},"51-98":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"33":{},"34":{},"36":{},"37":{},"38":{},"40":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"53":{},"54":{},"55":{},"57":{},"61":{}},"component":{},"keyword":{}}],["type[3:0",{"_index":3700,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["type’",{"_index":7654,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["typic",{"_index":1741,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"25":{},"26":{},"28":{},"30":{},"31":{},"33":{},"37":{},"40":{},"41":{},"45":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"57":{},"61":{},"64":{},"65":{}},"component":{},"keyword":{}}],["typo",{"_index":6582,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["typograph",{"_index":5217,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["u",{"_index":546,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"15":{},"18":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"33":{},"34":{},"44":{},"45":{},"47":{},"49":{},"50":{},"51":{},"56":{}},"component":{},"keyword":{}}],["u\"=0",{"_index":2369,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["u.",{"_index":6903,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["u.c",{"_index":3430,"title":{},"name":{},"text":{"13":{}},"component":{},"keyword":{}}],["u.k",{"_index":7049,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["u/vu",{"_index":4352,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["u2",{"_index":9140,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["u=0",{"_index":3889,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["u=1",{"_index":2510,"title":{},"name":{},"text":{"10":{},"21":{},"26":{}},"component":{},"keyword":{}}],["u_w",{"_index":9278,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["u_w2",{"_index":9275,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["u_w3",{"_index":9274,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["u_w6",{"_index":9271,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["u_w7",{"_index":9270,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uabi",{"_index":10002,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["ub",{"_index":1880,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["ube=0",{"_index":2521,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["ube=1",{"_index":2522,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["ubiqu",{"_index":5595,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["uc",{"_index":3422,"title":{"13-1":{}},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["ucb/eec",{"_index":714,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["ueip",{"_index":520,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["uf",{"_index":5341,"title":{},"name":{},"text":{"37":{},"48":{}},"component":{},"keyword":{}}],["uimm",{"_index":6244,"title":{},"name":{},"text":{"44":{},"49":{},"51":{},"52":{},"57":{},"62":{}},"component":{},"keyword":{}}],["uimm(rs1",{"_index":9774,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["uimm=0",{"_index":6738,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["uimm[0",{"_index":9797,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["uimm[1",{"_index":9795,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["uimm[2:0",{"_index":9400,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uimm[3",{"_index":9059,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uimm[31:2",{"_index":9794,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["uimm[3:0",{"_index":9057,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uimm[4",{"_index":9058,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uimm[4:0",{"_index":6515,"title":{},"name":{},"text":{"48":{},"52":{},"62":{}},"component":{},"keyword":{}}],["uimm[4:0]=0",{"_index":6521,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["uimm[4:3",{"_index":9401,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uimm[5:0",{"_index":9175,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["uinh",{"_index":3588,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{},"keyword":{}}],["uint64_t",{"_index":9716,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["ulp",{"_index":4843,"title":{},"name":{},"text":{"30":{},"59":{}},"component":{},"keyword":{}}],["ultim",{"_index":2908,"title":{},"name":{},"text":{"10":{},"23":{},"26":{},"33":{},"37":{},"40":{}},"component":{},"keyword":{}}],["ultra",{"_index":1099,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["un",{"_index":6021,"title":{},"name":{},"text":{"41":{},"49":{}},"component":{},"keyword":{}}],["unabl",{"_index":1568,"title":{},"name":{},"text":{"8":{},"35":{}},"component":{},"keyword":{}}],["unaffect",{"_index":2499,"title":{},"name":{},"text":{"10":{},"11":{},"16":{},"26":{},"27":{},"36":{},"37":{},"43":{},"49":{}},"component":{},"keyword":{}}],["unaligned/parti",{"_index":4702,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["unalloc",{"_index":4224,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["unambigu",{"_index":7051,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unari",{"_index":8380,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["unavail",{"_index":6972,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unawar",{"_index":3920,"title":{},"name":{},"text":{"22":{},"31":{}},"component":{},"keyword":{}}],["unbias",{"_index":1338,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["unbound",{"_index":4832,"title":{},"name":{},"text":{"30":{},"58":{}},"component":{},"keyword":{}}],["uncach",{"_index":2759,"title":{},"name":{},"text":{"10":{},"45":{},"63":{}},"component":{},"keyword":{}}],["uncertainti",{"_index":7056,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unchang",{"_index":1640,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"21":{},"26":{},"28":{},"34":{},"38":{},"51":{}},"component":{},"keyword":{}}],["unclear",{"_index":4015,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["unclutt",{"_index":5904,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["uncommit",{"_index":6093,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["uncommon",{"_index":3958,"title":{},"name":{},"text":{"22":{},"26":{},"51":{},"64":{}},"component":{},"keyword":{}}],["uncompress",{"_index":4905,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["uncondit",{"_index":396,"title":{"45-10":{}},"name":{},"text":{"4":{},"28":{},"31":{},"40":{},"45":{},"48":{},"49":{},"50":{}},"component":{},"keyword":{}}],["uncondition",{"_index":2739,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"51":{},"52":{}},"component":{},"keyword":{}}],["unconfigur",{"_index":2590,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["unconstrain",{"_index":4453,"title":{},"name":{},"text":{"28":{},"33":{},"38":{},"49":{}},"component":{},"keyword":{}}],["uncorrect",{"_index":2750,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["uncorrel",{"_index":7004,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["uncov",{"_index":6509,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["undefin",{"_index":3679,"title":{},"name":{},"text":{"19":{},"37":{},"49":{},"60":{}},"component":{},"keyword":{}}],["under",{"_index":21,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"10":{},"15":{},"21":{},"22":{},"26":{},"27":{},"28":{},"30":{},"31":{},"34":{},"35":{},"40":{},"41":{},"47":{},"48":{},"49":{},"51":{},"53":{},"54":{},"59":{},"63":{},"67":{}},"component":{},"keyword":{}}],["undercount",{"_index":3787,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["underflow",{"_index":3099,"title":{"30-12":{}},"name":{},"text":{"11":{},"30":{},"37":{},"51":{}},"component":{},"keyword":{}}],["undergon",{"_index":2896,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["underli",{"_index":2489,"title":{},"name":{},"text":{"10":{},"15":{},"17":{},"26":{},"27":{},"31":{},"33":{},"35":{},"37":{},"38":{},"51":{}},"component":{},"keyword":{}}],["underscor",{"_index":6110,"title":{"42-4":{}},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["understand",{"_index":2338,"title":{},"name":{},"text":{"10":{},"23":{},"26":{},"30":{},"35":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["understood",{"_index":4025,"title":{},"name":{},"text":{"23":{},"37":{},"40":{},"48":{},"49":{}},"component":{},"keyword":{}}],["undesir",{"_index":5610,"title":{},"name":{},"text":{"40":{},"49":{}},"component":{},"keyword":{}}],["undisturb",{"_index":7679,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["undisturbed/agnost",{"_index":8598,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["undisturbed/tail",{"_index":7687,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["undo",{"_index":5634,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["undu",{"_index":4454,"title":{},"name":{},"text":{"28":{}},"component":{},"keyword":{}}],["unequ",{"_index":6450,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["unexpect",{"_index":2465,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"38":{},"40":{},"49":{}},"component":{},"keyword":{}}],["unfamiliar",{"_index":4778,"title":{},"name":{},"text":{"30":{},"49":{},"52":{}},"component":{},"keyword":{}}],["unfett",{"_index":3495,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["unfortun",{"_index":4903,"title":{},"name":{},"text":{"31":{},"37":{},"51":{}},"component":{},"keyword":{}}],["ungar",{"_index":757,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["unifi",{"_index":4834,"title":{},"name":{},"text":{"30":{},"37":{},"49":{},"52":{},"57":{},"63":{}},"component":{},"keyword":{}}],["uniform",{"_index":5088,"title":{},"name":{},"text":{"33":{},"54":{}},"component":{},"keyword":{}}],["uniformli",{"_index":2541,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["unimp",{"_index":7586,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["unimpl",{"_index":304,"title":{},"name":{},"text":{"4":{},"19":{},"35":{}},"component":{},"keyword":{}}],["uninferr",{"_index":3753,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["unintend",{"_index":5817,"title":{},"name":{},"text":{"41":{},"50":{},"54":{}},"component":{},"keyword":{}}],["unintent",{"_index":5550,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["union",{"_index":6029,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["uniqu",{"_index":2374,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"33":{},"41":{},"45":{},"49":{}},"component":{},"keyword":{}}],["unit",{"_index":2570,"title":{"51-41":{},"51-44":{},"51-46":{}},"name":{},"text":{"10":{},"31":{},"36":{},"37":{},"38":{},"41":{},"45":{},"48":{},"49":{},"50":{},"51":{}},"component":{},"keyword":{}}],["unit’",{"_index":2594,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["univers",{"_index":719,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["unix",{"_index":2840,"title":{},"name":{},"text":{"10":{},"15":{},"26":{},"40":{},"63":{}},"component":{},"keyword":{}}],["unknown",{"_index":1817,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"40":{},"51":{}},"component":{},"keyword":{}}],["unless",{"_index":1551,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"19":{},"21":{},"22":{},"26":{},"28":{},"33":{},"40":{},"41":{},"46":{},"48":{},"49":{},"50":{},"51":{},"62":{},"66":{}},"component":{},"keyword":{}}],["unlik",{"_index":1644,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"25":{},"26":{},"27":{},"31":{},"37":{},"40":{},"44":{},"45":{},"49":{},"51":{},"56":{},"61":{},"66":{}},"component":{},"keyword":{}}],["unlimit",{"_index":3842,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["unlock",{"_index":5632,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["unmask",{"_index":4387,"title":{},"name":{},"text":{"27":{},"51":{}},"component":{},"keyword":{}}],["unmi",{"_index":3501,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["unmodifi",{"_index":3803,"title":{},"name":{},"text":{"19":{},"26":{},"33":{},"58":{}},"component":{},"keyword":{}}],["unnecessari",{"_index":2207,"title":{},"name":{},"text":{"9":{},"23":{},"26":{},"28":{},"45":{},"49":{},"52":{}},"component":{},"keyword":{}}],["unnecessarili",{"_index":2048,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["unord",{"_index":4412,"title":{"51-104":{}},"name":{},"text":{"28":{},"45":{},"51":{}},"component":{},"keyword":{}}],["unpack",{"_index":5281,"title":{},"name":{},"text":{"36":{},"51":{}},"component":{},"keyword":{}}],["unpair",{"_index":5715,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["unplan",{"_index":4894,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["unpredict",{"_index":1398,"title":{},"name":{},"text":{"7":{},"10":{},"18":{},"26":{},"45":{},"49":{},"57":{},"61":{}},"component":{},"keyword":{}}],["unpriv",{"_index":603,"title":{},"name":{"5":{},"6":{},"50":{}},"text":{},"component":{},"keyword":{}}],["unprivileg",{"_index":9,"title":{"6-1":{},"42-5":{}},"name":{},"text":{"1":{},"5":{},"6":{},"10":{},"11":{},"12":{},"14":{},"15":{},"21":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["unprogram",{"_index":5493,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["unpropag",{"_index":5813,"title":{"41-11":{}},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["unpropog",{"_index":6026,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["unprotect",{"_index":3878,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["unratifi",{"_index":5150,"title":{},"name":{},"text":{"34":{},"57":{}},"component":{},"keyword":{}}],["unreach",{"_index":3420,"title":{},"name":{},"text":{"12":{},"49":{}},"component":{},"keyword":{}}],["unread",{"_index":4165,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["unrecogn",{"_index":2133,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["unrecover",{"_index":6746,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unrel",{"_index":2214,"title":{},"name":{},"text":{"9":{},"40":{}},"component":{},"keyword":{}}],["unreport",{"_index":3788,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["unresum",{"_index":3500,"title":{},"name":{},"text":{"16":{}},"component":{},"keyword":{}}],["unrol",{"_index":6417,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["unround",{"_index":4858,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["unsaf",{"_index":4144,"title":{},"name":{},"text":{"26":{},"50":{}},"component":{},"keyword":{}}],["unsatisfi",{"_index":6073,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["unset",{"_index":3857,"title":{},"name":{},"text":{"21":{},"41":{}},"component":{},"keyword":{}}],["unshfli",{"_index":6860,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unsign",{"_index":2799,"title":{},"name":{},"text":{"10":{},"23":{},"25":{},"28":{},"29":{},"36":{},"37":{},"39":{},"43":{},"45":{},"47":{},"51":{},"52":{},"57":{},"59":{},"62":{}},"component":{},"keyword":{}}],["unsigned(rnd[3:0",{"_index":9061,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["unsigned(shamt",{"_index":6642,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unsigned(v",{"_index":7707,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["unsigned(vs2[i",{"_index":8265,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["unsigned(x",{"_index":7416,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unsigned(x[rs1",{"_index":8269,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["unsigned×unsign",{"_index":5516,"title":{},"name":{},"text":{"39":{}},"component":{},"keyword":{}}],["unsound",{"_index":6020,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["unspecifi",{"_index":1734,"title":{"38-7":{}},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"19":{},"26":{},"28":{},"32":{},"33":{},"38":{},"45":{}},"component":{},"keyword":{}}],["unstal",{"_index":5644,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["unsuccess",{"_index":5685,"title":{},"name":{},"text":{"40":{},"48":{},"55":{}},"component":{},"keyword":{}}],["unsupport",{"_index":1840,"title":{"51-33":{}},"name":{},"text":{"8":{},"10":{},"12":{},"26":{},"27":{},"33":{},"51":{}},"component":{},"keyword":{}}],["untag",{"_index":4383,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["untaken",{"_index":6108,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["until",{"_index":1953,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"16":{},"19":{},"21":{},"23":{},"25":{},"26":{},"33":{},"40":{},"41":{},"49":{},"51":{},"56":{},"63":{},"64":{},"65":{}},"component":{},"keyword":{}}],["untouch",{"_index":1645,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["untransl",{"_index":4160,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["untrust",{"_index":6964,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["unus",{"_index":450,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"27":{},"45":{},"51":{},"52":{},"63":{}},"component":{},"keyword":{}}],["unusu",{"_index":2100,"title":{},"name":{},"text":{"8":{},"10":{},"38":{},"66":{}},"component":{},"keyword":{}}],["unwind",{"_index":3805,"title":{},"name":{},"text":{"19":{},"50":{}},"component":{},"keyword":{}}],["unwound",{"_index":7560,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["unwrit",{"_index":4166,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["unzip",{"_index":4529,"title":{"29-66":{},"49-65":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["up",{"_index":154,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"23":{},"25":{},"26":{},"27":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"53":{}},"component":{},"keyword":{}}],["updat",{"_index":298,"title":{"26-32":{}},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"19":{},"22":{},"26":{},"27":{},"28":{},"33":{},"35":{},"41":{},"49":{},"50":{},"51":{},"52":{},"55":{},"56":{},"57":{},"62":{}},"component":{},"keyword":{}}],["upfront",{"_index":5985,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["upgrad",{"_index":4141,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["upon",{"_index":466,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"16":{},"17":{},"19":{},"21":{},"26":{},"30":{},"32":{},"40":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"60":{},"63":{},"66":{}},"component":{},"keyword":{}}],["upper",{"_index":370,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"12":{},"22":{},"26":{},"27":{},"28":{},"29":{},"34":{},"35":{},"36":{},"39":{},"44":{},"45":{},"46":{},"47":{},"49":{},"51":{},"56":{},"59":{}},"component":{},"keyword":{}}],["uppermost",{"_index":5273,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["upstream",{"_index":4022,"title":{},"name":{},"text":{"23":{}},"component":{},"keyword":{}}],["urg",{"_index":6981,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["urlhttps://github.com/mjosaarinen/lwaes_isa",{"_index":1067,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["urlhttps://github.com/mjosaarinen/lwsha_isa",{"_index":1004,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["urlhttps://github.com/riscv/riscv",{"_index":710,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["urlist",{"_index":9792,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["uro",{"_index":3216,"title":{},"name":{},"text":{"12":{},"51":{}},"component":{},"keyword":{}}],["urw",{"_index":3207,"title":{},"name":{},"text":{"12":{},"50":{},"51":{},"57":{}},"component":{},"keyword":{}}],["us",{"_index":279,"title":{"51-114":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["usa",{"_index":842,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["usabl",{"_index":3919,"title":{},"name":{},"text":{"21":{},"26":{},"38":{},"51":{}},"component":{},"keyword":{}}],["usag",{"_index":2061,"title":{"22-3":{},"31-14":{},"57-27":{},"61-6":{}},"name":{},"text":{"8":{},"10":{},"11":{},"15":{},"18":{},"19":{},"26":{},"45":{},"47":{},"49":{},"50":{},"52":{},"56":{}},"component":{},"keyword":{}}],["use",{"_index":2788,"title":{},"name":{},"text":{"10":{},"49":{}},"component":{},"keyword":{}}],["useless",{"_index":3897,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["usenix",{"_index":792,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["user",{"_index":440,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"12":{},"15":{},"18":{},"19":{},"21":{},"22":{},"26":{},"27":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"41":{},"47":{},"49":{},"50":{},"51":{},"63":{}},"component":{},"keyword":{}}],["user/appl",{"_index":3491,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["userspac",{"_index":3904,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["usual",{"_index":1540,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"15":{},"19":{},"22":{},"26":{},"30":{},"31":{},"35":{},"37":{},"38":{},"45":{},"49":{},"51":{}},"component":{},"keyword":{}}],["util",{"_index":2054,"title":{},"name":{},"text":{"8":{},"9":{},"26":{},"28":{},"41":{},"49":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["uw",{"_index":4541,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["uxl",{"_index":1861,"title":{},"name":{},"text":{"8":{},"10":{},"26":{}},"component":{},"keyword":{}}],["uxl/sxl/mxl",{"_index":4392,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["uxlen",{"_index":2482,"title":{},"name":{},"text":{"10":{},"12":{},"26":{},"50":{}},"component":{},"keyword":{}}],["uxlen=32",{"_index":2484,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["uxlen=mxlen",{"_index":2486,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["uxlen=sxlen",{"_index":2487,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["uxlen≠sxlen",{"_index":4073,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["v",{"_index":1,"title":{"1":{},"3":{},"6":{},"14":{},"51":{},"15-1":{},"38-1":{},"38-2":{},"38-3":{},"51-139":{}},"name":{"51":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["v0",{"_index":5076,"title":{},"name":{},"text":{"32":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["v0.9",{"_index":7686,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v0.mask[i",{"_index":7760,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v0.mask[i]=1",{"_index":7765,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v0.mask[x",{"_index":7775,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v0.t",{"_index":7764,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v0=v8",{"_index":8664,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v0[i",{"_index":7913,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v0–v31",{"_index":2575,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["v1",{"_index":7751,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v1.0",{"_index":4579,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["v1.0.0",{"_index":6583,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["v1.0.1",{"_index":6581,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["v1.11",{"_index":3841,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["v1/v2",{"_index":9617,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v10",{"_index":7946,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v10=v12",{"_index":8656,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v11",{"_index":8644,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v11=v13",{"_index":8657,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v12",{"_index":8655,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v13",{"_index":9598,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v14",{"_index":9599,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v15",{"_index":7810,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v16",{"_index":8584,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v1=v2",{"_index":8653,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v1=v9",{"_index":8665,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v2",{"_index":7754,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v2*n",{"_index":7726,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v2*n+1",{"_index":7727,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v2.0",{"_index":3748,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["v20",{"_index":9684,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v24",{"_index":9670,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v25",{"_index":9666,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v26",{"_index":9667,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v28",{"_index":9683,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["v2[i",{"_index":7963,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v3",{"_index":7763,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v31",{"_index":5077,"title":{},"name":{},"text":{"32":{},"51":{}},"component":{},"keyword":{}}],["v3[i",{"_index":7964,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v4",{"_index":7755,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v4*n",{"_index":7728,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v4*n+1",{"_index":7729,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v4*n+2",{"_index":7730,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v4*n+3",{"_index":7731,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v4=v8",{"_index":8659,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v4[i",{"_index":7957,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v5",{"_index":7975,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v5=v9",{"_index":8660,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v5[i",{"_index":7959,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v6",{"_index":7753,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v6=v10",{"_index":8661,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v6[i",{"_index":7961,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v7",{"_index":8002,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v7=v11",{"_index":8662,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v7=v15",{"_index":8666,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v8",{"_index":4907,"title":{},"name":{},"text":{"31":{},"51":{},"53":{}},"component":{},"keyword":{}}],["v8[i",{"_index":7914,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v9",{"_index":7944,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["v=0",{"_index":1525,"title":{},"name":{},"text":{"8":{},"19":{},"25":{},"26":{}},"component":{},"keyword":{}}],["v=1",{"_index":1523,"title":{},"name":{},"text":{"8":{},"11":{},"19":{},"25":{},"26":{},"51":{}},"component":{},"keyword":{}}],["v[d",{"_index":7701,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v[f]slide1down",{"_index":8597,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v[f]slide1up",{"_index":8596,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["v[r]sub.v[vx",{"_index":8960,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["va",{"_index":4176,"title":{},"name":{},"text":{"26":{},"51":{}},"component":{},"keyword":{}}],["va.pgoff",{"_index":4203,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["va.vpn[i",{"_index":4205,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vaadd",{"_index":8295,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vaadd.vv",{"_index":8301,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vaadd.vx",{"_index":8303,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vaadd[u].v[vx",{"_index":9011,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaaddu",{"_index":8294,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vaaddu.vv",{"_index":8298,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vaaddu.vx",{"_index":8300,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vacant",{"_index":310,"title":{},"name":{},"text":{"4":{},"10":{},"34":{},"38":{}},"component":{},"keyword":{}}],["vacat",{"_index":6434,"title":{},"name":{},"text":{"45":{},"47":{},"51":{}},"component":{},"keyword":{}}],["vadc",{"_index":8099,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vadc.v[ivx]m",{"_index":8965,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vadc.vim",{"_index":8105,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vadc.vvm",{"_index":8103,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vadc.vxm",{"_index":8104,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vadd",{"_index":8703,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vadd.v[ivx",{"_index":8961,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vadd.vi",{"_index":8061,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vadd.vv",{"_index":8059,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vadd.vx",{"_index":8060,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vae",{"_index":8920,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaes*.v",{"_index":8929,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaes.v",{"_index":9484,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaes.vv",{"_index":9483,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdf",{"_index":9487,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdf(vs2",{"_index":9029,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdf.[vv,v",{"_index":8887,"title":{"52-40":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdf.v",{"_index":9025,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdf.vv",{"_index":9024,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdm",{"_index":9486,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdm(vs2",{"_index":9045,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdm.[vv,v",{"_index":8888,"title":{"52-41":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdm.v",{"_index":9043,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesdm.vv",{"_index":9042,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesef",{"_index":9489,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesef(vs2",{"_index":9049,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesef.[vv,v",{"_index":8889,"title":{"52-42":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesef.v",{"_index":9048,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesef.vv",{"_index":9047,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesem",{"_index":9488,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesem(vs2",{"_index":9054,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesem.[vv,v",{"_index":8890,"title":{"52-43":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesem.v",{"_index":9053,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesem.vv",{"_index":9052,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaeskf1(rnd",{"_index":9060,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaeskf1.vi",{"_index":8891,"title":{"52-44":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaeskf2(rnd",{"_index":9075,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaeskf2.vi",{"_index":8892,"title":{"52-45":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesz",{"_index":9490,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesz(vs2",{"_index":9087,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vaesz.v",{"_index":8893,"title":{"52-46":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["val",{"_index":4593,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["val[i",{"_index":4618,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["valid",{"_index":196,"title":{"26-33":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"16":{},"19":{},"21":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"35":{},"36":{},"37":{},"38":{},"40":{},"49":{},"50":{},"51":{},"56":{},"57":{},"66":{}},"component":{},"keyword":{}}],["valtchanov",{"_index":1298,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["valu",{"_index":303,"title":{"8-10":{},"8-19":{},"8-28":{},"10-25":{},"12-4":{},"12-5":{},"12-6":{},"26-15":{},"27-6":{},"33-9":{},"36-2":{},"38-7":{},"40-5":{},"41-17":{},"48-6":{},"51-33":{},"60-1":{},"60-3":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"66":{},"67":{}},"component":{},"keyword":{}}],["valuabl",{"_index":3617,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["value(",{"_index":3671,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vand",{"_index":8729,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vand.v[ivx",{"_index":8978,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vand.vi",{"_index":8125,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vand.vv",{"_index":8123,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vand.vx",{"_index":8124,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vandewalk",{"_index":123,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["vandn",{"_index":9494,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vandn(vs2",{"_index":9097,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vandn.[vv,vx",{"_index":8894,"title":{"52-47":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vandn.v[vx",{"_index":8956,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vandn.vv",{"_index":9089,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vandn.vx",{"_index":9090,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vararg",{"_index":5276,"title":{},"name":{},"text":{"36":{}},"component":{},"keyword":{}}],["varchola",{"_index":1279,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["vari",{"_index":2624,"title":{},"name":{},"text":{"10":{},"38":{},"51":{},"52":{},"56":{},"57":{},"64":{},"65":{}},"component":{},"keyword":{}}],["variabl",{"_index":470,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"26":{},"31":{},"38":{},"40":{},"41":{},"49":{},"50":{},"52":{},"53":{},"55":{},"56":{},"57":{},"64":{}},"component":{},"keyword":{}}],["variable/regist",{"_index":6811,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["variant",{"_index":1142,"title":{"45-4":{}},"name":{},"text":{"7":{},"8":{},"10":{},"15":{},"31":{},"34":{},"36":{},"37":{},"38":{},"40":{},"42":{},"43":{},"45":{},"47":{},"48":{},"50":{},"51":{},"57":{},"59":{},"60":{},"62":{},"64":{}},"component":{},"keyword":{}}],["variat",{"_index":1666,"title":{},"name":{},"text":{"8":{},"38":{}},"component":{},"keyword":{}}],["varieti",{"_index":4134,"title":{},"name":{},"text":{"26":{},"35":{},"38":{},"42":{},"51":{},"63":{}},"component":{},"keyword":{}}],["variou",{"_index":386,"title":{},"name":{},"text":{"4":{},"10":{},"15":{},"19":{},"21":{},"23":{},"26":{},"28":{},"30":{},"38":{},"40":{},"42":{},"45":{},"49":{},"51":{},"52":{},"64":{}},"component":{},"keyword":{}}],["vasub",{"_index":8296,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vasub.vv",{"_index":8306,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vasub.vx",{"_index":8307,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vasub[u].v[vx",{"_index":9012,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vasubu",{"_index":8297,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vasubu.vv",{"_index":8304,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vasubu.vx",{"_index":8305,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vb",{"_index":8172,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vbit",{"_index":4324,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["vbits[11111111111111111111111110001…​000",{"_index":4341,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["vbits[11111111111111111111111111111…​111",{"_index":4344,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["vbrev",{"_index":9503,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vbrev(vs2",{"_index":9100,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vbrev.v",{"_index":8895,"title":{"52-48":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vbrev8",{"_index":9501,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vbrev8(vs2",{"_index":9104,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vbrev8.v",{"_index":8896,"title":{"52-49":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vc",{"_index":8206,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vclmul",{"_index":9495,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmul(vs2",{"_index":9110,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmul.[vv,vx",{"_index":8897,"title":{"52-50":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmul.vv",{"_index":9107,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmul.vx",{"_index":9108,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmul[h",{"_index":8926,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmul[h].v[vx",{"_index":8959,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmulh",{"_index":9496,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmulh(vs2",{"_index":9120,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmulh.[vv,vx",{"_index":8898,"title":{"52-51":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmulh.vv",{"_index":9118,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclmulh.vx",{"_index":9119,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclz",{"_index":9504,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclz(vs2",{"_index":9123,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vclz.v",{"_index":8899,"title":{"52-52":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vcompress",{"_index":8642,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vcompress.vm",{"_index":8641,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vcontent",{"_index":8564,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vcpop",{"_index":8861,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vcpop(vs2",{"_index":9125,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vcpop.m",{"_index":7605,"title":{"51-109":{}},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vcpop.v",{"_index":8900,"title":{"52-53":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vcsr",{"_index":2576,"title":{"51-17":{}},"name":{},"text":{"10":{},"12":{},"32":{},"51":{}},"component":{},"keyword":{}}],["vctz",{"_index":9506,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vctz(vs2",{"_index":9126,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vctz.v",{"_index":8901,"title":{"52-54":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vd",{"_index":4847,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vd,v",{"_index":8067,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd,vs,v",{"_index":8462,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd,vs,vm",{"_index":8086,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd,vs,x0",{"_index":8068,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd,vs,x0,vm",{"_index":8087,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd.mask[i",{"_index":8106,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[0",{"_index":8512,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[0]=f[rs1",{"_index":8620,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[0]=x[rs1",{"_index":8615,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[4:0",{"_index":7817,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[i",{"_index":8037,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[i+1",{"_index":8616,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[i+uimm",{"_index":8602,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[i+x[rs1",{"_index":8600,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vd[vl",{"_index":8625,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vdecompress",{"_index":7615,"title":{"51-129":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vdiv",{"_index":8782,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vdiv.vv",{"_index":8232,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vdiv.vx",{"_index":8233,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vdiv[u].v[vx",{"_index":9009,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vdivu",{"_index":8778,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vdivu.vv",{"_index":8230,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vdivu.vx",{"_index":8231,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vdso",{"_index":3903,"title":{},"name":{},"text":{"21":{}},"component":{},"keyword":{}}],["ve",{"_index":6192,"title":{},"name":{},"text":{"44":{},"52":{}},"component":{},"keyword":{}}],["vector",{"_index":516,"title":{"32":{},"51":{},"52":{},"53":{},"8-15":{},"10-16":{},"26-8":{},"30-15":{},"30-16":{},"51-3":{},"51-4":{},"51-5":{},"51-6":{},"51-7":{},"51-8":{},"51-9":{},"51-10":{},"51-11":{},"51-12":{},"51-13":{},"51-14":{},"51-15":{},"51-16":{},"51-17":{},"51-18":{},"51-19":{},"51-25":{},"51-27":{},"51-28":{},"51-37":{},"51-38":{},"51-39":{},"51-40":{},"51-41":{},"51-42":{},"51-43":{},"51-45":{},"51-46":{},"51-47":{},"51-48":{},"51-49":{},"51-50":{},"51-51":{},"51-52":{},"51-53":{},"51-54":{},"51-55":{},"51-56":{},"51-57":{},"51-58":{},"51-59":{},"51-60":{},"51-61":{},"51-62":{},"51-63":{},"51-64":{},"51-65":{},"51-66":{},"51-67":{},"51-68":{},"51-69":{},"51-70":{},"51-71":{},"51-72":{},"51-73":{},"51-74":{},"51-75":{},"51-76":{},"51-77":{},"51-78":{},"51-79":{},"51-80":{},"51-81":{},"51-82":{},"51-83":{},"51-84":{},"51-85":{},"51-86":{},"51-87":{},"51-88":{},"51-89":{},"51-90":{},"51-91":{},"51-92":{},"51-93":{},"51-94":{},"51-95":{},"51-99":{},"51-100":{},"51-101":{},"51-102":{},"51-103":{},"51-104":{},"51-105":{},"51-106":{},"51-107":{},"51-108":{},"51-109":{},"51-114":{},"51-115":{},"51-116":{},"51-117":{},"51-120":{},"51-121":{},"51-122":{},"51-123":{},"51-124":{},"51-125":{},"51-126":{},"51-127":{},"51-128":{},"51-130":{},"51-132":{},"51-133":{},"51-136":{},"51-137":{},"51-138":{},"51-139":{},"51-140":{},"51-141":{},"51-142":{},"51-149":{},"52-7":{},"52-10":{},"52-11":{},"52-12":{},"52-13":{},"52-14":{},"52-15":{},"52-24":{},"52-67":{},"52-68":{},"53-1":{}},"name":{"52":{},"53":{}},"text":{"4":{},"8":{},"10":{},"12":{},"21":{},"22":{},"26":{},"27":{},"29":{},"30":{},"32":{},"34":{},"38":{},"40":{},"42":{},"48":{},"49":{},"51":{},"52":{},"53":{},"57":{},"58":{},"67":{}},"component":{},"keyword":{}}],["vector(256",{"_index":7163,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vector.bodi",{"_index":9660,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["vector/scalar",{"_index":8927,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vector/scalar/immedi",{"_index":9168,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["ved",{"_index":687,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vein",{"_index":2340,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vendor",{"_index":2312,"title":{"10-3":{}},"name":{},"text":{"10":{},"12":{},"21":{},"38":{},"49":{}},"component":{},"keyword":{}}],["verbauwhed",{"_index":1235,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["verbos",{"_index":6593,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["veri",{"_index":964,"title":{},"name":{},"text":{"7":{},"10":{},"19":{},"21":{},"30":{},"31":{},"34":{},"35":{},"38":{},"39":{},"40":{},"41":{},"45":{},"49":{},"62":{},"66":{}},"component":{},"keyword":{}}],["verif",{"_index":4788,"title":{},"name":{},"text":{"30":{},"31":{},"40":{},"49":{},"52":{}},"component":{},"keyword":{}}],["verifi",{"_index":2135,"title":{},"name":{},"text":{"8":{},"21":{},"49":{},"50":{}},"component":{},"keyword":{}}],["verilog",{"_index":4326,"title":{},"name":{},"text":{"27":{},"49":{}},"component":{},"keyword":{}}],["versa",{"_index":4116,"title":{},"name":{},"text":{"26":{},"37":{},"40":{},"43":{},"59":{},"60":{}},"component":{},"keyword":{}}],["version",{"_index":29,"title":{"8":{},"9":{},"10":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"35":{},"36":{},"37":{},"39":{},"40":{},"41":{},"43":{},"45":{},"46":{},"47":{},"48":{},"49":{},"51":{},"52":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"26-29":{},"26-30":{},"26-31":{},"26-32":{},"26-33":{},"26-34":{},"39-3":{},"42-10":{},"66-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"46":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["versu",{"_index":2323,"title":{"10-39":{}},"name":{},"text":{"10":{},"23":{},"51":{}},"component":{},"keyword":{}}],["vertic",{"_index":3499,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["vet",{"_index":6756,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vfabs.v",{"_index":8463,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfadd",{"_index":8705,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfadd.vf",{"_index":8337,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfadd.vv",{"_index":8336,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfclass.v",{"_index":8486,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfcvt.f.x.v",{"_index":8494,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfcvt.f.xu.v",{"_index":8493,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfcvt.rtz.x.f.v",{"_index":8492,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfcvt.rtz.xu.f.v",{"_index":8491,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfcvt.x.f.v",{"_index":8490,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfcvt.xu.f.v",{"_index":8489,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfdiv",{"_index":8779,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfdiv.vf",{"_index":8352,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfdiv.vv",{"_index":8351,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfirst",{"_index":7606,"title":{"51-110":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfirst.m",{"_index":7915,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["vfmacc",{"_index":8811,"title":{},"name":{},"text":{"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["vfmacc.vf",{"_index":4861,"title":{},"name":{},"text":{"30":{},"51":{},"53":{}},"component":{},"keyword":{}}],["vfmacc.vv",{"_index":4860,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["vfmadd",{"_index":8801,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmadd.vf",{"_index":8365,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmadd.vv",{"_index":8364,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfmax",{"_index":8449,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmax.vf",{"_index":8454,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmax.vv",{"_index":8453,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmerge.vfm",{"_index":8487,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmerge/vfmv",{"_index":8755,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmin",{"_index":8448,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmin.vf",{"_index":8452,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmin.vv",{"_index":8451,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmsac",{"_index":8816,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmsac.vf",{"_index":8361,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmsac.vv",{"_index":8360,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmsub",{"_index":8806,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmsub.vf",{"_index":8369,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmsub.vv",{"_index":8368,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfmul",{"_index":8791,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfmul.vf",{"_index":8350,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfmul.vv",{"_index":8349,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfmv.f.",{"_index":8591,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmv.s.f",{"_index":8594,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfmv.v.f",{"_index":8488,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfn",{"_index":8055,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt.f.f.w",{"_index":4851,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["vfncvt.f.x.w",{"_index":8506,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt.f.xu.w",{"_index":8505,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt.rod.f.f.w",{"_index":4844,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["vfncvt.rtz.x.f.w",{"_index":8504,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt.rtz.xu.f.w",{"_index":8503,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt.x.f.w",{"_index":8502,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt.xu.f.w",{"_index":8501,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvt[.rtz].x[u].f.w",{"_index":8688,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfncvtbf16.f.f.w",{"_index":4747,"title":{"30-20":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["vfneg.v",{"_index":8461,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmacc",{"_index":8814,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfnmacc.vf",{"_index":8359,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmacc.vv",{"_index":8358,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmadd",{"_index":8804,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfnmadd.vf",{"_index":8367,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmadd.vv",{"_index":8366,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmsac",{"_index":8818,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfnmsac.vf",{"_index":8363,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmsac.vv",{"_index":8362,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfnmsub",{"_index":8808,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfnmsub.vf",{"_index":8371,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfnmsub.vv",{"_index":8370,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfop.vf",{"_index":8044,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfop.vv",{"_index":8042,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrdiv",{"_index":8783,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfrdiv.vf",{"_index":8353,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrec7(0x00718abc",{"_index":8442,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrec7(0x7f765432",{"_index":8445,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrec7.v",{"_index":8421,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfrece7",{"_index":8422,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfredmax",{"_index":8538,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfredmax.v",{"_index":8528,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfredmin",{"_index":8537,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfredmin.v",{"_index":8529,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfredosum",{"_index":8532,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfredosum.v",{"_index":8526,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfredsum",{"_index":8530,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfredusum",{"_index":8531,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfredusum.v",{"_index":8527,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrsqrt7(0x00718abc",{"_index":8409,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrsqrt7(0x7f765432",{"_index":8413,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrsqrt7.v",{"_index":8382,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vfrsqrte7",{"_index":8384,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfrsub",{"_index":8797,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfrsub.vf",{"_index":8340,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsgnj",{"_index":8727,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfsgnj.vf",{"_index":8456,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsgnj.vv",{"_index":8455,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsgnjn",{"_index":8730,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfsgnjn.vf",{"_index":8458,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsgnjn.vv",{"_index":8457,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsgnjx",{"_index":8733,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfsgnjx.vf",{"_index":8460,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsgnjx.vv",{"_index":8459,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfslide1[up|down].vf",{"_index":9003,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vfslide1down",{"_index":8629,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfslide1down.vf",{"_index":8627,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfslide1up",{"_index":8621,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfslide1up.vf",{"_index":8619,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsqrt.v",{"_index":8381,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsub",{"_index":8711,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfsub.vf",{"_index":8339,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfsub.vv",{"_index":8338,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfunary0",{"_index":8746,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfunary1",{"_index":8748,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfw",{"_index":8048,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwadd",{"_index":8822,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwadd.vf",{"_index":8342,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwadd.vv",{"_index":8341,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwadd.w",{"_index":8834,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwadd.wf",{"_index":8346,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwadd.wv",{"_index":8345,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.f.f.v",{"_index":4853,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["vfwcvt.f.x.v",{"_index":8500,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.f.x[u].v",{"_index":8689,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.f.xu.v",{"_index":8499,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.rtz.x.f.v",{"_index":8498,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.rtz.xu.f.v",{"_index":8497,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.x.f.v",{"_index":8496,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvt.xu.f.v",{"_index":8495,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwcvtbf16.f.f.v",{"_index":4748,"title":{"30-21":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["vfwmacc",{"_index":8852,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwmacc.vf",{"_index":8373,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwmacc.vv",{"_index":8372,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwmaccbf16",{"_index":4749,"title":{"30-22":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["vfwmaccbf16.vf",{"_index":4856,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["vfwmaccbf16.vv",{"_index":4854,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["vfwmsac",{"_index":8857,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwmsac.vf",{"_index":8377,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwmsac.vv",{"_index":8376,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwmul",{"_index":8844,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwmul.vf",{"_index":8356,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwmul.vv",{"_index":8355,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwnmacc",{"_index":8855,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwnmacc.vf",{"_index":8375,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwnmacc.vv",{"_index":8374,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwnmsac",{"_index":8860,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwnmsac.vf",{"_index":8379,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwnmsac.vv",{"_index":8378,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwredosum",{"_index":8831,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwredosum.v",{"_index":8539,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwredsum",{"_index":8541,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwredusum",{"_index":8542,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwredusum.v",{"_index":8540,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwsub",{"_index":8828,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwsub.vf",{"_index":8344,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwsub.vv",{"_index":8343,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwsub.w",{"_index":8839,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vfwsub.wf",{"_index":8348,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vfwsub.wv",{"_index":8347,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vg",{"_index":8922,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vgein",{"_index":1613,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vgein=0",{"_index":1619,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vghsh",{"_index":9485,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vghsh(vs2",{"_index":9144,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vghsh.vv",{"_index":8902,"title":{"52-55":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vgmul",{"_index":9492,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vgmul(vs2",{"_index":9156,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vgmul.vv",{"_index":8903,"title":{"52-56":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vi",{"_index":6460,"title":{},"name":{},"text":{"45":{},"52":{}},"component":{},"keyword":{}}],["via",{"_index":259,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"15":{},"17":{},"18":{},"19":{},"25":{},"26":{},"35":{},"38":{},"40":{},"41":{},"43":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"54":{},"57":{},"67":{}},"component":{},"keyword":{}}],["vice",{"_index":4115,"title":{},"name":{},"text":{"26":{},"37":{},"40":{},"43":{},"59":{},"60":{}},"component":{},"keyword":{}}],["vid",{"_index":8643,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vid.v",{"_index":8586,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["viem",{"_index":673,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vienna",{"_index":1251,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["view",{"_index":2308,"title":{"57-31":{},"57-32":{},"57-33":{}},"name":{},"text":{"9":{},"10":{},"26":{},"28":{},"36":{},"40":{},"45":{},"51":{},"52":{}},"component":{},"keyword":{}}],["viewpoint",{"_index":6982,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vijayanand",{"_index":670,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vijayaraghavan",{"_index":698,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["vill",{"_index":7593,"title":{"51-11":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vincent",{"_index":1107,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["violat",{"_index":2745,"title":{},"name":{},"text":{"10":{},"26":{},"28":{},"35":{},"40":{},"41":{},"49":{},"51":{},"52":{},"62":{}},"component":{},"keyword":{}}],["viota",{"_index":8585,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["viota.m",{"_index":8577,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["virdia",{"_index":1414,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["virt",{"_index":4112,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["virtu",{"_index":3577,"title":{},"name":{},"text":{"17":{},"40":{}},"component":{},"keyword":{}}],["virtual",{"_index":347,"title":{"8-2":{},"8-13":{},"8-14":{},"8-15":{},"8-16":{},"8-17":{},"8-18":{},"8-19":{},"8-20":{},"8-22":{},"9-4":{},"10-13":{},"17-3":{},"17-4":{},"19-4":{},"19-16":{},"25-7":{},"26-20":{},"26-22":{},"26-23":{},"26-25":{},"26-27":{},"33-11":{},"49-75":{},"49-110":{}},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"22":{},"24":{},"25":{},"26":{},"27":{},"28":{},"31":{},"33":{},"36":{},"38":{},"42":{},"49":{},"50":{},"51":{},"56":{},"57":{}},"component":{},"keyword":{}}],["virtualiz",{"_index":5422,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["visibl",{"_index":1878,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"26":{},"31":{},"33":{},"34":{},"38":{},"40":{},"41":{},"42":{},"45":{},"51":{},"57":{},"62":{},"63":{},"64":{},"67":{}},"component":{},"keyword":{}}],["visual",{"_index":3823,"title":{"21-5":{}},"name":{},"text":{"40":{},"41":{},"51":{}},"component":{},"keyword":{}}],["vl",{"_index":2580,"title":{"51-12":{},"51-35":{},"51-144":{}},"name":{},"text":{"10":{},"12":{},"32":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["vl/2",{"_index":8940,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vl/4",{"_index":8941,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vl/eg",{"_index":8917,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vl1r.v",{"_index":7983,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl1re16.v",{"_index":7985,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl1re32.v",{"_index":7987,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl1re64.v",{"_index":7989,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl1re8.v",{"_index":7984,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl1rm.v",{"_index":8017,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl2r.v",{"_index":7991,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl2re16.v",{"_index":7994,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl2re32.v",{"_index":7996,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl2re64.v",{"_index":7998,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl2re8.v",{"_index":7992,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl4r.v",{"_index":8000,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl4re16.v",{"_index":8004,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl4re32.v",{"_index":8005,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl4re64.v",{"_index":8006,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl4re8.v",{"_index":8001,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl8r.v",{"_index":8007,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vl8re16.v",{"_index":8009,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl8re32.v",{"_index":8010,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl8re64.v",{"_index":8011,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl8re8.v",{"_index":8008,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl<nf>r",{"_index":8016,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl=0",{"_index":7778,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vl=1",{"_index":8509,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl=4",{"_index":9226,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vl=vlen",{"_index":7681,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl=vlmax",{"_index":7680,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vl>0",{"_index":7920,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vle",{"_index":4902,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["vle1.v",{"_index":7870,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vle16.v",{"_index":7806,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vle16ff.v",{"_index":7905,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vle32.v",{"_index":7859,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vle32ff.v",{"_index":7906,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vle64.v",{"_index":7860,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vle64ff.v",{"_index":7907,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vle8.v",{"_index":7858,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vle8ff.v",{"_index":7904,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vle<eew",{"_index":7826,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen",{"_index":7624,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vlen/16",{"_index":7986,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/32",{"_index":7988,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/64",{"_index":7990,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/8",{"_index":7632,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/sew",{"_index":7650,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/sew/2",{"_index":7670,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/sew/4",{"_index":7669,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen/sew/8",{"_index":7668,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen<128",{"_index":8935,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vlen<egw",{"_index":8702,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=128",{"_index":8938,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vlen=128b",{"_index":7722,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=256",{"_index":7693,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=256b",{"_index":7723,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=32",{"_index":7689,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vlen=32b",{"_index":7716,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=64",{"_index":8936,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vlen=64b",{"_index":7720,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=65,536",{"_index":7630,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=elen",{"_index":7661,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen=elen=32",{"_index":7662,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlen>=128",{"_index":8947,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vlenb",{"_index":2582,"title":{"51-13":{}},"name":{},"text":{"10":{},"12":{},"51":{}},"component":{},"keyword":{}}],["vlm.v",{"_index":7866,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlmax",{"_index":7626,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlmax=32",{"_index":7690,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlmax=8",{"_index":7734,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlmax_max",{"_index":7691,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlmul",{"_index":7665,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlmul[2:0",{"_index":7590,"title":{"51-9":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vloxei16.v",{"_index":7889,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vloxei32.v",{"_index":7890,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vloxei64.v",{"_index":7891,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vloxei8.v",{"_index":7888,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vloxei<eew",{"_index":7829,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vloxseg<nf>ei<eew>.v",{"_index":7967,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlse16.v",{"_index":7875,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlse32.v",{"_index":7876,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlse64.v",{"_index":7877,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlse8.v",{"_index":7874,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlse<eew",{"_index":7828,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlseg/vsseg",{"_index":7932,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlseg2e32.v",{"_index":7949,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlseg3e8.v",{"_index":7942,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlseg8e8.v",{"_index":7935,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlseg<nf>e<eew>.v",{"_index":7933,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlseg<nf>e<eew>ff.v",{"_index":7950,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlsi",{"_index":737,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["vlsseg3e8.v",{"_index":7955,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlsseg<nf>e<eew>.v",{"_index":7953,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxei16.v",{"_index":7885,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxei32.v",{"_index":7886,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxei64.v",{"_index":7887,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxei8.v",{"_index":7884,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxei<eew",{"_index":7827,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxseg3ei8.v",{"_index":7970,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vluxseg<nf>ei<eew>.v",{"_index":7966,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxe16/vsxe16",{"_index":7850,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxe32/vsxe32",{"_index":7851,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxe64/vsxe64",{"_index":7852,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxe8/vsxe8",{"_index":7849,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxei16/vsxei16",{"_index":7854,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxei32/vsxei32",{"_index":7855,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxei64/vsxei64",{"_index":7856,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vlxei8/vsxei8",{"_index":7853,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vm",{"_index":352,"title":{},"name":{},"text":{"4":{},"19":{},"26":{},"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vm=0",{"_index":7766,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vm=1",{"_index":7761,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vm[n]or.mm",{"_index":8979,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vma",{"_index":7592,"title":{"51-10":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmacc",{"_index":8246,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmacc.v[vx",{"_index":8988,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmacc.vv",{"_index":8251,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmacc.vx",{"_index":8252,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadc",{"_index":8101,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmadc.v[ivx][m",{"_index":8966,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmadc.vi",{"_index":8113,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadc.vim",{"_index":8110,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadc.vv",{"_index":8111,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadc.vvm",{"_index":8108,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadc.vx",{"_index":8112,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadc.vxm",{"_index":8109,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadd",{"_index":8248,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmadd.v[vx",{"_index":8989,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmadd.vv",{"_index":8255,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmadd.vx",{"_index":8256,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmand",{"_index":8485,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmand.mm",{"_index":8483,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmand[n].mm",{"_index":8980,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmandn",{"_index":8551,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmandn.mm",{"_index":8204,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmandnot",{"_index":8549,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmax",{"_index":8333,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmax.vv",{"_index":8213,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmax.vx",{"_index":8214,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmax[u].v[vx",{"_index":9014,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmaxu",{"_index":8722,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmaxu.vv",{"_index":8211,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmaxu.vx",{"_index":8212,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmclr.m",{"_index":8553,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmcpy.m",{"_index":8556,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmem",{"_index":4132,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vmerg",{"_index":8271,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmerge.v[ivx]m",{"_index":8994,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmerge.vim",{"_index":8274,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmerge.vvm",{"_index":8272,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmerge.vxm",{"_index":8273,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmerge/vmv",{"_index":8754,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmfeq",{"_index":8464,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmfeq.vf",{"_index":8471,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfeq.vv",{"_index":8470,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfge",{"_index":8469,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmfge.vf",{"_index":8479,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfge.vv",{"_index":8481,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfgt",{"_index":8468,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmfgt.vf",{"_index":8478,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfgt.vv",{"_index":8480,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfle",{"_index":8467,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmfle.vf",{"_index":8477,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfle.vv",{"_index":8476,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmflt",{"_index":8466,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmflt.vf",{"_index":8475,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmflt.vv",{"_index":8474,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmfne",{"_index":8465,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmfne.vf",{"_index":8473,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmfne.vv",{"_index":8472,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmid",{"_index":1831,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["vmid[vmidlen",{"_index":1848,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vmidlen",{"_index":1847,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vmidmax",{"_index":1851,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vmin",{"_index":8719,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmin.vv",{"_index":8209,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmin.vx",{"_index":8210,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmin[u].v[vx",{"_index":9015,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vminu",{"_index":8716,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vminu.vv",{"_index":8207,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vminu.vx",{"_index":8208,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmmv.m",{"_index":8115,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmnand",{"_index":8770,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmnand.mm",{"_index":8201,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmnor",{"_index":8773,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmnor.mm",{"_index":8546,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmnot.m",{"_index":8555,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmor",{"_index":8762,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmor.mm",{"_index":8205,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmorn",{"_index":8552,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmorn.mm",{"_index":8547,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmornot",{"_index":8550,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vms[bio]f.m",{"_index":9013,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmsbc",{"_index":8102,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsbc.v[vx]m",{"_index":8967,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmsbc.vv",{"_index":8121,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsbc.vvm",{"_index":8119,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsbc.vx",{"_index":8122,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsbc.vxm",{"_index":8120,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsbf",{"_index":8565,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsbf.m",{"_index":7607,"title":{"51-111":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmseq",{"_index":8757,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmseq.v[vxi",{"_index":8969,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmseq.vi",{"_index":7912,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmseq.vv",{"_index":8151,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmseq.vx",{"_index":8152,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmset.m",{"_index":8554,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge.vi",{"_index":8192,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge.vx",{"_index":8171,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge\\{u}.vi",{"_index":8183,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge\\{u}.vv",{"_index":8176,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge\\{u}.vx",{"_index":8200,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgeu.vi",{"_index":8193,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgeu.vx",{"_index":8170,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge{u}.vi",{"_index":8190,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsge{u}.vx",{"_index":8195,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt",{"_index":8194,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsgt.vi",{"_index":8169,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt.vx",{"_index":8168,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt[u].v[xi",{"_index":8970,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmsgt\\{u}.vi",{"_index":8182,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt\\{u}.vv",{"_index":8175,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt\\{u}.vx",{"_index":8179,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgtu",{"_index":8772,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsgtu.vi",{"_index":8167,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgtu.vx",{"_index":8166,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt{u}.vi",{"_index":8191,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsgt{u}.vx",{"_index":8199,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsif",{"_index":8566,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsif.m",{"_index":7608,"title":{"51-112":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle",{"_index":8769,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsle.vi",{"_index":8165,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle.vv",{"_index":8163,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle.vx",{"_index":8164,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle[u].v[xi",{"_index":8971,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmsle\\{u}.vi",{"_index":8180,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle\\{u}.vv",{"_index":8174,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle\\{u}.vx",{"_index":8178,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsleu",{"_index":8767,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsleu.vi",{"_index":8162,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsleu.vv",{"_index":8160,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsleu.vx",{"_index":8161,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsle{u}.vi",{"_index":8185,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt",{"_index":8764,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmslt.vi",{"_index":8186,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmslt.vv",{"_index":8158,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt.vx",{"_index":8159,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt[u].v[xi",{"_index":8972,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmslt\\{u}.vi",{"_index":8181,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt\\{u}.vv",{"_index":8173,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt\\{u}.vx",{"_index":8177,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsltu",{"_index":8761,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsltu.vi",{"_index":8187,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsltu.vv",{"_index":8156,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsltu.vx",{"_index":8157,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt{u",{"_index":8196,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmslt{u}.vi",{"_index":8184,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsne",{"_index":8759,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmsne.v[ivx",{"_index":8973,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmsne.vi",{"_index":8155,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsne.vv",{"_index":8153,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmsne.vx",{"_index":8154,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsof",{"_index":8567,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmsof.m",{"_index":7609,"title":{"51-113":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmul",{"_index":8794,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmul.vv",{"_index":8216,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmul.vx",{"_index":8217,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmul[h].v[vx",{"_index":8984,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmulh",{"_index":8227,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmulh.vv",{"_index":8218,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmulh.vx",{"_index":8219,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmulh[s]u.v[vx",{"_index":8985,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmulhsu",{"_index":8229,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmulhsu.vv",{"_index":8223,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmulhsu.vx",{"_index":8224,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmulhu",{"_index":8228,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmulhu.vv",{"_index":8220,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmulhu.vx",{"_index":8221,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmulhus.vx",{"_index":8225,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmunary0",{"_index":8750,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmv.s.x",{"_index":8589,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmv.v.[ivx",{"_index":8974,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmv.v.i",{"_index":8277,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmv.v.v",{"_index":8275,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv.v.x",{"_index":8276,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vmv.x.",{"_index":8587,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv1r.v",{"_index":8652,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv2r.v",{"_index":8654,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv4r.v",{"_index":8658,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv8r.v",{"_index":8663,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv<nr>r",{"_index":8798,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmv<nr>r.v",{"_index":8645,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmv[1248]r.v",{"_index":8975,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmx[n]or.mm",{"_index":8981,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vmxnor",{"_index":8775,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmxnor.mm",{"_index":8548,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vmxor",{"_index":8765,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vmxor.mm",{"_index":8202,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vm’",{"_index":4306,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vn",{"_index":7736,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclip",{"_index":8322,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vnclip.wi",{"_index":8330,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclip.wv",{"_index":8327,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclip.wx",{"_index":8329,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclip[u].w[ivx",{"_index":9008,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vnclipu",{"_index":8332,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vnclipu.wi",{"_index":8326,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclipu.wv",{"_index":8323,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclipu.wx",{"_index":8325,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnclipu/vnclip",{"_index":8331,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vncvt.x.x.w",{"_index":8150,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vneg.v",{"_index":8066,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnmsac",{"_index":8247,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vnmsac.v[vx",{"_index":8990,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vnmsac.vv",{"_index":8253,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnmsac.vx",{"_index":8254,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnmsub",{"_index":8249,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vnmsub.v[vx",{"_index":8991,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vnmsub.vv",{"_index":8257,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnmsub.vx",{"_index":8258,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnop.wv",{"_index":8057,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnop.wx",{"_index":8058,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnot.v",{"_index":8133,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnsr[al].w[ivx",{"_index":8999,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vnsra",{"_index":8813,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vnsra.wi",{"_index":8149,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnsra.wv",{"_index":8056,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnsra.wx",{"_index":8148,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnsrl",{"_index":8810,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vnsrl.wi",{"_index":7750,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnsrl.wv",{"_index":8146,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vnsrl.wx",{"_index":8147,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["void",{"_index":9532,"title":{},"name":{},"text":{"53":{},"64":{},"65":{}},"component":{},"keyword":{}}],["vol",{"_index":779,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["volatil",{"_index":5494,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["voltag",{"_index":2803,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["volum",{"_index":8,"title":{"3-1":{},"6-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{}},"component":{},"keyword":{}}],["von",{"_index":6912,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["vop.v",{"_index":7762,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vop.vi",{"_index":8041,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vop.vv",{"_index":8036,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vop.vx",{"_index":8040,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vor",{"_index":8732,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vor.v[ivx",{"_index":8982,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vor.vi",{"_index":8128,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vor.vv",{"_index":8126,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vor.vx",{"_index":8127,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vpn",{"_index":2031,"title":{},"name":{},"text":{"8":{},"26":{}},"component":{},"keyword":{}}],["vpn[1",{"_index":2035,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vpn[2",{"_index":2036,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vpn[3",{"_index":2039,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vpn[4",{"_index":2041,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vpn[i",{"_index":4244,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vpn[i][pte.napot_bit",{"_index":4241,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vpopc.m",{"_index":8560,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vred[and|or|xor].v",{"_index":9018,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vred[min|max][u].v",{"_index":9019,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vredand",{"_index":8707,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredand.v",{"_index":8518,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredmax",{"_index":8725,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredmax.v",{"_index":8515,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredmaxu",{"_index":8723,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredmaxu.v",{"_index":8514,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredmin",{"_index":8720,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredmin.v",{"_index":8517,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredminu",{"_index":8717,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredminu.v",{"_index":8516,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredop.v",{"_index":8510,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredor",{"_index":8710,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredor.v",{"_index":8519,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vredsum",{"_index":8704,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredsum.v",{"_index":8511,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredxor",{"_index":8714,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vredxor.v",{"_index":8520,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrem",{"_index":8789,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vrem.vv",{"_index":8236,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrem.vx",{"_index":8237,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrem[u].v[vx",{"_index":9010,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vremu",{"_index":8786,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vremu.vv",{"_index":8234,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vremu.vx",{"_index":8235,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrev8",{"_index":9502,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrev8(vs2",{"_index":9159,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrev8.v",{"_index":8904,"title":{"52-57":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrfunary0",{"_index":8742,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vrgather",{"_index":7780,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vrgather.v[ivx",{"_index":8998,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrgather.vi",{"_index":8639,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrgather.vv",{"_index":8630,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrgather.vx",{"_index":8637,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrgather[ei16",{"_index":8997,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrgatherei16",{"_index":8635,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vrgatherei16.vv",{"_index":8632,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vrol",{"_index":9498,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol.[vv,vx",{"_index":8905,"title":{"52-58":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol.v[vx",{"_index":8957,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol.vi",{"_index":9164,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol.vv",{"_index":9161,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol.vx",{"_index":9162,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol_vv(vs2",{"_index":9166,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrol_vx(vs2",{"_index":9167,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror",{"_index":9497,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror.[vv,vx,vi",{"_index":8906,"title":{"52-59":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror.v[vxi",{"_index":8958,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror.vi",{"_index":9165,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror.vv",{"_index":9169,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror.vx",{"_index":9170,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror_vi(vs2",{"_index":9174,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror_vv(vs2",{"_index":9172,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vror_vx(vs2",{"_index":9173,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vrsub",{"_index":8713,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vrsub.vi",{"_index":8065,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrsub.vx",{"_index":8064,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vrxunary0",{"_index":8741,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vs",{"_index":257,"title":{"49-125":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"18":{},"19":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"33":{},"37":{},"40":{},"49":{},"50":{},"51":{},"52":{},"56":{}},"component":{},"keyword":{}}],["vs.i/o",{"_index":5703,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["vs/",{"_index":2784,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vs/vu",{"_index":3289,"title":{},"name":{},"text":{"12":{},"19":{},"27":{},"49":{}},"component":{},"keyword":{}}],["vs1",{"_index":4855,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vs1.mask[i",{"_index":8545,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs1/rs1",{"_index":4857,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vs1=0",{"_index":8588,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vs1[0",{"_index":8513,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs1[i",{"_index":8039,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs1r.v",{"_index":8012,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2",{"_index":4848,"title":{},"name":{},"text":{"30":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vs2.mask[i",{"_index":8544,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2=0",{"_index":8590,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2=v0",{"_index":8278,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[0",{"_index":8533,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[1",{"_index":8534,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[4:0",{"_index":7815,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[i",{"_index":8038,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[i+1",{"_index":8624,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[i+offset",{"_index":8613,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[i+uimm",{"_index":8610,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[i+x[rs1",{"_index":8608,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[uimm",{"_index":8640,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[vl",{"_index":8535,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[vs1[i",{"_index":8631,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2[x[rs1",{"_index":8638,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs2r.v",{"_index":8013,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs3",{"_index":7861,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs3,vs3+1,vs3+2",{"_index":7938,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs3[4:0",{"_index":7816,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs4r.v",{"_index":8014,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vs8r.v",{"_index":8015,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vs==0b11",{"_index":2617,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vs=clean",{"_index":2608,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vs=initi",{"_index":2607,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vs[1:0",{"_index":2568,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["vsadd",{"_index":8781,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsadd.vi",{"_index":8289,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsadd.vv",{"_index":8287,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsadd.vx",{"_index":8288,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsadd[u].v[ivx",{"_index":9006,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsaddu",{"_index":8777,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsaddu.vi",{"_index":8286,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsaddu.vv",{"_index":8284,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsaddu.vx",{"_index":8285,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsatp",{"_index":1475,"title":{"8-20":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["vsatp.mod",{"_index":2862,"title":{},"name":{},"text":{"10":{},"11":{},"26":{},"27":{}},"component":{},"keyword":{}}],["vsbc",{"_index":8100,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsbc.v[vx]m",{"_index":8968,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsbc.vvm",{"_index":8116,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsbc.vxm",{"_index":8117,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsbe",{"_index":1652,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsbe=0",{"_index":1653,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsbe=1",{"_index":1655,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vscaus",{"_index":1473,"title":{"8-18":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["vsctrctl",{"_index":3606,"title":{"19-4":{}},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vsctrctl.lcofifrz=1",{"_index":3816,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vsctrctl.ste",{"_index":3735,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vsctrctl.u=1",{"_index":3738,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vsctrctl.{s,u",{"_index":3732,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vsctrctlh",{"_index":3661,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vse1.v",{"_index":7871,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vse16.v",{"_index":7863,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vse32.v",{"_index":7812,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vse64.v",{"_index":7864,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vse8.v",{"_index":7862,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vse<eew",{"_index":7830,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsei",{"_index":1721,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vseie",{"_index":2015,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vseip",{"_index":1681,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vseip=1",{"_index":1684,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsepc",{"_index":1472,"title":{"8-17":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["vset",{"_index":9022,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vset\\{i}vli",{"_index":7784,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsetivli",{"_index":7783,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsetvl",{"_index":7714,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsetvl[i",{"_index":9023,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsetvli",{"_index":7664,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vsetvli/vsetivli/vsetvl",{"_index":7596,"title":{"51-31":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vset{i}vl{i",{"_index":7640,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsew",{"_index":7649,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsew[1:0",{"_index":7647,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsew[2:0",{"_index":7589,"title":{"51-8":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsext.vf2",{"_index":8091,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsext.vf4",{"_index":8093,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsext.vf8",{"_index":8096,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsext.vf[248",{"_index":8976,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2",{"_index":8921,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2c(vs2",{"_index":9184,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2c[hl",{"_index":8931,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2c[hl].vv",{"_index":8907,"title":{"52-60":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2ch",{"_index":9182,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2ch.vv",{"_index":9176,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2cl",{"_index":9183,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2cl.vv",{"_index":9177,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2m",{"_index":8932,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2ms(vs2",{"_index":9232,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsha2ms.vv",{"_index":8908,"title":{"52-61":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsie",{"_index":1468,"title":{"8-14":{}},"name":{},"text":{"8":{},"12":{},"17":{}},"component":{},"keyword":{}}],["vsie.lcofi",{"_index":1892,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsie.sei",{"_index":1896,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsie.ssi",{"_index":1900,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsie.sti",{"_index":1898,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsinh",{"_index":3589,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{},"keyword":{}}],["vsip",{"_index":1467,"title":{"8-14":{}},"name":{},"text":{"8":{},"12":{},"17":{}},"component":{},"keyword":{}}],["vsip.lcofip",{"_index":1891,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsip.seip",{"_index":1895,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsip.ssip",{"_index":1899,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsip.stip",{"_index":1897,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsip/vsi",{"_index":1890,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsireg",{"_index":2279,"title":{},"name":{},"text":{"9":{},"17":{},"19":{},"22":{}},"component":{},"keyword":{}}],["vsireg*/vsiselect",{"_index":3720,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["vsireg2",{"_index":2281,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vsireg3",{"_index":2283,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vsireg4",{"_index":2285,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vsireg5",{"_index":2287,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vsireg6",{"_index":2289,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vsiregi",{"_index":2297,"title":{},"name":{},"text":{"9":{}},"component":{},"keyword":{}}],["vsiselect",{"_index":2277,"title":{},"name":{},"text":{"9":{},"17":{},"19":{},"22":{}},"component":{},"keyword":{}}],["vslide1[up|down].vx",{"_index":9002,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vslide1down",{"_index":8622,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vslide1down.vx",{"_index":8623,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vslide1up",{"_index":8617,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vslide1up.vx",{"_index":8614,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vslide[up|down].v[ix",{"_index":9005,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vslide[up|down].vx",{"_index":9004,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vslidedown",{"_index":7779,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vslidedown.vi",{"_index":8609,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vslidedown.vx",{"_index":8607,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vslideup",{"_index":8595,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vslideup.vi",{"_index":8601,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vslideup.vx",{"_index":8599,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsll",{"_index":8793,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsll.v[ivx",{"_index":9000,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsll.vi",{"_index":8138,"title":{},"name":{},"text":{"51":{},"53":{}},"component":{},"keyword":{}}],["vsll.vv",{"_index":8136,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsll.vx",{"_index":8137,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsm.v",{"_index":7868,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsm3",{"_index":8923,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm3c",{"_index":8934,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm3c(rnd",{"_index":9263,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm3c.vi",{"_index":8909,"title":{"52-62":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm3me",{"_index":8933,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm3me(vs2",{"_index":9337,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm3me.vv",{"_index":8910,"title":{"52-63":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4",{"_index":8924,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4k(uimm",{"_index":9414,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4k.vi",{"_index":8911,"title":{"52-64":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4r",{"_index":9491,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4r(vd",{"_index":9469,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4r.[vv,v",{"_index":8912,"title":{"52-65":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4r.v",{"_index":8930,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsm4r.vv",{"_index":9466,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsmul",{"_index":8651,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsmul.v[vx",{"_index":9016,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsmul.vv",{"_index":8308,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsmul.vx",{"_index":8310,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsoxei16.v",{"_index":7897,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsoxei32.v",{"_index":7898,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsoxei64.v",{"_index":7899,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsoxei8.v",{"_index":7896,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsoxei<eew",{"_index":7833,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsoxseg<nf>ei<eew>.v",{"_index":7969,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsr[al].v[ivx",{"_index":9001,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsra",{"_index":8803,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsra.vi",{"_index":8143,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsra.vv",{"_index":8141,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsra.vx",{"_index":8142,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsrl",{"_index":8800,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsrl.vi",{"_index":7811,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsrl.vv",{"_index":8139,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsrl.vx",{"_index":8140,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsscratch",{"_index":1471,"title":{"8-16":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["vsse16.v",{"_index":7879,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsse32.v",{"_index":7880,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsse64.v",{"_index":7881,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsse8.v",{"_index":7878,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsse<eew",{"_index":7832,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsseg3e32.v",{"_index":7936,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsseg<nf>e<eew>.v",{"_index":7934,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssi",{"_index":1722,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vssie",{"_index":2017,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vssip",{"_index":1683,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vssra",{"_index":8314,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vssra.v[ivx",{"_index":9020,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vssra.vi",{"_index":8321,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssra.vv",{"_index":8318,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssra.vx",{"_index":8320,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssrl",{"_index":8313,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vssrl.v[ivx",{"_index":9021,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vssrl.vi",{"_index":8317,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssrl.vv",{"_index":8315,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssrl.vx",{"_index":8316,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssseg2e32.v",{"_index":7962,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssseg<nf>e<eew>.v",{"_index":7954,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsstatu",{"_index":1466,"title":{"8-13":{},"51-6":{}},"name":{},"text":{"8":{},"11":{},"12":{},"24":{},"26":{},"33":{}},"component":{},"keyword":{}}],["vsstatus.f",{"_index":1865,"title":{},"name":{},"text":{"8":{},"51":{}},"component":{},"keyword":{}}],["vsstatus.mxr",{"_index":1912,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsstatus.sd",{"_index":1879,"title":{},"name":{},"text":{"8":{},"51":{}},"component":{},"keyword":{}}],["vsstatus.sdt",{"_index":1797,"title":{},"name":{},"text":{"8":{},"10":{},"24":{}},"component":{},"keyword":{}}],["vsstatus.spp",{"_index":2117,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsstatus.sum",{"_index":2009,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsstatus.v",{"_index":1875,"title":{},"name":{},"text":{"8":{},"51":{}},"component":{},"keyword":{}}],["vsstatus[10:9",{"_index":7639,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssub",{"_index":8788,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vssub.vv",{"_index":8292,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssub.vx",{"_index":8293,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssub[u].v[vx",{"_index":9007,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vssubu",{"_index":8785,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vssubu.vv",{"_index":8290,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vssubu.vx",{"_index":8291,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vstart",{"_index":2579,"title":{"51-14":{}},"name":{},"text":{"10":{},"12":{},"32":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vstart/eg",{"_index":8918,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vstart=0",{"_index":7919,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsti",{"_index":1723,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vstie",{"_index":2016,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vstimecmp",{"_index":4043,"title":{"25-7":{}},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["vstimecmph",{"_index":4056,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["vstip",{"_index":1682,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{},"keyword":{}}],["vstip/vsti",{"_index":4061,"title":{},"name":{},"text":{"25":{}},"component":{},"keyword":{}}],["vstopei",{"_index":3969,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["vstval",{"_index":1474,"title":{"8-19":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["vstvec",{"_index":1469,"title":{"8-15":{}},"name":{},"text":{"8":{},"12":{}},"component":{},"keyword":{}}],["vsub",{"_index":8709,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vsub.v[vx",{"_index":8962,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vsub.vv",{"_index":8062,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsub.vx",{"_index":8063,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxei16.v",{"_index":7893,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxei32.v",{"_index":7894,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxei64.v",{"_index":7895,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxei8.v",{"_index":7892,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxei<eew",{"_index":7831,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxseg2ei32.v",{"_index":7974,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsuxseg<nf>ei<eew>.v",{"_index":7968,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsxei",{"_index":7902,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vsxl",{"_index":1584,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsxlen",{"_index":1576,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{},"keyword":{}}],["vsxlen=32",{"_index":1587,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsxlen=64",{"_index":1860,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vsxlen=hsxlen",{"_index":1592,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vt",{"_index":8203,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vta",{"_index":7591,"title":{"51-10":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vtsr",{"_index":1598,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vtsr=1",{"_index":1604,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vtvm",{"_index":1600,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vtvm=1",{"_index":1611,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vtw",{"_index":1599,"title":{},"name":{},"text":{"8":{},"56":{}},"component":{},"keyword":{}}],["vtw=1",{"_index":1605,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["vtype",{"_index":2581,"title":{"51-7":{},"51-32":{},"51-33":{}},"name":{},"text":{"10":{},"12":{},"32":{},"51":{},"52":{}},"component":{},"keyword":{}}],["vtype.vil",{"_index":7715,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vtype.vma=0",{"_index":8578,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vtype.vma=1",{"_index":7768,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vtype.vta=1",{"_index":7769,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vtype[xlen",{"_index":7641,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vtypei",{"_index":7782,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vu",{"_index":1524,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"17":{},"18":{},"19":{},"22":{},"23":{},"26":{},"27":{},"33":{},"49":{},"50":{},"56":{}},"component":{},"keyword":{}}],["vu/u",{"_index":4111,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["vu/v",{"_index":4403,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["vuinh",{"_index":3590,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{},"keyword":{}}],["vulner",{"_index":3874,"title":{},"name":{},"text":{"21":{},"49":{},"50":{}},"component":{},"keyword":{}}],["vv",{"_index":8995,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vvaddint32",{"_index":9539,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["vvaddint32(size_t",{"_index":9533,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["vw",{"_index":8047,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwadd",{"_index":8825,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwadd.vv",{"_index":8073,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwadd.vx",{"_index":8074,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwadd.w",{"_index":8836,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwadd.wv",{"_index":8081,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwadd.wx",{"_index":8082,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwadd[u].[vw][vx",{"_index":8963,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwaddu",{"_index":8821,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwaddu.vv",{"_index":8069,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwaddu.vx",{"_index":8070,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwaddu.w",{"_index":8833,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwaddu.wv",{"_index":8077,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwaddu.wx",{"_index":8078,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwcvt.x.x.v",{"_index":8085,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwcvtu.x.x.v",{"_index":8088,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwf",{"_index":8053,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwfunary0",{"_index":8740,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmacc",{"_index":8854,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmacc.v[vx",{"_index":8992,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwmacc.vv",{"_index":8261,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmacc.vx",{"_index":8262,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmacc[s]u.v[vx",{"_index":8993,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwmaccsu",{"_index":8859,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmaccsu.vv",{"_index":8263,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmaccsu.vx",{"_index":8266,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmaccu",{"_index":8851,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmaccu.vv",{"_index":8259,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmaccu.vx",{"_index":8260,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmaccus.vx",{"_index":8268,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmul",{"_index":8849,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmul.v[vx",{"_index":8986,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwmul.vv",{"_index":8240,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmul.vx",{"_index":7809,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmul[s]u.v[vx",{"_index":8987,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwmulsu",{"_index":8847,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmulsu.vv",{"_index":8243,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmulsu.vx",{"_index":8244,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmulu",{"_index":8843,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwmulu.vv",{"_index":8241,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwmulu.vx",{"_index":8242,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwop.vv",{"_index":8049,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwop.vx",{"_index":8050,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwop.wv",{"_index":8051,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwop.wx",{"_index":8052,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwredsum",{"_index":8824,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwredsum.v",{"_index":8522,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwredsum[u].v",{"_index":9017,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwredsumu",{"_index":8820,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwredsumu.v",{"_index":8521,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsll",{"_index":9500,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll.[vv,vx,vi",{"_index":8913,"title":{"52-66":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll.vi",{"_index":9478,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll.vv",{"_index":9476,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll.vx",{"_index":9477,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll_vi(vs2",{"_index":9482,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll_vv(vs2",{"_index":9480,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsll_vx(vs2",{"_index":9481,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsub",{"_index":8830,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwsub.vv",{"_index":8075,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsub.vx",{"_index":8076,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsub.w",{"_index":8841,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwsub.wv",{"_index":8083,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsub.wx",{"_index":8084,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsub[u].[vw][vx",{"_index":8964,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vwsubu",{"_index":8827,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwsubu.vv",{"_index":8071,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsubu.vx",{"_index":8072,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsubu.w",{"_index":8838,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vwsubu.wv",{"_index":8079,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwsubu.wx",{"_index":8080,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vwxunary0",{"_index":8739,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vx",{"_index":9096,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vxor",{"_index":8132,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vxor.v[ivx",{"_index":8983,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["vxor.vi",{"_index":8131,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vxor.vv",{"_index":8129,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vxor.vx",{"_index":8130,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vxrm",{"_index":2577,"title":{"51-15":{}},"name":{},"text":{"10":{},"12":{},"32":{},"51":{}},"component":{},"keyword":{}}],["vxrm[1:0",{"_index":7695,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vxrm[xlen",{"_index":7696,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vxsat",{"_index":2578,"title":{"51-16":{}},"name":{},"text":{"10":{},"12":{},"32":{},"51":{}},"component":{},"keyword":{}}],["vxsat[0",{"_index":7710,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vxsat[xlen",{"_index":7711,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["vxunary0",{"_index":8745,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vyukov",{"_index":1445,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["vzext.vf2",{"_index":8089,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vzext.vf4",{"_index":7752,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vzext.vf8",{"_index":8094,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["vzext.vf[248",{"_index":8977,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w",{"_index":748,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"21":{},"26":{},"28":{},"29":{},"33":{},"37":{},"38":{},"40":{},"41":{},"45":{},"47":{},"48":{},"49":{},"51":{},"60":{},"65":{}},"component":{},"keyword":{}}],["w'[0",{"_index":9291,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w'[1",{"_index":9292,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w,o",{"_index":5704,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["w,w",{"_index":5613,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["w0",{"_index":6667,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["w0i",{"_index":9277,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w1",{"_index":6669,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["w10",{"_index":9223,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w11",{"_index":9222,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w12",{"_index":9344,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w13",{"_index":9342,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w14",{"_index":9340,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w15",{"_index":9338,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w16",{"_index":9364,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w17",{"_index":9367,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w18",{"_index":9370,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w19",{"_index":9373,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w1i",{"_index":9276,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w2",{"_index":9356,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w20",{"_index":9376,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w21",{"_index":9382,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w22",{"_index":9384,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w23",{"_index":9386,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w3",{"_index":9354,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w4",{"_index":9225,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w4i",{"_index":9273,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w5",{"_index":9231,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w5i",{"_index":9272,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w6",{"_index":9230,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w7",{"_index":9229,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w8",{"_index":9228,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w9",{"_index":9224,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w;[r",{"_index":5958,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["w<x",{"_index":2433,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["w=1",{"_index":2992,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{},"keyword":{}}],["w[0",{"_index":9065,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[1",{"_index":9068,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[10",{"_index":9211,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[11",{"_index":9210,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[12",{"_index":9216,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[13",{"_index":9236,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[14",{"_index":9215,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[15",{"_index":9214,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[15:8",{"_index":9335,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[16",{"_index":9220,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[17",{"_index":9219,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[18",{"_index":9218,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[19",{"_index":9217,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[1],w[0",{"_index":9261,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[2",{"_index":9070,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[20",{"_index":9365,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[21",{"_index":9368,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[22",{"_index":9371,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[23",{"_index":9374,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[23:16",{"_index":9336,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[3",{"_index":9072,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[3:0",{"_index":9074,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[4",{"_index":9213,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[5],w[4",{"_index":9260,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[7:0",{"_index":9334,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w[9",{"_index":9212,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["w\\fw",{"_index":5980,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["w];(gmo|po);[r",{"_index":5991,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["w];f;[w",{"_index":5945,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["w];fencerel(fence.w.r);[r",{"_index":5933,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["w];fencerel(fence.w.rw);[m",{"_index":5937,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["w];fencerel(fence.w.w);[w",{"_index":5935,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["wach",{"_index":125,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["wait",{"_index":2321,"title":{"56":{},"10-34":{},"56-1":{}},"name":{},"text":{"10":{},"26":{},"38":{},"40":{},"41":{},"49":{},"51":{},"55":{},"56":{},"57":{},"65":{}},"component":{},"keyword":{}}],["wake",{"_index":5245,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["wakeup",{"_index":2856,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["walk",{"_index":2920,"title":{},"name":{},"text":{"10":{},"19":{},"26":{},"27":{},"41":{},"48":{}},"component":{},"keyword":{}}],["walker",{"_index":2755,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["wall",{"_index":2801,"title":{},"name":{},"text":{"10":{},"35":{}},"component":{},"keyword":{}}],["wallach",{"_index":127,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["wamsley",{"_index":699,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["want",{"_index":2729,"title":{},"name":{},"text":{"10":{},"21":{},"22":{},"38":{},"45":{},"49":{},"52":{},"67":{}},"component":{},"keyword":{}}],["war",{"_index":8605,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["warl",{"_index":448,"title":{"12-6":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"16":{},"19":{},"21":{},"22":{},"25":{},"26":{},"27":{},"33":{},"57":{}},"component":{},"keyword":{}}],["warn",{"_index":7161,"title":{},"name":{},"text":{"49":{},"51":{}},"component":{},"keyword":{}}],["washington",{"_index":840,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["wast",{"_index":3871,"title":{},"name":{},"text":{"21":{},"26":{},"27":{},"49":{},"56":{}},"component":{},"keyword":{}}],["wastag",{"_index":2047,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["wastefulli",{"_index":2559,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["watchdog",{"_index":2866,"title":{},"name":{},"text":{"10":{},"38":{}},"component":{},"keyword":{}}],["watchpoint",{"_index":2742,"title":{},"name":{},"text":{"10":{},"51":{},"54":{}},"component":{},"keyword":{}}],["waterman",{"_index":35,"title":{},"name":{},"text":{"2":{},"5":{},"31":{}},"component":{},"keyword":{}}],["watson",{"_index":701,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["watt",{"_index":5552,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["way",{"_index":1841,"title":{},"name":{},"text":{"8":{},"12":{},"21":{},"22":{},"26":{},"27":{},"30":{},"35":{},"38":{},"40":{},"41":{},"44":{},"45":{},"48":{},"49":{},"51":{},"55":{},"57":{},"63":{}},"component":{},"keyword":{}}],["wd",{"_index":6653,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["weak",{"_index":5480,"title":{},"name":{},"text":{"38":{},"40":{},"48":{},"49":{}},"component":{},"keyword":{}}],["weaken",{"_index":3852,"title":{},"name":{},"text":{"21":{},"37":{}},"component":{},"keyword":{}}],["weaker",{"_index":4267,"title":{},"name":{},"text":{"26":{},"28":{}},"component":{},"keyword":{}}],["weakest",{"_index":5483,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["weakli",{"_index":4263,"title":{},"name":{},"text":{"26":{},"62":{}},"component":{},"keyword":{}}],["weapon",{"_index":4380,"title":{},"name":{},"text":{"27":{}},"component":{},"keyword":{}}],["weaver",{"_index":702,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["web",{"_index":6015,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["weight",{"_index":4612,"title":{},"name":{},"text":{"29":{},"30":{},"51":{}},"component":{},"keyword":{}}],["well",{"_index":1958,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"15":{},"19":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"35":{},"37":{},"38":{},"40":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"57":{},"64":{},"66":{}},"component":{},"keyword":{}}],["went",{"_index":5239,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["wentao",{"_index":1104,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["wesley",{"_index":116,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["wfi",{"_index":288,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"16":{},"49":{},"56":{}},"component":{},"keyword":{}}],["whatev",{"_index":5643,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["whenev",{"_index":1634,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"16":{},"19":{},"22":{},"25":{},"26":{},"31":{},"33":{},"40":{},"57":{},"60":{},"62":{}},"component":{},"keyword":{}}],["wherea",{"_index":552,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"28":{},"37":{},"38":{},"39":{},"42":{},"45":{},"47":{},"51":{},"59":{}},"component":{},"keyword":{}}],["wherebi",{"_index":2540,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["wherein",{"_index":2462,"title":{},"name":{},"text":{"10":{},"18":{}},"component":{},"keyword":{}}],["whether",{"_index":1522,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"19":{},"22":{},"26":{},"27":{},"28":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"45":{},"48":{},"50":{},"51":{},"55":{},"57":{},"61":{},"62":{},"64":{}},"component":{},"keyword":{}}],["whichev",{"_index":4311,"title":{},"name":{},"text":{"27":{},"45":{}},"component":{},"keyword":{}}],["white",{"_index":3475,"title":{},"name":{},"text":{"15":{}},"component":{},"keyword":{}}],["whole",{"_index":3407,"title":{"51-49":{},"51-130":{}},"name":{},"text":{"12":{},"15":{},"21":{},"23":{},"49":{},"51":{},"52":{}},"component":{},"keyword":{}}],["whose",{"_index":1589,"title":{},"name":{},"text":{"8":{},"10":{},"19":{},"22":{},"26":{},"33":{},"40":{},"45":{},"49":{},"51":{},"62":{},"66":{}},"component":{},"keyword":{}}],["wide",{"_index":1822,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"15":{},"17":{},"21":{},"28":{},"29":{},"31":{},"34":{},"35":{},"36":{},"37":{},"38":{},"42":{},"45":{},"47":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"60":{},"63":{}},"component":{},"keyword":{}}],["widen",{"_index":2025,"title":{"30-16":{},"51-54":{},"51-58":{},"51-68":{},"51-70":{},"51-82":{},"51-84":{},"51-86":{},"51-97":{},"51-101":{},"51-106":{}},"name":{},"text":{"8":{},"30":{},"36":{},"37":{},"47":{},"51":{},"52":{},"59":{}},"component":{},"keyword":{}}],["wider",{"_index":285,"title":{"12-10":{},"60-3":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{},"27":{},"29":{},"31":{},"34":{},"36":{},"38":{},"45":{},"51":{},"52":{},"54":{}},"component":{},"keyword":{}}],["widespread",{"_index":4756,"title":{},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["widest",{"_index":1597,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"51":{}},"component":{},"keyword":{}}],["width",{"_index":1593,"title":{"12-9":{},"51-8":{},"51-23":{},"51-40":{},"51-57":{},"51-62":{},"51-66":{},"51-69":{},"51-74":{},"51-75":{},"51-76":{},"51-77":{},"51-81":{},"51-83":{},"51-85":{},"51-96":{},"51-100":{},"51-102":{},"51-103":{},"51-104":{},"51-105":{},"51-147":{},"53-2":{}},"name":{},"text":{"8":{},"9":{},"10":{},"12":{},"19":{},"26":{},"27":{},"29":{},"30":{},"31":{},"35":{},"37":{},"38":{},"39":{},"43":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"59":{},"60":{}},"component":{},"keyword":{}}],["width[2:0",{"_index":7818,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["width[2:0]=0",{"_index":7869,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["wie",{"_index":2434,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["wiley",{"_index":1231,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["william",{"_index":703,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["window",{"_index":2239,"title":{},"name":{},"text":{"9":{},"38":{},"49":{}},"component":{},"keyword":{}}],["winsid",{"_index":5997,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["wipe",{"_index":6742,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["wire",{"_index":3882,"title":{},"name":{},"text":{"21":{},"25":{},"51":{}},"component":{},"keyword":{}}],["wiri",{"_index":453,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["wisconsin",{"_index":826,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["wise",{"_index":4675,"title":{},"name":{},"text":{"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["wish",{"_index":848,"title":{},"name":{},"text":{"7":{},"10":{},"16":{},"19":{},"37":{},"49":{}},"component":{},"keyword":{}}],["within",{"_index":1609,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"16":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"33":{},"35":{},"37":{},"38":{},"40":{},"42":{},"44":{},"45":{},"46":{},"48":{},"49":{},"51":{},"52":{},"53":{},"56":{},"57":{},"62":{},"64":{},"65":{}},"component":{},"keyword":{}}],["without",{"_index":547,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"15":{},"19":{},"21":{},"22":{},"23":{},"26":{},"27":{},"28":{},"29":{},"33":{},"36":{},"37":{},"38":{},"40":{},"41":{},"49":{},"50":{},"51":{},"52":{},"53":{},"56":{},"57":{},"59":{},"61":{},"62":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["wlrl",{"_index":449,"title":{"12-5":{}},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"26":{}},"component":{},"keyword":{}}],["wmb",{"_index":5739,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["wo,wo",{"_index":5740,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["wolf",{"_index":129,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["won’t",{"_index":3912,"title":{},"name":{},"text":{"21":{},"22":{}},"component":{},"keyword":{}}],["word",{"_index":2127,"title":{"29-2":{}},"name":{},"text":{"8":{},"10":{},"27":{},"28":{},"29":{},"31":{},"33":{},"38":{},"39":{},"40":{},"45":{},"49":{},"50":{},"51":{},"52":{},"54":{},"55":{},"57":{},"63":{}},"component":{},"keyword":{}}],["word/doubleword/quadword",{"_index":9691,"title":{"55-1":{}},"name":{},"text":{},"component":{},"keyword":{}}],["work",{"_index":505,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"15":{},"19":{},"26":{},"27":{},"30":{},"31":{},"35":{},"38":{},"40":{},"49":{},"51":{},"52":{},"53":{},"56":{},"61":{},"64":{}},"component":{},"keyword":{}}],["work/data",{"_index":9733,"title":{},"name":{},"text":{"56":{}},"component":{},"keyword":{}}],["workaround",{"_index":3851,"title":{},"name":{},"text":{"21":{},"49":{}},"component":{},"keyword":{}}],["workload",{"_index":4283,"title":{},"name":{},"text":{"26":{},"29":{},"31":{},"51":{},"52":{}},"component":{},"keyword":{}}],["workshop",{"_index":793,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["workstat",{"_index":4888,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["workstation—​part",{"_index":774,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["world",{"_index":2081,"title":{},"name":{},"text":{"8":{},"10":{},"29":{},"49":{},"52":{}},"component":{},"keyword":{}}],["worri",{"_index":5670,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["worth",{"_index":4110,"title":{},"name":{},"text":{"26":{},"27":{},"40":{}},"component":{},"keyword":{}}],["worthi",{"_index":3949,"title":{},"name":{},"text":{"22":{}},"component":{},"keyword":{}}],["worthwhil",{"_index":5034,"title":{},"name":{},"text":{"31":{}},"component":{},"keyword":{}}],["wpri",{"_index":452,"title":{"12-4":{}},"name":{},"text":{"4":{},"12":{},"18":{},"19":{},"23":{}},"component":{},"keyword":{}}],["wr",{"_index":5990,"title":{},"name":{},"text":{"41":{},"56":{}},"component":{},"keyword":{}}],["wrap",{"_index":2798,"title":{},"name":{},"text":{"10":{},"19":{},"23":{},"38":{},"51":{}},"component":{},"keyword":{}}],["wright",{"_index":704,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["writabl",{"_index":592,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"16":{},"17":{},"19":{},"21":{},"22":{},"25":{},"26":{},"51":{},"57":{},"62":{}},"component":{},"keyword":{}}],["write",{"_index":416,"title":{"12-4":{},"12-6":{},"41-26":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"16":{},"17":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"31":{},"32":{},"33":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"55":{},"57":{},"58":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["write/read",{"_index":3108,"title":{"12-5":{}},"name":{},"text":{},"component":{},"keyword":{}}],["write_reg(reg_nam",{"_index":6041,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["write_reg(x1",{"_index":6052,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["writeback",{"_index":2496,"title":{},"name":{},"text":{"10":{},"26":{},"40":{}},"component":{},"keyword":{}}],["writeback/flush/invalidate/etc.instruct",{"_index":5798,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["writer",{"_index":10187,"title":{},"name":{},"text":{"64":{}},"component":{},"keyword":{}}],["writer/multipl",{"_index":5792,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["written",{"_index":465,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"23":{},"25":{},"26":{},"27":{},"28":{},"30":{},"33":{},"35":{},"37":{},"38":{},"40":{},"41":{},"42":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"59":{},"60":{},"62":{},"63":{},"67":{}},"component":{},"keyword":{}}],["wrote",{"_index":6056,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["wrptr",{"_index":3675,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["wrs.nto",{"_index":6392,"title":{},"name":{},"text":{"44":{},"56":{}},"component":{},"keyword":{}}],["wrs.sto",{"_index":6394,"title":{},"name":{},"text":{"44":{},"56":{}},"component":{},"keyword":{}}],["w’th",{"_index":7023,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["x",{"_index":1501,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"11":{},"12":{},"19":{},"21":{},"22":{},"23":{},"26":{},"29":{},"33":{},"40":{},"41":{},"42":{},"45":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"58":{},"60":{},"66":{}},"component":{},"keyword":{}}],["x'[0:3",{"_index":9468,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x'th",{"_index":7412,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["x(dst",{"_index":7558,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["x(r",{"_index":4601,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rd",{"_index":4575,"title":{},"name":{},"text":{"29":{},"49":{},"50":{},"55":{},"61":{}},"component":{},"keyword":{}}],["x(rd)[2*i",{"_index":4695,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rd)[2*i+1",{"_index":4697,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rd)[31:0",{"_index":9708,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["x(rd)[i",{"_index":4670,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rd)[i+xlen/2",{"_index":4672,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rd+1",{"_index":9704,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["x(rdc",{"_index":9801,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x(rs1",{"_index":4578,"title":{},"name":{},"text":{"29":{},"49":{},"52":{},"61":{}},"component":{},"keyword":{}}],["x(rs1)[15..0",{"_index":4647,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs1)[2*i",{"_index":4671,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs1)[2*i+1",{"_index":4673,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs1)[31..0",{"_index":6640,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["x(rs1)[63..0",{"_index":6652,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["x(rs1)[63..32",{"_index":6678,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["x(rs1)[7..0",{"_index":4644,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs1)[i",{"_index":4696,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs1)[i+xlen/2",{"_index":4698,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs1)[xlen/2",{"_index":4637,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs2",{"_index":4573,"title":{},"name":{},"text":{"29":{},"49":{},"50":{},"55":{},"61":{}},"component":{},"keyword":{}}],["x(rs2)[15..0",{"_index":4648,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs2)[31..0",{"_index":6635,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["x(rs2)[31:0",{"_index":7578,"title":{},"name":{},"text":{"50":{},"55":{}},"component":{},"keyword":{}}],["x(rs2)[4..0",{"_index":4658,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs2)[5..0",{"_index":4659,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs2)[63..32",{"_index":6688,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["x(rs2)[7..0",{"_index":4645,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs2)[xlen/2",{"_index":4640,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["x(rs2+1",{"_index":9707,"title":{},"name":{},"text":{"55":{}},"component":{},"keyword":{}}],["x(rs2c",{"_index":9806,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x(rsdc",{"_index":9809,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x(src",{"_index":7545,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["x,n",{"_index":9258,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x.1702",{"_index":1368,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["x.^gmo",{"_index":5848,"title":{},"name":{},"text":{"41":{}},"component":{},"keyword":{}}],["x0",{"_index":1977,"title":{},"name":{},"text":{"8":{},"19":{},"26":{},"28":{},"31":{},"35":{},"37":{},"40":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"60":{},"62":{},"64":{},"66":{}},"component":{},"keyword":{}}],["x0,0(s1",{"_index":5752,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["x0,0(x0",{"_index":2179,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["x0/zero",{"_index":6399,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x0x1x2…​x127",{"_index":9138,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x1",{"_index":3755,"title":{},"name":{},"text":{"19":{},"31":{},"40":{},"45":{},"50":{},"52":{},"60":{},"66":{}},"component":{},"keyword":{}}],["x1,(sp",{"_index":7551,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["x1,0(x2",{"_index":5680,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{},"keyword":{}}],["x1,x0,next",{"_index":5681,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["x1/x5",{"_index":6443,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x10",{"_index":4938,"title":{},"name":{},"text":{"31":{},"45":{},"51":{}},"component":{},"keyword":{}}],["x100",{"_index":4257,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["x11",{"_index":4939,"title":{},"name":{},"text":{"31":{},"45":{},"66":{}},"component":{},"keyword":{}}],["x12",{"_index":4940,"title":{},"name":{},"text":{"31":{},"45":{}},"component":{},"keyword":{}}],["x127u127",{"_index":9141,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x128",{"_index":9135,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x13",{"_index":4941,"title":{},"name":{},"text":{"31":{},"45":{},"66":{}},"component":{},"keyword":{}}],["x14",{"_index":4942,"title":{},"name":{},"text":{"31":{},"45":{},"60":{}},"component":{},"keyword":{}}],["x15",{"_index":4921,"title":{},"name":{},"text":{"31":{},"45":{},"46":{},"57":{},"60":{},"66":{}},"component":{},"keyword":{}}],["x16",{"_index":6401,"title":{},"name":{},"text":{"45":{},"46":{}},"component":{},"keyword":{}}],["x17",{"_index":6402,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x18",{"_index":6403,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x19",{"_index":6404,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x1u",{"_index":9139,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x1xx",{"_index":4238,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["x2",{"_index":4864,"title":{},"name":{},"text":{"31":{},"35":{},"40":{},"41":{},"45":{},"52":{},"64":{},"66":{}},"component":{},"keyword":{}}],["x20",{"_index":6405,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x21",{"_index":6406,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x22",{"_index":6407,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x23",{"_index":6408,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x24",{"_index":6409,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x25",{"_index":6410,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x26",{"_index":6411,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x27",{"_index":6412,"title":{},"name":{},"text":{"45":{},"57":{}},"component":{},"keyword":{}}],["x28",{"_index":6413,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x29",{"_index":6414,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x3",{"_index":5260,"title":{},"name":{},"text":{"35":{},"40":{},"45":{},"52":{},"64":{},"66":{}},"component":{},"keyword":{}}],["x3,0(x4",{"_index":5682,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["x30",{"_index":6415,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["x31",{"_index":6398,"title":{},"name":{},"text":{"45":{},"46":{}},"component":{},"keyword":{}}],["x3:x2",{"_index":5259,"title":{},"name":{},"text":{"35":{}},"component":{},"keyword":{}}],["x4",{"_index":5261,"title":{},"name":{},"text":{"35":{},"40":{},"45":{},"52":{},"64":{}},"component":{},"keyword":{}}],["x5",{"_index":3757,"title":{},"name":{},"text":{"19":{},"31":{},"45":{},"47":{},"50":{},"51":{},"52":{},"64":{},"66":{}},"component":{},"keyword":{}}],["x5+i*x6",{"_index":7956,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+i*x6+1",{"_index":7958,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+i*x6+2",{"_index":7960,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+i*x6+4",{"_index":7965,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+v3[i",{"_index":7971,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+v3[i]+1",{"_index":7972,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+v3[i]+2",{"_index":7973,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+v5[i",{"_index":7976,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5+v5[i]+4",{"_index":7977,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x5,(sp",{"_index":7555,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["x5,0(x6",{"_index":5683,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["x6",{"_index":6400,"title":{},"name":{},"text":{"45":{},"51":{},"52":{}},"component":{},"keyword":{}}],["x7",{"_index":3062,"title":{},"name":{},"text":{"11":{},"45":{},"50":{},"52":{},"66":{}},"component":{},"keyword":{}}],["x7[31:12",{"_index":7529,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["x8",{"_index":2492,"title":{},"name":{},"text":{"10":{},"26":{},"31":{},"45":{},"57":{}},"component":{},"keyword":{}}],["x86",{"_index":4430,"title":{},"name":{},"text":{"28":{},"37":{},"38":{},"40":{},"45":{},"65":{},"67":{}},"component":{},"keyword":{}}],["x86/tso",{"_index":5708,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["x9",{"_index":4937,"title":{},"name":{},"text":{"31":{},"45":{},"57":{},"66":{}},"component":{},"keyword":{}}],["x=0",{"_index":3071,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["x=1",{"_index":2505,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{},"keyword":{}}],["x[(j",{"_index":9521,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x[0:3",{"_index":9467,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x[10",{"_index":10033,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x[11",{"_index":10035,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x[15",{"_index":7117,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["x[23..16",{"_index":7118,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["x[31..24",{"_index":7120,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["x[7",{"_index":9519,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x[i",{"_index":4598,"title":{},"name":{},"text":{"29":{},"53":{},"57":{}},"component":{},"keyword":{}}],["x[n",{"_index":10210,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["x[rd",{"_index":4589,"title":{},"name":{},"text":{"29":{},"49":{},"51":{},"66":{}},"component":{},"keyword":{}}],["x[rs1",{"_index":7797,"title":{},"name":{},"text":{"51":{},"66":{}},"component":{},"keyword":{}}],["x[rs2",{"_index":10207,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["x[rs2]=0",{"_index":7883,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["x[xreg1",{"_index":10032,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x[xreg2",{"_index":10034,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["x^1",{"_index":9154,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x^2",{"_index":9153,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x^7",{"_index":9152,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["x`regist",{"_index":8197,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["xcaus",{"_index":9955,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xcrypto",{"_index":1080,"title":{},"name":{},"text":{"7":{},"49":{}},"component":{},"keyword":{}}],["xctrctl",{"_index":3658,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["xctrctl.rasemu",{"_index":3793,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["xctrctl.rasemu=1",{"_index":3676,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["xctrctl.xte",{"_index":3740,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["xctrctl[47:32",{"_index":3747,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["xenvcfg",{"_index":5102,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["xenvcfg.cbcf",{"_index":5109,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["xenvcfg.cbi",{"_index":5104,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["xenvcfg.cbz",{"_index":5113,"title":{},"name":{},"text":{"33":{}},"component":{},"keyword":{}}],["xenvcfg.ss",{"_index":3065,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["xepc",{"_index":469,"title":{},"name":{},"text":{"4":{},"10":{},"19":{},"57":{}},"component":{},"keyword":{}}],["xhwacha",{"_index":6131,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["xi",{"_index":9128,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["xie",{"_index":2429,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xie=0",{"_index":2432,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xie=1",{"_index":2431,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xinh",{"_index":3591,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{},"keyword":{}}],["xip",{"_index":451,"title":{},"name":{},"text":{"4":{}},"component":{},"keyword":{}}],["xireg",{"_index":3695,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["xlen",{"_index":264,"title":{"12-10":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"11":{},"12":{},"17":{},"19":{},"26":{},"27":{},"28":{},"29":{},"35":{},"37":{},"38":{},"39":{},"41":{},"45":{},"47":{},"48":{},"49":{},"50":{},"51":{},"55":{},"57":{},"58":{},"59":{},"60":{},"62":{}},"component":{},"keyword":{}}],["xlen/2",{"_index":4634,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xlen/4",{"_index":4686,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xlen/8",{"_index":4676,"title":{},"name":{},"text":{"29":{},"49":{},"50":{}},"component":{},"keyword":{}}],["xlen<64",{"_index":6511,"title":{},"name":{},"text":{"48":{}},"component":{},"keyword":{}}],["xlen<sew",{"_index":8034,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["xlen=128",{"_index":6157,"title":{},"name":{},"text":{"43":{}},"component":{},"keyword":{}}],["xlen=32",{"_index":1667,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"35":{},"45":{},"51":{}},"component":{},"keyword":{}}],["xlen=64",{"_index":1670,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"47":{},"51":{}},"component":{},"keyword":{}}],["xlen==32",{"_index":10003,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xlen=vsxlen",{"_index":1864,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["xlen>32",{"_index":2091,"title":{},"name":{},"text":{"8":{},"45":{}},"component":{},"keyword":{}}],["xlen>sew",{"_index":8033,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["xlenbit",{"_index":4587,"title":{},"name":{},"text":{"29":{},"49":{},"61":{}},"component":{},"keyword":{}}],["xlen≥64",{"_index":5224,"title":{},"name":{},"text":{"35":{},"36":{}},"component":{},"keyword":{}}],["xlpe",{"_index":3051,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["xlpe=1",{"_index":3063,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["xmno",{"_index":6154,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["xn",{"_index":10209,"title":{},"name":{},"text":{"66":{}},"component":{},"keyword":{}}],["xnor",{"_index":4530,"title":{"29-67":{},"49-66":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xor",{"_index":4465,"title":{},"name":{},"text":{"28":{},"29":{},"31":{},"34":{},"37":{},"40":{},"44":{},"45":{},"47":{},"48":{},"49":{},"51":{},"52":{},"57":{},"61":{}},"component":{},"keyword":{}}],["xore",{"_index":9028,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["xori",{"_index":6218,"title":{},"name":{},"text":{"44":{},"45":{},"47":{},"48":{},"49":{},"57":{}},"component":{},"keyword":{}}],["xor’",{"_index":6631,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["xor’d",{"_index":6716,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["xpelp",{"_index":2623,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{},"keyword":{}}],["xperm4",{"_index":4532,"title":{"29-69":{},"49-68":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xperm4_lookup",{"_index":4687,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xperm4_lookup(x(rs2)[i+3..i",{"_index":4691,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xperm8",{"_index":4531,"title":{"29-68":{},"49-67":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xperm8_lookup",{"_index":4677,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xperm8_lookup(x(rs2)[i+7..i",{"_index":4684,"title":{},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["xpie",{"_index":2440,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xpp",{"_index":2442,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xref:supervisor.adoc#sv57[\"sv57",{"_index":1824,"title":{},"name":{},"text":{"8":{}},"component":{},"keyword":{}}],["xreg",{"_index":10024,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xreg1",{"_index":10028,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xreg2",{"_index":10030,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xreg_list",{"_index":9985,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xreg_list=\"x1",{"_index":9987,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xreg_list[i",{"_index":10009,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["xret",{"_index":436,"title":{},"name":{},"text":{"4":{},"10":{},"11":{},"18":{},"19":{}},"component":{},"keyword":{}}],["xs",{"_index":514,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"22":{}},"component":{},"keyword":{}}],["xs==0b11",{"_index":2616,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xs[1:0",{"_index":2569,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["xsse",{"_index":3066,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["xt2",{"_index":7092,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(s0",{"_index":7122,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(s1",{"_index":7125,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(s2",{"_index":7128,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(s3",{"_index":7132,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(x",{"_index":7093,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(xt2",{"_index":7103,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt2(xt2(xt2(x",{"_index":7105,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt3",{"_index":7096,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt3(s0",{"_index":7131,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt3(s1",{"_index":7123,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt3(s2",{"_index":7126,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt3(s3",{"_index":7129,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xt3(x",{"_index":7097,"title":{},"name":{},"text":{"49":{},"52":{}},"component":{},"keyword":{}}],["xtensa",{"_index":6455,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["xtensa’",{"_index":6416,"title":{},"name":{},"text":{"45":{}},"component":{},"keyword":{}}],["xtval",{"_index":300,"title":{},"name":{},"text":{"4":{},"10":{},"11":{},"50":{},"57":{}},"component":{},"keyword":{}}],["xv",{"_index":8996,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["xwr",{"_index":3107,"title":{},"name":{},"text":{"11":{}},"component":{},"keyword":{}}],["xx10",{"_index":4256,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["xx1x",{"_index":4237,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["xxx1",{"_index":4236,"title":{},"name":{},"text":{"26":{}},"component":{},"keyword":{}}],["xxxx",{"_index":3125,"title":{},"name":{},"text":{"12":{},"26":{}},"component":{},"keyword":{}}],["y",{"_index":847,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"12":{},"16":{},"19":{},"34":{},"40":{},"49":{},"50":{},"51":{},"52":{},"53":{}},"component":{},"keyword":{}}],["y011…​1111",{"_index":3005,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["y<pmpaddr0",{"_index":3017,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["y>x",{"_index":2435,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["y[i",{"_index":9117,"title":{},"name":{},"text":{"52":{},"53":{}},"component":{},"keyword":{}}],["yatin",{"_index":656,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["ye",{"_index":2147,"title":{},"name":{},"text":{"8":{},"10":{},"38":{},"45":{},"57":{},"62":{}},"component":{},"keyword":{}}],["year",{"_index":3951,"title":{},"name":{},"text":{"22":{},"23":{},"31":{}},"component":{},"keyword":{}}],["yearli",{"_index":7026,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["yes2",{"_index":5508,"title":{},"name":{},"text":{"38":{}},"component":{},"keyword":{}}],["yi",{"_index":9127,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["yi+1",{"_index":9130,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["yie",{"_index":2436,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["yield",{"_index":4889,"title":{},"name":{},"text":{"31":{},"36":{},"38":{},"49":{},"51":{}},"component":{},"keyword":{}}],["ylpe",{"_index":3061,"title":{},"name":{},"text":{"11":{},"16":{}},"component":{},"keyword":{}}],["york",{"_index":919,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["yosuk",{"_index":1123,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["younger",{"_index":5593,"title":{},"name":{},"text":{"40":{}},"component":{},"keyword":{}}],["youngest",{"_index":3629,"title":{},"name":{},"text":{"19":{}},"component":{},"keyword":{}}],["yu",{"_index":1121,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["yunsup",{"_index":36,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["yy01…​1111",{"_index":3004,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["yyyy…​y011",{"_index":3003,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["yyyy…​yy01",{"_index":3002,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["yyyy…​yyy0",{"_index":3001,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["yyyy…​yyyi",{"_index":3000,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["y≠m",{"_index":2446,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["z",{"_index":1103,"title":{},"name":{},"text":{"7":{},"10":{},"40":{},"42":{},"49":{},"50":{},"52":{},"53":{},"60":{}},"component":{},"keyword":{}}],["z[i",{"_index":9551,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["z[i]=x[i]+y[i",{"_index":9537,"title":{},"name":{},"text":{"53":{}},"component":{},"keyword":{}}],["zaamo",{"_index":4409,"title":{"28-4":{}},"name":{},"text":{"28":{},"54":{},"55":{}},"component":{},"keyword":{}}],["zabc",{"_index":6146,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["zabha",{"_index":5132,"title":{"54":{}},"name":{"54":{}},"text":{"34":{},"54":{}},"component":{},"keyword":{}}],["zabrocki",{"_index":131,"title":{},"name":{},"text":{"2":{}},"component":{},"keyword":{}}],["zaca",{"_index":5131,"title":{"55":{}},"name":{"55":{}},"text":{"34":{},"54":{},"55":{}},"component":{},"keyword":{}}],["zagreb",{"_index":1419,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["zalrsc",{"_index":4407,"title":{"28-2":{}},"name":{},"text":{"28":{},"56":{}},"component":{},"keyword":{}}],["zam",{"_index":238,"title":{},"name":{},"text":{"4":{},"34":{}},"component":{},"keyword":{}}],["zandijk",{"_index":133,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{},"keyword":{}}],["zawr",{"_index":5129,"title":{"56":{}},"name":{"56":{}},"text":{"34":{},"44":{},"56":{}},"component":{},"keyword":{}}],["zb",{"_index":2353,"title":{"29-1":{},"29-16":{}},"name":{},"text":{"10":{},"29":{}},"component":{},"keyword":{}}],["zb[abc",{"_index":6865,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zba",{"_index":2351,"title":{"29-5":{}},"name":{},"text":{"10":{},"29":{},"57":{}},"component":{},"keyword":{}}],["zbb",{"_index":2352,"title":{"29-6":{}},"name":{},"text":{"10":{},"29":{},"49":{},"57":{}},"component":{},"keyword":{}}],["zbc",{"_index":4481,"title":{"29-15":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["zbkb",{"_index":4483,"title":{"29-17":{},"49-7":{}},"name":{},"text":{"29":{},"34":{},"49":{}},"component":{},"keyword":{}}],["zbkc",{"_index":4484,"title":{"29-18":{},"49-8":{}},"name":{},"text":{"29":{},"34":{},"49":{}},"component":{},"keyword":{}}],["zbkx",{"_index":4485,"title":{"29-19":{},"49-9":{}},"name":{},"text":{"29":{},"34":{},"49":{}},"component":{},"keyword":{}}],["zc",{"_index":9740,"title":{"57":{},"57-1":{},"57-11":{}},"name":{"57":{}},"text":{"57":{}},"component":{},"keyword":{}}],["zca",{"_index":4450,"title":{"57-5":{}},"name":{},"text":{"28":{},"57":{},"66":{}},"component":{},"keyword":{}}],["zcb",{"_index":4451,"title":{"57-8":{},"57-12":{}},"name":{},"text":{"28":{},"29":{},"57":{}},"component":{},"keyword":{}}],["zcd",{"_index":9743,"title":{"57-7":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["zce",{"_index":5138,"title":{"57-3":{}},"name":{},"text":{"34":{},"57":{}},"component":{},"keyword":{}}],["zcf",{"_index":9742,"title":{"57-6":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["zclsd",{"_index":5139,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["zcm",{"_index":9763,"title":{},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["zcmop",{"_index":1790,"title":{"66-1":{}},"name":{},"text":{"8":{},"10":{},"11":{},"26":{},"50":{},"66":{}},"component":{},"keyword":{}}],["zcmp",{"_index":9744,"title":{"57-9":{}},"name":{},"text":{"57":{}},"component":{},"keyword":{}}],["zcmt",{"_index":3223,"title":{"57-10":{}},"name":{},"text":{"12":{},"22":{},"57":{}},"component":{},"keyword":{}}],["zdinx",{"_index":3961,"title":{"60":{},"60-2":{}},"name":{},"text":{"22":{},"34":{},"60":{}},"component":{},"keyword":{}}],["zero",{"_index":554,"title":{"29-8":{},"29-11":{},"33-21":{}},"name":{},"text":{"4":{},"8":{},"9":{},"10":{},"12":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"39":{},"40":{},"41":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"55":{},"57":{},"58":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{}},"component":{},"keyword":{}}],["zero_loop",{"_index":8576,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zero_tail",{"_index":8574,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zeroiz",{"_index":6971,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zeroization/sanitis",{"_index":6813,"title":{},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zeroth",{"_index":7952,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zero—i.",{"_index":10158,"title":{},"name":{},"text":{"60":{}},"component":{},"keyword":{}}],["zext.h",{"_index":4533,"title":{"29-70":{}},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["zext.w",{"_index":4572,"title":{},"name":{},"text":{"29":{}},"component":{},"keyword":{}}],["zext_or_truncate_to_sew(x(vs1",{"_index":9112,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zfa",{"_index":5135,"title":{"58":{}},"name":{"58":{}},"text":{"34":{},"42":{},"58":{}},"component":{},"keyword":{}}],["zfbfmin",{"_index":4741,"title":{"30-14":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["zfh",{"_index":4757,"title":{"59":{}},"name":{"59":{}},"text":{"30":{},"34":{},"45":{},"58":{},"59":{},"60":{}},"component":{},"keyword":{}}],["zfhmin",{"_index":4755,"title":{"59":{},"59-6":{}},"name":{},"text":{"30":{},"34":{},"51":{},"59":{}},"component":{},"keyword":{}}],["zfinx",{"_index":3959,"title":{"60":{}},"name":{"60":{}},"text":{"22":{},"34":{},"51":{},"60":{}},"component":{},"keyword":{}}],["zfinx/zdinx/zhinx",{"_index":8035,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zhang",{"_index":706,"title":{},"name":{},"text":{"5":{}},"component":{},"keyword":{}}],["zhenzhen",{"_index":1105,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["zhinx",{"_index":5136,"title":{"60":{},"60-4":{}},"name":{},"text":{"34":{},"60":{}},"component":{},"keyword":{}}],["zhinxmin",{"_index":5137,"title":{"60":{},"60-5":{}},"name":{},"text":{"34":{},"60":{}},"component":{},"keyword":{}}],["zicbom",{"_index":1777,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"33":{},"64":{}},"component":{},"keyword":{}}],["zicbop",{"_index":4370,"title":{},"name":{},"text":{"27":{},"33":{},"64":{}},"component":{},"keyword":{}}],["zicboz",{"_index":1774,"title":{},"name":{},"text":{"8":{},"10":{},"26":{},"27":{},"33":{}},"component":{},"keyword":{}}],["zicfilp",{"_index":1780,"title":{"11-1":{},"50-1":{}},"name":{},"text":{"8":{},"10":{},"11":{},"16":{},"26":{},"34":{},"50":{}},"component":{},"keyword":{}}],["zicfilp_forward_trap",{"_index":2622,"title":{},"name":{},"text":{"10":{}},"component":{},"keyword":{}}],["zicfiss",{"_index":1786,"title":{"11-4":{},"50-4":{},"50-5":{},"50-7":{}},"name":{},"text":{"8":{},"10":{},"11":{},"12":{},"26":{},"27":{},"34":{},"50":{}},"component":{},"keyword":{}}],["zicfiss_not_act",{"_index":7559,"title":{},"name":{},"text":{"50":{}},"component":{},"keyword":{}}],["zicntr",{"_index":2778,"title":{"35":{},"35-1":{}},"name":{},"text":{"10":{},"12":{},"17":{},"34":{},"35":{}},"component":{},"keyword":{}}],["zicond",{"_index":5127,"title":{"61":{},"61-2":{}},"name":{"61":{}},"text":{"34":{},"61":{}},"component":{},"keyword":{}}],["zicsr",{"_index":3109,"title":{"62":{}},"name":{"62":{}},"text":{"12":{},"34":{},"35":{},"37":{},"42":{},"44":{},"49":{},"50":{},"51":{},"57":{},"60":{},"62":{}},"component":{},"keyword":{}}],["zicsr_zifencei_ztso",{"_index":6127,"title":{},"name":{},"text":{"42":{}},"component":{},"keyword":{}}],["zifencei",{"_index":5124,"title":{"63":{}},"name":{"63":{}},"text":{"34":{},"38":{},"40":{},"42":{},"44":{},"49":{},"63":{}},"component":{},"keyword":{}}],["zihintntl",{"_index":5125,"title":{"64":{}},"name":{"64":{}},"text":{"34":{},"64":{}},"component":{},"keyword":{}}],["zihintpaus",{"_index":5126,"title":{"65":{}},"name":{"65":{}},"text":{"34":{},"65":{}},"component":{},"keyword":{}}],["zihpm",{"_index":2779,"title":{"35":{},"35-2":{}},"name":{},"text":{"10":{},"17":{},"35":{}},"component":{},"keyword":{}}],["zilsd",{"_index":5128,"title":{},"name":{},"text":{"34":{}},"component":{},"keyword":{}}],["zimop",{"_index":1789,"title":{"66":{}},"name":{"66":{}},"text":{"8":{},"10":{},"11":{},"26":{},"34":{},"50":{},"66":{}},"component":{},"keyword":{}}],["zimop/zcmop",{"_index":3068,"title":{},"name":{},"text":{"11":{},"50":{}},"component":{},"keyword":{}}],["zip",{"_index":4534,"title":{"29-71":{},"49-69":{}},"name":{},"text":{"29":{},"49":{}},"component":{},"keyword":{}}],["zj",{"_index":976,"title":{},"name":{},"text":{"7":{}},"component":{},"keyword":{}}],["zk",{"_index":5140,"title":{"49-17":{},"49-18":{}},"name":{},"text":{"34":{},"49":{}},"component":{},"keyword":{}}],["zkn",{"_index":6533,"title":{"49-16":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zknd",{"_index":6525,"title":{"49-10":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zkne",{"_index":6527,"title":{"49-11":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zknh",{"_index":6528,"title":{"49-12":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zkr",{"_index":2789,"title":{"49-15":{}},"name":{},"text":{"10":{},"49":{}},"component":{},"keyword":{}}],["zksed",{"_index":6529,"title":{"49-13":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zksh",{"_index":6531,"title":{"49-14":{}},"name":{},"text":{"49":{}},"component":{},"keyword":{}}],["zkt",{"_index":6534,"title":{"49-19":{},"49-77":{},"49-82":{}},"name":{},"text":{"49":{},"52":{},"61":{}},"component":{},"keyword":{}}],["zmmul",{"_index":2355,"title":{"39-3":{}},"name":{},"text":{"10":{},"34":{},"39":{},"42":{},"57":{}},"component":{},"keyword":{}}],["zpm",{"_index":4309,"title":{},"name":{"27":{}},"text":{},"component":{},"keyword":{}}],["ztso",{"_index":5133,"title":{"67":{}},"name":{"67":{}},"text":{"34":{},"38":{},"40":{},"41":{},"48":{},"51":{},"67":{}},"component":{},"keyword":{}}],["zvbb",{"_index":5141,"title":{"52-10":{},"52-25":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvbb,zvkb",{"_index":8943,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvbc",{"_index":5142,"title":{"52-11":{},"52-26":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zve",{"_index":7619,"title":{"51-138":{}},"name":{},"text":{"51":{},"67":{}},"component":{},"keyword":{}}],["zve32",{"_index":9109,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zve32f",{"_index":4836,"title":{},"name":{},"text":{"30":{},"51":{}},"component":{},"keyword":{}}],["zve32x",{"_index":8677,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["zve64",{"_index":8681,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zve64d",{"_index":8680,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zve64f",{"_index":8679,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zve64x",{"_index":8678,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["zvfbfmin",{"_index":4742,"title":{"30-15":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["zvfbfwma",{"_index":4743,"title":{"30-16":{}},"name":{},"text":{"30":{}},"component":{},"keyword":{}}],["zvfh",{"_index":7621,"title":{"51-141":{}},"name":{},"text":{"51":{},"58":{}},"component":{},"keyword":{}}],["zvfhmin",{"_index":7620,"title":{"51-140":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvfh’",{"_index":8690,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvk",{"_index":8883,"title":{"52-21":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvkb",{"_index":8877,"title":{"52-12":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvkg",{"_index":5143,"title":{"52-13":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvkhnb",{"_index":9181,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvkn",{"_index":8880,"title":{"52-18":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvknc",{"_index":8881,"title":{"52-19":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvkned",{"_index":5144,"title":{"52-14":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvkng",{"_index":8882,"title":{"52-20":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvknh[ab",{"_index":8879,"title":{"52-15":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvknha",{"_index":8691,"title":{},"name":{},"text":{"51":{},"52":{}},"component":{},"keyword":{}}],["zvknhb",{"_index":5145,"title":{},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvksc",{"_index":8884,"title":{"52-22":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksed",{"_index":5146,"title":{"52-16":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvksg",{"_index":8885,"title":{"52-23":{}},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh",{"_index":5147,"title":{"52-17":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvksh_w(m16",{"_index":9389,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w0",{"_index":9360,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w1",{"_index":9361,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w2",{"_index":9362,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w3",{"_index":9363,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w4",{"_index":9366,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w5",{"_index":9369,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w6",{"_index":9372,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvksh_w(w7",{"_index":9375,"title":{},"name":{},"text":{"52":{}},"component":{},"keyword":{}}],["zvkt",{"_index":5148,"title":{"52-24":{}},"name":{},"text":{"34":{},"52":{}},"component":{},"keyword":{}}],["zvl",{"_index":7618,"title":{"51-137":{}},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvl1024b",{"_index":8675,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvl128b",{"_index":8672,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvl256b",{"_index":8673,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvl32b",{"_index":8670,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvl512b",{"_index":8674,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}],["zvl64b",{"_index":8671,"title":{},"name":{},"text":{"51":{}},"component":{},"keyword":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"ISA Specifications RISC-V Reference Library RISC-V ISA Manuals Volume I: Unprivileged Architecture Download PDF Volume II: Privileged Architecture Download PDF Bibliography","title":"RISC-V Reference Library","component":"isa","version":"v20250508","name":"index","url":"/isa/index.html","titles":[]},"2":{"id":2,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Preamble This document is released under a Creative Commons Attribution 4.0 International License. This document is a derivative of the RISC-V privileged specification version 1.9.1 released under following license: ©2010-2017 Andrew Waterman, Yunsup Lee, Rimas Avižienis, David Patterson, Krste Asanović. Creative Commons Attribution 4.0 International License. Contributors to all versions of the spec in alphabetical order: Krste Asanović, Peter Ashenden, Rimas Avižienis, Jacob Bachmeyer, Allen J. Baum, Jonathan Behrens, Paolo Bonzini, Ruslan Bukin, Christopher Celio, Chuanhua Chang, David Chisnall, Anthony Coulter, Palmer Dabbelt, Monte Dalrymple, Paul Donahue, Greg Favor, Dennis Ferguson, Marc Gauthier, Andy Glew, Gary Guo, Mike Frysinger, John Hauser, David Horner, Olof Johansson, David Kruckemyer, Yunsup Lee, Daniel Lustig, Andrew Lutomirski, Martin Maas, Prashanth Mundkur, Jonathan Neuschäfer, Rishiyur Nikhil, Stefan O’Rear, Albert Ou, John Ousterhout, David Patterson, Dmitri Pavlov, Kade Phillips, Josh Scheid, Colin Schmidt, Michael Taylor, Wesley Terpstra, Matt Thomas, Tommy Thorn, Ray VanDeWalker, Megan Wachs, Steve Wallach, Andrew Waterman, Claire Wolf, Adam Zabrocki, and Reinoud Zandijk. Please contact RISC-V International to suggest corrections.","title":"Preamble","component":"isa","version":"v20250508","name":"priv-contributors","url":"/isa/priv/priv-contributors.html","titles":[{"text":"Contributors","hash":"contributors","id":1}]},"3":{"id":3,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Privileged Architecture Version 20250508: This document is in Ratified state.","title":"The RISC-V Instruction Set Manual","component":"isa","version":"v20250508","name":"priv-index","url":"/isa/priv/priv-index.html","titles":[{"text":"Volume II: Privileged Architecture","hash":"volume-ii-privileged-architecture","id":1}]},"4":{"id":4,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Preface This document describes the RISC-V privileged architecture. The ISA modules marked Ratified have been ratified at this time. The modules marked Frozen are not expected to change significantly before being put up for ratification. The modules marked Draft are expected to change before ratification. The document contains the following versions of the RISC-V ISA modules: Module Version Status Machine ISA Smstateen Extension Smcsrind/Sscsrind Extension Smepmp Extension Smcntrpmf Extension Smrnmi Extension Smcdeleg Extension Smdbltrp Extension Smctr Supervisor ISA Svade Extension Svnapot Extension Svpbmt Extension Svinval Extension Svadu Extension Svvptc Ssqosid Sstc Extension Sscofpmf Extension Ssdbltrp Extension Ssqosid Extension Hypervisor ISA Shlcofideleg Extension Svvptc Extension Pointer Masking 1.13 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.13 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified The following changes have been made since version 20241101: Addition of the Smctr Control Transfer Records extension. Addition of the Svvptc Extension for Obviating Memory-Management Instructions after Marking PTEs Valid. Addition of the Ssqosid Extension for Quality-of-Service Identifiers Addition of the Pointer Masking Extension Preface to Version 20241101 This document describes the RISC-V privileged architecture. The ISA modules marked Ratified have been ratified at this time. The modules marked Frozen are not expected to change significantly before being put up for ratification. The modules marked Draft are expected to change before ratification. The document contains the following versions of the RISC-V ISA modules: Module Version Status Machine ISA Smstateen Extension Smcsrind/Sscsrind Extension Smepmp Extension Smcntrpmf Extension Smrnmi Extension Smcdeleg Extension Smdbltrp Extension Supervisor ISA Svade Extension Svnapot Extension Svpbmt Extension Svinval Extension Svadu Extension Sstc Extension Sscofpmf Extension Ssdbltrp Extension Ssqosid Extension Hypervisor ISA Shlcofideleg Extension Svvptc Extension 1.13 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.13 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Preface to Version 20241017 This document describes the RISC-V privileged architecture. This release, version 20241017, contains the following versions of the RISC-V ISA modules: Module Version Status Machine ISA Smstateen Extension Smcsrind/Sscsrind Extension Smepmp Smcntrpmf Smrnmi Extension Smcdeleg Smdbltrp Supervisor ISA Svade Extension Svnapot Extension Svpbmt Extension Svinval Extension Svadu Extension Sstc Sscofpmf Ssdbltrp Hypervisor ISA Shlcofideleg Svvptc 1.13 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.13 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified Ratified The following changes have been made since version 1.12 of the Machine and Supervisor ISAs, which, while not strictly backwards compatible, are not anticipated to cause software portability problems in practice: Redefined misa.MXL to be read-only, making MXLEN a constant. Added the constraint that SXLEN≥UXLEN. Additionally, the following compatible changes have been made to the Machine and Supervisor ISAs since version 1.12: Defined the misa.B field to reflect that the B extension has been implemented. Defined the misa.V field to reflect that the V extension has been implemented. Defined the RV32-only medelegh and hedelegh CSRs. Defined the misaligned atomicity granule PMA, superseding the proposed Zam extension. Allocated interrupt 13 for Sscofpmf LCOFI interrupt. Defined hardware-error and software-check exception codes. Specified synchronization requirements when changing the PBMTE fields in menvcfg and henvcfg. Exposed count-overflow interrupts to VS-mode via the Shlcofideleg extension. Relaxed behavior of some HINTs when MXLEN > XLEN. Finally, the following clarifications and document improvements have been made since the last document release: Transliterated the document from LaTeX into AsciiDoc. Included all ratified extensions through March 2024. Clarified that \"platform- or custom-use\" interrupts are actually \"platform-use interrupts\", where the platform can choose to make some custom. Clarified semantics of explicit accesses to CSRs wider than XLEN bits. Clarified that MXLEN≥SXLEN. Clarified that WFI is not a HINT instruction. Clarified that VS-stage page-table accesses set G-stage A/D bits. Clarified ordering rules when PBMT=IO is used on main-memory regions. Clarified ordering rules for hardware A/D bit updates. Clarified that, for a given exception cause, xtval might sometimes be set to a nonzero value but sometimes not. Clarified exception behavior of unimplemented or inaccessible CSRs. Clarified that Svpbmt allows implementations to override additional PMAs. Replaced the concept of vacant memory regions with inaccessible memory or I/O regions. Clarified that timer and count-overflow interrupts' arrival in interrupt-pending registers is not immediate. Clarified that MXR affects only explicit memory accesses. Preface to Version 20211203 This document describes the RISC-V privileged architecture. This release, version 20211203, contains the following versions of the RISC-V ISA modules: Module Version Status Machine ISA Supervisor ISA Svnapot Extension Svpbmt Extension Svinval Extension Hypervisor ISA 1.12 1.12 1.0 1.0 1.0 1.0 Ratified Ratified Ratified Ratified Ratified Ratified The following changes have been made since version 1.11, which, while not strictly backwards compatible, are not anticipated to cause software portability problems in practice: Changed MRET and SRET to clear mstatus.MPRV when leaving M-mode. Reserved additional satp patterns for future use. Stated that the scause Exception Code field must implement bits 4–0 at minimum. Relaxed I/O regions have been specified to follow RVWMO. The previous specification implied that PPO rules other than fences and acquire/release annotations did not apply. Constrained the LR/SC reservation set size and shape when using page-based virtual memory. PMP changes require an SFENCE.VMA on any hart that implements page-based virtual memory, even if VM is not currently enabled. Allowed for speculative updates of page table entry A bits. Clarify that if the address-translation algorithm non-speculatively reaches a PTE in which a bit reserved for future standard use is set, a page-fault exception must be raised. Additionally, the following compatible changes have been made since version 1.11: Removed the N extension. Defined the mandatory RV32-only CSR mstatush, which contains most of the same fields as the upper 32 bits of RV64’s mstatus. Defined the mandatory CSR mconfigptr, which if nonzero contains the address of a configuration data structure. Defined optional mseccfg and mseccfgh CSRs, which control the machine’s security configuration. Defined menvcfg, henvcfg, and senvcfg CSRs (and RV32-only menvcfgh and henvcfgh CSRs), which control various characteristics of the execution environment. Designated part of SYSTEM major opcode for custom use. Permitted the unconditional delegation of less-privileged interrupts. Added optional big-endian and bi-endian support. Made priority of load/store/AMO address-misaligned exceptions implementation-defined relative to load/store/AMO page-fault and access-fault exceptions. PMP reset values are now platform-defined. An additional 48 optional PMP registers have been defined. Slightly relaxed the atomicity requirement for A and D bit updates performed by the implementation. Clarify the architectural behavior of address-translation caches Added Sv57 and Sv57x4 address translation modes. Software breakpoint exceptions are permitted to write either 0 or the pc to xtval. Clarified that bare S-mode need not support the SFENCE.VMA instruction. Specified relaxed constraints for implicit reads of non-idempotent regions. Added the Svnapot Standard Extension, along with the N bit in Sv39, Sv48, and Sv57 PTEs. Added the Svpbmt Standard Extension, along with the PBMT bits in Sv39, Sv48, and Sv57 PTEs. Added the Svinval Standard Extension and associated instructions. Finally, the hypervisor architecture proposal has been extensively revised. Preface to Version 1.11 This is version 1.11 of the RISC-V privileged architecture. The document contains the following versions of the RISC-V ISA modules: Module Version Status Machine ISA Supervisor ISA Hypervisor ISA 1.11 1.11 0.3 Ratified Ratified Draft Changes from version 1.10 include: Moved Machine and Supervisor spec to Ratified status. Improvements to the description and commentary. Added a draft proposal for a hypervisor extension. Specified which interrupt sources are reserved for standard use. Allocated some synchronous exception causes for custom use. Specified the priority ordering of synchronous exceptions. Added specification that xRET instructions may, but are not required to, clear LR reservations if A extension present. The virtual-memory system no longer permits supervisor mode to execute instructions from user pages, regardless of the SUM setting. Clarified that ASIDs are private to a hart, and added commentary about the possibility of a future global-ASID extension. SFENCE.VMA semantics have been clarified. Made the mstatus.MPP field WARL, rather than WLRL. Made the unused xip fields WPRI, rather than WIRI. Made the unused misa fields WARL, rather than WIRI. Made the unused pmpaddr and pmpcfg fields WARL, rather than WIRI. Required all harts in a system to employ the same PTE-update scheme as each other. Rectified an editing error that misdescribed the mechanism by which mstatus.xIE is written upon an exception. Described scheme for emulating misaligned AMOs. Specified the behavior of the misa and xepc registers in systems with variable IALIGN. Specified the behavior of writing self-contradictory values to the misa register. Defined the mcountinhibit CSR, which stops performance counters from incrementing to reduce energy consumption. Specified semantics for PMP regions coarser than four bytes. Specified contents of CSRs across XLEN modification. Moved PLIC chapter into its own document. Preface to Version 1.10 This is version 1.10 of the RISC-V privileged architecture proposal. Changes from version 1.9.1 include: The previous version of this document was released under a Creative Commons Attribution 4.0 International License by the original authors, and this and future versions of this document will be released under the same license. The explicit convention on shadow CSR addresses has been removed to reclaim CSR space. Shadow CSRs can still be added as needed. The mvendorid register now contains the JEDEC code of the core provider as opposed to a code supplied by the Foundation. This avoids redundancy and offloads work from the Foundation. The interrupt-enable stack discipline has been simplified. An optional mechanism to change the base ISA used by supervisor and user modes has been added to the mstatus CSR, and the field previously called Base in misa has been renamed to MXL for consistency. Clarified expected use of XS to summarize additional extension state status fields in mstatus. Optional vectored interrupt support has been added to the mtvec and stvec CSRs. The SEIP and UEIP bits in the mip CSR have been redefined to support software injection of external interrupts. The mbadaddr register has been subsumed by a more general mtval register that can now capture bad instruction bits on an illegal-instruction fault to speed instruction emulation. The machine-mode base-and-bounds translation and protection schemes have been removed from the specification as part of moving the virtual memory configuration to sptbr (now satp). Some of the motivation for the base and bound schemes are now covered by the PMP registers, but space remains available in mstatus to add these back at a later date if deemed useful. In systems with only M-mode, or with both M-mode and U-mode but without U-mode trap support, the medeleg and mideleg registers now do not exist, whereas previously they returned zero. Virtual-memory page faults now have mcause values distinct from physical-memory access faults. Page-fault exceptions can now be delegated to S-mode without delegating exceptions generated by PMA and PMP checks. An optional physical-memory protection (PMP) scheme has been proposed. The supervisor virtual memory configuration has been moved from the mstatus register to the sptbr register. Accordingly, the sptbr register has been renamed to satp (Supervisor Address Translation and Protection) to reflect its broadened role. The SFENCE.VM instruction has been removed in favor of the improved SFENCE.VMA instruction. The mstatus bit MXR has been exposed to S-mode via sstatus. The polarity of the PUM bit in sstatus has been inverted to shorten code sequences involving MXR. The bit has been renamed to SUM. Hardware management of page-table entry Accessed and Dirty bits has been made optional; simpler implementations may trap to software to set them. The counter-enable scheme has changed, so that S-mode can control availability of counters to U-mode. H-mode has been removed, as we are focusing on recursive virtualization support in S-mode. The encoding space has been reserved and may be repurposed at a later date. A mechanism to improve virtualization performance by trapping S-mode virtual-memory management operations has been added. The Supervisor Binary Interface (SBI) chapter has been removed, so that it can be maintained as a separate specification. Preface to Version 1.9.1 This is version 1.9.1 of the RISC-V privileged architecture proposal. Changes from version 1.9 include: Numerous additions and improvements to the commentary sections. Change configuration string proposal to be use a search process that supports various formats including Device Tree String and flattened Device Tree. Made misa optionally writable to support modifying base and supported ISA extensions. CSR address of misa changed. Added description of debug mode and debug CSRs. Added a hardware performance monitoring scheme. Simplified the handling of existing hardware counters, removing privileged versions of the counters and the corresponding delta registers. Fixed description of SPIE in presence of user-level interrupts.","title":"Preface","component":"isa","version":"v20250508","name":"priv-preface","url":"/isa/priv/priv-preface.html","titles":[]},"5":{"id":5,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Preamble This document is a derivative of “The RISC-V Instruction Set Manual, Volume I: User-Level ISA Version 2.1” released under the following license: ©2010-2017 Andrew Waterman, Yunsup Lee, David Patterson, Krste Asanović. Creative Commons Attribution 4.0 International License. Please cite as: “The RISC-V Instruction Set Manual, Volume I: User-Level ISA, Document Version 20191214-draft”, Editors Andrew Waterman and Krste Asanović, RISC-V Foundation, December 2019. This document is released under a Creative Commons Attribution 4.0 International License. Contributors to all versions of the spec in alphabetical order: Derek Atkins, Arvind, Krste Asanović, Rimas Avižienis, Jacob Bachmeyer, Christopher F. Batten, Allen J. Baum, Abel Bernabeu, Alex Bradbury, Scott Beamer, Hans Boehm, Preston Briggs, Christopher Celio, Chuanhua Chang, David Chisnall, Paul Clayton, Palmer Dabbelt, L Peter Deutsch, Ken Dockser, Paul Donahue, Aaron Durbin, Roger Espasa, Greg Favor, Andy Glew, Shaked Flur, Stefan Freudenberger, Marc Gauthier, Andy Glew, Jan Gray, Gianluca Guida, Michael Hamburg, John Hauser, Christian Herber, John Ingalls, David Horner, Bruce Hoult, Bill Huffman, Alexandre Joannou, Olof Johansson, Ben Keller, David Kruckemyer, Tariq Kurd, Yunsup Lee, Paul Loewenstein, Daniel Lustig, Yatin Manerkar, Luc Maranget, Ben Marshall, Margaret Martonosi, Phil McCoy, Nathan Menhorn, Christoph Müllner, Joseph Myers, Vijayanand Nagarajan, Torbjørn Viem Ness, Rishiyur Nikhil, Jonas Oberhauser, Stefan O’Rear, Markku-Juhani O. Saarinen, Albert Ou, John Ousterhout, Daniel Page, David Patterson, Christopher Pulte, Jose Renau, Josh Scheid, Colin Schmidt, Peter Sewell, Susmit Sarkar, Ved Shanbhogue, Brent Spinney, Brendan Sweeney, Michael Taylor, Wesley Terpstra, Matt Thomas, Tommy Thorn, Philipp Tomsich, Caroline Trippel, Ray VanDeWalker, Muralidaran Vijayaraghavan, Megan Wachs, Paul Wamsley, Andrew Waterman, Robert Watson, David Weaver, Derek Williams, Claire Wolf, Andrew Wright, Reinoud Zandijk, and Sizhuo Zhang. Please contact RISC-V International to suggest corrections.","title":"Preamble","component":"isa","version":"v20250508","name":"unpriv-contributors","url":"/isa/unpriv/unpriv-contributors.html","titles":[{"text":"Contributors","hash":"contributors","id":1}]},"6":{"id":6,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Unprivileged Architecture Version 20250508: This document is in Ratified state.","title":"The RISC-V Instruction Set Manual","component":"isa","version":"v20250508","name":"unpriv-index","url":"/isa/unpriv/unpriv-index.html","titles":[{"text":"Volume I: Unprivileged Architecture","hash":"volume-i-unprivileged-architecture","id":1}]},"7":{"id":7,"text":"ISA Specifications Bibliography Bibliography [1] RISC-V ELF psABI Specification, \\urlhttps://github.com/riscv/riscv-elf-psabi-doc/. [2] The RISC-V Instruction Set Manual, Volume I: Base User-Level ISA Version 2.0, UCB/EECS-2014-54, EECS Department, University of California, Berkeley, May 2014. [3] The RISC-V Instruction Set Manual, Volume I: Base User-Level ISA, UCB/EECS-2011-62, EECS Department, University of California, Berkeley, May 2011. [4] ANSI/IEEE Std 754-2008, IEEE standard for floating-point arithmetic, 2008. [5] D. A. Patterson and C. H. S'equin, \"RISC I: A Reduced Instruction Set VLSI Computer\" in ISCA. 1981, pp. 443-458. [6] K. M. G.H. and S. R. W. and P. D. A. and S. C. H., \"The RISC II micro-architecture\" in Proceedings VLSI 83 Conference. August 1983. [7] D. Ungar and R. Blau and P. Foley and D. Samples and D. Patterson, \"Architecture of SOAR: Smalltalk on a RISC\" in ISCA. Ann Arbor, MI:, 1984, pp. 188—​197. [8] D. D. Lee and S. I. Kong and M. D. H. a. . . . . . . . . . . . . . . . . . G. S. Taylor and D. A. Hodges and R. . . . . . . . . . . . . . . . . . H. Katz and D. A. Patterson, \"A VLSI Chip Set for a Multiprocessor Workstation—​Part I: An RISC Microprocessor with Coprocessor Interface and Support for Symbolic Processing\", IEEE JSSC, vol. 24, no. 6, December 1989. pp. 1688—​1698. [9] H. Pan and B. Hindman and K. Asanovi'c, \"Lithe: Enabling Efficient Composition of Parallel Libraries\" in Proceedings of the 1st USENIX Workshop on Hot Topics in Parallelism (HotPar~'09). Berkeley, CA:, March 2009. [10] H. Pan and B. Hindman and K. Asanovi'c, \"Composing Parallel Software Efficiently with Lithe\" in 31st Conference on Programming Language Design and Implementation. Toronto, Canada:, June 2010. [11] RISC-V Assembly Programmer’s Manual, \\urlhttps://github.com/riscv/riscv-asm-manual. [12] J. Tseng and K. Asanovi'c, \"Energy-Efficient Register Access\" in Proc. of the 13th Symposium on Integrated Circuits and Systems Design. Manaus, Brazil:, September 2000, pp. 377—​384. [13] Selective Dual Path Execution, University of Wisconsin - Madison, November 1996. [14] K. A. and A. T. and G. D. and C. B., \"Dynamic Hammock Predication for Non-Predicated Instruction Set Architectures\" in Proceedings of the 1998 International Conference on Parallel Architectures and Compilation Techniques, PACT '98. Washington, DC, USA:, 1998. [15] K. Hyesoon and M. Onur and S. Jared and P. Y. N., \"Wish Branches: Combining Conditional Branching and Predication for Adaptive Predicated Execution\" in Proceedings of the 38th annual IEEE/ACM International Symposium on Microarchitecture, MICRO 38. 2005, pp. 43—​54. [16] S. Balaram et al., \"IBM POWER7 multicore server processor\", IBM Journal of Research and Development, vol. 55, no. 3, 2011. pp. 1—​1. [17] T. Marc and C. Jeffrey and C. Shailender and C. A. W. and T. S. Sheung, \"The MAJC Architecture: A Synthesis of Parallelism and Scalability\", IEEE Micro, vol. 20, no. 6, November 2000. pp. 12—​25. [18] K. Gharachorloo and D. Lenoski and J. Laudon and P. Gibbons and A. Gupta and J. . . . . . . . . . . . . . . . . . Hennessy, \"Memory Consistency and Event Ordering in Scalable Shared-Memory Multiprocessors\" in In Proceedings of the 17th Annual International Symposium on Computer Architecture. 1990, pp. 15—​26. [19] R. Ravi and G. J. R., \"Speculative lock elision: enabling highly concurrent multithreaded execution\" in Proceedings of the 34th annual ACM/IEEE International Symposium on Microarchitecture, MICRO 34. IEEE Computer Society, 2001, pp. 294—​305. [20] M. M. M. and S. M. L., \"Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms\" in Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, PODC '96. New York, NY, USA:, Association for Computing Machinery, 1996, pp. 267–275, Available: https://doi.org/10.1145/248052.248106. [21] Roux and Pierre, \"Innocuous Double Rounding of Basic Arithmetic Operations\", Journal of Formalized Reasoning, vol. 7, no. 1, Nov 2014. pp. 131-142, [Online]. Available: https://hal.archives-ouvertes.fr/hal-01091186. [22] W. Buchholz, Planning a computer system: Project Stretch. McGraw-Hill Book Company, 1962. [23] G. M. Amdahl and G. A. Blaauw and F. P. B. Jr., \"Architecture of the IBM System/360\", IBM Journal of R. \\& D., vol. 8, no. 2, 1964. [24] Thornton and J. E., \"Parallel Operation in the Control Data 6600\" in Proceedings of the October 27-29, 1964, Fall Joint Computer Conference, Part II: Very High Speed Computer Systems, AFIPS '64 (Fall, part II). 1965, pp. 33—​40. [25] . [26] . [27] SAIL ISA Specification Language. [Online]. Available: https://github.com/rems-project/sail [28] L. R. B and S. ZJ and Y. Y. Lisa and R. R. L and R. M. JB, \"On permutation operations in cipher design\" in International Conference on Information Technology: Coding and Computing, 2004. Proceedings. ITCC 2004., vol. 2. IEEE, 2004, pp. 569—​577. [29] NIST, Secure Hash Standard (SHS), Federal Information Processing Standards Publication FIPS 180-4, August 2015. [Online]. Available: https://doi.org/10.6028/NIST.FIPS.180-4 [30] NIST, Advanced Encryption Standard (AES), Federal Information Processing Standards Publication FIPS 197, November 2001. [Online]. Available: https://doi.org/10.6028/NIST.FIPS.197 [31] M. O. Saarinen, Lightweight SHA ISA, \\urlhttps://github.com/mjosaarinen/lwsha_isa, 03 2020. [32] M. S. Turan and E. Barker and J. K. a. . . . K. A. McKay and M. L. Baish and M. Boyle, Recommendation for the Entropy Sources Used for Random Bit Generation, NIST Special Publication SP 800-90B, January 2018. [33] W. Killmann and W. Schindler, A Proposal for: Functionality classes for random number generators, AIS 20 / AIS 31, Version 2.0, English Translation, BSI, September 2011. [Online]. Available: https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Zertifizierung/Interpretationen/AIS_31_Functionality_classes_for_random_number_generators_e.html [34] E. Barker and J. Kelsey, Recommendation for Random Number Generation Using Deterministic Random Bit Generators, NIST Special Publication SP 800-90A Revision 1, June 2015. [35] E. Barker and J. Kelsey and A. R. a. . . . M. S. Turan and D. Buller and A. Kaufer, Recommendation for Random Bit Generator (RBG) Constructions, Draft NIST Special Publication SP 800-90C, March 2021. [36] NIST, Submission Requirements and Evaluation Criteria for the Post-Quantum Cryptography Standardization Process, Official Call for Proposals, National Institute for Standards and Technology, December 2016. [Online]. Available: http://csrc.nist.gov/groups/ST/post-quantum-crypto/documents/call-for-proposals-final-dec-2016.pdf [37] Information technology — Security techniques — Testing methods for the mitigation of non-invasive attack classes against cryptographic modules, ISO/IEC 17825:2016, International Organization for Standardization, 2016. [38] M. O. Saarinen, Lightweight AES ISA, \\urlhttps://github.com/mjosaarinen/lwaes_isa, 01 2020. [39] M. Ben and N. G. Richard and P. Dan and S. M. O. and W. Claire, \"The design of scalar AES Instruction Set Extensions for RISC-V\", IACR Transactions on Cryptographic Hardware and Embedded Systems, vol. 2021, no. 1, Dec. 2020. pp. 109-136, [Online]. Available: https://tches.iacr.org/index.php/TCHES/article/view/8729. [40] XCrypto: a cryptographic ISE for RISC-V, 1.0.0, 2019. [Online]. Available: https://github.com/scarv/xcrypto [41] M. Dworkin, Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC, NIST Special Publication SP 800-38D, November 2007. [Online]. Available: https://doi.org/10.6028/NIST.SP.800-38D [42] NIST, SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions, Federal Information Processing Standards Publication FIPS 202, August 2015. [Online]. Available: https://doi.org/10.6028/NIST.FIPS.202 [43] B. Andrey et al., \"PRESENT: An ultra-lightweight block cipher\" in International workshop on cryptographic hardware and embedded systems. Springer, 2007, pp. 450—​466. [44] Z. Wentao and B. Zhenzhen and L. Dongdai and R. Vincent and Y. Bohan and V. Ingrid, \"RECTANGLE: a bit-slice lightweight block cipher suitable for multiple platforms\", Science China Information Sciences, vol. 58, no. 12, 2015. pp. 1—​15. [45] B. Subhadeep and P. S. Kumar and P. Thomas and S. Yu and S. S. Meng and T. Yosuke, \"GIFT: a small present\" in International Conference on Cryptographic Hardware and Embedded Systems. Springer, 2017, pp. 321—​345. [46] S. Tomoyasu and M. Kazuhiko and M. Sumio and K. Eita, \"TWINE: A Lightweight Block Cipher for Multiple Platforms\" in International Conference on Selected Areas in Cryptography. Springer, 2012, pp. 339—​354. [47] B. Christof et al., \"The SKINNY family of block ciphers and its low-latency variant MANTIS\" in Annual International Cryptology Conference. Springer, 2016, pp. 123—​153. [48] B. Subhadeep et al., \"Midori: A block cipher for low energy\" in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2015, pp. 411—​436. [49] A. Kazumaro et al., \"Camellia: A 128-bit block cipher suitable for multiple platforms—design andanalysis\" in International Workshop on Selected Areas in Cryptography. Springer, 2000, pp. 39—​56. [50] K. Daesung et al., \"New block cipher: ARIA\" in International Conference on Information Security and Cryptology. Springer, 2003, pp. 432—​445. [51] GB/T 32907-2016: SM4 Block Cipher Algorithm, Also GM/T 0002-2012. Standardization Administration of China, August 2016. [Online]. Available: http://www.gmbz.org.cn/upload/2018-04-04/1522788048733065000.pdf [52] M. O. Saarinen, On Entropy and Bit Patterns of Ring Oscillator Jitter, Preprint, February 2021. [Online]. Available: https://arxiv.org/abs/2102.02196 [53] NIST and CCCS, Implementation Guidance for FIPS 140-3 and the Cryptographic Module Validation Program, CMVP, May 2021. [Online]. Available: https://csrc.nist.gov/CSRC/media/Projects/cryptographic-module-validation-program/documents/fips%20140-3/FIPS%20140-3%20IG.pdf [54] C. Criteria, Common Methodology for Information Technology Security Evaluation: Evaluation methodology, Specification: Version 3.1 Revision 5, April 2017. [Online]. Available: https://commoncriteriaportal.org/cc/ [55] NIST, Security Requirements for Cryptographic Modules, Federal Information Processing Standards Publication FIPS 140-3, March 2019. [Online]. Available: https://doi.org/10.6028/NIST.FIPS.140-3 [56] [57] NSA/CSS, Commercial National Security Algorithm Suite, August 2015. [Online]. Available: https://apps.nsa.gov/iaarchive/programs/iad-initiatives/cnsa-suite.cfm [58] R. Bardou and R. Focardi and Y. K. a. . . . L. Simionato and G. Steel and J. Tsay, \"Efficient Padding Oracle Attacks on Cryptographic Hardware\" in Advances in Cryptology - CRYPTO 2012 - 32nd Annual Cryptology Conference, Santa Barbara, CA, USA, August 19-23, 2012. Proceedings. 2012, pp. 608—​625. [59] D. Moghimi and B. Sunar and T. E. a. . . . N. Heninger, \"TPM-FAIL: TPM meets Timing and Lattice Attacks\" in 29th USENIX Security Symposium (USENIX Security 20). USENIX Association, August 2020, pp. To appear, Available: https://www.usenix.org/conference/usenixsecurity20/presentation/moghimi-tpm [60] R. J. Anderson, Security engineering - a guide to building dependable distributed systems (3. ed.). Wiley, December 2020, Available: https://www.cl.cam.ac.uk/~rja14/book.html [61] D. Karaklajic and J. Schmidt and I. . . . Verbauwhede, \"Hardware Designer’s Guide to Fault Attacks\", IEEE Trans. Very Large Scale Integr. Syst., vol. 21, no. 12, 2013. pp. 2295—​2306. [62] D. Evtyushkin and D. V. Ponomarev, \"Covert Channels through Random Number Generator: Mechanisms, Capacity Estimation and Mitigations\" in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016. 2016, pp. 843—​857. [63] M. Baudet and D. Lubicz and J. M. a. . . . A. Tassiaux, \"On the Security of Oscillator-Based Random Number Generators\", J. Cryptology, vol. 24, no. 2, 2011. pp. 398—​425. [64] AMD, AMD Random Number Generator, AMD TechDocs, June 2017. [Online]. Available: https://www.amd.com/system/files/TechDocs/amd-random-number-generator.pdf [65] ARM, ARM TrustZone True Random Number Generator: Technical Reference Manual, ARM 100976\\_0000\\_00\\_en (rev. r0p0), May 2017. [Online]. Available: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100976_0000_00_en [66] J. S. Liberty et al., \"True hardware random number generation implemented in the 32-nm SOI POWER7+ processor\", IBM J. Res. Dev., vol. 57, no. 6, 2013. [67] M. Varchola and M. Drutarovsk'y, \"New High Entropy Element for FPGA Based True Random Number Generators\" in Cryptographic Hardware and Embedded Systems, CHES 2010, 12th International Workshop, Santa Barbara, CA, USA, August 17-20, 2010. Proceedings. 2010, pp. 351—​365. [68] M. Hamburg and P. Kocher and M. E. Marson, Analysis of Intel’s Ivy Bridge Digital Random Number Generator, Technical Report, Cryptography Research (Prepared for Intel), March 2012. [69] B. Valtchanov and V. Fischer and A. A. a. . . . F. Bernard, \"Characterization of randomness sources in ring oscillator-based true random number generators in FPGAs\" in 13th IEEE International Symposium on Design and Diagnostics of Electronic Circuits and Systems, DDECS 2010, Vienna, Austria, April 14-16, 2010. 2010, pp. 48—​53. [70] P. Bak, \"The Devil’s Staircase\", Phys. Today, vol. 39, no. 12, December 1986. pp. 38—​45. [71] A. T. Markettos and S. W. Moore, \"The Frequency Injection Attack on Ring-Oscillator-Based True Random Number Generators\" in Cryptographic Hardware and Embedded Systems - CHES 2009, 11th International Workshop, Lausanne, Switzerland, September 6-9, 2009, Proceedings. 2009, pp. 317—​331. [72] Rambus, TRNG-IP-76 / EIP-76 Family of FIPS Approved True Random Generators, Commercial Crypto IP. Formerly (2017) available from Inside Secure., 2020. [Online]. Available: https://www.rambus.com/security/crypto-accelerator-hardware-cores/basic-crypto-blocks/trng-ip-76/ [73] M. Blum, \"Independent unbiased coin flips from a correlated biased source — A finite state Markov chain\", Combinatorica, vol. 6, no. 2, 1986. pp. 97—​108. [74] P. Lacharme, \"Post-Processing Functions for a Biased Physical Random Number Generator\" in Fast Software Encryption, 15th International Workshop, FSE 2008, Lausanne, Switzerland, February 10-13, 2008, Revised Selected Papers. 2008, pp. 334—​342. [75] J. P. Mechalas, Intel Digital Random Number Generator (DRNG) Software Implementation Guide, Intel Technical Report, Version 2.1, October 2018. [Online]. Available: https://software.intel.com/content/www/us/en/develop/articles/intel-digital-random-number-generator-drng-software-implementation-guide.html [76] S. M\\\"uller, Documentation and Analysis of the Linux Random Number Generator, Version 3.6, Prepared for BSI by atsec information security GmbH, April 2020. [Online]. Available: https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/LinuxRNG/LinuxRNG_EN.pdf [77] ITU, Quantum noise random number generator architecture, Recommendation ITU-T X.1702, November 2019. [Online]. Available: https://www.itu.int/rec/T-REC-X.1702-201911-I/en [78] D. Hurley-Smith and J. C. Hern'andez-Castro, \"Quantum Leap and Crash: Searching and Finding Bias in Quantum Random Number Generators\", ACM Transactions on Privacy and Security, vol. 23, no. 3, June 2020. pp. 1—​25. [79] P. W. Shor, \"Algorithms for quantum computation: Discrete logarithms and factoring\" in 35th Annual Symposium on Foundations of Computer Science, Santa Fe, New Mexico, USA, 20-22 November 1994. IEEE, 1994, pp. 124—​134, Available: https://arxiv.org/abs/quant-ph/9508027. [80] L. Blum and M. Blum and M. Shub, \"A Simple Unpredictable Pseudo-Random Number Generator\", SIAM J. Comput., vol. 15, no. 2, 1986. pp. 364—​383. [81] L. K. Grover, \"A Fast Quantum Mechanical Algorithm for Database Search\" in Proceedings of the Twenty-eighth Annual ACM Symposium on Theory of Computing, STOC '96. ACM, 1996, pp. 212—​219, Available: http://arxiv.org/pdf/quant-ph/9605043. [82] S. Jaques and M. Naehrig and M. R. a. . . . F. Virdia, \"Implementing Grover Oracles for Quantum Key Search on AES and LowMC\" in Advances in Cryptology - EUROCRYPT 2020 - 39th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Zagreb, Croatia, May 10-14, 2020, Proceedings, Part II. 2020, pp. 280—​310, Available: https://arxiv.org/pdf/1910.01700.pdf. [83] NIST, Digital Signature Standard (DSS), Federal Information Processing Standards Publication FIPS 186-4, July 2013. [Online]. Available: https://doi.org/10.6028/NIST.FIPS.186-4 [84] Goldberg and R. P., \"Survey of virtual machine research\", Computer, vol. 7, no. 6, June 1974. pp. 34-45. [85] [86] N. Juan and I. Sitaram and D. Peter and C. Alan, \"Practical, Transparent Operating System Support for Superpages\", SIGOPS Oper. Syst. Rev., vol. 36, no. SI, dec 2002. pp. 89—​104, [Online]. Available: https://doi.org/10.1145/844128.844138. [87] K. S. a. . . . . . . . . . . . . . . . . . E. S. a. . . . . . . . . . . . . . . . . . A. S. a. . . . . . . . . . . . . . . . . . V. T. a. . . . . . . . . . . . . . . . . . D. Vyukov, \"Memory Tagging and how it improves C/C++ memory safety\", CoRR, vol. abs/1802.09517, 2018. [Online]. Available: http://arxiv.org/abs/1802.09517","title":"Bibliography","component":"isa","version":"v20250508","name":"bibliography","url":"/isa/biblio/bibliography.html","titles":[]},"8":{"id":8,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"H\" Extension for Hypervisor Support, Version 1.0 This chapter describes the RISC-V hypervisor extension, which virtualizes the supervisor-level architecture to support the efficient hosting of guest operating systems atop a type-1 or type-2 hypervisor. The hypervisor extension changes supervisor mode into hypervisor-extended supervisor mode (HS-mode, or hypervisor mode for short), where a hypervisor or a hosting-capable operating system runs. The hypervisor extension also adds another stage of address translation, from guest physical addresses to supervisor physical addresses, to virtualize the memory and memory-mapped I/O subsystems for a guest operating system. HS-mode acts the same as S-mode, but with additional instructions and CSRs that control the new stage of address translation and support hosting a guest OS in virtual S-mode (VS-mode). Regular S-mode operating systems can execute without modification either in HS-mode or as VS-mode guests. In HS-mode, an OS or hypervisor interacts with the machine through the same SBI as an OS normally does from S-mode. An HS-mode hypervisor is expected to implement the SBI for its VS-mode guest. The hypervisor extension depends on an \"I\" base integer ISA with 32 x registers (RV32I or RV64I), not RV32E or RV64E, which have only 16 x registers. CSR mtval must not be read-only zero, and standard page-based address translation must be supported, either Sv32 for RV32, or a minimum of Sv39 for RV64. The hypervisor extension is enabled by setting bit 7 in the misa CSR, which corresponds to the letter H. RISC-V harts that implement the hypervisor extension are encouraged not to hardwire misa[7], so that the extension may be disabled. The baseline privileged architecture is designed to simplify the use of classic virtualization techniques, where a guest OS is run at user-level, as the few privileged instructions can be easily detected and trapped. The hypervisor extension improves virtualization performance by reducing the frequency of these traps. The hypervisor extension has been designed to be efficiently emulable on platforms that do not implement the extension, by running the hypervisor in S-mode and trapping into M-mode for hypervisor CSR accesses and to maintain shadow page tables. The majority of CSR accesses for type-2 hypervisors are valid S-mode accesses so need not be trapped. Hypervisors can support nested virtualization analogously. The current virtualization mode, denoted V, indicates whether the hart is currently executing in a guest. When V=1, the hart is either in virtual S-mode (VS-mode), or in virtual U-mode (VU-mode) atop a guest OS running in VS-mode. When V=0, the hart is either in M-mode, in HS-mode, or in U-mode atop an OS running in HS-mode. The virtualization mode also indicates whether two-stage address translation is active (V=1) or inactive (V=0). Privilege modes with the hypervisor extension. lists the possible privilege modes of a RISC-V hart with the hypervisor extension. Table 1. Privilege modes with the hypervisor extension. Virtualization Mode (V) Nominal Privilege Abbreviation Name Two-Stage Translation 0 0 0 U S M U-mode HS-mode M-mode User mode Hypervisor-extended supervisor mode Machine mode Off Off Off 1 1 U S VU-mode VS-mode Virtual user mode Virtual supervisor mode On On For privilege modes U and VU, the nominal privilege mode is U, and for privilege modes HS and VS, the nominal privilege mode is S. HS-mode is more privileged than VS-mode, and VS-mode is more privileged than VU-mode. VS-mode interrupts are globally disabled when executing in U-mode. This description does not consider the possibility of U-mode or VU-mode interrupts and will be revised if an extension for user-level interrupts is adopted. An OS or hypervisor running in HS-mode uses the supervisor CSRs to interact with the exception, interrupt, and address-translation subsystems. Additional CSRs are provided to HS-mode, but not to VS-mode, to manage two-stage address translation and to control the behavior of a VS-mode guest: hstatus, hedeleg, hideleg, hvip, hip, hie, hgeip, hgeie, henvcfg, henvcfgh, hcounteren, htimedelta, htimedeltah, htval, htinst, and hgatp. Furthermore, several virtual supervisor CSRs (VS CSRs) are replicas of the normal supervisor CSRs. For example, vsstatus is the VS CSR that duplicates the usual sstatus CSR. When V=1, the VS CSRs substitute for the corresponding supervisor CSRs, taking over all functions of the usual supervisor CSRs except as specified otherwise. Instructions that normally read or modify a supervisor CSR shall instead access the corresponding VS CSR. When V=1, an attempt to read or write a VS CSR directly by its own separate CSR address causes a virtual-instruction exception. (Attempts from U-mode cause an illegal-instruction exception as usual.) The VS CSRs can be accessed as themselves only from M-mode or HS-mode. While V=1, the normal HS-level supervisor CSRs that are replaced by VS CSRs retain their values but do not affect the behavior of the machine unless specifically documented to do so. Conversely, when V=0, the VS CSRs do not ordinarily affect the behavior of the machine other than being readable and writable by CSR instructions. Some standard supervisor CSRs (senvcfg, scounteren, and scontext, possibly others) have no matching VS CSR. These supervisor CSRs continue to have their usual function and accessibility even when V=1, except with VS-mode and VU-mode substituting for HS-mode and U-mode. Hypervisor software is expected to manually swap the contents of these registers as needed. Matching VS CSRs exist only for the supervisor CSRs that must be duplicated, which are mainly those that get automatically written by traps or that impact instruction execution immediately after trap entry and/or right before SRET, when software alone is unable to swap a CSR at exactly the right moment. Currently, most supervisor CSRs fall into this category, but future ones might not. In this chapter, we use the term HSXLEN to refer to the effective XLEN when executing in HS-mode, and VSXLEN to refer to the effective XLEN when executing in VS-mode. The hstatus register is an HSXLEN-bit read/write register formatted as shown in Hypervisor status register (hstatus) when HSXLEN=32 when HSXLEN=32 and Hypervisor status register (hstatus) when HSXLEN=64. when HSXLEN=64. The hstatus register provides facilities analogous to the mstatus register for tracking and controlling the exception behavior of a VS-mode guest. Figure 1. Hypervisor status register (hstatus) when HSXLEN=32 Figure 2. Hypervisor status register (hstatus) when HSXLEN=64. The VSXL field controls the effective XLEN for VS-mode (known as VSXLEN), which may differ from the XLEN for HS-mode (HSXLEN). When HSXLEN=32, the VSXL field does not exist, and VSXLEN=32. When HSXLEN=64, VSXL is a WARL field that is encoded the same as the MXL field of misa, shown in Encoding of MXL field in misa. In particular, an implementation may make VSXL be a read-only field whose value always ensures that VSXLEN=HSXLEN. If HSXLEN is changed from 32 to a wider width, and if field VSXL is not restricted to a single value, it gets the value corresponding to the widest supported width not wider than the new HSXLEN. The hstatus fields VTSR, VTW, and VTVM are defined analogously to the mstatus fields TSR, TW, and TVM, but affect execution only in VS-mode, and cause virtual-instruction exceptions instead of illegal-instruction exceptions. When VTSR=1, an attempt in VS-mode to execute SRET raises a virtual-instruction exception. When VTW=1 (and assuming mstatus.TW=0), an attempt in VS-mode to execute WFI raises a virtual-instruction exception if the WFI does not complete within an implementation-specific, bounded time limit. An implementation may have WFI always raise a virtual-instruction exception in VS-mode when VTW=1 (and mstatus.TW=0), even if there are pending globally-disabled interrupts when the instruction is executed. When VTVM=1, an attempt in VS-mode to execute SFENCE.VMA or SINVAL.VMA or to access CSR satp raises a virtual-instruction exception. The VGEIN (Virtual Guest External Interrupt Number) field selects a guest external interrupt source for VS-level external interrupts. VGEIN is a WLRL field that must be able to hold values between zero and the maximum guest external interrupt number (known as GEILEN), inclusive. When VGEIN=0, no guest external interrupt source is selected for VS-level external interrupts. GEILEN may be zero, in which case VGEIN may be read-only zero. Guest external interrupts are explained in Hypervisor Guest External Interrupt Registers (hgeip and hgeie), and the use of VGEIN is covered further in Hypervisor Interrupt (hvip, hip, and hie) Registers. Field HU (Hypervisor in U-mode) controls whether the virtual-machine load/store instructions, HLV, HLVX, and HSV, can be used also in U-mode. When HU=1, these instructions can be executed in U-mode the same as in HS-mode. When HU=0, all hypervisor instructions cause an illegal-instruction exception in U-mode. The HU bit allows a portion of a hypervisor to be run in U-mode for greater protection against software bugs, while still retaining access to a virtual machine’s memory. The SPV bit (Supervisor Previous Virtualization mode) is written by the implementation whenever a trap is taken into HS-mode. Just as the SPP bit in sstatus is set to the (nominal) privilege mode at the time of the trap, the SPV bit in hstatus is set to the value of the virtualization mode V at the time of the trap. When an SRET instruction is executed when V=0, V is set to SPV. When V=1 and a trap is taken into HS-mode, bit SPVP (Supervisor Previous Virtual Privilege) is set to the nominal privilege mode at the time of the trap, the same as sstatus.SPP. But if V=0 before a trap, SPVP is left unchanged on trap entry. SPVP controls the effective privilege of explicit memory accesses made by the virtual-machine load/store instructions, HLV, HLVX, and HSV. Without SPVP, if instructions HLV, HLVX, and HSV looked instead to sstatus.SPP for the effective privilege of their memory accesses, then, even with HU=1, U-mode could not access virtual machine memory at VS-level, because to enter U-mode using SRET always leaves SPP=0. Unlike SPP, field SPVP is untouched by transitions back-and-forth between HS-mode and U-mode. Field GVA (Guest Virtual Address) is written by the implementation whenever a trap is taken into HS-mode. For any trap (breakpoint, address misaligned, access fault, page fault, or guest-page fault) that writes a guest virtual address to stval, GVA is set to 1. For any other trap into HS-mode, GVA is set to 0. For breakpoint and memory access traps that write a nonzero value to stval, GVA is redundant with field SPV (the two bits are set the same) except when the explicit memory access of an HLV, HLVX, or HSV instruction causes a fault. In that case, SPV=0 but GVA=1. The VSBE bit is a WARL field that controls the endianness of explicit memory accesses made from VS-mode. If VSBE=0, explicit load and store memory accesses made from VS-mode are little-endian, and if VSBE=1, they are big-endian. VSBE also controls the endianness of all implicit accesses to VS-level memory management data structures, such as page tables. An implementation may make VSBE a read-only field that always specifies the same endianness as HS-mode. Register hedeleg is a 64-bit read/write register, formatted as shown in Hypervisor exception delegation register (hedeleg).. Register hideleg is an HSXLEN-bit read/write register, formatted as shown in Hypervisor interrupt delegation register (hideleg).. By default, all traps at any privilege level are handled in M-mode, though M-mode usually uses the medeleg and mideleg CSRs to delegate some traps to HS-mode. The hedeleg and hideleg CSRs allow these traps to be further delegated to a VS-mode guest; their layout is the same as medeleg and mideleg. Hypervisor exception delegation register (hedeleg). bytefield/hedelegreg.edn[] Figure 3. Hypervisor interrupt delegation register (hideleg). A synchronous trap that has been delegated to HS-mode (using medeleg) is further delegated to VS-mode if V=1 before the trap and the corresponding hedeleg bit is set. Each bit of hedeleg shall be either writable or read-only zero. Many bits of hedeleg are required specifically to be writable or zero, as enumerated in Bits of hedeleg that must be writable or must be read-only zero.. Bit 0, corresponding to instruction address-misaligned exceptions, must be writable if IALIGN=32. Requiring that certain bits of hedeleg be writable reduces some of the burden on a hypervisor to handle variations of implementation. When XLEN=32, hedelegh is a 32-bit read/write register that aliases bits 63:32 of hedeleg. Register hedelegh does not exist when XLEN=64. An interrupt that has been delegated to HS-mode (using mideleg) is further delegated to VS-mode if the corresponding hideleg bit is set. Among bits 15:0 of hideleg, bits 10, 6, and 2 (corresponding to the standard VS-level interrupts) are writable, and bits 12, 9, 5, and 1 (corresponding to the standard S-level interrupts) are read-only zeros. When a virtual supervisor external interrupt (code 10) is delegated to VS-mode, it is automatically translated by the machine into a supervisor external interrupt (code 9) for VS-mode, including the value written to vscause on an interrupt trap. Likewise, a virtual supervisor timer interrupt (6) is translated into a supervisor timer interrupt (5) for VS-mode, and a virtual supervisor software interrupt (2) is translated into a supervisor software interrupt (1) for VS-mode. Similar translations may or may not be done for platform interrupt causes (codes 16 and above). Table 2. Bits of hedeleg that must be writable or must be read-only zero. Bit Attribute Corresponding Exception 0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 18 19 20 21 22 23 (See text) Writable Writable Writable Writable Writable Writable Writable Writable Read-only 0 Read-only 0 Read-only 0 Writable Writable Writable Read-only 0 Writable Writable Read-only 0 Read-only 0 Read-only 0 Read-only 0 Instruction address misaligned Instruction access fault Illegal instruction Breakpoint Load address misaligned Load access fault Store/AMO address misaligned Store/AMO access fault Environment call from U-mode or VU-mode Environment call from HS-mode Environment call from VS-mode Environment call from M-mode Instruction page fault Load page fault Store/AMO page fault Double trap Software check Hardware error Instruction guest-page fault Load guest-page fault Virtual instruction Store/AMO guest-page fault Register hvip is an HSXLEN-bit read/write register that a hypervisor can write to indicate virtual interrupts intended for VS-mode. Bits of hvip that are not writable are read-only zeros. Figure 4. Hypervisor virtual-interrupt-pending register(hvip). The standard portion (bits 15:0) of hvip is formatted as shown in Standard portion (bits 15:0) of hvip.. Bits VSEIP, VSTIP, and VSSIP of hvip are writable. Setting VSEIP=1 in hvip asserts a VS-level external interrupt; setting VSTIP asserts a VS-level timer interrupt; and setting VSSIP asserts a VS-level software interrupt. Figure 5. Standard portion (bits 15:0) of hvip. Registers hip and hie are HSXLEN-bit read/write registers that supplement HS-level’s sip and sie respectively. The hip register indicates pending VS-level and hypervisor-specific interrupts, while hie contains enable bits for the same interrupts. Figure 6. Hypervisor interrupt-pending register (hip). Figure 7. Hypervisor interrupt-enable register (hie). For each writable bit in sie, the corresponding bit shall be read-only zero in both hip and hie. Hence, the nonzero bits in sie and hie are always mutually exclusive, and likewise for sip and hip. The active bits of hip and hie cannot be placed in HS-level’s sip and sie because doing so would make it impossible for software to emulate the hypervisor extension on platforms that do not implement it in hardware. An interrupt i will trap to HS-mode whenever all of the following are true: (a) either the current operating mode is HS-mode and the SIE bit in the sstatus register is set, or the current operating mode has less privilege than HS-mode; (b) bit i is set in both sip and sie, or in both hip and hie; and (c) bit i is not set in hideleg. If bit i of sie is read-only zero, the same bit in register hip may be writable or may be read-only. When bit i in hip is writable, a pending interrupt i can be cleared by writing 0 to this bit. If interrupt i can become pending in hip but bit i in hip is read-only, then either the interrupt can be cleared by clearing bit i of hvip, or the implementation must provide some other mechanism for clearing the pending interrupt (which may involve a call to the execution environment). A bit in hie shall be writable if the corresponding interrupt can ever become pending in hip. Bits of hie that are not writable shall be read-only zero. The standard portions (bits 15:0) of registers hip and hie are formatted as shown in Standard portion (bits 15:0) of hip. and Standard portion (bits 15:0) of hie. respectively. Figure 8. Standard portion (bits 15:0) of hip. Figure 9. Standard portion (bits 15:0) of hie. Bits hip.SGEIP and hie.SGEIE are the interrupt-pending and interrupt-enable bits for guest external interrupts at supervisor level (HS-level). SGEIP is read-only in hip, and is 1 if and only if the bitwise logical-AND of CSRs hgeip and hgeie is nonzero in any bit. (See Hypervisor Guest External Interrupt Registers (hgeip and hgeie).) Bits hip.VSEIP and hie.VSEIE are the interrupt-pending and interrupt-enable bits for VS-level external interrupts. VSEIP is read-only in hip, and is the logical-OR of these interrupt sources: bit VSEIP of hvip; the bit of hgeip selected by hstatus.VGEIN; and any other platform-specific external interrupt signal directed to VS-level. Bits hip.VSTIP and hie.VSTIE are the interrupt-pending and interrupt-enable bits for VS-level timer interrupts. VSTIP is read-only in hip, and is the logical-OR of hvip.VSTIP and any other platform-specific timer interrupt signal directed to VS-level. Bits hip.VSSIP and hie.VSSIE are the interrupt-pending and interrupt-enable bits for VS-level software interrupts. VSSIP in hip is an alias (writable) of the same bit in hvip. Multiple simultaneous interrupts destined for HS-mode are handled in the following decreasing priority order: SEI, SSI, STI, SGEI, VSEI, VSSI, VSTI, LCOFI. The hgeip register is an HSXLEN-bit read-only register, formatted as shown in Hypervisor guest external interrupt-pending register (hgeip)., that indicates pending guest external interrupts for this hart. The hgeie register is an HSXLEN-bit read/write register, formatted as shown in Hypervisor guest external interrupt-enable register (hgeie)., that contains enable bits for the guest external interrupts at this hart. Guest external interrupt number i corresponds with bit i in both hgeip and hgeie. Figure 10. Hypervisor guest external interrupt-pending register (hgeip). Figure 11. Hypervisor guest external interrupt-enable register (hgeie). Guest external interrupts represent interrupts directed to individual virtual machines at VS-level. If a RISC-V platform supports placing a physical device under the direct control of a guest OS with minimal hypervisor intervention (known as pass-through or direct assignment between a virtual machine and the physical device), then, in such circumstance, interrupts from the device are intended for a specific virtual machine. Each bit of hgeip summarizes all pending interrupts directed to one virtual hart, as collected and reported by an interrupt controller. To distinguish specific pending interrupts from multiple devices, software must query the interrupt controller. Support for guest external interrupts requires an interrupt controller that can collect virtual-machine-directed interrupts separately from other interrupts. The number of bits implemented in hgeip and hgeie for guest external interrupts is UNSPECIFIED and may be zero. This number is known as GEILEN. The least-significant bits are implemented first, apart from bit 0. Hence, if GEILEN is nonzero, bits GEILEN:1 shall be writable in hgeie, and all other bit positions shall be read-only zeros in both hgeip and hgeie. The set of guest external interrupts received and handled at one physical hart may differ from those received at other harts. Guest external interrupt number i at one physical hart is typically expected not to be the same as guest external interrupt i at any other hart. For any one physical hart, the maximum number of virtual harts that may directly receive guest external interrupts is limited by GEILEN. The maximum this number can be for any implementation is 31 for RV32 and 63 for RV64, per physical hart. A hypervisor is always free to emulate devices for any number of virtual harts without being limited by GEILEN. Only direct pass-through (direct assignment) of interrupts is affected by the GEILEN limit, and the limit is on the number of virtual harts receiving such interrupts, not the number of distinct interrupts received. The number of distinct interrupts a single virtual hart may receive is determined by the interrupt controller. Register hgeie selects the subset of guest external interrupts that cause a supervisor-level (HS-level) guest external interrupt. The enable bits in hgeie do not affect the VS-level external interrupt signal selected from hgeip by hstatus.VGEIN. The henvcfg CSR is a 64-bit read/write register, formatted as shown in Hypervisor environment configuration register (henvcfg)., that controls certain characteristics of the execution environment when virtualization mode V=1. Figure 12. Hypervisor environment configuration register (henvcfg). If bit FIOM (Fence of I/O implies Memory) is set to one in henvcfg, FENCE instructions executed when V=1 are modified so the requirement to order accesses to device I/O implies also the requirement to order main memory accesses. Modified interpretation of FENCE predecessor and successor sets when FIOM=1 and virtualization mode V=1. details the modified interpretation of FENCE instruction bits PI, PO, SI, and SO when FIOM=1 and V=1. Similarly, when FIOM=1 and V=1, if an atomic instruction that accesses a region ordered as device I/O has its aq and/or rl bit set, then that instruction is ordered as though it accesses both device I/O and memory. Table 3. Modified interpretation of FENCE predecessor and successor sets when FIOM=1 and virtualization mode V=1. Instruction bit Meaning when set PI PO Predecessor device input and memory reads (PR implied) Predecessor device output and memory writes (PW implied) SI SO Successor device input and memory reads (SR implied) Successor device output and memory writes (SW implied) The PBMTE bit controls whether the Svpbmt extension is available for use in VS-stage address translation. When PBMTE=1, Svpbmt is available for VS-stage address translation. When PBMTE=0, the implementation behaves as though Svpbmt were not implemented for VS-stage address translation. If Svpbmt is not implemented, PBMTE is read-only zero. If the Svadu extension is implemented, the ADUE bit controls whether hardware updating of PTE A/D bits is enabled for VS-stage address translation. When ADUE=1, hardware updating of PTE A/D bits is enabled during VS-stage address translation, and the implementation behaves as though the Svade extension were not implemented for VS-mode address translation. When ADUE=0, the implementation behaves as though Svade were implemented for VS-stage address translation. If Svadu is not implemented, ADUE is read-only zero. The definition of the STCE field is furnished by the Sstc extension. The definition of the CBZE field is furnished by the Zicboz extension. The definitions of the CBCFE and CBIE fields are furnished by the Zicbom extension. The definition of the PMM field is furnished by the Ssnpm extension. The Zicfilp extension adds the LPE field in henvcfg. When the LPE field is set to 1, the Zicfilp extension is enabled in VS-mode. When the LPE field is 0, the Zicfilp extension is not enabled in VS-mode and the following rules apply to VS-mode: The hart does not update the ELP state; it remains as NO_LP_EXPECTED. The LPAD instruction operates as a no-op. The Zicfiss extension adds the SSE field in henvcfg. If the SSE field is set to 1, the Zicfiss extension is activated in VS-mode. When the SSE field is 0, the Zicfiss extension remains inactive in VS-mode, and the following rules apply when V=1: 32-bit Zicfiss instructions will revert to their behavior as defined by Zimop. 16-bit Zicfiss instructions will revert to their behavior as defined by Zcmop. The pte.xwr=010b encoding in VS-stage page tables becomes reserved. The senvcfg.SSE field will read as zero and is read-only. When menvcfg.SSE is one, SSAMOSWAP.W/D raises a virtual-instruction exception. The Ssdbltrp extension adds the double-trap-enable (DTE) field in henvcfg. When henvcfg.DTE is zero, the implementation behaves as though Ssdbltrp is not implemented for VS-mode and the vsstatus.SDT bit is read-only zero. When XLEN=32, henvcfgh is a 32-bit read/write register that aliases bits 63:32 of henvcfg. Register henvcfgh does not exist when XLEN=64. The counter-enable register hcounteren is a 32-bit register that controls the availability of the hardware performance monitoring counters to the guest virtual machine. Figure 13. Hypervisor counter-enable register (hcounteren). When the CY, TM, IR, or HPM_n_ bit in the hcounteren register is clear, attempts to read the cycle, time, instret, or hpmcounter n register while V=1 will cause a virtual-instruction exception if the same bit in mcounteren is 1. When one of these bits is set, access to the corresponding register is permitted when V=1, unless prevented for some other reason. In VU-mode, a counter is not readable unless the applicable bits are set in both hcounteren and scounteren. hcounteren must be implemented. However, any of the bits may be read-only zero, indicating reads to the corresponding counter will cause an exception when V=1. Hence, they are effectively WARL fields. The htimedelta CSR is a 64-bit read/write register that contains the delta between the value of the time CSR and the value returned in VS-mode or VU-mode. That is, reading the time CSR in VS or VU mode returns the sum of the contents of htimedelta and the actual value of time. Because overflow is ignored when summing htimedelta and time, large values of htimedelta may be used to represent negative time offsets. Figure 14. Hypervisor time delta register. When XLEN=32, htimedeltah is a 32-bit read/write register that aliases bits 63:32 of htimedelta. Register htimedeltah does not exist when XLEN=64. If the time CSR is implemented, htimedelta (and htimedeltah for XLEN=32) must be implemented. The htval register is an HSXLEN-bit read/write register formatted as shown in Hypervisor trap value register (htval).. When a trap is taken into HS-mode, htval is written with additional exception-specific information, alongside stval, to assist software in handling the trap. Figure 15. Hypervisor trap value register (htval). When a guest-page-fault trap is taken into HS-mode, htval is written with either zero or the guest physical address that faulted, shifted right by 2 bits. For other traps, htval is set to zero, but a future standard or extension may redefine htval’s setting for other traps. A guest-page fault may arise due to an implicit memory access during first-stage (VS-stage) address translation, in which case a guest physical address written to htval is that of the implicit memory access that faulted—for example, the address of a VS-level page table entry that could not be read. (The guest physical address corresponding to the original virtual address is unknown when VS-stage translation fails to complete.) Additional information is provided in CSR htinst to disambiguate such situations. Otherwise, for misaligned loads and stores that cause guest-page faults, a nonzero guest physical address in htval corresponds to the faulting portion of the access as indicated by the virtual address in stval. For instruction guest-page faults on systems with variable-length instructions, a nonzero htval corresponds to the faulting portion of the instruction as indicated by the virtual address in stval. A guest physical address written to htval is shifted right by 2 bits to accommodate addresses wider than the current XLEN. For RV32, the hypervisor extension permits guest physical addresses as wide as 34 bits, and htval reports bits 33:2 of the address. This shift-by-2 encoding of guest physical addresses matches the encoding of physical addresses in PMP address registers (Physical Memory Protection) and in page table entries (Sv32: Page-Based 32-bit Virtual-Memory Systems, Sv32: Page-Based 39-bit Virtual-Memory Systems, Sv48: Page-Based 48-bit Virtual-Memory Systems, and xref:supervisor.adoc#sv57[\"Sv57: Page-Based 57-bit Virtual-Memory System). If the least-significant two bits of a faulting guest physical address are needed, these bits are ordinarily the same as the least-significant two bits of the faulting virtual address in stval. For faults due to implicit memory accesses for VS-stage address translation, the least-significant two bits are instead zeros. These cases can be distinguished using the value provided in register htinst. htval is a WARL register that must be able to hold zero and may be capable of holding only an arbitrary subset of other 2-bit-shifted guest physical addresses, if any. Unless it has reason to assume otherwise (such as a platform standard), software that writes a value to htval should read back from htval to confirm the stored value. The htinst register is an HSXLEN-bit read/write register formatted as shown in Hypervisor trap instruction (htinst) register.. When a trap is taken into HS-mode, htinst is written with a value that, if nonzero, provides information about the instruction that trapped, to assist software in handling the trap. The values that may be written to htinst on a trap are documented in Transformed Instruction or Pseudoinstruction for mtinst or htinst. Figure 16. Hypervisor trap instruction (htinst) register. htinst is a WARL register that need only be able to hold the values that the implementation may automatically write to it on a trap. The hgatp register is an HSXLEN-bit read/write register, formatted as shown in Hypervisor guest address translation and protection register hgatp when HSXLEN=32. for HSXLEN=32 and Hypervisor guest address translation and protection register hgatp when HSXLEN=64 for MODE values Bare, Sv39x4, Sv48x4, and Sv57x4. for HSXLEN=64, which controls G-stage address translation and protection, the second stage of two-stage translation for guest virtual addresses (see Two-Stage Address Translation). Similar to CSR satp, this register holds the physical page number (PPN) of the guest-physical root page table; a virtual machine identifier (VMID), which facilitates address-translation fences on a per-virtual-machine basis; and the MODE field, which selects the address-translation scheme for guest physical addresses. When mstatus.TVM=1, attempts to read or write hgatp while executing in HS-mode will raise an illegal-instruction exception. Figure 17. Hypervisor guest address translation and protection register hgatp when HSXLEN=32. Figure 18. Hypervisor guest address translation and protection register hgatp when HSXLEN=64 for MODE values Bare, Sv39x4, Sv48x4, and Sv57x4. Encoding of hgatp MODE field. shows the encodings of the MODE field when HSXLEN=32 and HSXLEN=64. When MODE=Bare, guest physical addresses are equal to supervisor physical addresses, and there is no further memory protection for a guest virtual machine beyond the physical memory protection scheme described in Physical Memory Protection. In this case, software must write zero to the remaining fields in hgatp. Attempting to select MODE=Bare with a nonzero pattern in the remaining fields has an UNSPECIFIED effect on the value that the remaining fields assume and an UNSPECIFIED effect on G-stage address translation and protection behavior. When HSXLEN=32, the only other valid setting for MODE is Sv32x4, which is a modification of the usual Sv32 paged virtual-memory scheme, extended to support 34-bit guest physical addresses. When HSXLEN=64, modes Sv39x4, Sv48x4, and Sv57x4 are defined as modifications of the Sv39, Sv48, and Sv57 paged virtual-memory schemes. All of these paged virtual-memory schemes are described in Guest Physical Address Translation. The remaining MODE settings when HSXLEN=64 are reserved for future use and may define different interpretations of the other fields in hgatp. Table 4. Encoding of hgatp MODE field. HSXLEN=32 Value Name Description 0 1 Bare Sv32x4 No translation or protection. Page-based 34-bit virtual addressing (2-bit extension of Sv32). HSXLEN=64 Value Name Description 0 1-7 8 9 10 11-15 Bare — Sv39x4 Sv48x4 Sv57x4 — No translation or protection. Reserved Page-based 41-bit virtual addressing (2-bit extension of Sv39). Page-based 50-bit virtual addressing (2-bit extension of Sv48). Page-based 59-bit virtual addressing (2-bit extension of Sv57). Reserved Implementations are not required to support all defined MODE settings when HSXLEN=64. A write to hgatp with an unsupported MODE value is not ignored as it is for satp. Instead, the fields of hgatp are WARL in the normal way, when so indicated. As explained in Guest Physical Address Translation, for the paged virtual-memory schemes (Sv32x4, Sv39x4, Sv48x4, and Sv57x4), the root page table is 16 KiB and must be aligned to a 16-KiB boundary. In these modes, the lowest two bits of the physical page number (PPN) in hgatp always read as zeros. An implementation that supports only the defined paged virtual-memory schemes and/or Bare may make PPN[1:0] read-only zero. The number of VMID bits is UNSPECIFIED and may be zero. The number of implemented VMID bits, termed VMIDLEN, may be determined by writing one to every bit position in the VMID field, then reading back the value in hgatp to see which bit positions in the VMID field hold a one. The least-significant bits of VMID are implemented first: that is, if VMIDLEN > 0, VMID[VMIDLEN-1:0] is writable. The maximal value of VMIDLEN, termed VMIDMAX, is 7 for Sv32x4 or 14 for Sv39x4, Sv48x4, and Sv57x4. The hgatp register is considered active for the purposes of the address-translation algorithm unless the effective privilege mode is U and hstatus.HU=0. This definition simplifies the implementation of speculative execution of HLV, HLVX, and HSV instructions. Note that writing hgatp does not imply any ordering constraints between page-table updates and subsequent G-stage address translations. If the new virtual machine’s guest physical page tables have been modified, or if a VMID is reused, it may be necessary to execute an HFENCE.GVMA instruction (see Hypervisor Memory-Management Fence Instructions) before or after writing hgatp. The vsstatus register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register sstatus, formatted as shown in Virtual supervisor status (vsstatus) register when VSXLEN=32. when VSXLEN=32 and Virtual supervisor status (vsstatus) register when VSXLEN=64. when VSXLEN=64. When V=1, vsstatus substitutes for the usual sstatus, so instructions that normally read or modify sstatus actually access vsstatus instead. Figure 19. Virtual supervisor status (vsstatus) register when VSXLEN=32. Figure 20. Virtual supervisor status (vsstatus) register when VSXLEN=64. The UXL field controls the effective XLEN for VU-mode, which may differ from the XLEN for VS-mode (VSXLEN). When VSXLEN=32, the UXL field does not exist, and VU-mode XLEN=32. When VSXLEN=64, UXL is a WARL field that is encoded the same as the MXL field of misa, shown in Encoding of MXL field in misa. In particular, an implementation may make UXL be a read-only copy of field VSXL of hstatus, forcing VU-mode XLEN=VSXLEN. If VSXLEN is changed from 32 to a wider width, and if field UXL is not restricted to a single value, it gets the value corresponding to the widest supported width not wider than the new VSXLEN. When V=1, both vsstatus.FS and the HS-level sstatus.FS are in effect. Attempts to execute a floating-point instruction when either field is 0 (Off) raise an illegal-instruction exception. Modifying the floating-point state when V=1 causes both fields to be set to 3 (Dirty). For a hypervisor to benefit from the extension context status, it must have its own copy in the HS-level sstatus, maintained independently of a guest OS running in VS-mode. While a version of the extension context status obviously must exist in vsstatus for VS-mode, a hypervisor cannot rely on this version being maintained correctly, given that VS-level software can change vsstatus.FS arbitrarily. If the HS-level sstatus.FS were not independently active and maintained by the hardware in parallel with vsstatus.FS while V=1, hypervisors would always be forced to conservatively swap all floating-point state when context-switching between virtual machines. Similarly, when V=1, both vsstatus.VS and the HS-level sstatus.VS are in effect. Attempts to execute a vector instruction when either field is 0 (Off) raise an illegal-instruction exception. Modifying the vector state when V=1 causes both fields to be set to 3 (Dirty). Read-only fields SD and XS summarize the extension context status as it is visible to VS-mode only. For example, the value of the HS-level sstatus.FS does not affect vsstatus.SD. An implementation may make field UBE be a read-only copy of hstatus.VSBE. When V=0, vsstatus does not directly affect the behavior of the machine, unless a virtual-machine load/store (HLV, HLVX, or HSV) or the MPRV feature in the mstatus register is used to execute a load or store as though V=1. The Zicfilp extension adds the SPELP field that holds the previous ELP, and is updated as specified in Preserving Expected Landing Pad State on Traps. The SPELP field is encoded as follows: 0 - NO_LP_EXPECTED - no landing pad instruction expected. 1 - LP_EXPECTED - a landing pad instruction is expected. The Ssdbltrp adds an S-mode-disable-trap (SDT) field extension to address double trap (See Double Trap Control in sstatus Register) in VS-mode. The vsip and vsie registers are VSXLEN-bit read/write registers that are VS-mode’s versions of supervisor CSRs sip and sie, formatted as shown in Virtual supervisor interrupt-pending register (vsip). and Virtual supervisor interrupt-enable register (vsie). respectively. When V=1, vsip and vsie substitute for the usual sip and sie, so instructions that normally read or modify sip/sie actually access vsip/vsie instead. However, interrupts directed to HS-level continue to be indicated in the HS-level sip register, not in vsip, when V=1. Figure 21. Virtual supervisor interrupt-pending register (vsip). Figure 22. Virtual supervisor interrupt-enable register (vsie). The standard portions (bits 15:0) of registers vsip and vsie are formatted as shown in Standard portion (bits 15:0) of vsip. and Standard portion (bits 15:0) of vsie. respectively. Figure 23. Standard portion (bits 15:0) of vsip. Figure 24. Standard portion (bits 15:0) of vsie. Extension Shlcofideleg supports delegating LCOFI interrupts to VS-mode. If the Shlcofideleg extension is implemented, hideleg bit 13 is writable; otherwise, it is read-only zero. When bit 13 of hideleg is zero, vsip.LCOFIP and vsie.LCOFIE are read-only zeros. Else, vsip.LCOFIP and vsie.LCOFIE are aliases of sip.LCOFIP and sie.LCOFIE. When bit 10 of hideleg is zero, vsip.SEIP and vsie.SEIE are read-only zeros. Else, vsip.SEIP and vsie.SEIE are aliases of hip.VSEIP and hie.VSEIE. When bit 6 of hideleg is zero, vsip.STIP and vsie.STIE are read-only zeros. Else, vsip.STIP and vsie.STIE are aliases of hip.VSTIP and hie.VSTIE. When bit 2 of hideleg is zero, vsip.SSIP and vsie.SSIE are read-only zeros. Else, vsip.SSIP and vsie.SSIE are aliases of hip.VSSIP and hie.VSSIE. The vstvec register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register stvec, formatted as shown in Virtual supervisor trap vector base address register vstvec.. When V=1, vstvec substitutes for the usual stvec, so instructions that normally read or modify stvec actually access vstvec instead. When V=0, vstvec does not directly affect the behavior of the machine. Figure 25. Virtual supervisor trap vector base address register vstvec. The vsscratch register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register sscratch, formatted as shown in Virtual supervisor scratch register vsscratch.. When V=1, vsscratch substitutes for the usual sscratch, so instructions that normally read or modify sscratch actually access vsscratch instead. The contents of vsscratch never directly affect the behavior of the machine. Figure 26. Virtual supervisor scratch register vsscratch. The vsepc register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register sepc, formatted as shown in Virtual supervisor exception program counter (vsepc).. When V=1, vsepc substitutes for the usual sepc, so instructions that normally read or modify sepc actually access vsepc instead. When V=0, vsepc does not directly affect the behavior of the machine. vsepc is a WARL register that must be able to hold the same set of values that sepc can hold. Figure 27. Virtual supervisor exception program counter (vsepc). The vscause register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register scause, formatted as shown in Virtual supervisor cause register (vscause).. When V=1, vscause substitutes for the usual scause, so instructions that normally read or modify scause actually access vscause instead. When V=0, vscause does not directly affect the behavior of the machine. vscause is a WLRL register that must be able to hold the same set of values that scause can hold. Figure 28. Virtual supervisor cause register (vscause). The vstval register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register stval, formatted as shown in Virtual supervisor trap value register (vstval).. When V=1, vstval substitutes for the usual stval, so instructions that normally read or modify stval actually access vstval instead. When V=0, vstval does not directly affect the behavior of the machine. vstval is a WARL register that must be able to hold the same set of values that stval can hold. Figure 29. Virtual supervisor trap value register (vstval). The vsatp register is a VSXLEN-bit read/write register that is VS-mode’s version of supervisor register satp, formatted as shown in Virtual supervisor address translation and protection vsatp register when VSXLEN=32. for VSXLEN=32 and Virtual supervisor address translation and protection vsatp register when VSXLEN=64. for VSXLEN=64. When V=1, vsatp substitutes for the usual satp, so instructions that normally read or modify satp actually access vsatp instead. vsatp controls VS-stage address translation, the first stage of two-stage translation for guest virtual addresses (see Two-Stage Address Translation). Figure 30. Virtual supervisor address translation and protection vsatp register when VSXLEN=32. Figure 31. Virtual supervisor address translation and protection vsatp register when VSXLEN=64. The vsatp register is considered active for the purposes of the address-translation algorithm unless the effective privilege mode is U and hstatus.HU=0. However, even when vsatp is active, VS-stage page-table entries’ A bits must not be set as a result of speculative execution, unless the effective privilege mode is VS or VU. In particular, virtual-machine load/store (HLV, HLVX, or HSV) instructions that are mispredicted must not cause VS-stage A bits to be set. When V=0, a write to vsatp with an unsupported MODE value is either ignored as it is for satp, or the fields of vsatp are treated as WARL in the normal way. However, when V=1, a write to satp with an unsupported MODE value is ignored and no write to vsatp is effected. When V=0, vsatp does not directly affect the behavior of the machine, unless a virtual-machine load/store (HLV, HLVX, or HSV) or the MPRV feature in the mstatus register is used to execute a load or store as though V=1. The hypervisor extension adds virtual-machine load and store instructions and two privileged fence instructions. The hypervisor virtual-machine load and store instructions are valid only in M-mode or HS-mode, or in U-mode when hstatus.HU=1. Each instruction performs an explicit memory access with an effective privilege mode of VS or VU. The effective privilege mode of the explicit memory access is VU when hstatus.SPVP=0, and VS when hstatus.SPVP=1. As usual for VS-mode and VU-mode, two-stage address translation is applied, and the HS-level sstatus.SUM is ignored. HS-level sstatus.MXR makes execute-only pages readable by explicit loads for both stages of address translation (VS-stage and G-stage), whereas vsstatus.MXR affects only the first translation stage (VS-stage). For every RV32I or RV64I load instruction, LB, LBU, LH, LHU, LW, LWU, and LD, there is a corresponding virtual-machine load instruction: HLV.B, HLV.BU, HLV.H, HLV.HU, HLV.W, HLV.WU, and HLV.D. For every RV32I or RV64I store instruction, SB, SH, SW, and SD, there is a corresponding virtual-machine store instruction: HSV.B, HSV.H, HSV.W, and HSV.D. Instructions HLV.WU, HLV.D, and HSV.D are not valid for RV32, of course. Instructions HLVX.HU and HLVX.WU are the same as HLV.HU and HLV.WU, except that execute permission takes the place of read permission during address translation. That is, the memory being read must be executable in both stages of address translation, but read permission is not required. For the supervisor physical address that results from address translation, the supervisor physical memory attributes must grant both execute and read permissions. (The supervisor physical memory attributes are the machine’s physical memory attributes as modified by physical memory protection, Physical Memory Protection, for supervisor level.) HLVX cannot override machine-level physical memory protection (PMP), so attempting to read memory that PMP designates as execute-only still results in an access-fault exception. Although HLVX instructions’ explicit memory accesses require execute permissions, they still raise the same exceptions as other load instructions, rather than raising fetch exceptions instead. HLVX.WU is valid for RV32, even though LWU and HLV.WU are not. (For RV32, HLVX.WU can be considered a variant of HLV.W, as sign extension is irrelevant for 32-bit values.) Attempts to execute a virtual-machine load/store instruction (HLV, HLVX, or HSV) when V=1 cause a virtual-instruction exception. Attempts to execute one of these same instructions from U-mode when hstatus.HU=0 cause an illegal-instruction exception. The hypervisor memory-management fence instructions, HFENCE.VVMA and HFENCE.GVMA, perform a function similar to SFENCE.VMA (Supervisor Memory-Management Fence Instruction), except applying to the VS-level memory-management data structures controlled by CSR vsatp (HFENCE.VVMA) or the guest-physical memory-management data structures controlled by CSR hgatp (HFENCE.GVMA). Instruction SFENCE.VMA applies only to the memory-management data structures controlled by the current satp (either the HS-level satp when V=0 or vsatp when V=1). HFENCE.VVMA is valid only in M-mode or HS-mode. Its effect is much the same as temporarily entering VS-mode and executing SFENCE.VMA. Executing an HFENCE.VVMA guarantees that any previous stores already visible to the current hart are ordered before all implicit reads by that hart done for VS-stage address translation for instructions that are subsequent to the HFENCE.VVMA, and execute when hgatp.VMID has the same setting as it did when HFENCE.VVMA executed. Implicit reads need not be ordered when hgatp.VMID is different than at the time HFENCE.VVMA executed. If operand rs1≠x0, it specifies a single guest virtual address, and if operand rs2≠x0, it specifies a single guest address-space identifier (ASID). An HFENCE.VVMA instruction applies only to a single virtual machine, identified by the setting of hgatp.VMID when HFENCE.VVMA executes. When rs2≠x0, bits XLEN-1:ASIDMAX of the value held in rs2 are reserved for future standard use. Until their use is defined by a standard extension, they should be zeroed by software and ignored by current implementations. Furthermore, if ASIDLEN < ASIDMAX, the implementation shall ignore bits ASIDMAX-1:ASIDLEN of the value held in rs2. Simpler implementations of HFENCE.VVMA can ignore the guest virtual address in rs1 and the guest ASID value in rs2, as well as hgatp.VMID, and always perform a global fence for the VS-level memory management of all virtual machines, or even a global fence for all memory-management data structures. Neither mstatus.TVM nor hstatus.VTVM causes HFENCE.VVMA to trap. HFENCE.GVMA is valid only in HS-mode when mstatus.TVM=0, or in M-mode (irrespective of mstatus.TVM). Executing an HFENCE.GVMA instruction guarantees that any previous stores already visible to the current hart are ordered before all implicit reads by that hart done for G-stage address translation for instructions that follow the HFENCE.GVMA. If operand rs1≠x0, it specifies a single guest physical address, shifted right by 2 bits, and if operand rs2≠x0, it specifies a single virtual machine identifier (VMID). Conceptually, an implementation might contain two address-translation caches: one that maps guest virtual addresses to guest physical addresses, and another that maps guest physical addresses to supervisor physical addresses. HFENCE.GVMA need not flush the former cache, but it must flush entries from the latter cache that match the HFENCE.GVMA’s address and VMID arguments. More commonly, implementations contain address-translation caches that map guest virtual addresses directly to supervisor physical addresses, removing a level of indirection. For such implementations, any entry whose guest virtual address maps to a guest physical address that matches the HFENCE.GVMA’s address and VMID arguments must be flushed. Selectively flushing entries in this fashion requires tagging them with the guest physical address, which is costly, and so a common technique is to flush all entries that match the HFENCE.GVMA’s VMID argument, regardless of the address argument. Like for a guest physical address written to htval on a trap, a guest physical address specified in rs1 is shifted right by 2 bits to accommodate addresses wider than the current XLEN. When rs2≠x0, bits XLEN-1:VMIDMAX of the value held in rs2 are reserved for future standard use. Until their use is defined by a standard extension, they should be zeroed by software and ignored by current implementations. Furthermore, if VMIDLEN < VMIDMAX, the implementation shall ignore bits VMIDMAX-1:VMIDLEN of the value held in rs2. Simpler implementations of HFENCE.GVMA can ignore the guest physical address in rs1 and the VMID value in rs2 and always perform a global fence for the guest-physical memory management of all virtual machines, or even a global fence for all memory-management data structures. If hgatp.MODE is changed for a given VMID, an HFENCE.GVMA with rs1=x0 (and rs2 set to either x0 or the VMID) must be executed to order subsequent guest translations with the MODE change—even if the old MODE or new MODE is Bare. Attempts to execute HFENCE.VVMA or HFENCE.GVMA when V=1 cause a virtual-instruction exception, while attempts to do the same in U-mode cause an illegal-instruction exception. Attempting to execute HFENCE.GVMA in HS-mode when mstatus.TVM=1 also causes an illegal-instruction exception. The hypervisor extension augments or modifies machine CSRs mstatus, mstatush, mideleg, mip, and mie, and adds CSRs mtval2 and mtinst. The hypervisor extension adds two fields, MPV and GVA, to the machine-level mstatus or mstatush CSR, and modifies the behavior of several existing mstatus fields. Machine status (mstatus) register for RV64 when the hypervisor extension is implemented. shows the modified mstatus register when the hypervisor extension is implemented and MXLEN=64. When MXLEN=32, the hypervisor extension adds MPV and GVA not to mstatus but to mstatush. Additional machine status (mstatush) register for RV32 when the hypervisor extension is implemented. The format of mstatus is unchanged for RV32. shows the mstatush register when the hypervisor extension is implemented and MXLEN=32. Figure 32. Machine status (mstatus) register for RV64 when the hypervisor extension is implemented. Figure 33. Additional machine status (mstatush) register for RV32 when the hypervisor extension is implemented. The format of mstatus is unchanged for RV32. The MPV bit (Machine Previous Virtualization Mode) is written by the implementation whenever a trap is taken into M-mode. Just as the MPP field is set to the (nominal) privilege mode at the time of the trap, the MPV bit is set to the value of the virtualization mode V at the time of the trap. When an MRET instruction is executed, the virtualization mode V is set to MPV, unless MPP=3, in which case V remains 0. Field GVA (Guest Virtual Address) is written by the implementation whenever a trap is taken into M-mode. For any trap (breakpoint, address misaligned, access fault, page fault, or guest-page fault) that writes a guest virtual address to mtval, GVA is set to 1. For any other trap into M-mode, GVA is set to 0. The TSR and TVM fields of mstatus affect execution only in HS-mode, not in VS-mode. The TW field affects execution in all modes except M-mode. Setting TVM=1 prevents HS-mode from accessing hgatp or executing HFENCE.GVMA or HINVAL.GVMA, but has no effect on accesses to vsatp or instructions HFENCE.VVMA or HINVAL.VVMA. TVM exists in mstatus to allow machine-level software to modify the address translations managed by a supervisor-level OS, usually for the purpose of inserting another stage of address translation below that controlled by the OS. The instruction traps enabled by TVM=1 permit machine level to co-opt both satp and hgatp and substitute shadow page tables that merge the OS’s chosen page translations with M-level’s lower-stage translations, all without the OS being aware. M-level software needs this ability not only to emulate the hypervisor extension if not already supported, but also to emulate any future RISC-V extensions that may modify or add address translation stages, perhaps, for example, to improve support for nested hypervisors, i.e., running hypervisors atop other hypervisors. However, setting TVM=1 does not cause traps for accesses to vsatp or instructions HFENCE.VVMA or HINVAL.VVMA, or for any actions taken in VS-mode, because M-level software is not expected to need to involve itself in VS-stage address translation. For virtual machines, it should be sufficient, and in all likelihood faster as well, to leave VS-stage address translation alone and merge all other translation stages into G-stage shadow page tables controlled by hgatp. This assumption does place some constraints on possible future RISC-V extensions that current machines will be able to emulate efficiently. The hypervisor extension changes the behavior of the Modify Privilege field, MPRV, of mstatus. When MPRV=0, translation and protection behave as normal. When MPRV=1, explicit memory accesses are translated and protected, and endianness is applied, as though the current virtualization mode were set to MPV and the current nominal privilege mode were set to MPP. Effect of MPRV on the translation and protection of explicit memory accesses. enumerates the cases. Table 5. Effect of MPRV on the translation and protection of explicit memory accesses. MPRV MPV MPP Effect 0 - - Normal access; current privilege mode applies. 1 0 0 U-level access with HS-level translation and protection only. 1 0 1 HS-level access with HS-level translation and protection only. 1 - 3 M-level access with no translation. 1 1 0 VU-level access with two-stage translation and protection. The HS-level MXR bit makes any executable page readable. vsstatus.MXR makes readable those pages marked executable at the VS translation stage, but only if readable at the guest-physical translation stage. 1 1 1 VS-level access with two-stage translation and protection. The HS-level MXR bit makes any executable page readable. vsstatus.MXR makes readable those pages marked executable at the VS translation stage, but only if readable at the guest-physical translation stage. vsstatus.SUM applies instead of the HS-level SUM bit. MPRV does not affect the virtual-machine load/store instructions, HLV, HLVX, and HSV. The explicit loads and stores of these instructions always act as though V=1 and the nominal privilege mode were hstatus.SPVP, overriding MPRV. The mstatus register is a superset of the HS-level sstatus register but is not a superset of vsstatus. When the hypervisor extension is implemented, bits 10, 6, and 2 of mideleg (corresponding to the standard VS-level interrupts) are each read-only one. Furthermore, if any guest external interrupts are implemented (GEILEN is nonzero), bit 12 of mideleg (corresponding to supervisor-level guest external interrupts) is also read-only one. VS-level interrupts and guest external interrupts are always delegated past M-mode to HS-mode. For bits of mideleg that are zero, the corresponding bits in hideleg, hip, and hie are read-only zeros. The hypervisor extension gives registers mip and mie additional active bits for the hypervisor-added interrupts. Standard portion (bits 15:0) of mip. and Standard portion (bits 15:0) of mie. show the standard portions (bits 15:0) of registers mip and mie when the hypervisor extension is implemented. Figure 34. Standard portion (bits 15:0) of mip. Figure 35. Standard portion (bits 15:0) of mie. Bits SGEIP, VSEIP, VSTIP, and VSSIP in mip are aliases for the same bits in hypervisor CSR hip, while SGEIE, VSEIE, VSTIE, and VSSIE in mie are aliases for the same bits in hie. The mtval2 register is an MXLEN-bit read/write register formatted as shown in Machine second trap value register (mtval2).. When a trap is taken into M-mode, mtval2 is written with additional exception-specific information, alongside mtval, to assist software in handling the trap. Figure 36. Machine second trap value register (mtval2). When a guest-page-fault trap is taken into M-mode, mtval2 is written with either zero or the guest physical address that faulted, shifted right by 2 bits. For other traps, mtval2 is set to zero, but a future standard or extension may redefine mtval2’s setting for other traps. If a guest-page fault is due to an implicit memory access during first-stage (VS-stage) address translation, a guest physical address written to mtval2 is that of the implicit memory access that faulted. Additional information is provided in CSR mtinst to disambiguate such situations. Otherwise, for misaligned loads and stores that cause guest-page faults, a nonzero guest physical address in mtval2 corresponds to the faulting portion of the access as indicated by the virtual address in mtval. For instruction guest-page faults on systems with variable-length instructions, a nonzero mtval2 corresponds to the faulting portion of the instruction as indicated by the virtual address in mtval. mtval2 is a WARL register that must be able to hold zero and may be capable of holding only an arbitrary subset of other 2-bit-shifted guest physical addresses, if any. The Ssdbltrap extension (See \"Ssdbltrp\" Double Trap Extension, Version 1.0) requires the implementation of the mtval2 CSR. The mtinst register is an MXLEN-bit read/write register formatted as shown in Machine trap instruction (mtinst) register.. When a trap is taken into M-mode, mtinst is written with a value that, if nonzero, provides information about the instruction that trapped, to assist software in handling the trap. The values that may be written to mtinst on a trap are documented in Transformed Instruction or Pseudoinstruction for mtinst or htinst. Figure 37. Machine trap instruction (mtinst) register. mtinst is a WARL register that need only be able to hold the values that the implementation may automatically write to it on a trap. Whenever the current virtualization mode V is 1, two-stage address translation and protection is in effect. For any virtual memory access, the original virtual address is converted in the first stage by VS-level address translation, as controlled by the vsatp register, into a guest physical address. The guest physical address is then converted in the second stage by guest physical address translation, as controlled by the hgatp register, into a supervisor physical address. The two stages are known also as VS-stage and G-stage translation. Although there is no option to disable two-stage address translation when V=1, either stage of translation can be effectively disabled by zeroing the corresponding vsatp or hgatp register. The vsstatus field MXR, which makes execute-only pages readable by explicit loads, only overrides VS-stage page protection. Setting MXR at VS-level does not override guest-physical page protections. Setting MXR at HS-level, however, overrides both VS-stage and G-stage execute-only permissions. When V=1, memory accesses that would normally bypass address translation are subject to G-stage address translation alone. This includes memory accesses made in support of VS-stage address translation, such as reads and writes of VS-level page tables. Machine-level physical memory protection applies to supervisor physical addresses and is in effect regardless of virtualization mode. The mapping of guest physical addresses to supervisor physical addresses is controlled by CSR hgatp (Hypervisor Guest Address Translation and Protection (hgatp) Register). When the address translation scheme selected by the MODE field of hgatp is Bare, guest physical addresses are equal to supervisor physical addresses without modification, and no memory protection applies in the trivial translation of guest physical addresses to supervisor physical addresses. When hgatp.MODE specifies a translation scheme of Sv32x4, Sv39x4, Sv48x4, or Sv57x4, G-stage address translation is a variation on the usual page-based virtual address translation scheme of Sv32, Sv39, Sv48, or Sv57, respectively. In each case, the size of the incoming address is widened by 2 bits (to 34, 41, 50, or 59 bits). To accommodate the 2 extra bits, the root page table (only) is expanded by a factor of four to be 16 KiB instead of the usual 4 KiB. Matching its larger size, the root page table also must be aligned to a 16 KiB boundary instead of the usual 4 KiB page boundary. Except as noted, all other aspects of Sv32, Sv39, Sv48, or Sv57 are adopted unchanged for G-stage translation. Non-root page tables and all page table entries (PTEs) have the same formats as documented in Sv32: Page-Based 32-bit Virtual-Memory Systems, Sv39: Page-Based 39-bit Virtual-Memory Systems, Sv48: Page-Based 48-bit Virtual-Memory Systems, and xref:supervisor.adoc#sv57[\"Sv57: Page-Based 57-bit Virtual-Memory System. For Sv32x4, an incoming guest physical address is partitioned into a virtual page number (VPN) and page offset as shown in Sv32x4 virtual address (guest physical address).. This partitioning is identical to that for an Sv32 virtual address as depicted in Sv32 virtual address, except with 2 more bits at the high end in VPN[1]. (Note that the fields of a partitioned guest physical address also correspond one-for-one with the structure that Sv32 assigns to a physical address, depicted in Sv32 virtual address.) Figure 38. Sv32x4 virtual address (guest physical address). For Sv39x4, an incoming guest physical address is partitioned as shown in Sv39x4 virtual address (guest physical address).. This partitioning is identical to that for an Sv39 virtual address as depicted in \"Sv39 virtual address, except with 2 more bits at the high end in VPN[2]. Address bits 63:41 must all be zeros, or else a guest-page-fault exception occurs. Figure 39. Sv39x4 virtual address (guest physical address). For Sv48x4, an incoming guest physical address is partitioned as shown in Sv48x4 virtual address (guest physical address).. This partitioning is identical to that for an Sv48 virtual address as depicted in \"Sv48 virtual address, except with 2 more bits at the high end in VPN[3]. Address bits 63:50 must all be zeros, or else a guest-page-fault exception occurs. Figure 40. Sv48x4 virtual address (guest physical address). For Sv57x4, an incoming guest physical address is partitioned as shown in Sv57x4 virtual address (guest physical address).. This partitioning is identical to that for an Sv57 virtual address as depicted in Sv57 virtual address, except with 2 more bits at the high end in VPN[4]. Address bits 63:59 must all be zeros, or else a guest-page-fault exception occurs. Figure 41. Sv57x4 virtual address (guest physical address). The page-based G-stage address translation scheme for RV32, Sv32x4, is defined to support a 34-bit guest physical address so that an RV32 hypervisor need not be limited in its ability to virtualize real 32-bit RISC-V machines, even those with 33-bit or 34-bit physical addresses. This may include the possibility of a machine virtualizing itself, if it happens to use 33-bit or 34-bit physical addresses. Multiplying the size and alignment of the root page table by a factor of four is the cheapest way to extend Sv32 to cover a 34-bit address. The possible wastage of 12 KiB for an unnecessarily large root page table is expected to be of negligible consequence for most (maybe all) real uses. A consistent ability to virtualize machines having as much as four times the physical address space as virtual address space is believed to be of some utility also for RV64. For a machine implementing 39-bit virtual addresses (Sv39), for example, this allows the hypervisor extension to support up to a 41-bit guest physical address space without either necessitating hardware support for 48-bit virtual addresses (Sv48) or falling back to emulating the larger address space using shadow page tables. The conversion of an Sv32x4, Sv39x4, Sv48x4, or Sv57x4 guest physical address is accomplished with the same algorithm used for Sv32, Sv39, Sv48, or Sv57, as presented in Virtual Address Translation Process, except that: hgatp substitutes for the usual satp; for the translation to begin, the effective privilege mode must be VS-mode or VU-mode; when checking the U bit, the current privilege mode is always taken to be U-mode; and guest-page-fault exceptions are raised instead of regular page-fault exceptions. For G-stage address translation, all memory accesses (including those made to access data structures for VS-stage address translation) are considered to be user-level accesses, as though executed in U-mode. Access type permissions—readable, writable, or executable—are checked during G-stage translation the same as for VS-stage translation. For a memory access made to support VS-stage address translation (such as to read/write a VS-level page table), permissions and the need to set A and/or D bits at the G-stage level are checked as though for an implicit load or store, not for the original access type. However, any exception is always reported for the original access type (instruction, load, or store/AMO). The G bit in all G-stage PTEs is currently not used. Until its use is defined by a standard extension, it should be cleared by software for forward compatibility, and must be ignored by hardware. G-stage address translation uses the identical format for PTEs as regular address translation, even including the U bit, due to the possibility of sharing some (or all) page tables between G-stage translation and regular HS-level address translation. Regardless of whether this usage will ever become common, we chose not to preclude it. Guest-page-fault traps may be delegated from M-mode to HS-mode under the control of CSR medeleg, but cannot be delegated to other privilege modes. On a guest-page fault, CSR mtval or stval is written with the faulting guest virtual address as usual, and mtval2 or htval is written either with zero or with the faulting guest physical address, shifted right by 2 bits. CSR mtinst or htinst may also be written with information about the faulting instruction or other reason for the access, as explained in Transformed Instruction or Pseudoinstruction for mtinst or htinst. When an instruction fetch or a misaligned memory access straddles a page boundary, two different address translations are involved. When a guest-page fault occurs in such a circumstance, the faulting virtual address written to mtval/stval is the same as would be required for a regular page fault. Thus, the faulting virtual address may be a page-boundary address that is higher than the instruction’s original virtual address, if the byte at that page boundary is among the accessed bytes. When a guest-page fault is not due to an implicit memory access for VS-stage address translation, a nonzero guest physical address written to mtval2/htval shall correspond to the exact virtual address written to mtval/stval. The behavior of the SFENCE.VMA instruction is affected by the current virtualization mode V. When V=0, the virtual-address argument is an HS-level virtual address, and the ASID argument is an HS-level ASID. The instruction orders stores only to HS-level address-translation structures with subsequent HS-level address translations. When V=1, the virtual-address argument to SFENCE.VMA is a guest virtual address within the current virtual machine, and the ASID argument is a VS-level ASID within the current virtual machine. The current virtual machine is identified by the VMID field of CSR hgatp, and the effective ASID can be considered to be the combination of this VMID with the VS-level ASID. The SFENCE.VMA instruction orders stores only to the VS-level address-translation structures with subsequent VS-stage address translations for the same virtual machine, i.e., only when hgatp.VMID is the same as when the SFENCE.VMA executed. Hypervisor instructions HFENCE.VVMA and HFENCE.GVMA provide additional memory-management fences to complement SFENCE.VMA. These instructions are described in Hypervisor Memory-Management Fence Instructions. Physical Memory Protection and Paging discusses the intersection between physical memory protection (PMP) and page-based address translation. It is noted there that, when PMP settings are modified in a manner that affects either the physical memory that holds page tables or the physical memory to which page tables point, M-mode software must synchronize the PMP settings with the virtual memory system. For HS-level address translation, this is accomplished by executing in M-mode an SFENCE.VMA instruction with rs1=x0 and rs2=x0, after the PMP CSRs are written. Synchronization with G-stage and VS-stage data structures is also needed. Executing an HFENCE.GVMA instruction with rs1=x0 and rs2=x0 suffices to flush all G-stage or VS-stage address-translation cache entries that have cached PMP settings corresponding to the final translated supervisor physical address. An HFENCE.VVMA instruction is not required. Similarly, if the setting of the PBMTE bit in menvcfg is changed, an HFENCE.GVMA instruction with rs1=x0 and rs2=x0 suffices to synchronize with respect to the altered interpretation of G-stage and VS-stage PTEs' PBMT fields. By contrast, if the PBMTE bit in henvcfg is changed, executing an HFENCE.VVMA with rs1=x0 and rs2=x0 suffices to synchronize with respect to the altered interpretation of VS-stage PTEs' PBMT fields for the currently active VMID. No mechanism is provided to atomically change vsatp and hgatp together. Hence, to prevent speculative execution causing one guest’s VS-stage translations to be cached under another guest’s VMID, world-switch code should zero vsatp, then swap hgatp, then finally write the new vsatp value. Similarly, if henvcfg.PBMTE need be world-switched, it should be switched after zeroing vsatp but before writing the new vsatp value, obviating the need to execute an HFENCE.VVMA instruction. The hypervisor extension augments the trap cause encoding. Machine and supervisor cause register (mcause and scause) values when the hypervisor extension is implemented. lists the possible M-mode and HS-mode trap cause codes when the hypervisor extension is implemented. Codes are added for VS-level interrupts (interrupts 2, 6, 10), for supervisor-level guest external interrupts (interrupt 12), for virtual-instruction exceptions (exception 22), and for guest-page faults (exceptions 20, 21, 23). Furthermore, environment calls from VS-mode are assigned cause 10, whereas those from HS-mode or S-mode use cause 9 as usual. Table 6. Machine and supervisor cause register (mcause and scause) values when the hypervisor extension is implemented. Interrupt Exception Code Description 1 1 1 1 0 1 2 3 Reserved Supervisor software interrupt Virtual supervisor software interrupt Machine software interrupt 1 1 1 1 4 5 6 7 Reserved Supervisor timer interrupt Virtual supervisor timer interrupt Machine timer interrupt 1 1 1 1 8 9 10 11 Reserved Supervisor external interrupt Virtual supervisor external interrupt Machine external interrupt 1 1 1 1 12 13 14-15 ≥16 Supervisor guest external interrupt Reserved for counter-overflow interrupt Reserved Designated for platform use 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24-31 32-47 48-63 ≥64 Instruction address misaligned Instruction access fault Illegal instruction Breakpoint Load address misaligned Load access fault Store/AMO address misaligned Store/AMO access fault Environment call from U-mode or VU-mode Environment call from HS-mode Environment call from VS-mode Environment call from M-mode Instruction page fault Load page fault Reserved Store/AMO page fault Double trap Reserved Software check Hardware error Instruction guest-page fault Load guest-page fault Virtual instruction Store/AMO guest-page fault Designated for custom use Reserved Designated for custom use Reserved HS-mode and VS-mode ECALLs use different cause values so they can be delegated separately. When V=1, a virtual-instruction exception (code 22) is normally raised instead of an illegal-instruction exception if the attempted instruction is HS-qualified but is prevented from executing when V=1 either due to insufficient privilege or because the instruction is expressly disabled by a supervisor or hypervisor CSR such as scounteren or hcounteren. An instruction is HS-qualified if it would be valid to execute in HS-mode (for some values of the instruction’s register operands), assuming fields TSR and TVM of CSR mstatus are both zero. A special rule applies for CSR instructions that access 32-bit high-half CSRs such as cycleh and htimedeltah. When V=1 and XLEN=32, an invalid attempt to access a high-half CSR raises a virtual-instruction exception instead of an illegal-instruction exception if the same CSR instruction for the corresponding low-half CSR (e.g.cycle or htimedelta) is HS-qualified. When XLEN>32, an attempt to access a high-half CSR always raises an illegal-instruction exception. Specifically, a virtual-instruction exception is raised for the following cases: in VS-mode, attempts to access a non-high-half counter CSR when the corresponding bit in hcounteren is 0 and the same bit in mcounteren is 1; in VS-mode, if XLEN=32, attempts to access a high-half counter CSR when the corresponding bit in hcounteren is 0 and the same bit in mcounteren is 1; in VU-mode, attempts to access a non-high-half counter CSR when the corresponding bit in either hcounteren or scounteren is 0 and the same bit in mcounteren is 1; in VU-mode, if XLEN=32, attempts to access a high-half counter CSR when the corresponding bit in either hcounteren or scounteren is 0 and the same bit in mcounteren is 1; in VS-mode or VU-mode, attempts to execute a hypervisor instruction (HLV, HLVX, HSV, or HFENCE); in VS-mode or VU-mode, attempts to access an implemented non-high-half hypervisor CSR or VS CSR when the same access (read/write) would be allowed in HS-mode, assuming mstatus.TVM=0; in VS-mode or VU-mode, if XLEN=32, attempts to access an implemented high-half hypervisor CSR or high-half VS CSR when the same access (read/write) to the CSR\"s low-half partner would be allowed in HS-mode, assuming mstatus.TVM=0; in VU-mode, attempts to execute WFI when mstatus.TW=0, or to execute a supervisor instruction (SRET or SFENCE); in VU-mode, attempts to access an implemented non-high-half supervisor CSR when the same access (read/write) would be allowed in HS-mode, assuming mstatus.TVM=0; in VU-mode, if XLEN=32, attempts to access an implemented high-half supervisor CSR when the same access to the CSR’s low-half partner would be allowed in HS-mode, assuming mstatus.TVM=0; in VS-mode, attempts to execute WFI when hstatus.VTW=1 and mstatus.TW=0, unless the instruction completes within an implementation-specific, bounded time; in VS-mode, attempts to execute SRET when hstatus.VTSR=1; and in VS-mode, attempts to execute an SFENCE.VMA or SINVAL.VMA instruction or to access satp, when hstatus.VTVM=1. Other extensions to the RISC-V Privileged Architecture may add to the set of circumstances that cause a virtual-instruction exception when V=1. On a virtual-instruction trap, mtval or stval is written the same as for an illegal-instruction trap. It is not unusual that hypervisors must emulate the instructions that raise virtual-instruction exceptions, to support nested hypervisors or for other reasons. Machine level is expected ordinarily to delegate virtual-instruction traps directly to HS-level, whereas illegal-instruction traps are likely to be processed first in M-mode before being conditionally delegated (by software) to HS-level. Consequently, virtual-instruction traps are expected typically to be handled faster than illegal-instruction traps. When not emulating the trapping instruction, a hypervisor should convert a virtual-instruction trap into an illegal-instruction exception for the guest virtual machine. Because TSR and TVM in mstatus are intended to impact only S-mode (HS-mode), they are ignored for determining exceptions in VS-mode. Fields FS and VS in registers sstatus and vsstatus deviate from the usual HS-qualified rule. If an instruction is prevented from executing because FS or VS is zero in either sstatus or vsstatus, the exception raised is always an illegal-instruction exception, never a virtual-instruction exception. Early implementations of the H extension treated FS and VS in sstatus and vsstatus specially this way, and the behavior has been codified to maintain compatibility for software. Table 7. Synchronous exception priority when the hypervisor extension is implemented. Priority Exc.Code Description Highest 3 Instruction address breakpoint 12, 20, 1 During instruction address translation: First encountered page fault, guest-page fault, or access fault 1 With physical address for instruction: Instruction access fault 2 22 0 8, 9, 10, 11 3 3 Illegal instruction Virtual instruction Instruction address misaligned Environment call Environment break Load/store/AMO address breakpoint 4,6 Optionally: Load/store/AMO address misaligned 13, 15, 21, 23, 5, 7 During address translation for an explicit memory access: First encountered page fault, guest-page fault, or access fault 5, 7 With physical address for an explicit memory access: Load/store/AMO access fault Lowest 4, 6 If not higher priority: Load/store/AMO address misaligned If an instruction may raise multiple synchronous exceptions, the decreasing priority order of Synchronous exception priority when the hypervisor extension is implemented. indicates which exception is taken and reported in mcause or scause. When a trap occurs in HS-mode or U-mode, it goes to M-mode, unless delegated by medeleg or mideleg, in which case it goes to HS-mode. When a trap occurs in VS-mode or VU-mode, it goes to M-mode, unless delegated by medeleg or mideleg, in which case it goes to HS-mode, unless further delegated by hedeleg or hideleg, in which case it goes to VS-mode. When a trap is taken into M-mode, virtualization mode V gets set to 0, and fields MPV and MPP in mstatus (or mstatush) are set according to Value of mstatus/mstatush fields MPV and MPP after a trap into M-mode. Upon trap return, MPV is ignored when MPP=3.. A trap into M-mode also writes fields GVA, MPIE, and MIE in mstatus/mstatush and writes CSRs mepc, mcause, mtval, mtval2, and mtinst. Table 8. Value of mstatus/mstatush fields MPV and MPP after a trap into M-mode. Upon trap return, MPV is ignored when MPP=3. Previous Mode MPV MPP U-mode HS-mode M-mode 0 0 0 0 1 3 VU-mode VS-mode 1 1 0 1 When a trap is taken into HS-mode, virtualization mode V is set to 0, and hstatus.SPV and sstatus.SPP are set according to Value of hstatus field SPV and sstatus field SPP after a trap into HS-mode.. If V was 1 before the trap, field SPVP in hstatus is set the same as sstatus.SPP; otherwise, SPVP is left unchanged. A trap into HS-mode also writes field GVA in hstatus, fields SPIE and SIE in sstatus, and CSRs sepc, scause, stval, htval, and htinst. Table 9. Value of hstatus field SPV and sstatus field SPP after a trap into HS-mode. Previous Mode SPV SPP U-mode HS-mode 0 0 0 1 VU-mode VS-mode 1 1 0 1 When a trap is taken into VS-mode, vsstatus.SPP is set according to Value of vsstatus field SPP after a trap into VS-mode.. Register hstatus and the HS-level sstatus are not modified, and the virtualization mode V remains 1. A trap into VS-mode also writes fields SPIE and SIE in vsstatus and writes CSRs vsepc, vscause, and vstval. Table 10. Value of vsstatus field SPP after a trap into VS-mode. Previous Mode SPP VU-mode VS-mode 0 1 On any trap into M-mode or HS-mode, one of these values is written automatically into the appropriate trap instruction CSR, mtinst or htinst: zero; a transformation of the trapping instruction; a custom value (allowed only if the trapping instruction is non-standard); or a special pseudoinstruction. Except when a pseudoinstruction value is required (described later), the value written to mtinst or htinst may always be zero, indicating that the hardware is providing no information in the register for this particular trap. The value written to the trap instruction CSR serves two purposes. The first is to improve the speed of instruction emulation in a trap handler, partly by allowing the handler to skip loading the trapping instruction from memory, and partly by obviating some of the work of decoding and executing the instruction. The second purpose is to supply, via pseudoinstructions, additional information about guest-page-fault exceptions caused by implicit memory accesses done for VS-stage address translation. A transformation of the trapping instruction is written instead of simply a copy of the original instruction in order to minimize the burden for hardware yet still provide to a trap handler the information needed to emulate the instruction. An implementation may at any time reduce its effort by substituting zero in place of the transformed instruction. On an interrupt, the value written to the trap instruction register is always zero. On a synchronous exception, if a nonzero value is written, one of the following shall be true about the value: Bit 0 is 1, and replacing bit 1 with 1 makes the value into a valid encoding of a standard instruction. In this case, the instruction that trapped is the same kind as indicated by the register value, and the register value is the transformation of the trapping instruction, as defined later. For example, if bits 1:0 are binary 11 and the register value is the encoding of a standard LW (load word) instruction, then the trapping instruction is LW, and the register value is the transformation of the trapping LW instruction. Bit 0 is 1, and replacing bit 1 with 1 makes the value into an instruction encoding that is explicitly designated for a custom instruction (not an unused reserved encoding). This is a custom value. The instruction that trapped is a non-standard instruction. The interpretation of a custom value is not otherwise specified by this standard. The value is one of the special pseudoinstructions defined later, all of which have bits 1:0 equal to 00. These three cases exclude a large number of other possible values, such as all those having bits 1:0 equal to binary 10. A future standard or extension may define additional cases, thus allowing values that are currently excluded. Software may safely treat an unrecognized value in a trap instruction register the same as zero. To be forward-compatible with future revisions of this standard, software that interprets a nonzero value from mtinst or htinst must fully verify that the value conforms to one of the cases listed above. For instance, for RV64, discovering that bits 6:0 of mtinst are 0000011 and bits 14:12 are 010 is not sufficient to establish that the first case applies and the trapping instruction is a standard LW instruction; rather, software must also confirm that bits 63:32 of mtinst are all zeros. A future standard might define new values for 64-bit mtinst that are nonzero in bits 63:32 yet may coincidentally have in bits 31:0 the same bit patterns as standard RV64 instructions. Unlike for standard instructions, there is no requirement that the instruction encoding of a custom value be of the same ``kind'' as the instruction that trapped (or even have any correlation with the trapping instruction). Values that may be automatically written to the trap instruction (mtinst or htinst) register on an exception trap. shows the values that may be automatically written to the trap instruction register for each standard exception cause. For exceptions that prevent the fetching of an instruction, only zero or a pseudoinstruction value may be written. A custom value may be automatically written only if the instruction that traps is non-standard. A future standard or extension may permit other values to be written, chosen from the set of allowed values established earlier. Table 11. Values that may be automatically written to the trap instruction (mtinst or htinst) register on an exception trap. Exception Zero Transformed Standard Instruction Custom Value Pseudoinstruction Value Instruction address misaligned Yes No Yes No Instruction access fault Illegal instruction Breakpoint Virtual instruction Yes Yes Yes Yes No No No No No No Yes Yes No No No No Load address misaligned Load access fault Store/AMO address misaligned Store/AMO access fault Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes No No No No Environment call Yes No Yes No Instruction page fault Load page fault Store/AMO page fault Yes Yes Yes No Yes Yes No Yes Yes No No No Instruction guest-page fault Load guest-page fault Store/AMO guest-page fault Yes Yes Yes No Yes Yes No Yes Yes Yes Yes Yes As enumerated in the table, a synchronous exception may write to the trap instruction register a standard transformation of the trapping instruction only for exceptions that arise from explicit memory accesses (from loads, stores, and AMO instructions). Accordingly, standard transformations are currently defined only for these memory-access instructions. If a synchronous trap occurs for a standard instruction for which no transformation has been defined, the trap instruction register shall be written with zero (or, under certain circumstances, with a special pseudoinstruction value). For a standard load instruction that is not a compressed instruction and is one of LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH, the transformed instruction has the format shown in Transformed load instruction (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH). Fields funct3, rd, and opcode are the same as the trapping load instruction.. Figure 42. Transformed load instruction (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH). Fields funct3, rd, and opcode are the same as the trapping load instruction. For a standard store instruction that is not a compressed instruction and is one of SB, SH, SW, SD, FSW, FSD, FSQ, or FSH, the transformed instruction has the format shown in Transformed store instruction (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH). Fields rs2, funct3, and opcode are the same as the trapping store instruction.. Figure 43. Transformed store instruction (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH). Fields rs2, funct3, and opcode are the same as the trapping store instruction. For a standard atomic instruction (load-reserved, store-conditional, or AMO instruction), the transformed instruction has the format shown in Transformed atomic instruction (load-reserved, store-conditional, or AMO instruction). All fields are the same as the trapping instruction except bits 19:15, Addr. Offset.. Figure 44. Transformed atomic instruction (load-reserved, store-conditional, or AMO instruction). All fields are the same as the trapping instruction except bits 19:15, Addr. Offset. For a standard virtual-machine load/store instruction (HLV, HLVX, or HSV), the transformed instruction has the format shown in Transformed virtual-machine load/store instruction (HLV, HLVX, HSV). All fields are the same as the trapping instruction except bits 19:15, Addr. Offset. Figure 45. Transformed virtual-machine load/store instruction (HLV, HLVX, HSV). All fields are the same as the trapping instruction except bits 19:15, Addr. Offset In all the transformed instructions above, the Addr. Offset field that replaces the instruction’s rs1 field in bits 19:15 is the positive difference between the faulting virtual address (written to mtval or stval) and the original virtual address. This difference can be nonzero only for a misaligned memory access. Note also that, for basic loads and stores, the transformations replace the instruction’s immediate offset fields with zero. For a standard compressed instruction (16-bit size), the transformed instruction is found as follows: Expand the compressed instruction to its 32-bit equivalent. Transform the 32-bit equivalent instruction. Replace bit 1 with a 0. Bits 1:0 of a transformed standard instruction will be binary 01 if the trapping instruction is compressed and 11 if not. In decoding the contents of mtinst or htinst, once software has determined that the register contains the encoding of a standard basic load (LB, LBU, LH, LHU, LW, LWU, LD, FLW, FLD, FLQ, or FLH) or basic store (SB, SH, SW, SD, FSW, FSD, FSQ, or FSH), it is not necessary to confirm also that the immediate offset fields (31:25, and 24:20 or 11:7) are zeros. The knowledge that the register’s value is the encoding of a basic load/store is sufficient to prove that the trapping instruction is of the same kind. A future version of this standard may add information to the fields that are currently zeros. However, for backwards compatibility, any such information will be for performance purposes only and can safely be ignored. For guest-page faults, the trap instruction register is written with a special pseudoinstruction value if: (a) the fault is caused by an implicit memory access for VS-stage address translation, and (b) a nonzero value (the faulting guest physical address) is written to mtval2 or htval. If both conditions are met, the value written to mtinst or htinst must be taken from Special pseudoinstruction values for guest-page faults. The RV32 values are used when VSXLEN=32, and the RV64 values when VSXLEN=64.; zero is not allowed. Table 12. Special pseudoinstruction values for guest-page faults. The RV32 values are used when VSXLEN=32, and the RV64 values when VSXLEN=64. Value Meaning 0x00002000 0x00002020 32-bit read for VS-stage address translation (RV32) 32-bit write for VS-stage address translation (RV32) 0x00003000 0x00003020 64-bit read for VS-stage address translation (RV64) 64-bit write for VS-stage address translation (RV64) The defined pseudoinstruction values are designed to correspond closely with the encodings of basic loads and stores, as illustrated by Standard instructions corresponding to the special pseudoinstructions of Special pseudoinstruction values for guest-page faults.. Table 13. Standard instructions corresponding to the special pseudoinstructions of Special pseudoinstruction values for guest-page faults. Encoding Instruction 0x00002003 0x00002023 lw x0,0(x0) sw x0,0(x0) 0x00003003 0x00003023 ld x0,0(x0) sd x0,0(x0) A write pseudoinstruction (0x00002020 or 0x00003020) is used for the case that the machine is attempting automatically to update bits A and/or D in VS-level page tables. All other implicit memory accesses for VS-stage address translation will be reads. If a machine never automatically updates bits A or D in VS-level page tables (leaving this to software), the write case will never arise. The fact that such a page table update must actually be atomic, not just a simple write, is ignored for the pseudoinstruction. If the conditions that necessitate a pseudoinstruction value can ever occur for M-mode, then mtinst cannot be entirely read-only zero; and likewise for HS-mode and htinst. However, in that case, the trap instruction registers may minimally support only values 0 and 0x00002000 or 0x00003000, and possibly 0x00002020 or 0x00003020, requiring as few as one or two flip-flops in hardware, per register. There is no harm here in ignoring the atomicity requirement for page table updates, because a hypervisor is not expected in these circumstances to emulate an implicit memory access that fails. Rather, the hypervisor is given enough information about the faulting access to be able to make the memory accessible (e.g. by restoring a missing page of virtual memory) before resuming execution by retrying the faulting instruction. The MRET instruction is used to return from a trap taken into M-mode. MRET first determines what the new privilege mode will be according to the values of MPP and MPV in mstatus or mstatush, as encoded in Value of mstatus/mstatush fields MPV and MPP after a trap into M-mode. Upon trap return, MPV is ignored when MPP=3.. MRET then in mstatus/mstatush sets MPV=0, MPP=0, MIE=MPIE, and MPIE=1. Lastly, MRET sets the privilege mode as previously determined, and sets pc=mepc. The SRET instruction is used to return from a trap taken into HS-mode or VS-mode. Its behavior depends on the current virtualization mode. When executed in M-mode or HS-mode (i.e., V=0), SRET first determines what the new privilege mode will be according to the values in hstatus.SPV and sstatus.SPP, as encoded in Value of hstatus field SPV and sstatus field SPP after a trap into HS-mode.. SRET then sets hstatus.SPV=0, and in sstatus sets SPP=0, SIE=SPIE, and SPIE=1. Lastly, SRET sets the privilege mode as previously determined, and sets pc=sepc. When executed in VS-mode (i.e., V=1), SRET sets the privilege mode according to Value of vsstatus field SPP after a trap into VS-mode., in vsstatus sets SPP=0, SIE=SPIE, and SPIE=1, and lastly sets pc=vsepc. If the Ssdbltrp extension is implemented, when SRET is executed in HS-mode, if the new privilege mode is VU, the SRET instruction sets vsstatus.SDT to 0. When executed in VS-mode, vsstatus.SDT is set to 0.","title":"\"H\" Extension for Hypervisor Support, Version 1.0","component":"isa","version":"v20250508","name":"hypervisor","url":"/isa/priv/hypervisor.html","titles":[{"text":"Privilege Modes","hash":"privilege-modes","id":1},{"text":"Hypervisor and Virtual Supervisor CSRs","hash":"hypervisor-and-virtual-supervisor-csrs","id":2},{"text":"Hypervisor Status (hstatus) Register","hash":"sec:hstatus","id":3},{"text":"Hypervisor Trap Delegation (hedeleg and hideleg) Registers","hash":"hypervisor-trap-delegation-hedeleg-and-hideleg-registers","id":4},{"text":"Hypervisor Interrupt (hvip, hip, and hie) Registers","hash":"hinterruptregs","id":5},{"text":"Hypervisor Guest External Interrupt Registers (hgeip and hgeie)","hash":"hgeinterruptregs","id":6},{"text":"Hypervisor Environment Configuration Register (henvcfg)","hash":"sec:henvcfg","id":7},{"text":"Hypervisor Counter-Enable (hcounteren) Register","hash":"hypervisor-counter-enable-hcounteren-register","id":8},{"text":"Hypervisor Time Delta (htimedelta) Register","hash":"hypervisor-time-delta-htimedelta-register","id":9},{"text":"Hypervisor Trap Value (htval) Register","hash":"hypervisor-trap-value-htval-register","id":10},{"text":"Hypervisor Trap Instruction (htinst) Register","hash":"hypervisor-trap-instruction-htinst-register","id":11},{"text":"Hypervisor Guest Address Translation and Protection (hgatp) Register","hash":"hgatp","id":12},{"text":"Virtual Supervisor Status (vsstatus) Register","hash":"vsstatus","id":13},{"text":"Virtual Supervisor Interrupt (vsip and vsie) Registers","hash":"virtual-supervisor-interrupt-vsip-and-vsie-registers","id":14},{"text":"Virtual Supervisor Trap Vector Base Address (vstvec) Register","hash":"virtual-supervisor-trap-vector-base-address-vstvec-register","id":15},{"text":"Virtual Supervisor Scratch (vsscratch) Register","hash":"virtual-supervisor-scratch-vsscratch-register","id":16},{"text":"Virtual Supervisor Exception Program Counter (vsepc) Register","hash":"virtual-supervisor-exception-program-counter-vsepc-register","id":17},{"text":"Virtual Supervisor Cause (vscause) Register","hash":"virtual-supervisor-cause-vscause-register","id":18},{"text":"Virtual Supervisor Trap Value (vstval) Register","hash":"virtual-supervisor-trap-value-vstval-register","id":19},{"text":"Virtual Supervisor Address Translation and Protection (vsatp) Register","hash":"virtual-supervisor-address-translation-and-protection-vsatp-register","id":20},{"text":"Hypervisor Instructions","hash":"hypervisor-instructions","id":21},{"text":"Hypervisor Virtual-Machine Load and Store Instructions","hash":"hypervisor-virtual-machine-load-and-store-instructions","id":22},{"text":"Hypervisor Memory-Management Fence Instructions","hash":"hfence.vma","id":23},{"text":"Machine-Level CSRs","hash":"machine-level-csrs","id":24},{"text":"Machine Status (mstatus and mstatush) Registers","hash":"machine-status-mstatus-and-mstatush-registers","id":25},{"text":"Machine Interrupt Delegation (mideleg) Register","hash":"machine-interrupt-delegation-mideleg-register","id":26},{"text":"Machine Interrupt (mip and mie) Registers","hash":"machine-interrupt-mip-and-mie-registers","id":27},{"text":"Machine Second Trap Value (mtval2) Register","hash":"machine-second-trap-value-mtval2-register","id":28},{"text":"Machine Trap Instruction (mtinst) Register","hash":"machine-trap-instruction-mtinst-register","id":29},{"text":"Two-Stage Address Translation","hash":"two-stage-translation","id":30},{"text":"Guest Physical Address Translation","hash":"guest-addr-translation","id":31},{"text":"Guest-Page Faults","hash":"guest-page-faults","id":32},{"text":"Memory-Management Fences","hash":"hyp-mm-fences","id":33},{"text":"Traps","hash":"traps","id":34},{"text":"Trap Cause Codes","hash":"sec:hcauses","id":35},{"text":"Trap Entry","hash":"trap-entry","id":36},{"text":"Transformed Instruction or Pseudoinstruction for mtinst or htinst","hash":"tinst-vals","id":37},{"text":"Trap Return","hash":"trap-return","id":38}]},"9":{"id":9,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smcsrind/Sscsrind\" Indirect CSR Access, version 1.0 Smcsrind/Sscsrind is an ISA extension that extends the indirect CSR access mechanism originally defined as part of the Smaia/Ssaia extensions, in order to make it available for use by other extensions without creating an unnecessary dependence on Smaia/Ssaia. This extension confers two benefits: It provides a means to access an array of registers via CSRs without requiring allocation of large chunks of the limited CSR address space. It enables software to access each of an array of registers by index, without requiring a switch statement with a case for each register. CSRs are accessed indirectly via this extension using select values, in contrast to being accessed directly using standard CSR numbers. A CSR accessible via one method may or may not be accessible via the other method. Select values are a separate address space from CSR numbers, and from tselect values in the Sdtrig extension. If a CSR is both directly and indirectly accessible, the CSR’s select value is unrelated to its CSR number. Further, Machine-level and Supervisor-level select values are separate address spaces from each other; however, Machine-level and Supervisor-level CSRs with the same select value may be defined by an extension as partial or full aliases with respect to each other. This typically would be done for CSRs that can be delegated from Machine-level to Supervisor-level. The machine-level extension Smcsrind encompasses all added CSRs and all behavior modifications for a hart, over all privilege levels. For a supervisor-level environment, extension Sscsrind is essentially the same as Smcsrind except excluding the machine-level CSRs and behavior not directly visible to supervisor level. Number Privilege Width Name Description 0x350 MRW XLEN miselect Machine indirect register select 0x351 MRW XLEN mireg Machine indirect register alias 0x352 MRW XLEN mireg2 Machine indirect register alias 2 0x353 MRW XLEN mireg3 Machine indirect register alias 3 0x355 MRW XLEN mireg4 Machine indirect register alias 4 0x356 MRW XLEN mireg5 Machine indirect register alias 5 0x357 MRW XLEN mireg6 Machine indirect register alias 6 The mireg* CSR numbers are not consecutive because miph is CSR number 0x354. The CSRs listed in the table above provide a window for accessing register state indirectly. The value of miselect determines which register is accessed upon read or write of each of the machine indirect alias CSRs (mireg*). miselect value ranges are allocated to dependent extensions, which specify the register state accessible via each miregi register, for each miselect value. miselect is a WARL register. The miselect register implements at least enough bits to support all implemented miselect values (corresponding to the implemented extensions that utilize miselect/mireg* to indirectly access register state). The miselect register may be read-only zero if there are no extensions implemented that utilize it. Values of miselect with the most-significant bit set (bit XLEN - 1 = 1) are designated only for custom use, presumably for accessing custom registers through the alias CSRs. Values of miselect with the most-significant bit clear are designated only for standard use and are reserved until allocated to a standard architecture extension. If XLEN is changed, the most-significant bit of miselect moves to the new position, retaining its value from before. An implementation is not required to support any custom values for miselect. The behavior upon accessing mireg* from M-mode, while miselect holds a value that is not implemented, is UNSPECIFIED. It is expected that implementations will typically raise an illegal instruction exception for such accesses, so that, for example, they can be identified as software bugs. Platform specs, profile specs, and/or the Privileged ISA spec may place more restrictions on behavior for such accesses. Attempts to access mireg* while miselect holds a number in an allocated and implemented range results in a specific behavior that, for each combination of miselect and miregi, is defined by the extension to which the miselect value is allocated. Ordinarily, each miregi will access register state, access read-only 0 state, or raise an illegal-instruction exception. For RV32, if an extension defines an indirectly accessed register as 64 bits wide, it is recommended that the lower 32 bits of the register are accessed through one of mireg, mireg2, or mireg3, while the upper 32 bits are accessed through mireg4, mireg5, or mireg6, respectively. Six *ireg* registers are defined in order to ensure that the needs of extensions in development are covered, with some room for growth. For example, for an siselect value associated with counter X, sireg/sireg2 could be used to access mhpmcounterX/mhpmeventX, while sireg4/sireg5 could access mhpmcounterXh/mhpmeventXh. Six *ireg* registers allows for accessing up to 3 CSR arrays per index (*iselect) with RV32-only CSRs, or up to 6 CSR arrays per index value without RV32-only CSRs. Number Privilege Width Name Description 0x150 SRW XLEN siselect Supervisor indirect register select 0x151 SRW XLEN sireg Supervisor indirect register alias 0x152 SRW XLEN sireg2 Supervisor indirect register alias 2 0x153 SRW XLEN sireg3 Supervisor indirect register alias 3 0x155 SRW XLEN sireg4 Supervisor indirect register alias 4 0x156 SRW XLEN sireg5 Supervisor indirect register alias 5 0x157 SRW XLEN sireg6 Supervisor indirect register alias 6 The CSRs in the table above are required if S-mode is implemented. The siselect register will support the value range 0..0xFFF at a minimum. A future extension may define a value range outside of this minimum range. Only if such an extension is implemented will siselect be required to support larger values. Requiring a range of 0–0xFFF for siselect, even though most or all of the space may be reserved or inaccessible, permits M-mode to emulate indirectly accessed registers in this implemented range, including registers that may be standardized in the future. Values of siselect with the most-significant bit set (bit XLEN - 1 = 1) are designated only for custom use, presumably for accessing custom registers through the alias CSRs. Values of siselect with the most-significant bit clear are designated only for standard use and are reserved until allocated to a standard architecture extension. If XLEN is changed, the most-significant bit of siselect moves to the new position, retaining its value from before. The behavior upon accessing sireg* from M-mode or S-mode, while siselect holds a value that is not implemented at supervisor level, is UNSPECIFIED. It is recommended that implementations raise an illegal-instruction exception for such accesses, to facilitate possible emulation (by M-mode) of these accesses. An extension is considered not to be implemented at supervisor level if machine level has disabled the extension for S-mode, such as by the settings of certain fields in CSR menvcfg, for example. Otherwise, attempts to access sireg* from M-mode or S-mode while siselect holds a number in a standard-defined and implemented range result in specific behavior that, for each combination of siselect and siregi, is defined by the extension to which the siselect value is allocated. Ordinarily, each siregi will access register state, access read-only 0 state, or, unless executing in a virtual machine (covered in the next section), raise an illegal-instruction exception. Note that the widths of siselect and sireg* are always the current XLEN rather than SXLEN. Hence, for example, if MXLEN = 64 and SXLEN = 32, then these registers are 64 bits when the current privilege mode is M (running RV64 code) but 32 bits when the privilege mode is S (RV32 code). Number Privilege Width Name Description 0x250 HRW XLEN vsiselect Virtual supervisor indirect register select 0x251 HRW XLEN vsireg Virtual supervisor indirect register alias 0x252 HRW XLEN vsireg2 Virtual supervisor indirect register alias 2 0x253 HRW XLEN vsireg3 Virtual supervisor indirect register alias 3 0x255 HRW XLEN vsireg4 Virtual supervisor indirect register alias 4 0x256 HRW XLEN vsireg5 Virtual supervisor indirect register alias 5 0x257 HRW XLEN vsireg6 Virtual supervisor indirect register alias 6 The CSRs in the table above are required if the hypervisor extension is implemented. These VS CSRs all match supervisor CSRs, and substitute for those supervisor CSRs when executing in a virtual machine (in VS-mode or VU-mode). The vsiselect register will support the value range 0..0xFFF at a minimum. A future extension may define a value range outside of this minimum range. Only if such an extension is implemented will vsiselect be required to support larger values. Requiring a range of 0–0xFFF for vsiselect, even though most or all of the space may be reserved or inaccessible, permits a hypervisor to emulate indirectly accessed registers in this implemented range, including registers that may be standardized in the future. More generally it is recommended that vsiselect and siselect be implemented with the same number of bits. This also avoids creation of a virtualization hole due to observable differences between vsiselect and siselect widths. Values of vsiselect with the most-significant bit set (bit XLEN - 1 = 1) are designated only for custom use, presumably for accessing custom registers through the alias CSRs. Values of vsiselect with the most-significant bit clear are designated only for standard use and are reserved until allocated to a standard architecture extension. If XLEN is changed, the most-significant bit of vsiselect moves to the new position, retaining its value from before. For alias CSRs sireg* and vsireg*, the hypervisor extension’s usual rules for when to raise a virtual-instruction exception (based on whether an instruction is HS-qualified) are not applicable. The rules given in this section for sireg and vsireg apply instead, unless overridden by the requirements specified in the section below, which take precedence over this section when extension Smstateen is also implemented. A virtual-instruction exception is raised for attempts from VS-mode or VU-mode to directly access vsiselect or vsireg*, or attempts from VU-mode to access siselect or sireg*. The behavior upon accessing vsireg* from M-mode or HS-mode, or accessing sireg* (really vsireg*) from VS-mode, while vsiselect holds a value that is not implemented at HS level, is UNSPECIFIED. It is recommended that implementations raise an illegal-instruction exception for such accesses, to facilitate possible emulation (by M-mode) of these accesses. Otherwise, while vsiselect holds a number in a standard-defined and implemented range, attempts to access vsireg* from a sufficiently privileged mode, or to access sireg* (really vsireg*) from VS-mode, result in specific behavior that, for each combination of vsiselect and vsiregi, is defined by the extension to which the vsiselect value is allocated. Ordinarily, each vsiregi will access register state, access read-only 0 state, or raise an exception (either an illegal-instruction exception or, for select accesses from VS-mode, a virtual-instruction exception). When vsiselect holds a value that is implemented at HS level but not at VS level, attempts to access sireg* (really vsireg*) from VS-mode will typically raise a virtual-instruction exception. But there may be cases specific to an extension where different behavior is more appropriate. Like siselect and sireg*, the widths of vsiselect and vsireg* are always the current XLEN rather than VSXLEN. Hence, for example, if HSXLEN = 64 and VSXLEN = 32, then these registers are 64 bits when accessed by a hypervisor in HS-mode (running RV64 code) but 32 bits for a guest OS in VS-mode (RV32 code). If extension Smstateen is implemented together with Smcsrind, bit 60 of state-enable register mstateen0 controls access to siselect, sireg*, vsiselect, and vsireg*. When mstateen0[60]=0, an attempt to access one of these CSRs from a privilege mode less privileged than M-mode results in an illegal-instruction exception. As always, the state-enable CSRs do not affect the accessibility of any state when in M-mode, only in less privileged modes. For more explanation, see the documentation for extension Smstateen. Other extensions may specify that certain mstateen bits control access to registers accessed indirectly through siselect + sireg*, and/or vsiselect + vsireg*. However, regardless of any other mstateen bits, if mstateen0[60] = 1, a virtual-instruction exception is raised as described in the previous section for all attempts from VS-mode or VU-mode to directly access vsiselect or vsireg*, and for all attempts from VU-mode to access siselect or sireg*. If the hypervisor extension is implemented, the same bit is defined also in hypervisor CSR hstateen0, but controls access to only siselect and sireg* (really vsiselect and vsireg*), which is the state potentially accessible to a virtual machine executing in VS or VU-mode. When hstateen0[60]=0 and mstateen0[60]=1, all attempts from VS or VU-mode to access siselect or sireg* raise a virtual-instruction exception, not an illegal-instruction exception, regardless of the value of vsiselect or any other mstateen bit. Extension Ssstateen is defined as the supervisor-level view of Smstateen. Therefore, the combination of Sscsrind and Ssstateen incorporates the bit defined above for hstateen0 but not that for mstateen0, since machine-level CSRs are not visible to supervisor level. CSR address space is reserved for a possible future \"Sucsrind\" extension that extends indirect CSR access to user mode.","title":"\"Smcsrind/Sscsrind\" Indirect CSR Access, Version 1.0","component":"isa","version":"v20250508","name":"indirect-csr","url":"/isa/priv/indirect-csr.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Machine-level CSRs","hash":"body","id":2},{"text":"Supervisor-level CSRs","hash":"supervisor-level-csrs","id":3},{"text":"Virtual Supervisor-level CSRs","hash":"virtual-supervisor-level-csrs","id":4},{"text":"Access control by the state-enable CSRs","hash":"access-control-by-the-state-enable-csrs","id":5}]},"10":{"id":10,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Machine-Level ISA, Version 1.13 This chapter describes the machine-level operations available in machine-mode (M-mode), which is the highest privilege mode in a RISC-V hart. M-mode is used for low-level access to a hardware platform and is the first mode entered at reset. M-mode can also be used to implement features that are too difficult or expensive to implement in hardware directly. The RISC-V machine-level ISA contains a common core that is extended depending on which other privilege levels are supported and other details of the hardware implementation. In addition to the machine-level CSRs described in this section, M-mode code can access all CSRs at lower privilege levels. The misa CSR is a WARL read-write register reporting the ISA supported by the hart. This register must be readable in any implementation, but a value of zero can be returned to indicate the misa register has not been implemented, requiring that CPU capabilities be determined through a separate non-standard mechanism. Figure 1. Machine ISA register (misa) The MXL (Machine XLEN) field encodes the native base integer ISA width as shown in Encoding of MXL field in misa. The MXL field is read-only. If misa is nonzero, the MXL field indicates the effective XLEN in M-mode, a constant termed MXLEN. XLEN is never greater than MXLEN, but XLEN might be smaller than MXLEN in less-privileged modes. Table 1. Encoding of MXL field in misa MXL XLEN 1 2 3 32 64 Reserved The misa CSR is MXLEN bits wide. The base width can be quickly ascertained using branches on the sign of the returned misa value, and possibly a shift left by one and a second branch on the sign. These checks can be written in assembly code without knowing the register width (MXLEN) of the hart. The base width is given by MXLEN=2MXL+4. The base width can also be found if misa is zero, by placing the immediate 2 in a register, then shifting the register left by 31 bits. If zero, the hart is RV32, else it is RV64. The Extensions field encodes the presence of the standard extensions, with a single bit per letter of the alphabet (bit 0 encodes presence of extension \"A\" , bit 1 encodes presence of extension \"B\", through to bit 25 which encodes \"Z\"). The \"I\" bit will be set for the RV32I and RV64I base ISAs, and the \"E\" bit will be set for RV32E and RV64E. The Extensions field is a WARL field that can contain writable bits where the implementation allows the supported ISA to be modified. At reset, the Extensions field shall contain the maximal set of supported extensions, and \"I\" shall be selected over \"E\" if both are available. When a standard extension is disabled by clearing its bit in misa, the instructions and CSRs defined or modified by the extension revert to their defined or reserved behaviors as if the extension is not implemented. For a given RISC-V execution environment, an instruction, extension, or other feature of the RISC-V ISA is ordinarily judged to be implemented or not by the observable execution behavior in that environment. For example, the F extension is said to be implemented for an execution environment if and only if the instructions that the RISC-V Unprivileged ISA defines for F execute as specified. With this definition of implemented, disabling an extension by clearing its bit in misa results in the extension being considered not implemented in M-mode. For example, setting misa.F=0 results in the F extension being not implemented for M-mode, because the F extension’s instructions will not act as the Unprivileged ISA requires but may instead raise an illegal-instruction exception. Defining the term implemented based strictly on the observable behavior might conflict with other common understandings of the same word. In particular, although common usage may allow for the combination \"implemented but disabled,\" in this document it is considered a contradiction of terms, because disabled implies execution will not behave as required for the feature to be considered implemented. In the same vein, \"implemented and enabled\" is redundant here; \"implemented\" suffices. Table 2. Encoding of Extensions field in misa. All bits that are reserved for future use must return zero when read. Bit Character Description 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Atomic extension B extension Compressed extension Double-precision floating-point extension RV32E/64E base ISA Single-precision floating-point extension Reserved Hypervisor extension RV32I/64I base ISA Reserved Reserved Reserved Integer Multiply/Divide extension Tentatively reserved for User-Level Interrupts extension Reserved Tentatively reserved for Packed-SIMD extension Quad-precision floating-point extension Reserved Supervisor mode implemented Reserved User mode implemented Vector extension Reserved Non-standard extensions present Reserved Reserved The \"X\" bit will be set if there are any non-standard extensions. When the \"B\" bit is 1, the implementation supports the instructions provided by the Zba, Zbb, and Zbs extensions. When the \"B\" bit is 0, it indicates that the implementation might not support one or more of the Zba, Zbb, or Zbs extensions. When the \"M\" bit is 1, the implementation supports all multiply and division instructions defined by the M extension. When the \"M\" bit is 0, it indicates that the implementation might not support those instructions. However if the Zmmul extension is supported then the multiply instructions it specifies are supported irrespective of the value of the \"M\" bit. When the \"S\" bit is 1, the implementation supports supervisor mode. When the \"S\" bit is 0, the implementation might not support supervisor mode. When the \"U\" bit is 1, the implementation supports user mode. When the \"U\" bit is 0, the implementation might not support user mode. The misa CSR exposes a rudimentary catalog of CPU features to machine-mode code. More extensive information can be obtained in machine mode by probing other machine registers, and examining other ROM storage in the system as part of the boot process. We require that lower privilege levels execute environment calls instead of reading CPU registers to determine features available at each privilege level. This enables virtualization layers to alter the ISA observed at any level, and supports a much richer command interface without burdening hardware designs. The \"E\" bit is read-only. Unless misa is all read-only zero, the \"E\" bit always reads as the complement of the \"I\" bit. If an execution environment supports both RV32E and RV32I, software can select RV32E by clearing the \"I\" bit. If an ISA feature x depends on an ISA feature y, then attempting to enable feature x but disable feature y results in both features being disabled. For example, setting \"F\"=0 and \"D\"=1 results in both \"F\" and \"D\" being cleared. Similarly, setting \"U\"=0 and \"S\"=1\" results in both \"U\" and \"S\" being cleared. An implementation may impose additional constraints on the collective setting of two or more misa fields, in which case they function collectively as a single WARL field. An attempt to write an unsupported combination causes those bits to be set to some supported combination. Writing misa may increase IALIGN, e.g., by disabling the \"C\" extension. If an instruction that would write misa increases IALIGN, and the subsequent instruction’s address is not IALIGN-bit aligned, the write to misa is suppressed, leaving misa unchanged. When software enables an extension that was previously disabled, then all state uniquely associated with that extension is UNSPECIFIED, unless otherwise specified by that extension. Although one of the bits 25—​0 in misa being set to 1 implies that the corresponding feature is implemented, the inverse is not necessarily true: one of these bits being clear does not necessarily imply that the corresponding feature is not implemented. This follows from the fact that, when a feature is not implemented, the corresponding opcodes and CSRs become reserved, not necessarily illegal. The mvendorid CSR is a 32-bit read-only register providing the JEDEC manufacturer ID of the provider of the core. This register must be readable in any implementation, but a value of 0 can be returned to indicate the field is not implemented or that this is a non-commercial implementation. Figure 2. Vendor ID register (mvendorid) JEDEC manufacturer IDs are ordinarily encoded as a sequence of one-byte continuation codes 0x7f, terminated by a one-byte ID not equal to 0x7f, with an odd parity bit in the most-significant bit of each byte. mvendorid encodes the number of one-byte continuation codes in the Bank field, and encodes the final byte in the Offset field, discarding the parity bit. For example, the JEDEC manufacturer ID 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x7f 0x8a (twelve continuation codes followed by 0x8a) would be encoded in the mvendorid CSR as 0x60a. In JEDEC’s parlance, the bank number is one greater than the number of continuation codes; hence, the mvendorid Bank field encodes a value that is one less than the JEDEC bank number. Previously the vendor ID was to be a number allocated by RISC-V International, but this duplicates the work of JEDEC in maintaining a manufacturer ID standard. At time of writing, registering a manufacturer ID with JEDEC has a one-time cost of $500. The marchid CSR is an MXLEN-bit read-only register encoding the base microarchitecture of the hart. This register must be readable in any implementation, but a value of 0 can be returned to indicate the field is not implemented. The combination of mvendorid and marchid should uniquely identify the type of hart microarchitecture that is implemented. Figure 3. Machine Architecture ID (marchid) register Open-source project architecture IDs are allocated globally by RISC-V International, and have non-zero architecture IDs with a zero most-significant-bit (MSB). Commercial architecture IDs are allocated by each commercial vendor independently, but must have the MSB set and cannot contain zero in the remaining MXLEN-1 bits. The intent is for the architecture ID to represent the microarchitecture associated with the repo around which development occurs rather than a particular organization. Commercial fabrications of open-source designs should (and might be required by the license to) retain the original architecture ID. This will aid in reducing fragmentation and tool support costs, as well as provide attribution. Open-source architecture IDs are administered by RISC-V International and should only be allocated to released, functioning open-source projects. Commercial architecture IDs can be managed independently by any registered vendor but are required to have IDs disjoint from the open-source architecture IDs (MSB set) to prevent collisions if a vendor wishes to use both closed-source and open-source microarchitectures. The convention adopted within the following Implementation field can be used to segregate branches of the same architecture design, including by organization. The misa register also helps distinguish different variants of a design. The mimpid CSR provides a unique encoding of the version of the processor implementation. This register must be readable in any implementation, but a value of 0 can be returned to indicate that the field is not implemented. The Implementation value should reflect the design of the RISC-V processor itself and not any surrounding system. Figure 4. Machine Implementation ID (mimpid) register The format of this field is left to the provider of the architecture source code, but will often be printed by standard tools as a hexadecimal string without any leading or trailing zeros, so the Implementation value can be left-justified (i.e., filled in from most-significant nibble down) with subfields aligned on nibble boundaries to ease human readability. The mhartid CSR is an MXLEN-bit read-only register containing the integer ID of the hardware thread running the code. This register must be readable in any implementation. Hart IDs might not necessarily be numbered contiguously in a multiprocessor system, but at least one hart must have a hart ID of zero. Hart IDs must be unique within the execution environment. Figure 5. Hart ID (mhartid) register In certain cases, we must ensure exactly one hart runs some code (e.g., at reset), and so require one hart to have a known hart ID of zero. For efficiency, system implementers should aim to reduce the magnitude of the largest hart ID used in a system. The mstatus register is an MXLEN-bit read/write register formatted as shown in Machine-mode status (mstatus) register for RV32 for RV32 and Machine-mode status (mstatus) register for RV64 for RV64. The mstatus register keeps track of and controls the hart’s current operating state. A restricted view of mstatus appears as the sstatus register in the S-level ISA. Figure 6. Machine-mode status (mstatus) register for RV32 Figure 7. Machine-mode status (mstatus) register for RV64 For RV32 only, mstatush is a 32-bit read/write register formatted as shown in Additional machine-mode status (mstatush) register for RV32.. Bits 30:4 of mstatush generally contain the same fields found in bits 62:36 of mstatus for RV64. Fields SD, SXL, and UXL do not exist in mstatush. Figure 8. Additional machine-mode status (mstatush) register for RV32. Global interrupt-enable bits, MIE and SIE, are provided for M-mode and S-mode respectively. These bits are primarily used to guarantee atomicity with respect to interrupt handlers in the current privilege mode. The global xIE bits are located in the low-order bits of mstatus, allowing them to be atomically set or cleared with a single CSR instruction. When a hart is executing in privilege mode x, interrupts are globally enabled when xIE=1 and globally disabled when xIE=0. Interrupts for lower-privilege modes, w<x, are always globally disabled regardless of the setting of any global wIE bit for the lower-privilege mode. Interrupts for higher-privilege modes, y>x, are always globally enabled regardless of the setting of the global yIE bit for the higher-privilege mode. Higher-privilege-level code can use separate per-interrupt enable bits to disable selected higher-privilege-mode interrupts before ceding control to a lower-privilege mode. If supervisor mode is not implemented, then SIE and SPIE are read-only 0. A higher-privilege mode y could disable all of its interrupts before ceding control to a lower-privilege mode but this would be unusual as it would leave only a synchronous trap, non-maskable interrupt, or reset as means to regain control of the hart. To support nested traps, each privilege mode x that can respond to interrupts has a two-level stack of interrupt-enable bits and privilege modes. xPIE holds the value of the interrupt-enable bit active prior to the trap, and xPP holds the previous privilege mode. The xPP fields can only hold privilege modes up to x, so MPP is two bits wide and SPP is one bit wide. When a trap is taken from privilege mode y into privilege mode x, xPIE is set to the value of xIE; xIE is set to 0; and xPP is set to y. For lower privilege modes, any trap (synchronous or asynchronous) is usually taken at a higher privilege mode with interrupts disabled upon entry. The higher-level trap handler will either service the trap and return using the stacked information, or, if not returning immediately to the interrupted context, will save the privilege stack before re-enabling interrupts, so only one entry per stack is required. An MRET or SRET instruction is used to return from a trap in M-mode or S-mode respectively. When executing an xRET instruction, supposing xPP holds the value y, xIE is set to xPIE; the privilege mode is changed to y; xPIE is set to 1; and xPP is set to the least-privileged supported mode (U if U-mode is implemented, else M). If y≠M, xRET also sets MPRV=0. Setting xPP to the least-privileged supported mode on an xRET helps identify software bugs in the management of the two-level privilege-mode stack. Trap handlers must be designed to neither enable interrupts nor cause exceptions during the phase of handling where the trap handler preserves the critical state information required to handle and resume from the trap. An exception or interrupt in this critical phase of trap handling may lead to a trap that can overwrite such critical state. This could result in the loss of data needed to recover from the initial trap. Further, if an exception occurs in the code path needed to handle traps, then such a situation may lead to an infinite loop of traps. To prevent this, trap handlers must be meticulously designed to identify and safely manage exceptions within their operational flow. xPP fields are WARL fields that can hold only privilege mode x and any implemented privilege mode lower than x. If privilege mode x is not implemented, then xPP must be read-only 0. M-mode software can determine whether a privilege mode is implemented by writing that mode to MPP then reading it back. If the machine provides only U and M modes, then only a single hardware storage bit is required to represent either 00 or 11 in MPP. A double trap typically arises during a sensitive phase in trap handling operations — when an exception or interrupt occurs while the trap handler (the component responsible for managing these events) is in a non-reentrant state. This non-reentrancy usually occurs in the early phase of trap handling, wherein the trap handler has not yet preserved the necessary state to handle and resume from the trap. The occurrence of a trap during this phase can lead to an overwrite of critical state information, resulting in the loss of data needed to recover from the initial trap. The trap that caused this critical error condition is henceforth called the unexpected trap. Trap handlers are designed to neither enable interrupts nor cause exceptions during this phase of handling. However, managing Hardware-Error exceptions, which may occur unpredictably, presents significant challenges in trap handler implementation due to the potential risk of a double trap. The M-mode-disable-trap (MDT) bit is a WARL field introduced by the Smdbltrp extension. Upon reset, the MDT field is set to 1. When the MDT bit is set to 1 by an explicit CSR write, the MIE (Machine Interrupt Enable) bit is cleared to 0. For RV64, this clearing occurs regardless of the value written, if any, to the MIE bit by the same write. The MIE bit can only be set to 1 by an explicit CSR write if the MDT bit is already 0 or, for RV64, is being set to 0 by the same write (For RV32, the MDT bit is in mstatush and the MIE bit in mstatus register). When a trap is to be taken into M-mode, if the MDT bit is currently 0, it is then set to 1, and the trap is delivered as expected. However, if MDT is already set to 1, then this is an unexpected trap. When the Smrnmi extension is implemented, a trap caused by an RNMI is not considered an unexpected trap irrespective of the state of the MDT bit. A trap caused by an RNMI does not set the MDT bit. However, a trap that occurs when executing in M-mode with mnstatus.NMIE set to 0 is an unexpected trap. In the event of a unexpected trap, the handling is as follows: When the Smrnmi extension is implemented and mnstatus.NMIE is 1, the hart traps to the RNMI handler. To deliver this trap, the mnepc and mncause registers are written with the values that the unexpected trap would have written to the mepc and mcause registers respectively. The privilege mode information fields in the mnstatus register are written to indicate M-mode and its NMIE field is set to 0. The consequence of this specification is that on occurrence of double trap the RNMI handler is not provided with information that a trap reports in the mtval and the mtval2 registers. This information, if needed, can be obtained by the RNMI handler by decoding the instruction at the address in mnepc and examining its source register contents. When the Smrnmi extension is not implemented, or if the Smrnmi extension is implemented and mnstatus.NMIE is 0, the hart enters a critical-error state without updating any architectural state, including the pc. This state involves ceasing execution, disabling all interrupts (including NMIs), and asserting a critical-error signal to the platform. The actions performed by the platform when a hart asserts a critical-error signal are platform-specific. The range of possible actions include restarting the affected hart or restarting the entire platform, among others. The MRET and SRET instructions, when executed in M-mode, set the MDT bit to 0. If the new privilege mode is U, VS, or VU, then sstatus.SDT is also set to 0. Additionally, if it is VU, then vsstatus.SDT is also set to 0. The MNRET instruction, provided by the Smrnmi extension, sets the MDT bit to 0 if the new privilege mode is not M. If it is U, VS, or VU, then sstatus.SDT is also set to 0. Additionally, if it is VU, then vsstatus.SDT is also set to 0. For RV64 harts, the SXL and UXL fields are WARL fields that control the value of XLEN for S-mode and U-mode, respectively. The encoding of these fields is the same as the MXL field of misa, shown in Encoding of MXL field in misa. The effective XLEN in S-mode and U-mode are termed SXLEN and UXLEN, respectively. When MXLEN=32, the SXL and UXL fields do not exist, and SXLEN=32 and UXLEN=32. When MXLEN=64, if S-mode is not supported, then SXL is read-only zero. Otherwise, it is a WARL field that encodes the current value of SXLEN. In particular, an implementation may make SXL be a read-only field whose value always ensures that SXLEN=MXLEN. When MXLEN=64, if U-mode is not supported, then UXL is read-only zero. Otherwise, it is a WARL field that encodes the current value of UXLEN. In particular, an implementation may make UXL be a read-only field whose value always ensures that UXLEN=MXLEN or UXLEN=SXLEN. If S-mode is implemented, the set of legal values that the UXL field may assume excludes those that would cause UXLEN to be greater than SXLEN. Whenever XLEN in any mode is set to a value less than the widest supported XLEN, all operations must ignore source operand register bits above the configured XLEN, and must sign-extend results to fill the entire widest supported XLEN in the destination register. Similarly, pc bits above XLEN are ignored, and when the pc is written, it is sign-extended to fill the widest supported XLEN. We require that operations always fill the entire underlying hardware registers with defined values to avoid implementation-defined behavior. To reduce hardware complexity, the architecture imposes no checks that lower-privilege modes have XLEN settings less than or equal to the next-higher privilege mode. In practice, such settings would almost always be a software bug, but machine operation is well-defined even in this case. Some HINT instructions are encoded as integer computational instructions that overwrite their destination register with its current value, e.g., c.addi x8, 0. When such a HINT is executed with XLEN < MXLEN and bits MXLEN..XLEN of the destination register not all equal to bit XLEN-1, it is implementation-defined whether bits MXLEN..XLEN of the destination register are unchanged or are overwritten with copies of bit XLEN-1. This definition allows implementations to elide register writeback for some HINTs, while allowing them to execute other HINTs in the same manner as other integer computational instructions. The implementation choice is observable only by privilege modes with an XLEN setting greater than the current XLEN; it is invisible to the current privilege mode. The MPRV (Modify PRiVilege) bit modifies the effective privilege mode, i.e., the privilege level at which loads and stores execute. When MPRV=0, loads and stores behave as normal, using the translation and protection mechanisms of the current privilege mode. When MPRV=1, load and store memory addresses are translated and protected, and endianness is applied, as though the current privilege mode were set to MPP. Instruction address-translation and protection are unaffected by the setting of MPRV. MPRV is read-only 0 if U-mode is not supported. An MRET or SRET instruction that changes the privilege mode to a mode less privileged than M also sets MPRV=0. The MXR (Make eXecutable Readable) bit modifies the privilege with which loads access virtual memory. When MXR=0, only loads from pages marked readable (R=1 in [sv32pte]) will succeed. When MXR=1, loads from pages marked either readable or executable (R=1 or X=1) will succeed. MXR has no effect when page-based virtual memory is not in effect. MXR is read-only 0 if S-mode is not supported. The MPRV and MXR mechanisms were conceived to improve the efficiency of M-mode routines that emulate missing hardware features, e.g., misaligned loads and stores. MPRV obviates the need to perform address translation in software. MXR allows instruction words to be loaded from pages marked execute-only. The current privilege mode and the privilege mode specified by MPP might have different XLEN settings. When MPRV=1, load and store memory addresses are treated as though the current XLEN were set to MPP’s XLEN, following the rules in Base ISA Control in mstatus Register. The SUM (permit Supervisor User Memory access) bit modifies the privilege with which S-mode loads and stores access virtual memory. When SUM=0, S-mode memory accesses to pages that are accessible by U-mode (U=1 in [sv32pte]) will fault. When SUM=1, these accesses are permitted. SUM has no effect when page-based virtual memory is not in effect. Note that, while SUM is ordinarily ignored when not executing in S-mode, it is in effect when MPRV=1 and MPP=S. SUM is read-only 0 if S-mode is not supported or if satp.MODE is read-only 0. The MXR and SUM mechanisms only affect the interpretation of permissions encoded in page-table entries. In particular, they have no impact on whether access-fault exceptions are raised due to PMAs or PMP. The MBE, SBE, and UBE bits in mstatus and mstatush are WARL fields that control the endianness of memory accesses other than instruction fetches. Instruction fetches are always little-endian. MBE controls whether non-instruction-fetch memory accesses made from M-mode (assuming mstatus.MPRV=0) are little-endian (MBE=0) or big-endian (MBE=1). If S-mode is not supported, SBE is read-only 0. Otherwise, SBE controls whether explicit load and store memory accesses made from S-mode are little-endian (SBE=0) or big-endian (SBE=1). If U-mode is not supported, UBE is read-only 0. Otherwise, UBE controls whether explicit load and store memory accesses made from U-mode are little-endian (UBE=0) or big-endian (UBE=1). For implicit accesses to supervisor-level memory management data structures, such as page tables, endianness is always controlled by SBE. Since changing SBE alters the implementation’s interpretation of these data structures, if any such data structures remain in use across a change to SBE, M-mode software must follow such a change to SBE by executing an SFENCE.VMA instruction with rs1=x0 and rs2=x0. Only in contrived scenarios will a given memory-management data structure be interpreted as both little-endian and big-endian. In practice, SBE will only be changed at runtime on world switches, in which case neither the old nor new memory-management data structure will be reinterpreted in a different endianness. In this case, no additional SFENCE.VMA is necessary, beyond what would ordinarily be required for a world switch. If S-mode is supported, an implementation may make SBE be a read-only copy of MBE. If U-mode is supported, an implementation may make UBE be a read-only copy of either MBE or SBE. An implementation supports only little-endian memory accesses if fields MBE, SBE, and UBE are all read-only 0. An implementation supports only big-endian memory accesses (aside from instruction fetches) if MBE is read-only 1 and SBE and UBE are each read-only 1 when S-mode and U-mode are supported. Volume I defines a hart’s address space as a circular sequence of 2XLEN bytes at consecutive addresses. The correspondence between addresses and byte locations is fixed and not affected by any endianness mode. Rather, the applicable endianness mode determines the order of mapping between memory bytes and a multibyte quantity (halfword, word, etc.). Standard RISC-V ABIs are expected to be purely little-endian-only or big-endian-only, with no accommodation for mixing endianness. Nevertheless, endianness control has been defined so as to permit, for instance, an OS of one endianness to execute user-mode programs of the opposite endianness. Consideration has been given also to the possibility of non-standard usages whereby software flips the endianness of memory accesses as needed. RISC-V instructions are uniformly little-endian to decouple instruction encoding from the current endianness settings, for the benefit of both hardware and software. Otherwise, for instance, a RISC-V assembler or disassembler would always need to know the intended active endianness, despite that the endianness mode might change dynamically during execution. In contrast, by giving instructions a fixed endianness, it is sometimes possible for carefully written software to be endianness-agnostic even in binary form, much like position-independent code. The choice to have instructions be only little-endian does have consequences, however, for RISC-V software that encodes or decodes machine instructions. In big-endian mode, such software must account for the fact that explicit loads and stores have endianness opposite that of instructions, for example by swapping byte order after loads and before stores. The TVM (Trap Virtual Memory) bit is a WARL field that supports intercepting supervisor virtual-memory management operations. When TVM=1, attempts to read or write the satp CSR or execute an SFENCE.VMA or SINVAL.VMA instruction while executing in S-mode will raise an illegal-instruction exception. When TVM=0, these operations are permitted in S-mode. TVM is read-only 0 when S-mode is not supported. The TVM mechanism improves virtualization efficiency by permitting guest operating systems to execute in S-mode, rather than classically virtualizing them in U-mode. This approach obviates the need to trap accesses to most S-mode CSRs. Trapping satp accesses and the SFENCE.VMA and SINVAL.VMA instructions provides the hooks necessary to lazily populate shadow page tables. The TW (Timeout Wait) bit is a WARL field that supports intercepting the WFI instruction (see Wait for Interrupt). When TW=0, the WFI instruction may execute in lower privilege modes when not prevented for some other reason. When TW=1, then if WFI is executed in any less-privileged mode, and it does not complete within an implementation-specific, bounded time limit, the WFI instruction causes an illegal-instruction exception. An implementation may have WFI always raise an illegal-instruction exception in less-privileged modes when TW=1, even if there are pending globally-disabled interrupts when the instruction is executed. TW is read-only 0 when there are no modes less privileged than M. Trapping the WFI instruction can trigger a world switch to another guest OS, rather than wastefully idling in the current guest. When S-mode is implemented, then executing WFI in U-mode causes an illegal-instruction exception, unless it completes within an implementation-specific, bounded time limit. A future revision of this specification might add a feature that allows S-mode to selectively permit WFI in U-mode. Such a feature would only be active when TW=0. The TSR (Trap SRET) bit is a WARL field that supports intercepting the supervisor exception return instruction, SRET. When TSR=1, attempts to execute SRET while executing in S-mode will raise an illegal-instruction exception. When TSR=0, this operation is permitted in S-mode. TSR is read-only 0 when S-mode is not supported. Trapping SRET is necessary to emulate the hypervisor extension (see [hypervisor]) on implementations that do not provide it. Supporting substantial extensions is one of the primary goals of RISC-V, and hence we define a standard interface to allow unchanged privileged-mode code, particularly a supervisor-level OS, to support arbitrary user-mode state extensions. To date, the V extension is the only standard extension that defines additional state beyond the floating-point CSR and data registers. The FS[1:0] and VS[1:0] WARL fields and the XS[1:0] read-only field are used to reduce the cost of context save and restore by setting and tracking the current state of the floating-point unit and any other user-mode extensions respectively. The FS field encodes the status of the floating-point unit state, including the floating-point registers f0–f31 and the CSRs fcsr, frm, and fflags. The VS field encodes the status of the vector extension state, including the vector registers v0–v31 and the CSRs vcsr, vxrm, vxsat, vstart, vl, vtype, and vlenb. The XS field encodes the status of additional user-mode extensions and associated state. These fields can be checked by a context switch routine to quickly determine whether a state save or restore is required. If a save or restore is required, additional instructions and CSRs are typically required to effect and optimize the process. The design anticipates that most context switches will not need to save/restore state in either or both of the floating-point unit or other extensions, so provides a fast check via the SD bit. The FS, VS, and XS fields use the same status encoding as shown in Encoding of FS[1:0], VS[1:0], and XS[1:0] status fields, with the four possible status values being Off, Initial, Clean, and Dirty. Table 3. Encoding of FS[1:0], VS[1:0], and XS[1:0] status fields Status FS and VS Meaning XS Meaning 0 1 2 3 Off Initial Clean Dirty All off None dirty or clean, some on None dirty, some clean Some dirty If the F extension is implemented, the FS field shall not be read-only zero. If neither the F extension nor S-mode is implemented, then FS is read-only zero. If S-mode is implemented but the F extension is not, FS may optionally be read-only zero. Implementations with S-mode but without the F extension are permitted, but not required, to make the FS field be read-only zero. Some such implementations will choose not to have the FS field be read-only zero, so as to enable emulation of the F extension for both S-mode and U-mode via invisible traps into M-mode. If the v registers are implemented, the VS field shall not be read-only zero. If neither the v registers nor S-mode is implemented, then VS is read-only zero. If S-mode is implemented but the v registers are not, VS may optionally be read-only zero. In harts without additional user extensions requiring new state, the XS field is read-only zero. Every additional extension with state provides a CSR field that encodes the equivalent of the XS states. The XS field represents a summary of all extensions' status as shown in Encoding of FS[1:0], VS[1:0], and XS[1:0] status fields. The XS field effectively reports the maximum status value across all user-extension status fields, though individual extensions can use a different encoding than XS. The SD bit is a read-only bit that summarizes whether either the FS, VS, or XS fields signal the presence of some dirty state that will require saving extended user context to memory. If FS, XS, and VS are all read-only zero, then SD is also always zero. When an extension’s status is set to Off, any instruction that attempts to read or write the corresponding state will cause an illegal-instruction exception. When the status is Initial, the corresponding state should have an initial constant value. When the status is Clean, the corresponding state is potentially different from the initial value, but matches the last value stored on a context swap. When the status is Dirty, the corresponding state has potentially been modified since the last context save. During a context save, the responsible privileged code need only write out the corresponding state if its status is Dirty, and can then reset the extension’s status to Clean. During a context restore, the context need only be loaded from memory if the status is Clean (it should never be Dirty at restore). If the status is Initial, the context must be set to an initial constant value on context restore to avoid a security hole, but this can be done without accessing memory. For example, the floating-point registers can all be initialized to the immediate value 0. The FS and XS fields are read by the privileged code before saving the context. The FS field is set directly by privileged code when resuming a user context, while the XS field is set indirectly by writing to the status register of the individual extensions. The status fields will also be updated during execution of instructions, regardless of privilege mode. Extensions to the user-mode ISA often include additional user-mode state, and this state can be considerably larger than the base integer registers. The extensions might only be used for some applications, or might only be needed for short phases within a single application. To improve performance, the user-mode extension can define additional instructions to allow user-mode software to return the unit to an initial state or even to turn off the unit. For example, a coprocessor might require to be configured before use and can be \"unconfigured\" after use. The unconfigured state would be represented as the Initial state for context save. If the same application remains running between the unconfigure and the next configure (which would set status to Dirty), there is no need to actually reinitialize the state at the unconfigure instruction, as all state is local to the user process, i.e., the Initial state may only cause the coprocessor state to be initialized to a constant value at context restore, not at every unconfigure. Executing a user-mode instruction to disable a unit and place it into the Off state will cause an illegal-instruction exception to be raised if any subsequent instruction tries to use the unit before it is turned back on. A user-mode instruction to turn a unit on must also ensure the unit’s state is properly initialized, as the unit might have been used by another context meantime. Changing the setting of FS has no effect on the contents of the floating-point register state. In particular, setting FS=Off does not destroy the state, nor does setting FS=Initial clear the contents. Similarly, the setting of VS has no effect on the contents of the vector register state. Other extensions, however, might not preserve state when set to Off. Implementations may choose to track the dirtiness of the floating-point register state imprecisely by reporting the state to be dirty even when it has not been modified. On some implementations, some instructions that do not mutate the floating-point state may cause the state to transition from Initial or Clean to Dirty. On other implementations, dirtiness might not be tracked at all, in which case the valid FS states are Off and Dirty, and an attempt to set FS to Initial or Clean causes it to be set to Dirty. This definition of FS does not disallow setting FS to Dirty as a result of errant speculation. Some platforms may choose to disallow speculatively writing FS to close a potential side channel. If an instruction explicitly or implicitly writes a floating-point register or the fcsr but does not alter its contents, and FS=Initial or FS=Clean, it is implementation-defined whether FS transitions to Dirty. Implementations may choose to track the dirtiness of the vector register state in an analogous imprecise fashion, including possibly setting VS to Dirty when software attempts to set VS=Initial or VS=Clean. When VS=Initial or VS=Clean, it is implementation-defined whether an instruction that writes a vector register or vector CSR but does not alter its contents causes VS to transition to Dirty. FS, VS, and XS state transitions. shows all the possible state transitions for the FS, VS, or XS status bits. Note that the standard floating-point and vector extensions do not support user-mode unconfigure or disable/enable instructions. Table 4. FS, VS, and XS state transitions. Current State Action Off Initial Clean Dirty At context save in privileged code Save state? Next state No Off No Initial No Clean Yes Clean At context restore in privileged code Restore state? Next state No Off Yes, to initial Initial Yes, from memory Clean N/A N/A Execute instruction to read state Action? Next state Exception Off Execute Initial Execute Clean Execute Dirty Execute instruction that possibly modifies state, including configuration Action? Next state Exception Off Execute Dirty Execute Dirty Execute Dirty Execute instruction to unconfigure unit Action? Next state Exception Off Execute Initial Execute Initial Execute Initial Execute instruction to disable unit Action? Next state Execute Off Execute Off Execute Off Execute Off Execute instruction to enable unit Action? Next state Execute Initial Execute Initial Execute Initial Execute Initial Standard privileged instructions to initialize, save, and restore extension state are provided to insulate privileged code from details of the added extension state by treating the state as an opaque object. Many coprocessor extensions are only used in limited contexts that allows software to safely unconfigure or even disable units when done. This reduces the context-switch overhead of large stateful coprocessors. We separate out floating-point state from other extension state, as when a floating-point unit is present the floating-point registers are part of the standard calling convention, and so user-mode software cannot know when it is safe to disable the floating-point unit. The XS field provides a summary of all added extension state, but additional microarchitectural bits might be maintained in the extension to further reduce context save and restore overhead. The SD bit is read-only and is set when either the FS, VS, or XS bits encode a Dirty state (i.e., SD=(FS==0b11 OR XS==0b11 OR VS==0b11)). This allows privileged code to quickly determine when no additional context save is required beyond the integer register set and pc. The floating-point unit state is always initialized, saved, and restored using standard instructions (F, D, and/or Q), and privileged code must be aware of FLEN to determine the appropriate space to reserve for each f register. Machine and Supervisor modes share a single copy of the FS, VS, and XS bits. Supervisor-level software normally uses the FS, VS, and XS bits directly to record the status with respect to the supervisor-level saved context. Machine-level software must be more conservative in saving and restoring the extension state in their corresponding version of the context. In any reasonable use case, the number of context switches between user and supervisor level should far outweigh the number of context switches to other privilege levels. Note that coprocessors should not require their context to be saved and restored to service asynchronous interrupts, unless the interrupt results in a user-level context swap. The Zicfilp extension adds the SPELP and MPELP fields that hold the previous ELP, and are updated as specified in [ZICFILP_FORWARD_TRAPS]. The xPELP fields are encoded as follows: 0 - NO_LP_EXPECTED - no landing pad instruction expected. 1 - LP_EXPECTED - a landing pad instruction is expected. The mtvec register is an MXLEN-bit WARL read/write register that holds trap vector configuration, consisting of a vector base address (BASE) and a vector mode (MODE). Figure 9. Encoding of mtvec MODE field. The mtvec register must always be implemented, but can contain a read-only value. If mtvec is writable, the set of values the register may hold can vary by implementation. The value in the BASE field must always be aligned on a 4-byte boundary, and the MODE setting may impose additional alignment constraints on the value in the BASE field. Note that the CSR contains only bits XLEN-1 through 2 of the address BASE. When used as an address, the lower two bits are filled with zeroes to obtain an XLEN-bit address that is always aligned on a 4-byte boundary. We allow for considerable flexibility in implementation of the trap vector base address. On the one hand, we do not wish to burden low-end implementations with a large number of state bits, but on the other hand, we wish to allow flexibility for larger systems. Table 5. Encoding of mtvec MODE field. Value Name Description 0 1 ≥2 Direct Vectored --- All traps set pc to BASE. Asynchronous interrupts set pc to BASE+4×cause. Reserved The encoding of the MODE field is shown in Encoding of mtvec MODE field.. When MODE=Direct, all traps into machine mode cause the pc to be set to the address in the BASE field. When MODE=Vectored, all synchronous exceptions into machine mode cause the pc to be set to the address in the BASE field, whereas interrupts cause the pc to be set to the address in the BASE field plus four times the interrupt cause number. For example, a machine-mode timer interrupt (see Machine cause (mcause) register values after trap.) causes the pc to be set to BASE+0x1c. An implementation may have different alignment constraints for different modes. In particular, MODE=Vectored may have stricter alignment constraints than MODE=Direct. Allowing coarser alignments in Vectored mode enables vectoring to be implemented without a hardware adder circuit. Reset and NMI vector locations are given in a platform specification. By default, all traps at any privilege level are handled in machine mode, though a machine-mode handler can redirect traps back to the appropriate level with the MRET instruction (Trap-Return Instructions). To increase performance, implementations can provide individual read/write bits within medeleg and mideleg to indicate that certain exceptions and interrupts should be processed directly by a lower privilege level. The machine exception delegation register (medeleg) is a 64-bit read/write register. The machine interrupt delegation (mideleg) register is an MXLEN-bit read/write register. In harts with S-mode, the medeleg and mideleg registers must exist, and setting a bit in medeleg or mideleg will delegate the corresponding trap, when occurring in S-mode or U-mode, to the S-mode trap handler. In harts without S-mode, the medeleg and mideleg registers should not exist. In versions 1.9.1 and earlier , these registers existed but were hardwired to zero in M-mode only, or M/U without N harts. There is no reason to require they return zero in those cases, as the misa register indicates whether they exist. When a trap is delegated to S-mode, the scause register is written with the trap cause; the sepc register is written with the virtual address of the instruction that took the trap; the stval register is written with an exception-specific datum; the SPP field of mstatus is written with the active privilege mode at the time of the trap; the SPIE field of mstatus is written with the value of the SIE field at the time of the trap; and the SIE field of mstatus is cleared. The mcause, mepc, and mtval registers and the MPP and MPIE fields of mstatus are not written. An implementation can choose to subset the delegatable traps, with the supported delegatable bits found by writing one to every bit location, then reading back the value in medeleg or mideleg to see which bit positions hold a one. An implementation shall not have any bits of medeleg be read-only one, i.e., any synchronous trap that can be delegated must support not being delegated. Similarly, an implementation shall not fix as read-only one any bits of mideleg corresponding to machine-level interrupts (but may do so for lower-level interrupts). Version 1.11 and earlier prohibited having any bits of mideleg be read-only one. Platform standards may always add such restrictions. Traps never transition from a more-privileged mode to a less-privileged mode. For example, if M-mode has delegated illegal-instruction exceptions to S-mode, and M-mode software later executes an illegal instruction, the trap is taken in M-mode, rather than being delegated to S-mode. By contrast, traps may be taken horizontally. Using the same example, if M-mode has delegated illegal-instruction exceptions to S-mode, and S-mode software later executes an illegal instruction, the trap is taken in S-mode. Delegated interrupts result in the interrupt being masked at the delegator privilege level. For example, if the supervisor timer interrupt (STI) is delegated to S-mode by setting mideleg[5], STIs will not be taken when executing in M-mode. By contrast, if mideleg[5] is clear, STIs can be taken in any mode and regardless of current mode will transfer control to M-mode. Figure 10. Machine Exception Delegation (medeleg) register. medeleg has a bit position allocated for every synchronous exception shown in Machine cause (mcause) register values after trap., with the index of the bit position equal to the value returned in the mcause register (i.e., setting bit 8 allows user-mode environment calls to be delegated to a lower-privilege trap handler). When XLEN=32, medelegh is a 32-bit read/write register that aliases bits 63:32 of medeleg. The medelegh register does not exist when XLEN=64. Figure 11. Machine Interrupt Delegation (mideleg) Register. mideleg holds trap delegation bits for individual interrupts, with the layout of bits matching those in the mip register (i.e., STIP interrupt delegation control is located in bit 5). For exceptions that cannot occur in less privileged modes, the corresponding medeleg bits should be read-only zero. In particular, medeleg[11] is read-only zero. The medeleg[16] is read-only zero as double trap is not delegatable. The mip register is an MXLEN-bit read/write register containing information on pending interrupts, while mie is the corresponding MXLEN-bit read/write register containing interrupt enable bits. Interrupt cause number i (as reported in CSR mcause, Machine Cause (mcause) Register) corresponds with bit i in both mip and mie. Bits 15:0 are allocated to standard interrupt causes only, while bits 16 and above are designated for platform use. Interrupts designated for platform use may be designated for custom use at the platform’s discretion. Figure 12. Machine Interrupt-Pending (mip) register. Figure 13. Machine Interrupt-Enable (mie) register An interrupt i will trap to M-mode (causing the privilege mode to change to M-mode) if all of the following are true: (a) either the current privilege mode is M and the MIE bit in the mstatus register is set, or the current privilege mode has less privilege than M-mode; (b) bit i is set in both mip and mie; and (c) if register mideleg exists, bit i is not set in mideleg. These conditions for an interrupt trap to occur must be evaluated in a bounded amount of time from when an interrupt becomes, or ceases to be, pending in mip, and must also be evaluated immediately following the execution of an xRET instruction or an explicit write to a CSR on which these interrupt trap conditions expressly depend (including mip, mie, mstatus, and mideleg). Interrupts to M-mode take priority over any interrupts to lower privilege modes. Each individual bit in register mip may be writable or may be read-only. When bit i in mip is writable, a pending interrupt i can be cleared by writing 0 to this bit. If interrupt i can become pending but bit i in mip is read-only, the implementation must provide some other mechanism for clearing the pending interrupt. A bit in mie must be writable if the corresponding interrupt can ever become pending. Bits of mie that are not writable must be read-only zero. The standard portions (bits 15:0) of the mip and mie registers are formatted as shown in Standard portion (bits 15:0) of mip. and Standard portion (bits 15:0) of mie. respectively. Figure 14. Standard portion (bits 15:0) of mip. Figure 15. Standard portion (bits 15:0) of mie. The machine-level interrupt registers handle a few root interrupt sources which are assigned a fixed service priority for simplicity, while separate external interrupt controllers can implement a more complex prioritization scheme over a much larger set of interrupts that are then muxed into the machine-level interrupt sources. The non-maskable interrupt is not made visible via the mip register as its presence is implicitly known when executing the NMI trap handler. Bits mip.MEIP and mie.MEIE are the interrupt-pending and interrupt-enable bits for machine-level external interrupts. MEIP is read-only in mip, and is set and cleared by a platform-specific interrupt controller. Bits mip.MTIP and mie.MTIE are the interrupt-pending and interrupt-enable bits for machine timer interrupts. MTIP is read-only in the mip register, and is cleared by writing to the memory-mapped machine-mode timer compare register. Bits mip.MSIP and mie.MSIE are the interrupt-pending and interrupt-enable bits for machine-level software interrupts. MSIP is read-only in mip, and is written by accesses to memory-mapped control registers, which are used by remote harts to provide machine-level interprocessor interrupts. A hart can write its own MSIP bit using the same memory-mapped control register. If a system has only one hart, or if a platform standard supports the delivery of machine-level interprocessor interrupts through external interrupts (MEI) instead, then mip.MSIP and mie.MSIE may both be read-only zeros. If supervisor mode is not implemented, bits SEIP, STIP, and SSIP of mip and SEIE, STIE, and SSIE of mie are read-only zeros. If supervisor mode is implemented, bits mip.SEIP and mie.SEIE are the interrupt-pending and interrupt-enable bits for supervisor-level external interrupts. SEIP is writable in mip, and may be written by M-mode software to indicate to S-mode that an external interrupt is pending. Additionally, the platform-level interrupt controller may generate supervisor-level external interrupts. Supervisor-level external interrupts are made pending based on the logical-OR of the software-writable SEIP bit and the signal from the external interrupt controller. When mip is read with a CSR instruction, the value of the SEIP bit returned in the rd destination register is the logical-OR of the software-writable bit and the interrupt signal from the interrupt controller, but the signal from the interrupt controller is not used to calculate the value written to SEIP. Only the software-writable SEIP bit participates in the read-modify-write sequence of a CSRRS or CSRRC instruction. For example, if we name the software-writable SEIP bit B and the signal from the external interrupt controller E, then if csrrs t0, mip, t1 is executed, t0[9] is written with B || E, then B is written with B || t1[9]. If csrrw t0, mip, t1 is executed, then t0[9] is written with B || E, and B is simply written with t1[9]. In neither case does B depend upon E. The SEIP field behavior is designed to allow a higher privilege layer to mimic external interrupts cleanly, without losing any real external interrupts. The behavior of the CSR instructions is slightly modified from regular CSR accesses as a result. If supervisor mode is implemented, bits mip.STIP and mie.STIE are the interrupt-pending and interrupt-enable bits for supervisor-level timer interrupts. STIP is writable in mip, and may be written by M-mode software to deliver timer interrupts to S-mode. If supervisor mode is implemented, bits mip.SSIP and mie.SSIE are the interrupt-pending and interrupt-enable bits for supervisor-level software interrupts. SSIP is writable in mip and may also be set to 1 by a platform-specific interrupt controller. If the Sscofpmf extension is implemented, bits mip.LCOFIP and mie.LCOFIE are the interrupt-pending and interrupt-enable bits for local-counter-overflow interrupts. LCOFIP is read-write in mip and reflects the occurrence of a local counter-overflow overflow interrupt request resulting from any of the mhpmeventn.OF bits being set. If the Sscofpmf extension is not implemented, mip.LCOFIP and mie.LCOFIE are read-only zeros. Multiple simultaneous interrupts destined for M-mode are handled in the following decreasing priority order: MEI, MSI, MTI, SEI, SSI, STI, LCOFI. The machine-level interrupt fixed-priority ordering rules were developed with the following rationale. Interrupts for higher privilege modes must be serviced before interrupts for lower privilege modes to support preemption. The platform-specific machine-level interrupt sources in bits 16 and above have platform-specific priority, but are typically chosen to have the highest service priority to support very fast local vectored interrupts. External interrupts are handled before internal (timer/software) interrupts as external interrupts are usually generated by devices that might require low interrupt service times. Software interrupts are handled before internal timer interrupts, because internal timer interrupts are usually intended for time slicing, where time precision is less important, whereas software interrupts are used for inter-processor messaging. Software interrupts can be avoided when high-precision timing is required, or high-precision timer interrupts can be routed via a different interrupt path. Software interrupts are located in the lowest four bits of mip as these are often written by software, and this position allows the use of a single CSR instruction with a five-bit immediate. Restricted views of the mip and mie registers appear as the sip and sie registers for supervisor level. If an interrupt is delegated to S-mode by setting a bit in the mideleg register, it becomes visible in the sip register and is maskable using the sie register. Otherwise, the corresponding bits in sip and sie are read-only zero. M-mode includes a basic hardware performance-monitoring facility. The mcycle CSR counts the number of clock cycles executed by the processor core on which the hart is running. The minstret CSR counts the number of instructions the hart has retired. The mcycle and minstret registers have 64-bit precision on all RV32 and RV64 harts. The counter registers have an arbitrary value after the hart is reset, and can be written with a given value. Any CSR write takes effect after the writing instruction has otherwise completed. The mcycle CSR may be shared between harts on the same core, in which case writes to mcycle will be visible to those harts. The platform should provide a mechanism to indicate which harts share an mcycle CSR. The hardware performance monitor includes 29 additional 64-bit event counters, mhpmcounter3-mhpmcounter31. The event selector CSRs, mhpmevent3-mhpmevent31, are 64-bit WARL registers that control which event causes the corresponding counter to increment. The meaning of these events is defined by the platform, but event 0 is defined to mean \"no event.\" All counters should be implemented, but a legal implementation is to make both the counter and its corresponding event selector be read-only 0. Figure 16. Hardware performance monitor counters. The mhpmcounters are WARL registers that support up to 64 bits of precision on RV32 and RV64. When XLEN=32, reads of the mcycle, minstret, mhpmcountern, and mhpmeventn CSRs return bits 31-0 of the corresponding register, and writes change only bits 31-0; reads of the mcycleh, minstreth, mhpmcounternh, and mhpmeventnh CSRs return bits 63-32 of the corresponding register, and writes change only bits 63-32. The mhpmeventnh CSRs are provided only if the Sscofpmf extension is implemented. The counter-enable mcounteren register is a 32-bit register that controls the availability of the hardware performance-monitoring counters to the next-lower privileged mode. Figure 17. Counter-enable (mcounteren) register. The settings in this register only control accessibility. The act of reading or writing this register does not affect the underlying counters, which continue to increment even when not accessible. When the CY, TM, IR, or HPMn bit in the mcounteren register is clear, attempts to read the cycle, time, instret, or hpmcountern register while executing in S-mode or U-mode will cause an illegal-instruction exception. When one of these bits is set, access to the corresponding register is permitted in the next implemented privilege mode (S-mode if implemented, otherwise U-mode). The counter-enable bits support two common use cases with minimal hardware. For harts that do not need high-performance timers and counters, machine-mode software can trap accesses and implement all features in software. For harts that need high-performance timers and counters but are not concerned with obfuscating the underlying hardware counters, the counters can be directly exposed to lower privilege modes. The cycle, instret, and hpmcountern CSRs are read-only shadows of mcycle, minstret, and mhpmcounter n, respectively. The time CSR is a read-only shadow of the memory-mapped mtime register. Analogously, when XLEN=32, the cycleh, instreth and hpmcounternh CSRs are read-only shadows of mcycleh, minstreth and mhpmcounternh, respectively. When XLEN=32, the timeh CSR is a read-only shadow of the upper 32 bits of the memory-mapped mtime register, while time shadows only the lower 32 bits of mtime. Implementations can convert reads of the time and timeh CSRs into loads to the memory-mapped mtime register, or emulate this functionality on behalf of less-privileged modes in M-mode software. In harts with U-mode, the mcounteren must be implemented, but all fields are WARL and may be read-only zero, indicating reads to the corresponding counter will cause an illegal-instruction exception when executing in a less-privileged mode. In harts without U-mode, the mcounteren register should not exist. Figure 18. Counter-inhibit mcountinhibit register The counter-inhibit register mcountinhibit is a 32-bit WARL register that controls which of the hardware performance-monitoring counters increment. The settings in this register only control whether the counters increment; their accessibility is not affected by the setting of this register. When the CY, IR, or HPMn bit in the mcountinhibit register is clear, the mcycle, minstret, or mhpmcountern register increments as usual. When the CY, IR, or HPM_n_ bit is set, the corresponding counter does not increment. The mcycle CSR may be shared between harts on the same core, in which case the mcountinhibit.CY field is also shared between those harts, and so writes to mcountinhibit.CY will be visible to those harts. If the mcountinhibit register is not implemented, the implementation behaves as though the register were set to zero. When the mcycle and minstret counters are not needed, it is desirable to conditionally inhibit them to reduce energy consumption. Providing a single CSR to inhibit all counters also allows the counters to be atomically sampled. Because the mtime counter can be shared between multiple cores, it cannot be inhibited with the mcountinhibit mechanism. The mscratch register is an MXLEN-bit read/write register dedicated for use by machine mode. Typically, it is used to hold a pointer to a machine-mode hart-local context space and swapped with a user register upon entry to an M-mode trap handler. Figure 19. Machine-mode scratch register. The MIPS ISA allocated two user registers (k0/k1) for use by the operating system. Although the MIPS scheme provides a fast and simple implementation, it also reduces available user registers, and does not scale to further privilege levels, or nested traps. It can also require both registers are cleared before returning to user level to avoid a potential security hole and to provide deterministic debugging behavior. The RISC-V user ISA was designed to support many possible privileged system environments and so we did not want to infect the user-level ISA with any OS-dependent features. The RISC-V CSR swap instructions can quickly save/restore values to the mscratch register. Unlike the MIPS design, the OS can rely on holding a value in the mscratch register while the user context is running. mepc is an MXLEN-bit read/write register formatted as shown in Machine exception program counter register.. The low bit of mepc (mepc[0]) is always zero. On implementations that support only IALIGN=32, the two low bits (mepc[1:0]) are always zero. If an implementation allows IALIGN to be either 16 or 32 (by changing CSR misa, for example), then, whenever IALIGN=32, bit mepc[1] is masked on reads so that it appears to be 0. This masking occurs also for the implicit read by the MRET instruction. Though masked, mepc[1] remains writable when IALIGN=32. mepc is a WARL register that must be able to hold all valid virtual addresses. It need not be capable of holding all possible invalid addresses. Prior to writing mepc, implementations may convert an invalid address into some other invalid address that mepc is capable of holding. When address translation is not in effect, virtual addresses and physical addresses are equal. Hence, the set of addresses mepc must be able to represent includes the set of physical addresses that can be used as a valid pc or effective address. When a trap is taken into M-mode, mepc is written with the virtual address of the instruction that was interrupted or that encountered the exception. Otherwise, mepc is never written by the implementation, though it may be explicitly written by software. Figure 20. Machine exception program counter register. The mcause register is an MXLEN-bit read-write register formatted as shown in Machine Cause (mcause) register.. When a trap is taken into M-mode, mcause is written with a code indicating the event that caused the trap. Otherwise, mcause is never written by the implementation, though it may be explicitly written by software. The Interrupt bit in the mcause register is set if the trap was caused by an interrupt. The Exception Code field contains a code identifying the last exception or interrupt. Machine cause (mcause) register values after trap. lists the possible machine-level exception codes. The Exception Code is a WLRL field, so is only guaranteed to hold supported exception codes. Figure 21. Machine Cause (mcause) register. Note that load and load-reserved instructions generate load exceptions, whereas store, store-conditional, and AMO instructions generate store/AMO exceptions. Interrupts can be separated from other traps with a single branch on the sign of the mcause register value. A shift left can remove the interrupt bit and scale the exception codes to index into a trap vector table. We do not distinguish privileged instruction exceptions from illegal-instruction exceptions. This simplifies the architecture and also hides details of which higher-privilege instructions are supported by an implementation. The privilege level servicing the trap can implement a policy on whether these need to be distinguished, and if so, whether a given opcode should be treated as illegal or privileged. If an instruction may raise multiple synchronous exceptions, the decreasing priority order of Synchronous exception priority in decreasing priority order. indicates which exception is taken and reported in mcause. The priority of any custom synchronous exceptions is implementation-defined. Table 6. Machine cause (mcause) register values after trap. Interrupt Exception Code Description 1 1 1 1 0 1 2 3 Reserved Supervisor software interrupt Reserved Machine software interrupt 1 1 1 1 4 5 6 7 Reserved Supervisor timer interrupt Reserved Machine timer interrupt 1 1 1 1 8 9 10 11 Reserved Supervisor external interrupt Reserved Machine external interrupt 1 1 1 1 12 13 14-15 ≥16 Reserved Counter-overflow interrupt Reserved Designated for platform use 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20-23 24-31 32-47 48-63 ≥64 Instruction address misaligned Instruction access fault Illegal instruction Breakpoint Load address misaligned Load access fault Store/AMO address misaligned Store/AMO access fault Environment call from U-mode Environment call from S-mode Reserved Environment call from M-mode Instruction page fault Load page fault Reserved Store/AMO page fault Double trap Reserved Software check Hardware error Reserved Designated for custom use Reserved Designated for custom use Reserved Table 7. Synchronous exception priority in decreasing priority order. Priority Exc.Code Description Highest 3 Instruction address breakpoint 12, 1 During instruction address translation: First encountered page fault or access fault 1 With physical address for instruction: Instruction access fault 2 0 8,9,11 3 3 Illegal instruction Instruction address misaligned Environment call Environment break Load/store/AMO address breakpoint 4,6 Optionally: Load/store/AMO address misaligned 13, 15, 5, 7 During address translation for an explicit memory access: First encountered page fault or access fault 5,7 With physical address for an explicit memory access: Load/store/AMO access fault Lowest 4,6 If not higher priority: Load/store/AMO address misaligned When a virtual address is translated into a physical address, the address translation algorithm determines what specific exception may be raised. Load/store/AMO address-misaligned exceptions may have either higher or lower priority than load/store/AMO page-fault and access-fault exceptions. The relative priority of load/store/AMO address-misaligned and page-fault exceptions is implementation-defined to flexibly cater to two design points. Implementations that never support misaligned accesses can unconditionally raise the misaligned-address exception without performing address translation or protection checks. Implementations that support misaligned accesses only to some physical addresses must translate and check the address before determining whether the misaligned access may proceed, in which case raising the page-fault exception or access is more appropriate. Instruction address breakpoints have the same cause value as, but different priority than, data address breakpoints (a.k.a. watchpoints) and environment break exceptions (which are raised by the EBREAK instruction). Instruction address-misaligned exceptions are raised by control-flow instructions with misaligned targets, rather than by the act of fetching an instruction. Therefore, these exceptions have lower priority than other instruction address exceptions. A software-check exception is a synchronous exception that is triggered when there are violations of checks and assertions defined by ISA extensions that aim to safeguard the integrity of software assets, including e.g. control-flow and memory-access constraints. When this exception is raised, the xtval register is set either to 0 or to an informative value defined by the extension that stipulated the exception be raised. The priority of this exception, relative to other synchronous exceptions, depends on the cause of this exception and is defined by the extension that stipulated the exception be raised. A hardware-error exception is a synchronous exception triggered when corrupted or uncorrectable data is accessed explicitly or implicitly by an instruction. In this context, \"data\" encompasses all types of information used within a RISC-V hart. Upon a hardware-error exception, the xepc register is set to the address of the instruction that attempted to access corrupted data, while the xtval register is set either to 0 or to the virtual address of an instruction fetch, load, or store that attempted to access corrupted data. The priority of hardware-error exception is implementation-defined, but any given occurrence is generally expected to be recognized at the point in the overall priority order at which the hardware error is discovered. The mtval register is an MXLEN-bit read-write register formatted as shown in Machine Trap Value (mtval) register.. When a trap is taken into M-mode, mtval is either set to zero or written with exception-specific information to assist software in handling the trap. Otherwise, mtval is never written by the implementation, though it may be explicitly written by software. The hardware platform will specify which exceptions must set mtval informatively, which may unconditionally set it to zero, and which may exhibit either behavior, depending on the underlying event that caused the exception. If the hardware platform specifies that no exceptions set mtval to a nonzero value, then mtval is read-only zero. If mtval is written with a nonzero value when a breakpoint, address-misaligned, access-fault, or page-fault exception occurs on an instruction fetch, load, or store, then mtval will contain the faulting virtual address. When page-based virtual memory is enabled, mtval is written with the faulting virtual address, even for physical-memory access-fault exceptions. This design reduces datapath cost for most implementations, particularly those with hardware page-table walkers. Figure 22. Machine Trap Value (mtval) register. If mtval is written with a nonzero value when a misaligned load or store causes an access-fault or page-fault exception, then mtval will contain the virtual address of the portion of the access that caused the fault. If mtval is written with a nonzero value when an instruction access-fault or page-fault exception occurs on a hart with variable-length instructions, then mtval will contain the virtual address of the portion of the instruction that caused the fault, while mepc will point to the beginning of the instruction. The mtval register can optionally also be used to return the faulting instruction bits on an illegal-instruction exception (mepc points to the faulting instruction in memory). If mtval is written with a nonzero value when an illegal-instruction exception occurs, then mtval will contain the shortest of: the actual faulting instruction the first ILEN bits of the faulting instruction the first MXLEN bits of the faulting instruction The value loaded into mtval on an illegal-instruction exception is right-justified and all unused upper bits are cleared to zero. Capturing the faulting instruction in mtval reduces the overhead of instruction emulation, potentially avoiding several partial instruction loads if the instruction is misaligned, and likely data cache misses or slow uncached accesses when loads are used to fetch the instruction into a data register. There is also a problem of atomicity if another agent is manipulating the instruction memory, as might occur in a dynamic translation system. A requirement is that the entire instruction (or at least the first MXLEN bits) are fetched into mtval before taking the trap. This should not constrain implementations, which would typically fetch the entire instruction before attempting to decode the instruction, and avoids complicating software handlers. A value of zero in mtval signifies either that the feature is not supported, or an illegal zero instruction was fetched. A load from the instruction memory pointed to by mepc can be used to distinguish these two cases (or alternatively, the system configuration information can be interrogated to install the appropriate trap handling before runtime). On a trap caused by a software-check exception, the mtval register holds the cause for the exception. The following encodings are defined: 0 - No information provided. 2 - Landing Pad Fault. Defined by the Zicfilp extension ([priv-forward]). 3 - Shadow Stack Fault. Defined by the Zicfiss extension ([priv-backward]). For other traps, mtval is set to zero, but a future standard may redefine mtval’s setting for other traps. If mtval is not read-only zero, it is a WARL register that must be able to hold all valid virtual addresses and the value zero. It need not be capable of holding all possible invalid addresses. Prior to writing mtval, implementations may convert an invalid address into some other invalid address that mtval is capable of holding. If the feature to return the faulting instruction bits is implemented, mtval must also be able to hold all values less than 2N, where N is the smaller of MXLEN and ILEN. The mconfigptr register is an MXLEN-bit read-only CSR, formatted as shown in Machine Configuration Pointer (mconfigptr) register., that holds the physical address of a configuration data structure. Software can traverse this data structure to discover information about the harts, the platform, and their configuration. Figure 23. Machine Configuration Pointer (mconfigptr) register. The pointer alignment in bits must be no smaller than MXLEN: i.e., if MXLEN is , then mconfigptr[ -1:0] must be zero. The mconfigptr register must be implemented, but it may be zero to indicate the configuration data structure does not exist or that an alternative mechanism must be used to locate it. The format and schema of the configuration data structure have yet to be standardized. While the mconfigptr register will simply be hardwired in some implementations, other implementations may provide a means to configure the value returned on CSR reads. For example, mconfigptr might present the value of a memory-mapped register that is programmed by the platform or by M-mode software towards the beginning of the boot process. The menvcfg CSR is a 64-bit read/write register, formatted as shown in Machine environment configuration (menvcfg) register., that controls certain characteristics of the execution environment for modes less privileged than M. Figure 24. Machine environment configuration (menvcfg) register. If bit FIOM (Fence of I/O implies Memory) is set to one in menvcfg, FENCE instructions executed in modes less privileged than M are modified so the requirement to order accesses to device I/O implies also the requirement to order main memory accesses. Modified interpretation of FENCE predecessor and successor sets for modes less privileged than M when FIOM=1. details the modified interpretation of FENCE instruction bits PI, PO, SI, and SO for modes less privileged than M when FIOM=1. Similarly, for modes less privileged than M when FIOM=1, if an atomic instruction that accesses a region ordered as device I/O has its aq and/or rl bit set, then that instruction is ordered as though it accesses both device I/O and memory. If S-mode is not supported, or if satp.MODE is read-only zero (always Bare), the implementation may make FIOM read-only zero. Table 8. Modified interpretation of FENCE predecessor and successor sets for modes less privileged than M when FIOM=1. Instruction bit Meaning when set PI PO Predecessor device input and memory reads (PR implied) Predecessor device output and memory writes (PW implied) SI SO Successor device input and memory reads (SR implied) Successor device output and memory writes (SW implied) Bit FIOM is needed in menvcfg so M-mode can emulate the hypervisor extension of [hypervisor], which has an equivalent FIOM bit in the hypervisor CSR henvcfg. The PBMTE bit controls whether the Svpbmt extension is available for use in S-mode and G-stage address translation (i.e., for page tables pointed to by satp or hgatp). When PBMTE=1, Svpbmt is available for S-mode and G-stage address translation. When PBMTE=0, the implementation behaves as though Svpbmt were not implemented. If Svpbmt is not implemented, PBMTE is read-only zero. Furthermore, for implementations with the hypervisor extension, henvcfg.PBMTE is read-only zero if menvcfg.PBMTE is zero. After changing menvcfg.PBMTE, executing an SFENCE.VMA instruction with rs1=x0 and rs2=x0 suffices to synchronize address-translation caches with respect to the altered interpretation of page-table entries' PBMT fields. See [hyp-mm-fences] for additional synchronization requirements when the hypervisor extension is implemented. If the Svadu extension is implemented, the ADUE bit controls whether hardware updating of PTE A/D bits is enabled for S-mode and G-stage address translations. When ADUE=1, hardware updating of PTE A/D bits is enabled during S-mode address translation, and the implementation behaves as though the Svade extension were not implemented for S-mode address translation. When the hypervisor extension is implemented, if ADUE=1, hardware updating of PTE A/D bits is enabled during G-stage address translation, and the implementation behaves as though the Svade extension were not implemented for G-stage address translation. When ADUE=0, the implementation behaves as though Svade were implemented for S-mode and G-stage address translation. If Svadu is not implemented, ADUE is read-only zero. Furthermore, for implementations with the hypervisor extension, henvcfg.ADUE is read-only zero if menvcfg.ADUE is zero. The Svade extension requires page-fault exceptions be raised when PTE A/D bits need be set, hence Svade is implemented when ADUE=0. If the Smcdeleg extension is implemented, the CDE (Counter Delegation Enable) bit controls whether Zicntr and Zihpm counters can be delegated to S-mode. When CDE=1, the Smcdeleg extension is enabled, see [smcdeleg]. When CDE=0, the Smcdeleg and Ssccfg extensions appear to be not implemented. If Smcdeleg is not implemented, CDE is read-only zero. The definition of the STCE field is furnished by the Sstc extension. The definition of the CBZE field is furnished by the Zicboz extension. The definitions of the CBCFE and CBIE fields are furnished by the Zicbom extension. The definition of the PMM field is furnished by the Smnpm extension. The Zicfilp extension adds the LPE field in menvcfg. When the LPE field is set to 1 and S-mode is implemented, the Zicfilp extension is enabled in S-mode. If LPE field is set to 1 and S-mode is not implemented, the Zicfilp extension is enabled in U-mode. When the LPE field is 0, the Zicfilp extension is not enabled in S-mode, and the following rules apply to S-mode. If the LPE field is 0 and S-mode is not implemented, then the same rules apply to U-mode. The hart does not update the ELP state; it remains as NO_LP_EXPECTED. The LPAD instruction operates as a no-op. The Zicfiss extension adds the SSE field to menvcfg. When the SSE field is set to 1 the Zicfiss extension is activated in S-mode. When SSE field is 0, the following rules apply to privilege modes that are less than M: 32-bit Zicfiss instructions will revert to their behavior as defined by Zimop. 16-bit Zicfiss instructions will revert to their behavior as defined by Zcmop. The pte.xwr=010b encoding in VS/S-stage page tables becomes reserved. SSAMOSWAP.W/D raises an illegal-instruction exception. When menvcfg.SSE is 0, the henvcfg.SSE and senvcfg.SSE fields are read-only zero. The Ssdbltrp extension adds the double-trap-enable (DTE) field in menvcfg. When menvcfg.DTE is zero, the implementation behaves as though Ssdbltrp is not implemented. When Ssdbltrp is not implemented sstatus.SDT, vsstatus.SDT, and henvcfg.DTE bits are read-only zero. When XLEN=32, menvcfgh is a 32-bit read/write register that aliases bits 63:32 of menvcfg. The menvcfgh register does not exist when XLEN=64. If U-mode is not supported, then registers menvcfg and menvcfgh do not exist. mseccfg is an optional 64-bit read/write register, formatted as shown in Machine security configuration (mseccfg) register., that controls security features. Figure 25. Machine security configuration (mseccfg) register. The definitions of the SSEED and USEED fields are furnished by the entropy-source extension, Zkr. The definitions of the RLB, MMWP, and MML fields are furnished by the PMP-enhancement extension, Smepmp. The definition of the PMM field is furnished by the Smmpm extension. The Zicfilp extension adds the MLPE field in mseccfg. When MLPE field is 1, Zicfilp extension is enabled in M-mode. When the MLPE field is 0, the Zicfilp extension is not enabled in M-mode and the following rules apply to M-mode. The hart does not update the ELP state; it remains as NO_LP_EXPECTED. The LPAD instruction operates as a no-op. When XLEN=32 only, mseccfgh is a 32-bit read/write register that aliases bits 63:32 of mseccfg. Register mseccfgh does not exist when XLEN=64. Platforms provide a real-time counter, exposed as a memory-mapped machine-mode read-write register, mtime. mtime must increment at constant frequency, and the platform must provide a mechanism for determining the period of an mtime tick. The mtime register will wrap around if the count overflows. The mtime register has a 64-bit precision on all RV32 and RV64 systems. Platforms provide a 64-bit memory-mapped machine-mode timer compare register (mtimecmp). A machine timer interrupt becomes pending whenever mtime contains a value greater than or equal to mtimecmp, treating the values as unsigned integers. The interrupt remains posted until mtimecmp becomes greater than mtime (typically as a result of writing mtimecmp). The interrupt will only be taken if interrupts are enabled and the MTIE bit is set in the mie register. Figure 26. Machine time register (memory-mapped control register). Figure 27. Machine time compare register (memory-mapped control register). The timer facility is defined to use wall-clock time rather than a cycle counter to support modern processors that run with a highly variable clock frequency to save energy through dynamic voltage and frequency scaling. Accurate real-time clocks (RTCs) are relatively expensive to provide (requiring a crystal or MEMS oscillator) and have to run even when the rest of system is powered down, and so there is usually only one in a system located in a different frequency/voltage domain from the processors. Hence, the RTC must be shared by all the harts in a system and accesses to the RTC will potentially incur the penalty of a voltage-level-shifter and clock-domain crossing. It is thus more natural to expose mtime as a memory-mapped register than as a CSR. Lower privilege levels do not have their own timecmp registers. Instead, machine-mode software can implement any number of virtual timers on a hart by multiplexing the next timer interrupt into the mtimecmp register. Simple fixed-frequency systems can use a single clock for both cycle counting and wall-clock time. If the result of the comparison between mtime and mtimecmp changes, it is guaranteed to be reflected in MTIP eventually, but not necessarily immediately. A spurious timer interrupt might occur if an interrupt handler increments mtimecmp then immediately returns, because MTIP might not yet have fallen in the interim. All software should be written to assume this event is possible, but most software should assume this event is extremely unlikely. It is almost always more performant to incur an occasional spurious timer interrupt than to poll MTIP until it falls. In RV32, memory-mapped writes to mtimecmp modify only one 32-bit part of the register. The following code sequence sets a 64-bit mtimecmp value without spuriously generating a timer interrupt due to the intermediate value of the comparand: For RV64, naturally aligned 64-bit memory accesses to the mtime and mtimecmp registers are additionally supported and are atomic. Sample code for setting the 64-bit time comparand in RV32 assuming a little-endian memory system and that the registers live in a strongly ordered I/O region. Storing -1 to the low-order bits of mtimecmp prevents mtimecmp from temporarily becoming smaller than the lesser of the old and new values. # New comparand is in a1:a0. li t0, -1 la t1, mtimecmp sw t0, 0(t1) # No smaller than old value. sw a1, 4(t1) # No smaller than new value. sw a0, 0(t1) # New value. The time CSR is a read-only shadow of the memory-mapped mtime register. When XLEN=32, the timeh CSR is a read-only shadow of the upper 32 bits of the memory-mapped mtime register, while time shadows only the lower 32 bits of mtime. When mtime changes, it is guaranteed to be reflected in time and timeh eventually, but not necessarily immediately. The ECALL instruction is used to make a request to the supporting execution environment. When executed in U-mode, S-mode, or M-mode, it generates an environment-call-from-U-mode exception, environment-call-from-S-mode exception, or environment-call-from-M-mode exception, respectively, and performs no other operation. ECALL generates a different exception for each originating privilege mode so that environment call exceptions can be selectively delegated. A typical use case for Unix-like operating systems is to delegate to S-mode the environment-call-from-U-mode exception but not the others. The EBREAK instruction is used by debuggers to cause control to be transferred back to a debugging environment. Unless overridden by an external debug environment, EBREAK raises a breakpoint exception and performs no other operation. As described in the \"C\" Standard Extension for Compressed Instructions in Volume I of this manual, the C.EBREAK instruction performs the same operation as the EBREAK instruction. ECALL and EBREAK cause the receiving privilege mode’s epc register to be set to the address of the ECALL or EBREAK instruction itself, not the address of the following instruction. As ECALL and EBREAK cause synchronous exceptions, they are not considered to retire, and should not increment the minstret CSR. Instructions to return from trap are encoded under the PRIV minor opcode. To return after handling a trap, there are separate trap return instructions per privilege level, MRET and SRET. MRET is always provided. SRET must be provided if supervisor mode is supported, and should raise an illegal-instruction exception otherwise. SRET should also raise an illegal-instruction exception when TSR=1 in mstatus, as described in Virtualization Support in mstatus Register. An xRET instruction can be executed in privilege mode x or higher, where executing a lower-privilege xRET instruction will pop the relevant lower-privilege interrupt enable and privilege mode stack. Attempting to execute an xRET instruction in a mode less privileged than x will raise an illegal-instruction exception. In addition to manipulating the privilege stack as described in Privilege and Global Interrupt-Enable Stack in mstatus register, xRET sets the pc to the value stored in the xepc register. If the A extension is supported, the xRET instruction is allowed to clear any outstanding LR address reservation but is not required to. Trap handlers should explicitly clear the reservation if required (e.g., by using a dummy SC) before executing the xRET. If xRET instructions always cleared LR reservations, it would be impossible to single-step through LR/SC sequences using a debugger. The Wait for Interrupt instruction (WFI) informs the implementation that the current hart can be stalled until an interrupt might need servicing. Execution of the WFI instruction can also be used to inform the hardware platform that suitable interrupts should preferentially be routed to this hart. WFI is available in all privileged modes, and optionally available to U-mode. This instruction may raise an illegal-instruction exception when TW=1 in mstatus, as described in Virtualization Support in mstatus Register. If an enabled interrupt is present or later becomes present while the hart is stalled, the interrupt trap will be taken on the following instruction, i.e., execution resumes in the trap handler and mepc = pc + 4. The following instruction takes the interrupt trap so that a simple return from the trap handler will execute code after the WFI instruction. Implementations are permitted to resume execution for any reason, even if an enabled interrupt has not become pending. Hence, a legal implementation is to simply implement the WFI instruction as a NOP. If the implementation does not stall the hart on execution of the instruction, then the interrupt will be taken on some instruction in the idle loop containing the WFI, and on a simple return from the handler, the idle loop will resume execution. The WFI instruction can also be executed when interrupts are disabled. The operation of WFI must be unaffected by the global interrupt bits in mstatus (MIE and SIE) and the delegation register mideleg (i.e., the hart must resume if a locally enabled interrupt becomes pending, even if it has been delegated to a less-privileged mode), but should honor the individual interrupt enables (e.g, MTIE) (i.e., implementations should avoid resuming the hart if the interrupt is pending but not individually enabled). WFI is also required to resume execution for locally enabled interrupts pending at any privilege level, regardless of the global interrupt enable at each privilege level. If the event that causes the hart to resume execution does not cause an interrupt to be taken, execution will resume at pc + 4, and software must determine what action to take, including looping back to repeat the WFI if there was no actionable event. By allowing wakeup when interrupts are disabled, an alternate entry point to an interrupt handler can be called that does not require saving the current context, as the current context can be saved or discarded before the WFI is executed. As implementations are free to implement WFI as a NOP, software must explicitly check for any relevant pending but disabled interrupts in the code following an WFI, and should loop back to the WFI if no suitable interrupt was detected. The mip or sip registers can be interrogated to determine the presence of any interrupt in machine or supervisor mode respectively. The operation of WFI is unaffected by the delegation register settings. WFI is defined so that an implementation can trap into a higher privilege mode, either immediately on encountering the WFI or after some interval to initiate a machine-mode transition to a lower power state, for example. The same \"wait-for-event\" template might be used for possible future extensions that wait on memory locations changing, or message arrival. The subspace of the SYSTEM major opcode shown in SYSTEM instruction encodings designated for custom use. is designated for custom use. It is recommended that these instructions use bits 29:28 to designate the minimum required privilege mode, as do other SYSTEM instructions. Figure 28. SYSTEM instruction encodings designated for custom use. Upon reset, a hart’s privilege mode is set to M. The mstatus fields MIE and MPRV are reset to 0. If little-endian memory accesses are supported, the mstatus/mstatush field MBE is reset to 0. The misa register is reset to enable the maximal set of supported extensions, as described in Machine ISA (misa) Register. For implementations with the \"A\" standard extension, there is no valid load reservation. The pc is set to an implementation-defined reset vector. The mcause register is set to a value indicating the cause of the reset. Writable PMP registers’ A and L fields are set to 0, unless the platform mandates a different reset value for some PMP registers’ A and L fields. If the hypervisor extension is implemented, the hgatp.MODE and vsatp.MODE fields are reset to 0. If the Smrnmi extension is implemented, the mnstatus.NMIE field is reset to 0. No WARL field contains an illegal value. If the Zicfilp extension is implemented, the mseccfg.MLPE field is reset to 0. All other hart state is UNSPECIFIED. The mcause values after reset have implementation-specific interpretation, but the value 0 should be returned on implementations that do not distinguish different reset conditions. Implementations that distinguish different reset conditions should only use 0 to indicate the most complete reset. Some designs may have multiple causes of reset (e.g., power-on reset, external hard reset, brownout detected, watchdog timer elapse, sleep-mode wakeup), which machine-mode software and debuggers may wish to distinguish. mcause reset values may alias mcause values following synchronous exceptions. There should be no ambiguity in this overlap, since on reset the pc is typically set to a different value than on other traps. Non-maskable interrupts (NMIs) are only used for hardware error conditions, and cause an immediate jump to an implementation-defined NMI vector running in M-mode regardless of the state of a hart’s interrupt enable bits. The mepc register is written with the virtual address of the instruction that was interrupted, and mcause is set to a value indicating the source of the NMI. The NMI can thus overwrite state in an active machine-mode interrupt handler. The values written to mcause on an NMI are implementation-defined. The high Interrupt bit of mcause should be set to indicate that this was an interrupt. An Exception Code of 0 is reserved to mean \"unknown cause\" and implementations that do not distinguish sources of NMIs via the mcause register should return 0 in the Exception Code. Unlike resets, NMIs do not reset processor state, enabling diagnosis, reporting, and possible containment of the hardware error. The physical memory map for a complete system includes various address ranges, some corresponding to memory regions and some to memory-mapped control registers, portions of which might not be accessible. Some memory regions might not support reads, writes, or execution; some might not support subword or subblock accesses; some might not support atomic operations; and some might not support cache coherence or might have different memory models. Similarly, memory-mapped control registers vary in their supported access widths, support for atomic operations, and whether read and write accesses have associated side effects. In RISC-V systems, these properties and capabilities of each region of the machine’s physical address space are termed physical memory attributes (PMAs). This section describes RISC-V PMA terminology and how RISC-V systems implement and check PMAs. PMAs are inherent properties of the underlying hardware and rarely change during system operation. Unlike physical memory protection values described in Physical Memory Protection, PMAs do not vary by execution context. The PMAs of some memory regions are fixed at chip design time—for example, for an on-chip ROM. Others are fixed at board design time, depending, for example, on which other chips are connected to off-chip buses. Off-chip buses might also support devices that could be changed on every power cycle (cold pluggable) or dynamically while the system is running (hot pluggable). Some devices might be configurable at run time to support different uses that imply different PMAs—for example, an on-chip scratchpad RAM might be cached privately by one core in one end-application, or accessed as a shared non-cached memory in another end-application. Most systems will require that at least some PMAs are dynamically checked in hardware later in the execution pipeline after the physical address is known, as some operations will not be supported at all physical memory addresses, and some operations require knowing the current setting of a configurable PMA attribute. While many other architectures specify some PMAs in the virtual memory page tables and use the TLB to inform the pipeline of these properties, this approach injects platform-specific information into a virtualized layer and can cause system errors unless attributes are correctly initialized in each page-table entry for each physical memory region. In addition, the available page sizes might not be optimal for specifying attributes in the physical memory space, leading to address-space fragmentation and inefficient use of expensive TLB entries. For RISC-V, we separate out specification and checking of PMAs into a separate hardware structure, the PMA checker. In many cases, the attributes are known at system design time for each physical address region, and can be hardwired into the PMA checker. Where the attributes are run-time configurable, platform-specific memory-mapped control registers can be provided to specify these attributes at a granularity appropriate to each region on the platform (e.g., for an on-chip SRAM that can be flexibly divided between cacheable and uncacheable uses). PMAs are checked for any access to physical memory, including accesses that have undergone virtual to physical memory translation. To aid in system debugging, we strongly recommend that, where possible, RISC-V processors precisely trap physical memory accesses that fail PMA checks. Precisely trapped PMA violations manifest as instruction, load, or store access-fault exceptions, distinct from virtual-memory page-fault exceptions. Precise PMA traps might not always be possible, for example, when probing a legacy bus architecture that uses access failures as part of the discovery mechanism. In this case, error responses from peripheral devices will be reported as imprecise bus-error interrupts. PMAs must also be readable by software to correctly access certain devices or to correctly configure other hardware components that access memory, such as DMA engines. As PMAs are tightly tied to a given physical platform’s organization, many details are inherently platform-specific, as is the means by which software can learn the PMA values for a platform. Some devices, particularly legacy buses, do not support discovery of PMAs and so will give error responses or time out if an unsupported access is attempted. Typically, platform-specific machine-mode code will extract PMAs and ultimately present this information to higher-level less-privileged software using some standard representation. Where platforms support dynamic reconfiguration of PMAs, an interface will be provided to set the attributes by passing requests to a machine-mode driver that can correctly reconfigure the platform. For example, switching cacheability attributes on some memory regions might involve platform-specific operations, such as cache flushes, that are available only to machine-mode. The most important characterization of a given memory address range is whether it holds regular main memory or I/O devices. Regular main memory is required to have a number of properties, specified below, whereas I/O devices can have a much broader range of attributes. Memory regions that do not fit into regular main memory, for example, device scratchpad RAMs, are categorized as I/O regions. What previous versions of this specification termed vacant regions are no longer a distinct category; they are now described as I/O regions that are not accessible (i.e. lacking read, write, and execute permissions). Main memory regions that are not accessible are also allowed. Access types specify which access widths, from 8-bit byte to long multi-word burst, are supported, and also whether misaligned accesses are supported for each access width. Although software running on a RISC-V hart cannot directly generate bursts to memory, software might have to program DMA engines to access I/O devices and might therefore need to know which access sizes are supported. Main memory regions always support read and write of all access widths required by the attached devices, and can specify whether instruction fetch is supported. Some platforms might mandate that all of main memory support instruction fetch. Other platforms might prohibit instruction fetch from some main memory regions. In some cases, the design of a processor or device accessing main memory might support other widths, but must be able to function with the types supported by the main memory. I/O regions can specify which combinations of read, write, or execute accesses to which data widths are supported. For systems with page-based virtual memory, I/O and memory regions can specify which combinations of hardware page-table reads and hardware page-table writes are supported. Unix-like operating systems generally require that all of cacheable main memory supports page-table walks. Atomicity PMAs describes which atomic instructions are supported in this address region. Support for atomic instructions is divided into two categories: LR/SC and AMOs. Some platforms might mandate that all of cacheable main memory support all atomic operations required by the attached processors. Within AMOs, there are four levels of support: AMONone, AMOSwap, AMOLogical, and AMOArithmetic. AMONone indicates that no AMO operations are supported. AMOSwap indicates that only amoswap instructions are supported in this address range. AMOLogical indicates that swap instructions plus all the logical AMOs (amoand, amoor, amoxor) are supported. AMOArithmetic indicates that all RISC-V AMOs are supported. For each level of support, naturally aligned AMOs of a given width are supported if the underlying memory region supports reads and writes of that width. Main memory and I/O regions may only support a subset or none of the processor-supported atomic operations. Table 9. Classes of AMOs supported by I/O regions. AMO Class Supported Operations AMONone AMOSwap AMOLogical AMOArithmetic None amoswap above + amoand, amoor, amoxor above + amoadd, amomin, amomax, amominu, amomaxu We recommend providing at least AMOLogical support for I/O regions where possible. For LR/SC, there are three levels of support indicating combinations of the reservability and eventuality properties: RsrvNone, RsrvNonEventual, and RsrvEventual. RsrvNone indicates that no LR/SC operations are supported (the location is non-reservable). RsrvNonEventual indicates that the operations are supported (the location is reservable), but without the eventual success guarantee described in the unprivileged ISA specification. RsrvEventual indicates that the operations are supported and provide the eventual success guarantee. We recommend providing RsrvEventual support for main memory regions where possible. Most I/O regions will not support LR/SC accesses, as these are most conveniently built on top of a cache-coherence scheme, but some may support RsrvNonEventual or RsrvEventual. When LR/SC is used for memory locations marked RsrvNonEventual, software should provide alternative fall-back mechanisms used when lack of progress is detected. The misaligned atomicity granule PMA provides constrained support for misaligned AMOs. This PMA, if present, specifies the size of a misaligned atomicity granule, a naturally aligned power-of-two number of bytes. Specific supported values for this PMA are represented by MAGNN, e.g., MAG16 indicates the misaligned atomicity granule is at least 16 bytes. The misaligned atomicity granule PMA applies only to AMOs, loads and stores defined in the base ISAs, and loads and stores of no more than XLEN bits defined in the F, D, and Q extensions. For an instruction in that set, if all accessed bytes lie within the same misaligned atomicity granule, the instruction will not raise an exception for reasons of address alignment, and the instruction will give rise to only one memory operation for the purposes of RVWMO—​i.e., it will execute atomically. If a misaligned AMO accesses a region that does not specify a misaligned atomicity granule PMA, or if not all accessed bytes lie within the same misaligned atomicity granule, then an exception is raised. For regular loads and stores that access such a region or for which not all accessed bytes lie within the same atomicity granule, then either an exception is raised, or the access proceeds but is not guaranteed to be atomic. Implementations may raise access-fault exceptions instead of address-misaligned exceptions for some misaligned accesses, indicating the instruction should not be emulated by a trap handler. LR/SC instructions are unaffected by this PMA and so always raise an exception when misaligned. Vector memory accesses are also unaffected, so might execute non-atomically even when contained within a misaligned atomicity granule. Implicit accesses are similarly unaffected by this PMA. Regions of the address space are classified as either main memory or I/O for the purposes of ordering by the FENCE instruction and atomic-instruction ordering bits. Accesses by one hart to main memory regions are observable not only by other harts but also by other devices with the capability to initiate requests in the main memory system (e.g., DMA engines). Coherent main memory regions always have either the RVWMO or RVTSO memory model. Incoherent main memory regions have an implementation-defined memory model. Accesses by one hart to an I/O region are observable not only by other harts and bus mastering devices but also by the targeted I/O devices, and I/O regions may be accessed with either relaxed or strong ordering. Accesses to an I/O region with relaxed ordering are generally observed by other harts and bus mastering devices in a manner similar to the ordering of accesses to an RVWMO memory region, as discussed in the I/O Ordering section in the RVWMO Explanatory Material appendix of Volume I of this specification. By contrast, accesses to an I/O region with strong ordering are generally observed by other harts and bus mastering devices in program order. Each strongly ordered I/O region specifies a numbered ordering channel, which is a mechanism by which ordering guarantees can be provided between different I/O regions. Channel 0 is used to indicate point-to-point strong ordering only, where only accesses by the hart to the single associated I/O region are strongly ordered. Channel 1 is used to provide global strong ordering across all I/O regions. Any accesses by a hart to any I/O region associated with channel 1 can only be observed to have occurred in program order by all other harts and I/O devices, including relative to accesses made by that hart to relaxed I/O regions or strongly ordered I/O regions with different channel numbers. In other words, any access to a region in channel 1 is equivalent to executing a fence io,io instruction before and after the instruction. Other larger channel numbers provide program ordering to accesses by that hart across any regions with the same channel number. Systems might support dynamic configuration of ordering properties on each memory region. Strong ordering can be used to improve compatibility with legacy device driver code, or to enable increased performance compared to insertion of explicit ordering instructions when the implementation is known to not reorder accesses. Local strong ordering (channel 0) is the default form of strong ordering as it is often straightforward to provide if there is only a single in-order communication path between the hart and the I/O device. Generally, different strongly ordered I/O regions can share the same ordering channel without additional ordering hardware if they share the same interconnect path and the path does not reorder requests. Coherence is a property defined for a single physical address, and indicates that writes to that address by one agent will eventually be made visible to other coherent agents in the system. Coherence is not to be confused with the memory consistency model of a system, which defines what values a memory read can return given the previous history of reads and writes to the entire memory system. In RISC-V platforms, the use of hardware-incoherent regions is discouraged due to software complexity, performance, and energy impacts. The cacheability of a memory region should not affect the software view of the region except for differences reflected in other PMAs, such as main memory versus I/O classification, memory ordering, supported accesses and atomic operations, and coherence. For this reason, we treat cacheability as a platform-level setting managed by machine-mode software only. Where a platform supports configurable cacheability settings for a memory region, a platform-specific machine-mode routine will change the settings and flush caches if necessary, so the system is only incoherent during the transition between cacheability settings. This transitory state should not be visible to lower privilege levels. Coherence is straightforward to provide for a shared memory region that is not cached by any agent. The PMA for such a region would simply indicate it should not be cached in a private or shared cache. Coherence is also straightforward for read-only regions, which can be safely cached by multiple agents without requiring a cache-coherence scheme. The PMA for this region would indicate that it can be cached, but that writes are not supported. Some read-write regions might only be accessed by a single agent, in which case they can be cached privately by that agent without requiring a coherence scheme. The PMA for such regions would indicate they can be cached. The data can also be cached in a shared cache, as other agents should not access the region. If an agent can cache a read-write region that is accessible by other agents, whether caching or non-caching, a cache-coherence scheme is required to avoid use of stale values. In regions lacking hardware cache coherence (hardware-incoherent regions), cache coherence can be implemented entirely in software, but software coherence schemes are notoriously difficult to implement correctly and often have severe performance impacts due to the need for conservative software-directed cache-flushing. Hardware cache-coherence schemes require more complex hardware and can impact performance due to the cache-coherence probes, but are otherwise invisible to software. For each hardware cache-coherent region, the PMA would indicate that the region is coherent and which hardware coherence controller to use if the system has multiple coherence controllers. For some systems, the coherence controller might be an outer-level shared cache, which might itself access further outer-level cache-coherence controllers hierarchically. Most memory regions within a platform will be coherent to software, because they will be fixed as either uncached, read-only, hardware cache-coherent, or only accessed by one agent. If a PMA indicates non-cacheability, then accesses to that region must be satisfied by the memory itself, not by any caches. For implementations with a cacheability-control mechanism, the situation may arise that a program uncacheably accesses a memory location that is currently cache-resident. In this situation, the cached copy must be ignored. This constraint is necessary to prevent more-privileged modes’ speculative cache refills from affecting the behavior of less-privileged modes’ uncacheable accesses. Idempotency PMAs describe whether reads and writes to an address region are idempotent. Main memory regions are assumed to be idempotent. For I/O regions, idempotency on reads and writes can be specified separately (e.g., reads are idempotent but writes are not). If accesses are non-idempotent, i.e., there is potentially a side effect on any read or write access, then speculative or redundant accesses must be avoided. For the purposes of defining the idempotency PMAs, changes in observed memory ordering created by redundant accesses are not considered a side effect. While hardware should always be designed to avoid speculative or redundant accesses to memory regions marked as non-idempotent, it is also necessary to ensure software or compiler optimizations do not generate spurious accesses to non-idempotent memory regions. Non-idempotent regions might not support misaligned accesses. Misaligned accesses to such regions should raise access-fault exceptions rather than address-misaligned exceptions, indicating that software should not emulate the misaligned access using multiple smaller accesses, which could cause unexpected side effects. For non-idempotent regions, implicit reads and writes must not be performed early or speculatively, with the following exceptions. When a non-speculative implicit read is performed, an implementation is permitted to additionally read any of the bytes within a naturally aligned power-of-2 region containing the address of the non-speculative implicit read. Furthermore, when a non-speculative instruction fetch is performed, an implementation is permitted to additionally read any of the bytes within the next naturally aligned power-of-2 region of the same size (with the address of the region taken modulo 2XLEN. The results of these additional reads may be used to satisfy subsequent early or speculative implicit reads. The size of these naturally aligned power-of-2 regions is implementation-defined, but, for systems with page-based virtual memory, must not exceed the smallest supported page size. To support secure processing and contain faults, it is desirable to limit the physical addresses accessible by software running on a hart. An optional physical memory protection (PMP) unit provides per-hart machine-mode control registers to allow physical memory access privileges (read, write, execute) to be specified for each physical memory region. The PMP values are checked in parallel with the PMA checks described in Physical Memory Attributes. The granularity of PMP access control settings are platform-specific, but the standard PMP encoding supports regions as small as four bytes. Certain regions’ privileges can be hardwired—for example, some regions might only ever be visible in machine mode but in no lower-privilege layers. Platforms vary widely in demands for physical memory protection, and some platforms may provide other PMP structures in addition to or instead of the scheme described in this section. PMP checks are applied to all accesses whose effective privilege mode is S or U, including instruction fetches and data accesses in S and U mode, and data accesses in M-mode when the MPRV bit in mstatus is set and the MPP field in mstatus contains S or U. PMP checks are also applied to page-table accesses for virtual-address translation, for which the effective privilege mode is S. Optionally, PMP checks may additionally apply to M-mode accesses, in which case the PMP registers themselves are locked, so that even M-mode software cannot change them until the hart is reset. In effect, PMP can grant permissions to S and U modes, which by default have none, and can revoke permissions from M-mode, which by default has full permissions. PMP violations are always trapped precisely at the processor. PMP entries are described by an 8-bit configuration register and one MXLEN-bit address register. Some PMP settings additionally use the address register associated with the preceding PMP entry. Up to 64 PMP entries are supported. Implementations may implement zero, 16, or 64 PMP entries; the lowest-numbered PMP entries must be implemented first. All PMP CSR fields are WARL and may be read-only zero. PMP CSRs are only accessible to M-mode. The PMP configuration registers are densely packed into CSRs to minimize context-switch time. For RV32, sixteen CSRs, pmpcfg0–pmpcfg15, hold the configurations pmp0cfg–pmp63cfg for the 64 PMP entries, as shown in RV32 PMP configuration CSR layout.. For RV64, eight even-numbered CSRs, pmpcfg0, pmpcfg2, …, pmpcfg14, hold the configurations for the 64 PMP entries, as shown in RV64 PMP configuration CSR layout.. For RV64, the odd-numbered configuration registers, pmpcfg1, pmpcfg3, …, pmpcfg15, are illegal. RV64 harts use pmpcfg2, rather than pmpcfg1, to hold configurations for PMP entries 8-15. This design reduces the cost of supporting multiple MXLEN values, since the configurations for PMP entries 8-11 appear in pmpcfg2[31:0] for both RV32 and RV64. Figure 29. RV32 PMP configuration CSR layout. Figure 30. RV64 PMP configuration CSR layout. The PMP address registers are CSRs named pmpaddr0-pmpaddr63. Each PMP address register encodes bits 33-2 of a 34-bit physical address for RV32, as shown in PMP address register format, RV32.. For RV64, each PMP address register encodes bits 55-2 of a 56-bit physical address, as shown in PMP address register format, RV64.. Not all physical address bits may be implemented, and so the pmpaddr registers are WARL. The Sv32 page-based virtual-memory scheme described in [sv32] supports 34-bit physical addresses for RV32, so the PMP scheme must support addresses wider than XLEN for RV32. The Sv39 and Sv48 page-based virtual-memory schemes described in [sv39] and [sv48] support a 56-bit physical address space, so the RV64 PMP address registers impose the same limit. Figure 31. PMP address register format, RV32. Figure 32. PMP address register format, RV64. PMP configuration register format. shows the layout of a PMP configuration register. The R, W, and X bits, when set, indicate that the PMP entry permits read, write, and instruction execution, respectively. When one of these bits is clear, the corresponding access type is denied. The R, W, and X fields form a collective WARL field for which the combinations with R=0 and W=1 are reserved. The remaining two fields, A and L, are described in the following sections. Figure 33. PMP configuration register format. Attempting to fetch an instruction from a PMP region that does not have execute permissions raises an instruction access-fault exception. Attempting to execute a load or load-reserved instruction which accesses a physical address within a PMP region without read permissions raises a load access-fault exception. Attempting to execute a store, store-conditional, or AMO instruction which accesses a physical address within a PMP region without write permissions raises a store access-fault exception. The A field in a PMP entry’s configuration register encodes the address-matching mode of the associated PMP address register. The encoding of this field is shown in Encoding of A field in PMP configuration registers.. When A=0, this PMP entry is disabled and matches no addresses. Two other address-matching modes are supported: naturally aligned power-of-2 regions (NAPOT), including the special case of naturally aligned four-byte regions (NA4); and the top boundary of an arbitrary range (TOR). These modes support four-byte granularity. Table 10. Encoding of A field in PMP configuration registers. A Name Description 0 1 2 3 OFF TOR NA4 NAPOT Null region (disabled) Top of range Naturally aligned four-byte region Naturally aligned power-of-two region, ≥8 bytes NAPOT ranges make use of the low-order bits of the associated address register to encode the size of the range, as shown in NAPOT range encoding in PMP address and configuration registers.. Table 11. NAPOT range encoding in PMP address and configuration registers. pmpaddr pmpcfg.A Match type and size yyyy…​yyyy yyyy…​yyy0 yyyy…​yy01 yyyy…​y011 …​ yy01…​1111 y011…​1111 0111…​1111 1111…​1111 NA4 NAPOT NAPOT NAPOT …​ NAPOT NAPOT NAPOT NAPOT 4-byte NAPOT range 8-byte NAPOT range 16-byte NAPOT range 32-byte NAPOT range … 2XLEN-byte NAPOT range 2XLEN+1-byte NAPOT range 2XLEN+2-byte NAPOT range 2XLEN+3-byte NAPOT range If TOR is selected, the associated address register forms the top of the address range, and the preceding PMP address register forms the bottom of the address range. If PMP entry i's A field is set to TOR, the entry matches any address y such that pmpaddri-1≤y<pmpaddri (irrespective of the value of pmpcfgi-1). If PMP entry 0’s A field is set to TOR, zero is used for the lower bound, and so it matches any address y<pmpaddr0. If pmpaddri-1≥pmpaddri and pmpcfgi.A=TOR, then PMP entry i matches no addresses. Although the PMP mechanism supports regions as small as four bytes, platforms may specify coarser PMP regions. In general, the PMP grain is bytes and must be the same across all PMP regions. When , the NA4 mode is not selectable. When and .A[1] is set, i.e. the mode is NAPOT, then bits [G-2:0] read as all ones. When and .A[1] is clear, i.e. the mode is OFF or TOR, then bits [G-1:0] read as all zeros. Bits \\({\\tt pmpaddr}_i\\)[G-1:0] do not affect the TOR address-matching logic. Although changing .A[1] affects the value read from , it does not affect the underlying value stored in that register—in particular, [G-1] retains its original value when .A is changed from NAPOT to TOR/OFF then back to NAPOT. Software may determine the PMP granularity by writing zero to pmp0cfg, then writing all ones to pmpaddr0, then reading back pmpaddr0. If G is the index of the least-significant bit set, the PMP granularity is 2G+2 bytes. If the current XLEN is greater than MXLEN, the PMP address registers are zero-extended from MXLEN to XLEN bits for the purposes of address matching. The L bit indicates that the PMP entry is locked, i.e., writes to the configuration register and associated address registers are ignored. Locked PMP entries remain locked until the hart is reset. If PMP entry i is locked, writes to pmpicfg and pmpaddri are ignored. Additionally, if PMP entry i is locked and pmpicfg.A is set to TOR, writes to pmpaddri-1 are ignored. Setting the L bit locks the PMP entry even when the A field is set to OFF. In addition to locking the PMP entry, the L bit indicates whether the R/W/X permissions are enforced on M-mode accesses. When the L bit is set, these permissions are enforced for all privilege modes. When the L bit is clear, any M-mode access matching the PMP entry will succeed; the R/W/X permissions apply only to S and U modes. PMP entries are statically prioritized. The lowest-numbered PMP entry that matches any byte of an access determines whether that access succeeds or fails. The matching PMP entry must match all bytes of an access, or the access fails, irrespective of the L, R, W, and X bits. For example, if a PMP entry is configured to match the four-byte range 0xC–0xF, then an 8-byte access to the range 0x8–0xF will fail, assuming that PMP entry is the highest-priority entry that matches those addresses. If a PMP entry matches all bytes of an access, then the L, R, W, and X bits determine whether the access succeeds or fails. If the L bit is clear and the privilege mode of the access is M, the access succeeds. Otherwise, if the L bit is set or the privilege mode of the access is S or U, then the access succeeds only if the R, W, or X bit corresponding to the access type is set. If no PMP entry matches an M-mode access, the access succeeds. If no PMP entry matches an S-mode or U-mode access, but at least one PMP entry is implemented, the access fails. If at least one PMP entry is implemented, but all PMP entries’ A fields are set to OFF, then all S-mode and U-mode memory accesses will fail. Failed accesses generate an instruction, load, or store access-fault exception. Note that a single instruction may generate multiple accesses, which may not be mutually atomic. An access-fault exception is generated if at least one access generated by an instruction fails, though other accesses generated by that instruction may succeed with visible side effects. Notably, instructions that reference virtual memory are decomposed into multiple accesses. On some implementations, misaligned loads, stores, and instruction fetches may also be decomposed into multiple accesses, some of which may succeed before an access-fault exception occurs. In particular, a portion of a misaligned store that passes the PMP check may become visible, even if another portion fails the PMP check. The same behavior may manifest for stores wider than XLEN bits (e.g., the FSD instruction in RV32D), even when the store address is naturally aligned. The Physical Memory Protection mechanism is designed to compose with the page-based virtual memory systems described in [supervisor]. When paging is enabled, instructions that access virtual memory may result in multiple physical-memory accesses, including implicit references to the page tables. The PMP checks apply to all of these accesses. The effective privilege mode for implicit page-table accesses is S. Implementations with virtual memory are permitted to perform address translations speculatively and earlier than required by an explicit memory access, and are permitted to cache them in address translation cache structures—including possibly caching the identity mappings from effective address to physical address used in Bare translation modes and M-mode. The PMP settings for the resulting physical address may be checked (and possibly cached) at any point between the address translation and the explicit memory access. Hence, when the PMP settings are modified, M-mode software must synchronize the PMP settings with the virtual memory system and any PMP or address-translation caches. This is accomplished by executing an SFENCE.VMA instruction with rs1=x0 and rs2=x0, after the PMP CSRs are written. See [hyp-mm-fences] for additional synchronization requirements when the hypervisor extension is implemented. If page-based virtual memory is not implemented, memory accesses check the PMP settings synchronously, so no SFENCE.VMA is needed.","title":"Machine-Level ISA, Version 1.13","component":"isa","version":"v20250508","name":"machine","url":"/isa/priv/machine.html","titles":[{"text":"Machine-Level CSRs","hash":"machine-level-csrs","id":1},{"text":"Machine ISA (misa) Register","hash":"misa","id":2},{"text":"Machine Vendor ID (mvendorid) Register","hash":"machine-vendor-id-mvendorid-register","id":3},{"text":"Machine Architecture ID (marchid) Register","hash":"machine-architecture-id-marchid-register","id":4},{"text":"Machine Implementation ID (mimpid) Register","hash":"machine-implementation-id-mimpid-register","id":5},{"text":"Hart ID (mhartid) Register","hash":"hart-id-mhartid-register","id":6},{"text":"Machine Status (mstatus and mstatush) Registers","hash":"machine-status-mstatus-and-mstatush-registers","id":7},{"text":"Privilege and Global Interrupt-Enable Stack in mstatus register","hash":"privstack","id":8},{"text":"Double Trap Control in mstatus Register","hash":"machine-double-trap","id":9},{"text":"Base ISA Control in mstatus Register","hash":"xlen-control","id":10},{"text":"Memory Privilege in mstatus Register","hash":"memory-privilege-in-mstatus-register","id":11},{"text":"Endianness Control in mstatus and mstatush Registers","hash":"endianness-control-in-mstatus-and-mstatush-registers","id":12},{"text":"Virtualization Support in mstatus Register","hash":"virt-control","id":13},{"text":"Extension Context Status in mstatus Register","hash":"extension-context-status-in-mstatus-register","id":14},{"text":"Previous Expected Landing Pad (ELP) State in mstatus Register","hash":"previous-expected-landing-pad-elp-state-in-mstatus-register","id":15},{"text":"Machine Trap-Vector Base-Address (mtvec) Register","hash":"machine-trap-vector-base-address-mtvec-register","id":16},{"text":"Machine Trap Delegation (medeleg and mideleg) Registers","hash":"machine-trap-delegation-medeleg-and-mideleg-registers","id":17},{"text":"Machine Interrupt (mip and mie) Registers","hash":"machine-interrupt-mip-and-mie-registers","id":18},{"text":"Hardware Performance Monitor","hash":"hardware-performance-monitor","id":19},{"text":"Machine Counter-Enable (mcounteren) Register","hash":"mcounteren","id":20},{"text":"Machine Counter-Inhibit (mcountinhibit) Register","hash":"machine-counter-inhibit-mcountinhibit-register","id":21},{"text":"Machine Scratch (mscratch) Register","hash":"machine-scratch-mscratch-register","id":22},{"text":"Machine Exception Program Counter (mepc) Register","hash":"machine-exception-program-counter-mepc-register","id":23},{"text":"Machine Cause (mcause) Register","hash":"mcause","id":24},{"text":"Machine Trap Value (mtval) Register","hash":"machine-trap-value-mtval-register","id":25},{"text":"Machine Configuration Pointer (mconfigptr) Register","hash":"machine-configuration-pointer-mconfigptr-register","id":26},{"text":"Machine Environment Configuration (menvcfg) Register","hash":"sec:menvcfg","id":27},{"text":"Machine Security Configuration (mseccfg) Register","hash":"machine-security-configuration-mseccfg-register","id":28},{"text":"Machine-Level Memory-Mapped Registers","hash":"machine-level-memory-mapped-registers","id":29},{"text":"Machine Timer (mtime and mtimecmp) Registers","hash":"machine-timer-mtime-and-mtimecmp-registers","id":30},{"text":"Machine-Mode Privileged Instructions","hash":"machine-mode-privileged-instructions","id":31},{"text":"Environment Call and Breakpoint","hash":"environment-call-and-breakpoint","id":32},{"text":"Trap-Return Instructions","hash":"otherpriv","id":33},{"text":"Wait for Interrupt","hash":"wfi","id":34},{"text":"Custom SYSTEM Instructions","hash":"custom-system-instructions","id":35},{"text":"Reset","hash":"reset","id":36},{"text":"Non-Maskable Interrupts","hash":"nmi","id":37},{"text":"Physical Memory Attributes","hash":"pma","id":38},{"text":"Main Memory versus I/O Regions","hash":"main-memory-versus-io-regions","id":39},{"text":"Supported Access Type PMAs","hash":"supported-access-type-pmas","id":40},{"text":"Atomicity PMAs","hash":"atomicity-pmas","id":41},{"text":"AMO PMA","hash":"amo-pma","id":42},{"text":"Reservability PMA","hash":"reservability-pma","id":43},{"text":"Misaligned Atomicity Granule PMA","hash":"misaligned-atomicity-granule-pma","id":44},{"text":"Memory-Ordering PMAs","hash":"memory-ordering-pmas","id":45},{"text":"Coherence and Cacheability PMAs","hash":"coherence-and-cacheability-pmas","id":46},{"text":"Idempotency PMAs","hash":"idempotency-pmas","id":47},{"text":"Physical Memory Protection","hash":"pmp","id":48},{"text":"Physical Memory Protection CSRs","hash":"physical-memory-protection-csrs","id":49},{"text":"Address Matching","hash":"address-matching","id":50},{"text":"Locking and Privilege Mode","hash":"locking-and-privilege-mode","id":51},{"text":"Priority and Matching Logic","hash":"priority-and-matching-logic","id":52},{"text":"Physical Memory Protection and Paging","hash":"pmp-vmem","id":53}]},"11":{"id":11,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Control-flow Integrity(CFI) Control-flow Integrity (CFI) capabilities help defend against Return-Oriented Programming (ROP) and Call/Jump-Oriented Programming (COP/JOP) style control-flow subversion attacks. The Zicfiss and Zicfilp extensions provide backward-edge and forward-edge control flow integrity respectively. Please see the Control-flow Integrity chapter of the Unprivileged ISA specification for further details on these CFI capabilities and the associated Unprivileged ISA. This section specifies the Privileged ISA for the Zicfilp extension. The term xLPE is used to determine if forward-edge CFI using landing pads provided by the Zicfilp extension is enabled at a privilege mode. When S-mode is implemented, it is determined as follows: Table 1. xLPE determination when S-mode is implemented Privilege Mode xLPE M mseccfg.MLPE S or HS menvcfg.LPE VS henvcfg.LPE U or VU senvcfg.LPE When S-mode is not implemented, it is determined as follows: Table 2. xLPE determination when S-mode is not implemented Privilege Mode xLPE M mseccfg.MLPE U menvcfg.LPE The Zicfilp must be explicitly enabled for use at each privilege mode. Programs compiled with the LPAD instruction continue to function correctly, but without forward-edge CFI protection, when the Zicfilp extension is not implemented or is not enabled. A trap may need to be delivered to the same or to a higher privilege mode upon completion of JALR/C.JALR/C.JR, but before the instruction at the target of indirect call/jump was decoded, due to: Asynchronous interrupts. Synchronous exceptions with priority higher than that of a software-check exception with xtval set to \"landing pad fault (code=2)\" (See [exception-priority] of Privileged Specification). The software-check exception caused by Zicfilp has higher priority than an illegal-instruction exception but lower priority than instruction access-fault. The software-check exception due to the instruction not being an LPAD instruction when ELP is LP_EXPECTED or an software-check exception caused by the LPAD instruction itself (See [LP_INST]) leads to a trap being delivered to the same or to a higher privilege mode. In such cases, the ELP prior to the trap, the previous ELP, must be preserved by the trap delivery such that it can be restored on a return from the trap. To store the previous ELP state on trap delivery to M-mode, an MPELP bit is provided in the mstatus CSR. To store the previous ELP state on trap delivery to S/HS-mode, an SPELP bit is provided in the mstatus CSR. The SPELP bit in mstatus can be accessed through the sstatus CSR. To store the previous ELP state on traps to VS-mode, a SPELP bit is defined in the vsstatus (VS-modes version of sstatus). To store the previous ELP state on transition to Debug Mode, a pelp bit is defined in the dcsr register. When a trap is taken into privilege mode x, the xPELP is set to ELP and ELP is set to NO_LP_EXPECTED. An MRET or SRET instruction is used to return from a trap in M-mode or S-mode, respectively. When executing an xRET instruction, if the new privilege mode is y, then ELP is set to the value of xPELP if yLPE (see Landing-Pad-Enabled (LPE) State) is 1; otherwise, it is set to NO_LP_EXPECTED; xPELP is set to NO_LP_EXPECTED. Upon entry into Debug Mode, the pelp bit in dcsr is updated with the ELP at the privilege level the hart was previously in, and the ELP is set to NO_LP_EXPECTED. When a hart resumes from Debug Mode, if the new privilege mode is y, then ELP is set to the value of pelp if yLPE (see Landing-Pad-Enabled (LPE) State) is 1; otherwise, it is set to NO_LP_EXPECTED. See also [rnmi] for semantics added to the RNMI trap and the MNRET instruction when this extension is implemented. The trap handler in privilege mode x must save the xPELP bit and the x7 register before performing an indirect call/jump if xLPE=1. If the privilege mode x can respond to interrupts and xLPE=1, then the trap handler should also save these values before enabling interrupts. The trap handler in privilege mode x must restore the saved xPELP bit and the x7 register before executing the xRET instruction to return from a trap. This section specifies the Privileged ISA for the Zicfiss extension. Attempts to access the ssp CSR may result in either an illegal-instruction exception or a virtual-instruction exception, contingent upon the state of the xenvcfg.SSE fields. The conditions are specified as follows: If the privilege mode is less than M and menvcfg.SSE is 0, an illegal-instruction exception is raised. Otherwise, if in U-mode and senvcfg.SSE is 0, an illegal-instruction exception is raised. Otherwise, if in VS-mode and henvcfg.SSE is 0, a virtual-instruction exception is raised. Otherwise, if in VU-mode and either henvcfg.SSE or senvcfg.SSE is 0, a virtual-instruction exception is raised. Otherwise, the access is allowed. The term xSSE is used to determine if backward-edge CFI using shadow stacks provided by the Zicfiss extension is enabled at a privilege mode. When S-mode is implemented, it is determined as follows: Table 3. xSSE determination when S-mode is implemented Privilege Mode xSSE M 0 S or HS menvcfg.SSE VS henvcfg.SSE U or VU senvcfg.SSE When S-mode is not implemented, then xSSE is 0 at both M and U privilege modes. Activating Zicfiss in U-mode must be done explicitly per process. Not activating Zicfiss at U-mode for a process when that application is not compiled with Zicfiss allows it to invoke shared libraries that may contain Zicfiss instructions. The Zicfiss instructions in the shared library revert to their Zimop/Zcmop-defined behavior in this case. When Zicfiss is enabled in S-mode it is benign to use an operating system that is not compiled with Zicfiss instructions. Such an operating system that does not use backward-edge CFI for S-mode execution may still activate Zicfiss for U-mode applications. When programs that use Zicfiss instructions are installed on a processor that supports the Zicfiss extension but the extension is not enabled at the privilege mode where the program executes, the program continues to function correctly but without backward-edge CFI protection as the Zicfiss instructions will revert to their Zimop/Zcmop-defined behavior. When programs that use Zicfiss instructions are installed on a processor that does not support the Zicfiss extension but supports the Zimop and Zcmop extensions, the programs continues to function correctly but without backward-edge CFI protection as the Zicfiss instructions will revert to their Zimop/Zcmop-defined behavior. On processors that do not support Zimop/Zcmop extensions, all Zimop/Zcmop code points including those used for Zicfiss instructions may cause an illegal-instruction exception. Execution of programs that use these instructions on such machines is not supported. Activating Zicfiss in M-mode is currently not supported. Additionally, when S-mode is not implemented, activation in U-mode is also not supported. These functionalities may be introduced in a future standard extension. Changes to xSSE take effect immediately; address-translation caches need not be synchronized with SFENCE.VMA, HFENCE.GVMA, or HFENCE.VVMA instructions. To protect shadow stack memory, the memory is associated with a new page type – the Shadow Stack (SS) page – in the single-stage and VS-stage page tables. The encoding R=0, W=1, and X=0, is defined to represent an SS page. When menvcfg.SSE=0, this encoding remains reserved. Similarly, when V=1 and henvcfg.SSE=0, this encoding remains reserved at VS and VU levels. If satp.MODE (or vsatp.MODE when V=1) is set to Bare and the effective privilege mode is below M, shadow stack memory accesses are prohibited, and shadow stack instructions will raise a store/AMO access-fault exception. When the effective privilege mode is M, any memory access by an SSAMOSWAP.W/D instruction will result in a store/AMO access-fault exception. Memory mapped as an SS page cannot be written to by instructions other than SSAMOSWAP.W/D, SSPUSH, and C.SSPUSH. Attempts will raise a store/AMO access-fault exception. Access to a SS page using cache-block operation (CBO.*) instructions is not permitted. Such accesses will raise a store/AMO access-fault exception. Implicit accesses, including instruction fetches to an SS page, are not permitted. Such accesses will raise an access-fault exception appropriate to the access type. However, the shadow stack is readable by all instructions that only load from memory. Stores to shadow stack pages by instructions other than SSAMOSWAP, SSPUSH, and C.SSPUSH will trigger a store/AMO access-fault exception, not a store/AMO page-fault exception, signaling a fatal error. A store/AMO page-fault suggests that the operating system could address and rectify the fault, which is not feasible in this scenario. Hence, the page-fault handler must decode the opcode of the faulting instruction to discern whether the fault was caused by a non-shadow-stack instruction writing to an SS page (a fatal condition) or by a shadow stack instruction to a non-resident page (a recoverable condition). The performance-critical nature of operating system page fault handlers necessitates triggering an access-fault instead of a page fault, allowing for a straightforward distinction between fatal conditions and recoverable faults. Operating systems must ensure that no writable, non-shadow-stack alias virtual address mappings exist for the physical memory backing the shadow stack. Furthermore, in systems where an address-misaligned exception supersedes the access-fault exception, handlers emulating misaligned stores must be designed to cause an access-fault exception when the store is directed to a shadow stack page. All instructions that perform load operations are allowed to read from the shadow stack. This feature facilitates debugging and performance profiling by allowing examination of the link register values backed up in the shadow stack. As of the drafting of this specification, instruction fetches are the sole type of implicit access subjected to single- or VS-stage address translation. If a shadow stack (SS) instruction raises an access-fault, page-fault, or guest-page-fault exception that is supposed to indicate the original instruction type (load or store/AMO), then the reported exception cause is respectively a store/AMO access fault (code 7), a store/AMO page fault (code 15), or a store/AMO guest-page fault (code 23). For shadow stack instructions, the reported instruction type is always as though it were a store or AMO, even for instructions SSPOPCHK and C.SSPOPCHK that only read from memory and do not write to it. When Zicfiss is implemented, the existing \"store/AMO\" exceptions can be thought of as \"store/AMO/SS\" exceptions, indicating that the trapping instruction is either a store, an AMO, or a shadow stack instruction. Shadow stack instructions are restricted to accessing shadow stack (pte.xwr=010b) pages. Should a shadow stack instruction access a page that is not designated as a shadow stack page and is not marked as read-only (pte.xwr=001), a store/AMO access-fault exception will be invoked. Conversely, if the page being accessed by a shadow stack instruction is a read-only page, a store/AMO page-fault exception will be triggered. Shadow stack loads and stores will trigger a store/AMO page-fault if the accessed page is read-only, to support copy-on-write (COW) of a shadow stack page. If the page has been marked read-only for COW tracking, the page-fault handler responds by creating a copy of the page and updates the pte.xwr to 010b, thereby designating each copy as a shadow stack page. Conversely, if the access targets a genuinely read-only page, the fault being reported as a store/AMO page-fault signals to the operating system that the fault is fatal and non-recoverable. Reporting the fault as a store/AMO page-fault, even for SSPOPCHK initiated memory access, aids in the determination of fatality; if these were reported as load page-faults, access to a truly read-only page might be mistakenly treated as a recoverable fault, leading to the faulting instruction being retried indefinitely. The PTE does not provide a read-only shadow stack encoding. Attempts by shadow stack instructions to access pages marked as read-write, read-write-execute, read-execute, or execute-only result in a store/AMO access-fault exception, similarly indicating a fatal condition. Shadow stacks should be bounded at each end by guard pages to prevent accidental underflows or overflows from one shadow stack into another. Conventionally, a guard page for a stack is a page that is not accessible by the process that owns the stack. If the virtual address in ssp is not XLEN aligned, then the SSPUSH/ C.SSPUSH/SSPOPCHK/C.SSPOPCHK instructions cause a store/AMO access-fault exception. Misaligned accesses to shadow stack are not required and enforcing alignment is more secure to detect errors in the program. An access-fault exception is raised instead of address-misaligned exception in such cases to indicate fatality and that the instruction must not be emulated by a trap handler. Correct execution of shadow stack instructions that access memory requires the the accessed memory to be idempotent. If the memory referenced by SSPUSH/C.SSPUSH/SSPOPCHK/C.SSPOPCHK/SSAMOSWAP.W/D instructions is not idempotent, then the instructions cause a store/AMO access-fault exception. The SSPOPCHK instruction performs a load followed by a check of the loaded data value with the link register as source. If the check against the link register faults, and the instruction is restarted by the trap handler, then the instruction will perform a load again. If the memory from which the load is performed is non-idempotent, then the second load may cause unexpected side effects. Shadow stack instructions that access the shadow stack require the memory referenced by ssp to be idempotent to avoid such concerns. Locating shadow stacks in non-idempotent memory, such as non-idempotent device memory, is not an expected usage, and requiring memory referenced to be idempotent does not pose a significant restriction. The U and SUM bit enforcement is performed normally for shadow stack instruction initiated memory accesses. The state of the MXR bit does not affect read access to a shadow stack page as the shadow stack page is always readable by all instructions that load from memory. The G-stage address translation and protections remain unaffected by the Zicfiss extension. The xwr == 010b encoding in the G-stage PTE remains reserved. When G-stage page tables are active, the shadow stack instructions that access memory require the G-stage page table to have read-write permission for the accessed memory; else a store/AMO guest-page-fault exception is raised. A future extension may define a shadow stack encoding in the G-stage page table to support use cases such as a hypervisor enforcing shadow stack protections for its guests. Svpbmt and Svnapot extensions are supported for shadow stack pages. The PMA checks are extended to require memory referenced by shadow stack instructions to be idempotent. The PMP checks are extended to require read-write permission for memory accessed by shadow stack instructions. If the PMP does not provide read-write permissions or if the accessed memory is not idempotent then a store/AMO access-fault exception is raised. The SSAMOSWAP.W/D instructions require the PMA of the accessed memory range to provide AMOSwap level support.","title":"Control-flow Integrity (CFI)","component":"isa","version":"v20250508","name":"priv-cfi","url":"/isa/priv/priv-cfi.html","titles":[{"text":"Landing Pad (Zicfilp)","hash":"priv-forward","id":1},{"text":"Landing-Pad-Enabled (LPE) State","hash":"FCFIACT","id":2},{"text":"Preserving Expected Landing Pad State on Traps","hash":"ZICFILP_FORWARD_TRAPS","id":3},{"text":"Shadow Stack (Zicfiss)","hash":"priv-backward","id":4},{"text":"Shadow Stack Pointer (ssp) CSR access control","hash":"shadow-stack-pointer-ssp-csr-access-control","id":5},{"text":"Shadow-Stack-Enabled (SSE) State","hash":"shadow-stack-enabled-sse-state","id":6},{"text":"Shadow Stack Memory Protection","hash":"SSMP","id":7}]},"12":{"id":12,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Control and Status Registers (CSRs) The SYSTEM major opcode is used to encode all privileged instructions in the RISC-V ISA. These can be divided into two main classes: those that atomically read-modify-write control and status registers (CSRs), which are defined in the Zicsr extension, and all other privileged instructions. The privileged architecture requires the Zicsr extension; which other privileged instructions are required depends on the privileged-architecture feature set. In addition to the unprivileged state described in Volume I of this manual, an implementation may contain additional CSRs, accessible by some subset of the privilege levels using the CSR instructions described in Volume I. In this chapter, we map out the CSR address space. The following chapters describe the function of each of the CSRs according to privilege level, as well as the other privileged instructions which are generally closely associated with a particular privilege level. Note that although CSRs and instructions are associated with one privilege level, they are also accessible at all higher privilege levels. Standard CSRs do not have side effects on reads but may have side effects on writes. The standard RISC-V ISA sets aside a 12-bit encoding space (csr[11:0]) for up to 4,096 CSRs. By convention, the upper 4 bits of the CSR address (csr[11:8]) are used to encode the read and write accessibility of the CSRs according to privilege level as shown in Allocation of RISC-V CSR address ranges.. The top two bits (csr[11:10]) indicate whether the register is read/write (00,01, or 10) or read-only (11). The next two bits (csr[9:8]) encode the lowest privilege level that can access the CSR. The CSR address convention uses the upper bits of the CSR address to encode default access privileges. This simplifies error checking in the hardware and provides a larger CSR space, but does constrain the mapping of CSRs into the address space. Implementations might allow a more-privileged level to trap otherwise permitted CSR accesses by a less-privileged level to allow these accesses to be intercepted. This change should be transparent to the less-privileged software. Instructions that access a non-existent CSR are reserved. Attempts to access a CSR without appropriate privilege level raise illegal-instruction exceptions or, as described in [sec:hcauses], virtual-instruction exceptions. Attempts to write a read-only register raise illegal-instruction exceptions. A read/write register might also contain some bits that are read-only, in which case writes to the read-only bits are ignored. Allocation of RISC-V CSR address ranges. also indicates the convention to allocate CSR addresses between standard and custom uses. The CSR addresses designated for custom uses will not be redefined by future standard extensions. Machine-mode standard read-write CSRs 0x7A0-0x7BF are reserved for use by the debug system. Of these CSRs, 0x7A0-0x7AF are accessible to machine mode, whereas 0x7B0-0x7BF are only visible to debug mode. Implementations should raise illegal-instruction exceptions on machine-mode access to the latter set of registers. Effective virtualization requires that as many instructions run natively as possible inside a virtualized environment, while any privileged accesses trap to the virtual machine monitor. [84] CSRs that are read-only at some lower privilege level are shadowed into separate CSR addresses if they are made read-write at a higher privilege level. This avoids trapping permitted lower-privilege accesses while still causing traps on illegal accesses. Currently, the counters are the only shadowed CSRs. Currently allocated RISC-V unprivileged CSR addresses.-Currently allocated RISC-V machine-level CSR addresses. list the CSRs that have currently been allocated CSR addresses. The timers, counters, and floating-point CSRs are standard unprivileged CSRs. The other registers are used by privileged code, as described in the following chapters. Note that not all registers are required on all implementations. Table 1. Allocation of RISC-V CSR address ranges. CSR Address Hex Use and Accessibility [11:10] [9:8] [7:4] Unprivileged and User-Level CSRs 00 00 XXXX 0x000-0x0FF Standard read/write 01 00 XXXX 0x400-0x4FF Standard read/write 10 00 XXXX 0x800-0x8FF Custom read/write 11 00 0XXX 0xC00-0xC7F Standard read-only 11 00 10XX 0xC80-0xCBF Standard read-only 11 00 11XX 0xCC0-0xCFF Custom read-only Supervisor-Level CSRs 00 01 XXXX 0x100-0x1FF Standard read/write 01 01 0XXX 0x500-0x57F Standard read/write 01 01 10XX 0x580-0x5BF Standard read/write 01 01 11XX 0x5C0-0x5FF Custom read/write 10 01 0XXX 0x900-0x97F Standard read/write 10 01 10XX 0x980-0x9BF Standard read/write 10 01 11XX 0x9C0-0x9FF Custom read/write 11 01 0XXX 0xD00-0xD7F Standard read-only 11 01 10XX 0xD80-0xDBF Standard read-only 11 01 11XX 0xDC0-0xDFF Custom read-only Hypervisor and VS CSRs 00 10 XXXX 0x200-0x2FF Standard read/write 01 10 0XXX 0x600-0x67F Standard read/write 01 10 10XX 0x680-0x6BF Standard read/write 01 10 11XX 0x6C0-0x6FF Custom read/write 10 10 0XXX 0xA00-0xA7F Standard read/write 10 10 10XX 0xA80-0xABF Standard read/write 10 10 11XX 0xAC0-0xAFF Custom read/write 11 10 0XXX 0xE00-0xE7F Standard read-only 11 10 10XX 0xE80-0xEBF Standard read-only 11 10 11XX 0xEC0-0xEFF Custom read-only Machine-Level CSRs 00 11 XXXX 0x300-0x3FF Standard read/write 01 11 0XXX 0x700-0x77F Standard read/write 01 11 100X 0x780-0x79F Standard read/write 01 11 1010 0x7A0-0x7AF Standard read/write debug CSRs 01 11 1011 0x7B0-0x7BF Debug-mode-only CSRs 01 11 11XX 0x7C0-0x7FF Custom read/write 10 11 0XXX 0xB00-0xB7F Standard read/write 10 11 10XX 0xB80-0xBBF Standard read/write 10 11 11XX 0xBC0-0xBFF Custom read/write 11 11 0XXX 0xF00-0xF7F Standard read-only 11 11 10XX 0xF80-0xFBF Standard read-only 11 11 11XX 0xFC0-0xFFF Custom read-only Table 2. Currently allocated RISC-V unprivileged CSR addresses. Number Privilege Name Description Unprivileged Floating-Point CSRs 0x001 0x002 0x003 URW URW URW fflags frm fcsr Floating-Point Accrued Exceptions. Floating-Point Dynamic Rounding Mode. Floating-Point Control and Status Register (frm +fflags). Unprivileged Vector CSRs 0x008 0x009 0x00A 0x00F 0xC20 0xC21 0xC22 URW URW URW URW URO URO URO vstart vxsat vxrm vcsr vl vtype vlenb Vector start position. Fixed-point accrued saturation flag. Fixed-point rounding mode. Vector control and status register. Vector length. Vector data type register. Vector register length in bytes. Unprivileged Zicfiss extension CSR 0x011 URW ssp Shadow Stack Pointer. Unprivileged Entropy Source Extension CSR 0x015 URW seed Seed for cryptographic random bit generators. Unprivileged Zcmt Extension CSR 0x017 URW jvt Table jump base vector and control register. Unprivileged Counter/Timers 0xC00 0xC01 0xC02 0xC03 0xC04 0xC1F 0xC80 0xC81 0xC82 0xC83 0xC84 0xC9F URO URO URO URO URO URO URO URO URO URO URO URO cycle time instret hpmcounter3 hpmcounter4 ⋮ hpmcounter31 cycleh timeh instreth hpmcounter3h hpmcounter4h ⋮ hpmcounter31h Cycle counter for RDCYCLE instruction. Timer for RDTIME instruction. Instructions-retired counter for RDINSTRET instruction. Performance-monitoring counter. Performance-monitoring counter. Performance-monitoring counter. Upper 32 bits of cycle, RV32 only. Upper 32 bits of time, RV32 only. Upper 32 bits of instret, RV32 only. Upper 32 bits of hpmcounter3, RV32 only. Upper 32 bits of hpmcounter4, RV32 only. Upper 32 bits of hpmcounter31, RV32 only. Table 3. Currently allocated RISC-V supervisor-level CSR addresses. Number Privilege Name Description Supervisor Trap Setup 0x100 0x104 0x105 0x106 SRW SRW SRW SRW sstatus sie stvec scounteren Supervisor status register. Supervisor interrupt-enable register. Supervisor trap handler base address. Supervisor counter enable. Supervisor Configuration 0x10A SRW senvcfg Supervisor environment configuration register. Supervisor Counter Setup 0x120 SRW scountinhibit Supervisor counter-inhibit register. Supervisor Trap Handling 0x140 0x141 0x142 0x143 0x144 0xDA0 SRW SRW SRW SRW SRW SRO sscratch sepc scause stval sip scountovf Supervisor scratch register. Supervisor exception program counter. Supervisor trap cause. Supervisor trap value. Supervisor interrupt pending. Supervisor count overflow. Supervisor Protection and Translation 0x180 SRW satp Supervisor address translation and protection. Debug/Trace Registers 0x5A8 SRW scontext Supervisor-mode context register. Supervisor State Enable Registers 0x10C 0x10D 0x10E 0x10F SRW SRW SRW SRW sstateen0 sstateen1 sstateen2 sstateen3 Supervisor State Enable 0 Register. Supervisor State Enable 1 Register. Supervisor State Enable 2 Register. Supervisor State Enable 3 Register. Table 4. Currently allocated RISC-V hypervisor and VS CSR addresses. Number Privilege Name Description Hypervisor Trap Setup 0x600 0x602 0x603 0x604 0x606 0x607 0x612 HRW HRW HRW HRW HRW HRW HRW hstatus hedeleg hideleg hie hcounteren hgeie hedelegh Hypervisor status register. Hypervisor exception delegation register. Hypervisor interrupt delegation register. Hypervisor interrupt-enable register. Hypervisor counter enable. Hypervisor guest external interrupt-enable register. Upper 32 bits of hedeleg, RV32 only. Hypervisor Trap Handling 0x643 0x644 0x645 0x64A 0xE12 HRW HRW HRW HRW HRO htval hip hvip htinst hgeip Hypervisor trap value. Hypervisor interrupt pending. Hypervisor virtual interrupt pending. Hypervisor trap instruction (transformed). Hypervisor guest external interrupt pending. Hypervisor Configuration 0x60A 0x61A HRW HRW henvcfg henvcfgh Hypervisor environment configuration register. Upper 32 bits of henvcfg, RV32 only. Hypervisor Protection and Translation 0x680 HRW hgatp Hypervisor guest address translation and protection. Debug/Trace Registers 0x6A8 HRW hcontext Hypervisor-mode context register. Hypervisor Counter/Timer Virtualization Registers 0x605 0x615 HRW HRW htimedelta htimedeltah Delta for VS/VU-mode timer. Upper 32 bits of htimedelta, RV32 only. Hypervisor State Enable Registers 0x60C 0x60D 0x60E 0x60F 0x61C 0x61D 0x61E 0x61F HRW HRW HRW HRW HRW HRW HRW HRW hstateen0 hstateen1 hstateen2 hstateen3 hstateen0h hstateen1h hstateen2h hstateen3h Hypervisor State Enable 0 Register. Hypervisor State Enable 1 Register. Hypervisor State Enable 2 Register. Hypervisor State Enable 3 Register. Upper 32 bits of Hypervisor State Enable 0 Register, RV32 only. Upper 32 bits of Hypervisor State Enable 1 Register, RV32 only. Upper 32 bits of Hypervisor State Enable 2 Register, RV32 only. Upper 32 bits of Hypervisor State Enable 3 Register, RV32 only. Virtual Supervisor Registers 0x200 0x204 0x205 0x240 0x241 0x242 0x243 0x244 0x280 HRW HRW HRW HRW HRW HRW HRW HRW HRW vsstatus vsie vstvec vsscratch vsepc vscause vstval vsip vsatp Virtual supervisor status register. Virtual supervisor interrupt-enable register. Virtual supervisor trap handler base address. Virtual supervisor scratch register. Virtual supervisor exception program counter. Virtual supervisor trap cause. Virtual supervisor trap value. Virtual supervisor interrupt pending. Virtual supervisor address translation and protection. Table 5. Currently allocated RISC-V machine-level CSR addresses. Number Privilege Name Description Machine Information Registers 0xF11 0xF12 0xF13 0xF14 0xF15 MRO MRO MRO MRO MRO mvendorid marchid mimpid mhartid mconfigptr Vendor ID. Architecture ID. Implementation ID. Hardware thread ID. Pointer to configuration data structure. Machine Trap Setup 0x300 0x301 0x302 0x303 0x304 0x305 0x306 0x310 0x312 MRW MRW MRW MRW MRW MRW MRW MRW MRW mstatus misa medeleg mideleg mie mtvec mcounteren mstatush medelegh Machine status register. ISA and extensions Machine exception delegation register. Machine interrupt delegation register. Machine interrupt-enable register. Machine trap-handler base address. Machine counter enable. Additional machine status register, RV32 only. Upper 32 bits of medeleg, RV32 only. Machine Trap Handling 0x340 0x341 0x342 0x343 0x344 0x34A 0x34B MRW MRW MRW MRW MRW MRW MRW mscratch mepc mcause mtval mip mtinst mtval2 Machine scratch register. Machine exception program counter. Machine trap cause. Machine trap value. Machine interrupt pending. Machine trap instruction (transformed). Machine second trap value. Machine Configuration 0x30A 0x31A 0x747 0x757 MRW MRW MRW MRW menvcfg menvcfgh mseccfg mseccfgh Machine environment configuration register. Upper 32 bits of menvcfg, RV32 only. Machine security configuration register. Upper 32 bits of mseccfg, RV32 only. Machine Memory Protection 0x3A0 0x3A1 0x3A2 0x3A3 0x3AE 0x3AF 0x3B0 0x3B1 0x3EF MRW MRW MRW MRW MRW MRW MRW MRW MRW pmpcfg0 pmpcfg1 pmpcfg2 pmpcfg3 ⋯ pmpcfg14 pmpcfg15 pmpaddr0 pmpaddr1 ⋯ pmpaddr63 Physical memory protection configuration. Physical memory protection configuration, RV32 only. Physical memory protection configuration. Physical memory protection configuration, RV32 only. Physical memory protection configuration. Physical memory protection configuration, RV32 only. Physical memory protection address register. Physical memory protection address register. Physical memory protection address register. Machine State Enable Registers 0x30C 0x30D 0x30E 0x30F 0x31C 0x31D 0x31E 0x31F MRW MRW MRW MRW MRW MRW MRW MRW mstateen0 mstateen1 mstateen2 mstateen3 mstateen0h mstateen1h mstateen2h mstateen3h Machine State Enable 0 Register. Machine State Enable 1 Register. Machine State Enable 2 Register. Machine State Enable 3 Register. Upper 32 bits of Machine State Enable 0 Register, RV32 only. Upper 32 bits of Machine State Enable 1 Register, RV32 only. Upper 32 bits of Machine State Enable 2 Register, RV32 only. Upper 32 bits of Machine State Enable 3 Register, RV32 only. Table 6. Currently allocated RISC-V machine-level CSR addresses. Number Privilege Name Description Machine Non-Maskable Interrupt Handling 0x740 0x741 0x742 0x744 MRW MRW MRW MRW mnscratch mnepc mncause mnstatus Resumable NMI scratch register. Resumable NMI program counter. Resumable NMI cause. Resumable NMI status. Machine Counter/Timers 0xB00 0xB02 0xB03 0xB04 0xB1F 0xB80 0xB82 0xB83 0xB84 0xB9F MRW MRW MRW MRW MRW MRW MRW MRW MRW MRW mcycle minstret mhpmcounter3 mhpmcounter4 ⋮ mhpmcounter31 mcycleh minstreth mhpmcounter3h mhpmcounter4h ⋮ mhpmcounter31h Machine cycle counter. Machine instructions-retired counter. Machine performance-monitoring counter. Machine performance-monitoring counter. Machine performance-monitoring counter. Upper 32 bits of mcycle, RV32 only. Upper 32 bits of minstret, RV32 only. Upper 32 bits of mhpmcounter3, RV32 only. Upper 32 bits of mhpmcounter4, RV32 only. Upper 32 bits of mhpmcounter31, RV32 only. Machine Counter Setup 0x320 0x323 0x324 0x33F 0x723 0x724 0x73F MRW MRW MRW MRW MRW MRW MRW mcountinhibit mhpmevent3 mhpmevent4 ⋮ mhpmevent31 mhpmevent3h mhpmevent4h ⋮ mhpmevent31h Machine counter-inhibit register. Machine performance-monitoring event selector. Machine performance-monitoring event selector. Machine performance-monitoring event selector. Upper 32 bits of mhpmevent3, RV32 only. Upper 32 bits of mhpmevent4, RV32 only. Upper 32 bits of mhpmevent31, RV32 only. Debug/Trace Registers (shared with Debug Mode) 0x7A0 0x7A1 0x7A2 0x7A3 0x7A8 MRW MRW MRW MRW MRW tselect tdata1 tdata2 tdata3 mcontext Debug/Trace trigger register select. First Debug/Trace trigger data register. Second Debug/Trace trigger data register. Third Debug/Trace trigger data register. Machine-mode context register. Debug Mode Registers 0x7B0 0x7B1 0x7B2 0x7B3 DRW DRW DRW DRW dcsr dpc dscratch0 dscratch1 Debug control and status register. Debug program counter. Debug scratch register 0. Debug scratch register 1. The following definitions and abbreviations are used in specifying the behavior of fields within the CSRs. Some whole read/write fields are reserved for future use. Software should ignore the values read from these fields, and should preserve the values held in these fields when writing values to other fields of the same register. For forward compatibility, implementations that do not furnish these fields must make them read-only zero. These fields are labeled WPRI in the register descriptions. To simplify the software model, any backward-compatible future definition of previously reserved fields within a CSR must cope with the possibility that a non-atomic read/modify/write sequence is used to update other fields in the CSR. Alternatively, the original CSR definition must specify that subfields can only be updated atomically, which may require a two-instruction clear bit/set bit sequence in general that can be problematic if intermediate values are not legal. Some read/write CSR fields specify behavior for only a subset of possible bit encodings, with other bit encodings reserved. Software should not write anything other than legal values to such a field, and should not assume a read will return a legal value unless the last write was of a legal value, or the register has not been written since another operation (e.g., reset) set the register to a legal value. These fields are labeled WLRL in the register descriptions. Hardware implementations need only implement enough state bits to differentiate between the supported values, but must always return the complete specified bit-encoding of any supported value when read. Implementations are permitted but not required to raise an illegal-instruction exception if an instruction attempts to write a non-supported value to a WLRL field. Implementations can return arbitrary bit patterns on the read of a WLRL field when the last write was of an illegal value, but the value returned should deterministically depend on the illegal written value and the value of the field prior to the write. Some read/write CSR fields are only defined for a subset of bit encodings, but allow any value to be written while guaranteeing to return a legal value whenever read. Assuming that writing the CSR has no other side effects, the range of supported values can be determined by attempting to write a desired setting then reading to see if the value was retained. These fields are labeled WARL in the register descriptions. Implementations will not raise an exception on writes of unsupported values to a WARL field. Implementations can return any legal value on the read of a WARL field when the last write was of an illegal value, but the legal value returned should deterministically depend on the illegal written value and the architectural state of the hart. If a write to one CSR changes the set of legal values allowed for a field of a second CSR, then unless specified otherwise, the second CSR’s field immediately gets an UNSPECIFIED value from among its new legal values. This is true even if the field’s value before the write remains legal after the write; the value of the field may be changed in consequence of the write to the controlling CSR. As a special case of this rule, the value written to one CSR may control whether a field of a second CSR is writable (with multiple legal values) or is read-only. When a write to the controlling CSR causes the second CSR’s field to change from previously read-only to now writable, that field immediately gets an UNSPECIFIED but legal value, unless specified otherwise. Some CSR fields are, when writable, defined as aliases of other CSR fields. Let x be such a CSR field, and let y be the CSR field it aliases when writable. If a write to a controlling CSR causes field x to change from previously read-only to now writable, the new value of x is not UNSPECIFIED but instead immediately reflects the existing value of its alias y, as required. A change to the value of a CSR for this reason is not a write to the affected CSR and thus does not trigger any side effects specified for that CSR. Implementations sometimes perform implicit reads of CSRs. (For example, all S-mode instruction fetches implicitly read the satp CSR.) Unless otherwise specified, the value returned by an implicit read of a CSR is the same value that would have been returned by an explicit read of the CSR, using a CSR-access instruction in a sufficient privilege mode. If the width of a CSR is changed (for example, by changing SXLEN or UXLEN, as described in [xlen-control]), the values of the writable fields and bits of the new-width CSR are, unless specified otherwise, determined from the previous-width CSR as though by this algorithm: The value of the previous-width CSR is copied to a temporary register of the same width. For the read-only bits of the previous-width CSR, the bits at the same positions in the temporary register are set to zeros. The width of the temporary register is changed to the new width. If the new width W is narrower than the previous width, the least-significant W bits of the temporary register are retained and the more-significant bits are discarded. If the new width is wider than the previous width, the temporary register is zero-extended to the wider width. Each writable field of the new-width CSR takes the value of the bits at the same positions in the temporary register. Changing the width of a CSR is not a read or write of the CSR and thus does not trigger any side effects. If a standard CSR is wider than XLEN bits, then an explicit read of the CSR returns the register’s least-significant XLEN bits, and an explicit write to the CSR modifies only the register’s least-significant XLEN bits, leaving the upper bits unchanged. Some standard CSRs, such as the counter CSRs of extension Zicntr, are always 64 bits, even when XLEN=32 (RV32). For each such 64-bit CSR (for example, counter time), a corresponding 32-bit high-half CSR is usually defined with the same name but with the letter ‘h’ appended at the end (timeh). The high-half CSR aliases bits 63:32 of its namesake 64-bit CSR, thus providing a way for RV32 software to read and modify the otherwise-unreachable 32 bits. Standard high-half CSRs are accessible only when the base RISC-V instruction set is RV32 (XLEN=32). For RV64 (when XLEN=64), the addresses of all standard high-half CSRs are reserved, so an attempt to access a high-half CSR typically raises an illegal-instruction exception.","title":"Control and Status Registers (CSRs)","component":"isa","version":"v20250508","name":"priv-csrs","url":"/isa/priv/priv-csrs.html","titles":[{"text":"CSR Address Mapping Conventions","hash":"csr-address-mapping-conventions","id":1},{"text":"CSR Listing","hash":"csr-listing","id":2},{"text":"CSR Field Specifications","hash":"csr-field-specifications","id":3},{"text":"Reserved Writes Preserve Values, Reads Ignore Values (WPRI)","hash":"reserved-writes-preserve-values-reads-ignore-values-wpri","id":4},{"text":"Write/Read Only Legal Values (WLRL)","hash":"writeread-only-legal-values-wlrl","id":5},{"text":"Write Any Values, Reads Legal Values (WARL)","hash":"write-any-values-reads-legal-values-warl","id":6},{"text":"CSR Field Modulation","hash":"csr-field-modulation","id":7},{"text":"Implicit Reads of CSRs","hash":"implicit-reads-of-csrs","id":8},{"text":"CSR Width Modulation","hash":"csrwidthmodulation","id":9},{"text":"Explicit Accesses to CSRs Wider than XLEN","hash":"explicit-accesses-to-csrs-wider-than-xlen","id":10}]},"13":{"id":13,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification History Development of the RISC-V architecture and implementations has been partially funded by the following sponsors. Par Lab: Research supported by Microsoft (Award #024263) and Intel (Award #024894) funding and by matching funding by U.C. Discovery (Award #DIG07-10227). Additional support came from Par Lab affiliates Nokia, NVIDIA, Oracle, and Samsung. Project Isis: DoE Award DE-SC0003624. ASPIRE Lab: DARPA PERFECT program, Award HR0011-12-2-0016. DARPA POEM program Award HR0011-11-C-0100. The Center for Future Architectures Research (C-FAR), a STARnet center funded by the Semiconductor Research Corporation. Additional support from ASPIRE industrial sponsor, Intel, and ASPIRE affiliates, Google, Huawei, Nokia, NVIDIA, Oracle, and Samsung. The content of this paper does not necessarily reflect the position or the policy of the US government and no official endorsement should be inferred.","title":"History","component":"isa","version":"v20250508","name":"priv-history","url":"/isa/priv/priv-history.html","titles":[{"text":"Research Funding at UC Berkeley","hash":"research-funding-at-uc-berkeley","id":1}]},"14":{"id":14,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification RISC-V Privileged Instruction Set Listings This chapter presents instruction-set listings for all instructions defined in the RISC-V Privileged Architecture. The instruction-set listings for unprivileged instructions, including the ECALL and EBREAK instructions, are provided in Volume I of this manual. Figure 1. RISC-V Privileged Instructions","title":"RISC-V Privileged Instruction Set Listings","component":"isa","version":"v20250508","name":"priv-insns","url":"/isa/priv/priv-insns.html","titles":[]},"15":{"id":15,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Introduction This document describes the RISC-V privileged architecture, which covers all aspects of RISC-V systems beyond the unprivileged ISA, including privileged instructions as well as additional functionality required for running operating systems and attaching external devices. Commentary on our design decisions is formatted as in this paragraph, and can be skipped if the reader is only interested in the specification itself. We briefly note that the entire privileged-level design described in this document could be replaced with an entirely different privileged-level design without changing the unprivileged ISA, and possibly without even changing the ABI. In particular, this privileged specification was designed to run existing popular operating systems, and so embodies the conventional level-based protection model. Alternate privileged specifications could embody other more flexible protection-domain models. For simplicity of expression, the text is written as if this was the only possible privileged architecture. This section describes the terminology we use to describe components of the wide range of possible privileged software stacks for RISC-V. Different implementation stacks supporting various forms of privileged execution. shows some of the possible software stacks that can be supported by the RISC-V architecture. The left-hand side shows a simple system that supports only a single application running on an application execution environment (AEE). The application is coded to run with a particular application binary interface (ABI). The ABI includes the supported user-level ISA plus a set of ABI calls to interact with the AEE. The ABI hides details of the AEE from the application to allow greater flexibility in implementing the AEE. The same ABI could be implemented natively on multiple different host OSs, or could be supported by a user-mode emulation environment running on a machine with a different native ISA. Our graphical convention represents abstract interfaces using black boxes with white text, to separate them from concrete instances of components implementing the interfaces. Figure 1. Different implementation stacks supporting various forms of privileged execution. The middle configuration shows a conventional operating system (OS) that can support multiprogrammed execution of multiple applications. Each application communicates over an ABI with the OS, which provides the AEE. Just as applications interface with an AEE via an ABI, RISC-V operating systems interface with a supervisor execution environment (SEE) via a supervisor binary interface (SBI). An SBI comprises the user-level and supervisor-level ISA together with a set of SBI function calls. Using a single SBI across all SEE implementations allows a single OS binary image to run on any SEE. The SEE can be a simple boot loader and BIOS-style IO system in a low-end hardware platform, or a hypervisor-provided virtual machine in a high-end server, or a thin translation layer over a host operating system in an architecture simulation environment. Most supervisor-level ISA definitions do not separate the SBI from the execution environment and/or the hardware platform, complicating virtualization and bring-up of new hardware platforms. The rightmost configuration shows a virtual machine monitor configuration where multiple multiprogrammed OSs are supported by a single hypervisor. Each OS communicates via an SBI with the hypervisor, which provides the SEE. The hypervisor communicates with the hypervisor execution environment (HEE) using a hypervisor binary interface (HBI), to isolate the hypervisor from details of the hardware platform. The ABI, SBI, and HBI are still a work-in-progress, but we are now prioritizing support for Type-2 hypervisors where the SBI is provided recursively by an S-mode OS. Hardware implementations of the RISC-V ISA will generally require additional features beyond the privileged ISA to support the various execution environments (AEE, SEE, or HEE). At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode in one or more CSRs (control and status registers). Three RISC-V privilege levels are currently defined as shown in RISC-V privilege levels.. Table 1. RISC-V privilege levels. Level Encoding Name Abbreviation 0 1 2 3 00 01 10 11 User/Application Supervisor Reserved Machine U S M Privilege levels are used to provide protection between different components of the software stack, and attempts to perform operations not permitted by the current privilege mode will cause an exception to be raised. These exceptions will normally cause traps into an underlying execution environment. In the description, we try to separate the privilege level for which code is written, from the privilege mode in which it runs, although the two are often tied. For example, a supervisor-level operating system can run in supervisor-mode on a system with three privilege modes, but can also run in user-mode under a classic virtual machine monitor on systems with two or more privilege modes. In both cases, the same supervisor-level operating system binary code can be used, coded to a supervisor-level SBI and hence expecting to be able to use supervisor-level privileged instructions and CSRs. When running a guest OS in user mode, all supervisor-level actions will be trapped and emulated by the SEE running in the higher-privilege level. The machine level has the highest privileges and is the only mandatory privilege level for a RISC-V hardware platform. Code run in machine-mode (M-mode) is usually inherently trusted, as it has low-level access to the machine implementation. M-mode can be used to manage secure execution environments on RISC-V. User-mode (U-mode) and supervisor-mode (S-mode) are intended for conventional application and operating system usage respectively. Each privilege level has a core set of privileged ISA extensions with optional extensions and variants. For example, machine-mode supports an optional standard extension for memory protection. Also, supervisor mode can be extended to support Type-2 hypervisor execution as described in [hypervisor]. Implementations might provide anywhere from 1 to 3 privilege modes trading off reduced isolation for lower implementation cost, as shown in Supported combination of privilege modes.. Table 2. Supported combination of privilege modes. Number of levels Supported Modes Intended Usage 1 2 3 M M, U M, S, U Simple embedded systems Secure embedded systems Systems running Unix-like operating systems All hardware implementations must provide M-mode, as this is the only mode that has unfettered access to the whole machine. The simplest RISC-V implementations may provide only M-mode, though this will provide no protection against incorrect or malicious application code. The lock feature of the optional PMP facility can provide some limited protection even with only M-mode implemented. Many RISC-V implementations will also support at least user mode (U-mode) to protect the rest of the system from application code. Supervisor mode (S-mode) can be added to provide isolation between a supervisor-level operating system and the SEE. A hart normally runs application code in U-mode until some trap (e.g., a supervisor call or a timer interrupt) forces a switch to a trap handler, which usually runs in a more privileged mode. The hart will then execute the trap handler, which will eventually resume execution at or after the original trapped instruction in U-mode. Traps that increase privilege level are termed vertical traps, while traps that remain at the same privilege level are termed horizontal traps. The RISC-V privileged architecture provides flexible routing of traps to different privilege layers. Horizontal traps can be implemented as vertical traps that return control to a horizontal trap handler in the less-privileged mode. Implementations may also include a debug mode to support off-chip debugging and/or manufacturing test. Debug mode (D-mode) can be considered an additional privilege mode, with even more access than M-mode. The separate debug specification proposal describes operation of a RISC-V hart in debug mode. Debug mode reserves a few CSR addresses that are only accessible in D-mode, and may also reserve some portions of the physical address space on a platform.","title":"Introduction","component":"isa","version":"v20250508","name":"priv-intro","url":"/isa/priv/priv-intro.html","titles":[{"text":"RISC-V Privileged Software Stack Terminology","hash":"risc-v-privileged-software-stack-terminology","id":1},{"text":"Privilege Levels","hash":"privilege-levels","id":2},{"text":"Debug Mode","hash":"debug-mode","id":3}]},"16":{"id":16,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smrnmi\" Extension for Resumable Non-Maskable Interrupts, Version 1.0 The base machine-level architecture supports only unresumable non-maskable interrupts (UNMIs), where the NMI jumps to a handler in machine mode, overwriting the current mepc and mcause register values. If the hart had been executing machine-mode code in a trap handler, the previous values in mepc and mcause would not be recoverable and so execution is not generally resumable. The Smrnmi extension adds support for resumable non-maskable interrupts (RNMIs) to RISC-V. The extension adds four new CSRs (mnepc, mncause, mnstatus, and mnscratch) to hold the interrupted state, and one new instruction, MNRET, to resume from the RNMI handler. The rnmi interrupt signals are inputs to the hart. These interrupts have higher priority than any other interrupt or exception on the hart and cannot be disabled by software. Specifically, they are not disabled by clearing the mstatus.MIE register. The RNMI interrupt trap handler address is implementation-defined. RNMI also has an associated exception trap handler address, which is implementation defined. For example, some implementations might use the address specified in mtvec as the RNMI exception trap handler. This extension adds additional M-mode CSRs to enable a resumable non-maskable interrupt (RNMI). Figure 1. Resumable NMI scratch register mnscratch The mnscratch CSR holds an MXLEN-bit read-write register which enables the RNMI trap handler to save and restore the context that was interrupted. Figure 2. Resumable NMI program counter mnepc. The mnepc CSR is an MXLEN-bit read-write register which on entry to the RNMI trap handler holds the PC of the instruction that took the interrupt. The low bit of mnepc (mnepc[0]) is always zero. On implementations that support only IALIGN=32, the two low bits (mnepc[1:0]) are always zero. If an implementation allows IALIGN to be either 16 or 32 (by changing CSR misa, for example), then, whenever IALIGN=32, bit mnepc[1] is masked on reads so that it appears to be 0. This masking occurs also for the implicit read by the MRET instruction. Though masked, mnepc[1] remains writable when IALIGN=32. mnepc is a WARL register that must be able to hold all valid virtual addresses. It need not be capable of holding all possible invalid addresses. Prior to writing mnepc, implementations may convert an invalid address into some other invalid address that mnepc is capable of holding. Figure 3. Resumable NMI cause mncause. The mncause CSR holds the reason for the RNMI. If the reason is an interrupt, bit MXLEN-1 is set to 1, and the RNMI cause is encoded in the least-significant bits. If the reason is an interrupt and RNMI causes are not supported, bit MXLEN-1 is set to 1, and zero is written to the least-significant bits. If the reason is an exception within M-mode that results in a double trap as specified in the Smdbltrp extension, bit MXLEN-1 is set to 0 and the least-significant bits are set to the cause code corresponding to the exception that precipitated the double trap. Figure 4. Resumable NMI status register mnstatus. The mnstatus CSR holds a two-bit field, MNPP, which on entry to the RNMI trap handler holds the privilege mode of the interrupted context, encoded in the same manner as mstatus.MPP. It also holds a one-bit field, MNPV, which on entry to the RNMI trap handler holds the virtualization mode of the interrupted context, encoded in the same manner as mstatus.MPV. If the Zicfilp extension is implemented, mnstatus also holds the MNPELP field, which on entry to the RNMI trap handler holds the previous ELP state. When an RNMI trap is taken, MNPELP is set to ELP and ELP is set to 0. mnstatus also holds the NMIE bit. When NMIE=1, nonmaskable interrupts are enabled. When NMIE=0, all interrupts are disabled. When NMIE=0, the hart behaves as though mstatus.MPRV were clear, regardless of the current setting of mstatus.MPRV. Upon reset, NMIE contains the value 0. RNMIs are masked out of reset to give software the opportunity to initialize data structures and devices for subsequent RNMI handling. Software can set NMIE to 1, but attempts to clear NMIE have no effect. Normally, only reset sequences will explicitly set the NMIE bit. That the NMIE bit is settable does not suffice to support the nesting of RNMIs. To support this feature in a direct manner would have required allowing software to clear the NMIE bit—a design choice that would have contravened the concept of non-maskability. Software that wishes to minimize the latency until the next RNMI is taken can follow the top-half/bottom-half model, where the RNMI handler itself only enqueues a task to a task queue then returns. The bulk of the interrupt servicing is performed later, with RNMIs enabled. For the purposes of the WFI instruction, NMIE is a global interrupt enable, meaning that the setting of NMIE does not affect the operation of the WFI instruction. The other bits in mnstatus are reserved; software should write zeros and hardware implementations should return zeros. MNRET is an M-mode-only instruction that uses the values in mnepc and mnstatus to return to the program counter, privilege mode, and virtualization mode of the interrupted context. This instruction also sets mnstatus.NMIE. If MNRET changes the privilege mode to a mode less privileged than M, it also sets mstatus.MPRV to 0. If the Zicfilp extension is implemented, then if the new privileged mode is y, MNRET sets ELP to the logical AND of yLPE (see [FCFIACT]) and mnstatus.MNPELP. When an RNMI interrupt is detected, the interrupted PC is written to the mnepc CSR, the type of RNMI to the mncause CSR, and the privilege mode of the interrupted context to the mnstatus CSR. The mnstatus.NMIE bit is cleared, masking all interrupts. The hart then enters machine-mode and jumps to the RNMI trap handler address. The RNMI handler can resume original execution using the new MNRET instruction, which restores the PC from mnepc, the privilege mode from mnstatus, and also sets mnstatus.NMIE, which re-enables interrupts. If the hart encounters an exception while executing in M-mode with the mnstatus.NMIE bit clear, the actions taken are the same as if the exception had occurred while mnstatus.NMIE were set, except that the program counter is set to the RNMI exception trap handler address. The Smrnmi extension does not change the behavior of the MRET and SRET instructions. In particular, MRET and SRET are unaffected by the mnstatus.NMIE bit, and their execution does not alter the mnstatus.NMIE bit.","title":"\"Smrnmi\" Extension for Resumable Non-Maskable Interrupts, Version 1.0","component":"isa","version":"v20250508","name":"rnmi","url":"/isa/priv/rnmi.html","titles":[{"text":"RNMI Interrupt Signals","hash":"rnmi-interrupt-signals","id":1},{"text":"RNMI Handler Addresses","hash":"rnmi-handler-addresses","id":2},{"text":"RNMI CSRs","hash":"rnmi-csrs","id":3},{"text":"MNRET Instruction","hash":"mnret-instruction","id":4},{"text":"RNMI Operation","hash":"rnmi-operation","id":5}]},"17":{"id":17,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smcdeleg\" Counter Delegation Extension, Version 1.0 In modern “Rich OS” environments, hardware performance monitoring resources are managed by the kernel, kernel driver, and/or hypervisor. Counters may be configured with differing scopes, in some cases counting events system-wide, while in others counting events on behalf of a single virtual machine or application. In such environments, the latency of counter writes has a direct impact on overall profiling overhead as a result of frequent counter writes during: Sample collection, to clear overflow indication, and reload overflowed counter(s) Context switch, between processes, threads, containers, or virtual machines This extension provides a means for M-mode to allow writing select counters and event selectors from S/HS-mode. The purpose is to avert transitions to and from M-mode that add latency to these performance critical supervisor/hypervisor code sections. This extension also defines one new CSR, scountinhibit. For a Machine-level environment, extension Smcdeleg (‘Sm’ for Privileged architecture and Machine-level extension, ‘cdeleg’ for Counter Delegation) encompasses all added CSRs and all behavior modifications for a hart, over all privilege levels. For a Supervisor-level environment, extension Ssccfg (‘Ss’ for Privileged architecture and Supervisor-level extension, ‘ccfg’ for Counter Configuration) provides access to delegated counters, and to new supervisor-level state. The mcounteren register allows M-mode to provide the next-lower privilege mode with read access to select counters. When the Smcdeleg/Ssccfg extension is enabled (menvcfg.CDE=1), it further allows M-mode to delegate select counters to S-mode. The siselect (and vsiselect) index range 0x40-0x5F is reserved for delegated counter access. When a counter i is delegated (mcounteren[i]=1 and menvcfg.CDE=1), the register state associated with counter i can be read or written via sireg*, while siselect holds 0x40+i. The counter state accessible via alias CSRs is shown in the table below. Table 1. Indirect HPM State Mappings siselect value sireg sireg4 sireg2 sireg5 0x40 cycle1 cycleh1 cyclecfg14 cyclecfgh14 0x41 See below 0x42 instret1 instreth1 instretcfg14 instretcfgh14 0x43 hpmcounter32 hpmcounter3h2 hpmevent32 hpmevent3h23 … … … … … 0x5F hpmcounter312 hpmcounter31h2 hpmevent312 hpmevent31h23 1 Depends on Zicntr support 2 Depends on Zihpm support 3 Depends on Sscofpmf support 4 Depends on Smcntrpmf support hpmeventi represents a subset of the state accessed by the mhpmeventi register. Likewise, cyclecfg and instretcfg represent a subset of the state accessed by the mcyclecfg and minstretcfg registers, respectively. See below for subset details. If extension Smstateen is implemented, refer to extension Smcsrind/Sscsrind ([indirect-csr]) for how setting bit 60 of CSR mstateen0 to zero prevents access to registers siselect, sireg*, vsiselect, and vsireg* from privileged modes less privileged than M-mode, and likewise how setting bit 60 of hstateen0 to zero prevents access to siselect and sireg* (really vsiselect and vsireg*) from VS-mode. The remaining rules of this section apply only when access to a CSR is not blocked by mstateen0[60] = 0 or hstateen0[60] = 0. While the privilege mode is M or S and siselect holds a value in the range 0x40-0x5F, illegal-instruction exceptions are raised for the following cases: attempts to access any sireg* when menvcfg.CDE = 0; attempts to access sireg3 or sireg6; attempts to access sireg4 or sireg5 when XLEN = 64; attempts to access sireg* when siselect = 0x41, or when the counter selected by siselect is not delegated to S-mode (the corresponding bit in mcounteren = 0). The memory-mapped mtime register is not a performance monitoring counter to be managed by supervisor software, hence the special treatment of siselect value 0x41 described above. For each siselect and sireg* combination defined in Indirect HPM State Mappings, the table further indicates the extensions upon which the underlying counter state depends. If any extension upon which the underlying state depends is not implemented, an attempt from M or S mode to access the given state through sireg* raises an illegal-instruction exception. If the hypervisor (H) extension is also implemented, then as specified by extension Smcsrind/Sscsrind, a virtual-instruction exception is raised for attempts from VS-mode or VU-mode to directly access vsiselect or vsireg*, or attempts from VU-mode to access siselect or sireg*. Furthermore, while vsiselect holds a value in the range 0x40-0x5F: An attempt to access any vsireg* from M or S mode raises an illegal instruction exception. An attempt from VS-mode to access any sireg* (really vsireg*) raises an illegal-instruction exception if menvcfg.CDE = 0, or a virtual instruction exception if menvcfg.CDE = 1. If Sscofpmf is implemented, sireg2 and sireg5 provide access only to a subset of the event selector registers. Specifically, event selector bit 62 (MINH) is read-only 0 when accessed through sireg*. Similarly, if Smcntrpmf is implemented, sireg2 and sireg5 provide access only to a subset of the counter configuration registers. Counter configuration register bit 62 (MINH) is read-only 0 when accessed through sireg*. Smcdeleg/Ssccfg defines a new scountinhibit register, a masked alias of mcountinhibit. For counters delegated to S-mode, the associated mcountinhibit bits can be accessed via scountinhibit. For counters not delegated to S-mode, the associated bits in scountinhibit are read-only zero. When menvcfg.CDE=0, attempts to access scountinhibit raise an illegal instruction exception. When the Supervisor Counter Delegation extension is enabled, attempts to access scountinhibit from VS-mode or VU-mode raise a virtual-instruction exception. For implementations that support Smcdeleg/Ssccfg, Sscofpmf, and the H extension, when menvcfg.CDE=1, attempts to read scountovf from VS-mode or VU-mode raise a virtual-instruction exception. For implementations that support Smcdeleg, Sscofpmf, and Smaia, the local-counter-overflow interrupt (LCOFI) bit (bit 13) in each of CSRs mvip and mvien is implemented and writable. For implementations that support Smcdeleg/Ssccfg, Sscofpmf, Smaia/Ssaia, and the H extension, the LCOFI bit (bit 13) in each of hvip and hvien is implemented and writable. The hvip register is defined by the hypervisor (H) extension, while the mvien and hvien registers are defined by the Smaia/Ssaia extension. By virtue of implementing hvip.LCOFI, it is implicit that the LCOFI bit (bit 13) in each of vsie and vsip is also implemented. Requiring support for the LCOFI bits listed above ensures that virtual LCOFIs can be delivered to an OS running in S-mode, and to a guest OS running in VS-mode. It is optional whether the LCOFI bit (bit 13) in each of mideleg and hideleg, which allows all LCOFIs to be delegated to S-mode and VS-mode, respectively, is implemented and writable.","title":"\"Smcdeleg\" Counter Delegation Extension, Version 1.0","component":"isa","version":"v20250508","name":"smcdeleg","url":"/isa/priv/smcdeleg.html","titles":[{"text":"Counter Delegation","hash":"counter-delegation","id":1},{"text":"Supervisor Counter Inhibit (scountinhibit) Register","hash":"supervisor-counter-inhibit-scountinhibit-register","id":2},{"text":"Virtualizing scountovf","hash":"virtualizing-scountovf","id":3},{"text":"Virtualizing Local-Counter-Overflow Interrupts","hash":"virtualizing-local-counter-overflow-interrupts","id":4}]},"18":{"id":18,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smcntrpmf\" Cycke and Instret Privilege Mode Filtering, Version 1.0 The cycle and instret counters serve to support user mode self-profiling usages, wherein a user can read the counter(s) twice and compute the delta(s) to evaluate user software performance and behavior. By default, these counters are not filtered by privilege mode, and thus they continue to increment while traps (e.g., page faults or interrupts) to more privileged code are handled. This causes two problems: It introduces unpredictable noise to the counter values observed by the user. It leaks information about privileged software execution to user mode. Smcntrpmf remedies these issues by introducing privilege mode filtering for the cycle and instret counters. mcyclecfg and minstretcfg are 64-bit registers that configure privilege mode filtering for the cycle and instret counters, respectively. 63 62 61 60 59 58 57:0 0 MINH SINH UINH VSINH VUINH WPRI Field Description MINH If set, then counting of events in M-mode is inhibited SINH If set, then counting of events in S/HS-mode is inhibited UINH If set, then counting of events in U-mode is inhibited VSINH If set, then counting of events in VS-mode is inhibited VUINH If set, then counting of events in VU-mode is inhibited When all xINH bits are zero, event counting is enabled in all modes. For each bit in 61:58, if the associated privilege mode is not implemented, the bit is read-only zero. For RV32, bits 63:32 of mcyclecfg can be accessed via the mcyclecfgh CSR, and bits 63:32 of minstretcfg can be accessed via the minstretcfgh CSR. The CSR numbers are 0x321 for mcyclecfg, 0x322 for minstretcfg, 0x721 for mcyclecfgh, and 0x722 for minstretcfgh. The content of these registers may be accessible from Supervisor level if the Smcdeleg/Ssccfg extensions are implemented. The more natural CSR number for mcyclecfg would be 0x320, but that was allocated to mcountinhibit. This register format matches that specified for programmable counters by Sscofpmf. The bit position for the OF bit (bit 63) is read-only 0, since these counters do not generate local-counter-overflow interrupts on overflow. The fundamental behavior of cycle and instret is modified in that counting does not occur while executing in an inhibited privilege mode. Further, the following defines how transitions between a non-inhibited privilege mode and an inhibited privilege mode are counted. The cycle counter will simply count CPU cycles while the CPU is in a non-inhibited privilege mode. Mode transition operations (traps and trap returns) may take multiple clock cycles, and the change of privilege mode may be reported as occurring in any one of those cycles (possibly different for each occurrence of a trap or trap return). The RISC-V ISA has no requirement that the number of cycles for a trap or trap return be the same for all occurrences. Implementations are free to determine the extent to which this number may be consistent and predictable (or not), and the same is true for the specific cycle in which privilege mode changes. For the instret counter, most instructions do not affect mode transitions, so for those the behavior is clear: instructions that retire in a non-inhibited mode increment instret, and instructions that retire in an inhibited mode do not. There are two types of instructions that can affect a privilege mode change: instructions that cause synchronous exceptions to a more privileged mode, and xRET instructions that return to a less privileged mode. The former are not considered to retire, and hence do not increment instret. The latter do retire, and should increment instret only if the originating privilege mode is not inhibited. The instret definition above is intended to ensure that the counter increments in a predictable fashion. For example, consider a scenario where minstretcfg is configured such that all modes other than U-mode are inhibited. A user mode load should increment only once, even if it takes a page fault or other exception. With this definition, the faulting execution of the load will not increment (it does not retire), the handler instructions will not increment (they execute in an inhibited mode), including the xRET (it arguably retires in a non-inhibited mode, but it originates in an inhibited mode). Only once the load is re-executed and retires will it increment instret. In cases where an instruction is emulated by software running in a privilege mode that is inhibited in minstretcfg, the emulation routine must emulate the instret increment.","title":"\"Smcntrpmf\" Cycle and Instret Privilege Mode Filtering, Version 1.0","component":"isa","version":"v20250508","name":"smcntrpmf","url":"/isa/priv/smcntrpmf.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"CSRs","hash":"csrs","id":2},{"text":"Machine Counter Configuration (mcyclecfg, minstretcfg) Registers","hash":"machine-counter-configuration-mcyclecfg-minstretcfg-registers","id":3},{"text":"Counter Behavior","hash":"counter-behavior","id":4}]},"19":{"id":19,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smctr\" Control Transfer Records Extension, Version 1.0 A method for recording control flow transfer history is valuable not only for performance profiling but also for debugging. Control flow transfers refer to jump instructions (including function calls and returns), taken branch instructions, traps, and trap returns. Profiling tools, such as Linux perf, collect control transfer history when sampling software execution, thereby enabling tools, like AutoFDO, to identify hot paths for optimization. Control flow trace capabilities offer very deep transfer history, but the volume of data produced can result in significant performance overheads due to memory bandwidth consumption, buffer management, and decoder overhead. The Control Transfer Records (CTR) extension provides a method to record a limited history in register-accessible internal chip storage, with the intent of dramatically reducing the performance overhead and complexity of collecting transfer history. CTR defines a circular (FIFO) buffer. Each buffer entry holds a record for a single recorded control flow transfer. The number of records that can be held in the buffer depends upon both the implementation (the maximum supported depth) and the CTR configuration (the software selected depth). Only qualified transfers are recorded. Qualified transfers are those that meet the filtering criteria, which include the privilege mode and the transfer type. Recorded transfers are inserted at the write pointer, which is then incremented, while older recorded transfers may be overwritten once the buffer is full. Or the user can enable RAS (Return Address Stack) emulation mode, where only function calls are recorded, and function returns pop the last call record. The source PC, target PC, and some optional metadata (transfer type, elapsed cycles) are stored for each recorded transfer. The CTR buffer is accessible through an indirect CSR interface, such that software can specify which logical entry in the buffer it wishes to read or write. Logical entry 0 always corresponds to the youngest recorded transfer, followed by entry 1 as the next youngest, and so on. The machine-level extension, Smctr, encompasses all newly added Control Status Registers (CSRs), instructions, and behavior modifications for a hart across all privilege levels. The corresponding supervisor-level extension, Ssctr, is essentially identical to Smctr, except that it excludes machine-level CSRs and behaviors not intended to be directly accessible at the supervisor level. Smctr and Ssctr depend on both the implementation of S-mode and the Sscsrind extension. The mctrctl register is a 64-bit read/write register that enables and configures the CTR capability. Figure 1. Machine Control Transfer Records Control Register Format Table 1. Machine Control Transfer Records Control Register Field Definitions Field Description M, S, U Enable transfer recording in the selected privileged mode(s). RASEMU Enables RAS (Return Address Stack) Emulation Mode. See RAS (Return Address Stack) Emulation Mode. MTE Enables recording of traps to M-mode when M=0. See External Traps. STE Enables recording of traps to S-mode when S=0. See External Traps. BPFRZ Set sctrstatus.FROZEN on a breakpoint exception that traps to M-mode or S-mode. See Freeze. LCOFIFRZ Set sctrstatus.FROZEN on local-counter-overflow interrupt (LCOFI) that traps to M-mode or S-mode. See Freeze. EXCINH Inhibit recording of exceptions. See Transfer Type Filtering. INTRINH Inhibit recording of interrupts. See Transfer Type Filtering. TRETINH Inhibit recording of trap returns. See Transfer Type Filtering. NTBREN Enable recording of not-taken branches. See Transfer Type Filtering. TKBRINH Inhibit recording of taken branches. See Transfer Type Filtering. INDCALLINH Inhibit recording of indirect calls. See Transfer Type Filtering. DIRCALLINH Inhibit recording of direct calls. See Transfer Type Filtering. INDJMPINH Inhibit recording of indirect jumps (without linkage). See Transfer Type Filtering. DIRJMPINH Inhibit recording of direct jumps (without linkage). See Transfer Type Filtering. CORSWAPINH Inhibit recording of co-routine swaps. See Transfer Type Filtering. RETINH Inhibit recording of function returns. See Transfer Type Filtering. INDLJMPINH Inhibit recording of other indirect jumps (with linkage). See Transfer Type Filtering. DIRLJMPINH Inhibit recording of other direct jumps (with linkage). See Transfer Type Filtering. Custom[3:0] WARL bits designated for custom use. The value 0 must correspond to standard behavior. See Custom Extensions. All fields are optional except for M, S, U, and BPFRZ. All unimplemented fields are read-only 0, while all implemented fields are writable. If the Sscofpmf extension is implemented, LCOFIFRZ must be writable. Because the ROI of CTR is perceived to be low for RV32 implementations, CTR does not fully support RV32. While control flow transfers in RV32 can be recorded, RV32 cannot access xctrctl bits 63:32. A future extension could add support for RV32 by adding 3 new CSRs (mctrctlh, sctrctlh, and vsctrctlh) to provide this access. The sctrctl register provides supervisor mode access to a subset of mctrctl. Bits 2 and 9 in sctrctl are read-only 0. As a result, the M and MTE fields in mctrctl are not accessible through sctrctl. All other mctrctl fields are accessible through sctrctl. If the H extension is implemented, the vsctrctl register is a 64-bit read/write register that is VS-mode’s version of supervisor register sctrctl. When V=1, vsctrctl substitutes for the usual sctrctl, so instructions that normally read or modify sctrctl actually access vsctrctl instead. Figure 2. Virtual Supervisor Control Transfer Records Control Register Format Table 2. Virtual Supervisor Control Transfer Records Control Register Field Definitions Field Description S Enable transfer recording in VS-mode. U Enable transfer recording in VU-mode. STE Enables recording of traps to VS-mode when S=0. See External Traps. BPFRZ Set sctrstatus.FROZEN on a breakpoint exception that traps to VS-mode. See Freeze. LCOFIFRZ Set sctrstatus.FROZEN on local-counter-overflow interrupt (LCOFI) that traps to VS-mode. See Freeze. Other field definitions match those of sctrctl. The optional fields implemented in vsctrctl should match those implemented in sctrctl. Unlike the CTR status register or the CTR entry registers, the CTR control register has a VS-mode version. This allows a guest to manage the CTR configuration directly, without requiring traps to HS-mode, while ensuring that the guest configuration (most notably the privilege mode enable bits) do not impact CTR behavior when V=0. The 32-bit sctrdepth register specifies the depth of the CTR buffer. Figure 3. Supervisor Control Transfer Records Depth Register Format Table 3. Supervisor Control Transfer Records Depth Register Field Definitions Field Description DEPTH WARL field that selects the depth of the CTR buffer. Encodings: ‘000 - 16 ‘001 - 32 ‘010 - 64 ‘011 - 128 ‘100 - 256 '11x - reserved The depth of the CTR buffer dictates the number of entries to which the hardware records transfers. For a depth of N, the hardware records transfers to entries 0..N-1. All Entry Registers read as '0' and are read-only when the selected entry is in the range N to 255. When the depth is increased, the newly accessible entries contain unspecified but legal values. It is implementation-specific which DEPTH value(s) are supported. Attempts to access sctrdepth from VS-mode or VU-mode raise a virtual-instruction exception, unless CTR state enable access restrictions apply. See State Enable Access Control. It is expected that operating systems (OSs) will access sctrdepth only at boot, to select the maximum supported depth value. More frequent accesses may result in reduced performance in virtualization scenarios, as a result of traps from VS-mode incurred. There may be scenarios where software chooses to operate on only a subset of the entries, to reduce overhead. In such cases tools may choose to read only the lower entries, and OSs may choose to save/restore only on the lower entries while using SCTRCLR to clear the others. The value in configurable depth lies in supporting VM migration. It is expected that a platform spec may specify that one or more CTR depth values must be supported. A hypervisor may wish to restrict guests to using one of these required depths, in order to ensure that such guests can be migrated to any system that complies with the platform spec. The trapping behavior specified for VS-mode accesses to sctrdepth ensures that the hypervisor can impose such restrictions. The 32-bit sctrstatus register grants access to CTR status information and is updated by the hardware whenever CTR is active. CTR is active when the current privilege mode is enabled for recording and CTR is not frozen. Figure 4. Supervisor Control Transfer Records Status Register Format Table 4. Supervisor Control Transfer Records Status Register Field Definitions Field Description WRPTR WARL field that indicates the physical CTR buffer entry to be written next. It is incremented after new transfers are recorded (see Behavior), though there are exceptions when xctrctl.RASEMU=1, see RAS (Return Address Stack) Emulation Mode. For a given CTR depth (where depth = 2(DEPTH+4)), WRPTR wraps to 0 on an increment when the value matches depth-1, and to depth-1 on a decrement when the value is 0. Bits above those needed to represent depth-1 (e.g., bits 7:4 for a depth of 16) are read-only 0. On depth changes, WRPTR holds an unspecified but legal value. FROZEN Inhibit transfer recording. See Freeze. Undefined bits in sctrstatus are WPRI. Status fields may be added by future extensions, and software should ignore but preserve any fields that it does not recognize. Undefined bits must be implemented as read-only 0, unless a custom extension is implemented and enabled (see Custom Extensions). Logical entry 0, accessed via sireg* when siselect=0x200, is always the physical buffer entry preceding the WRPTR entry. More generally, the physical buffer entry Y associated with logical entry X (X < depth) can be determined using the formula Y = (WRPTR - X - 1) % depth, where depth = 2(DEPTH+4). Logical entries >= depth are read-only 0. Because the sctrstatus register is updated by hardware, writes should be performed with caution. If a multi-instruction read-modify-write to sctrstatus is performed while CTR is active, and between the read and write a qualified transfer or trap that causes CTR freeze completes, a hardware update could be lost. Software may wish to ensure that CTR is inactive before performing a read-modify-write, by ensuring that either sctrstatus.FROZEN=1, or that the current privilege mode is not enabled for recording. When restoring CTR state, sctrstatus should be written before CTR entry state is restored. This ensures that the software writes to logical CTR entries modify the proper physical entries. Exposing the WRPTR provides a more efficient means for synthesizing CTR entries. If a qualified control transfer is emulated, the emulator can simply increment the WRPTR, then write the synthesized record to logical entry 0. If a qualified function return is emulated while RASEMU=1, the emulator can clear ctrsource.V for logical entry 0, then decrement the WRPTR. Exposing the WRPTR may also allow support for Linux perf’s stack stitching capability. Smctr/Ssctr depends upon implementation of S-mode because much of CTR state is accessible only through S-mode CSRs. If, in the future, it becomes desirable to remove this dependency, an extension could add mctrdepth and mctrstatus CSRs that reflect the same state as sctrdepth and sctrstatus, respectively. Further, such an extension should make CTR entries accessible via miselect/mireg*. See Entry Registers. Control transfer records are stored in a CTR buffer, such that each buffer entry stores information about a single transfer. The CTR buffer entries are logically accessed via the indirect register access mechanism defined by the Sscsrind extension. The siselect index range 0x200 through 0x2FF is reserved for CTR logical entries 0 through 255. When siselect holds a value in this range, sireg provides access to ctrsource, sireg2 provides access to ctrtarget, and sireg3 provides access to ctrdata. sireg4, sireg5, and sireg6 are read-only 0. When vsiselect holds a value in 0x200..0x2FF, the vsireg* registers provide access to the same CTR entry register state as the analogous sireg* registers. There is not a separate set of entry registers for V=1. See State Enable Access Control for cases where CTR accesses from S-mode and VS-mode may be restricted. The ctrsource register contains the source program counter, which is the pc of the recorded control transfer instruction, or the epc of the recorded trap. The valid (V) bit is set by the hardware when a transfer is recorded in the selected CTR buffer entry, and implies that data in ctrsource, ctrtarget, and ctrdata is valid for this entry. ctrsource is an MXLEN-bit WARL register that must be able to hold all valid virtual or physical addresses that can serve as a pc. It need not be able to hold any invalid addresses; implementations may convert an invalid address into a valid address that the register is capable of holding. When XLEN < MXLEN, both explicit writes (by software) and implicit writes (for recorded transfers) will be zero-extended. Figure 5. Control Transfer Record Source Register Format for MXLEN=64 CTR entry registers are defined as MXLEN, despite the xireg* CSRs used to access them being XLEN, to ensure that entries recorded in RV64 are not truncated, as a result of CSR Width Modulation, on a transition to RV32. The ctrtarget register contains the target (destination) program counter of the recorded transfer. The optional MISP bit is set by the hardware when the recorded transfer is an instruction whose target or taken/not-taken direction was mispredicted by the branch predictor. MISP is read-only 0 when not implemented. ctrtarget is an MXLEN-bit WARL register that must be able to hold all valid virtual or physical addresses that can serve as a pc. It need not be able to hold any invalid addresses; implementations may convert an invalid address into a valid address that the register is capable of holding. When XLEN < MXLEN, both explicit writes (by software) and implicit writes (by recorded transfers) will be zero-extended. Figure 6. Control Transfer Record Target Register Format for MXLEN=64 The ctrdata register contains metadata for the recorded transfer. This register must be implemented, though all fields within it are optional. Unimplemented fields are read-only 0. ctrdata is a 64-bit register. Figure 7. Control Transfer Record Metadata Register Format Table 5. Control Transfer Record Metadata Register Field Definitions Field Description Access TYPE[3:0] Identifies the type of the control flow transfer recorded in the entry, using the encodings listed in Table 8. Implementations that do not support this field will report 0. WARL CCV Cycle Count Valid. See Cycle Counting. WARL CC[15:0] Cycle Count, composed of the Cycle Count Exponent (CCE, in CC[15:12]) and Cycle Count Mantissa (CCM, in CC[11:0]). See Cycle Counting. WARL Undefined bits in ctrdata are WPRI. Undefined bits must be implemented as read-only 0, unless a custom extension is implemented and enabled. Like the Transfer Type Filtering bits in mctrctl, the ctrdata.TYPE bits leverage the E-trace itype encodings. The SCTRCLR instruction performs the following operations: Zeroes all CTR Entry Registers, for all DEPTH values Zeroes the CTR cycle counter and CCV (see Cycle Counting) Any read of ctrsource, ctrtarget, or ctrdata that follows SCTRCLR, such that it precedes the next qualified control transfer, will return the value 0. Further, the first recorded transfer following SCTRCLR will have ctrdata.CCV=0. SCTRCLR raises an illegal-instruction exception in U-mode, and a virtual-instruction exception in VU-mode, unless CTR state enable access restrictions apply. See State Enable Access Control. When Smstateen is implemented, the mstateen0.CTR bit controls access to CTR register state from privilege modes less privileged than M-mode. When mstateen0.CTR=1, accesses to CTR register state behave as described in CSRs and Entry Registers above, while SCTRCLR behaves as described in Supervisor CTR Clear Instruction. When mstateen0.CTR=0 and the privilege mode is less privileged than M-mode, the following operations raise an illegal-instruction exception: Attempts to access sctrctl, vsctrctl, sctrdepth, or sctrstatus Attempts to access sireg* when siselect is in 0x200..0x2FF, or vsireg* when vsiselect is in 0x200..0x2FF Execution of the SCTRCLR instruction When mstateen0.CTR=0, qualified control transfers executed in privilege modes less privileged than M-mode will continue to implicitly update entry registers and sctrstatus. If the H extension is implemented and mstateen0.CTR=1, the hstateen0.CTR bit controls access to supervisor CTR state when V=1. This state includes sctrctl (really vsctrctl), sctrstatus, and sireg* (really vsireg*) when siselect (really vsiselect) is in 0x200..0x2FF. hstateen0.CTR is read-only 0 when mstateen0.CTR=0. When mstateen0.CTR=1 and hstateen0.CTR=1, VS-mode accesses to supervisor CTR state behave as described in CSRs and Entry Registers above, while SCTRCLR behaves as described in Supervisor CTR Clear Instruction. When mstateen0.CTR=1 and hstateen0.CTR=0, both VS-mode accesses to supervisor CTR state and VS-mode execution of SCTRCLR raise a virtual-instruction exception. sctrdepth is not included in the above list of supervisor CTR state controlled by hstateen0.CTR since accesses to sctrdepth from VS-mode raise a virtual-instruction exception regardless of the value of hstateen0.CTR. When hstateen0.CTR=0, qualified control transfers executed while V=1 will continue to implicitly update entry registers and sctrstatus. See [indirect-csr] for how bit 60 in mstateen0 and hstateen0 can also restrict access to sireg*/siselect and vsireg*/vsiselect from privilege modes less privileged than M-mode. Implementations that support Smctr/Ssctr but not Smstateen/Ssstateen may observe reduced performance. Because Smctr/Ssctr introduces a significant number of new CSRs, it is desirable to avoid save/restore of CTR state when possible. A hypervisor is likely to leverage State Enable to trap on the initial guest access to CTR state, delegating CTR and enabling save/restore of guest CTR state only once the guest has begun to use it. Without Smstateen/Ssstateen, a hypervisor is required to save/restore guest CTR state on every context switch. CTR records qualified control transfers. Control transfers are qualified if they meet the following criteria: The current privilege mode is enabled The transfer type is not inhibited sctrstatus.FROZEN is not set The transfer completes/retires Such qualified transfers update the Entry Registers at logical entry 0. As a result, older entries are pushed down the stack; the record previously in logical entry 0 moves to logical entry 1, the record in logical entry 1 moves to logical entry 2, and so on. If the CTR buffer is full, the oldest recorded entry (previously at entry depth-1) is lost. Recorded transfers will set the ctrsource.V bit to 1, and will update all implemented record fields. In order to collect accurate and representative performance profiles while using CTR, it is recommended that hardware recording of control transfers incurs no added performance overhead, e.g., in the form of retirement or instruction execution restrictions that are not present when CTR is not active. Transfers that change the privilege mode are a special case. What is recorded, if anything, depends on whether the source privilege mode and/or target privilege mode are enabled for recording, and on the transfer type (trap or trap return). Traps between enabled privilege modes are recorded as normal. Traps from a disabled privilege mode to an enabled privilege mode are partially recorded, such that the ctrsource.PC is 0. Traps from an enabled mode to a disabled mode, known as external traps, are not recorded by default. See External Traps for how they can be recorded. Trap returns have similar treatment. Trap returns between enabled privilege modes are recorded as normal. Trap returns from an enabled mode back to a disabled mode are partially recorded, such that ctrtarget.PC is 0. Trap returns from a disabled mode to an enabled mode are not recorded. If privileged software is configuring CTR on behalf of less privileged software, it should ensure that its privilege mode enable bit (e.g., sctrctl.S for Supervisor software) is cleared before a trap return to the less privileged mode. Otherwise the trap return will be recorded, leaking the privileged source pc. Recording in Debug Mode is always inhibited. Transfers into and out of Debug Mode are never recorded. The table below provides details on recording of privilege mode transitions. Standard dependencies on FROZEN and transfer type inhibits also apply, but are not covered by the table. Table 6. Trap and Trap Return Recording Transfer Type Source Mode Target Mode Enabled Disabled Trap Enabled Recorded. External trap. Not recorded by default, but see External Traps. Disabled Recorded, ctrsource.PC is 0. Not recorded. Trap Return Enabled Recorded. Recorded, ctrtarget.PC is 0. Disabled Not recorded. Not recorded. Transitions between VS/VU-mode and M/HS-mode are unique in that they effect a change in the active CTR control register, and hence the CTR configuration. What is recorded, if anything, on these virtualization mode transitions depends upon fields from both [ms]ctrctl and vsctrctl. mctrctl.M, sctrctl.S, and vsctrctl.{S,U} are used to determine whether the source and target modes are enabled; mctrctl.MTE, sctrctl.STE, and vsctrctl.STE are used to determine whether an external trap is recorded (see External Traps); sctrctl.LCOFIFRZ and sctrctl.BPFRZ determine whether CTR becomes frozen (see Freeze) For all other xctrctl fields, the value in vsctrctl is used. Consider an exception that traps from VU-mode to HS-mode, with vsctrctl.U=1 and sctrctl.S=1. Because both the source mode and target mode are enabled for recording, whether the trap is recorded then depends on the CTR configuration (e.g., the transfer type filter bits) in vsctrctl, not in sctrctl. External traps are traps from a privilege mode enabled for CTR recording to a privilege mode that is not enabled for CTR recording. By default external traps are not recorded, but privileged software running in the target mode of the trap can opt-in to allowing CTR to record external traps into that mode. The xctrctl.xTE bits allow M-mode, S-mode, and VS-mode to opt-in separately. External trap recording depends not only on the target mode, but on any intervening modes, which are modes that are more privileged than the source mode but less privileged than the target mode. Not only must the external trap enable bit for the target mode be set, but the external trap enable bit(s) for any intervening modes must also be set. See the table below for details. Requiring intervening modes to be enabled for external traps simplifies software management of CTR. Consider a scenario where S-mode software is configuring CTR for U-mode contexts A and B, such that external traps (to any mode) are enabled for A but not for B. When switching between the two contexts, S-mode can simply toggle sctrctl.STE, rather than requiring a trap to M-mode to additionally toggle mctrctl.MTE. This method does not provide the flexibility to record external traps to a more privileged mode but not to all intervening mode(s). Because it is expected that profiling tools generally wish to observe all external traps or none, this is not considered a meaningful limitation. Table 7. External Trap Enable Requirements Source Mode Target Mode External Trap Enable(s) Required U-mode S-mode sctrctl.STE M-mode mctrctl.MTE, sctrctl.STE S-mode M-mode mctrctl.MTE VU-mode VS-mode vsctrctl.STE HS-mode sctrctl.STE, vsctrctl.STE M-mode mctrctl.MTE, sctrctl.STE, vsctrctl.STE VS-mode HS-mode sctrctl.STE M-mode mctrctl.MTE, sctrctl.STE In records for external traps, the ctrtarget.PC is 0. No mechanism exists for recording external trap returns, because the external trap record includes all relevant information, and gives the trap handler (e.g., an emulator) the opportunity to modify the record. Note that external trap recording does not depend on EXCINH/INTRINH. Thus, when external traps are enabled, both external interrupts and external exceptions are recorded. STE allows recording of traps from U-mode to S-mode as well as from VS/VU-mode to HS-mode. The hypervisor can flip sctrctl.STE before entering a guest if it wants different behavior for U-to-S vs VS/VU-to-HS. If external trap recording is implemented, mctrctl.MTE and sctrctl.STE must be implemented, while vsctrctl.STE must be implemented if the H extension is implemented. Default CTR behavior, when all transfer type filter bits (xctrctl[47:32]) are unimplemented or 0, is to record all control transfers within enabled privileged modes. By setting transfer type filter bits, software can opt out of recording select transfer types, or opt into recording non-default operations. All transfer type filter bits are optional. Because not-taken branches are not recorded by default, the polarity of the associated enable bit (NTBREN) is the opposite of other bits associated with transfer type filtering (TKBRINH, RETINH, etc). Non-default operations require opt-in rather than opt-out. The transfer type filter bits leverage the type definitions specified in the RISC-V Efficient Trace Spec v2.0 (Table 4.4 and Section 4.1.1). For completeness, the definitions are reproduced below. Here \"indirect\" is used interchangeably with \"uninferrable\", which is used in the trace spec. Both imply that the target of the jump is not encoded in the opcode. Table 8. Control Transfer Type Definitions Encoding Transfer Type Name 0 Not used by CTR 1 Exception 2 Interrupt 3 Trap return 4 Not-taken branch 5 Taken branch 6 reserved 7 reserved 8 Indirect call 9 Direct call 10 Indirect jump (without linkage) 11 Direct jump (without linkage) 12 Co-routine swap 13 Function return 14 Other indirect jump (with linkage) 15 Other direct jump (with linkage) Encodings 8 through 15 refer to various encodings of jump instructions. The types are distinguished as described below. Table 9. Control Transfer Type Definitions Transfer Type Name Associated Opcodes Indirect call JALR x1, rs where rs != x5 JALR x5, rs where rs != x1 C.JALR rs1 where rs1 != x5 Direct call JAL x1 JAL x5 C.JAL CM.JALT index Indirect jump (without linkage) JALR x0, rs where rs != (x1 or x5) C.JR rs1 where rs1 != (x1 or x5) Direct jump (without linkage) JAL x0 C.J CM.JT index Co-routine swap JALR x1, x5 JALR x5, x1 C.JALR x5 Function return JALR rd, rs where rs == (x1 or x5) and rd != (x1 or x5) C.JR rs1 where rs1 == (x1 or x5) CM.POPRET(Z) Other indirect jump (with linkage) JALR rd, rs where rs != (x1 or x5) and rd != (x0, x1, or x5) Other direct jump (with linkage) JAL rd where rd != (x0, x1, or x5) If implementation of any transfer type filter bit results in reduced software performance, perhaps due to additional retirement restrictions, it is strongly recommended that this reduced performance apply only when the bit is set. Alternatively, support for the bit may be omitted. Maintaining software performance for the default CTR configuration, when all transfer type bits are cleared, is recommended. The ctrdata register may optionally include a count of CPU cycles elapsed since the prior CTR record. The elapsed cycle count value is represented by the CC field, which has a 12-bit mantissa component (Cycle Count Mantissa, or CCM) and a 4-bit exponent component (Cycle Count Exponent, or CCE). The elapsed cycle counter (CtrCycleCounter) increments at the same rate as the mcycle counter. Only cycles while CTR is active are counted, where active implies that the current privilege mode is enabled for recording and CTR is not frozen. The CC field is encoded such that CCE holds 0 if the CtrCycleCounter value is less than 4096, otherwise it holds the index of the most significant one bit in the CtrCycleCounter value, minus 11. CCM holds CtrCycleCounter bits CCE+10:CCE-1. The elapsed cycle count can then be calculated by software using the following formula: if (CCE==0): return CCM else: return (212 + CCM) << CCE-1 endif The CtrCycleCounter is reset on writes to xctrctl, and on execution of SCTRCLR, to ensure that any accumulated cycle counts do not persist across a context switch. An implementation that supports cycle counting must implement CCV and all CCM bits, but may implement 0..4 exponent bits in CCE. Unimplemented CCE bits are read-only 0. For implementations that support transfer type filtering, it is recommended to implement at least 3 exponent bits. This allows capturing the full latency of most functions, when recording only calls and returns. The size of the CtrCycleCounter required to support each CCE width is given in the table below. Table 10. Cycle Counter Size Options CCE bits CtrCycleCounter bits Max elapsed cycle value 0 12 4095 1 13 8191 2 15 32764 3 19 524224 4 27 134201344 When CCE>1, the granularity of the reported cycle count is reduced. For example, when CCE=3, the bottom 2 bits of the cycle counter are not reported, and thus the reported value increments only every 4 cycles. As a result, the reported value represents an undercount of elapsed cycles for most cases (when the unreported bits are non-zero). On average, the undercount will be (2CCE-1-1)/2. Software can reduce the average undercount to 0 by adding (2CCE-1-1)/2 to each computed cycle count value when CCE>1. Though this compressed method of representation results in some imprecision for larger cycle count values, it produces meaningful area savings, reducing storage per entry from 27 bits to 16. The CC value saturates when all implemented bits in CCM and CCE are 1. The CC value is valid only when the Cycle Count Valid (CCV) bit is set. If CCV=0, the CC value might not hold the correct count of elapsed active cycles since the last recorded transfer. The next record will have CCV=0 after a write to xctrctl, or execution of SCTRCLR, since CtrCycleCounter is reset. CCV should additionally be cleared after any other implementation-specific scenarios where active cycles might not be counted in CtrCycleCounter. When the optional xctrctl.RASEMU bit is implemented and set to 1, transfer recording behavior is altered to emulate the behavior of a return-address stack (RAS). Indirect and direct calls are recorded as normal Function returns pop the most recent call, by decrementing the WRPTR then invalidating the WRPTR entry (by setting ctrsource.V=0). As a result, logical entry 0 is invalidated and moves to logical entry depth-1, while logical entries 1..depth-1 move to 0..depth-2. Co-routine swaps affect both a return and a call. Logical entry 0 is overwritten, and WRPTR is not modified. Other transfer types are inhibited Transfer type filtering bits (xctrctl[47:32]) and external trap enable bits (xctrctl.xTE) are ignored Profiling tools often collect call stacks along with each sample. Stack walking, however, is a complex and often slow process that may require recompilation (e.g., -fno-omit-frame-pointer) to work reliably. With RAS emulation, tools can ask CTR hardware to save call stacks even for unmodified code. CTR RAS emulation has limitations. The CTR buffer will contain only partial stacks in cases where the call stack depth was greater than the CTR depth, CTR recording was enabled at a lower point in the call stack than main(), or where the CTR buffer was cleared since main(). The CTR stack may be corrupted in cases where calls and returns are not symmetric, such as with stack unwinding (e.g., setjmp/longjmp, C++ exceptions), where stale call entries may be left on the CTR stack, or user stack switching, where calls from multiple stacks may be intermixed. As described in Cycle Counting, when CCV=1, the CC field provides the elapsed cycles since the prior CTR entry was recorded. This introduces implementation challenges when RASEMU=1 because, for each recorded call, there may have been several recorded calls (and returns which “popped” them) since the prior remaining call entry was recorded (see RAS (Return Address Stack) Emulation Mode). The implication is that returns that pop a call entry not only do not reset the cycle counter, but instead add the CC field from the popped entry to the counter. For simplicity, an implementation may opt to record CCV=0 for all calls, or those whose parent call was popped, when RASEMU=1. When sctrstatus.FROZEN=1, transfer recording is inhibited. This bit can be set by hardware, as described below, or by software. When sctrctl.LCOFIFRZ=1 and a local-counter-overflow interrupt (LCOFI) traps (as a result of an HPM counter overflow) to M-mode or to S-mode, sctrstatus.FROZEN is set by hardware. This inhibits CTR recording until software clears FROZEN. The LCOFI trap itself is not recorded. Freeze on LCOFI ensures that the execution path leading to the sampled instruction (xepc) is preserved, and that the local-counter-overflow interrupt (LCOFI) and associated Interrupt Service Routine (ISR) do not displace any recorded transfer history state. It is the responsibility of the ISR to clear FROZEN before xRET, if continued control transfer recording is desired. LCOFI refers only to architectural traps directly caused by a local counter overflow. If a local-counter-overflow interrupt is recognized without a trap, FROZEN is not automatically set. For instance, no freeze occurs if the LCOFI is pended while interrupts are masked, and software recognizes the LCOFI (perhaps by reading stopi or sip) and clears sip.LCOFIP before the trap is raised. As a result, some or all CTR history may be overwritten while handling the LCOFI. Such cases are expected to be very rare; for most usages (e.g., application profiling) privilege mode filtering is sufficient to ensure that CTR updates are inhibited while interrupts are handled in a more privileged mode. Similarly, on a breakpoint exception that traps to M-mode or S-mode with sctrctl.BPFRZ=1, FROZEN is set by hardware. The breakpoint exception itself is not recorded. Breakpoint exception refers to synchronous exceptions with a cause value of Breakpoint (3), regardless of source (ebreak, c.ebreak, Sdtrig); it does not include entry into Debug Mode, even in cores where this is implemented as an exception. If the H extension is implemented, freeze behavior for LCOFIs and breakpoint exceptions that trap to VS-mode is determined by the LCOFIFRZ and BPFRZ values, respectively, in vsctrctl. This includes virtual LCOFIs pended by a hypervisor. When a guest uses the SBI Supervisor Software Events (SSE) extension, the LCOFI will trap to HS-mode, which will then invoke a registered VS-mode LCOFI handler routine. If vsctrctl.LCOFIFRZ=1, the HS-mode handler will need to emulate the freeze by setting sctrstatus.FROZEN=1 before invoking the registered handler routine. Any custom CTR extension must be associated with a non-zero value within the designated custom bits in xctrctl. When the custom bits hold a non-zero value that enables a custom extension, the extension may alter standard CTR behavior, and may define new custom status fields within sctrstatus or the CTR Entry Registers. All custom status fields, and standard status fields whose behavior is altered by the custom extension, must revert to standard behavior when the custom bits hold zero. This includes read-only 0 behavior for any bits undefined by any implemented standard extensions.","title":"\"Smctr\" Control Transfer Records Extension, Version 1.0","component":"isa","version":"v20250508","name":"smctr","url":"/isa/priv/smctr.html","titles":[{"text":"CSRs","hash":"csrs","id":1},{"text":"Machine Control Transfer Records Control Register (mctrctl)","hash":"machine-control-transfer-records-control-register-mctrctl","id":2},{"text":"Supervisor Control Transfer Records Control Register (sctrctl)","hash":"supervisor-control-transfer-records-control-register-sctrctl","id":3},{"text":"Virtual Supervisor Control Transfer Records Control Register (vsctrctl)","hash":"virtual-supervisor-control-transfer-records-control-register-vsctrctl","id":4},{"text":"Supervisor Control Transfer Records Depth Register (sctrdepth)","hash":"supervisor-control-transfer-records-depth-register-sctrdepth","id":5},{"text":"Supervisor Control Transfer Records Status Register (sctrstatus)","hash":"supervisor-control-transfer-records-status-register-sctrstatus","id":6},{"text":"Entry Registers","hash":"entry-registers","id":7},{"text":"Control Transfer Record Source Register (ctrsource)","hash":"control-transfer-record-source-register-ctrsource","id":8},{"text":"Control Transfer Record Target Register (ctrtarget)","hash":"control-transfer-record-target-register-ctrtarget","id":9},{"text":"Control Transfer Record Metadata Register (ctrdata)","hash":"control-transfer-record-metadata-register-ctrdata","id":10},{"text":"Instructions","hash":"instructions","id":11},{"text":"Supervisor CTR Clear Instruction","hash":"supervisor-ctr-clear-instruction","id":12},{"text":"State Enable Access Control","hash":"state-enable-access-control","id":13},{"text":"Behavior","hash":"behavior","id":14},{"text":"Privilege Mode Transitions","hash":"privilege-mode-transitions","id":15},{"text":"Virtualization Mode Transitions","hash":"virtualization-mode-transitions","id":16},{"text":"External Traps","hash":"external-traps","id":17},{"text":"Transfer Type Filtering","hash":"transfer-type-filtering","id":18},{"text":"Cycle Counting","hash":"cycle-counting","id":19},{"text":"RAS (Return Address Stack) Emulation Mode","hash":"ras-return-address-stack-emulation-mode","id":20},{"text":"Freeze","hash":"freeze","id":21},{"text":"Custom Extensions","hash":"custom-extensions","id":22}]},"20":{"id":20,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smdbltrp\" Double Trap Extension, Version 1.0 The Smdbltrp extension addresses a double trap (See [machine-double-trap]) in M-mode. When the Smrnmi extension ([rnmi]) is implemented, it enables invocation of the RNMI handler on a double trap in M-mode to handle the critical error. If the Smrnmi extension is not implemented or if a double trap occurs during the RNMI handler’s execution, this extension helps transition the hart to a critical error state and enables signaling the critical error to the platform. To improve error diagnosis and resolution, this extension supports debugging harts in a critical error state. The extension introduces a mechanism to enter Debug Mode instead of asserting a critical-error signal to the platform when the hart is in a critical error state. See [85] for details. See [machine-double-trap] for the operational details.","title":"\"Smdbltrp\" Double Trap Extension, Version 1.0","component":"isa","version":"v20250508","name":"smdbltrp","url":"/isa/priv/smdbltrp.html","titles":[]},"21":{"id":21,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smepmp\" Extension for PMP Enhancements, Version 1.0 Being able to access the memory of a process running at a high privileged execution mode, such as the Supervisor or Machine mode, from a lower privileged mode such as the User mode, introduces an obvious attack vector since it allows for an attacker to perform privilege escalation, and tamper with the code and/or data of that process. A less obvious attack vector exists when the reverse happens, in which case an attacker instead of tampering with code and/or data that belong to a high-privileged process, can tamper with the memory of an unprivileged / less-privileged process and trick the high-privileged process to use or execute it. To prevent this attack vector, two mechanisms known as Supervisor Memory Access Prevention (SMAP) and Supervisor Memory Execution Prevention (SMEP) were introduced in recent systems. The first one prevents the OS from accessing the memory of an unprivileged process unless a specific code path is followed, and the second one prevents the OS from executing the memory of an unprivileged process at all times. RISC-V already includes support for SMAP, through the sstatus.SUM bit, and for SMEP by always denying execution of virtual memory pages marked with the U bit, with Supervisor mode (OS) privileges, as mandated on the Privilege Spec. Terms: PMP Entry: A pair of pmpcfg[i] / pmpaddr[i] registers. PMP Rule: The contents of a pmpcfg register and its associated pmpaddr register(s), that encode a valid protected physical memory region, where pmpcfg[i].A != OFF, and if pmpcfg[i].A == TOR, pmpaddr[i-1] < pmpaddr[i]. Ignored: Any permissions set by a matching PMP rule are ignored, and all accesses to the requested address range are allowed. Enforced: Only access types configured in the PMP rule matching the requested address range are allowed; failures will cause an access-fault exception. Denied: Any permissions set by a matching PMP rule are ignored, and no accesses to the requested address range are allowed.; failures will cause an access-fault exception. Locked: A PMP rule/entry where the pmpcfg.L bit is set. PMP reset: A reset process where all PMP settings of the hart, including locked rules/settings, are re-initialized to a set of safe defaults, before releasing the hart (back) to the firmware / OS / application. However, there are no such mechanisms available on Machine mode in the current (v1.11) Privileged Spec. It is not possible for a PMP rule to be enforced only on non-Machine modes and denied on Machine mode, to only allow access to a memory region by less-privileged modes. It is only possible to have a locked rule that will be enforced on all modes, or a rule that will be enforced on non-Machine modes and be ignored by Machine mode. So for any physical memory region which is not protected with a Locked rule, Machine mode has unlimited access, including the ability to execute it. Without being able to protect less-privileged modes from Machine mode, it is not possible to prevent the mentioned attack vector. This becomes even more important for RISC-V than on other architectures, since implementations are allowed where a hart only has Machine and User modes available, so the whole OS will run on Machine mode instead of the non-existent Supervisor mode. In such implementations the attack surface is greatly increased, and the same kind of attacks performed on Supervisor mode and mitigated through SMAP/SMEP, can be performed on Machine mode without any available mitigations. Even on implementations with Supervisor mode present attacks are still possible against the Firmware and/or the Secure Monitor running on Machine mode. Machine Security Configuration (mseccfg) is a new RW Machine mode CSR, used for configuring various security mechanisms present on the hart, and only accessible to Machine mode. It is 64 bits wide, and is at address 0x747 on RV64 and 0x747 (low 32bits), 0x757 (high 32bits) on RV32. All mseccfg fields defined on this proposal are WARL, and the remaining bits are reserved for future standard use and should always read zero. The reset value of mseccfg is implementation-specific, otherwise if backwards compatibility is a requirement it should reset to zero on hard reset. On mseccfg we introduce a field on bit 2 called Rule Locking Bypass (mseccfg.RLB) with the following functionality: When mseccfg.RLB is 1 locked PMP rules may be removed/modified and locked PMP entries may be edited. When mseccfg.RLB is 0 and pmpcfg.L is 1 in any rule or entry (including disabled entries), then mseccfg.RLB remains 0 and any further modifications to mseccfg.RLB are ignored until a PMP reset. Note that this feature is intended to be used as a debug mechanism, or as a temporary workaround during the boot process for simplifying software, and optimizing the allocation of memory and PMP rules. Using this functionality under normal operation, after the boot process is completed, should be avoided since it weakens the protection of M-mode-only rules. Vendors who don’t need this functionality may hardwire this field to 0. On mseccfg we introduce a field in bit 1 called Machine-Mode Allowlist Policy (mseccfg.MMWP). This is a sticky bit, meaning that once set it cannot be unset until a PMP reset. When set it changes the default PMP policy for M-mode when accessing memory regions that don’t have a matching PMP rule, to denied instead of ignored. On mseccfg we introduce a field in bit 0 called Machine Mode Lockdown (mseccfg.MML). This is a sticky bit, meaning that once set it cannot be unset until a PMP reset. When mseccfg.MML is set the system’s behavior changes in the following way: The meaning of pmpcfg.L changes: Instead of marking a rule as locked and enforced in all modes, it now marks a rule as M-mode-only when set and S/U-mode-only when unset. The formerly reserved encoding of pmpcfg.RW=01, and the encoding pmpcfg.LRWX=1111, now encode a Shared-Region. An M-mode-only rule is enforced on Machine mode and denied in Supervisor or User mode. It also remains locked so that any further modifications to its associated configuration or address registers are ignored until a PMP reset, unless mseccfg.RLB is set. An S/U-mode-only rule is enforced on Supervisor and User modes and denied on Machine mode. A Shared-Region rule is enforced on all modes, with restrictions depending on the pmpcfg.L and pmpcfg.X bits: A Shared-Region rule where pmpcfg.L is not set can be used for sharing data between M-mode and S/U-mode, so is not executable. M-mode has read/write access to that region, and S/U-mode has read access if pmpcfg.X is not set, or read/write access if pmpcfg.X is set. A Shared-Region rule where pmpcfg.L is set can be used for sharing code between M-mode and S/U-mode, so is not writable. Both M-mode and S/U-mode have execute access on the region, and M-mode also has read access if pmpcfg.X is set. The rule remains locked so that any further modifications to its associated configuration or address registers are ignored until a PMP reset, unless mseccfg.RLB is set. The encoding pmpcfg.LRWX=1111 can be used for sharing data between M-mode and S/U mode, where both modes only have read-only access to the region. The rule remains locked so that any further modifications to its associated configuration or address registers are ignored until a PMP reset, unless mseccfg.RLB is set. Adding a rule with executable privileges that either is M-mode-only or a locked Shared-Region is not possible and such pmpcfg writes are ignored, leaving pmpcfg unchanged. This restriction can be temporarily lifted by setting mseccfg.RLB e.g. during the boot process. Executing code with Machine mode privileges is only possible from memory regions with a matching M-mode-only rule or a locked Shared-Region rule with executable privileges. Executing code from a region without a matching rule or with a matching S/U-mode-only rule is denied. If mseccfg.MML is not set, the combination of pmpcfg.RW=01 remains reserved for future standard use. Bits on pmpcfg register Result L R W X M Mode S/U Mode 0 0 0 0 Inaccessible region (Access Exception) 0 0 0 1 Access Exception Execute-only region 0 0 1 0 Shared data region: Read/write on M mode, read-only on S/U mode 0 0 1 1 Shared data region: Read/write for both M and S/U mode 0 1 0 0 Access Exception Read-only region 0 1 0 1 Access Exception Read/Execute region 0 1 1 0 Access Exception Read/Write region 0 1 1 1 Access Exception Read/Write/Execute region 1 0 0 0 Locked inaccessible region* (Access Exception) 1 0 0 1 Locked Execute-only region* Access Exception 1 0 1 0 Locked Shared code region: Execute only on both M and S/U mode.* 1 0 1 1 Locked Shared code region: Execute only on S/U mode, read/execute on M mode.* 1 1 0 0 Locked Read-only region* Access Exception 1 1 0 1 Locked Read/Execute region* Access Exception 1 1 1 0 Locked Read/Write region* Access Exception 1 1 1 1 Locked Shared data region: Read only on both M and S/U mode.* : *Locked rules cannot be removed or modified until a PMP reset, unless mseccfg.RLB is set. Since all fields defined on mseccfg as part of this proposal are locked when set (MMWP/MML) or locked when cleared (RLB), software can’t poll them for determining the presence of Smepmp. It is expected that BootROM will set mseccfg.MMWP and/or mseccfg.MML during early boot, before jumping to the firmware, so that the firmware will be able to determine the presence of Smepmp by reading mseccfg and checking the state of mseccfg.MMWP and mseccfg.MML. Since a CSR for security and / or global PMP behavior settings is not available with the current spec, we needed to define a new one. This new CSR will allow us to add further security configuration options in the future and also allow developers to verify the existence of the new mechanisms defined on this proposal. There are use cases where developers want to enforce PMP rules in M-mode during the boot process, that are also able to modify, merge, and / or remove later on. Since a rule that is enforced in M-mode also needs to be locked (or else badly written or malicious M-mode software can remove it at any time), the only way for developers to approach this is to keep adding PMP rules to the chain and rely on rule priority. This is a waste of PMP rules and since it’s only needed during boot, mseccfg.RLB is a simple workaround that can be used temporarily and then disabled and locked down. Also when mseccfg.MML is set, according to 4b it’s not possible to add a Shared-Region rule with executable privileges. So RLB can be set temporarily during the boot process to register such regions. Note that it’s still possible to register executable Shared-Region rules using initial register settings (that may include mseccfg.MML being set and the rule being set on PMP registers) on PMP reset, without using RLB. Be aware that RLB introduces a security vulnerability if left set after the boot process is over and in general it should be used with caution, even when used temporarily. Having editable PMP rules in M-mode gives a false sense of security since it only takes a few malicious instructions to lift any PMP restrictions this way. It doesn’t make sense to have a security control in place and leave it unprotected. Rule Locking Bypass is only meant as a way to optimize the allocation of PMP rules, catch errors during debugging, and allow the bootrom/firmware to register executable Shared-Region rules. If developers / vendors have no use for such functionality, they should never set mseccfg.RLB and if possible hard-wire it to 0. In any case RLB should be disabled and locked as soon as possible. If mseccfg.RLB is not used and left unset, it will be locked as soon as a PMP rule/entry with the pmpcfg.L bit set is configured. Since PMP rules with a higher priority override rules with a lower priority, locked rules must precede non-locked rules. With the current spec M-mode can access any memory region unless restricted by a PMP rule with the pmpcfg.L bit set. There are cases where this approach is overly permissive, and although it’s possible to restrict M-mode by adding PMP rules during the boot process, this can also be seen as a waste of PMP rules. Having the option to block anything by default, and use PMP as an allowlist for M-mode is considered a safer approach. This functionality may be used during the boot process or upon PMP reset, using initial register settings. The current dual meaning of the pmpcfg.L bit that marks a rule as Locked and enforced on all modes is neither flexible nor clean. With the introduction of Machine Mode Lock-down the pmpcfg.L bit distinguishes between rules that are enforced only in M-mode (M-mode-only) or only in S/U-modes (S/U-mode-only). The rule locking becomes part of the definition of an M-mode-only rule, since when a rule is added in M mode, if not locked, can be modified or removed in a few instructions. On the other hand, S/U modes can’t modify PMP rules anyway so locking them doesn’t make sense. This separation between M-mode-only and S/U-mode-only rules also allows us to distinguish which regions are to be used by processes in Machine mode (pmpcfg.L == 1) and which by Supervisor or User mode processes (pmpcfg.L == 0), in the same way the U bit on the Virtual Memory’s PTEs marks which Virtual Memory pages are to be used by User mode applications (U=1) and which by the Supervisor / OS (U=0). With this distinction in place we are able to implement memory access and execution prevention in M-mode for any physical memory region that is not M-mode-only. An attacker that manages to tamper with a memory region used by S/U mode, even after successfully tricking a process running in M-mode to use or execute that region, will fail to perform a successful attack since that region will be S/U-mode-only hence any access when in M-mode will trigger an access exception. In order to support zero-copy transfers between M-mode and S/U-mode we need to either allow shared memory regions, or introduce a mechanism similar to the sstatus.SUM bit to temporary allow the high-privileged mode (in this case M-mode) to be able to perform loads and stores on the region of a less-privileged process (in this case S/U-mode). In our case after discussion within the group it seemed a better idea to follow the first approach and have this functionality encoded on a per-rule basis to avoid the risk of leaving a temporary, global bypass active when exiting M-mode, hence rendering memory access prevention useless. Although it’s possible to use mstatus.MPRV in M-mode to read/write data on an S/U-mode-only region using general purpose registers for copying, this will happen with S/U-mode permissions, honoring any MMU restrictions put in place by S-mode. Of course it’s still possible for M-mode to tamper with the page tables and / or add S/U-mode-only rules and bypass the protections put in place by S-mode but if an attacker has managed to compromise M-mode to such extent, no security guarantees are possible in any way. Also note that the threat model we present here assumes buggy software in M-mode, not compromised software. We considered disabling mstatus.MPRV but it seemed too much and out of scope. Shared-region rules can be used both for zero-copy data transfers and for sharing code segments. The latter may be used for example to allow S/U-mode to execute code by the vendor, that makes use of some vendor-specific ISA extension, without having to go through the firmware with an ecall. This is similar to the vDSO approach followed on Linux, that allows userspace code to execute kernel code without having to perform a system call. To make sure that shared data regions can’t be executed and shared code regions can’t be modified, the encoding changes the meaning of the pmpcfg.X bit. In case of shared data regions, with the exception of the pmpcfg.LRWX=1111 encoding, the pmpcfg.X bit marks the capability of S/U-mode to write to that region, so it’s not possible to encode an executable shared data region. In case of shared code regions, the pmpcfg.X bit marks the capability of M-mode to read from that region, and since pmpcfg.RW=01 is used for encoding the shared region, it’s not possible to encode a shared writable code region. For adding Shared-region rules with executable privileges to share code segments between M-mode and S/U-mode, mseccfg.RLB needs to be implemented, or else such rules can only be added together with mseccfg.MML being set on PMP Reset. That’s because the reserved encoding pmpcfg.RW=01 being used for Shared-region rules is only defined when mseccfg.MML is set, and 4b prevents the addition of rules with executable privileges on M-mode after mseccfg.MML is set unless mseccfg.RLB is also set. Using the pmpcfg.LRWX=1111 encoding for a locked shared read-only data region was decided later on, its initial meaning was an M-mode-only read/write/execute region. The reason for that change was that the already defined shared data regions were not locked, so r/w access to M-mode couldn’t be restricted. In the same way we have execute-only shared code regions for both modes, it was decided to also be able to allow a least-privileged shared data region for both modes. This approach allows for example to share the .text section of an ELF with a shared code region and the .rodata section with a locked shared data region, without allowing M-mode to modify .rodata. We also decided that having a locked read/write/execute region in M-mode doesn’t make much sense and could be dangerous, since M-mode won’t be able to add further restrictions there (as in the case of S/U-mode where S-mode can further limit access to an pmpcfg.LWRX=0111 region through the MMU), leaving the possibility of modifying an executable region in M-mode open. For encoding Shared-region rules initially we used one of the two reserved bits on pmpcfg (bit 5) but in order to avoid allocating an extra bit, since those bits are a very limited resource, it was decided to use the reserved R=0,W=1 combination. The idea with this restriction is that after the Firmware or the OS running in M-mode is initialized and mseccfg.MML is set, no new code regions are expected to be added since nothing else is expected to run in M-mode (everything else will run in S/U mode). Since we want to limit the attack surface of the system as much as possible, it makes sense to disallow any new code regions which may include malicious code, to be added/executed in M-mode. In case mseccfg.MMWP is not set, M-mode can still access and execute any region not covered by a PMP rule. Since we try to prevent M-mode from executing malicious code and since an attacker may manage to place code on some region not covered by PMP (e.g. a directly-addressable flash memory), we need to ensure that M-mode can only execute the code segments initialized during firmware / OS initialization. We are only using the encoding pmpcfg.RW=01 together with mseccfg.MML, if mseccfg.MML is not set the encoding remains usable for future use.","title":"\"Smepmp\" Extension for PMP Enhancements for memory access and execution prevention in Machine mode, Version 1.0","component":"isa","version":"v20250508","name":"smepmp","url":"/isa/priv/smepmp.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Threat model","hash":"threat-model","id":2},{"text":"Proposal","hash":"proposal","id":3},{"text":"Truth table when mseccfg.MML is set","hash":"truth-table-when-mseccfg-mml-is-set","id":4},{"text":"Visual representation of the proposal","hash":"visual-representation-of-the-proposal","id":5},{"text":"Smepmp software discovery","hash":"smepmp-software-discovery","id":6},{"text":"Rationale","hash":"rationale","id":7}]},"22":{"id":22,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Smstateen/Ssstateen\" Extensions, Version 1.0 The implementation of optional RISC-V extensions has the potential to open covert channels between separate user threads, or between separate guest OSes running under a hypervisor. The problem occurs when an extension adds processor state — usually explicit registers, but possibly other forms of state — that the main OS or hypervisor is unaware of (and hence won’t context-switch) but that can be modified/written by one user thread or guest OS and perceived/examined/read by another. For example, the Advanced Interrupt Architecture (AIA) for RISC-V adds to a hart as many as ten supervisor-level CSRs (siselect, sireg, stopi, sseteipnum, sclreipnum, sseteienum, sclreienum, sclaimei, sieh, and siph) and provides also the option for hardware to be backward-compatible with older, pre-AIA software. Because an older hypervisor that is oblivious to the AIA will not know to swap any of the AIA’s new CSRs on context switches, the registers may then be used as a covert channel between multiple guest OSes that run atop this hypervisor. Although traditional practices might consider such a communication channel harmless, the intense focus on security today argues that a means be offered to plug such channels. The f registers of the RISC-V floating-point extensions and the v registers of the vector extension would similarly be potential covert channels between user threads, except for the existence of the FS and VS fields in the sstatus register. Even if an OS is unaware of, say, the vector extension and its v registers, access to those registers is blocked when the VS field is initialized to zero, either at machine level or by the OS itself initializing sstatus. Obviously, one way to prevent the use of new user-level CSRs as covert channels would be to add to mstatus or sstatus an \"XS\" field for each relevant extension, paralleling the V extension’s VS field. However, this is not considered a general solution to the problem due to the number of potential future extensions that may add small amounts of state. Even with a 64-bit sstatus (necessitating adding sstatush for RV32), it is not certain there are enough remaining bits in sstatus to accommodate all future user-level extensions. In any event, there is no need to strain sstatus (and add sstatush) for this purpose. The \"enable\" flags that are needed to plug covert channels are not generally expected to require swapping on context switches of user threads, making them a less-than-compelling candidate for inclusion in sstatus. Hence, a new place is provided for them instead. The Smstateen and Ssstateen extensions collectively specify machine-mode and supervisor-mode features. The Smstateen extension specification comprises the mstateen*, sstateen*, and hstateen* CSRs and their functionality. The Ssstateen extension specification comprises only the sstateen* and hstateen* CSRs and their functionality. For RV64 harts, this extension adds four new 64-bit CSRs at machine level: mstateen0 (Machine State Enable 0), mstateen1, mstateen2, and mstateen3. If supervisor mode is implemented, another four CSRs are defined at supervisor level: sstateen0, sstateen1, sstateen2, and sstateen3. And if the hypervisor extension is implemented, another set of CSRs is added: hstateen0, hstateen1, hstateen2, and hstateen3. For RV32, the registers listed above are 32-bit, and for the machine-level and hypervisor CSRs there is a corresponding set of high-half CSRs for the upper 32 bits of each register: mstateen0h, mstateen1h, mstateen2h, mstateen3h, hstateen0h, hstateen1h, hstateen2h, and hstateen3h. For the supervisor-level sstateen registers, high-half CSRs are not added at this time because it is expected the upper 32 bits of these registers will always be zeros, as explained later below. Each bit of a stateen CSR controls less-privileged access to an extension’s state, for an extension that was not deemed \"worthy\" of a full XS field in sstatus like the FS and VS fields for the F and V extensions. The number of registers provided at each level is four because it is believed that 4 * 64 = 256 bits for machine and hypervisor levels, and 4 * 32 = 128 bits for supervisor level, will be adequate for many years to come, perhaps for as long as the RISC-V ISA is in use. The exact number four is an attempted compromise between providing too few bits on the one hand and going overboard with CSRs that will never be used on the other. A possible future doubling of the number of stateen CSRs is covered later. The stateen registers at each level control access to state at all less-privileged levels, but not at its own level. This is analogous to how the existing counteren CSRs control access to performance counter registers. Just as with the counteren CSRs, when a stateen CSR prevents access to state by less-privileged levels, an attempt in one of those privilege modes to execute an instruction that would read or write the protected state raises an illegal instruction exception, or, if executing in VS or VU mode and the circumstances for a virtual-instruction exception apply, raises a virtual-instruction exception instead of an illegal-instruction exception. When this extension is not implemented, all state added by an extension is accessible as defined by that extension. When a stateen CSR prevents access to state for a privilege mode, attempting to execute in that privilege mode an instruction that implicitly updates the state without reading it may or may not raise an illegal-instruction or virtual-instruction exception. Such cases must be disambiguated by being explicitly specified one way or the other. In some cases, the bits of the stateen CSRs will have a dual purpose as enables for the ISA extensions that introduce the controlled state. Each bit of a supervisor-level sstateen CSR controls user-level access (from U-mode or VU-mode) to an extension’s state. The intention is to allocate the bits of sstateen CSRs starting at the least-significant end, bit 0, through to bit 31, and then on to the next-higher-numbered sstateen CSR. For every bit with a defined purpose in an sstateen CSR, the same bit is defined in the matching mstateen CSR to control access below machine level to the same state. The upper 32 bits of an mstateen CSR (or for RV32, the corresponding high-half CSR) control access to state that is inherently inaccessible to user level, so no corresponding enable bits in the supervisor-level sstateen CSR are applicable. The intention is to allocate bits for this purpose starting at the most-significant end, bit 63, through to bit 32, and then on to the next-higher mstateen CSR. If the rate that bits are being allocated from the least-significant end for sstateen CSRs is sufficiently low, allocation from the most-significant end of mstateen CSRs may be allowed to encroach on the lower 32 bits before jumping to the next-higher mstateen CSR. In that case, the bit positions of \"encroaching\" bits will remain forever read-only zeros in the matching sstateen CSRs. With the hypervisor extension, the hstateen CSRs have identical encodings to the mstateen CSRs, except controlling accesses for a virtual machine (from VS and VU modes). Each standard-defined bit of a stateen CSR is WARL and may be read-only zero or one, subject to the following conditions. Bits in any stateen CSR that are defined to control state that a hart doesn’t implement are read-only zeros for that hart. Likewise, all reserved bits not yet given a defined meaning are also read-only zeros. For every bit in an mstateen CSR that is zero (whether read-only zero or set to zero), the same bit appears as read-only zero in the matching hstateen and sstateen CSRs. For every bit in an hstateen CSR that is zero (whether read-only zero or set to zero), the same bit appears as read-only zero in sstateen when accessed in VS-mode. A bit in a supervisor-level sstateen CSR cannot be read-only one unless the same bit is read-only one in the matching mstateen CSR and, if it exists, in the matching hstateen CSR. A bit in an hstateen CSR cannot be read-only one unless the same bit is read-only one in the matching mstateen CSR. On reset, all writable mstateen bits are initialized by the hardware to zeros. If machine-level software changes these values, it is responsible for initializing the corresponding writable bits of the hstateen and sstateen CSRs to zeros too. Software at each privilege level should set its respective stateen CSRs to indicate the state it is prepared to allow less-privileged software to access. For OSes and hypervisors, this usually means the state that the OS or hypervisor is prepared to swap on a context switch, or to manage in some other way. For each mstateen CSR, bit 63 is defined to control access to the matching sstateen and hstateen CSRs. That is, bit 63 of mstateen0 controls access to sstateen0 and hstateen0; bit 63 of mstateen1 controls access to sstateen1 and hstateen1; etc. Likewise, bit 63 of each hstateen correspondingly controls access to the matching sstateen CSR. A hypervisor may need this control over accesses to the sstateen CSRs if it ever must emulate for a virtual machine an extension that is supposed to be affected by a bit in an sstateen CSR. Even if such emulation is uncommon, it should not be excluded. Machine-level software needs identical control to be able to emulate the hypervisor extension. That is, machine level needs control over accesses to the supervisor-level sstateen CSRs in order to emulate the hstateen CSRs, which have such control. Bit 63 of each mstateen CSR may be read-only zero only if the hypervisor extension is not implemented and the matching supervisor-level sstateen CSR is all read-only zeros. In that case, machine-level software should emulate attempts to access the affected sstateen CSR from S-mode, ignoring writes and returning zero for reads. Bit 63 of each hstateen CSR is always writable (not read-only). Figure 1. Machine State Enable 0 Register (mstateen0) Figure 2. Hypervisor State Enable 0 Register (hstateen0) Figure 3. Supervisor State Enable 0 Register (sstateen0) The C bit controls access to any and all custom state. The C bit of these registers is not custom state itself; it is a standard field of a standard CSR, either mstateen0, hstateen0, or sstateen0. The requirements that non-standard extensions must meet to be conforming are not relaxed due solely to changes in the value of this bit. In particular, if software sets this bit but does not execute any custom instructions or access any custom state, the software must continue to execute as specified by all relevant RISC-V standards, or the hardware is not standard-conforming. The FCSR bit controls access to fcsr for the case when floating-point instructions operate on x registers instead of f registers as specified by the Zfinx and related extensions (Zdinx, etc.). Whenever misa.F = 1, FCSR bit of mstateen0 is read-only zero (and hence read-only zero in hstateen0 and sstateen0 too). For convenience, when the stateen CSRs are implemented and misa.F = 0, then if the FCSR bit of a controlling stateen0 CSR is zero, all floating-point instructions cause an illegal-instruction exception (or virtual-instruction exception, if relevant), as though they all access fcsr, regardless of whether they really do. The JVT bit controls access to the jvt CSR provided by the Zcmt extension. The SE0 bit in mstateen0 controls access to the hstateen0, hstateen0h, and the sstateen0 CSRs. The SE0 bit in hstateen0 controls access to the sstateen0 CSR. The ENVCFG bit in mstateen0 controls access to the henvcfg, henvcfgh, and the senvcfg CSRs. The ENVCFG bit in hstateen0 controls access to the senvcfg CSRs. The CSRIND bit in mstateen0 controls access to the siselect, sireg*, vsiselect, and the vsireg* CSRs provided by the Sscsrind extensions. The CSRIND bit in hstateen0 controls access to the siselect and the sireg*, (really vsiselect and vsireg*) CSRs provided by the Sscsrind extensions. The IMSIC bit in mstateen0 controls access to the IMSIC state, including CSRs stopei and vstopei, provided by the Ssaia extension. The IMSIC bit in hstateen0 controls access to the guest IMSIC state, including CSRs stopei (really vstopei), provided by the Ssaia extension. Setting the IMSIC bit in hstateen0 to zero prevents a virtual machine from accessing the hart’s IMSIC the same as setting hstatus.VGEIN = 0. The AIA bit in mstateen0 controls access to all state introduced by the Ssaia extension and not controlled by either the CSRIND or the IMSIC bits. The AIA bit in hstateen0 controls access to all state introduced by the Ssaia extension and not controlled by either the CSRIND or the IMSIC bits of hstateen0. The CONTEXT bit in mstateen0 controls access to the scontext and hcontext CSRs provided by the Sdtrig extension. The CONTEXT bit in hstateen0 controls access to the scontext CSR provided by the Sdtrig extension. The P1P13 bit in mstateen0 controls access to the hedelegh introduced by Privileged Specification Version 1.13. The SRMCFG bit in mstateen0 controls access to the srmcfg CSR introduced by the Ssqosid [ssqosid] extension. After the writable bits of the machine-level mstateen CSRs are initialized to zeros on reset, machine-level software can set bits in these registers to enable less-privileged access to the controlled state. This may be either because machine-level software knows how to swap the state or, more likely, because machine-level software isn’t swapping supervisor-level environments. (Recall that the main reason the mstateen CSRs must exist is so machine level can emulate the hypervisor extension. When machine level isn’t emulating the hypervisor extension, it is likely there will be no need to keep any implemented mstateen bits zero.) If machine level sets any writable mstateen bits to nonzero, it must initialize the matching hstateen CSRs, if they exist, by writing zeros to them. And if any mstateen bits that are set to one have matching bits in the sstateen CSRs, machine-level software must also initialize those sstateen CSRs by writing zeros to them. Ordinarily, machine-level software will want to set bit 63 of all mstateen CSRs, necessitating that it write zero to all hstateen CSRs. Software should ensure that all writable bits of sstateen CSRs are initialized to zeros when an OS at supervisor level is first entered. The OS can then set bits in these registers to enable user-level access to the controlled state, presumably because it knows how to context-swap the state. For the sstateen CSRs whose access by a guest OS is permitted by bit 63 of the corresponding hstateen CSRs, a hypervisor must include the sstateen CSRs in the context it swaps for a guest OS. When it starts a new guest OS, it must ensure the writable bits of those sstateen CSRs are initialized to zeros, and it must emulate accesses to any other sstateen CSRs. If software at any privilege level does not support multiple contexts for less-privilege levels, then it may choose to maximize less-privileged access to all state by writing a value of all ones to the stateen CSRs at its level (the mstateen CSRs for machine level, the sstateen CSRs for an OS, and the hstateen CSRs for a hypervisor), without knowing all the state to which it is granting access. This is justified because there is no risk of a covert channel between execution contexts at the less-privileged level when only one context exists at that level. This situation is expected to be common for machine level, and it might also arise, for example, for a type-1 hypervisor that hosts only a single guest virtual machine. If a need is anticipated, the set of stateen CSRs could in the future be doubled by adding these: 0x38C mstateen4, 0x39C mstateen4h 0x38D mstateen5, 0x39D mstateen5h 0x38E mstateen6, 0x39E mstateen6h 0x38F mstateen7, 0x39F mstateen7h 0x18C sstateen4 0x18D sstateen5 0x18E sstateen6 0x18F sstateen7 0x68C hstateen4, 0x69C hstateen4h 0x68D hstateen5, 0x69D hstateen5h 0x68E hstateen6, 0x69E hstateen6h 0x68F hstateen7, 0x69F hstateen7h These additional CSRs are not a definite part of the original proposal because it is unclear whether they will ever be needed, and it is believed the rate of consumption of bits in the first group, registers numbered 0-3, will be slow enough that any looming shortage will be perceptible many years in advance. At the moment, it is not known even how many years it may take to exhaust just mstateen0, sstateen0, and hstateen0.","title":"\"Smstateen/Ssstateen\" Extensions, Version 1.0","component":"isa","version":"v20250508","name":"smstateen","url":"/isa/priv/smstateen.html","titles":[{"text":"State Enable Extensions","hash":"state-enable-extensions","id":1},{"text":"State Enable 0 Registers","hash":"state-enable-0-registers","id":2},{"text":"Usage","hash":"usage","id":3}]},"23":{"id":23,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Sscofpmf\" Extension for Count Overflow and Mode-Based Filtering, Version 1.0 The current Privileged specification defines mhpmevent CSRs to select and control event counting by the associated hpmcounter CSRs, but provides no standardization of any fields within these CSRs. For at least Linux-class rich-OS systems it is desirable to standardize certain basic features that are broadly desired (and have come up over the past year plus on RISC-V lists, as well as have been the subject of past proposals). This enables there to be standard upstream software support that eliminates the need for implementations to provide their own custom software support. This extension serves to accomplish exactly this within the existing mhpmevent CSRs (and correspondingly avoids the unnecessary creation of whole new sets of CSRs - past just one new CSR). This extension sticks to addressing two basic well-understood needs that have been requested by various people. To make it easy to understand the deltas from the current Priv 1.11/1.12 specs, this is written as the actual exact changes to be made to existing paragraphs of Priv spec text (or additional paragraphs within the existing text). The extension name is \"Sscofpmf\" ('Ss' for Privileged arch and Supervisor-level extensions, and 'cofpmf' for Count OverFlow and Privilege Mode Filtering). Note that the new count overflow interrupt will be treated as a standard local interrupt that is assigned to bit 13 in the mip/mie/sip/sie registers. The following bits are added to mhpmevent: 63 62 61 60 59 58 57 56 OF MINH SINH UINH VSINH VUINH WPRI WPRI Field Description OF Overflow status and interrupt disable bit that is set when counter overflows MINH If set, then counting of events in M-mode is inhibited SINH If set, then counting of events in S/HS-mode is inhibited UINH If set, then counting of events in U-mode is inhibited VSINH If set, then counting of events in VS-mode is inhibited VUINH If set, then counting of events in VU-mode is inhibited WPRI Reserved WPRI Reserved For each xINH bit, if the associated privilege mode is not implemented, the bit is read-only zero. Each of the five xINH bits, when set, inhibit counting of events while in privilege mode x. All-zeroes for these bits results in counting of events in all modes. The OF bit is set when the corresponding hpmcounter overflows, and remains set until written by software. Since hpmcounter values are unsigned values, overflow is defined as unsigned overflow of the implemented counter bits. Note that there is no loss of information after an overflow since the counter wraps around and keeps counting while the sticky OF bit remains set. If supervisor mode is implemented, the 32-bit scountovf register contains read-only shadow copies of the OF bits in all 32 mhpmevent registers. If an hpmcounter overflows while the associated OF bit is zero, then a \"count overflow interrupt request\" is generated. If the OF bit is one, then no interrupt request is generated. Consequently the OF bit also functions as a count overflow interrupt disable for the associated hpmcounter. Count overflow never results from writes to the mhpmcountern or mhpmeventn registers, only from hardware increments of counter registers. This count-overflow-interrupt-request signal is treated as a standard local interrupt that corresponds to bit 13 in the mip/mie/sip/sie registers. The mip/sip LCOFIP and mie/sie LCOFIE bits are, respectively, the interrupt-pending and interrupt-enable bits for this interrupt. ('LCOFI' represents 'Local Count Overflow Interrupt'.) Generation of a count-overflow-interrupt request by an hpmcounter sets the associated OF bit. When an OF bit is set, it eventually, but not necessarily immediately, sets the LCOFIP bit in the mip/sip registers. The LCOFIP bit is cleared by software before servicing the count overflow interrupt resulting from one or more count overflows. The mideleg register controls the delegation of this interrupt to S-mode versus M-mode. There are not separate overflow status and overflow interrupt enable bits. In practice, enabling overflow interrupt generation (by clearing the OF bit) is done in conjunction with initializing the counter to a starting value. Once a counter has overflowed, it and the OF bit must be reinitialized before another overflow interrupt can be generated. Software can distinguish newly overflowed counters (yet to be serviced by an overflow interrupt handler) from overflowed counters that have already been serviced or that are configured to not generate an interrupt on overflow, by maintaining a bit mask reflecting which counters are active and due to eventually overflow. This extension adds the scountovf CSR, a 32-bit read-only register that contains shadow copies of the OF bits in the 29 mhpmevent CSRs (mhpmevent3 - mhpmevent31) - where scountovf bit X corresponds to mhpmeventX. This register enables supervisor-level overflow interrupt handler software to quickly and easily determine which counter(s) have overflowed (without needing to make an execution environment call or series of calls ultimately up to M-mode). Read access to bit X is subject to the same mcounteren (or mcounteren and hcounteren) CSRs that mediate access to the hpmcounter CSRs by S-mode (or VS-mode). In M-mode, scountovf bit X is always readable. In S/HS-mode, scountovf bit X is readable when mcounteren bit X is set, and otherwise reads as zero. Similarly, in VS mode, scountovf bit X is readable when mcounteren bit X and hcounteren bit X are both set, and otherwise reads as zero.","title":"\"Sscofpmf\" Extension for Count Overflow and Mode-Based Filtering, Version 1.0","component":"isa","version":"v20250508","name":"sscofpmf","url":"/isa/priv/sscofpmf.html","titles":[{"text":"Count Overflow Control","hash":"count-overflow-control","id":1},{"text":"Supervisor Count Overflow (scountovf) Register","hash":"supervisor-count-overflow-scountovf-register","id":2}]},"24":{"id":24,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Ssdbltrp\" Double Trap Extension, Version 1.0 The Ssdbltrp extension addresses a double trap (See [machine-double-trap]) privilege modes lower than M. It enables HS-mode to invoke a critical error handler in a virtual machine on a double trap in VS-mode. It also allows M-mode to invoke a critical error handler in the OS/Hypervisor on a double trap in S/HS-mode. The Ssdbltrp extension adds the menvcfg.DTE (See [sec:menvcfg]) and the sstatus.SDT fields (See [sstatus]). If the hypervisor extension is additionally implemented, then the extension adds the henvcfg.DTE (See [sec:henvcfg]) and the vsstatus.SDT fields (See [vsstatus]). See [supv-double-trap] for the operational details.","title":"\"Ssdbltrp\" Double Trap Extension, Version 1.0","component":"isa","version":"v20250508","name":"ssdbltrp","url":"/isa/priv/ssdbltrp.html","titles":[]},"25":{"id":25,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification \"Sstc\" Extension for Supervisor-mode Timer Interrupts, Version 1.0 The current Privileged arch specification only defines a hardware mechanism for generating machine-mode timer interrupts (based on the mtime and mtimecmp registers). With the resultant requirement that timer services for S-mode/HS-mode (and for VS-mode) have to all be provided by M-mode - via SBI calls from S/HS-mode up to M-mode (or VS-mode calls to HS-mode and then to M-mode). M-mode software then multiplexes these multiple logical timers onto its one physical M-mode timer facility, and the M-mode timer interrupt handler passes timer interrupts back down to the appropriate lower privilege mode. This extension serves to provide supervisor mode with its own CSR-based timer interrupt facility that it can directly manage to provide its own timer service (in the form of having its own stimecmp register) - thus eliminating the large overheads for emulating S/HS-mode timers and timer interrupt generation up in M-mode. Further, this extension adds a similar facility to the Hypervisor extension for VS-mode. The extension name is \"Sstc\" ('Ss' for Privileged arch and Supervisor-level extensions, and 'tc' for timecmp). This extension adds the S-level stimecmp CSR and the VS-level vstimecmp CSR. This extension adds this new CSR. The stimecmp CSR is a 64-bit register and has 64-bit precision on all RV32 and RV64 systems. In RV32 only, accesses to the stimecmp CSR access the low 32 bits, while accesses to the stimecmph CSR access the high 32 bits of stimecmp. The CSR numbers for stimecmp / stimecmph are 0x14D / 0x15D (within the Supervisor Trap Setup block of CSRs). A supervisor timer interrupt becomes pending, as reflected in the STIP bit in the mip and sip registers whenever time contains a value greater than or equal to stimecmp, treating the values as unsigned integers. If the result of this comparison changes, it is guaranteed to be reflected in STIP eventually, but not necessarily immediately. The interrupt remains posted until stimecmp becomes greater than time, typically as a result of writing stimecmp. The interrupt will be taken based on the standard interrupt enable and delegation rules. A spurious timer interrupt might occur if an interrupt handler advances stimecmp then immediately returns, because STIP might not yet have fallen in the interim. All software should be written to assume this event is possible, but most software should assume this event is extremely unlikely. It is almost always more performant to incur an occasional spurious timer interrupt than to poll STIP until it falls. In systems in which a supervisor execution environment (SEE) provides timer facilities via an SBI function call, this SBI call will continue to support requests to schedule a timer interrupt. The SEE will simply make use of stimecmp, changing its value as appropriate. This ensures compatibility with existing S-mode software that uses this SEE facility, while new S-mode software takes advantage of stimecmp directly.) This extension modifies the description of the STIP/STIE bits in these registers as follows: If supervisor mode is implemented, its mip.STIP and mie.STIE are the interrupt-pending and interrupt-enable bits for supervisor-level timer interrupts. If the stimecmp register is not implemented, STIP is writable in mip, and may be written by M-mode software to deliver timer interrupts to S-mode. If the stimecmp (supervisor-mode timer compare) register is implemented, STIP is read-only in mip and reflects the supervisor-level timer interrupt signal resulting from stimecmp. This timer interrupt signal is cleared by writing stimecmp with a value greater than the current time value. This extension modifies the description of the STIP/STIE bits in these registers as follows: Bits sip.STIP and sie.STIE are the interrupt-pending and interrupt-enable bits for supervisor-level timer interrupts. If implemented, STIP is read-only in sip, and is either set and cleared by the execution environment (if stimecmp is not implemented), or reflects the timer interrupt signal resulting from stimecmp (if stimecmp is implemented). The sip.STIP bit, in response to timer interrupts generated by stimecmp, is set and cleared by writing stimecmp with a value that respectively is less than or equal to, or greater than, the current time value. This extension adds to the description of the TM bit in this register as follows: In addition, when the TM bit in the mcounteren register is clear, attempts to access the stimecmp or vstimecmp register while executing in a mode less privileged than M will cause an illegal-instruction exception. When this bit is set, access to the stimecmp or vstimecmp register is permitted in S-mode if implemented, and access to the vstimecmp register (via stimecmp) is permitted in VS-mode if implemented and not otherwise prevented by the TM bit in hcounteren. This extension adds this new CSR. The vstimecmp CSR is a 64-bit register and has 64-bit precision on all RV32 and RV64 systems. In RV32 only, accesses to the vstimecmp CSR access the low 32 bits, while accesses to the vstimecmph CSR access the high 32 bits of vstimecmp. The proposed CSR numbers for vstimecmp / vstimecmph are 0x24D / 0x25D (within the Virtual Supervisor Registers block of CSRs, and mirroring the CSR numbers for stimecmp/stimecmph). A virtual supervisor timer interrupt becomes pending, as reflected in the VSTIP bit in the hip register, whenever (time + htimedelta), truncated to 64 bits, contains a value greater than or equal to vstimecmp, treating the values as unsigned integers. If the result of this comparison changes, it is guaranteed to be reflected in VSTIP eventually, but not necessarily immediately. The interrupt remains posted until vstimecmp becomes greater than (time + htimedelta), typically as a result of writing vstimecmp. The interrupt will be taken based on the standard interrupt enable and delegation rules while V=1. In systems in which a supervisor execution environment (SEE) implemented by an HS-mode hypervisor provides timer facilities via an SBI function call, this SBI call will continue to support requests to schedule a timer interrupt. The SEE will simply make use of vstimecmp, changing its value as appropriate. This ensures compatibility with existing guest VS-mode software that uses this SEE facility, while new VS-mode software takes advantage of vstimecmp directly.) This extension modifies the description of the VSTIP/VSTIE bits in the hip/hie registers as follows: Bits hip.VSTIP and hie.VSTIE are the interrupt-pending and interrupt-enable bits for VS-level timer interrupts. VSTIP is read-only in hip, and is the logical-OR of hvip.VSTIP and the timer interrupt signal resulting from vstimecmp (if vstimecmp is implemented). The hip.VSTIP bit, in response to timer interrupts generated by vstimecmp, is set and cleared by writing vstimecmp with a value that respectively is less than or equal to, or greater than, the current (time + htimedelta) value. The hip.VSTIP bit remains defined while V=0 as well as V=1. This extension adds to the description of the TM bit in this register as follows: In addition, when the TM bit in the hcounteren register is clear, attempts to access the vstimecmp register (via stimecmp) while executing in VS-mode will cause a virtual-instruction exception if the same bit in mcounteren is set. When this bit and the same bit in mcounteren are both set, access to the vstimecmp register (if implemented) is permitted in VS-mode. Enable/disable bits for this extension are provided in the new menvcfg / henvcfg CSRs. Bit 63 of menvcfg (or bit 31 of menvcfgh) - named STCE (STimecmp Enable) - enables stimecmp for S-mode when set to one, and the same bit of henvcfg enables vstimecmp for VS-mode. These STCE bits are WARL and are hard-wired to 0 when this extension is not implemented. When this extension is implemented and STCE in menvcfg is zero, an attempt to access stimecmp or vstimecmp in a mode other than M-mode raises an illegal-instruction exception, STCE in henvcfg is read-only zero, and STIP in mip and sip reverts to its defined behavior as if this extension is not implemented. Further, if the H extension is implemented, then hip.VSTIP also reverts its defined behavior as if this extension is not implemented. But when STCE in menvcfg is one and STCE in henvcfg is zero, an attempt to access stimecmp (really vstimecmp) when V = 1 raises a virtual-instruction exception, and VSTIP in hip reverts to its defined behavior as if this extension is not implemented.","title":"\"Sstc\" Extension for Supervisor-mode Timer Interrupts, Version 1.0","component":"isa","version":"v20250508","name":"sstc","url":"/isa/priv/sstc.html","titles":[{"text":"Machine and Supervisor Level Additions","hash":"machine-and-supervisor-level-additions","id":1},{"text":"Supervisor Timer (stimecmp) Register","hash":"supervisor-timer-stimecmp-register","id":2},{"text":"Machine Interrupt (mip and mie) Registers","hash":"machine-interrupt-mip-and-mie-registers","id":3},{"text":"Supervisor Interrupt (sip and sie) Registers","hash":"supervisor-interrupt-sip-and-sie-registers","id":4},{"text":"Machine Counter-Enable (mcounteren) Register","hash":"machine-counter-enable-mcounteren-register","id":5},{"text":"Hypervisor Extension Additions","hash":"hypervisor-extension-additions","id":6},{"text":"Virtual Supervisor Timer (vstimecmp) Register","hash":"virtual-supervisor-timer-vstimecmp-register","id":7},{"text":"Hypervisor Interrupt (hvip, hip, and hie) Registers","hash":"hypervisor-interrupt-hvip-hip-and-hie-registers","id":8},{"text":"Hypervisor Counter-Enable (hcounteren) Register","hash":"hypervisor-counter-enable-hcounteren-register","id":9},{"text":"Environment Config (menvcfg and henvcfg) Support","hash":"environment-config-menvcfg-and-henvcfg-support","id":10}]},"26":{"id":26,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Supervisor-Level ISA, Version 1.13 This chapter describes the RISC-V supervisor-level architecture, which contains a common core that is used with various supervisor-level address translation and protection schemes. Supervisor mode is deliberately restricted in terms of interactions with underlying physical hardware, such as physical memory and device interrupts, to support clean virtualization. In this spirit, certain supervisor-level facilities, including requests for timer and interprocessor interrupts, are provided by implementation-specific mechanisms. In some systems, a supervisor execution environment (SEE) provides these facilities in a manner specified by a supervisor binary interface (SBI). Other systems supply these facilities directly, through some other implementation-defined mechanism. A number of CSRs are provided for the supervisor. The supervisor should only view CSR state that should be visible to a supervisor-level operating system. In particular, there is no information about the existence (or non-existence) of higher privilege levels (machine level or other) visible in the CSRs accessible by the supervisor. Many supervisor CSRs are a subset of the equivalent machine-mode CSR, and the machine-mode chapter should be read first to help understand the supervisor-level CSR descriptions. The sstatus register is an SXLEN-bit read/write register formatted as shown in Supervisor-mode status (sstatus) register when SXLEN=32. when SXLEN=32 and Supervisor-mode status (sstatus) register when SXLEN=64. when SXLEN=64. The sstatus register keeps track of the processor’s current operating state. Figure 1. Supervisor-mode status (sstatus) register when SXLEN=32. Figure 2. Supervisor-mode status (sstatus) register when SXLEN=64. The SPP bit indicates the privilege level at which a hart was executing before entering supervisor mode. When a trap is taken, SPP is set to 0 if the trap originated from user mode, or 1 otherwise. When an SRET instruction (see [otherpriv]) is executed to return from the trap handler, the privilege level is set to user mode if the SPP bit is 0, or supervisor mode if the SPP bit is 1; SPP is then set to 0. The SIE bit enables or disables all interrupts in supervisor mode. When SIE is clear, interrupts are not taken while in supervisor mode. When the hart is running in user-mode, the value in SIE is ignored, and supervisor-level interrupts are enabled. The supervisor can disable individual interrupt sources using the sie CSR. The SPIE bit indicates whether supervisor interrupts were enabled prior to trapping into supervisor mode. When a trap is taken into supervisor mode, SPIE is set to SIE, and SIE is set to 0. When an SRET instruction is executed, SIE is set to SPIE, then SPIE is set to 1. The sstatus register is a subset of the mstatus register. In a straightforward implementation, reading or writing any field in sstatus is equivalent to reading or writing the homonymous field in mstatus. The UXL field controls the value of XLEN for U-mode, termed UXLEN, which may differ from the value of XLEN for S-mode, termed SXLEN. The encoding of UXL is the same as that of the MXL field of misa, shown in [misabase]. When SXLEN=32, the UXL field does not exist, and UXLEN=32. When SXLEN=64, it is a WARL field that encodes the current value of UXLEN. In particular, an implementation may make UXL be a read-only field whose value always ensures that UXLEN=SXLEN. If UXLEN≠SXLEN, instructions executed in the narrower mode must ignore source register operand bits above the configured XLEN, and must sign-extend results to fill the widest supported XLEN in the destination register. If UXLEN SXLEN, user-mode instruction-fetch addresses and load and store effective addresses are taken modulo . For example, when UXLEN=32 and SXLEN=64, user-mode memory accesses reference the lowest 4 GiB of the address space. Some HINT instructions are encoded as integer computational instructions that overwrite their destination register with its current value, e.g., c.addi x8, 0. When such a HINT is executed with XLEN < SXLEN and bits SXLEN..XLEN of the destination register not all equal to bit XLEN-1, it is implementation-defined whether bits SXLEN..XLEN of the destination register are unchanged or are overwritten with copies of bit XLEN-1. This definition allows implementations to elide register writeback for some HINTs, while allowing them to execute other HINTs in the same manner as other integer computational instructions. The implementation choice is observable only by S-mode with SXLEN > UXLEN; it is invisible to U-mode. The MXR (Make eXecutable Readable) bit modifies the privilege with which loads access virtual memory. When MXR=0, only loads from pages marked readable (R=1 in Sv32 page table entry.) will succeed. When MXR=1, loads from pages marked either readable or executable (R=1 or X=1) will succeed. MXR has no effect when page-based virtual memory is not in effect. The SUM (permit Supervisor User Memory access) bit modifies the privilege with which S-mode loads and stores access virtual memory. When SUM=0, S-mode memory accesses to pages that are accessible by U-mode (U=1 in Sv32 page table entry.) will fault. When SUM=1, these accesses are permitted. SUM has no effect when page-based virtual memory is not in effect, nor when executing in U-mode. Note that S-mode can never execute instructions from user pages, regardless of the state of SUM. SUM is read-only 0 if satp.MODE is read-only 0. The SUM mechanism prevents supervisor software from inadvertently accessing user memory. Operating systems can execute the majority of code with SUM clear; the few code segments that should access user memory can temporarily set SUM. The SUM mechanism does not avail S-mode software of permission to execute instructions in user code pages. Legitimate use cases for execution from user memory in supervisor context are rare in general and nonexistent in POSIX environments. However, bugs in supervisors that lead to arbitrary code execution are much easier to exploit if the supervisor exploit code can be stored in a user buffer at a virtual address chosen by an attacker. Some non-POSIX single address space operating systems do allow certain privileged software to partially execute in supervisor mode, while most programs run in user mode, all in a shared address space. This use case can be realized by mapping the physical code pages at multiple virtual addresses with different permissions, possibly with the assistance of the instruction page-fault handler to direct supervisor software to use the alternate mapping. The UBE bit is a WARL field that controls the endianness of explicit memory accesses made from U-mode, which may differ from the endianness of memory accesses in S-mode. An implementation may make UBE be a read-only field that always specifies the same endianness as for S-mode. UBE controls whether explicit load and store memory accesses made from U-mode are little-endian (UBE=0) or big-endian (UBE=1). UBE has no effect on instruction fetches, which are implicit memory accesses that are always little-endian. For implicit accesses to supervisor-level memory management data structures, such as page tables, S-mode endianness always applies and UBE is ignored. Standard RISC-V ABIs are expected to be purely little-endian-only or big-endian-only, with no accommodation for mixing endianness. Nevertheless, endianness control has been defined so as to permit an OS of one endianness to execute user-mode programs of the opposite endianness. Access to the SPELP field, added by Zicfilp, accesses the homonymous fields of mstatus when V=0, and the homonymous fields of vsstatus when V=1. The S-mode-disable-trap (SDT) bit is a WARL field introduced by the Ssdbltrp extension to address double trap (See [machine-double-trap]) at privilege modes lower than M. When the SDT bit is set to 1 by an explicit CSR write, the SIE (Supervisor Interrupt Enable) bit is cleared to 0. This clearing occurs regardless of the value written, if any, to the SIE bit by the same write. The SIE bit can only be set to 1 by an explicit CSR write if the SDT bit is being set to 0 by the same write or is already 0. When a trap is to be taken into S-mode, if the SDT bit is currently 0, it is then set to 1, and the trap is delivered as expected. However, if SDT is already set to 1, then this is an unexpected trap. In the event of an unexpected trap, a double-trap exception trap is delivered into M-mode. To deliver this trap, the hart writes registers, except mcause and mtval2, with the same information that the unexpected trap would have written if it was taken into M-mode. The mtval2 register is then set to what would be otherwise written into the mcause register by the unexpected trap. The mcause register is set to 16, the double-trap exception code. An SRET instruction sets the SDT bit to 0. After a trap handler has saved the state, such as scause, sepc, and stval, needed for resuming from the trap and is reentrant, it should clear the SDT bit. Resetting the SDT by an SRET enables the trap handler to detect a double trap that may occur during the tail phase, where it restores critical state to return from a trap. The consequence of this specification is that if a critical error condition was caused by a guest-page fault, then the GPA will not be available in mtval2 when the double trap is delivered to M-mode. This condition arises if the HS-mode invokes a hypervisor virtual-machine load or store instruction when SDT is 1 and the instruction raises a guest-page fault. The use of such an instruction in this phase of trap handling is not common. However, not recording the GPA is considered benign because, if required, it can still be obtained — albeit with added effort — through the process of walking the page tables. For a double trap that originates in VS-mode, M-mode should redirect the exception to HS-mode by copying the values of M-mode CSRs updated by the trap to HS-mode CSRs and should use an MRET to resume execution at the address in stvec. Supervisor Software Events (SSE), an extension to the SBI, provide a mechanism for supervisor software to register and service system events emanating from an SBI implementation, such as firmware or a hypervisor. In the event of a double trap, HS-mode and M-mode can utilize the SSE mechanism to invoke a critical-error handler in VS-mode or S/HS-mode, respectively. Additionally, the implementation of an SSE protocol can be considered as an optional measure to aid in the recovery from such critical errors. The stvec register is an SXLEN-bit read/write register that holds trap vector configuration, consisting of a vector base address (BASE) and a vector mode (MODE). Figure 3. Supervisor trap vector base address (stvec) register. The BASE field in stvec is a field that can hold any valid virtual or physical address, subject to the following alignment constraints: the address must be 4-byte aligned, and MODE settings other than Direct might impose additional alignment constraints on the value in the BASE field. Note that the CSR contains only bits XLEN-1 through 2 of the address BASE. When used as an address, the lower two bits are filled with zeroes to obtain an XLEN-bit address that is always aligned on a 4-byte boundary. Table 1. Encoding of stvec MODE field. Value Name Description 0 1 ≥2 Direct Vectored All exceptions set pc to BASE. Asynchronous interrupts set pc to BASE+4×cause. Reserved The encoding of the MODE field is shown in Encoding of stvec MODE field.. When MODE=Direct, all traps into supervisor mode cause the pc to be set to the address in the BASE field. When MODE=Vectored, all synchronous exceptions into supervisor mode cause the pc to be set to the address in the BASE field, whereas interrupts cause the pc to be set to the address in the BASE field plus four times the interrupt cause number. For example, a supervisor-mode timer interrupt (see Supervisor cause (scause) register values after trap. Synchronous exception priorities are given by [exception-priority].) causes the pc to be set to BASE+0x14. Setting MODE=Vectored may impose a stricter alignment constraint on BASE. The sip register is an SXLEN-bit read/write register containing information on pending interrupts, while sie is the corresponding SXLEN-bit read/write register containing interrupt enable bits. Interrupt cause number i (as reported in CSR scause, Supervisor Cause (scause) Register) corresponds with bit i in both sip and sie. Bits 15:0 are allocated to standard interrupt causes only, while bits 16 and above are designated for platform use. Figure 4. Supervisor interrupt-pending register (sip). Figure 5. Supervisor interrupt-enable register (sie). An interrupt i will trap to S-mode if both of the following are true: (a) either the current privilege mode is S and the SIE bit in the sstatus register is set, or the current privilege mode has less privilege than S-mode; and (b) bit i is set in both sip and sie. These conditions for an interrupt trap to occur must be evaluated in a bounded amount of time from when an interrupt becomes, or ceases to be, pending in sip, and must also be evaluated immediately following the execution of an SRET instruction or an explicit write to a CSR on which these interrupt trap conditions expressly depend (including sip, sie and sstatus). Interrupts to S-mode take priority over any interrupts to lower privilege modes. Each individual bit in register sip may be writable or may be read-only. When bit i in sip is writable, a pending interrupt i can be cleared by writing 0 to this bit. If interrupt i can become pending but bit i in sip is read-only, the implementation must provide some other mechanism for clearing the pending interrupt (which may involve a call to the execution environment). A bit in sie must be writable if the corresponding interrupt can ever become pending. Bits of sie that are not writable are read-only zero. The standard portions (bits 15:0) of registers sip and sie are formatted as shown in Figures Standard portion (bits 15:0) of sip. and Standard portion (bits 15:0) of sie. respectively. Figure 6. Standard portion (bits 15:0) of sip. Figure 7. Standard portion (bits 15:0) of sie. Bits sip.SEIP and sie.SEIE are the interrupt-pending and interrupt-enable bits for supervisor-level external interrupts. If implemented, SEIP is read-only in sip, and is set and cleared by the execution environment, typically through a platform-specific interrupt controller. Bits sip.STIP and sie.STIE are the interrupt-pending and interrupt-enable bits for supervisor-level timer interrupts. If implemented, STIP is read-only in sip, and is set and cleared by the execution environment. Bits sip.SSIP and sie.SSIE are the interrupt-pending and interrupt-enable bits for supervisor-level software interrupts. If implemented, SSIP is writable in sip and may also be set to 1 by a platform-specific interrupt controller. If the Sscofpmf extension is implemented, bits sip.LCOFIP and sie.LCOFIE are the interrupt-pending and interrupt-enable bits for local-counter-overflow interrupts. LCOFIP is read-write in sip and reflects the occurrence of a local counter-overflow overflow interrupt request resulting from any of the mhpmeventn.OF bits being set. If the Sscofpmf extension is not implemented, sip.LCOFIP and sie.LCOFIE are read-only zeros. Interprocessor interrupts are sent to other harts by implementation-specific means, which will ultimately cause the SSIP bit to be set in the recipient hart’s sip register. Each standard interrupt type (SEI, STI, SSI, or LCOFI) may not be implemented, in which case the corresponding interrupt-pending and interrupt-enable bits are read-only zeros. All bits in sip and sie are WARL fields. The implemented interrupts may be found by writing one to every bit location in sie, then reading back to see which bit positions hold a one. The sip and sie registers are subsets of the mip and mie registers. Reading any implemented field, or writing any writable field, of sip/sie effects a read or write of the homonymous field of mip/mie. Bits 3, 7, and 11 of sip and sie correspond to the machine-mode software, timer, and external interrupts, respectively. Since most platforms will choose not to make these interrupts delegatable from M-mode to S-mode, they are shown as 0 in Standard portion (bits 15:0) of sip. and Standard portion (bits 15:0) of sie.. Multiple simultaneous interrupts destined for supervisor mode are handled in the following decreasing priority order: SEI, SSI, STI, LCOFI. Supervisor software uses the same hardware performance monitoring facility as user-mode software, including the time, cycle, and instret CSRs. The implementation should provide a mechanism to modify the counter values. The implementation must provide a facility for scheduling timer interrupts in terms of the real-time counter, time. Figure 8. Counter-enable (scounteren) register The counter-enable (scounteren) CSR is a 32-bit register that controls the availability of the hardware performance monitoring counters to U-mode. When the CY, TM, IR, or HPMn bit in the scounteren register is clear, attempts to read the cycle, time, instret, or hpmcountern register while executing in U-mode will cause an illegal-instruction exception. When one of these bits is set, access to the corresponding register is permitted. scounteren must be implemented. However, any of the bits may be read-only zero, indicating reads to the corresponding counter will cause an exception when executing in U-mode. Hence, they are effectively WARL fields. The setting of a bit in mcounteren does not affect whether the corresponding bit in scounteren is writable. However, U-mode may only access a counter if the corresponding bits in scounteren and mcounteren are both set. The sscratch CSR is an SXLEN-bit read/write register, dedicated for use by the supervisor. Typically, sscratch is used to hold a pointer to the hart-local supervisor context while the hart is executing user code. At the beginning of a trap handler, software normally uses a CSRRW instruction to swap sscratch with an integer register to obtain an initial working register. Figure 9. Supervisor Scratch Register sepc is an SXLEN-bit read/write CSR formatted as shown in Supervisor exception program counter register.. The low bit of sepc (sepc[0]) is always zero. On implementations that support only IALIGN=32, the two low bits (sepc[1:0]) are always zero. If an implementation allows IALIGN to be either 16 or 32 (by changing CSR misa, for example), then, whenever IALIGN=32, bit sepc[1] is masked on reads so that it appears to be 0. This masking occurs also for the implicit read by the SRET instruction. Though masked, sepc[1] remains writable when IALIGN=32. sepc is a WARL register that must be able to hold all valid virtual addresses. It need not be capable of holding all possible invalid addresses. Prior to writing sepc, implementations may convert an invalid address into some other invalid address that sepc is capable of holding. When a trap is taken into S-mode, sepc is written with the virtual address of the instruction that was interrupted or that encountered the exception. Otherwise, sepc is never written by the implementation, though it may be explicitly written by software. Figure 10. Supervisor exception program counter register. The scause CSR is an SXLEN-bit read-write register formatted as shown in Supervisor Cause (scause) register.. When a trap is taken into S-mode, scause is written with a code indicating the event that caused the trap. Otherwise, scause is never written by the implementation, though it may be explicitly written by software. The Interrupt bit in the scause register is set if the trap was caused by an interrupt. The Exception Code field contains a code identifying the last exception or interrupt. Supervisor cause (scause) register values after trap. Synchronous exception priorities are given by [exception-priority]. lists the possible exception codes for the current supervisor ISAs. The Exception Code is a WLRL field. It is required to hold the values 0–31 (i.e., bits 4–0 must be implemented), but otherwise it is only guaranteed to hold supported exception codes. Figure 11. Supervisor Cause (scause) register. Table 2. Supervisor cause (scause) register values after trap. Synchronous exception priorities are given by [exception-priority]. Interrupt Exception Code Description 1 1 1 1 1 1 1 1 1 1 0 1 2-4 5 6-8 9 10-12 13 14-15 ≥16 Reserved Supervisor software interrupt Reserved Supervisor timer interrupt Reserved Supervisor external interrupt Reserved Counter-overflow interrupt Reserved Designated for platform use 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10-11 12 13 14 15 16-17 18 19 20-23 24-31 32-47 48-63 ≥64 Instruction address misaligned Instruction access fault Illegal instruction Breakpoint Load address misaligned Load access fault Store/AMO address misaligned Store/AMO access fault Environment call from U-mode Environment call from S-mode Reserved Instruction page fault Load page fault Reserved Store/AMO page fault Reserved Software check Hardware error Reserved Designated for custom use Reserved Designated for custom use Reserved The stval CSR is an SXLEN-bit read-write register formatted as shown in Supervisor Trap Value register.. When a trap is taken into S-mode, stval is written with exception-specific information to assist software in handling the trap. Otherwise, stval is never written by the implementation, though it may be explicitly written by software. The hardware platform will specify which exceptions must set stval informatively, which may unconditionally set it to zero, and which may exhibit either behavior, depending on the underlying event that caused the exception. If stval is written with a nonzero value when a breakpoint, address-misaligned, access-fault, or page-fault exception occurs on an instruction fetch, load, or store, then stval will contain the faulting virtual address. Figure 12. Supervisor Trap Value register. If stval is written with a nonzero value when a misaligned load or store causes an access-fault or page-fault exception, then stval will contain the virtual address of the portion of the access that caused the fault. If stval is written with a nonzero value when an instruction access-fault or page-fault exception occurs on a system with variable-length instructions, then stval will contain the virtual address of the portion of the instruction that caused the fault, while sepc will point to the beginning of the instruction. The stval register can optionally also be used to return the faulting instruction bits on an illegal-instruction exception (sepc points to the faulting instruction in memory). If stval is written with a nonzero value when an illegal-instruction exception occurs, then stval will contain the shortest of: the actual faulting instruction the first ILEN bits of the faulting instruction the first SXLEN bits of the faulting instruction The value loaded into stval on an illegal-instruction exception is right-justified and all unused upper bits are cleared to zero. On a trap caused by a software-check exception, the stval register holds the cause for the exception. The following encodings are defined: 0 - No information provided. 2 - Landing Pad Fault. Defined by the Zicfilp extension ([priv-forward]). 3 - Shadow Stack Fault. Defined by the Zicfiss extension ([priv-backward]). For other traps, stval is set to zero, but a future standard may redefine stval’s setting for other traps. stval is a WARL register that must be able to hold all valid virtual addresses and the value 0. It need not be capable of holding all possible invalid addresses. Prior to writing stval, implementations may convert an invalid address into some other invalid address that stval is capable of holding. If the feature to return the faulting instruction bits is implemented, stval must also be able to hold all values less than , where is the smaller of SXLEN and ILEN. The senvcfg CSR is an SXLEN-bit read/write register, formatted as shown in Supervisor environment configuration register (senvcfg) for RV64., that controls certain characteristics of the U-mode execution environment. Figure 13. Supervisor environment configuration register (senvcfg) for RV64. Figure 14. Supervisor environment configuration register (senvcfg) for RV32. If bit FIOM (Fence of I/O implies Memory) is set to one in senvcfg, FENCE instructions executed in U-mode are modified so the requirement to order accesses to device I/O implies also the requirement to order main memory accesses. Modified interpretation of FENCE predecessor and successor sets in U-mode when FIOM=1. details the modified interpretation of FENCE instruction bits PI, PO, SI, and SO in U-mode when FIOM=1. Similarly, for U-mode when FIOM=1, if an atomic instruction that accesses a region ordered as device I/O has its aq and/or rl bit set, then that instruction is ordered as though it accesses both device I/O and memory. If satp.MODE is read-only zero (always Bare), the implementation may make FIOM read-only zero. Table 3. Modified interpretation of FENCE predecessor and successor sets in U-mode when FIOM=1. Instruction bit Meaning when set PI PO Predecessor device input and memory reads (PR implied) Predecessor device output and memory writes (PW implied) SI SO Successor device input and memory reads (SR implied) Successor device output and memory writes (SW implied) Bit FIOM exists for a specific circumstance when an I/O device is being emulated for U-mode and both of the following are true: (a) the emulated device has a memory buffer that should be I/O space but is actually mapped to main memory via address translation, and (b) multiple physical harts are involved in accessing this emulated device from U-mode. A hypervisor running in S-mode without the benefit of the hypervisor extension of [hypervisor] may need to emulate a device for U-mode if paravirtualization cannot be employed. If the same hypervisor provides a virtual machine (VM) with multiple virtual harts, mapped one-to-one to real harts, then multiple harts may concurrently access the emulated device, perhaps because: (a) the guest OS within the VM assigns device interrupt handling to one hart while the device is also accessed by a different hart outside of an interrupt handler, or (b) control of the device (or partial control) is being migrated from one hart to another, such as for interrupt load balancing within the VM. For such cases, guest software within the VM is expected to properly coordinate access to the (emulated) device across multiple harts using mutex locks and/or interprocessor interrupts as usual, which in part entails executing I/O fences. But those I/O fences may not be sufficient if some of the device ``I/O'' is actually main memory, unknown to the guest. Setting FIOM=1 modifies those fences (and all other I/O fences executed in U-mode) to include main memory, too. Software can always avoid the need to set FIOM by never using main memory to emulate a device memory buffer that should be I/O space. However, this choice usually requires trapping all U-mode accesses to the emulated buffer, which might have a noticeable impact on performance. The alternative offered by FIOM is sufficiently inexpensive to implement that we consider it worth supporting even if only rarely enabled. The definition of the CBZE field is furnished by the Zicboz extension. The definitions of the CBCFE and CBIE fields are furnished by the Zicbom extension. The definition of the PMM field is furnished by the Ssnpm extension. The Zicfilp extension adds the LPE field in senvcfg. When the LPE field is set to 1, the Zicfilp extension is enabled in VU/U-mode. When the LPE field is 0, the Zicfilp extension is not enabled in VU/U-mode and the following rules apply to VU/U-mode: The hart does not update the ELP state; it remains as NO_LP_EXPECTED. The LPAD instruction operates as a no-op. The Zicfiss extension adds the SSE field in senvcfg. When the SSE field is set to 1, the Zicfiss extension is activated in VU/U-mode. When the SSE field is 0, the Zicfiss extension remains inactive in VU/U-mode, and the following rules apply: 32-bit Zicfiss instructions will revert to their behavior as defined by Zimop. 16-bit Zicfiss instructions will revert to their behavior as defined by Zcmop. When menvcfg.SSE is one, SSAMOSWAP.W/D raises an illegal-instruction exception in U-mode and a virtual-instruction exception in VU-mode. The satp CSR is an SXLEN-bit read/write register, formatted as shown in Supervisor address translation and protection (satp) register when SXLEN=32. for SXLEN=32 and Supervisor address translation and protection (satp) register when SXLEN=64, for MODE values Bare, Sv39, Sv48, and Sv57. for SXLEN=64, which controls supervisor-mode address translation and protection. This register holds the physical page number (PPN) of the root page table, i.e., its supervisor physical address divided by 4 KiB; an address space identifier (ASID), which facilitates address-translation fences on a per-address-space basis; and the MODE field, which selects the current address-translation scheme. Further details on the access to this register are described in [virt-control]. Figure 15. Supervisor address translation and protection (satp) register when SXLEN=32. Storing a PPN in satp, rather than a physical address, supports a physical address space larger than 4 GiB for RV32. The satp.PPN field might not be capable of holding all physical page numbers. Some platform standards might place constraints on the values satp.PPN may assume, e.g., by requiring that all physical page numbers corresponding to main memory be representable. Figure 16. Supervisor address translation and protection (satp) register when SXLEN=64, for MODE values Bare, Sv39, Sv48, and Sv57. We store the ASID and the page table base address in the same CSR to allow the pair to be changed atomically on a context switch. Swapping them non-atomically could pollute the old virtual address space with new translations, or vice-versa. This approach also slightly reduces the cost of a context switch. Encoding of satp MODE field. shows the encodings of the MODE field when SXLEN=32 and SXLEN=64. When MODE=Bare, supervisor virtual addresses are equal to supervisor physical addresses, and there is no additional memory protection beyond the physical memory protection scheme described in [pmp]. To select MODE=Bare, software must write zero to the remaining fields of satp (bits 30–0 when SXLEN=32, or bits 59–0 when SXLEN=64). Attempting to select MODE=Bare with a nonzero pattern in the remaining fields has an UNSPECIFIED effect on the value that the remaining fields assume and an UNSPECIFIED effect on address translation and protection behavior. When SXLEN=32, the satp encodings corresponding to MODE=Bare and ASID[8:7]=3 are designated for custom use, whereas the encodings corresponding to MODE=Bare and ASID[8:7]≠3 are reserved for future standard use. When SXLEN=64, all satp encodings corresponding to MODE=Bare are reserved for future standard use. Version 1.11 of this standard stated that the remaining fields in satp had no effect when MODE=Bare. Making these fields reserved facilitates future definition of additional translation and protection modes, particularly in RV32, for which all patterns of the existing MODE field have already been allocated. When SXLEN=32, the only other valid setting for MODE is Sv32, a paged virtual-memory scheme described in Sv32: Page-Based 32-bit Virtual-Memory Systems. When SXLEN=64, three paged virtual-memory schemes are defined: Sv39, Sv48, and Sv57, described in Sv39: Page-Based 39-bit Virtual-Memory System, Sv48: Page-Based 48-bit Virtual-Memory System, and Sv57: Page-Based 57-bit Virtual-Memory System, respectively. One additional scheme, Sv64, will be defined in a later version of this specification. The remaining MODE settings are reserved for future use and may define different interpretations of the other fields in satp. Implementations are not required to support all MODE settings, and if satp is written with an unsupported MODE, the entire write has no effect; no fields in satp are modified. The number of ASID bits is UNSPECIFIED and may be zero. The number of implemented ASID bits, termed ASIDLEN, may be determined by writing one to every bit position in the ASID field, then reading back the value in satp to see which bit positions in the ASID field hold a one. The least-significant bits of ASID are implemented first: that is, if ASIDLEN 0, ASID[ASIDLEN-1:0] is writable. The maximal value of ASIDLEN, termed ASIDMAX, is 9 for Sv32 or 16 for Sv39, Sv48, and Sv57. Table 4. Encoding of satp MODE field. SXLEN=32 Value Name Description 0 1 Bare Sv32 No translation or protection. Page-based 32-bit virtual addressing (see Sv32: Page-Based 32-bit Virtual-Memory Systems). SXLEN=64 Value Name Description 0 1-7 8 9 10 11 12-13 14-15 Bare - Sv39 Sv48 Sv57 Sv64 - - No translation or protection. Reserved for standard use Page-based 39-bit virtual addressing (see Sv39: Page-Based 39-bit Virtual-Memory System). Page-based 48-bit virtual addressing (see Sv48: Page-Based 48-bit Virtual-Memory System). Page-based 57-bit virtual addressing (see Sv57: Page-Based 57-bit Virtual-Memory System). Reserved for page-based 64-bit virtual addressing. Reserved for standard use Designated for custom use For many applications, the choice of page size has a substantial performance impact. A large page size increases TLB reach and loosens the associativity constraints on virtually indexed, physically tagged caches. At the same time, large pages exacerbate internal fragmentation, wasting physical memory and possibly cache capacity. After much deliberation, we have settled on a conventional page size of 4 KiB for both RV32 and RV64. We expect this decision to ease the porting of low-level runtime software and device drivers. The TLB reach problem is ameliorated by transparent superpage support in modern operating systems. [86] Additionally, multi-level TLB hierarchies are quite inexpensive relative to the multi-level cache hierarchies whose address space they map. The satp CSR is considered active when the effective privilege mode is S-mode or U-mode. Executions of the address-translation algorithm may only begin using a given value of satp when satp is active. Translations that began while satp was active are not required to complete or terminate when satp is no longer active, unless an SFENCE.VMA instruction matching the address and ASID is executed. The SFENCE.VMA instruction must be used to ensure that updates to the address-translation data structures are observed by subsequent implicit reads to those structures by a hart. Note that writing satp does not imply any ordering constraints between page-table updates and subsequent address translations, nor does it imply any invalidation of address-translation caches. If the new address space’s page tables have been modified, or if an ASID is reused, it may be necessary to execute an SFENCE.VMA instruction (see Supervisor Memory-Management Fence Instruction) after, or in some cases before, writing satp. Not imposing upon implementations to flush address-translation caches upon satp writes reduces the cost of context switches, provided a sufficiently large ASID space. In addition to the SRET instruction defined in [otherpriv], one new supervisor-level instruction is provided. The supervisor memory-management fence instruction SFENCE.VMA is used to synchronize updates to in-memory memory-management data structures with current execution. Instruction execution causes implicit reads and writes to these data structures; however, these implicit references are ordinarily not ordered with respect to explicit loads and stores. Executing an SFENCE.VMA instruction guarantees that any previous stores already visible to the current RISC-V hart are ordered before certain implicit references by subsequent instructions in that hart to the memory-management data structures. The specific set of operations ordered by SFENCE.VMA is determined by rs1 and rs2, as described below. SFENCE.VMA is also used to invalidate entries in the address-translation cache associated with a hart (see Virtual Address Translation Process). Further details on the behavior of this instruction are described in [virt-control] and [pmp-vmem]. The SFENCE.VMA is used to flush any local hardware caches related to address translation. It is specified as a fence rather than a TLB flush to provide cleaner semantics with respect to which instructions are affected by the flush operation and to support a wider variety of dynamic caching structures and memory-management schemes. SFENCE.VMA is also used by higher privilege levels to synchronize page table writes and the address translation hardware. SFENCE.VMA orders only the local hart’s implicit references to the memory-management data structures. Consequently, other harts must be notified separately when the memory-management data structures have been modified. One approach is to use 1) a local data fence to ensure local writes are visible globally, then 2) an interprocessor interrupt to the other thread, then 3) a local SFENCE.VMA in the interrupt handler of the remote thread, and finally 4) signal back to originating thread that operation is complete. This is, of course, the RISC-V analog to a TLB shootdown. For the common case that the translation data structures have only been modified for a single address mapping (i.e., one page or superpage), rs1 can specify a virtual address within that mapping to effect a translation fence for that mapping only. Furthermore, for the common case that the translation data structures have only been modified for a single address-space identifier, rs2 can specify the address space. The behavior of SFENCE.VMA depends on rs1 and rs2 as follows: If rs1=x0 and rs2=x0, the fence orders all reads and writes made to any level of the page tables, for all address spaces. The fence also invalidates all address-translation cache entries, for all address spaces. If rs1=x0 and rs2≠x0, the fence orders all reads and writes made to any level of the page tables, but only for the address space identified by integer register rs2. Accesses to global mappings (see Addressing and Memory Protection) are not ordered. The fence also invalidates all address-translation cache entries matching the address space identified by integer register rs2, except for entries containing global mappings. If rs1≠x0 and rs2=x0, the fence orders only reads and writes made to leaf page table entries corresponding to the virtual address in rs1, for all address spaces. The fence also invalidates all address-translation cache entries that contain leaf page table entries corresponding to the virtual address in rs1, for all address spaces. If rs1≠x0 and rs2≠x0, the fence orders only reads and writes made to leaf page table entries corresponding to the virtual address in rs1, for the address space identified by integer register rs2. Accesses to global mappings are not ordered. The fence also invalidates all address-translation cache entries that contain leaf page table entries corresponding to the virtual address in rs1 and that match the address space identified by integer register rs2, except for entries containing global mappings. If the value held in rs1 is not a valid virtual address, then the SFENCE.VMA instruction has no effect. No exception is raised in this case. It is always legal to over-fence, e.g., by fencing only based on a subset of the bits in rs1 and/or rs2, and/or by simply treating all SFENCE.VMA instructions as having rs1=x0 and/or rs2=x0. For example, simpler implementations can ignore the virtual address in rs1 and the ASID value in rs2 and always perform a global fence. The choice not to raise an exception when an invalid virtual address is held in rs1 facilitates this type of simplification. When rs2≠x0, bits SXLEN-1:ASIDMAX of the value held in rs2 are reserved for future standard use. Until their use is defined by a standard extension, they should be zeroed by software and ignored by current implementations. Furthermore, if ASIDLEN<ASIDMAX, the implementation shall ignore bits ASIDMAX-1:ASIDLEN of the value held in rs2. An implicit read of the memory-management data structures may return any translation for an address that was valid at any time since the most recent SFENCE.VMA that subsumes that address. The ordering implied by SFENCE.VMA does not place implicit reads and writes to the memory-management data structures into the global memory order in a way that interacts cleanly with the standard RVWMO ordering rules. In particular, even though an SFENCE.VMA orders prior explicit accesses before subsequent implicit accesses, and those implicit accesses are ordered before their associated explicit accesses, SFENCE.VMA does not necessarily place prior explicit accesses before subsequent explicit accesses in the global memory order. These implicit loads also need not otherwise obey normal program order semantics with respect to prior loads or stores to the same address. A consequence of this specification is that an implementation may use any translation for an address that was valid at any time since the most recent SFENCE.VMA that subsumes that address. In particular, if a leaf PTE is modified but a subsuming SFENCE.VMA is not executed, either the old translation or the new translation will be used, but the choice is unpredictable. The behavior is otherwise well-defined. In a conventional TLB design, it is possible for multiple entries to match a single address if, for example, a page is upgraded to a superpage without first clearing the original non-leaf PTE’s valid bit and executing an SFENCE.VMA with rs1=x0. In this case, a similar remark applies: it is unpredictable whether the old non-leaf PTE or the new leaf PTE is used, but the behavior is otherwise well defined. Another consequence of this specification is that it is generally unsafe to update a PTE using a set of stores of a width less than the width of the PTE, as it is legal for the implementation to read the PTE at any time, including when only some of the partial stores have taken effect. This specification permits the caching of PTEs whose V (Valid) bit is clear. Operating systems must be written to cope with this possibility, but implementers are reminded that eagerly caching invalid PTEs will reduce performance by causing additional page faults. Implementations must only perform implicit reads of the translation data structures pointed to by the current contents of the satp register or a subsequent valid (V=1) translation data structure entry, and must only raise exceptions for implicit accesses that are generated as a result of instruction execution, not those that are performed speculatively. Changes to the sstatus fields SUM and MXR take effect immediately, without the need to execute an SFENCE.VMA instruction. Changing satp.MODE from Bare to other modes and vice versa also takes effect immediately, without the need to execute an SFENCE.VMA instruction. Likewise, changes to satp.ASID take effect immediately. The following common situations typically require executing an SFENCE.VMA instruction: When software recycles an ASID (i.e., reassociates it with a different page table), it should first change satp to point to the new page table using the recycled ASID, then execute SFENCE.VMA with rs1=x0 and rs2 set to the recycled ASID. Alternatively, software can execute the same SFENCE.VMA instruction while a different ASID is loaded into satp, provided the next time satp is loaded with the recycled ASID, it is simultaneously loaded with the new page table. If the implementation does not provide ASIDs, or software chooses to always use ASID 0, then after every satp write, software should execute SFENCE.VMA with rs1=x0. In the common case that no global translations have been modified, rs2 should be set to a register other than x0 but which contains the value zero, so that global translations are not flushed. If software modifies a non-leaf PTE, it should execute SFENCE.VMA with rs1=x0. If any PTE along the traversal path had its G bit set, rs2 must be x0; otherwise, rs2 should be set to the ASID for which the translation is being modified. If software modifies a leaf PTE, it should execute SFENCE.VMA with rs1 set to a virtual address within the page. If any PTE along the traversal path had its G bit set, rs2 must be x0; otherwise, rs2 should be set to the ASID for which the translation is being modified. For the special cases of increasing the permissions on a leaf PTE and changing an invalid PTE to a valid leaf, software may choose to execute the SFENCE.VMA lazily. After modifying the PTE but before executing SFENCE.VMA, either the new or old permissions will be used. In the latter case, a page-fault exception might occur, at which point software should execute SFENCE.VMA in accordance with the previous bullet point. If a hart employs an address-translation cache, that cache must appear to be private to that hart. In particular, the meaning of an ASID is local to a hart; software may choose to use the same ASID to refer to different address spaces on different harts. A future extension could redefine ASIDs to be global across the SEE, enabling such options as shared translation caches and hardware support for broadcast TLB shootdown. However, as OSes have evolved to significantly reduce the scope of TLB shootdowns using novel ASID-management techniques, we expect the local-ASID scheme to remain attractive for its simplicity and possibly better scalability. For implementations that make satp.MODE read-only zero (always Bare), attempts to execute an SFENCE.VMA instruction might raise an illegal-instruction exception. When Sv32 is written to the MODE field in the satp register (see Supervisor Address Translation and Protection (satp) Register), the supervisor operates in a 32-bit paged virtual-memory system. In this mode, supervisor and user virtual addresses are translated into supervisor physical addresses by traversing a radix-tree page table. Sv32 is supported when SXLEN=32 and is designed to include mechanisms sufficient for supporting modern Unix-based operating systems. The initial RISC-V paged virtual-memory architectures have been designed as straightforward implementations to support existing operating systems. We have architected page table layouts to support a hardware page-table walker. Software TLB refills are a performance bottleneck on high-performance systems, and are especially troublesome with decoupled specialized coprocessors. An implementation can choose to implement software TLB refills using a machine-mode trap handler as an extension to M-mode. Some ISAs architecturally expose virtually indexed, physically tagged caches, in that accesses to the same physical address via different virtual addresses might not be coherent unless the virtual addresses lie within the same cache set. Implicitly, this specification does not permit such behavior to be architecturally exposed. Sv32 implementations support a 32-bit virtual address space, divided into pages. An Sv32 virtual address is partitioned into a virtual page number (VPN) and page offset, as shown in Sv32 virtual address.. When Sv32 virtual memory mode is selected in the MODE field of the satp register, supervisor virtual addresses are translated into supervisor physical addresses via a two-level page table. The 20-bit VPN is translated into a 22-bit physical page number (PPN), while the 12-bit page offset is untranslated. The resulting supervisor-level physical addresses are then checked using any physical memory protection structures ([pmp]), before being directly converted to machine-level physical addresses. If necessary, supervisor-level physical addresses are zero-extended to the number of physical address bits found in the implementation. For example, consider an RV32 system supporting 34 bits of physical address. When the value of satp.MODE is Sv32, a 34-bit physical address is produced directly, and therefore no zero extension is needed. When the value of satp.MODE is Bare, the 32-bit virtual address is translated (unmodified) into a 32-bit physical address, and then that physical address is zero-extended into a 34-bit machine-level physical address. Figure 17. Sv32 virtual address. Sv32 page tables consist of 210 page-table entries (PTEs), each of four bytes. A page table is exactly the size of a page and must always be aligned to a page boundary. The physical page number of the root page table is stored in the satp register. Figure 18. SV32 physical address. Figure 19. Sv32 page table entry. The PTE format for Sv32 is shown in Sv32 page table entry.. The V bit indicates whether the PTE is valid; if it is 0, all other bits in the PTE are don’t-cares and may be used freely by software. The permission bits, R, W, and X, indicate whether the page is readable, writable, and executable, respectively. When all three are zero, the PTE is a pointer to the next level of the page table; otherwise, it is a leaf PTE. Writable pages must also be marked readable; the contrary combinations are reserved for future use. Encoding of PTE R/W/X fields. summarizes the encoding of the permission bits. Table 5. Encoding of PTE R/W/X fields. X W R Meaning 0 0 0 0 1 1 1 1 0 0 1 1 0 0 1 1 0 1 0 1 0 1 0 1 Pointer to next level of page table. Read-only page. Reserved for future use. Read-write page. Execute-only page. Read-execute page. Reserved for future use. Read-write-execute page. Attempting to fetch an instruction from a page that does not have execute permissions raises a fetch page-fault exception. Attempting to execute a load or load-reserved instruction whose effective address lies within a page without read permissions raises a load page-fault exception. Attempting to execute a store, store-conditional, or AMO instruction whose effective address lies within a page without write permissions raises a store page-fault exception. AMOs never raise load page-fault exceptions. Since any unreadable page is also unwritable, attempting to perform an AMO on an unreadable page always raises a store page-fault exception. The U bit indicates whether the page is accessible to user mode. U-mode software may only access the page when U=1. If the SUM bit in the sstatus register is set, supervisor mode software may also access pages with U=1. However, supervisor code normally operates with the SUM bit clear, in which case, supervisor code will fault on accesses to user-mode pages. Irrespective of SUM, the supervisor may not execute code on pages with U=1. An alternative PTE format would support different permissions for supervisor and user. We omitted this feature because it would be largely redundant with the SUM mechanism (see Memory Privilege in sstatus Register) and would require more encoding space in the PTE. The G bit designates a global mapping. Global mappings are those that exist in all address spaces. For non-leaf PTEs, the global setting implies that all mappings in the subsequent levels of the page table are global. Note that failing to mark a global mapping as global merely reduces performance, whereas marking a non-global mapping as global is a software bug that, after switching to an address space with a different non-global mapping for that address range, can unpredictably result in either mapping being used. Global mappings need not be stored redundantly in address-translation caches for multiple ASIDs. Additionally, they need not be flushed from local address-translation caches when an SFENCE.VMA instruction is executed with rs2≠x0. The RSW field is reserved for use by supervisor software; the implementation shall ignore this field. Each leaf PTE contains an accessed (A) and dirty (D) bit. The A bit indicates the virtual page has been read, written, or fetched from since the last time the A bit was cleared. The D bit indicates the virtual page has been written since the last time the D bit was cleared. Two schemes to manage the A and D bits are defined: The Svade extension: when a virtual page is accessed and the A bit is clear, or is written and the D bit is clear, a page-fault exception is raised. When the Svade extension is not implemented, the following scheme applies. When a virtual page is accessed and the A bit is clear, the PTE is updated to set the A bit. When the virtual page is written and the D bit is clear, the PTE is updated to set the D bit. When G-stage address translation is in use and is not Bare, the G-stage virtual pages may be accessed or written by implicit accesses to VS-level memory management data structures, such as page tables. When two-stage address translation is in use, an explicit access may cause both VS-stage and G-stage PTEs to be updated. The following rules apply to all PTE updates caused by an explicit or an implicit memory accesses. The PTE update must be atomic with respect to other accesses to the PTE, and must atomically perform all tablewalk checks for that leaf PTE as part of, and before, conditionally updating the PTE value. Updates of the A bit may be performed as a result of speculation, even if the associated memory access ultimately is not performed architecturally. However, updates to the D bit, resulting from an explicit store, must be exact (i.e., non-speculative), and observed in program order by the local hart. When two-stage address translation is active, updates to the D bit in G-stage PTEs may be performed by an implicit access to a VS-stage PTE, if the G-stage PTE provides write permission, before any speculative access to the VS-stage PTE. The PTE update must appear in the global memory order before the memory access that caused the PTE update and before any subsequent explicit memory access to that virtual page by the local hart. The ordering on loads and stores provided by FENCE instructions and the acquire/release bits on atomic instructions also orders the PTE updates associated with those loads and stores as observed by remote harts. The PTE update is not required to be atomic with respect to the memory access that caused the update and a trap may occur between the PTE update and the memory access that caused the PTE update. If a trap occurs then the A and/or D bit may be updated but the memory access that caused the PTE update might not occur. The hart must not perform the memory access that caused the PTE update before the PTE update is globally visible. The page tables must be located in memory with hardware page-table write access and RsrvEventual PMA. All harts in a system must employ the same PTE-update scheme as each other. The PTE updates due to memory accesses ordered-after a FENCE are not themselves ordered by the FENCE. Simpler implementations may order the Page Table Entry (PTE) update to precede all subsequent explicit memory accesses, as opposed to ensuring that the PTE update is precisely sequenced before subsequent explicit memory accesses to the associated virtual page. Prior versions of this specification required PTE A bit updates to be exact, but allowing the A bit to be updated as a result of speculation simplifies the implementation of address translation prefetchers. System software typically uses the A bit as a page replacement policy hint, but does not require exactness for functional correctness. On the other hand, D bit updates are still required to be exact and performed in program order, as the D bit affects the functional correctness of page eviction. Implementations are of course still permitted to perform both A and D bit updates only in an exact manner. In both cases, requiring atomicity ensures that the PTE update will not be interrupted by other intervening writes to the page table, as such interruptions could lead to A/D bits being set on PTEs that have been reused for other purposes, on memory that has been reclaimed for other purposes, and so on. Simple implementations may instead generate page-fault exceptions. The A and D bits are never cleared by the implementation. If the supervisor software does not rely on accessed and/or dirty bits, e.g. if it does not swap memory pages to secondary storage or if the pages are being used to map I/O space, it should always set them to 1 in the PTE to improve performance. Any level of PTE may be a leaf PTE, so in addition to 4 KiB pages, Sv32 supports 4 MiB megapages. A megapage must be virtually and physically aligned to a 4 MiB boundary; a page-fault exception is raised if the physical address is insufficiently aligned. For non-leaf PTEs, the D, A, and U bits are reserved for future standard use. Until their use is defined by a standard extension, they must be cleared by software for forward compatibility. For implementations with both page-based virtual memory and the \"A\" standard extension, the LR/SC reservation set must lie completely within a single base physical page (i.e., a naturally aligned 4 KiB physical-memory region). On some implementations, misaligned loads, stores, and instruction fetches may also be decomposed into multiple accesses, some of which may succeed before a page-fault exception occurs. In particular, a portion of a misaligned store that passes the exception check may become visible, even if another portion fails the exception check. The same behavior may manifest for stores wider than XLEN bits (e.g., the FSD instruction in RV32D), even when the store address is naturally aligned. A virtual address va is translated into a physical address pa as follows: Let a be satp.ppn×PAGESIZE, and let i=LEVELS-1. (For Sv32, PAGESIZE=212 and LEVELS=2.) The satp register must be active, i.e., the effective privilege mode must be S-mode or U-mode. Let pte be the value of the PTE at address a+va.vpn[i]×PTESIZE. (For Sv32, PTESIZE=4.) If accessing pte violates a PMA or PMP check, raise an access-fault exception corresponding to the original access type. If pte.v=0, or if pte.r=0 and pte.w=1, or if any bits or encodings that are reserved for future standard use are set within pte, stop and raise a page-fault exception corresponding to the original access type. Otherwise, the PTE is valid. If pte.r=1 or pte.x=1, go to step 5. Otherwise, this PTE is a pointer to the next level of the page table. Let i=i-1. If i<0, stop and raise a page-fault exception corresponding to the original access type. Otherwise, let a=pte.ppn×PAGESIZE and go to step 2. A leaf PTE has been reached. If i>0 and pte.ppn[i-1:0] ≠ 0, this is a misaligned superpage; stop and raise a page-fault exception corresponding to the original access type. Determine if the requested memory access is allowed by the pte.u bit, given the current privilege mode and the value of the SUM and MXR fields of the mstatus register. If not, stop and raise a page-fault exception corresponding to the original access type. Determine if the requested memory access is allowed by the pte.r, pte.w, and pte.x bits, given the Shadow Stack Memory Protection rules. If not, stop and raise an access-fault exception. Determine if the requested memory access is allowed by the pte.r, pte.w, and pte.x bits. If not, stop and raise a page-fault exception corresponding to the original access type. If pte.a=0, or if the original memory access is a store and pte.d=0: If the Svade extension is implemented, stop and raise a page-fault exception corresponding to the original access type. If a store to pte would violate a PMA or PMP check, raise an access-fault exception corresponding to the original access type. Perform the following steps atomically: Compare pte to the value of the PTE at address a+va.vpn[i]×PTESIZE. If the values match, set pte.a to 1 and, if the original memory access is a store, also set pte.d to 1. If the comparison fails, return to step 2. The translation is successful. The translated physical address is given as follows: pa.pgoff = va.pgoff. If i>0, then this is a superpage translation and pa.ppn[i-1:0] = va.vpn[i-1:0]. pa.ppn[LEVELS-1:i] = pte.ppn[LEVELS-1:i]. All implicit accesses to the address-translation data structures in this algorithm are performed using width PTESIZE. This implies, for example, that an Sv48 implementation may not use two separate 4B reads to non-atomically access a single 8B PTE, and that A/D bit updates performed by the implementation are treated as atomically updating the entire PTE, rather than just the A and/or D bit alone (even though the PTE value does not otherwise change). The results of implicit address-translation reads in step 2 may be held in a read-only, incoherent address-translation cache but not shared with other harts. The address-translation cache may hold an arbitrary number of entries, including an arbitrary number of entries for the same address and ASID. Entries in the address-translation cache may then satisfy subsequent step 2 reads if the ASID associated with the entry matches the ASID loaded in step 0 or if the entry is associated with a global mapping. To ensure that implicit reads observe writes to the same memory locations, an SFENCE.VMA instruction must be executed after the writes to flush the relevant cached translations. The address-translation cache cannot be used in step 9; accessed and dirty bits may only be updated in memory directly. It is permitted for multiple address-translation cache entries to co-exist for the same address. This represents the fact that in a conventional TLB hierarchy, it is possible for multiple entries to match a single address if, for example, a page is upgraded to a superpage without first clearing the original non-leaf PTE’s valid bit and executing an SFENCE.VMA with rs1=x0, or if multiple TLBs exist in parallel at a given level of the hierarchy. In this case, just as if an SFENCE.VMA is not executed between a write to the memory-management tables and subsequent implicit read of the same address: it is unpredictable whether the old non-leaf PTE or the new leaf PTE is used, but the behavior is otherwise well defined. Implementations may also execute the address-translation algorithm speculatively at any time, for any virtual address, as long as satp is active (as defined in Supervisor Address Translation and Protection (satp) Register). Such speculative executions have the effect of pre-populating the address-translation cache. Speculative executions of the address-translation algorithm behave as non-speculative executions of the algorithm do, except that they must not set the dirty bit for a PTE, they must not trigger an exception, and they must not create address-translation cache entries if those entries would have been invalidated by any SFENCE.VMA instruction executed by the hart since the speculative execution of the algorithm began. For instance, it is illegal for both non-speculative and speculative executions of the translation algorithm to begin, read the level 2 page table, pause while the hart executes an SFENCE.VMA with rs1=rs2=x0, then resume using the now-stale level 2 PTE, as subsequent implicit reads could populate the address-translation cache with stale PTEs. In many implementations, an SFENCE.VMA instruction with rs1=x0 will therefore either terminate all previously-launched speculative executions of the address-translation algorithm (for the specified ASID, if applicable), or simply wait for them to complete (in which case any address-translation cache entries created will be invalidated by the SFENCE.VMA as appropriate). Likewise, an SFENCE.VMA instruction with rs1≠x0 generally must either ensure that previously-launched speculative executions of the address-translation algorithm (for the specified ASID, if applicable) are prevented from creating new address-translation cache entries mapping leaf PTEs, or wait for them to complete. A consequence of implementations being permitted to read the translation data structures arbitrarily early and speculatively is that at any time, all page table entries reachable by executing the algorithm may be loaded into the address-translation cache. Although it would be uncommon to place page tables in non-idempotent memory, there is no explicit prohibition against doing so. Since the algorithm may only touch page tables reachable from the root page table indicated in satp, the range of addresses that an implementation’s page table walker will touch is fully under supervisor control. The algorithm does not admit the possibility of ignoring high-order PPN bits for implementations with narrower physical addresses. This section describes a simple paged virtual-memory system for SXLEN=64, which supports 39-bit virtual address spaces. The design of Sv39 follows the overall scheme of Sv32, and this section details only the differences between the schemes. We specified multiple virtual memory systems for RV64 to relieve the tension between providing a large address space and minimizing address-translation cost. For many systems, 39 bits of virtual-address space is ample, and so Sv39 suffices. Sv48 increases the virtual address space to 48 bits, but increases the physical memory capacity dedicated to page tables, the latency of page-table traversals, and the size of hardware structures that store virtual addresses. Sv57 increases the virtual address space, page table capacity requirement, and translation latency even further. Sv39 implementations support a 39-bit virtual address space, divided into pages. An Sv39 address is partitioned as shown in Sv39 virtual address.. Instruction fetch addresses and load and store effective addresses, which are 64 bits, must have bits 63–39 all equal to bit 38, or else a page-fault exception will occur. The 27-bit VPN is translated into a 44-bit PPN via a three-level page table, while the 12-bit page offset is untranslated. When mapping between narrower and wider addresses, RISC-V zero-extends a narrower physical address to a wider size. The mapping between 64-bit virtual addresses and the 39-bit usable address space of Sv39 is not based on zero extension but instead follows an entrenched convention that allows an OS to use one or a few of the most-significant bits of a full-size (64-bit) virtual address to quickly distinguish user and supervisor address regions. Figure 20. Sv39 virtual address. Figure 21. Sv39 physical address. Figure 22. Sv39 page table entry. Sv39 page tables contain 29 page table entries (PTEs), eight bytes each. A page table is exactly the size of a page and must always be aligned to a page boundary. The physical page number of the root page table is stored in the satp register’s PPN field. The PTE format for Sv39 is shown in Sv39 page table entry.. Bits 9-0 have the same meaning as for Sv32. Bit 63 is reserved for use by the Svnapot extension in \"Svnapot\" Extension for NAPOT Translation Contiguity, Version 1.0. If Svnapot is not implemented, bit 63 remains reserved and must be zeroed by software for forward compatibility, or else a page-fault exception is raised. Bits 62-61 are reserved for use by the Svpbmt extension in \"Svpbmt\" Extension for Page-Based Memory Types, Version 1.0. If Svpbmt is not implemented, bits 62-61 remain reserved and must be zeroed by software for forward compatibility, or else a page-fault exception is raised. Bits 60-54 are reserved for future standard use and, until their use is defined by some standard extension, must be zeroed by software for forward compatibility. If any of these bits are set, a page-fault exception is raised. We reserved several PTE bits for a possible extension that improves support for sparse address spaces by allowing page-table levels to be skipped, reducing memory usage and TLB refill latency. These reserved bits may also be used to facilitate research experimentation. The cost is reducing the physical address space, but is presently ample. When it no longer suffices, the reserved bits that remain unallocated could be used to expand the physical address space. Any level of PTE may be a leaf PTE, so in addition to 4 KiB pages, Sv39 supports 2 MiB megapages and 1 GiB gigapages, each of which must be virtually and physically aligned to a boundary equal to its size. A page-fault exception is raised if the physical address is insufficiently aligned. The algorithm for virtual-to-physical address translation is the same as in Virtual Address Translation Process, except LEVELS equals 3 and PTESIZE equals 8. This section describes a simple paged virtual-memory system for SXLEN=64, which supports 48-bit virtual address spaces. Sv48 is intended for systems for which a 39-bit virtual address space is insufficient. It closely follows the design of Sv39, simply adding an additional level of page table, and so this chapter only details the differences between the two schemes. Implementations that support Sv48 must also support Sv39. Systems that support Sv48 can also support Sv39 at essentially no cost, and so should do so to maintain compatibility with supervisor software that assumes Sv39. Sv48 implementations support a 48-bit virtual address space, divided into pages. An Sv48 address is partitioned as shown in Sv48 virtual address.. Instruction fetch addresses and load and store effective addresses, which are 64 bits, must have bits 63–48 all equal to bit 47, or else a page-fault exception will occur. The 36-bit VPN is translated into a 44-bit PPN via a four-level page table, while the 12-bit page offset is untranslated. Figure 23. Sv48 virtual address. Figure 24. Sv48 physical address. Figure 25. Sv48 page table entry. The PTE format for Sv48 is shown in Sv48 page table entry.. Bits 63-54 and 9-0 have the same meaning as for Sv39. Any level of PTE may be a leaf PTE, so in addition to pages, Sv48 supports megapages, gigapages, and terapages, each of which must be virtually and physically aligned to a boundary equal to its size. A page-fault exception is raised if the physical address is insufficiently aligned. The algorithm for virtual-to-physical address translation is the same as in Virtual Address Translation Process, except LEVELS equals 4 and PTESIZE equals 8. This section describes a simple paged virtual-memory system designed for RV64 systems, which supports 57-bit virtual address spaces. Sv57 is intended for systems for which a 48-bit virtual address space is insufficient. It closely follows the design of Sv48, simply adding an additional level of page table, and so this chapter only details the differences between the two schemes. Implementations that support Sv57 must also support Sv48. Systems that support Sv57 can also support Sv48 at essentially no cost, and so should do so to maintain compatibility with supervisor software that assumes Sv48. Sv57 implementations support a 57-bit virtual address space, divided into pages. An Sv57 address is partitioned as shown in Sv57 virtual address.. Instruction fetch addresses and load and store effective addresses, which are 64 bits, must have bits 63–57 all equal to bit 56, or else a page-fault exception will occur. The 45-bit VPN is translated into a 44-bit PPN via a five-level page table, while the 12-bit page offset is untranslated. Figure 26. Sv57 virtual address. Figure 27. Sv57 physical address. Figure 28. Sv57 page table entry. The PTE format for Sv57 is shown in Sv57 page table entry.. Bits 63–54 and 9–0 have the same meaning as for Sv39. Any level of PTE may be a leaf PTE, so in addition to pages, Sv57 supports megapages, gigapages, terapages, and petapages, each of which must be virtually and physically aligned to a boundary equal to its size. A page-fault exception is raised if the physical address is insufficiently aligned. The algorithm for virtual-to-physical address translation is the same as in Virtual Address Translation Process, except LEVELS equals 5 and PTESIZE equals 8. In Sv39, Sv48, and Sv57, when a PTE has N=1, the PTE represents a translation that is part of a range of contiguous virtual-to-physical translations with the same values for PTE bits 5–0. Such ranges must be of a naturally aligned power-of-2 (NAPOT) granularity larger than the base page size. The Svnapot extension depends on the Sv39 extension. Table 6. Page table entry encodings when pte.N=1 i pte.ppn[i] Description pte.napot_bits 0 0 0 0 0 ≥1 x xxxx xxx1 x xxxx xx1x x xxxx x1xx x xxxx 1000 x xxxx 0xxx x xxxx xxxx Reserved Reserved Reserved 64 KiB contiguous region Reserved Reserved - - - 4 - - NAPOT PTEs behave identically to non-NAPOT PTEs within the address-translation algorithm in Virtual Address Translation Process, except that: If the encoding in pte is valid according to Page table entry encodings when pte.N=1, then instead of returning the original value of pte, implicit reads of a NAPOT PTE return a copy of pte in which pte.ppn[i][pte.napot_bits-1:0] is replaced by vpn[i][pte.napot_bits-1:0]. If the encoding in pte is reserved according to Page table entry encodings when pte.N=1, then a page-fault exception must be raised. Implicit reads of NAPOT page table entries may create address-translation cache entries mapping a + j×PTESIZE to a copy of pte in which pte.ppn[i][pte.napot_bits-1:0] is replaced by vpn[i][pte.napot_bits-1:0], for any or all j such that j >> napot_bits = vpn[i] >> napot_bits, all for the address space identified in satp as loaded by step 1. The motivation for a NAPOT PTE is that it can be cached in a TLB as one or more entries representing the contiguous region as if it were a single (large) page covered by a single translation. This compaction can help relieve TLB pressure in some scenarios. The encoding is designed to fit within the pre-existing Sv39, Sv48, and Sv57 PTE formats so as not to disrupt existing implementations or designs that choose not to implement the scheme. It is also designed so as not to complicate the definition of the address-translation algorithm. The address translation cache abstraction captures the behavior that would result from the creation of a single TLB entry covering the entire NAPOT region. It is also designed to be consistent with implementations that support NAPOT PTEs by splitting the NAPOT region into TLB entries covering any smaller power-of-two region sizes. For example, a 64 KiB NAPOT PTE might trigger the creation of 16 standard 4 KiB TLB entries, all with contents generated from the NAPOT PTE (even if the PTEs for the other 4 KiB regions have different contents). In typical usage scenarios, NAPOT PTEs in the same region will have the same attributes, same PPNs, and same values for bits 5-0. RSW remains reserved for supervisor software control. It is the responsibility of the OS and/or hypervisor to configure the page tables in such a way that there are no inconsistencies between NAPOT PTEs and other NAPOT or non-NAPOT PTEs that overlap the same address range. If an update needs to be made, the OS generally should first mark all of the PTEs invalid, then issue SFENCE.VMA instruction(s) covering all 4 KiB regions within the range (either via a single SFENCE.VMA with rs1=x0, or with multiple SFENCE.VMA instructions with rs1≠x0), then update the PTE(s), as described in Supervisor Memory-Management Fence Instruction, unless any inconsistencies are known to be benign. If any inconsistencies do exist, then the effect is the same as when SFENCE.VMA is used incorrectly: one of the translations will be chosen, but the choice is unpredictable. If an implementation chooses to use a NAPOT PTE (or cached version thereof), it might not consult the PTE directly specified by the algorithm in Virtual Address Translation Process at all. Therefore, the D and A bits may not be identical across all mappings of the same address range even in typical use cases The operating system must query all NAPOT aliases of a page to determine whether that page has been accessed and/or is dirty. If the OS manually sets the A and/or D bits for a page, it is recommended that the OS also set the A and/or D bits for other NAPOT aliases as appropriate in order to avoid unnecessary traps. Just as with normal PTEs, TLBs are permitted to cache NAPOT PTEs whose V (Valid) bit is clear. Depending on need, the NAPOT scheme may be extended to other intermediate page sizes and/or to other levels of the page table in the future. The encoding is designed to accommodate other NAPOT sizes should that need arise. For example: __ i pte.ppn[i] Description pte.napot_bits 0 0 0 0 0 …​ 1 1 …​ x xxxx xxx1 x xxxx xx10 x xxxx x100 x xxxx 1000 x xxx1 0000 …​ x xxxx xxx1 x xxxx xx10 …​ 8 KiB contiguous region 16 KiB contiguous region 32 KiB contiguous region 64 KiB contiguous region 128 KiB contiguous region …​ 4 MiB contiguous region 8 MiB contiguous region …​ 1 2 3 4 5 …​ 1 2 …​ In such a case, an implementation may or may not support all options. The discoverability mechanism for this extension would be extended to allow system software to determine which sizes are supported. Other sizes may remain deliberately excluded, so that PPN bits not being used to indicate a valid NAPOT region size (e.g., the least-significant bit of pte.ppn[i]) may be repurposed for other uses in the future. However, in case finer-grained intermediate page size support proves not to be useful, we have chosen to standardize only 64 KiB support as a first step. In Sv39, Sv48, and Sv57, bits 62-61 of a leaf page table entry indicate the use of page-based memory types that override the PMA(s) for the associated memory pages. The encoding for the PBMT bits is captured in Encodings for PBMT field in Sv39, Sv48, and Sv57 PTEs.. The Svpbmt extension depends on the Sv39 extension. Table 7. Encodings for PBMT field in Sv39, Sv48, and Sv57 PTEs. Mode Value Requested Memory Attributes PMA NC IO - 0 1 2 3 None Non-cacheable, idempotent, weakly-ordered (RVWMO), main memory Non-cacheable, non-idempotent, strongly-ordered (I/O ordering), I/O Reserved for future standard use Implementations may override additional PMAs not explicitly listed in Encodings for PBMT field in Sv39, Sv48, and Sv57 PTEs.. For example, to be consistent with the characteristics of a typical I/O region, a misaligned memory access to a page with PBMT=IO might raise an exception, even if the underlying region were main memory and the same access would have succeeded for PBMT=PMA. Future extensions may provide more and/or finer-grained control over which PMAs can be overridden. For non-leaf PTEs, bits 62-61 are reserved for future standard use. Until their use is defined by a standard extension, they must be cleared by software for forward compatibility, or else a page-fault exception is raised. For leaf PTEs, setting bits 62-61 to the value 3 is reserved for future standard use. Until this value is defined by a standard extension, using this reserved value in a leaf PTE raises a page-fault exception. When PBMT settings override a main memory page into I/O or vice versa, memory accesses to such pages obey the memory ordering rules of the final effective attribute, as follows. If the underlying physical memory attribute for a page is I/O, and the page has PBMT=NC, then accesses to that page obey RVWMO. However, accesses to such pages are considered to be both I/O and main memory accesses for the purposes of FENCE, .aq, and .rl. If the underlying physical memory attribute for a page is main memory, and the page has PBMT=IO, then accesses to that page obey strong channel 0 I/O ordering rules. However, accesses to such pages are considered to be both I/O and main memory accesses for the purposes of FENCE, .aq, and .rl. A device driver written to rely on I/O strong ordering rules will not operate correctly if the address range is mapped with PBMT=NC. As such, this configuration is discouraged. It will often still be useful to map physical I/O regions using PBMT=NC so that write combining and speculative accesses can be performed. Such optimizations will likely improve performance when applied with adequate care. When Svpbmt is used with non-zero PBMT encodings, it is possible for multiple virtual aliases of the same physical page to exist simultaneously with different memory attributes. It is also possible for a U-mode or S-mode mapping through a PTE with Svpbmt enabled to observe different memory attributes for a given region of physical memory than a concurrent access to the same page performed by M-mode or when MODE=Bare. In such cases, the behaviors dictated by the attributes (including coherence, which is otherwise unaffected) may be violated. Accessing the same location using different attributes that are both non-cacheable (e.g., NC and IO) does not cause loss of coherence, but might result in weaker memory ordering than the stricter attribute ordinarily guarantees. Executing a fence iorw, iorw instruction between such accesses suffices to prevent loss of memory ordering. Accessing the same location using different cacheability attributes may cause loss of coherence. Executing the following sequence between such accesses prevents both loss of coherence and loss of memory ordering: fence iorw, iorw, followed by cbo.flush to an address of that location, followed by a fence iorw, iorw. It follows that, if the same location might later be referenced using the original attributes, then this sequence must be repeated beforehand. In certain cases, a weaker sequence might suffice to prevent loss of coherence. These situations will be detailed following the forthcoming formalization of the interaction of the RVWMO memory model with the instructions in the Zicbom extension. When two-stage address translation is enabled within the H extension, the page-based memory types are also applied in two stages. First, if hgatp.MODE is not equal to zero, non-zero G-stage PTE PBMT bits override the attributes in the PMA to produce an intermediate set of attributes. Otherwise, the PMAs serve as the intermediate attributes. Second, if vsatp.MODE is not equal to zero, non-zero VS-stage PTE PBMT bits override the intermediate attributes to produce the final set of attributes used by accesses to the page in question. Otherwise, the intermediate attributes are used as the final set of attributes. These final attributes apply to implicit and explicit accesses that are subject to both stages of address translation. For accesses that are not subject to the first stage of address translation, e.g. VS-stage page-table accesses, the intermediate attributes apply instead. The Svinval extension splits SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA instructions into finer-grained invalidation and ordering operations that can be more efficiently batched or pipelined on certain classes of high-performance implementation. The SINVAL.VMA instruction invalidates any address-translation cache entries that an SFENCE.VMA instruction with the same values of rs1 and rs2 would invalidate. However, unlike SFENCE.VMA, SINVAL.VMA instructions are only ordered with respect to SFENCE.VMA, SFENCE.W.INVAL, and SFENCE.INVAL.IR instructions as defined below. The SFENCE.W.INVAL instruction guarantees that any previous stores already visible to the current RISC-V hart are ordered before subsequent SINVAL.VMA instructions executed by the same hart. The SFENCE.INVAL.IR instruction guarantees that any previous SINVAL.VMA instructions executed by the current hart are ordered before subsequent implicit references by that hart to the memory-management data structures. When executed in order (but not necessarily consecutively) by a single hart, the sequence SFENCE.W.INVAL, SINVAL.VMA, and SFENCE.INVAL.IR has the same effect as a hypothetical SFENCE.VMA instruction in which: the values of rs1 and rs2 for the SFENCE.VMA are the same as those used in the SINVAL.VMA, reads and writes prior to the SFENCE.W.INVAL are considered to be those prior to the SFENCE.VMA, and reads and writes following the SFENCE.INVAL.IR are considered to be those subsequent to the SFENCE.VMA. If the hypervisor extension is implemented, the Svinval extension also provides two additional instructions: HINVAL.VVMA and HINVAL.GVMA. These have the same semantics as SINVAL.VMA, except that they combine with SFENCE.W.INVAL and SFENCE.INVAL.IR to replace HFENCE.VVMA and HFENCE.GVMA, respectively, instead of SFENCE.VMA. In addition, HINVAL.GVMA uses VMIDs instead of ASIDs. SINVAL.VMA, HINVAL.VVMA, and HINVAL.GVMA require the same permissions and raise the same exceptions as SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA, respectively. In particular, an attempt to execute any of these instructions in U-mode always raises an illegal-instruction exception, and an attempt to execute SINVAL.VMA or HINVAL.GVMA in S-mode or HS-mode when mstatus.TVM=1 also raises an illegal-instruction exception. An attempt to execute HINVAL.VVMA or HINVAL.GVMA in VS-mode or VU-mode, or to execute SINVAL.VMA in VU-mode, raises a virtual-instruction exception. When hstatus.VTVM=1, an attempt to execute SINVAL.VMA in VS-mode also raises a virtual-instruction exception. Attempting to execute SFENCE.W.INVAL or SFENCE.INVAL.IR in U-mode raises an illegal-instruction exception. Doing so in VU-mode raises a virtual-instruction exception. SFENCE.W.INVAL and SFENCE.INVAL.IR are unaffected by the mstatus.TVM and hstatus.VTVM fields and hence are always permitted in S-mode and VS-mode. SFENCE.W.INVAL and SFENCE.INVAL.IR instructions do not need to be trapped when mstatus.TVM=1 or when hstatus.VTVM=1, as they only have ordering effects but no visible side effects. Trapping of the SINVAL.VMA instruction is sufficient to enable emulation of the intended overall TLB maintenance functionality. In typical usage, software will invalidate a range of virtual addresses in the address-translation caches by executing an SFENCE.W.INVAL instruction, executing a series of SINVAL.VMA, HINVAL.VVMA, or HINVAL.GVMA instructions to the addresses (and optionally ASIDs or VMIDs) in question, and then executing an SFENCE.INVAL.IR instruction. High-performance implementations will be able to pipeline the address-translation cache invalidation operations, and will defer any pipeline stalls or other memory ordering enforcement until an SFENCE.W.INVAL, SFENCE.INVAL.IR, SFENCE.VMA, HFENCE.GVMA, or HFENCE.VVMA instruction is executed. Simpler implementations may implement SINVAL.VMA, HINVAL.VVMA, and HINVAL.GVMA identically to SFENCE.VMA, HFENCE.VVMA, and HFENCE.GVMA, respectively, while implementing SFENCE.W.INVAL and SFENCE.INVAL.IR instructions as no-ops. The Svadu extension adds support and CSR controls for hardware updating of PTE A/D bits. If the Svadu extension is implemented, the menvcfg.ADUE field is writable. If the hypervisor extension is additionally implemented, the henvcfg.ADUE field is also writable. See [sec:menvcfg] and [sec:henvcfg] for the definitions of those fields. Addressing and Memory Protection defines the semantics of hardware updating of A/D bits. When hardware updating of A/D bits is disabled, the Svade extension, which mandates exceptions when A/D bits need be set, instead takes effect. The Svade extension is also defined in Addressing and Memory Protection. When the Svvptc extension is implemented, explicit stores by a hart that update the Valid bit of leaf and/or non-leaf PTEs from 0 to 1 and are visible to a hart will eventually become visible within a bounded timeframe to subsequent implicit accesses by that hart to such PTEs. Svvptc relieves an operating system from executing certain memory-management instructions, such as SFENCE.VMA or SINVAL.VMA, which would normally be used to synchronize the hart’s address-translation caches when a memory-resident PTE is changed from Invalid to Valid. Synchronizing the hart’s address-translation caches with other forms of updates to a memory-resident PTE, including when a PTE is changed from Valid to Invalid, requires the use of suitable memory-management instructions. Svvptc guarantees that a change to a PTE from Invalid to Valid is made visible within a bounded time, thereby making the execution of these memory-management instructions redundant. The performance benefit of eliding these instructions outweighs the cost of an occasional gratuitous additional page fault that may occur. Depending on the microarchitecture, some possible ways to facilitate implementation of Svvptc include: not having any address-translation caches, not storing Invalid PTEs in the address-translation caches, automatically evicting Invalid PTEs using a bounded timer, or making address-translation caches coherent with store instructions that modify PTEs. Quality of Service (QoS) is defined as the minimal end-to-end performance guaranteed in advance by a service level agreement (SLA) to a workload. Performance metrics might include measures such as instructions per cycle (IPC), latency of service, etc. When multiple workloads execute concurrently on modern processors—equipped with large core counts, multiple cache hierarchies, and multiple memory controllers—the performance of any given workload becomes less deterministic, or even non-deterministic, due to shared resource contention. To manage performance variability, system software needs resource allocation and monitoring capabilities. These capabilities allow for the reservation of resources like cache and bandwidth, thus meeting individual performance targets while minimizing interference. For resource management, hardware should provide monitoring features that allow system software to profile workload resource consumption and allocate resources accordingly. To facilitate this, the QoS Identifiers extension (Ssqosid) introduces the srmcfg register, which configures a hart with two identifiers: a Resource Control ID (RCID) and a Monitoring Counter ID (MCID). These identifiers accompany each request issued by the hart to shared resource controllers. Additional metadata, like the nature of the memory access and the ID of the originating supervisor domain, can accompany RCID and MCID. Resource controllers may use this metadata for differentiated service such as a different capacity allocation for code storage vs. data storage. Resource controllers can use this data for security policies such as not exposing statistics of one security domain to another. These identifiers are crucial for the RISC-V Capacity and Bandwidth Controller QoS Register Interface (CBQRI) specification, which provides methods for setting resource usage limits and monitoring resource consumption. The RCID controls resource allocations, while the MCID is used for tracking resource usage. The Ssqosid extension does not require that S-mode mode be implemented. The srmcfg register is an SXLEN-bit read/write register used to configure a Resource Control ID (RCID) and a Monitoring Counter ID (MCID). Both RCID and MCID are WARL fields. The register is formatted as shown in Supervisor Resource Management Configuration (srmcfg) register for SXLEN=64 when SXLEN=64 and Supervisor Resource Management Configuration (srmcfg) register for SXLEN=32 when SXLEN=32. The RCID and MCID accompany each request made by the hart to shared resource controllers. The RCID is used to determine the resource allocations (e.g., cache occupancy limits, memory bandwidth limits, etc.) to enforce. The MCID is used to identify a counter to monitor resource usage. Figure 29. Supervisor Resource Management Configuration (srmcfg) register for SXLEN=64 Figure 30. Supervisor Resource Management Configuration (srmcfg) register for SXLEN=32 The RCID and MCID configured in the srmcfg CSR apply to all privilege modes of software execution on that hart by default, but this behavior may be overridden by future extensions. If extension Smstateen is implemented together with Ssqosid, then Ssqosid also requires the SRMCFG bit in mstateen0 to be implemented. If mstateen0.SRMCFG is 0, attempts to access srmcfg in privilege modes less privileged than M-mode raise an illegal-instruction exception. If mstateen0.SRMCFG is 1 or if extension Smstateen is not implemented, attempts to access srmcfg when V=1 raise a virtual-instruction exception. A reset value of 0 is suggested for the RCID field matching resource controllers' default behavior of associating all capacity with RCID=0. The MCID reset value does not affect functionality and may be implementation-defined. Typically, fewer bits are allocated for RCID (e.g., to support tens of RCIDs) than for MCID (e.g., to support hundreds of MCIDs). A common RCID is usually used to group apps or VMs, pooling resource allocations to meet collective SLAs. If an SLA breach occurs, unique MCIDs enable granular monitoring, aiding decisions on resource adjustment, associating a different RCID with a subset of members, or migrating members to other machines. The larger pool of MCIDs speeds up this analysis. The RCID and MCID in srmcfg apply across all privilege levels on the hart. Typically, higher-privilege modes don’t modify srmcfg, as they often serve lower-privileged tasks. If differentiation is needed, higher privilege code can update srmcfg and restore it before returning to a lower privilege level. In VM environments, hypervisors usually manage resource allocations, keeping the Guest OS out of QoS flows. If needed, the hypervisor can virtualize srmcfg CSR for a VM using the virtual-instruction exceptions triggered upon Guest access. If the direct selection of RCID and MCID by the VM becomes common and emulation overhead is an issue, future extensions may allow VS-mode to use a selector for a hypervisor-configured set of CSRs holding RCID and MCID values designated for that Guest OS use. During context switches, the supervisor may choose to execute with the srmcfg of the outgoing context to attribute the execution to it. Prior to restoring the new context, it switches to the new VM’s srmcfg. The supervisor can also use a separate configuration for execution not to be attributed to either contexts.","title":"Supervisor-Level ISA, Version 1.13","component":"isa","version":"v20250508","name":"supervisor","url":"/isa/priv/supervisor.html","titles":[{"text":"Supervisor CSRs","hash":"supervisor-csrs","id":1},{"text":"Supervisor Status (sstatus) Register","hash":"sstatus","id":2},{"text":"Base ISA Control in sstatus Register","hash":"base-isa-control-in-sstatus-register","id":3},{"text":"Memory Privilege in sstatus Register","hash":"sum","id":4},{"text":"Endianness Control in sstatus Register","hash":"endianness-control-in-sstatus-register","id":5},{"text":"Previous Expected Landing Pad (ELP) State in sstatus Register","hash":"previous-expected-landing-pad-elp-state-in-sstatus-register","id":6},{"text":"Double Trap Control in sstatus Register","hash":"supv-double-trap","id":7},{"text":"Supervisor Trap Vector Base Address (stvec)  Register","hash":"supervisor-trap-vector-base-address-stvec-register","id":8},{"text":"Supervisor Interrupt (sip and sie) Registers","hash":"supervisor-interrupt-sip-and-sie-registers","id":9},{"text":"Supervisor Timers and Performance Counters","hash":"supervisor-timers-and-performance-counters","id":10},{"text":"Counter-Enable (scounteren) Register","hash":"counter-enable-scounteren-register","id":11},{"text":"Supervisor Scratch (sscratch) Register","hash":"supervisor-scratch-sscratch-register","id":12},{"text":"Supervisor Exception Program Counter (sepc) Register","hash":"supervisor-exception-program-counter-sepc-register","id":13},{"text":"Supervisor Cause (scause) Register","hash":"scause","id":14},{"text":"Supervisor Trap Value (stval) Register","hash":"supervisor-trap-value-stval-register","id":15},{"text":"Supervisor Environment Configuration (senvcfg) Register","hash":"sec:senvcfg","id":16},{"text":"Supervisor Address Translation and Protection (satp) Register","hash":"satp","id":17},{"text":"Supervisor Instructions","hash":"supervisor-instructions","id":18},{"text":"Supervisor Memory-Management Fence Instruction","hash":"sfence.vma","id":19},{"text":"Sv32: Page-Based 32-bit Virtual-Memory Systems","hash":"sv32","id":20},{"text":"Addressing and Memory Protection","hash":"translation","id":21},{"text":"Virtual Address Translation Process","hash":"sv32algorithm","id":22},{"text":"Sv39: Page-Based 39-bit Virtual-Memory System","hash":"sv39","id":23},{"text":"Addressing and Memory Protection","hash":"addressing-and-memory-protection","id":24},{"text":"Sv48: Page-Based 48-bit Virtual-Memory System","hash":"sv48","id":25},{"text":"Addressing and Memory Protection","hash":"addressing-and-memory-protection-1","id":26},{"text":"Sv57: Page-Based 57-bit Virtual-Memory System","hash":"sv57","id":27},{"text":"Addressing and Memory Protection","hash":"addressing-and-memory-protection-2","id":28},{"text":"\"Svnapot\" Extension for NAPOT Translation Contiguity, Version 1.0","hash":"svnapot","id":29},{"text":"\"Svpbmt\" Extension for Page-Based Memory Types, Version 1.0","hash":"svpbmt","id":30},{"text":"\"Svinval\" Extension for Fine-Grained Address-Translation Cache Invalidation, Version 1.0","hash":"svinval","id":31},{"text":"\"Svadu\" Extension for Hardware Updating of A/D Bits, Version 1.0","hash":"sec:svadu","id":32},{"text":"\"Svvptc\" Extension for Obviating Memory-Management Instructions after Marking PTEs Valid, Version 1.0","hash":"sec:svvptc","id":33},{"text":"\"Ssqosid\" Extension for Quality-of-Service (QoS) Identifiers, Version 1.0","hash":"ssqosid","id":34},{"text":"Supervisor Resource Management Configuration (srmcfg) register","hash":"supervisor-resource-management-configuration-srmcfg-register","id":35}]},"27":{"id":27,"text":"ISA Specifications Volume II: RISC-V Privileged ISA Specification Pointer Masking Extensions, Version 1.0.0 RISC-V Pointer Masking (PM) is a feature that, when enabled, causes the CPU to ignore the upper bits of the effective address (these terms will be defined more precisely in the Background section). This allows these bits to be used in whichever way the application chooses. The version of the extension being described here specifically targets tag checks: When an address is accessed, the tag stored in the masked bits can be compared against a range-based tag. This is used for dynamic safety checkers such as HWASAN [87]. Such tools can be applied in all privilege modes (U, S and M). HWASAN leverages tags in the upper bits of the address to identify memory errors such as use-after-free or buffer overflow errors. By storing a pointer tag in the upper bits of the address and checking it against a memory tag stored in a side table, it can identify whether a pointer is pointing to a valid location. Doing this without hardware support introduces significant overheads since the pointer tag needs to be manually removed for every conventional memory operation. Pointer masking support reduces these overheads. Pointer masking only adds the ability to ignore pointer tags during regular memory accesses. The tag checks themselves can be implemented in software or hardware. If implemented in software, pointer masking still provides performance benefits since non-checked accesses do not need to transform the address before every memory access. Hardware implementations are expected to provide even larger benefits due to performing tag checks out-of-band and hardening security guarantees derived from these checks. We anticipate that future extensions may build on pointer masking to support this functionality in hardware. It is worth mentioning that while HWASAN is the primary use-case for the current pointer masking extension, a number of other hardware/software features may be implemented leveraging Pointer Masking. Some of these use cases include sandboxing, object type checks and garbage collection bits in runtime systems. Note that the current version of the spec does not explicitly address these use cases, but future extensions may build on it to do so. While we describe the high-level concepts of pointer masking as if it was a single extension, it is, in reality, a family of extensions that implementations or profiles may choose to individually include or exclude (see [_pointer_masking_extensions]). We now define basic terms. Note that these rely on the definition of an “ignore” transformation, which is defined in The “Ignore” Transformation. Effective address (as defined in the RISC-V Base ISA): A load/store effective address sent to the memory subsystem (e.g., as generated during the execution of load/store instructions). This does not include addresses corresponding to implicit accesses, such as page table walks. Masked bits: The upper PMLEN bits of an address, where PMLEN is a configurable parameter. We will use PMLEN consistently throughout this document to refer to this parameter. Transformed address: An effective address after the ignore transformation has been applied. Address translation mode: The MODE of the currently active address translation scheme as defined in the RISC-V privileged specification. This could, for example, refer to Bare, Sv39, Sv48, and Sv57. In accordance with the privileged specification, non-Bare translation modes are referred to as virtual-memory schemes. For the purpose of this specification, M-mode translation is treated as equivalent to Bare. Address validity: The RISC-V privileged spec defines validity of addresses based on the address translation mode that is currently in use (e.g., Sv57, Sv48, Sv39, etc.). For a virtual address to be valid, all bits in the unused portion of the address must be the same as the Most Significant Bit (MSB) of the used portion. For example, when page-based 48-bit virtual memory (Sv48) is used, load/store effective addresses, which are 64 bits, must have bits 63–48 all set to bit 47, or else a page-fault exception will occur. For physical addresses, validity means that bits XLEN-1 to PABITS are zero, where PABITS is the number of physical address bits supported by the processor. NVBITS: The upper bits within a virtual address that have no effect on addressing memory and are only used for validity checks. These bits depend on the currently active address translation mode. For example, in Sv48, these are bits 63-48. VBITS: The bits within a virtual address that affect which memory is addressed. These are the bits of an address which are used to index into page tables. The ignore transformation differs depending on whether it applies to a virtual or physical address. For virtual addresses, it replaces the upper PMLEN bits with the sign extension of the PMLEN+1st bit. \"Ignore\" Transformation for virtual addresses, expressed in Verilog code. transformed_effective_address = {{PMLEN{effective_address[XLEN-PMLEN-1]}}, effective_address[XLEN-PMLEN-1:0]} If PMLEN is less than or equal to NVBITS for the largest supported address translation mode on a given architecture, this is equivalent to ignoring a subset of NVBITS. This enables cheap implementations that modify validity checks in the CPU instead of performing the sign extension. When applied to a physical address, including guest-physical addresses (i.e., all cases except when the active satp register’s MODE field != Bare), the ignore transformation replaces the upper PMLEN bits with 0. This includes both the case of running in M-mode and running in other privilege modes with Bare address translation mode. \"Ignore\" Transformation for physical addresses, expressed in Verilog code. transformed_effective_address = {{PMLEN{0}}, effective_address[XLEN-PMLEN-1:0]} This definition is consistent with the way that RISC-V already handles physical and virtual addresses differently. While the unused upper bits of virtual addresses are the sign-extension of the used bits (see the definition of \"address validity\" in [_definitions]), the equivalent bits in physical addresses are zero-extended. This is necessary due to their interactions with other mechanisms such as Physical Memory Protection (PMP). When pointer masking is enabled, the ignore transformation will be applied to every explicit memory access (e.g., loads/stores, atomics operations, and floating point loads/stores). The transformation does not apply to implicit accesses such as page table walks or instruction fetches. The set of accesses that pointer masking applies to is described in [_memory_accesses_subject_to_pointer_masking]. Pointer masking does not change the underlying address generation logic or permission checks. Under a fixed address translation mode, it is semantically equivalent to replacing a subset of instructions (e.g., loads and stores) with an instruction sequence that applies the ignore operation to the target address of this instruction and then applies the instruction to the transformed address. References to address translation and other implementation details in the text are primarily to explain design decisions and common implementation patterns. Note that pointer masking is purely an arithmetic operation on the address that makes no assumption about the meaning of the addresses it is applied to. Pointer masking with the same value of PMLEN always has the same effect for the same type of address (virtual or physical). This ensures that code that relies on pointer masking does not need to be aware of the environment it runs in once pointer masking has been enabled, as long as the value of PMLEN is known, and whether or not addresses are virtual or physical. For example, the same application or library code can run in user mode, supervisor mode or M-mode (with different address translation modes) without modification. A common scenario for such code is that addresses are generated by mmap system calls. This abstracts away the details of the underlying address translation mode from the application code. Software therefore needs to be aware of the value of PMLEN to ensure that its minimally required number of tag bits is supported. [_determining_the_value_of_pmlen] covers how this value is derived. Table 1 shows an example of the pointer masking transformation on a virtual address when PM is enabled for RV64 under Sv57 (PMLEN=7). Table 1. Example of PM address translation for RV64 under Sv57 Page-based profile Sv57 on RV64 Effective Address 0xABFFFFFF12345678 NVBITS[1010101] VBITS[11111111111111111111111110001…​000] PMLEN 7 Mask 0x01FFFFFFFFFFFFFF NVBITS[0000000] VBITS[11111111111111111111111111111…​111] PMLEN+1st bit from the top (i.e., bit XLEN-PMLEN-1) 1 Transformed effective address 0xFFFFFFFF12345678 NVBITS[1111111] VBITS[11111111111111111111111110001…​000] If the address was a physical address rather than a virtual address with Sv57, the transformed address with PMLEN=7 would be 0x1FFFFFF12345678. From an implementation perspective, ignoring bits is deeply connected to the maximum virtual and physical address space supported by the processor (e.g., Bare, Sv48, Sv57). In particular, applying the above transformation is cheap if it covers only bits that are not used by any supported address translation mode (as it is equivalent to switching off validity checks). Masking NVBITS beyond those bits is more expensive as it requires ignoring them in the TLB tag, and even more expensive if the masked bits extend into the VBITS portion of the address (as it requires performing the actual sign extension). Similarly, when running in Bare or M mode, it is common for implementations to not use a particular number of bits at the top of the physical address range and fix them to zero. Applying the ignore transformation to those bits is cheap as well, since it will result in a valid physical address with all the upper bits fixed to 0. The current standard only supports PMLEN=XLEN-48 (i.e., PMLEN=16 in RV64) and PMLEN=XLEN-57 (i.e., PMLEN=7 in RV64). A setting has been reserved to potentially support other values of PMLEN in future standards. In such future standards, different supported values of PMLEN may be defined for each privilege mode (U/VU, S/HS, and M). Future versions of the pointer masking extension may introduce the ability to freely configure the value of PMLEN. The current extension does not define the behavior if PMLEN was different from the values defined above. In particular, there is no guarantee that a future pointer masking extension would define the ignore operation in the same way for those values of PMLEN. Pointer masking is controlled separately for different privilege modes. The subset of supported privilege modes is determined by the set of supported pointer masking extensions. Different privilege modes may have different pointer masking settings active simultaneously and the hardware will automatically apply the pointer masking settings of the currently active privilege mode. A privilege mode’s pointer masking setting is configured by bits in configuration registers of the next-higher privilege mode. Note that the pointer masking setting that is applied only depends on the active privilege mode, not on the address that is being masked. Some operating systems (e.g., Linux) may use certain bits in the address to disambiguate between different types of addresses (e.g., kernel and user-mode addresses). Pointer masking does not take these semantics into account and is purely an arithmetic operation on the address it is given. Linux places kernel addresses in the upper half of the address space and user addresses in the lower half of the address space. As such, the MSB is often used to identify the type of a particular address. With pointer masking enabled, this role is now played by bit XLEN-PMLEN-1 and code that checks whether a pointer is a kernel or a user address needs to inspect this bit instead. For backward compatibility, it may be desirable that the MSB still indicates whether an address is a user or a kernel address. An operating system’s ABI may mandate this, but it does not affect the pointer masking mechanism itself. For example, the Linux ABI may choose to mandate that the MSB is not used for tagging and replicates bit XLEN-PMLEN-1 bit (note that for such a mechanism to be secure, the kernel needs to check the MSB of any user mode-supplied address and ensure that this invariant holds before using it; alternatively, it can apply the transformation from Listing 1 or 2 to ensure that the MSB is set to the correct value). Pointer masking applies to all explicit memory accesses. Currently, in the Base and Privileged ISAs, these are: Base Instruction Set: LB, LH, LW, LBU, LHU, LWU, LD, SB, SH, SW, SD. Atomics: All instructions in RV32A and RV64A. Floating Point: FLW, FLD, FLQ, FSW, FSD, FSQ. Compressed: All instructions mapping to any of the above, and C.LWSP, C.LDSP, C.LQSP, C.FLWSP, C.FLDSP, C.SWSP, C.SDSP, C.SQSP, C.FSWSP, C.FSDSP. Hypervisor Extension: HLV.*, HSV.* (in some cases; see [_ssnpm]). Cache Management Operations: All instructions in Zicbom, Zicbop and Zicboz. Vector Extension: All vector load and store instructions in the ratified RVV 1.0 spec. Zicfiss Extension: SSPUSH, C.SSPUSH, SSPOPCHK, C.SSPOPCHK, SSAMOSWAP.W/D. Assorted: FENCE, FENCE.I (if the currently unused address fields become enabled in the future). This list will grow over time as new extensions introduce new instructions that perform explicit memory accesses. For other extensions, pointer masking applies to all explicit memory accesses by default. Future extensions may add specific language to indicate whether particular accesses are or are not included in pointer masking. It is worth noting that pointer masking is not applied to SFENCE.*, HFENCE.*, SINVAL.*, or HINVAL.*. When such an operation is invoked, it is the responsibility of the software to provide the correct address. MPRV and SPVP affect pointer masking as well, causing the pointer masking settings of the effective privilege mode to be applied. When MXR is in effect at the effective privilege mode where explicit memory access is performed, pointer masking does not apply. Note that this includes cases where page-based virtual memory is not in effect; i.e., although MXR has no effect on permissions checks when page-based virtual memory is not in effect, it is still used in determining whether or not pointer masking should be applied. Cache Management Operations (CMOs) must respect and take into account pointer masking. Otherwise, a few serious security problems can appear, including: CBO.ZERO may work as a STORE operation. If pointer masking is not respected, it would be possible to write to memory bypassing the mask enforcement. If CMOs did not respect pointer masking, it would be possible to weaponize this in a side-channel attack. For example, U-mode would be able to flush a physical address (without masking) that it should not be permitted to. Pointer masking only applies to accesses generated by instructions on the CPU (including CPU extensions such as an FPU). E.g., it does not apply to accesses generated by page table walks, the IOMMU, or devices. Pointer Masking does not apply to DMA controllers and other devices. It is therefore the responsibility of the software to manually untag these addresses. Misaligned accesses are supported, subject to the same limitations as in the absence of pointer masking. The behavior is identical to applying the pointer masking transformation to every constituent aligned memory access. In other words, the accessed bytes should be identical to the bytes that would be accessed if the pointer masking transformation was individually applied to every byte of the access without pointer masking. This ensures that both hardware implementations and emulation of misaligned accesses in M-mode behave the same way, and that the M-mode implementation is identical whether or not pointer masking is enabled (e.g., such an implementation may leverage MPRV to apply the correct privilege mode’s pointer masking setting). No pointer masking operations are applied when software reads/writes to CSRs, including those meant to hold addresses. If software stores tagged addresses into such CSRs, data load or data store operations based on those addresses are subject to pointer masking only if they are explicit ([_memory_accesses_subject_to_pointer_masking]) and pointer masking is enabled for the privilege mode that performs the access. The implemented WARL width of CSRs is unaffected by pointer masking (e.g., if a CSR supports 52 bits of valid addresses and pointer masking is supported with PMLEN=16, the necessary number of WARL bits remains 52 independently of whether pointer masking is enabled or disabled). In contrast to software writes, pointer masking is applied for hardware writes to a CSR (e.g., when the hardware writes the transformed address to stval when taking an exception). Pointer masking is also applied to the memory access address when matching address triggers in debug. For example, software is free to write a tagged or untagged address to stvec, but on trap delivery (e.g., due to an exception or interrupt), pointer masking will not be applied to the address of the trap handler. However, pointer masking will be applied by the hardware to any address written into stval when delivering an exception. The rationale for this choice is that delivering the additional bits may add overheads in some hardware implementations. Further, pointer masking is configured per privilege mode, so all trap handlers in supervisor mode would need to be careful to configure pointer masking the same way as user mode or manually unmask (which is expensive). Pointer masking refers to a number of separate extensions, all of which are privileged. This approach is used to capture optionality of pointer masking features. Profiles and implementations may choose to support an arbitrary subset of these extensions and must define valid ranges for their corresponding values of PMLEN. Extensions: Ssnpm: A supervisor-level extension that provides pointer masking for the next lower privilege mode (U-mode), and for VS- and VU-modes if the H extension is present. Smnpm: A machine-level extension that provides pointer masking for the next lower privilege mode (S/HS if S-mode is implemented, or U-mode otherwise). Smmpm: A machine-level extension that provides pointer masking for M-mode. See [_isa_extensions] for details on how each of these extensions is configured. In addition, the pointer masking standard defines two extensions that describe an execution environment but have no bearing on hardware implementations. These extensions are intended to be used in profile specifications where a User profile or a Supervisor profile can only reference User level or Supervisor level pointer masking functionality, and not the associated CSR controls that exist at a higher privilege level (i.e., in the execution environment). Sspm: An extension that indicates that there is pointer-masking support available in supervisor mode, with some facility provided in the supervisor execution environment to control pointer masking. Supm: An extension that indicates that there is pointer-masking support available in user mode, with some facility provided in the application execution environment to control pointer masking. The precise nature of these facilities is left to the respective execution environment. Pointer masking only applies to RV64. In RV32, trying to enable pointer masking will result in an illegal WARL write and not update the pointer masking configuration bits (see [_isa_extensions] for details). The same is the case on RV64 or larger systems when UXL/SXL/MXL is set to 1 for the corresponding privilege mode. Note that in RV32, the CSR bits introduced by pointer masking are still present, for compatibility between RV32 and larger systems with UXL/SXL/MXL set to 1. Setting UXL/SXL/MXL to 1 will clear the corresponding pointer masking configuration bits. Note that setting UXL/SXL/MXL to 1 and back to 0 does not preserve the previous values of the PMM bits. This includes the case of entering an RV32 virtual machine from an RV64 hypervisor and returning. This section describes the pointer masking extensions Smmpm, Smnpm and Ssnpm. All of these extensions are privileged ISA extensions and do not add any new CSRs. For the definitions of Sspm and Supm, see [_pointer_masking_extensions]. Future extensions may introduce additional CSRs to allow different privilege modes to modify their own pointer masking settings. This may be required for future use cases in managed runtime systems that are not currently addressed as part of this extension. Each extension introduces a 2-bit WARL field (PMM) that may take on the following values to set the pointer masking settings for a particular privilege mode. Table 2. Possible values of PMM WARL field. Value Description 00 Pointer masking is disabled (PMLEN=0) 01 Reserved 10 Pointer masking is enabled with PMLEN=XLEN-57 (PMLEN=7 on RV64) 11 Pointer masking is enabled with PMLEN=XLEN-48 (PMLEN=16 on RV64) All of these fields are read-only 0 on RV32 systems. Ssnpm adds a new 2-bit WARL field (PMM) to bits 33:32 of senvcfg. Setting PMM enables or disables pointer masking for the next lower privilege mode (U/VU mode), according to the values in Table 2. In systems where the H Extension is present, Ssnpm also adds a new 2-bit WARL field (PMM) to bits 33:32 of henvcfg. Setting PMM enables or disables pointer masking for VS-mode, according to the values in Table 2. Further, a 2-bit WARL field (HUPMM) is added to bits 49:48 of hstatus. Setting hstatus.HUPMM enables or disables pointer masking for HLV.* and HSV.* instructions in U-mode, according to the values in Table 2, when their explicit memory access is performed as though in VU-mode. In HS- and M-modes, pointer masking for these instructions is enabled or disabled by senvcfg.PMM, when their explicit memory access is performed as though in VU-mode. Setting henvcfg.PMM enables or disables pointer masking for HLV.* and HSV.* when their explicit memory access is performed as though in VS-mode. The hypervisor should copy the value written to senvcfg.PMM by the guest to the hstatus.HUPMM field prior to invoking HLV.* or HSV.* instructions in U-mode. The memory accesses performed by the HLVX.* instructions are not subject to pointer masking. HLVX.* instructions, designed for emulating implicit access to fetch instructions from guest memory, perform memory accesses that are exempt from pointer masking to facilitate this emulation. For the same reason, pointer masking does not apply when MXR is set. Smnpm adds a new 2-bit WARL field (PMM) to bits 33:32 of menvcfg. Setting PMM enables or disables pointer masking for the next lower privilege mode (S-/HS-mode if S-mode is implemented, or U-mode otherwise), according to the values in Table 2. The type of address determines which type of pointer masking is applied. For example, when running with virtualization in VS/VU mode with vsatp.MODE = Bare, physical address pointer masking (zero extension) applies. Smmpm adds a new 2-bit WARL field (PMM) to bits 33:32 of mseccfg. The presence of Smmpm implies the presence of the mseccfg register, even if it would not otherwise be present. Setting PMM enables or disables pointer masking for M mode, according to the values in Table 2. Since pointer masking applies to the effective address only and does not affect any memory-management data structures, no SFENCE.VMA is required after enabling/disabling pointer masking. Guest physical addresses (GPAs) are 2 bits wider than the corresponding virtual address translation modes, resulting in additional address translation schemes Sv32x4, Sv39x4, Sv48x4 and Sv57x4 for translating guest physical addresses to supervisor physical addresses. When running with virtualization in VS/VU mode with vsatp.MODE = Bare, this means that those two bits may be subject to pointer masking, depending on hgatp.MODE and senvcfg.PMM/henvcfg.PMM (for VU/VS mode). If vsatp.MODE != BARE, this issue does not apply. An implementation could mask those two bits on the TLB access path, but this can have a significant timing impact. Alternatively, an implementation may choose to \"waste\" TLB capacity by having up to 4 duplicate entries for each page. In this case, the pointer masking operation can be applied on the TLB refill path, where it is unlikely to affect timing. To support this approach, some TLB entries need to be flushed when PMLEN changes in a way that may affect these duplicate entries. To support implementations where (XLEN-PMLEN) can be less than the GPA width supported by hgatp.MODE, hypervisors should execute an HFENCE.GVMA with rs1=x0 if the henvcfg.PMM is changed from or to a value where (XLEN-PMLEN) is less than GPA width supported by the hgatp translation mode of that guest. Specifically, these cases are: PMLEN=7 and hgatp.MODE=sv57x4 PMLEN=16 and hgatp.MODE=sv57x4 PMLEN=16 and hgatp.MODE=sv48x4 Smmpm implementations need to satisfy max(largest supported virtual address size, largest supported supervisor physical address size) ⇐ (XLEN - PMLEN) bits to avoid any masking logic on the TLB access path. Implementation of an address-specific HFENCE.GVMA should either ignore the address argument, or should ignore the top masked GPA bits of entries when comparing for an address match. As described in [_determining_the_value_of_pmlen], the supported values of PMLEN may depend on the effective privilege mode. The current standard only defines PMLEN=XLEN-48 and PMLEN=XLEN-57, but this assumption may be relaxed in future extensions and profiles. Trying to enable pointer masking in an unsupported scenario represents an illegal write to the corresponding pointer masking enable bit and follows WARL semantics. Future profiles may choose to define certain combinations of privilege modes and supported values of PMLEN as mandatory. An option that was considered but discarded was to allow implementations to set PMLEN depending on the active addressing mode. For example, PMLEN could be set to 16 for Sv48 and to 25 for Sv39. However, having a single value of PMLEN (e.g., setting PMLEN to 16 for both Sv39 and Sv48 rather than 25) facilitates TLB implementations in designs that support Sv39 and Sv48 but not Sv57. 16 bits are sufficient for current pointer masking use cases but allow for a TLB implementation that matches against the same number of virtual tag bits independently of whether it is running with Sv39 or Sv48. However, if Sv57 is supported, tag matching may need to be conditional on the current address translation mode.","title":"Pointer Masking Extensions, Version 1.0.0","component":"isa","version":"v20250508","name":"zpm","url":"/isa/priv/zpm.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Background","hash":"background","id":2},{"text":"Definitions","hash":"definitions","id":3},{"text":"The “Ignore” Transformation","hash":"sec-ignore-transform","id":4},{"text":"Example","hash":"example","id":5},{"text":"Determining the Value of PMLEN","hash":"determining-the-value-of-pmlen","id":6},{"text":"Pointer Masking and Privilege Modes","hash":"pointer-masking-and-privilege-modes","id":7},{"text":"Memory Accesses Subject to Pointer Masking","hash":"memory-accesses-subject-to-pointer-masking","id":8},{"text":"Pointer Masking Extensions","hash":"pointer-masking-extensions","id":9},{"text":"ISA Extensions","hash":"isa-extensions","id":10},{"text":"Ssnpm","hash":"ssnpm","id":11},{"text":"Smnpm","hash":"smnpm","id":12},{"text":"Smmpm","hash":"smmpm","id":13},{"text":"Interaction with SFENCE.VMA","hash":"interaction-with-sfence-vma","id":14},{"text":"Interaction with Two-Stage Address Translation","hash":"interaction-with-two-stage-address-translation","id":15},{"text":"Number of Masked Bits","hash":"number-of-masked-bits","id":16}]},"28":{"id":28,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"A\" Extension for Atomic Instructions, Version 2.1 The atomic-instruction extension, named \"A\", contains instructions that atomically read-modify-write memory to support synchronization between multiple RISC-V harts running in the same memory space. The two forms of atomic instruction provided are load-reserved/store-conditional instructions and atomic fetch-and-op memory instructions. Both types of atomic instruction support various memory consistency orderings including unordered, acquire, release, and sequentially consistent semantics. These instructions allow RISC-V to support the RCsc memory consistency model. [18] After much debate, the language community and architecture community appear to have finally settled on release consistency as the standard memory consistency model and so the RISC-V atomic support is built around this model. The A extension comprises instructions provided by the Zaamo and Zalrsc extensions. The base RISC-V ISA has a relaxed memory model, with the FENCE instruction used to impose additional ordering constraints. The address space is divided by the execution environment into memory and I/O domains, and the FENCE instruction provides options to order accesses to one or both of these two address domains. To provide more efficient support for release consistency [18], each atomic instruction has two bits, aq and rl, used to specify additional memory ordering constraints as viewed by other RISC-V harts. The bits order accesses to one of the two address domains, memory or I/O, depending on which address domain the atomic instruction is accessing. No ordering constraint is implied to accesses to the other domain, and a FENCE instruction should be used to order across both domains. If both bits are clear, no additional ordering constraints are imposed on the atomic memory operation. If only the aq bit is set, the atomic memory operation is treated as an acquire access, i.e., no following memory operations on this RISC-V hart can be observed to take place before the acquire memory operation. If only the rl bit is set, the atomic memory operation is treated as a release access, i.e., the release memory operation cannot be observed to take place before any earlier memory operations on this RISC-V hart. If both the aq and rl bits are set, the atomic memory operation is sequentially consistent and cannot be observed to happen before any earlier memory operations or after any later memory operations in the same RISC-V hart and to the same address domain. Complex atomic memory operations on a single memory word or doubleword are performed with the load-reserved (LR) and store-conditional (SC) instructions. LR.W loads a word from the address in rs1, places the sign-extended value in rd, and registers a reservation set—a set of bytes that subsumes the bytes in the addressed word. SC.W conditionally writes a word in rs2 to the address in rs1: the SC.W succeeds only if the reservation is still valid and the reservation set contains the bytes being written. If the SC.W succeeds, the instruction writes the word in rs2 to memory, and it writes zero to rd. If the SC.W fails, the instruction does not write to memory, and it writes a nonzero value to rd. No SC.W instruction shall retire unless it passes memory permission checks, but it is UNSPECIFIED whether any side effects of implicit address translation and protection memory accesses (such as setting a page-table entry D bit) occur on a failed SC.W. For the purposes of memory protection, a failed SC.W may be treated like a store. Regardless of success or failure, executing an SC.W instruction invalidates any reservation held by this hart. LR.D and SC.D act analogously on doublewords and are only available on RV64. For RV64, LR.W and SC.W sign-extend the value placed in rd. Both compare-and-swap (CAS) and LR/SC can be used to build lock-free data structures. After extensive discussion, we opted for LR/SC for several reasons: 1) CAS suffers from the ABA problem, which LR/SC avoids because it monitors all writes to the address rather than only checking for changes in the data value; 2) CAS would also require a new integer instruction format to support three source operands (address, compare value, swap value) as well as a different memory system message format, which would complicate microarchitectures; 3) Furthermore, to avoid the ABA problem, other systems provide a double-wide CAS (DW-CAS) to allow a counter to be tested and incremented along with a data word. This requires reading five registers and writing two in one instruction, and also a new larger memory system message type, further complicating implementations; 4) LR/SC provides a more efficient implementation of many primitives as it only requires one load as opposed to two with CAS (one load before the CAS instruction to obtain a value for speculative computation, then a second load as part of the CAS instruction to check if value is unchanged before updating). The main disadvantage of LR/SC over CAS is livelock, which we avoid, under certain circumstances, with an architected guarantee of eventual forward progress as described below. Another concern is whether the influence of the current x86 architecture, with its DW-CAS, will complicate porting of synchronization libraries and other software that assumes DW-CAS is the basic machine primitive. A possible mitigating factor is the recent addition of transactional memory instructions to x86, which might cause a move away from DW-CAS. More generally, a multi-word atomic primitive is desirable, but there is still considerable debate about what form this should take, and guaranteeing forward progress adds complexity to a system. The failure code with value 1 encodes an unspecified failure. Other failure codes are reserved at this time. Portable software should only assume the failure code will be non-zero. We reserve a failure code of 1 to mean ''unspecified'' so that simple implementations may return this value using the existing mux required for the SLT/SLTU instructions. More specific failure codes might be defined in future versions or extensions to the ISA. For LR and SC, the Zalrsc extension requires that the address held in rs1 be naturally aligned to the size of the operand (i.e., eight-byte aligned for doublewords and four-byte aligned for words). If the address is not naturally aligned, an address-misaligned exception or an access-fault exception will be generated. The access-fault exception can be generated for a memory access that would otherwise be able to complete except for the misalignment, if the misaligned access should not be emulated. Emulating misaligned LR/SC sequences is impractical in most systems. Misaligned LR/SC sequences also raise the possibility of accessing multiple reservation sets at once, which present definitions do not provide for. An implementation can register an arbitrarily large reservation set on each LR, provided the reservation set includes all bytes of the addressed data word or doubleword. An SC can only pair with the most recent LR in program order. An SC may succeed only if no store from another hart to the reservation set can be observed to have occurred between the LR and the SC, and if there is no other SC between the LR and itself in program order. An SC may succeed only if no write from a device other than a hart to the bytes accessed by the LR instruction can be observed to have occurred between the LR and SC. Note this LR might have had a different effective address and data size, but reserved the SC’s address as part of the reservation set. Following this model, in systems with memory translation, an SC is allowed to succeed if the earlier LR reserved the same location using an alias with a different virtual address, but is also allowed to fail if the virtual address is different. To accommodate legacy devices and buses, writes from devices other than RISC-V harts are only required to invalidate reservations when they overlap the bytes accessed by the LR. These writes are not required to invalidate the reservation when they access other bytes in the reservation set. The SC must fail if the address is not within the reservation set of the most recent LR in program order. The SC must fail if a store to the reservation set from another hart can be observed to occur between the LR and SC. The SC must fail if a write from some other device to the bytes accessed by the LR can be observed to occur between the LR and SC. (If such a device writes the reservation set but does not write the bytes accessed by the LR, the SC may or may not fail.) An SC must fail if there is another SC (to any address) between the LR and the SC in program order. The precise statement of the atomicity requirements for successful LR/SC sequences is defined by the Atomicity Axiom in [rvwmo]. The platform should provide a means to determine the size and shape of the reservation set. A platform specification may constrain the size and shape of the reservation set. A store-conditional instruction to a scratch word of memory should be used to forcibly invalidate any existing load reservation: during a preemptive context switch, and if necessary when changing virtual to physical address mappings, such as when migrating pages that might contain an active reservation. The invalidation of a hart’s reservation when it executes an LR or SC imply that a hart can only hold one reservation at a time, and that an SC can only pair with the most recent LR, and LR with the next following SC, in program order. This is a restriction to the Atomicity Axiom in [rvwmo] that ensures software runs correctly on expected common implementations that operate in this manner. An SC instruction can never be observed by another RISC-V hart before the LR instruction that established the reservation. The LR/SC sequence can be given acquire semantics by setting the aq bit on the LR instruction. The LR/SC sequence can be given release semantics by by setting the rl bit on the SC instruction. Assuming suitable mappings for other atomic operations, setting the aq bit on the LR instruction, and setting the rl bit on the SC instruction makes the LR/SC sequence sequentially consistent in the C++ memory_order_seq_cst sense. Such a sequence does not act as a fence for ordering ordinary load and store instructions before and after the sequence. Specific instruction mappings for other C++ atomic operations, or stronger notions of \"sequential consistency\", may require both bits to be set on either or both of the LR or SC instruction. If neither bit is set on either LR or SC, the LR/SC sequence can be observed to occur before or after surrounding memory operations from the same RISC-V hart. This can be appropriate when the LR/SC sequence is used to implement a parallel reduction operation. Software should not set the rl bit on an LR instruction unless the aq bit is also set, nor should software set the aq bit on an SC instruction unless the rl bit is also set. LR.rl and SC.aq instructions are not guaranteed to provide any stronger ordering than those with both bits clear, but may result in lower performance. Sample code for compare-and-swap function using LR/SC. # a0 holds address of memory location # a1 holds expected value # a2 holds desired value # a0 holds return value, 0 if successful, !0 otherwise cas: lr.w t0, (a0) # Load original value. bne t0, a1, fail # Doesn't match, so fail. sc.w t0, a2, (a0) # Try to update. bnez t0, cas # Retry if store-conditional failed. li a0, 0 # Set return to success. jr ra # Return. fail: li a0, 1 # Set return to failure. jr ra # Return. LR/SC can be used to construct lock-free data structures. An example using LR/SC to implement a compare-and-swap function is shown in Sample code for compare-and-swap function using LR/SC.. If inlined, compare-and-swap functionality need only take four instructions. The Zalrsc extension defines constrained LR/SC loops, which have the following properties: The loop comprises only an LR/SC sequence and code to retry the sequence in the case of failure, and must comprise at most 16 instructions placed sequentially in memory. An LR/SC sequence begins with an LR instruction and ends with an SC instruction. The dynamic code executed between the LR and SC instructions can only contain instructions from the base ''I'' instruction set, excluding loads, stores, backward jumps, taken backward branches, JALR, FENCE, and SYSTEM instructions. Compressed forms of the aforementioned ''I'' instructions in the Zca and Zcb extensions are also permitted. The code to retry a failing LR/SC sequence can contain backwards jumps and/or branches to repeat the LR/SC sequence, but otherwise has the same constraint as the code between the LR and SC. The LR and SC addresses must lie within a memory region with the LR/SC eventuality property. The execution environment is responsible for communicating which regions have this property. The SC must be to the same effective address and of the same data size as the latest LR executed by the same hart. LR/SC sequences that do not lie within constrained LR/SC loops are unconstrained. Unconstrained LR/SC sequences might succeed on some attempts on some implementations, but might never succeed on other implementations. We restricted the length of LR/SC loops to fit within 64 contiguous instruction bytes in the base ISA to avoid undue restrictions on instruction cache and TLB size and associativity. Similarly, we disallowed other loads and stores within the loops to avoid restrictions on data-cache associativity in simple implementations that track the reservation within a private cache. The restrictions on branches and jumps limit the time that can be spent in the sequence. Floating-point operations and integer multiply/divide were disallowed to simplify the operating system’s emulation of these instructions on implementations lacking appropriate hardware support. Software is not forbidden from using unconstrained LR/SC sequences, but portable software must detect the case that the sequence repeatedly fails, then fall back to an alternate code sequence that does not rely on an unconstrained LR/SC sequence. Implementations are permitted to unconditionally fail any unconstrained LR/SC sequence. If a hart H enters a constrained LR/SC loop, the execution environment must guarantee that one of the following events eventually occurs: H or some other hart executes a successful SC to the reservation set of the LR instruction in H's constrained LR/SC loops. Some other hart executes an unconditional store or AMO instruction to the reservation set of the LR instruction in H's constrained LR/SC loop, or some other device in the system writes to that reservation set. H executes a branch or jump that exits the constrained LR/SC loop. H traps. Note that these definitions permit an implementation to fail an SC instruction occasionally for any reason, provided the aforementioned guarantee is not violated. As a consequence of the eventuality guarantee, if some harts in an execution environment are executing constrained LR/SC loops, and no other harts or devices in the execution environment execute an unconditional store or AMO to that reservation set, then at least one hart will eventually exit its constrained LR/SC loop. By contrast, if other harts or devices continue to write to that reservation set, it is not guaranteed that any hart will exit its LR/SC loop. Loads and load-reserved instructions do not by themselves impede the progress of other harts' LR/SC sequences. We note this constraint implies, among other things, that loads and load-reserved instructions executed by other harts (possibly within the same core) cannot impede LR/SC progress indefinitely. For example, cache evictions caused by another hart sharing the cache cannot impede LR/SC progress indefinitely. Typically, this implies reservations are tracked independently of evictions from any shared cache. Similarly, cache misses caused by speculative execution within a hart cannot impede LR/SC progress indefinitely. These definitions admit the possibility that SC instructions may spuriously fail for implementation reasons, provided progress is eventually made. One advantage of CAS is that it guarantees that some hart eventually makes progress, whereas an LR/SC atomic sequence could livelock indefinitely on some systems. To avoid this concern, we added an architectural guarantee of livelock freedom for certain LR/SC sequences. Earlier versions of this specification imposed a stronger starvation-freedom guarantee. However, the weaker livelock-freedom guarantee is sufficient to implement the C11 and C++11 languages, and is substantially easier to provide in some microarchitectural styles. The atomic memory operation (AMO) instructions perform read-modify-write operations for multiprocessor synchronization and are encoded with an R-type instruction format. These AMO instructions atomically load a data value from the address in rs1, place the value into register rd, apply a binary operator to the loaded value and the original value in rs2, then store the result back to the original address in rs1. AMOs can either operate on doublewords (RV64 only) or words in memory. For RV64, 32-bit AMOs always sign-extend the value placed in rd, and ignore the upper 32 bits of the original value of rs2. For AMOs, the Zaamo extension requires that the address held in rs1 be naturally aligned to the size of the operand (i.e., eight-byte aligned for doublewords and four-byte aligned for words). If the address is not naturally aligned, an address-misaligned exception or an access-fault exception will be generated. The access-fault exception can be generated for a memory access that would otherwise be able to complete except for the misalignment, if the misaligned access should not be emulated. The misaligned atomicity granule PMA, defined in Volume II of this manual, optionally relaxes this alignment requirement. If present, the misaligned atomicity granule PMA specifies the size of a misaligned atomicity granule, a power-of-two number of bytes. The misaligned atomicity granule PMA applies only to AMOs, loads and stores defined in the base ISAs, and loads and stores of no more than XLEN bits defined in the F, D, and Q extensions. For an instruction in that set, if all accessed bytes lie within the same misaligned atomicity granule, the instruction will not raise an exception for reasons of address alignment, and the instruction will give rise to only one memory operation for the purposes of RVWMO—​i.e., it will execute atomically. The operations supported are swap, integer add, bitwise AND, bitwise OR, bitwise XOR, and signed and unsigned integer maximum and minimum. Without ordering constraints, these AMOs can be used to implement parallel reduction operations, where typically the return value would be discarded by writing to x0. We provided fetch-and-op style atomic primitives as they scale to highly parallel systems better than LR/SC or CAS. A simple microarchitecture can implement AMOs using the LR/SC primitives, provided the implementation can guarantee the AMO eventually completes. More complex implementations might also implement AMOs at memory controllers, and can optimize away fetching the original value when the destination is x0. The set of AMOs was chosen to support the C11/C++11 atomic memory operations efficiently, and also to support parallel reductions in memory. Another use of AMOs is to provide atomic updates to memory-mapped device registers (e.g., setting, clearing, or toggling bits) in the I/O space. The Zaamo extension enables microcontroller class implementations to utilize atomic primitives from the AMO subset of the A extension. Typically such implementations do not have caches and thus may not be able to naturally support the LR/SC instructions provided by the Zalrsc extension. To help implement multiprocessor synchronization, the AMOs optionally provide release consistency semantics. If the aq bit is set, then no later memory operations in this RISC-V hart can be observed to take place before the AMO. Conversely, if the rl bit is set, then other RISC-V harts will not observe the AMO before memory accesses preceding the AMO in this RISC-V hart. Setting both the aq and the rl bit on an AMO makes the sequence sequentially consistent, meaning that it cannot be reordered with earlier or later memory operations from the same hart. The AMOs were designed to implement the C11 and C++11 memory models efficiently. Although the FENCE R, RW instruction suffices to implement the acquire operation and FENCE RW, W suffices to implement release, both imply additional unnecessary ordering as compared to AMOs with the corresponding aq or rl bit set. An example code sequence for a critical section guarded by a test-and-test-and-set spinlock is shown in Example Sample code for mutual exclusion. a0 contains the address of the lock.. Note the first AMO is marked aq to order the lock acquisition before the critical section, and the second AMO is marked rl to order the critical section before the lock relinquishment. Sample code for mutual exclusion. a0 contains the address of the lock. li t0, 1 # Initialize swap value. again: lw t1, (a0) # Check if lock is held. bnez t1, again # Retry if held. amoswap.w.aq t1, t0, (a0) # Attempt to acquire lock. bnez t1, again # Retry if held. # ... # Critical section. # ... amoswap.w.rl x0, x0, (a0) # Release lock by storing 0. We recommend the use of the AMO Swap idiom shown in Sample code for mutual exclusion. a0 contains the address of the lock. for both lock acquire and release to simplify the implementation of speculative lock elision. [19] The instructions in the \"A\" extension can be used to provide sequentially consistent loads and stores, but this constrains hardware reordering of memory accesses more than necessary. A C++ sequentially consistent load can be implemented as an LR with aq set. However, the LR/SC eventual success guarantee may slow down concurrent loads from the same effective address. A sequentially consistent store can be implemented as an AMOSWAP that writes the old value to x0 and has rl set. However the superfluous load may impose ordering constraints that are unnecessary for this use case. Specific compilation conventions may require both the aq and rl bits to be set in either or both the LR and AMOSWAP instructions.","title":"\"A\" Extension for Atomic Instructions, Version 2.1","component":"isa","version":"v20250508","name":"a-st-ext","url":"/isa/unpriv/a-st-ext.html","titles":[{"text":"Specifying Ordering of Atomic Instructions","hash":"specifying-ordering-of-atomic-instructions","id":1},{"text":"\"Zalrsc\" Extension for Load-Reserved/Store-Conditional Instructions","hash":"sec:lrsc","id":2},{"text":"Eventual Success of Store-Conditional Instructions","hash":"sec:lrscseq","id":3},{"text":"\"Zaamo\" Extension for Atomic Memory Operations","hash":"sec:amo","id":4}]},"29":{"id":29,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"B\" Extension for Bit Manipulation, Version 1.0.0 The B standard extension comprises instructions provided by the Zba, Zbb, and Zbs extensions. The bit-manipulation (bitmanip) extension collection is comprised of several component extensions to the base RISC-V architecture that are intended to provide some combination of code size reduction, performance improvement, and energy reduction. While the instructions are intended to have general use, some instructions are more useful in some domains than others. Hence, several smaller bitmanip extensions are provided. Each of these smaller extensions is grouped by common function and use case, and each has its own Zb*-extension name. Each bitmanip extension includes a group of several bitmanip instructions that have similar purposes and that can often share the same logic. Some instructions are available in only one extension while others are available in several. The instructions have mnemonics and encodings that are independent of the extensions in which they appear. Thus, when implementing extensions with overlapping instructions, there is no redundancy in logic or encoding. The bitmanip extensions are defined for RV32 and RV64. The bitmanip extension follows the convention in RV64 that w-suffixed instructions (without a dot before the w) ignore the upper 32 bits of their inputs, operate on the least-significant 32-bits as signed values and produce a 32-bit signed result that is sign-extended to XLEN. Bitmanip instructions with the suffix .uw have one operand that is an unsigned 32-bit value that is extracted from the least significant 32 bits of the specified register. Other than that, these perform full XLEN operations. Bitmanip instructions with the suffix .b, .h and .w only look at the least significant 8-bits, 16-bits and 32-bits of the input (respectively) and produce an XLEN-wide result that is sign-extended or zero-extended, based on the specific instruction. The semantics of each instruction in Instructions (in alphabetical order) is expressed in a SAIL-like syntax. The first group of bitmanip extensions to be released for Public Review are: Address generation instructions Basic bit-manipulation Carry-less multiplication Single-bit instructions Below is a list of all of the instructions that are included in these extensions along with their specific mapping: RV32 RV64 Mnemonic Instruction Zba Zbb Zbc Zbs ✓ add.uw rd, rs1, rs2 Add unsigned word ✓ ✓ ✓ andn rd, rs1, rs2 AND with inverted operand ✓ ✓ ✓ clmul rd, rs1, rs2 Carry-less multiply (low-part) ✓ ✓ ✓ clmulh rd, rs1, rs2 Carry-less multiply (high-part) ✓ ✓ ✓ clmulr rd, rs1, rs2 Carry-less multiply (reversed) ✓ ✓ ✓ clz rd, rs Count leading zero bits ✓ ✓ clzw rd, rs Count leading zero bits in word ✓ ✓ ✓ cpop rd, rs Count set bits ✓ ✓ cpopw rd, rs Count set bits in word ✓ ✓ ✓ ctz rd, rs Count trailing zero bits ✓ ✓ ctzw rd, rs Count trailing zero bits in word ✓ ✓ ✓ max rd, rs1, rs2 Maximum ✓ ✓ ✓ maxu rd, rs1, rs2 Unsigned maximum ✓ ✓ ✓ min rd, rs1, rs2 Minimum ✓ ✓ ✓ minu rd, rs1, rs2 Unsigned minimum ✓ ✓ ✓ orc.b rd, rs Bitwise OR-Combine, byte granule ✓ ✓ ✓ orn rd, rs1, rs2 OR with inverted operand ✓ ✓ ✓ rev8 rd, rs Byte-reverse register ✓ ✓ ✓ rol rd, rs1, rs2 Rotate left (Register) ✓ ✓ rolw rd, rs1, rs2 Rotate Left Word (Register) ✓ ✓ ✓ ror rd, rs1, rs2 Rotate right (Register) ✓ ✓ ✓ rori rd, rs1, shamt Rotate right (Immediate) ✓ ✓ roriw rd, rs1, shamt Rotate right Word (Immediate) ✓ ✓ rorw rd, rs1, rs2 Rotate right Word (Register) ✓ ✓ ✓ bclr rd, rs1, rs2 Single-Bit Clear (Register) ✓ ✓ ✓ bclri rd, rs1, imm Single-Bit Clear (Immediate) ✓ ✓ ✓ bext rd, rs1, rs2 Single-Bit Extract (Register) ✓ ✓ ✓ bexti rd, rs1, imm Single-Bit Extract (Immediate) ✓ ✓ ✓ binv rd, rs1, rs2 Single-Bit Invert (Register) ✓ ✓ ✓ binvi rd, rs1, imm Single-Bit Invert (Immediate) ✓ ✓ ✓ bset rd, rs1, rs2 Single-Bit Set (Register) ✓ ✓ ✓ bseti rd, rs1, imm Single-Bit Set (Immediate) ✓ ✓ ✓ sext.b rd, rs Sign-extend byte ✓ ✓ ✓ sext.h rd, rs Sign-extend halfword ✓ ✓ ✓ sh1add rd, rs1, rs2 Shift left by 1 and add ✓ ✓ sh1add.uw rd, rs1, rs2 Shift unsigned word left by 1 and add ✓ ✓ ✓ sh2add rd, rs1, rs2 Shift left by 2 and add ✓ ✓ sh2add.uw rd, rs1, rs2 Shift unsigned word left by 2 and add ✓ ✓ ✓ sh3add rd, rs1, rs2 Shift left by 3 and add ✓ ✓ sh3add.uw rd, rs1, rs2 Shift unsigned word left by 3 and add ✓ ✓ slli.uw rd, rs1, imm Shift-left unsigned word (Immediate) ✓ ✓ ✓ xnor rd, rs1, rs2 Exclusive NOR ✓ ✓ ✓ zext.h rd, rs Zero-extend halfword ✓ The Zba instructions can be used to accelerate the generation of addresses that index into arrays of basic types (halfword, word, doubleword) using both unsigned word-sized and XLEN-sized indices: a shifted index is added to a base address. The shift and add instructions do a left shift of 1, 2, or 3 because these are commonly found in real-world code and because they can be implemented with a minimal amount of additional hardware beyond that of the simple adder. This avoids lengthening the critical path in implementations. While the shift and add instructions are limited to a maximum left shift of 3, the slli instruction (from the base ISA) can be used to perform similar shifts for indexing into arrays of wider elements. The slli.uw — added in this extension — can be used when the index is to be interpreted as an unsigned word. The following instructions comprise the Zba extension: RV32 RV64 Mnemonic Instruction ✓ add.uw rd, rs1, rs2 Add unsigned word ✓ ✓ sh1add rd, rs1, rs2 Shift left by 1 and add ✓ sh1add.uw rd, rs1, rs2 Shift unsigned word left by 1 and add ✓ ✓ sh2add rd, rs1, rs2 Shift left by 2 and add ✓ sh2add.uw rd, rs1, rs2 Shift unsigned word left by 2 and add ✓ ✓ sh3add rd, rs1, rs2 Shift left by 3 and add ✓ sh3add.uw rd, rs1, rs2 Shift unsigned word left by 3 and add ✓ slli.uw rd, rs1, imm Shift-left unsigned word (Immediate) RV32 RV64 Mnemonic Instruction ✓ ✓ andn rd, rs1, rs2 AND with inverted operand ✓ ✓ orn rd, rs1, rs2 OR with inverted operand ✓ ✓ xnor rd, rs1, rs2 Exclusive NOR Implementation Hint The Logical with Negate instructions can be implemented by inverting the rs2 inputs to the base-required AND, OR, and XOR logic instructions. In some implementations, the inverter on rs2 used for subtraction can be reused for this purpose. RV32 RV64 Mnemonic Instruction ✓ ✓ clz rd, rs Count leading zero bits ✓ clzw rd, rs Count leading zero bits in word ✓ ✓ ctz rd, rs Count trailing zero bits ✓ ctzw rd, rs Count trailing zero bits in word These instructions count the number of set bits (1-bits). This is also commonly referred to as population count. RV32 RV64 Mnemonic Instruction ✓ ✓ cpop rd, rs Count set bits ✓ cpopw rd, rs Count set bits in word The integer minimum/maximum instructions are arithmetic R-type instructions that return the smaller/larger of two operands. RV32 RV64 Mnemonic Instruction ✓ ✓ max rd, rs1, rs2 Maximum ✓ ✓ maxu rd, rs1, rs2 Unsigned maximum ✓ ✓ min rd, rs1, rs2 Minimum ✓ ✓ minu rd, rs1, rs2 Unsigned minimum These instructions perform the sign extension or zero extension of the least significant 8 bits or 16 bits of the source register. These instructions replace the generalized idioms slli rd,rs,(XLEN-<size>) + srai (for sign extension of 8-bit and 16-bit quantities) and slli + srli (for zero extension of 16-bit quantities). RV32 RV64 Mnemonic Instruction ✓ ✓ sext.b rd, rs Sign-extend byte ✓ ✓ sext.h rd, rs Sign-extend halfword ✓ ✓ zext.h rd, rs Zero-extend halfword Bitwise rotation instructions are similar to the shift-logical operations from the base spec. However, where the shift-logical instructions shift in zeros, the rotate instructions shift in the bits that were shifted out of the other side of the value. Such operations are also referred to as ‘circular shifts’. RV32 RV64 Mnemonic Instruction ✓ ✓ rol rd, rs1, rs2 Rotate left (Register) ✓ rolw rd, rs1, rs2 Rotate Left Word (Register) ✓ ✓ ror rd, rs1, rs2 Rotate right (Register) ✓ ✓ rori rd, rs1, shamt Rotate right (Immediate) ✓ roriw rd, rs1, shamt Rotate right Word (Immediate) ✓ rorw rd, rs1, rs2 Rotate right Word (Register) Architecture Explanation The rotate instructions were included to replace a common four-instruction sequence to achieve the same effect (neg; sll/srl; srl/sll; or) orc.b sets the bits of each byte in the result rd to all zeros if no bit within the respective byte of rs is set, or to all ones if any bit within the respective byte of rs is set. One use-case is string-processing functions, such as strlen and strcpy, which can use orc.b to test for the terminating zero byte by counting the set bits in leading non-zero bytes in a word. RV32 RV64 Mnemonic Instruction ✓ ✓ orc.b rd, rs Bitwise OR-Combine, byte granule rev8 reverses the byte-ordering of rs. RV32 RV64 Mnemonic Instruction ✓ ✓ rev8 rd, rs Byte-reverse register Carry-less multiplication is the multiplication in the polynomial ring over GF(2). clmul produces the lower half of the carry-less product and clmulh produces the upper half of the 2✕XLEN carry-less product. clmulr produces bits 2✕XLEN−2:XLEN-1 of the 2✕XLEN carry-less product. RV32 RV64 Mnemonic Instruction ✓ ✓ clmul rd, rs1, rs2 Carry-less multiply (low-part) ✓ ✓ clmulh rd, rs1, rs2 Carry-less multiply (high-part) ✓ ✓ clmulr rd, rs1, rs2 Carry-less multiply (reversed) The single-bit instructions provide a mechanism to set, clear, invert, or extract a single bit in a register. The bit is specified by its index. RV32 RV64 Mnemonic Instruction ✓ ✓ bclr rd, rs1, rs2 Single-Bit Clear (Register) ✓ ✓ bclri rd, rs1, imm Single-Bit Clear (Immediate) ✓ ✓ bext rd, rs1, rs2 Single-Bit Extract (Register) ✓ ✓ bexti rd, rs1, imm Single-Bit Extract (Immediate) ✓ ✓ binv rd, rs1, rs2 Single-Bit Invert (Register) ✓ ✓ binvi rd, rs1, imm Single-Bit Invert (Immediate) ✓ ✓ bset rd, rs1, rs2 Single-Bit Set (Register) ✓ ✓ bseti rd, rs1, imm Single-Bit Set (Immediate) This extension contains instructions essential for implementing common operations in cryptographic workloads. RV32 RV64 Mnemonic Instruction ✓ ✓ rol Rotate left (Register) ✓ rolw Rotate Left Word (Register) ✓ ✓ ror Rotate right (Register) ✓ ✓ rori Rotate right (Immediate) ✓ roriw Rotate right Word (Immediate) ✓ rorw Rotate right Word (Register) ✓ ✓ andn AND with inverted operand ✓ ✓ orn OR with inverted operand ✓ ✓ xnor Exclusive NOR ✓ ✓ pack Pack low halves of registers ✓ ✓ packh Pack low bytes of registers ✓ packw Pack low 16-bits of registers (RV64) ✓ ✓ brev8 Reverse bits in bytes ✓ ✓ rev8 Byte-reverse register ✓ zip Bit interleave ✓ unzip Bit deinterleave Carry-less multiplication is the multiplication in the polynomial ring over GF(2). This is a critical operation in some cryptographic workloads, particularly the AES-GCM authenticated encryption scheme. This extension provides only the instructions needed to efficiently implement the GHASH operation, which is part of this workload. RV32 RV64 Mnemonic Instruction ✓ ✓ clmul rd, rs1, rs2 Carry-less multiply (low-part) ✓ ✓ clmulh rd, rs1, rs2 Carry-less multiply (high-part) These instructions implement a \"lookup table\" for 4 and 8 bit elements inside the general purpose registers. rs1 is used as a vector of N-bit words, and rs2 as a vector of N-bit indices into rs1. Elements in rs1 are replaced by the indexed element in rs2, or zero if the index into rs2 is out of bounds. These instructions are useful for expressing N-bit to N-bit boolean operations, and implementing cryptographic code with secret dependent memory accesses (particularly SBoxes) such that the execution latency does not depend on the (secret) data being operated on. RV32 RV64 Mnemonic Instruction ✓ ✓ xperm4 rd, rs1, rs2 Crossbar permutation (nibbles) ✓ ✓ xperm8 rd, rs1, rs2 Crossbar permutation (bytes) Synopsis Add unsigned word Mnemonic add.uw rd, rs1, rs2 Pseudoinstructions zext.w rd, rs1 → add.uw rd, rs1, zero Encoding Description This instruction performs an XLEN-wide addition between rs2 and the zero-extended least-significant word of rs1. Operation let base = X(rs2); let index = EXTZ(X(rs1)[31..0]); X(rd) = base + index; Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis AND with inverted operand Mnemonic andn rd, rs1, rs2 Encoding Description This instruction performs the bitwise logical AND operation between rs1 and the bitwise inversion of rs2. Operation X(rd) = X(rs1) & ~X(rs2); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Single-Bit Clear (Register) Mnemonic bclr rd, rs1, rs2 Encoding Description This instruction returns rs1 with a single bit cleared at the index specified in rs2. The index is read from the lower log2(XLEN) bits of rs2. Operation let index = X(rs2) & (XLEN - 1); X(rd) = X(rs1) & ~(1 << index) Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Clear (Immediate) Mnemonic bclri rd, rs1, shamt Encoding (RV32) Encoding (RV64) Description This instruction returns rs1 with a single bit cleared at the index specified in shamt. The index is read from the lower log2(XLEN) bits of shamt. For RV32, the encodings corresponding to shamt[5]=1 are reserved. Operation let index = shamt & (XLEN - 1); X(rd) = X(rs1) & ~(1 << index) Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Extract (Register) Mnemonic bext rd, rs1, rs2 Encoding Description This instruction returns a single bit extracted from rs1 at the index specified in rs2. The index is read from the lower log2(XLEN) bits of rs2. Operation let index = X(rs2) & (XLEN - 1); X(rd) = (X(rs1) >> index) & 1; Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Extract (Immediate) Mnemonic bexti rd, rs1, shamt Encoding (RV32) Encoding (RV64) Description This instruction returns a single bit extracted from rs1 at the index specified in shamt. The index is read from the lower log2(XLEN) bits of shamt. For RV32, the encodings corresponding to shamt[5]=1 are reserved. Operation let index = shamt & (XLEN - 1); X(rd) = (X(rs1) >> index) & 1; Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Invert (Register) Mnemonic binv rd, rs1, rs2 Encoding Description This instruction returns rs1 with a single bit inverted at the index specified in rs2. The index is read from the lower log2(XLEN) bits of rs2. Operation let index = X(rs2) & (XLEN - 1); X(rd) = X(rs1) ^ (1 << index) Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Invert (Immediate) Mnemonic binvi rd, rs1, shamt Encoding (RV32) Encoding (RV64) Description This instruction returns rs1 with a single bit inverted at the index specified in shamt. The index is read from the lower log2(XLEN) bits of shamt. For RV32, the encodings corresponding to shamt[5]=1 are reserved. Operation let index = shamt & (XLEN - 1); X(rd) = X(rs1) ^ (1 << index) Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Set (Register) Mnemonic bset rd, rs1,rs2 Encoding Description This instruction returns rs1 with a single bit set at the index specified in rs2. The index is read from the lower log2(XLEN) bits of rs2. Operation let index = X(rs2) & (XLEN - 1); X(rd) = X(rs1) | (1 << index) Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Single-Bit Set (Immediate) Mnemonic bseti rd, rs1,shamt Encoding (RV32) Encoding (RV64) Description This instruction returns rs1 with a single bit set at the index specified in shamt. The index is read from the lower log2(XLEN) bits of shamt. For RV32, the encodings corresponding to shamt[5]=1 are reserved. Operation let index = shamt & (XLEN - 1); X(rd) = X(rs1) | (1 << index) Included in Extension Minimum version Lifecycle state Zbs (Single-bit instructions) v1.0 Ratified Synopsis Carry-less multiply (low-part) Mnemonic clmul rd, rs1, rs2 Encoding Description clmul produces the lower half of the 2·XLEN carry-less product. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let output : xlenbits = 0; foreach (i from 0 to (xlen - 1) by 1) { output = if ((rs2_val >> i) & 1) then output ^ (rs1_val << i); else output; } X[rd] = output Included in Extension Minimum version Lifecycle state Zbc (Carry-less multiplication) v1.0 Ratified Zbkc (Carry-less multiplication for Cryptography) v1.0 Ratified Synopsis Carry-less multiply (high-part) Mnemonic clmulh rd, rs1, rs2 Encoding Description clmulh produces the upper half of the 2·XLEN carry-less product. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let output : xlenbits = 0; foreach (i from 1 to xlen by 1) { output = if ((rs2_val >> i) & 1) then output ^ (rs1_val >> (xlen - i)); else output; } X[rd] = output Included in Extension Minimum version Lifecycle state Zbc (Carry-less multiplication) v1.0 Ratified Zbkc (Carry-less multiplication for Cryptography) v1.0 Ratified Synopsis Carry-less multiply (reversed) Mnemonic clmulr rd, rs1, rs2 Encoding Description clmulr produces bits 2·XLEN−2:XLEN-1 of the 2·XLEN carry-less product. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let output : xlenbits = 0; foreach (i from 0 to (xlen - 1) by 1) { output = if ((rs2_val >> i) & 1) then output ^ (rs1_val >> (xlen - i - 1)); else output; } X[rd] = output Note The clmulr instruction is used to accelerate CRC calculations. The r in the instruction’s mnemonic stands for reversed, as the instruction is equivalent to bit-reversing the inputs, performing a clmul, then bit-reversing the output. Included in Extension Minimum version Lifecycle state Zbc (Carry-less multiplication) v1.0 Ratified Synopsis Count leading zero bits Mnemonic clz rd, rs Encoding Description This instruction counts the number of 0’s before the first 1, starting at the most-significant bit (i.e., XLEN-1) and progressing to bit 0. Accordingly, if the input is 0, the output is XLEN, and if the most-significant bit of the input is a 1, the output is 0. Operation val HighestSetBit : forall ('N : Int), 'N >= 0. bits('N) -> int function HighestSetBit x = { foreach (i from (xlen - 1) to 0 by 1 in dec) if [x[i]] == 0b1 then return(i) else (); return -1; } let rs = X(rs); X[rd] = (xlen - 1) - HighestSetBit(rs); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Count leading zero bits in word Mnemonic clzw rd, rs Encoding Description This instruction counts the number of 0’s before the first 1 starting at bit 31 and progressing to bit 0. Accordingly, if the least-significant word is 0, the output is 32, and if the most-significant bit of the word (i.e., bit 31) is a 1, the output is 0. Operation val HighestSetBit32 : forall ('N : Int), 'N >= 0. bits('N) -> int function HighestSetBit32 x = { foreach (i from 31 to 0 by 1 in dec) if [x[i]] == 0b1 then return(i) else (); return -1; } let rs = X(rs); X[rd] = 31 - HighestSetBit(rs); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Count set bits Mnemonic cpop rd, rs Encoding Description This instructions counts the number of 1’s (i.e., set bits) in the source register. Operation let bitcount = 0; let rs = X(rs); foreach (i from 0 to (xlen - 1) in inc) if rs[i] == 0b1 then bitcount = bitcount + 1 else (); X[rd] = bitcount Software Hint This operations is known as population count, popcount, sideways sum, bit summation, or Hamming weight. The GCC builtin function __builtin_popcount (unsigned int x) is implemented by cpop on RV32 and by cpopw on RV64. The GCC builtin function __builtin_popcountl (unsigned long x) for LP64 is implemented by cpop on RV64. Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Count set bits in word Mnemonic cpopw rd, rs Encoding Description This instructions counts the number of 1’s (i.e., set bits) in the least-significant word of the source register. Operation let bitcount = 0; let val = X(rs); foreach (i from 0 to 31 in inc) if val[i] == 0b1 then bitcount = bitcount + 1 else (); X[rd] = bitcount Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Count trailing zeros Mnemonic ctz rd, rs Encoding Description This instruction counts the number of 0’s before the first 1, starting at the least-significant bit (i.e., 0) and progressing to the most-significant bit (i.e., XLEN-1). Accordingly, if the input is 0, the output is XLEN, and if the least-significant bit of the input is a 1, the output is 0. Operation val LowestSetBit : forall ('N : Int), 'N >= 0. bits('N) -> int function LowestSetBit x = { foreach (i from 0 to (xlen - 1) by 1 in dec) if [x[i]] == 0b1 then return(i) else (); return xlen; } let rs = X(rs); X[rd] = LowestSetBit(rs); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Count trailing zero bits in word Mnemonic ctzw rd, rs Encoding Description This instruction counts the number of 0’s before the first 1, starting at the least-significant bit (i.e., 0) and progressing to the most-significant bit of the least-significant word (i.e., 31). Accordingly, if the least-significant word is 0, the output is 32, and if the least-significant bit of the input is a 1, the output is 0. Operation val LowestSetBit32 : forall ('N : Int), 'N >= 0. bits('N) -> int function LowestSetBit32 x = { foreach (i from 0 to 31 by 1 in dec) if [x[i]] == 0b1 then return(i) else (); return 32; } let rs = X(rs); X[rd] = LowestSetBit32(rs); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Maximum Mnemonic max rd, rs1, rs2 Encoding Description This instruction returns the larger of two signed integers. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let result = if rs1_val <_s rs2_val then rs2_val else rs1_val; X(rd) = result; Software Hint Calculating the absolute value of a signed integer can be performed using the following sequence: neg rD,rS followed by max rD,rS,rD. When using this common sequence, it is suggested that they are scheduled with no intervening instructions so that implementations that are so optimized can fuse them together. Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Unsigned maximum Mnemonic maxu rd, rs1, rs2 Encoding Description This instruction returns the larger of two unsigned integers. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let result = if rs1_val <_u rs2_val then rs2_val else rs1_val; X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Minimum Mnemonic min rd, rs1, rs2 Encoding Description This instruction returns the smaller of two signed integers. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let result = if rs1_val <_s rs2_val then rs1_val else rs2_val; X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Unsigned minimum Mnemonic minu rd, rs1, rs2 Encoding Description This instruction returns the smaller of two unsigned integers. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let result = if rs1_val <_u rs2_val then rs1_val else rs2_val; X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis Bitwise OR-Combine, byte granule Mnemonic orc.b rd, rs Encoding Description Combines the bits within each byte using bitwise logical OR. This sets the bits of each byte in the result rd to all zeros if no bit within the respective byte of rs is set, or to all ones if any bit within the respective byte of rs is set. Operation let input = X(rs); let output : xlenbits = 0; foreach (i from 0 to (xlen - 8) by 8) { output[(i + 7)..i] = if input[(i + 7)..i] == 0 then 0b00000000 else 0b11111111; } X[rd] = output; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Synopsis OR with inverted operand Mnemonic orn rd, rs1, rs2 Encoding Description This instruction performs the bitwise logical OR operation between rs1 and the bitwise inversion of rs2. Operation X(rd) = X(rs1) | ~X(rs2); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Pack the low halves of rs1 and rs2 into rd. Mnemonic pack rd, rs1, rs2 Encoding Description The pack instruction packs the XLEN/2-bit lower halves of rs1 and rs2 into rd, with rs1 in the lower half and rs2 in the upper half. Operation let lo_half : bits(xlen/2) = X(rs1)[xlen/2-1..0]; let hi_half : bits(xlen/2) = X(rs2)[xlen/2-1..0]; X(rd) = EXTZ(hi_half @ lo_half); Included in Extension Minimum version Lifecycle state Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified For RV32, the pack instruction with rs2=x0 is the zext.h instruction. Hence, for RV32, any extension that contains the pack instruction also contains the zext.h instruction (but not necessarily the c.zext.h instruction, which is only guaranteed to exist if both the Zcb and Zbb extensions are implemented). Synopsis Pack the low bytes of rs1 and rs2 into rd. Mnemonic packh rd, rs1, rs2 Encoding Description The packh instruction packs the least-significant bytes of rs1 and rs2 into the 16 least-significant bits of rd, zero extending the rest of rd. Operation let lo_half : bits(8) = X(rs1)[7..0]; let hi_half : bits(8) = X(rs2)[7..0]; X(rd) = EXTZ(hi_half @ lo_half); Included in Extension Minimum version Lifecycle state Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Pack the low 16-bits of rs1 and rs2 into rd on RV64. Mnemonic packw rd, rs1, rs2 Encoding Description This instruction packs the low 16 bits of rs1 and rs2 into the 32 least-significant bits of rd, sign extending the 32-bit result to the rest of rd. This instruction only exists on RV64 based systems. Operation let lo_half : bits(16) = X(rs1)[15..0]; let hi_half : bits(16) = X(rs2)[15..0]; X(rd) = EXTS(hi_half @ lo_half); Included in Extension Minimum version Lifecycle state Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified For RV64, the packw instruction with rs2=x0 is the zext.h instruction. Hence, for RV64, any extension that contains the packw instruction also contains the zext.h instruction (but not necessarily the c.zext.h instruction, which is only guaranteed to exist if both the Zcb and Zbb extensions are implemented). Synopsis Byte-reverse register Mnemonic rev8 rd, rs Encoding (RV32) Encoding (RV64) Description This instruction reverses the order of the bytes in rs. Operation let input = X(rs); let output : xlenbits = 0; let j = xlen - 1; foreach (i from 0 to (xlen - 8) by 8) { output[i..(i + 7)] = input[(j - 7)..j]; j = j - 8; } X[rd] = output Note The rev8 mnemonic corresponds to different instruction encodings in RV32 and RV64. Software Hint The byte-reverse operation is only available for the full register width. To emulate word-sized and halfword-sized byte-reversal, perform a rev8 rd,rs followed by a srai rd,rd,K, where K is XLEN-32 and XLEN-16, respectively. Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) v1.0 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Reverse the bits in each byte of a source register. Mnemonic brev8 rd, rs Encoding Description This instruction reverses the order of the bits in every byte of a register. Operation result : xlenbits = EXTZ(0b0); foreach (i from 0 to sizeof(xlen) by 8) { result[i+7..i] = reverse_bits_in_byte(X(rs1)[i+7..i]); }; X(rd) = result; Included in Extension Minimum version Lifecycle state Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Rotate Left (Register) Mnemonic rol rd, rs1, rs2 Encoding Description This instruction performs a rotate left of rs1 by the amount in least-significant log2(XLEN) bits of rs2. Operation let shamt = if xlen == 32 then X(rs2)[4..0] else X(rs2)[5..0]; let result = (X(rs1) << shamt) | (X(rs1) >> (xlen - shamt)); X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Rotate Left Word (Register) Mnemonic rolw rd, rs1, rs2 Encoding Description This instruction performs a rotate left on the least-significant word of rs1 by the amount in least-significant 5 bits of rs2. The resulting word value is sign-extended by copying bit 31 to all of the more-significant bits. Operation let rs1 = EXTZ(X(rs1)[31..0]) let shamt = X(rs2)[4..0]; let result = (rs1 << shamt) | (rs1 >> (32 - shamt)); X(rd) = EXTS(result[31..0]); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Rotate Right Mnemonic ror rd, rs1, rs2 Encoding Description This instruction performs a rotate right of rs1 by the amount in least-significant log2(XLEN) bits of rs2. Operation let shamt = if xlen == 32 then X(rs2)[4..0] else X(rs2)[5..0]; let result = (X(rs1) >> shamt) | (X(rs1) << (xlen - shamt)); X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Rotate Right (Immediate) Mnemonic rori rd, rs1, shamt Encoding (RV32) Encoding (RV64) Description This instruction performs a rotate right of rs1 by the amount in the least-significant log2(XLEN) bits of shamt. For RV32, the encodings corresponding to shamt[5]=1 are reserved. Operation let shamt = if xlen == 32 then shamt[4..0] else shamt[5..0]; let result = (X(rs1) >> shamt) | (X(rs1) << (xlen - shamt)); X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Rotate Right Word by Immediate Mnemonic roriw rd, rs1, shamt Encoding Description This instruction performs a rotate right on the least-significant word of rs1 by the amount in the least-significant log2(XLEN) bits of shamt. The resulting word value is sign-extended by copying bit 31 to all of the more-significant bits. Operation let rs1_data = EXTZ(X(rs1)[31..0]; let result = (rs1_data >> shamt) | (rs1_data << (32 - shamt)); X(rd) = EXTS(result[31..0]); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Rotate Right Word (Register) Mnemonic rorw rd, rs1, rs2 Encoding Description This instruction performs a rotate right on the least-significant word of rs1 by the amount in least-significant 5 bits of rs2. The resultant word is sign-extended by copying bit 31 to all of the more-significant bits. Operation let rs1 = EXTZ(X(rs1)[31..0]) let shamt = X(rs2)[4..0]; let result = (rs1 >> shamt) | (rs1 << (32 - shamt)); X(rd) = EXTS(result); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Sign-extend byte Mnemonic sext.b rd, rs Encoding Description This instruction sign-extends the least-significant byte in the source to XLEN by copying the most-significant bit in the byte (i.e., bit 7) to all of the more-significant bits. Operation X(rd) = EXTS(X(rs)[7..0]); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Synopsis Sign-extend halfword Mnemonic sext.h rd, rs Encoding Description This instruction sign-extends the least-significant halfword in rs to XLEN by copying the most-significant bit in the halfword (i.e., bit 15) to all of the more-significant bits. Operation X(rd) = EXTS(X(rs)[15..0]); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Synopsis Shift left by 1 and add Mnemonic sh1add rd, rs1, rs2 Encoding Description This instruction shifts rs1 to the left by 1 bit and adds it to rs2. Operation X(rd) = X(rs2) + (X(rs1) << 1); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis Shift unsigned word left by 1 and add Mnemonic sh1add.uw rd, rs1, rs2 Encoding Description This instruction performs an XLEN-wide addition of two addends. The first addend is rs2. The second addend is the unsigned value formed by extracting the least-significant word of rs1 and shifting it left by 1 place. Operation let base = X(rs2); let index = EXTZ(X(rs1)[31..0]); X(rd) = base + (index << 1); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis Shift left by 2 and add Mnemonic sh2add rd, rs1, rs2 Encoding Description This instruction shifts rs1 to the left by 2 places and adds it to rs2. Operation X(rd) = X(rs2) + (X(rs1) << 2); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis Shift unsigned word left by 2 and add Mnemonic sh2add.uw rd, rs1, rs2 Encoding Description This instruction performs an XLEN-wide addition of two addends. The first addend is rs2. The second addend is the unsigned value formed by extracting the least-significant word of rs1 and shifting it left by 2 places. Operation let base = X(rs2); let index = EXTZ(X(rs1)[31..0]); X(rd) = base + (index << 2); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis Shift left by 3 and add Mnemonic sh3add rd, rs1, rs2 Encoding Description This instruction shifts rs1 to the left by 3 places and adds it to rs2. Operation X(rd) = X(rs2) + (X(rs1) << 3); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis Shift unsigned word left by 3 and add Mnemonic sh3add.uw rd, rs1, rs2 Encoding Description This instruction performs an XLEN-wide addition of two addends. The first addend is rs2. The second addend is the unsigned value formed by extracting the least-significant word of rs1 and shifting it left by 3 places. Operation let base = X(rs2); let index = EXTZ(X(rs1)[31..0]); X(rd) = base + (index << 3); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Synopsis Shift-left unsigned word (Immediate) Mnemonic slli.uw rd, rs1, shamt Encoding Description This instruction takes the least-significant word of rs1, zero-extends it, and shifts it left by the immediate. Operation X(rd) = (EXTZ(X(rs)[31..0]) << shamt); Included in Extension Minimum version Lifecycle state Zba (Address generation instructions) 0.93 Ratified Architecture Explanation This instruction is the same as slli with zext.w performed on rs1 before shifting. Synopsis Place odd and even bits of the source register into upper and lower halves of the destination register, respectively. Mnemonic unzip rd, rs Encoding Description This instruction scatters all of the odd and even bits of a source word into the high and low halves of a destination word. It is the inverse of the zip instruction. This instruction is available only on RV32. Operation foreach (i from 0 to xlen/2-1) { X(rd)[i] = X(rs1)[2*i] X(rd)[i+xlen/2] = X(rs1)[2*i+1] } Software Hint This instruction is useful for implementing the SHA3 cryptographic hash function on a 32-bit architecture, as it implements the bit-interleaving operation used to speed up the 64-bit rotations directly. Included in Extension Minimum version Lifecycle state Zbkb (Bit-manipulation for Cryptography) (RV32) v1.0 Ratified Synopsis Exclusive NOR Mnemonic xnor rd, rs1, rs2 Encoding Description This instruction performs the bit-wise exclusive-NOR operation on rs1 and rs2. Operation X(rd) = ~(X(rs1) ^ X(rs2)); Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Zbkb (Bit-manipulation for Cryptography) v1.0 Ratified Synopsis Byte-wise lookup of indices into a vector in registers. Mnemonic xperm8 rd, rs1, rs2 Encoding Description The xperm8 instruction operates on bytes. The rs1 register contains a vector of XLEN/8 8-bit elements. The rs2 register contains a vector of XLEN/8 8-bit indexes. The result is each element in rs2 replaced by the indexed element in rs1, or zero if the index into rs2 is out of bounds. Operation val xperm8_lookup : (bits(8), xlenbits) -> bits(8) function xperm8_lookup (idx, lut) = { (lut >> (idx @ 0b000))[7..0] } function clause execute ( XPERM8 (rs2,rs1,rd)) = { result : xlenbits = EXTZ(0b0); foreach(i from 0 to xlen by 8) { result[i+7..i] = xperm8_lookup(X(rs2)[i+7..i], X(rs1)); }; X(rd) = result; RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zbkx (Crossbar permutations) v1.0 Ratified Synopsis Nibble-wise lookup of indices into a vector. Mnemonic xperm4 rd, rs1, rs2 Encoding Description The xperm4 instruction operates on nibbles. The rs1 register contains a vector of XLEN/4 4-bit elements. The rs2 register contains a vector of XLEN/4 4-bit indexes. The result is each element in rs2 replaced by the indexed element in rs1, or zero if the index into rs2 is out of bounds. Operation val xperm4_lookup : (bits(4), xlenbits) -> bits(4) function xperm4_lookup (idx, lut) = { (lut >> (idx @ 0b00))[3..0] } function clause execute ( XPERM4 (rs2,rs1,rd)) = { result : xlenbits = EXTZ(0b0); foreach(i from 0 to xlen by 4) { result[i+3..i] = xperm4_lookup(X(rs2)[i+3..i], X(rs1)); }; X(rd) = result; RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zbkx (Crossbar permutations) v1.0 Ratified Synopsis Zero-extend halfword Mnemonic zext.h rd, rs Encoding (RV32) Encoding (RV64) Description This instruction zero-extends the least-significant halfword of the source to XLEN by inserting 0’s into all of the bits more significant than 15. Operation X(rd) = EXTZ(X(rs)[15..0]); Note The zext.h mnemonic corresponds to different instruction encodings in RV32 and RV64. Included in Extension Minimum version Lifecycle state Zbb (Basic bit-manipulation) 0.93 Ratified Synopsis Interleave upper and lower halves of the source register into odd and even bits of the destination register, respectively. Mnemonic zip rd, rs Encoding Description This instruction gathers bits from the high and low halves of the source word into odd/even bit positions in the destination word. It is the inverse of the unzip instruction. This instruction is available only on RV32. Operation foreach (i from 0 to xlen/2-1) { X(rd)[2*i] = X(rs1)[i] X(rd)[2*i+1] = X(rs1)[i+xlen/2] } Software Hint This instruction is useful for implementing the SHA3 cryptographic hash function on a 32-bit architecture, as it implements the bit-interleaving operation used to speed up the 64-bit rotations directly. Included in Extension Minimum version Lifecycle state Zbkb (Bit-manipulation for Cryptography) (RV32) v1.0 Ratified The orc.b instruction allows for the efficient detection of NUL bytes in an XLEN-sized chunk of data: the result of orc.b on a chunk that does not contain any NUL bytes will be all-ones, and after a bitwise-negation of the result of orc.b, the number of data bytes before the first NUL byte (if any) can be detected by ctz/clz (depending on the endianness of data). A full example of a strlen function, which uses these techniques and also demonstrates the use of it for unaligned/partial data, is the following: #include <sys/asm.h> .text .globl strlen .type strlen, @function strlen: andi a3, a0, (SZREG-1) // offset andi a1, a0, -SZREG // align pointer .Lprologue: li a4, SZREG sub a4, a4, a3 // XLEN - offset slli a3, a3, 3 // offset * 8 REG_L a2, 0(a1) // chunk /* * Shift the partial/unaligned chunk we loaded to remove the bytes * from before the start of the string, adding NUL bytes at the end. */ #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ srl a2, a2 ,a3 // chunk >> (offset * 8) #else sll a2, a2, a3 #endif orc.b a2, a2 not a2, a2 /* * Non-NUL bytes in the string have been expanded to 0x00, while * NUL bytes have become 0xff. Search for the first set bit * (corresponding to a NUL byte in the original chunk). */ #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ ctz a2, a2 #else clz a2, a2 #endif /* * The first chunk is special: compare against the number of valid * bytes in this chunk. */ srli a0, a2, 3 bgtu a4, a0, .Ldone addi a3, a1, SZREG li a4, -1 .align 2 /* * Our critical loop is 4 instructions and processes data in 4 byte * or 8 byte chunks. */ .Lloop: REG_L a2, SZREG(a1) addi a1, a1, SZREG orc.b a2, a2 beq a2, a4, .Lloop .Lepilogue: not a2, a2 #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ ctz a2, a2 #else clz a2, a2 #endif sub a1, a1, a3 add a0, a0, a1 srli a2, a2, 3 add a0, a0, a2 .Ldone: ret #include <sys/asm.h> .text .globl strcmp .type strcmp, @function strcmp: or a4, a0, a1 li t2, -1 and a4, a4, SZREG-1 bnez a4, .Lsimpleloop # Main loop for aligned strings .Lloop: REG_L a2, 0(a0) REG_L a3, 0(a1) orc.b t0, a2 bne t0, t2, .Lfoundnull addi a0, a0, SZREG addi a1, a1, SZREG beq a2, a3, .Lloop # Words don't match, and no null byte in first word. # Get bytes in big-endian order and compare. #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ rev8 a2, a2 rev8 a3, a3 #endif # Synthesize (a2 >= a3) ? 1 : -1 in a branchless sequence. sltu a0, a2, a3 neg a0, a0 ori a0, a0, 1 ret .Lfoundnull: # Found a null byte. # If words don't match, fall back to simple loop. bne a2, a3, .Lsimpleloop # Otherwise, strings are equal. li a0, 0 ret # Simple loop for misaligned strings .Lsimpleloop: lbu a2, 0(a0) lbu a3, 0(a1) addi a0, a0, 1 addi a1, a1, 1 bne a2, a3, 1f bnez a2, .Lsimpleloop 1: sub a0, a2, a3 ret .size strcmp, .-strcmp","title":"\"B\" Extension for Bit Manipulation, Version 1.0.0","component":"isa","version":"v20250508","name":"b-st-ext","url":"/isa/unpriv/b-st-ext.html","titles":[{"text":"Zb* Overview","hash":"preface","id":1},{"text":"Word Instructions","hash":"word-instructions","id":2},{"text":"Pseudocode for instruction semantics","hash":"pseudocode-for-instruction-semantics","id":3},{"text":"Extensions","hash":"extensions","id":4},{"text":"Zba: Address generation","hash":"zba","id":5},{"text":"Zbb: Basic bit-manipulation","hash":"zbb","id":6},{"text":"Logical with negate","hash":"logical-with-negate","id":7},{"text":"Count leading/trailing zero bits","hash":"count-leadingtrailing-zero-bits","id":8},{"text":"Count population","hash":"count-population","id":9},{"text":"Integer minimum/maximum","hash":"integer-minimummaximum","id":10},{"text":"Sign extension and zero extension","hash":"sign-extension-and-zero-extension","id":11},{"text":"Bitwise rotation","hash":"bitwise-rotation","id":12},{"text":"OR Combine","hash":"or-combine","id":13},{"text":"Byte-reverse","hash":"byte-reverse","id":14},{"text":"Zbc: Carry-less multiplication","hash":"zbc","id":15},{"text":"Zbs: Single-bit instructions","hash":"zbs","id":16},{"text":"Zbkb: Bit-manipulation for Cryptography","hash":"zbkb","id":17},{"text":"Zbkc: Carry-less multiplication for Cryptography","hash":"zbkc","id":18},{"text":"Zbkx: Crossbar permutations","hash":"zbkx","id":19},{"text":"Instructions (in alphabetical order)","hash":"insns-b","id":20},{"text":"add.uw","hash":"insns-add_uw","id":21},{"text":"andn","hash":"insns-andn","id":22},{"text":"bclr","hash":"insns-bclr","id":23},{"text":"bclri","hash":"insns-bclri","id":24},{"text":"bext","hash":"insns-bext","id":25},{"text":"bexti","hash":"insns-bexti","id":26},{"text":"binv","hash":"insns-binv","id":27},{"text":"binvi","hash":"insns-binvi","id":28},{"text":"bset","hash":"insns-bset","id":29},{"text":"bseti","hash":"insns-bseti","id":30},{"text":"clmul","hash":"insns-clmul","id":31},{"text":"clmulh","hash":"insns-clmulh","id":32},{"text":"clmulr","hash":"insns-clmulr","id":33},{"text":"clz","hash":"insns-clz","id":34},{"text":"clzw","hash":"insns-clzw","id":35},{"text":"cpop","hash":"insns-cpop","id":36},{"text":"cpopw","hash":"insns-cpopw","id":37},{"text":"ctz","hash":"insns-ctz","id":38},{"text":"ctzw","hash":"insns-ctzw","id":39},{"text":"max","hash":"insns-max","id":40},{"text":"maxu","hash":"insns-maxu","id":41},{"text":"min","hash":"insns-min","id":42},{"text":"minu","hash":"insns-minu","id":43},{"text":"orc.b","hash":"insns-orc_b","id":44},{"text":"orn","hash":"insns-orn","id":45},{"text":"pack","hash":"insns-pack","id":46},{"text":"packh","hash":"insns-packh","id":47},{"text":"packw","hash":"insns-packw","id":48},{"text":"rev8","hash":"insns-rev8","id":49},{"text":"brev8","hash":"insns-brev8","id":50},{"text":"rol","hash":"insns-rol","id":51},{"text":"rolw","hash":"insns-rolw","id":52},{"text":"ror","hash":"insns-ror","id":53},{"text":"rori","hash":"insns-rori","id":54},{"text":"roriw","hash":"insns-roriw","id":55},{"text":"rorw","hash":"insns-rorw","id":56},{"text":"sext.b","hash":"insns-sext_b","id":57},{"text":"sext.h","hash":"insns-sext_h","id":58},{"text":"sh1add","hash":"insns-sh1add","id":59},{"text":"sh1add.uw","hash":"insns-sh1add_uw","id":60},{"text":"sh2add","hash":"insns-sh2add","id":61},{"text":"sh2add.uw","hash":"insns-sh2add_uw","id":62},{"text":"sh3add","hash":"insns-sh3add","id":63},{"text":"sh3add.uw","hash":"insns-sh3add_uw","id":64},{"text":"slli.uw","hash":"insns-slli_uw","id":65},{"text":"unzip","hash":"insns-unzip","id":66},{"text":"xnor","hash":"insns-xnor","id":67},{"text":"xperm8","hash":"insns-xperm8","id":68},{"text":"xperm4","hash":"insns-xperm4","id":69},{"text":"zext.h","hash":"insns-zext_h","id":70},{"text":"zip","hash":"insns-zip","id":71},{"text":"Software optimization guide","hash":"software-optimization-guide","id":72},{"text":"strlen","hash":"strlen","id":73},{"text":"strcmp","hash":"strcmp","id":74}]},"30":{"id":30,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"BF16\" Extensions for for BFloat16-precision Floating-Point, Version 1.0 When FP16 (officially called binary16) was first introduced by the IEEE-754 standard, it was just an interchange format. It was intended as a space/bandwidth efficient encoding that would be used to transfer information. This is in line with the Zfhmin extension. However, there were some applications (notably graphics) that found that the smaller precision and dynamic range was sufficient for their space. So, FP16 started to see some widespread adoption as an arithmetic format. This is in line with the Zfh extension. While it was not the intention of '754 to have FP16 be an arithmetic format, it is supported by the standard. Even though the '754 committee recognized that FP16 was gaining popularity, the committee decided to hold off on making it a basic format in the 2019 release. This means that a '754 compliant implementation of binary floating point, which needs to support at least one basic format, cannot support only FP16 - it needs to support at least one of binary32, binary64, and binary128. Experts working in machine learning noticed that FP16 was a much more compact way of storing operands and often provided sufficient precision for them. However, they also found that intermediate values were much better when accumulated into a higher precision. The final computations were then typically converted back into the more compact FP16 encoding. This approach has become very common in machine learning (ML) inference where the weights and activations are stored in FP16 encodings. There was the added benefit that smaller multiplication blocks could be created for the FP16’s smaller number of significant bits. At this point, widening multiply-accumulate instructions became much more common. Also, more complicated dot product instructions started to show up including those that packed two FP16 numbers in a 32-bit register, multiplied these by another pair of FP16 numbers in another register, added these two products to an FP32 accumulate value in a 3rd register and returned an FP32 result. Experts working in machine learning at Google who continued to work with FP32 values noted that the least significant 16 bits of their mantissas were not always needed for good results, even in training. They proposed a truncated version of FP32, which was the 16 most significant bits of the FP32 encoding. This format was named BFloat16 (or BF16). The B in BF16, stands for Brain since it was initially introduced by the Google Brain team. Not only did they find that the number of significant bits in BF16 tended to be sufficient for their work (despite being fewer than in FP16), but it was very easy for them to reuse their existing data; FP32 numbers could be readily rounded to BF16 with a minimal amount of work. Furthermore, the even smaller number of the BF16 significant bits enabled even smaller multiplication blocks to be built. Similar to FP16, BF16 multiply-accumulate widening and dot-product instructions started to proliferate. Floating-point arithmetic is a specialized subject, requiring people with many different backgrounds to cooperate in its correct and efficient implementation. Where possible, we have written this specification to be understandable by all, though we recognize that the motivations and references to algorithms or other specifications and standards may be unfamiliar to those who are not domain experts. This specification anticipates being read and acted on by various people with different backgrounds. We have tried to capture these backgrounds here, with a brief explanation of what we expect them to know, and how it relates to the specification. We hope this aids people’s understanding of which aspects of the specification are particularly relevant to them, and which they may (safely!) ignore or pass to a colleague. Software developers These are the people we expect to write code using the instructions in this specification. They should understand the motivations for the instructions we include, and be familiar with most of the algorithms and outside standards to which we refer. Computer architects We expect architects to have some basic floating-point background. Furthermore, we expect architects to be able to examine our instructions for implementation issues, understand how the instructions will be used in context, and advise on how they best to fit the functionality. Digital design engineers & micro-architects These are the people who will implement the specification inside a core. Floating-point expertise is assumed as not all of the corner cases are pointed out in the specification. Verification engineers Responsible for ensuring the correct implementation of the extension in hardware. These people are expected to have some floating-point expertise so that they can identify and generate the interesting corner cases --- include exceptions --- that are common in floating-point architectures and implementations. These are by no means the only people concerned with the specification, but they are the ones we considered most while writing it. BF16 bits IEEE Compliance: While BF16 (also known as BFloat16) is not an IEEE-754 standard format, it is a valid floating-point format as defined by IEEE-754. There are three parameters that specify a format: radix (b), number of digits in the significand (p), and maximum exponent (emax). For BF16 these values are: Table 1. BF16 parameters Parameter Value radix (b) 2 significand (p) 8 emax 127 Table 2. Obligatory Floating Point Format Table Format Sign Bits Expo Bits fraction bits padded 0s encoding bits expo max/bias expo min FP16 1 5 10 0 16 15 -14 BF16 1 8 7 0 16 127 -126 TF32 1 8 10 13 32 127 -126 FP32 1 8 23 0 32 127 -126 FP64 1 11 52 0 64 1023 -1022 FP128 1 15 112 0 128 16,383 -16,382 For these BF16 extensions, instruction behavior on BF16 operands is the same as for other floating-point instructions in the RISC-V ISA. For easy reference, some of this behavior is repeated here. Floating-point values that are too small to be represented as normal numbers, but can still be expressed by the format’s smallest exponent value with a \"0\" integer bit and at least one \"1\" bit in the trailing fractional bits are called subnormal numbers. Basically, the idea is there is a trade off of precision to support gradual underflow. All of the BF16 instructions in the extensions defined in this specification (i.e., Zfbfmin, Zvfbfmin and Zvfbfwma) fully support subnormal numbers. That is, instructions are able to accept subnormal values as inputs and they can produce subnormal results. Future floating-point extensions, including those that operate on BF16 values, may chose not to support subnormal numbers. The comments about supporting subnormal BF16 values are limited to those instructions defined in this specification. Infinities are used to represent values that are too large to be represented by the target format. These are usually produced as a result of overflows (depending on the rounding mode), but can also be provided as inputs. Infinities have a sign associated with them: there are positive infinities and negative infinities. Infinities are important for keeping meaningless results from being operated upon. NaN stands for Not a Number. There are two types of NaNs: signalling (sNaN) and quiet (qNaN). No computational instruction will ever produce an sNaN; These are only provided as input data. Operating on an sNaN will cause an invalid operation exception. Operating on a Quiet NaN usually does not cause an exception. QNaNs are provided as the result of an operation when it cannot be represented as a number or infinity. For example, performing the square root of -1 will result in a qNaN because there is no real number that can represent the result. NaNs can also be used as inputs. NaNs include a sign bit, but the bit has no meaning. NaNs are important for keeping meaningless results from being operated upon. Except where otherwise explicitly stated, when the result of a floating-point operation is a qNaN, it is the RISC-V canonical NaN. For BF16, the RISC-V canonical NaN corresponds to the pattern of 0x7fc0 which is the most significant 16 bits of the RISC-V single-precision canonical NaN. RISC-V applies NaN boxing to scalar results and checks for NaN boxing when a floating-point operation --- even a vector-scalar operation --- consumes a value from a scalar floating-point register. If the value is properly NaN-boxed, its least significant bits are used as the operand, otherwise it is treated as if it were the canonical QNaN. NaN boxing is nothing more than putting the smaller encoding in the least significant bits of a register and setting all of the more significant bits to “1”. This matches the encoding of a qNaN (although not the canonical NaN) in the larger precision. Nan-boxing never affects the value of the operand itself, it just changes the bits of the register that are more significant than the operand’s most significant bit. As is the case with other floating-point instructions, the BF16 instructions support all 5 RISC-V Floating-point rounding modes. These modes can be specified in the rm field of scalar instructions as well as in the frm CSR Table 3. RISC-V Floating Point Rounding Modes Rounding Mode Mnemonic Meaning 000 RNE Round to Nearest, ties to Even 001 RTZ Round towards Zero 010 RDN Round Down (towards −∞) 011 RUP Round Up (towards +∞) 100 RMM Round to Nearest, ties to Max Magnitude As with other scalar floating-point instructions, the rounding mode field rm can also take on the DYN encoding, which indicates that the instruction uses the rounding mode specified in the frm CSR. Table 4. Additional encoding for the rm field of scalar instructions Rounding Mode Mnemonic Meaning 111 DYN select dynamic rounding mode In practice, the default IEEE rounding mode (round to nearest, ties to even) is generally used for arithmetic. RISC-V supports IEEE-defined default exception handling. BF16 is no exception. Default exception handling, as defined by IEEE, is a simple and effective approach to producing results in exceptional cases. For the coder to be able to see what has happened, and take further action if needed, BF16 instructions set floating-point exception flags the same way as all other floating-point instructions in RISC-V. The IEEE-defined underflow exception requires that a result be inexact and tiny, where tininess can be detected before or after rounding. In RISC-V, tininess is detected after rounding. It is important to note that the detection of tininess after rounding requires its own rounding that is different from the final result rounding. This tininess detection requires rounding as if the exponent were unbounded. This means that the input to the rounder is always a normal number. This is different from the final result rounding where the input to the rounder is a subnormal number when the value is too small to be represented as a normal number in the target format. The two different roundings can result in underflow being signalled for results that are rounded back to the normal range. As is defined in '754, under default exception handling, underflow is only signalled when the result is tiny and inexact. In such a case, both the underflow and inexact flags are raised. The group of extensions introduced by the BF16 Instruction Set Extensions is listed here. Detection of individual BF16 extensions uses the unified software-based RISC-V discovery method. At the time of writing, these discovery mechanisms are still a work in progress. The BF16 extensions defined in this specification (i.e., Zfbfmin, Zvfbfmin, and Zvfbfwma) depend on the single-precision floating-point extension F. Furthermore, the vector BF16 extensions (i.e.,Zvfbfmin, and Zvfbfwma) depend on the \"V\" Vector Extension for Application Processors or the Zve32f Vector Extension for Embedded Processors. As stated later in this specification, there exists a dependency between the newly defined extensions: Zvfbfwma depends on Zfbfmin and Zvfbfmin. This initial set of BF16 extensions provides very basic functionality including scalar and vector conversion between BF16 and single-precision values, and vector widening multiply-accumulate instructions. This extension provides the minimal set of instructions needed to enable scalar support of the BF16 format. It enables BF16 as an interchange format as it provides conversion between BF16 values and FP32 values. This extension depends upon the single-precision floating-point extension F, and the FLH, FSH, FMV.X.H, and FMV.H.X instructions as defined in the Zfh extension. While conversion instructions tend to include all supported formats, in these extensions we only support conversion between BF16 and FP32 as we are targeting a special use case. These extensions are intended to support the case where BF16 values are used as reduced precision versions of FP32 values, where use of BF16 provides a two-fold advantage for storage, bandwidth, and computation. In this use case, the BF16 values are typically multiplied by each other and accumulated into FP32 sums. These sums are typically converted to BF16 and then used as subsequent inputs. The operations on the BF16 values can be performed on the CPU or a loosely coupled coprocessor. Subsequent extensions might provide support for native BF16 arithmetic. Such extensions could add additional conversion instructions to allow all supported formats to be converted to and from BF16. BF16 addition, subtraction, multiplication, division, and square-root operations can be faithfully emulated by converting the BF16 operands to single-precision, performing the operation using single-precision arithmetic, and then converting back to BF16. Performing BF16 fused multiply-addition using this method can produce results that differ by 1-ulp on some inputs for the RNE and RMM rounding modes. Conversions between BF16 and formats larger than FP32 can be emulated. Exact widening conversions from BF16 can be synthesized by first converting to FP32 and then converting from FP32 to the target precision. Conversions narrowing to BF16 can be synthesized by first converting to FP32 through a series of halving steps and then converting from FP32 to BF16. As with the fused multiply-addition instruction described above, this method of converting values to BF16 can be off by 1-ulp on some inputs for the RNE and RMM rounding modes. Mnemonic Instruction FCVT.BF16.S Convert FP32 to BF16 FCVT.S.BF16 Convert BF16 to FP32 FLH FSH FMV.H.X FMV.X.H This extension provides the minimal set of instructions needed to enable vector support of the BF16 format. It enables BF16 as an interchange format as it provides conversion between BF16 values and FP32 values. This extension depends upon Zve32f vector extension. While conversion instructions tend to include all supported formats, in these extensions we only support conversion between BF16 and FP32 as we are targeting a special use case. These extensions are intended to support the case where BF16 values are used as reduced precision versions of FP32 values, where use of BF16 provides a two-fold advantage for storage, bandwidth, and computation. In this use case, the BF16 values are typically multiplied by each other and accumulated into FP32 sums. These sums are typically converted to BF16 and then used as subsequent inputs. The operations on the BF16 values can be performed on the CPU or a loosely coupled coprocessor. Subsequent extensions might provide support for native BF16 arithmetic. Such extensions could add additional conversion instructions to allow all supported formats to be converted to and from BF16. BF16 addition, subtraction, multiplication, division, and square-root operations can be faithfully emulated by converting the BF16 operands to single-precision, performing the operation using single-precision arithmetic, and then converting back to BF16. Performing BF16 fused multiply-addition using this method can produce results that differ by 1-ulp on some inputs for the RNE and RMM rounding modes. Conversions between BF16 and formats larger than FP32 can be faithfully emulated. Exact widening conversions from BF16 can be synthesized by first converting to FP32 and then converting from FP32 to the target precision. Conversions narrowing to BF16 can be synthesized by first converting to FP32 through a series of halving steps using vector round-towards-odd narrowing conversion instructions (vfncvt.rod.f.f.w). The final convert from FP32 to BF16 would use the desired rounding mode. Mnemonic Instruction vfncvtbf16.f.f.w Vector convert FP32 to BF16 vfwcvtbf16.f.f.v Vector convert BF16 to FP32 This extension provides a vector widening BF16 mul-add instruction that accumulates into FP32. This extension depends upon the Zvfbfmin extension and the Zfbfmin extension. Mnemonic Instruction VFWMACCBF16 Vector BF16 widening multiply-accumulate Synopsis Convert FP32 value to a BF16 value Mnemonic fcvt.bf16.s rd, rs1 Encoding Encoding While the mnemonic of this instruction is consistent with that of the other RISC-V floating-point convert instructions, a new encoding is used in bits 24:20. BF16.S and H are used to signify that the source is FP32 and the destination is BF16. Description Narrowing convert FP32 value to a BF16 value. Round according to the RM field. This instruction is similar to other narrowing floating-point-to-floating-point conversion instructions. Exceptions: Overflow, Underflow, Inexact, Invalid Included in: Zfbfmin Synopsis Convert BF16 value to an FP32 value Mnemonic fcvt.s.bf16 rd, rs1 Encoding Encoding While the mnemonic of this instruction is consistent with that of the other RISC-V floating-point convert instructions, a new encoding is used in bits 24:20 to indicate that the source is BF16. Description Converts a BF16 value to an FP32 value. The conversion is exact. This instruction is similar to other widening floating-point-to-floating-point conversion instructions. If the input is normal or infinity, the BF16 encoded value is shifted to the left by 16 places and the least significant 16 bits are written with 0s. The result is NaN-boxed by writing the most significant FLEN-32 bits with 1s. Exceptions: Invalid Included in: Zfbfmin Synopsis Vector convert FP32 to BF16 Mnemonic vfncvtbf16.f.f.w vd, vs2, vm Encoding Reserved Encodings SEW is any value other than 16 Arguments Register Direction EEW Definition Vs2 input 32 FP32 Source Vd output 16 BF16 Result Description Narrowing convert from FP32 to BF16. Round according to the frm register. This instruction is similar to vfncvt.f.f.w which converts a floating-point value in a 2*SEW-width format into an SEW-width format. However, here the SEW-width format is limited to BF16. Exceptions: Overflow, Underflow, Inexact, Invalid Included in: Zvfbfmin Synopsis Vector convert BF16 to FP32 Mnemonic vfwcvtbf16.f.f.v vd, vs2, vm Encoding Reserved Encodings SEW is any value other than 16 Arguments Register Direction EEW Definition Vs2 input 16 BF16 Source Vd output 32 FP32 Result Description Widening convert from BF16 to FP32. The conversion is exact. This instruction is similar to vfwcvt.f.f.v which converts a floating-point value in an SEW-width format into a 2*SEW-width format. However, here the SEW-width format is limited to BF16. If the input is normal or infinity, the BF16 encoded value is shifted to the left by 16 places and the least significant 16 bits are written with 0s. Exceptions: Invalid Included in: Zvfbfmin Synopsis Vector BF16 widening multiply-accumulate Mnemonic vfwmaccbf16.vv vd, vs1, vs2, vm vfwmaccbf16.vf vd, rs1, vs2, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 16 Arguments Register Direction EEW Definition Vd input 32 FP32 Accumulate Vs1/rs1 input 16 BF16 Source Vs2 input 16 BF16 Source Vd output 32 FP32 Result Description This instruction performs a widening fused multiply-accumulate operation, where each pair of BF16 values are multiplied and their unrounded product is added to the corresponding FP32 accumulate value. The sum is rounded according to the frm register. In the vector-vector version, the BF16 elements are read from vs1 and vs2 and FP32 accumulate value is read from vd. The FP32 result is written to the destination register vd. The vector-scalar version is similar, but instead of reading elements from vs1, a scalar BF16 value is read from the FPU register rs1. Exceptions: Overflow, Underflow, Inexact, Invalid Operation This vfwmaccbf16.vv instruction is equivalent to widening each of the BF16 inputs to FP32 and then performing an FMACC as shown in the following instruction sequence: vfwcvtbf16.f.f.v T1, vs1, vm vfwcvtbf16.f.f.v T2, vs2, vm vfmacc.vv vd, T1, T2, vm Likewise, vfwmaccbf16.vf is equivalent to the following instruction sequence: fcvt.s.bf16 T1, rs1 vfwcvtbf16.f.f.v T2, vs2, vm vfmacc.vf vd, T1, T2, vm Included in: Zvfbfwma 754-2019 - IEEE Standard for Floating-Point Arithmetic 754-2008 - IEEE Standard for Floating-Point Arithmetic","title":"\"BF16\" Extensions for BFloat16-precision Floating-Point, Version 1.0","component":"isa","version":"v20250508","name":"bfloat16","url":"/isa/unpriv/bfloat16.html","titles":[{"text":"Introduction","hash":"BF16_introduction","id":1},{"text":"Intended Audience","hash":"BF16_audience","id":2},{"text":"Number Format","hash":"BF16_format","id":3},{"text":"BF16 Operand Format","hash":"bf16-operand-format","id":4},{"text":"BF16 Behavior","hash":"bf16-behavior","id":5},{"text":"Subnormal Numbers:","hash":"subnormal-numbers","id":6},{"text":"Infinities:","hash":"infinities","id":7},{"text":"NaNs","hash":"nans","id":8},{"text":"Scalar NaN Boxing","hash":"scalar-nan-boxing","id":9},{"text":"Rounding Modes:","hash":"rounding-modes","id":10},{"text":"Handling exceptions","hash":"handling-exceptions","id":11},{"text":"Underflow","hash":"underflow","id":12},{"text":"Extensions","hash":"BF16_extensions","id":13},{"text":"Zfbfmin - Scalar BF16 Converts","hash":"zfbfmin","id":14},{"text":"Zvfbfmin - Vector BF16 Converts","hash":"zvfbfmin","id":15},{"text":"Zvfbfwma - Vector BF16 widening mul-add","hash":"zvfbfwma","id":16},{"text":"Instructions","hash":"BF16_insns","id":17},{"text":"fcvt.bf16.s","hash":"insns-fcvt.bf16.s","id":18},{"text":"fcvt.s.bf16","hash":"insns-fcvt.s.bf16","id":19},{"text":"vfncvtbf16.f.f.w","hash":"insns-vfncvtbf16.f.f.w","id":20},{"text":"vfwcvtbf16.f.f.v","hash":"insns-vfwcvtbf16.f.f.v","id":21},{"text":"vfwmaccbf16","hash":"insns-vfwmaccbf16","id":22},{"text":"Bibliography","hash":"bibliography","id":23}]},"31":{"id":31,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"C\" Extension for Compressed Instructions, Version 2.0 This chapter describes the RISC-V standard compressed instruction-set extension, named \"C\", which reduces static and dynamic code size by adding short 16-bit instruction encodings for common operations. The C extension can be added to any of the base ISAs (RV32I, RV32E, RV64I, RV64E), and we use the generic term \"RVC\" to cover any of these. Typically, 50%-60% of the RISC-V instructions in a program can be replaced with RVC instructions, resulting in a 25%-30% code-size reduction. RVC uses a simple compression scheme that offers shorter 16-bit versions of common 32-bit RISC-V instructions when: the immediate or address offset is small, or one of the registers is the zero register (x0), the ABI link register (x1), or the ABI stack pointer (x2), or the destination register and the first source register are identical, or the registers used are the 8 most popular ones. The C extension is compatible with all other standard instruction extensions. The C extension allows 16-bit instructions to be freely intermixed with 32-bit instructions, with the latter now able to start on any 16-bit boundary, i.e., IALIGN=16. With the addition of the C extension, no instructions can raise instruction-address-misaligned exceptions. Removing the 32-bit alignment constraint on the original 32-bit instructions allows significantly greater code density. The compressed instruction encodings are mostly common across RV32C and RV64C, but as shown in Table 34, a few opcodes are used for different purposes depending on base ISA. For example, the wider address-space RV64C variant requires additional opcodes to compress loads and stores of 64-bit integer values, while RV32C uses the same opcodes to compress loads and stores of single-precision floating-point values. If the C extension is implemented, the appropriate compressed floating-point load and store instructions must be provided whenever the relevant standard floating-point extension (F and/or D) is also implemented. In addition, RV32C includes a compressed jump and link instruction to compress short-range subroutine calls, where the same opcode is used to compress ADDIW for RV64C. Double-precision loads and stores are a significant fraction of static and dynamic instructions, hence the motivation to include them in the RV32C and RV64C encoding. Although single-precision loads and stores are not a significant source of static or dynamic compression for benchmarks compiled for the currently supported ABIs, for microcontrollers that only provide hardware single-precision floating-point units and have an ABI that only supports single-precision floating-point numbers, the single-precision loads and stores will be used at least as frequently as double-precision loads and stores in the measured benchmarks. Hence, the motivation to provide compressed support for these in RV32C. Short-range subroutine calls are more likely in small binaries for microcontrollers, hence the motivation to include these in RV32C. Although reusing opcodes for different purposes for different base ISAs adds some complexity to documentation, the impact on implementation complexity is small even for designs that support multiple base ISAs. The compressed floating-point load and store variants use the same instruction format with the same register specifiers as the wider integer loads and stores. RVC was designed under the constraint that each RVC instruction expands into a single 32-bit instruction in either the base ISA (RV32I/E or RV64I/E) or the F and D standard extensions where present. Adopting this constraint has two main benefits: Hardware designs can simply expand RVC instructions during decode, simplifying verification and minimizing modifications to existing microarchitectures. Compilers can be unaware of the RVC extension and leave code compression to the assembler and linker, although a compression-aware compiler will generally be able to produce better results. We felt the multiple complexity reductions of a simple one-one mapping between C and base IFD instructions far outweighed the potential gains of a slightly denser encoding that added additional instructions only supported in the C extension, or that allowed encoding of multiple IFD instructions in one C instruction. It is important to note that the C extension is not designed to be a stand-alone ISA, and is meant to be used alongside a base ISA. Variable-length instruction sets have long been used to improve code density. For example, the IBM Stretch [22], developed in the late 1950s, had an ISA with 32-bit and 64-bit instructions, where some of the 32-bit instructions were compressed versions of the full 64-bit instructions. Stretch also employed the concept of limiting the set of registers that were addressable in some of the shorter instruction formats, with short branch instructions that could only refer to one of the index registers. The later IBM 360 architecture [23] supported a simple variable-length instruction encoding with 16-bit, 32-bit, or 48-bit instruction formats. In 1963, CDC introduced the Cray-designed CDC 6600 [24], a precursor to RISC architectures, that introduced a register-rich load-store architecture with instructions of two lengths, 15-bits and 30-bits. The later Cray-1 design used a very similar instruction format, with 16-bit and 32-bit instruction lengths. The initial RISC ISAs from the 1980s all picked performance over code size, which was reasonable for a workstation environment, but not for embedded systems. Hence, both ARM and MIPS subsequently made versions of the ISAs that offered smaller code size by offering an alternative 16-bit wide instruction set instead of the standard 32-bit wide instructions. The compressed RISC ISAs reduced code size relative to their starting points by about 25-30%, yielding code that was significantly smaller than 80x86. This result surprised some, as their intuition was that the variable-length CISC ISA should be smaller than RISC ISAs that offered only 16-bit and 32-bit formats. Since the original RISC ISAs did not leave sufficient opcode space free to include these unplanned compressed instructions, they were instead developed as complete new ISAs. This meant compilers needed different code generators for the separate compressed ISAs. The first compressed RISC ISA extensions (e.g., ARM Thumb and MIPS16) used only a fixed 16-bit instruction size, which gave good reductions in static code size but caused an increase in dynamic instruction count, which led to lower performance compared to the original fixed-width 32-bit instruction size. This led to the development of a second generation of compressed RISC ISA designs with mixed 16-bit and 32-bit instruction lengths (e.g., ARM Thumb2, microMIPS, PowerPC VLE), so that performance was similar to pure 32-bit instructions but with significant code size savings. Unfortunately, these different generations of compressed ISAs are incompatible with each other and with the original uncompressed ISA, leading to significant complexity in documentation, implementations, and software tools support. Of the commonly used 64-bit ISAs, only PowerPC and microMIPS currently supports a compressed instruction format. It is surprising that the most popular 64-bit ISA for mobile platforms (ARM v8) does not include a compressed instruction format given that static code size and dynamic instruction fetch bandwidth are important metrics. Although static code size is not a major concern in larger systems, instruction fetch bandwidth can be a major bottleneck in servers running commercial workloads, which often have a large instruction working set. Benefiting from 25 years of hindsight, RISC-V was designed to support compressed instructions from the outset, leaving enough opcode space for RVC to be added as a simple extension on top of the base ISA (along with many other extensions). The philosophy of RVC is to reduce code size for embedded applications and to improve performance and energy-efficiency for all applications due to fewer misses in the instruction cache. Waterman shows that RVC fetches 25%-30% fewer instruction bits, which reduces instruction cache misses by 20%-25%, or roughly the same performance impact as doubling the instruction cache size. [25] Compressed 16-bit RVC instruction formats shows the nine compressed instruction formats. CR, CI, and CSS can use any of the 32 RVI registers, but CIW, CL, CS, CA, and CB are limited to just 8 of them. Registers specified by the three-bit rs1′, rs2′, and rd′ fields of the CIW, CL, CS, CA, and CB formats. lists these popular registers, which correspond to registers x8 to x15. Note that there is a separate version of load and store instructions that use the stack pointer as the base address register, since saving to and restoring from the stack are so prevalent, and that they use the CI and CSS formats to allow access to all 32 data registers. CIW supplies an 8-bit immediate for the ADDI4SPN instruction. The RISC-V ABI was changed to make the frequently used registers map to registers 'x8-x15'. This simplifies the decompression decoder by having a contiguous naturally aligned set of register numbers, and is also compatible with the RV32E and RV64E base ISAs, which only have 16 integer registers. Compressed register-based floating-point loads and stores also use the CL and CS formats respectively, with the eight registers mapping to f8 to f15. The standard RISC-V calling convention maps the most frequently used floating-point registers to registers f8 to f15, which allows the same register decompression decoding as for integer register numbers. The formats were designed to keep bits for the two register source specifiers in the same place in all instructions, while the destination register field can move. When the full 5-bit destination register specifier is present, it is in the same place as in the 32-bit RISC-V encoding. Where immediates are sign-extended, the sign extension is always from bit 12. Immediate fields have been scrambled, as in the base specification, to reduce the number of immediate muxes required. The immediate fields are scrambled in the instruction formats instead of in sequential order so that as many bits as possible are in the same position in every instruction, thereby simplifying implementations. For many RVC instructions, zero-valued immediates are disallowed and x0 is not a valid 5-bit register specifier. These restrictions free up encoding space for other instructions requiring fewer operand bits. Table 1. Compressed 16-bit RVC instruction formats Format Meaning CR Register CI Immediate CSS Stack-relative Store CIW Wide Immediate CL Load CS Store CA Arithmetic CB Branch/Arithmetic CJ Jump 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 funct4 rd/rs1 rs2 op funct3 imm rd/rs1 imm op funct3 imm rs2 op funct3 imm rd′ op funct3 imm rs1′ imm rd′ op funct3 imm rs1′ imm rs2′ op funct6 rd′/rs1′ funct2 rs2′ op funct3 offset rd′/rs1′ offset op funct3 jump target op Table 2. Registers specified by the three-bit rs1′, rs2′, and rd′ fields of the CIW, CL, CS, CA, and CB formats. RVC Register Number Integer Register Number Integer Register ABI Name Floating-Point Register Number Floating-Point Register ABI Name 000 001 010 011 100 101 110 111 x8 x9 x10 x11 x12 x13 x14 x15 s0 s1 a0 a1 a2 a3 a4 a5 f8 f9 f10 f11 f12 f13 f14 f15 fs0 fs1 fa0 fa1 fa2 fa3 fa4 fa5 To increase the reach of 16-bit instructions, data-transfer instructions use zero-extended immediates that are scaled by the size of the data in bytes: ×4 for words, ×8 for double words, and ×16 for quad words. RVC provides two variants of loads and stores. One uses the ABI stack pointer, x2, as the base address and can target any data register. The other can reference one of 8 base address registers and one of 8 data registers. These instructions use the CI format. C.LWSP loads a 32-bit value from memory into register rd. It computes an effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2. It expands to lw rd, offset(x2). C.LWSP is valid only when rd≠x0; the code points with rd=x0 are reserved. C.LDSP is an RV64C-only instruction that loads a 64-bit value from memory into register rd. It computes its effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2. It expands to ld rd, offset(x2). C.LDSP is valid only when rd≠x0; the code points with rd=x0 are reserved. C.FLWSP is an RV32FC-only instruction that loads a single-precision floating-point value from memory into floating-point register rd. It computes its effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2. It expands to flw rd, offset(x2). C.FLDSP is an RV32DC/RV64DC-only instruction that loads a double-precision floating-point value from memory into floating-point register rd. It computes its effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2. It expands to fld rd, offset(x2). These instructions use the CSS format. C.SWSP stores a 32-bit value in register rs2 to memory. It computes an effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2. It expands to sw rs2, offset(x2). C.SDSP is an RV64C-only instruction that stores a 64-bit value in register rs2 to memory. It computes an effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2. It expands to sd rs2, offset(x2). C.FSWSP is an RV32FC-only instruction that stores a single-precision floating-point value in floating-point register rs2 to memory. It computes an effective address by adding the zero-extended offset, scaled by 4, to the stack pointer, x2. It expands to fsw rs2, offset(x2). C.FSDSP is an RV32DC/RV64DC-only instruction that stores a double-precision floating-point value in floating-point register rs2 to memory. It computes an effective address by adding the zero-extended offset, scaled by 8, to the stack pointer, x2. It expands to fsd rs2, offset(x2). Register save/restore code at function entry/exit represents a significant portion of static code size. The stack-pointer-based compressed loads and stores in RVC are effective at reducing the save/restore static code size by a factor of 2 while improving performance by reducing dynamic instruction bandwidth. A common mechanism used in other ISAs to further reduce save/restore code size is load-multiple and store-multiple instructions. We considered adopting these for RISC-V but noted the following drawbacks to these instructions: These instructions complicate processor implementations. For virtual memory systems, some data accesses could be resident in physical memory and some could not, which requires a new restart mechanism for partially executed instructions. Unlike the rest of the RVC instructions, there is no IFD equivalent to Load Multiple and Store Multiple. Unlike the rest of the RVC instructions, the compiler would have to be aware of these load-multiple and store-multiple instructions to both allocate registers in the expected order and also to schedule the loads and stores contiguously and in the proper order, to maximize the chances of them being detected and replaced by an assembler or linker with the equivalent load-multiple or store-multiple compressed instruction. Simple microarchitectural implementations will constrain how other instructions can be scheduled around the load and store multiple instructions, leading to a potential performance loss. The desire for sequential register allocation might conflict with the featured registers selected for the CIW, CL, CS, CA, and CB formats. Furthermore, much of the gains can be realized in software by replacing prologue and epilogue code with subroutine calls to common prologue and epilogue code, a technique described in Section 5.6 of [26]. While reasonable architects might come to different conclusions, we decided to omit load and store multiple and instead use the software-only approach of calling save/restore millicode routines to attain the greatest code size reduction. These instructions use the CL format. C.LW loads a 32-bit value from memory into register rd′. It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1′. It expands to lw rd′, offset(rs1′). C.LD is an RV64C-only instruction that loads a 64-bit value from memory into register rd′. It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1′. It expands to ld rd′, offset(rs1′). C.FLW is an RV32FC-only instruction that loads a single-precision floating-point value from memory into floating-point register rd′. It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1′. It expands to flw rd′, offset(rs1′). C.FLD is an RV32DC/RV64DC-only instruction that loads a double-precision floating-point value from memory into floating-point register rd′. It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1′. It expands to fld rd′, offset(rs1′). These instructions use the CS format. C.SW stores a 32-bit value in register rs2′ to memory. It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1′. It expands to sw rs2′, offset(rs1′). C.SD is an RV64C-only instruction that stores a 64-bit value in register rs2′ to memory. It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1′. It expands to sd rs2′, offset(rs1′). C.FSW is an RV32FC-only instruction that stores a single-precision floating-point value in floating-point register rs2′ to memory. It computes an effective address by adding the zero-extended offset, scaled by 4, to the base address in register rs1′. It expands to fsw rs2′, offset(rs1′). C.FSD is an RV32DC/RV64DC-only instruction that stores a double-precision floating-point value in floating-point register rs2′ to memory. It computes an effective address by adding the zero-extended offset, scaled by 8, to the base address in register rs1′. It expands to fsd rs2′, offset(rs1′). RVC provides unconditional jump instructions and conditional branch instructions. As with base RVI instructions, the offsets of all RVC control transfer instructions are in multiples of 2 bytes. These instructions use the CJ format. C.J performs an unconditional control transfer. The offset is sign-extended and added to the pc to form the jump target address. C.J can therefore target a ±2 KiB range. C.J expands to jal x0, offset. C.JAL is an RV32C-only instruction that performs the same operation as C.J, but additionally writes the address of the instruction following the jump (pc+2) to the link register, x1. C.JAL expands to jal x1, offset. These instructions use the CR format. C.JR (jump register) performs an unconditional control transfer to the address in register rs1. C.JR expands to jalr x0, 0(rs1). C.JR is valid only when rs1≠x0; the code point with rs1=x0 is reserved. C.JALR (jump and link register) performs the same operation as C.JR, but additionally writes the address of the instruction following the jump (pc+2) to the link register, x1. C.JALR expands to jalr x1, 0(rs1). C.JALR is valid only when rs1≠x0; the code point with rs1=x0 corresponds to the C.EBREAK instruction. Strictly speaking, C.JALR does not expand exactly to a base RVI instruction as the value added to the PC to form the link address is 2 rather than 4 as in the base ISA, but supporting both offsets of 2 and 4 bytes is only a very minor change to the base microarchitecture. These instructions use the CB format. C.BEQZ performs conditional control transfers. The offset is sign-extended and added to the pc to form the branch target address. It can therefore target a ±256 B range. C.BEQZ takes the branch if the value in register rs1′ is zero. It expands to beq rs1′, x0, offset. C.BNEZ is defined analogously, but it takes the branch if rs1′ contains a nonzero value. It expands to bne rs1′, x0, offset. RVC provides several instructions for integer arithmetic and constant generation. The two constant-generation instructions both use the CI instruction format and can target any integer register. C.LI loads the sign-extended 6-bit immediate, imm, into register rd. C.LI expands into addi rd, x0, imm. C.LI is valid only when rd≠x0; the code points with rd=x0 encode HINTs. C.LUI loads the non-zero 6-bit immediate field into bits 17–12 of the destination register, clears the bottom 12 bits, and sign-extends bit 17 into all higher bits of the destination. C.LUI expands into lui rd, imm. C.LUI is valid only when rd≠{x0,x2}, and when the immediate is not equal to zero. The code points with imm=0 are reserved; the remaining code points with rd=x0 are HINTs; and the remaining code points with rd=x2 correspond to the C.ADDI16SP instruction. These integer register-immediate operations are encoded in the CI format and perform operations on an integer register and a 6-bit immediate. C.ADDI adds the non-zero sign-extended 6-bit immediate to the value in register rd then writes the result to rd. C.ADDI expands into addi rd, rd, imm. C.ADDI is valid only when rd≠x0 and imm≠0. The code points with rd=x0 encode the C.NOP instruction; the remaining code points with imm=0 encode HINTs. C.ADDIW is an RV64C-only instruction that performs the same computation but produces a 32-bit result, then sign-extends result to 64 bits. C.ADDIW expands into addiw rd, rd, imm. The immediate can be zero for C.ADDIW, where this corresponds to sext.w rd. C.ADDIW is valid only when rd≠x0; the code points with rd=x0 are reserved. C.ADDI16SP (add immediate to stack pointer) shares the opcode with C.LUI, but has a destination field of x2. C.ADDI16SP adds the non-zero sign-extended 6-bit immediate to the value in the stack pointer (sp=x2), where the immediate is scaled to represent multiples of 16 in the range [-512, 496]. C.ADDI16SP is used to adjust the stack pointer in procedure prologues and epilogues. It expands into addi x2, x2, nzimm[9:4]. C.ADDI16SP is valid only when nzimm≠0; the code point with nzimm=0 is reserved. In the standard RISC-V calling convention, the stack pointer sp is always 16-byte aligned. C.ADDI4SPN (add immediate to stack pointer, non-destructive) is a CIW-format instruction that adds a zero-extended non-zero immediate, scaled by 4, to the stack pointer, x2, and writes the result to rd′. This instruction is used to generate pointers to stack-allocated variables, and expands to addi rd′, x2, nzuimm[9:2]. C.ADDI4SPN is valid only when nzuimm≠0; the code points with nzuimm=0 are reserved. C.SLLI is a CI-format instruction that performs a logical left shift of the value in register rd then writes the result to rd. The shift amount is encoded in the shamt field. C.SLLI expands into slli rd, rd, shamt[5:0]. For RV32C, shamt[5] must be zero; the code points with shamt[5]=1 are designated for custom extensions. For RV32C and RV64C, the shift amount must be non-zero; the code points with shamt=0 are HINTs. For all base ISAs, the code points with rd=x0 are HINTs, except those with shamt[5]=1 in RV32C. C.SRLI is a CB-format instruction that performs a logical right shift of the value in register rd′ then writes the result to rd′. The shift amount is encoded in the shamt field. C.SRLI expands into srli rd′, rd′, shamt. For RV32C, shamt[5] must be zero; the code points with shamt[5]=1 are designated for custom extensions. For RV32C and RV64C, the shift amount must be non-zero; the code points with shamt=0 are HINTs. C.SRAI is defined analogously to C.SRLI, but instead performs an arithmetic right shift. C.SRAI expands to srai rd′, rd′, shamt. Left shifts are usually more frequent than right shifts, as left shifts are frequently used to scale address values. Right shifts have therefore been granted less encoding space and are placed in an encoding quadrant where all other immediates are sign-extended. C.ANDI is a CB-format instruction that computes the bitwise AND of the value in register rd′ and the sign-extended 6-bit immediate, then writes the result to rd′. C.ANDI expands to andi rd′, rd′, imm. These instructions use the CR format. C.MV copies the value in register rs2 into register rd. C.MV expands into add rd, x0, rs2. C.MV is valid only when rs2≠x0; the code points with rs2=x0 correspond to the C.JR instruction. The code points with rs2≠x0 and rd=x0 are HINTs. C.MV expands to a different instruction than the canonical MV pseudoinstruction, which instead uses ADDI. Implementations that handle MV specially, e.g. using register-renaming hardware, may find it more convenient to expand C.MV to MV instead of ADD, at slight additional hardware cost. C.ADD adds the values in registers rd and rs2 and writes the result to register rd. C.ADD expands into add rd, rd, rs2. C.ADD is only valid when rs2≠x0; the code points with rs2=x0 correspond to the C.JALR and C.EBREAK instructions. The code points with rs2≠x0 and rd=x0 are HINTs. These instructions use the CA format. C.AND computes the bitwise AND of the values in registers rd′ and rs2′, then writes the result to register rd′. C.AND expands into and rd′, rd′, rs2′. C.OR computes the bitwise OR of the values in registers rd′ and rs2′, then writes the result to register rd′. C.OR expands into or rd′, rd′, rs2′. C.XOR computes the bitwise XOR of the values in registers rd′ and rs2′, then writes the result to register rd′. C.XOR expands into xor rd′, rd′, rs2′. C.SUB subtracts the value in register rs2′ from the value in register rd′, then writes the result to register rd′. C.SUB expands into sub rd′, rd′, rs2′. C.ADDW is an RV64C-only instruction that adds the values in registers rd′ and rs2′, then sign-extends the lower 32 bits of the sum before writing the result to register rd′. C.ADDW expands into addw rd′, rd′, rs2′. C.SUBW is an RV64C-only instruction that subtracts the value in register rs2′ from the value in register rd′, then sign-extends the lower 32 bits of the difference before writing the result to register rd′. C.SUBW expands into subw rd′, rd′, rs2′. This group of six instructions do not provide large savings individually, but do not occupy much encoding space and are straightforward to implement, and as a group provide a worthwhile improvement in static and dynamic compression. A 16-bit instruction with all bits zero is permanently reserved as an illegal instruction. We reserve all-zero instructions to be illegal instructions to help trap attempts to execute zero-ed or non-existent portions of the memory space. The all-zero value should not be redefined in any non-standard extension. Similarly, we reserve instructions with all bits set to 1 (corresponding to very long instructions in the RISC-V variable-length encoding scheme) as illegal to capture another common value seen in non-existent memory regions. C.NOP is a CI-format instruction that does not change any user-visible state, except for advancing the pc and incrementing any applicable performance counters. C.NOP expands to nop. C.NOP is valid only when imm=0; the code points with imm≠0 encode HINTs. Debuggers can use the C.EBREAK instruction, which expands to ebreak, to cause control to be transferred back to the debugging environment. C.EBREAK shares the opcode with the C.ADD instruction, but with rd and rs2 both zero, thus can also use the CR format. On implementations that support the C extension, compressed forms of the I instructions permitted inside constrained LR/SC sequences, as described in [sec:lrscseq], are also permitted inside constrained LR/SC sequences. The implication is that any implementation that claims to support both the A and C extensions must ensure that LR/SC sequences containing valid C instructions will eventually complete. A portion of the RVC encoding space is reserved for microarchitectural HINTs. Like the HINTs in the RV32I base ISA (see [rv32i-hints]), these instructions do not modify any architectural state, except for advancing the pc and any applicable performance counters. HINTs are executed as no-ops on implementations that ignore them. RVC HINTs are encoded as computational instructions that do not modify the architectural state, either because rd=x0 (e.g. C.ADD x0, t0), or because rd is overwritten with a copy of itself (e.g. C.ADDI t0, 0). This HINT encoding has been chosen so that simple implementations can ignore HINTs altogether, and instead execute a HINT as a regular computational instruction that happens not to mutate the architectural state. RVC HINTs do not necessarily expand to their RVI HINT counterparts. For example, C.ADD x0, a0 might not encode the same HINT as ADD x0, x0, a0. The primary reason to not require an RVC HINT to expand to an RVI HINT is that HINTs are unlikely to be compressible in the same manner as the underlying computational instruction. Also, decoupling the RVC and RVI HINT mappings allows the scarce RVC HINT space to be allocated to the most popular HINTs, and in particular, to HINTs that are amenable to macro-op fusion. Table 32 lists all RVC HINT code points. For RV32C, 78% of the HINT space is reserved for standard HINTs. The remainder of the HINT space is designated for custom HINTs; no standard HINTs will ever be defined in this subspace. Table 3. RVC HINT instructions. Instruction Constraints Code Points Purpose C.NOP imm≠0 63 Designated for future standard use C.ADDI rd≠x0, imm=0 31 C.LI rd=x0 64 C.LUI rd=x0, imm≠0 63 C.MV rd=x0, rs2≠x0 31 C.ADD rd=x0, rs2≠x0, rs2≠x2-x5 27 C.ADD rd=x0, rs2≠x2-x5 4 (rs2=x2) C.NTL.P1 (rs2=x3) C.NTL.PALL (rs2=x4) C.NTL.S1 (rs2=x5) C.NTL.ALL C.SLLI rd=x0, imm≠0 31 (RV32), 63 (RV64) Designated for custom use C.SLLI64 rd=x0 1 C.SLLI64 rd≠x0, RV32 and RV64 only 31 C.SRLI64 RV32 and RV64 only 8 C.SRAI64 RV32 and RV64 only 8 RVC opcode map instructions. shows a map of the major opcodes for RVC. Each row of the table corresponds to one quadrant of the encoding space. The last quadrant, which has the two least-significant bits set, corresponds to instructions wider than 16 bits, including those in the base ISAs. Several instructions are only valid for certain operands; when invalid, they are marked either RES to indicate that the opcode is reserved for future standard extensions; Custom to indicate that the opcode is designated for custom extensions; or HINT to indicate that the opcode is reserved for microarchitectural hints (see HINT Instructions). Table 4. RVC opcode map instructions. inst[15:13] inst[1:0] 000 001 010 011 100 101 110 111 00 ADDI4SPN FLD FLD LW FLW LD Reserved FSD FSD SW FSW SD RV32 RV64 01 ADDI JAL ADDIW LI LUI/ADDI16SP MISC-ALU J BEQZ BNEZ RV32 RV64 10 SLLI FLDSP FLDSP LWSP FLWSP LDSP J[AL]R/MV/ADD FSDSP FSDSP SWSP FSWSP SDSP RV32 RV64 11 >16b Instruction listing for RVC, Quadrant 0, Instruction listing for RVC, Quadrant 1, and Instruction listing for RVC, Quadrant 2 list the RVC instructions. Figure 1. Instruction listing for RVC, Quadrant 0 Figure 2. Instruction listing for RVC, Quadrant 1 Figure 3. Instruction listing for RVC, Quadrant 2","title":"\"C\" Extension for Compressed Instructions, Version 2.0","component":"isa","version":"v20250508","name":"c-st-ext","url":"/isa/unpriv/c-st-ext.html","titles":[{"text":"Overview","hash":"overview","id":1},{"text":"Compressed Instruction Formats","hash":"compressed-instruction-formats","id":2},{"text":"Load and Store Instructions","hash":"load-and-store-instructions","id":3},{"text":"Stack-Pointer-Based Loads and Stores","hash":"stack-pointer-based-loads-and-stores","id":4},{"text":"Register-Based Loads and Stores","hash":"register-based-loads-and-stores","id":5},{"text":"Control Transfer Instructions","hash":"control-transfer-instructions","id":6},{"text":"Integer Computational Instructions","hash":"integer-computational-instructions","id":7},{"text":"Integer Constant-Generation Instructions","hash":"integer-constant-generation-instructions","id":8},{"text":"Integer Register-Immediate Operations","hash":"integer-register-immediate-operations","id":9},{"text":"Integer Register-Register Operations","hash":"integer-register-register-operations","id":10},{"text":"Defined Illegal Instruction","hash":"defined-illegal-instruction","id":11},{"text":"NOP Instruction","hash":"nop-instruction","id":12},{"text":"Breakpoint Instruction","hash":"breakpoint-instruction","id":13},{"text":"Usage of C Instructions in LR/SC Sequences","hash":"usage-of-c-instructions-in-lrsc-sequences","id":14},{"text":"HINT Instructions","hash":"rvc-hints","id":15},{"text":"RVC Instruction Set Listings","hash":"rvc-instruction-set-listings","id":16}]},"32":{"id":32,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Appendix D: Calling Convention for Vector State (Not authoritative - Placeholder Only) This Appendix is only a placeholder to help explain the conventions used in the code examples, and is not considered frozen or part of the ratification process. The official RISC-V psABI document is being expanded to specify the vector calling conventions. In the RISC-V psABI, the vector registers v0-v31 are all caller-saved. The vl and vtype CSRs are also caller-saved. Procedures may assume that vstart is zero upon entry. Procedures may assume that vstart is zero upon return from a procedure call. Application software should normally not write vstart explicitly. Any procedure that does explicitly write vstart to a nonzero value must zero vstart before either returning or calling another procedure. The vxrm and vxsat fields of vcsr have thread storage duration. Executing a system call causes all caller-saved vector registers (v0-v31, vl, vtype) and vstart to become unspecified. This scheme allows system calls that cause context switches to avoid saving and later restoring the vector registers. Most OSes will choose to either leave these registers intact or reset them to their initial state to avoid leaking information across process boundaries.","title":"Calling Convention for Vector State (Not authoritative - Placeholder Only)","component":"isa","version":"v20250508","name":"calling-convention","url":"/isa/unpriv/calling-convention.html","titles":[]},"33":{"id":33,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"CMO\" Extensions for Base Cache Management Operation ISA, Version 1.0.0 The semantics of each instruction in the Instructions chapter is expressed in a SAIL-like syntax. Cache-management operation (or CMO) instructions perform operations on copies of data in the memory hierarchy. In general, CMO instructions operate on cached copies of data, but in some cases, a CMO instruction may operate on memory locations directly. Furthermore, CMO instructions are grouped by operation into the following classes: A management instruction manipulates cached copies of data with respect to a set of agents that can access the data A zero instruction zeros out a range of memory locations, potentially allocating cached copies of data in one or more caches A prefetch instruction indicates to hardware that data at a given memory location may be accessed in the near future, potentially allocating cached copies of data in one or more caches This document introduces a base set of CMO ISA extensions that operate specifically on cache blocks or the memory locations corresponding to a cache block; these are known as cache-block operation (or CBO) instructions. Each of the above classes of instructions represents an extension in this specification: The Zicbom extension defines a set of cache-block management instructions: CBO.INVAL, CBO.CLEAN, and CBO.FLUSH The Zicboz extension defines a cache-block zero instruction: CBO.ZERO The Zicbop extension defines a set of cache-block prefetch instructions: PREFETCH.R, PREFETCH.W, and PREFETCH.I The execution behavior of the above instructions is also modified by CSR state added by this specification. The remainder of this document provides general background information on CMO instructions and describes each of the above ISA extensions. The term CMO encompasses all operations on caches or resources related to caches. The term CBO represents a subset of CMOs that operate only on cache blocks. The first CMO extensions only define CBOs. This chapter provides information common to all CMO extensions. A memory location is a physical resource in a system uniquely identified by a physical address. An agent is a logic block, such as a RISC-V hart, accelerator, I/O device, etc., that can access a given memory location. A given agent may not be able to access all memory locations in a system, and two different agents may or may not be able to access the same set of memory locations. A load operation (or store operation) is performed by an agent to consume (or modify) the data at a given memory location. Load and store operations are performed as a result of explicit memory accesses to that memory location. Additionally, a read transfer from memory fetches the data at the memory location, while a write transfer to memory updates the data at the memory location. A cache is a structure that buffers copies of data to reduce average memory latency. Any number of caches may be interspersed between an agent and a memory location, and load and store operations from an agent may be satisfied by a cache instead of the memory location. Load and store operations are decoupled from read and write transfers by caches. For example, a load operation may be satisfied by a cache without performing a read transfer from memory, or a store operation may be satisfied by a cache that first performs a read transfer from memory. Caches organize copies of data into cache blocks, each of which represents a contiguous, naturally aligned power-of-two (or NAPOT) range of memory locations. A cache block is identified by any of the physical addresses corresponding to the underlying memory locations. The capacity and organization of a cache and the size of a cache block are both implementation-specific, and the execution environment provides software a means to discover information about the caches and cache blocks in a system. In the initial set of CMO extensions, the size of a cache block shall be uniform throughout the system. In future CMO extensions, the requirement for a uniform cache block size may be relaxed. Implementation techniques such as speculative execution or hardware prefetching may cause a given cache to allocate or deallocate a copy of a cache block at any time, provided the corresponding physical addresses are accessible according to the supported access type PMA and are cacheable according to the cacheability PMA. Allocating a copy of a cache block results in a read transfer from another cache or from memory, while deallocating a copy of a cache block may result in a write transfer to another cache or to memory depending on whether the data in the copy were modified by a store operation. Additional details are discussed in Coherent Agents and Caches. A CBO instruction causes one or more operations to be performed on the cache blocks identified by the instruction. In general, a CBO instruction may identify one or more cache blocks; however, in the initial set of CMO extensions, CBO instructions identify a single cache block only. A cache-block management instruction performs one of the following operations, relative to the copy of a given cache block allocated in a given cache: An invalidate operation deallocates the copy of the cache block A clean operation performs a write transfer to another cache or to memory if the data in the copy of the cache block have been modified by a store operation A flush operation atomically performs a clean operation followed by an invalidate operation Additional details, including the actual operation performed by a given cache-block management instruction, are described in Cache-Block Management Instructions. A cache-block zero instruction performs a set of store operations that write zeros to the set of bytes corresponding to a cache block. Unless specified otherwise, the store operations generated by a cache-block zero instruction have the same general properties and behaviors that other store instructions in the architecture have. An implementation may or may not update the entire set of bytes atomically with a single store operation. Additional details are described in Cache-Block Zero Instructions. A cache-block prefetch instruction is a HINT to the hardware that software expects to perform a particular type of memory access in the near future. Additional details are described in Cache-Block Prefetch Instructions. For a given memory location, a set of coherent agents consists of the agents for which all of the following hold: Store operations from all agents in the set appear to be serialized with respect to each other Store operations from all agents in the set eventually appear to all other agents in the set A load operation from an agent in the set returns data from a store operation from an agent in the set (or from the initial data in memory) The coherent agents within such a set shall access a given memory location with the same physical address and the same physical memory attributes; however, if the coherence PMA for a given agent indicates a given memory location is not coherent, that agent shall not be a member of a set of coherent agents with any other agent for that memory location and shall be the sole member of a set of coherent agents consisting of itself. An agent who is a member of a set of coherent agents is said to be coherent with respect to the other agents in the set. On the other hand, an agent who is not a member is said to be non-coherent with respect to the agents in the set. Caches introduce the possibility that multiple copies of a given cache block may be present in a system at the same time. An implementation-specific mechanism keeps these copies coherent with respect to the load and store operations from the agents in the set of coherent agents. Additionally, if a coherent agent in the set executes a CBO instruction that specifies the cache block, the resulting operation shall apply to any and all of the copies in the caches that can be accessed by the load and store operations from the coherent agents. An operation from a CBO instruction is defined to operate only on the copies of a cache block that are cached in the caches accessible by the explicit memory accesses performed by the set of coherent agents. This includes copies of a cache block in caches that are accessed only indirectly by load and store operations, e.g. coherent instruction caches. The set of caches subject to the above mechanism form a set of coherent caches, and each coherent cache has the following behaviors, assuming all operations are performed by the agents in a set of coherent agents: A coherent cache is permitted to allocate and deallocate copies of a cache block and perform read and write transfers as described in Memory and Caches A coherent cache is permitted to perform a write transfer to memory provided that a store operation has modified the data in the cache block since the most recent invalidate, clean, or flush operation on the cache block At least one coherent cache is responsible for performing a write transfer to memory once a store operation has modified the data in the cache block until the next invalidate, clean, or flush operation on the cache block, after which no coherent cache is responsible (or permitted) to perform a write transfer to memory until the next store operation has modified the data in the cache block A coherent cache is required to perform a write transfer to memory if a store operation has modified the data in the cache block since the most recent invalidate, clean, or flush operation on the cache block and if the next clean or flush operation requires a write transfer to memory The above restrictions ensure that a \"clean\" copy of a cache block, fetched by a read transfer from memory and unmodified by a store operation, cannot later overwrite the copy of the cache block in memory updated by a write transfer to memory from a non-coherent agent. A non-coherent agent may initiate a cache-block operation that operates on the set of coherent caches accessed by a set of coherent agents. The mechanism to perform such an operation is implementation-specific. The preserved program order (abbreviated PPO) rules are defined by the RVWMO memory ordering model. How the operations resulting from CMO instructions fit into these rules is described below. For cache-block management instructions, the resulting invalidate, clean, and flush operations behave as stores in the PPO rules subject to one additional overlapping address rule. Specifically, if a precedes b in program order, then a will precede b in the global memory order if: a is an invalidate, clean, or flush, b is a load, and a and b access overlapping memory addresses The above rule ensures that a subsequent load in program order never appears in the global memory order before a preceding invalidate, clean, or flush operation to an overlapping address. Additionally, invalidate, clean, and flush operations are classified as W or O (depending on the physical memory attributes for the corresponding physical addresses) for the purposes of predecessor and successor sets in FENCE instructions. These operations are not ordered by other instructions that order stores, e.g. FENCE.I and SFENCE.VMA. For cache-block zero instructions, the resulting store operations behave as stores in the PPO rules and are ordered by other instructions that order stores. Finally, for cache-block prefetch instructions, the resulting operations are not ordered by the PPO rules nor are they ordered by any other ordering instructions. An invalidate operation may change the set of values that can be returned by a load. In particular, an additional condition is added to the Load Value Axiom: If an invalidate operation i precedes a load r and operates on a byte x returned by r, and no store to x appears between i and r in program order or in the global memory order, then r returns any of the following values for x: If no clean or flush operations on x precede i in the global memory order, either the initial value of x or the value of any store to x that precedes i If no store to x precedes a clean or flush operation on x in the global memory order and if the clean or flush operation on x precedes i in the global memory order, either the initial value of x or the value of any store to x that precedes i If a store to x precedes a clean or flush operation on x in the global memory order and if the clean or flush operation on x precedes i in the global memory order, either the value of the latest store to x that precedes the latest clean or flush operation on x or the value of any store to x that both precedes i and succeeds the latest clean or flush operation on x that precedes i The value of any store to x by a non-coherent agent regardless of the above conditions The first three bullets describe the possible load values at different points in the global memory order relative to clean or flush operations. The final bullet implies that the load value may be produced by a non-coherent agent at any time. Execution of certain CMO instructions may result in traps due to CSR state, described in the Control and Status Register State section, or due to the address translation and protection mechanisms. The trapping behavior of CMO instructions is described in the following sections. Cache-block management instructions and cache-block zero instructions may raise illegal-instruction exceptions or virtual-instruction exceptions depending on the current privilege mode and the state of the CMO control registers described in the Control and Status Register State section. Cache-block prefetch instructions raise neither illegal-instruction exceptions nor virtual-instruction exceptions. Similar to load and store instructions, CMO instructions are explicit memory access instructions that compute an effective address. The effective address is ultimately translated into a physical address based on the privilege mode and the enabled translation mechanisms, and the CMO extensions impose the following constraints on the physical addresses in a given cache block: The PMP access control bits shall be the same for all physical addresses in the cache block, and if write permission is granted by the PMP access control bits, read permission shall also be granted The PMAs shall be the same for all physical addresses in the cache block, and if write permission is granted by the supported access type PMAs, read permission shall also be granted If the above constraints are not met, the behavior of a CBO instruction is UNSPECIFIED. This specification assumes that the above constraints will typically be met for main memory regions and may be met for certain I/O regions. Additionally, for the purposes of PMP and PMA checks, the access size of a CMO instruction equals the size of the cache block accessed by the instruction. The Zicboz extension introduces an additional supported access type PMA for cache-block zero instructions. Main memory regions are required to support accesses by cache-block zero instructions; however, I/O regions may specify whether accesses by cache-block zero instructions are supported. A cache-block management instruction is permitted to access the specified cache block whenever a load instruction or store instruction is permitted to access the corresponding physical addresses. If neither a load instruction nor store instruction is permitted to access the physical addresses, but an instruction fetch is permitted to access the physical addresses, whether a cache-block management instruction is permitted to access the cache block is UNSPECIFIED. If access to the cache block is not permitted, a cache-block management instruction raises a store page-fault or store guest-page-fault exception if address translation does not permit any access or raises a store access-fault exception otherwise. During address translation, the instruction also checks the accessed bit and may either raise an exception or set the bit as required. The interaction between cache-block management instructions and instruction fetches will be specified in a future extension. As implied by omission, a cache-block management instruction does not check the dirty bit and neither raises an exception nor sets the bit. A cache-block zero instruction is permitted to access the specified cache block whenever a store instruction is permitted to access the corresponding physical addresses and when the PMAs indicate that cache-block zero instructions are a supported access type. If access to the cache block is not permitted, a cache-block zero instruction raises a store page-fault or store guest-page-fault exception if address translation does not permit write access or raises a store access-fault exception otherwise. During address translation, the instruction also checks the accessed and dirty bits and may either raise an exception or set the bits as required. A cache-block prefetch instruction is permitted to access the specified cache block whenever a load instruction, store instruction, or instruction fetch is permitted to access the corresponding physical addresses. If access to the cache block is not permitted, a cache-block prefetch instruction does not raise any exceptions and shall not access any caches or memory. During address translation, the instruction does not check the accessed and dirty bits and neither raises an exception nor sets the bits. When a page-fault, guest-page-fault, or access-fault exception is taken, the relevant *tval CSR is written with the faulting effective address (i.e. the value of rs1). Like a load or store instruction, a CMO instruction may or may not be permitted to access a cache block based on the states of the MPRV, MPV, and MPP bits in mstatus and the SUM and MXR bits in mstatus, sstatus, and vsstatus. This specification expects that implementations will process cache-block management instructions like store/AMO instructions, so store/AMO exceptions are appropriate for these instructions, regardless of the permissions required. CMO instructions do not generate address-misaligned exceptions. Unless otherwise defined by the debug architecture specification, the behavior of trigger modules with respect to CMO instructions is UNSPECIFIED. For the Zicbom, Zicboz, and Zicbop extensions, this specification recommends the following common trigger module behaviors: Type 6 address match triggers, i.e. tdata1.type=6 and mcontrol6.select=0, should be supported Type 2 address/data match triggers, i.e. tdata1.type=2, should be unsupported The size of a memory access equals the size of the cache block accessed, and the compare values follow from the addresses of the NAPOT memory region corresponding to the cache block containing the effective address Unless an encoding for a cache block is added to the mcontrol6.size field, an address trigger should only match a memory access from a CBO instruction if mcontrol6.size=0 If the Zicbom extension is implemented, this specification recommends the following additional trigger module behaviors: Implementing address match triggers should be optional Type 6 data match triggers, i.e. tdata1.type=6 and mcontrol6.select=1, should be unsupported Memory accesses are considered to be stores, i.e. an address trigger matches only if mcontrol6.store=1 If the Zicboz extension is implemented, this specification recommends the following additional trigger module behaviors: Implementing address match triggers should be mandatory Type 6 data match triggers, i.e. tdata1.type=6 and mcontrol6.select=1, should be supported, and implementing these triggers should be optional Memory accesses are considered to be stores, i.e. an address trigger matches only if mcontrol6.store=1 If the Zicbop extension is implemented, this specification recommends the following additional trigger module behaviors: Implementing address match triggers should be optional Type 6 data match triggers, i.e. tdata1.type=6 and mcontrol6.select=1, should be unsupported Memory accesses may be considered to be loads or stores depending on the implementation, i.e. whether an address trigger matches on these instructions when mcontrol6.load=1 or mcontrol6.store=1 is implementation-specific This specification also recommends that the behavior of trigger modules with respect to the Zicboz extension should be defined in version 1.0 of the debug architecture specification. The behavior of trigger modules with respect to the Zicbom and Zicbop extensions is expected to be defined in future extensions. For the purposes of writing the mtinst or htinst register on a trap, the following standard transformation is defined for cache-block management instructions and cache-block zero instructions: The operation field corresponds to the 12 most significant bits of the trapping instruction. As described in the hypervisor extension, a zero may be written into mtinst or htinst instead of the standard transformation defined above. The following event is added to the list of events that satisfy the eventuality guarantee provided by constrained LR/SC loops, as defined in the A extension: Some other hart executes a cache-block management instruction or a cache-block zero instruction to the reservation set of the LR instruction in H's constrained LR/SC loop. The above event has been added to accommodate cache coherence protocols that cannot distinguish between invalidations for stores and invalidations for cache-block management operations. Aside from the above event, CMO instructions neither change the properties of constrained LR/SC loops nor modify the eventuality guarantee provided by them. For example, executing a CMO instruction may cause a constrained LR/SC loop on any hart to fail periodically or may cause a unconstrained LR/SC sequence on the same hart to fail always. Additionally, executing a cache-block prefetch instruction does not impact the eventuality guarantee provided by constrained LR/SC loops executed on any hart. The initial set of CMO extensions requires the following information to be discovered by software: The size of the cache block for management and prefetch instructions The size of the cache block for zero instructions CBIE support at each privilege level Other general cache characteristics may also be specified in the discovery mechanism. Three CSRs control the execution of CMO instructions: menvcfg senvcfg henvcfg The senvcfg register is used by all supervisor modes, including VS-mode. A hypervisor is responsible for saving and restoring senvcfg on guest context switches. The henvcfg register is only present if the H-extension is implemented and enabled. Each xenvcfg register (where x is m, s, or h) has the following generic format: Table 1. Generic Format for xenvcfg CSRs Bits Name Description [5:4] CBIE Cache Block Invalidate instruction Enable. WARL. Enables the execution of the cache block invalidate instruction, CBO.INVAL, in a lower privilege mode: 00: The instruction raises an illegal-instruction or virtual-instruction exception 01: The instruction is executed and performs a flush operation 10: Reserved 11: The instruction is executed and performs an invalidate operation [6] CBCFE Cache Block Clean and Flush instruction Enable Enables the execution of the cache block clean instruction, CBO.CLEAN, and the cache block flush instruction, CBO.FLUSH, in a lower privilege mode: 0: The instruction raises an illegal-instruction or virtual-instruction exception 1: The instruction is executed [7] CBZE Cache Block Zero instruction Enable Enables the execution of the cache block zero instruction, CBO.ZERO, in a lower privilege mode: 0: The instruction raises an illegal-instruction or virtual-instruction exception 1: The instruction is executed The xenvcfg registers control CBO instruction execution based on the current privilege mode and the state of the appropriate CSRs, as detailed below. A CBO.INVAL instruction executes or raises either an illegal-instruction exception or a virtual-instruction exception based on the state of the xenvcfg.CBIE fields: // illegal-instruction exceptions if (((priv_mode != M) && (menvcfg.CBIE == 00)) || ((priv_mode == U) && (senvcfg.CBIE == 00))) { <raise illegal-instruction exception> } // virtual-instruction exceptions else if (((priv_mode == VS) && (henvcfg.CBIE == 00)) || ((priv_mode == VU) && ((henvcfg.CBIE == 00) || (senvcfg.CBIE == 00)))) { <raise virtual-instruction exception> } // execute instruction else { if (((priv_mode != M) && (menvcfg.CBIE == 01)) || ((priv_mode == U) && (senvcfg.CBIE == 01)) || ((priv_mode == VS) && (henvcfg.CBIE == 01)) || ((priv_mode == VU) && ((henvcfg.CBIE == 01) || (senvcfg.CBIE == 01)))) { <execute CBO.INVAL and perform flush operation> } else { <execute CBO.INVAL and perform invalidate operation> } } Until a modified cache block has updated memory, a CBO.INVAL instruction may expose stale data values in memory if the CSRs are programmed to perform an invalidate operation. This behavior may result in a security hole if lower privileged level software performs an invalidate operation and accesses sensitive information in memory. To avoid such holes, higher privileged level software must perform either a clean or flush operation on the cache block before permitting lower privileged level software to perform an invalidate operation on the block. Alternatively, higher privileged level software may program the CSRs so that CBO.INVAL either traps or performs a flush operation in a lower privileged level. A CBO.CLEAN or CBO.FLUSH instruction executes or raises an illegal instruction or virtual-instruction exception based on the state of the xenvcfg.CBCFE bits: // illegal-instruction exceptions if (((priv_mode != M) && !menvcfg.CBCFE) || ((priv_mode == U) && !senvcfg.CBCFE)) { <raise illegal-instruction exception> } // virtual-instruction exceptions else if (((priv_mode == VS) && !henvcfg.CBCFE) || ((priv_mode == VU) && !(henvcfg.CBCFE && senvcfg.CBCFE))) { <raise virtual-instruction exception> } // execute instruction else { <execute CBO.CLEAN or CBO.FLUSH> } Finally, a CBO.ZERO instruction executes or raises an illegal-instruction or virtual-instruction exception based on the state of the xenvcfg.CBZE bits: // illegal-instruction exceptions if (((priv_mode != M) && !menvcfg.CBZE) || ((priv_mode == U) && !senvcfg.CBZE)) { <raise illegal-instruction exception> } // virtual-instruction exceptions else if (((priv_mode == VS) && !henvcfg.CBZE) || ((priv_mode == VU) && !(henvcfg.CBZE && senvcfg.CBZE))) { <raise virtual-instruction exception> } // execute instruction else { <execute CBO.ZERO> } Each xenvcfg register is WARL; however, software should determine the legal values from the execution environment discovery mechanism. CMO instructions are defined in the following extensions: Cache-Block Management Instructions Cache-Block Zero Instructions Cache-Block Prefetch Instructions Cache-block management instructions enable software running on a set of coherent agents to communicate with a set of non-coherent agents by performing one of the following operations: An invalidate operation makes data from store operations performed by a set of non-coherent agents visible to the set of coherent agents at a point common to both sets by deallocating all copies of a cache block from the set of coherent caches up to that point A clean operation makes data from store operations performed by the set of coherent agents visible to a set of non-coherent agents at a point common to both sets by performing a write transfer of a copy of a cache block to that point provided a coherent agent performed a store operation that modified the data in the cache block since the previous invalidate, clean, or flush operation on the cache block A flush operation atomically performs a clean operation followed by an invalidate operation In the Zicbom extension, the instructions operate to a point common to all agents in the system. In other words, an invalidate operation ensures that store operations from all non-coherent agents visible to agents in the set of coherent agents, and a clean operation ensures that store operations from coherent agents visible to all non-coherent agents. The Zicbom extension does not prohibit agents that fall outside of the above architectural definition; however, software cannot rely on the defined cache operations to have the desired effects with respect to those agents. Future extensions may define different sets of agents for the purposes of performance optimization. These instructions operate on the cache block whose effective address is specified in rs1. The effective address is translated into a corresponding physical address by the appropriate translation mechanisms. The following instructions comprise the Zicbom extension: RV32 RV64 Mnemonic Instruction ✓ ✓ cbo.clean base Cache Block Clean ✓ ✓ cbo.flush base Cache Block Flush ✓ ✓ cbo.inval base Cache Block Invalidate Cache-block zero instructions store zeros to the set of bytes corresponding to a cache block. An implementation may update the bytes in any order and with any granularity and atomicity, including individual bytes. Cache-block zero instructions store zeros independently of whether data from the underlying memory locations are cacheable. In addition, this specification does not constrain how the bytes are written. These instructions operate on the cache block, or the memory locations corresponding to the cache block, whose effective address is specified in rs1. The effective address is translated into a corresponding physical address by the appropriate translation mechanisms. The following instructions comprise the Zicboz extension: RV32 RV64 Mnemonic Instruction ✓ ✓ cbo.zero base Cache Block Zero Cache-block prefetch instructions are HINTs to the hardware to indicate that software intends to perform a particular type of memory access in the near future. The types of memory accesses are instruction fetch, data read (i.e. load), and data write (i.e. store). These instructions operate on the cache block whose effective address is the sum of the base address specified in rs1 and the sign-extended offset encoded in imm[11:0], where imm[4:0] shall equal 0b00000. The effective address is translated into a corresponding physical address by the appropriate translation mechanisms. Cache-block prefetch instructions are encoded as ORI instructions with rd equal to 0b00000; however, for the purposes of effective address calculation, this field is also interpreted as imm[4:0] like a store instruction. The following instructions comprise the Zicbop extension: RV32 RV64 Mnemonic Instruction ✓ ✓ prefetch.i offset(base) Cache Block Prefetch for Instruction Fetch ✓ ✓ prefetch.r offset(base) Cache Block Prefetch for Data Read ✓ ✓ prefetch.w offset(base) Cache Block Prefetch for Data Write Synopsis Perform a clean operation on a cache block Mnemonic cbo.clean offset(base) Encoding Description A cbo.clean instruction performs a clean operation on the cache block whose effective address is the base address specified in rs1. The offset operand may be omitted; otherwise, any expression that computes the offset shall evaluate to zero. The instruction operates on the set of coherent caches accessed by the agent executing the instruction. When executing a cbo.clean instruction, an implementation may instead perform a flush operation, since the result of that operation is indistinguishable from the sequence of performing a clean operation just before deallocating all cached copies in the set of coherent caches. Operation TODO Synopsis Perform a flush operation on a cache block Mnemonic cbo.flush offset(base) Encoding Description A cbo.flush instruction performs a flush operation on the cache block whose that contains the address specified in rs1. It is not required that rs1 is aligned to the size of a cache block. On faults, the faulting virtual address is considered to be the value in rs1, rather than the base address of the cache block. The instruction operates on the set of coherent caches accessed by the agent executing the instruction. The assembly offset operand may be omitted. If it isn’t then any expression that computes the offset shall evaluate to zero. Operation TODO Synopsis Perform an invalidate operation on a cache block Mnemonic cbo.inval offset(base) Encoding Description A cbo.inval instruction performs an invalidate operation on the cache block that contains the address specified in rs1. It is not required that rs1 is aligned to the size of a cache block. On faults, the faulting virtual address is considered to be the value in rs1, rather than the base address of the cache block. The instruction operates on the set of coherent caches accessed by the agent executing the instruction. Depending on CSR programming, the instruction may perform a flush operation instead of an invalidate operation. The assembly offset operand may be omitted. If it isn’t then any expression that computes the offset shall evaluate to zero. When executing a cbo.inval instruction, an implementation may instead perform a flush operation, since the result of that operation is indistinguishable from the sequence of performing a write transfer to memory just before performing an invalidate operation. Operation TODO Synopsis Store zeros to the full set of bytes corresponding to a cache block Mnemonic cbo.zero offset(base) Encoding Description A cbo.zero instruction performs stores of zeros to the full set of bytes corresponding to the cache block that contains the address specified in rs1. It is not required that rs1 is aligned to the size of a cache block. On faults, the faulting virtual address is considered to be the value in rs1, rather than the base address of the cache block. An implementation may or may not update the entire set of bytes atomically. The assembly offset operand may be omitted. If it isn’t then any expression that computes the offset shall evaluate to zero. Operation TODO Synopsis Provide a HINT to hardware that a cache block is likely to be accessed by an instruction fetch in the near future Mnemonic prefetch.i offset(base) Encoding Description A prefetch.i instruction indicates to hardware that the cache block whose effective address is the sum of the base address specified in rs1 and the sign-extended offset encoded in imm[11:0], where imm[4:0] equals 0b00000, is likely to be accessed by an instruction fetch in the near future. An implementation may opt to cache a copy of the cache block in a cache accessed by an instruction fetch in order to improve memory access latency, but this behavior is not required. Operation TODO Synopsis Provide a HINT to hardware that a cache block is likely to be accessed by a data read in the near future Mnemonic prefetch.r offset(base) Encoding Description A prefetch.r instruction indicates to hardware that the cache block whose effective address is the sum of the base address specified in rs1 and the sign-extended offset encoded in imm[11:0], where imm[4:0] equals 0b00000, is likely to be accessed by a data read (i.e. load) in the near future. An implementation may opt to cache a copy of the cache block in a cache accessed by a data read in order to improve memory access latency, but this behavior is not required. Operation TODO Synopsis Provide a HINT to hardware that a cache block is likely to be accessed by a data write in the near future Mnemonic prefetch.w offset(base) Encoding Description A prefetch.w instruction indicates to hardware that the cache block whose effective address is the sum of the base address specified in rs1 and the sign-extended offset encoded in imm[11:0], where imm[4:0] equals 0b00000, is likely to be accessed by a data write (i.e. store) in the near future. An implementation may opt to cache a copy of the cache block in a cache accessed by a data write in order to improve memory access latency, but this behavior is not required. Operation TODO","title":"\"CMO\" Extensions for Base Cache Management Operation ISA, Version 1.0.0","component":"isa","version":"v20250508","name":"cmo","url":"/isa/unpriv/cmo.html","titles":[{"text":"Pseudocode for instruction semantics","hash":"pseudocode-for-instruction-semantics","id":1},{"text":"Introduction","hash":"intro-cmo","id":2},{"text":"Background","hash":"background","id":3},{"text":"Memory and Caches","hash":"memory-caches","id":4},{"text":"Cache-Block Operations","hash":"cache-block-operations","id":5},{"text":"Coherent Agents and Caches","hash":"coherent-agents-caches","id":6},{"text":"Memory Ordering","hash":"memory-ordering","id":7},{"text":"Preserved Program Order","hash":"preserved-program-order","id":8},{"text":"Load Values","hash":"load-values","id":9},{"text":"Traps","hash":"traps","id":10},{"text":"Illegal-Instruction and Virtual-Instruction Exceptions","hash":"illegal-instruction-and-virtual-instruction-exceptions","id":11},{"text":"Page-Fault, Guest-Page-Fault, and Access-Fault Exceptions","hash":"page-fault-guest-page-fault-and-access-fault-exceptions","id":12},{"text":"Address-Misaligned Exceptions","hash":"address-misaligned-exceptions","id":13},{"text":"Breakpoint Exceptions and Debug Mode Entry","hash":"breakpoint-exceptions-and-debug-mode-entry","id":14},{"text":"Hypervisor Extension","hash":"hypervisor-extension","id":15},{"text":"Effects on Constrained LR/SC Loops","hash":"effects-on-constrained-lrsc-loops","id":16},{"text":"Software Discovery","hash":"software-discovery","id":17},{"text":"Control and Status Register State","hash":"csr_state","id":18},{"text":"Extensions","hash":"extensions","id":19},{"text":"Cache-Block Management Instructions","hash":"Zicbom","id":20},{"text":"Cache-Block Zero Instructions","hash":"Zicboz","id":21},{"text":"Cache-Block Prefetch Instructions","hash":"Zicbop","id":22},{"text":"Instructions","hash":"insns","id":23},{"text":"cbo.clean","hash":"insns-cbo_clean","id":24},{"text":"cbo.flush","hash":"insns-cbo_flush","id":25},{"text":"cbo.inval","hash":"insns-cbo_inval","id":26},{"text":"cbo.zero","hash":"insns-cbo_zero","id":27},{"text":"prefetch.i","hash":"insns-prefetch_i","id":28},{"text":"prefetch.r","hash":"insns-prefetch_r","id":29},{"text":"prefetch.w","hash":"insns-prefetch_w","id":30}]},"34":{"id":34,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Preface This document describes the RISC-V unprivileged architecture. The ISA modules marked Ratified have been ratified at this time. The modules marked Frozen are not expected to change significantly before being put up for ratification. The modules marked Draft are expected to change before ratification. The document contains the following versions of the RISC-V ISA modules: Base Version Status RV32I 2.1 Ratified RV32E 2.0 Ratified RV64E 2.0 Ratified RV64I 2.1 Ratified Extension Version Status Zifencei 2.0 Ratified Zicsr 2.0 Ratified Zicntr 2.0 Ratified Zihintntl 1.0 Ratified Zihintpause 2.0 Ratified Zimop 1.0 Ratified Zicond 1.0 Ratified Zilsd 1.0 Ratified M 2.0 Ratified Zmmul 1.0 Ratified A 2.1 Ratified Zawrs 1.01 Ratified Zacas 1.0 Ratified Zabha 1.0 Ratified RVWMO 2.0 Ratified Ztso 1.0 Ratified CMO 1.0 Ratified F 2.2 Ratified D 2.2 Ratified Q 2.2 Ratified Zfh 1.0 Ratified Zfhmin 1.0 Ratified BF16 1.0 Ratified Zfa 1.0 Ratified Zfinx 1.0 Ratified Zdinx 1.0 Ratified Zhinx 1.0 Ratified Zhinxmin 1.0 Ratified C 2.0 Ratified Zce 1.0 Ratified Zclsd 1.0 Ratified B 1.0 Ratified V 1.0 Ratified Zbkb 1.0 Ratified Zbkc 1.0 Ratified Zbkx 1.0 Ratified Zk 1.0 Ratified Zks 1.0 Ratified Zvbb 1.0 Ratified Zvbc 1.0 Ratified Zvkg 1.0 Ratified Zvkned 1.0 Ratified Zvknhb 1.0 Ratified Zvksed 1.0 Ratified Zvksh 1.0 Ratified Zvkt 1.0 Ratified Zicfiss 1.0 Ratified Zicfilp 1.0 Ratified The changes in this version of the document include: The inclusion of all ratified extensions through May 2025. Removal of all unratified material. Addition of the BFloat16-preceision Floating Point extension. Addition of the Zabha extension for Byte and Halfword Atomic Memory Operations. Preface to Document Version 20240411 This document describes the RISC-V unprivileged architecture. It contains the following versions of the RISC-V ISA modules: Base Version Status RV32I 2.1 Ratified RV32E 2.0 Ratified RV64E 2.0 Ratified RV64I 2.1 Ratified Extension Version Status Zifencei 2.0 Ratified Zicsr 2.0 Ratified Zicntr 2.0 Ratified Zihintntl 1.0 Ratified Zihintpause 2.0 Ratified Zimop 1.0 Ratified Zicond 1.0 Ratified Zilsd 1.0 Ratified M 2.0 Ratified Zmmul 1.0 Ratified A 2.1 Ratified Zawrs 1.01 Ratified Zacas 1.0 Ratified Zabha 1.0 Ratified RVWMO 2.0 Ratified Ztso 1.0 Ratified CMO 1.0 Ratified F 2.2 Ratified D 2.2 Ratified Q 2.2 Ratified Zfh 1.0 Ratified Zfhmin 1.0 Ratified Zfa 1.0 Ratified Zfinx 1.0 Ratified Zdinx 1.0 Ratified Zhinx 1.0 Ratified Zhinxmin 1.0 Ratified C 2.0 Ratified Zce 1.0 Ratified Zclsd 1.0 Ratified B 1.0 Ratified V 1.0 Ratified Zbkb 1.0 Ratified Zbkc 1.0 Ratified Zbkx 1.0 Ratified Zk 1.0 Ratified Zks 1.0 Ratified Zvbb 1.0 Ratified Zvbc 1.0 Ratified Zvkg 1.0 Ratified Zvkned 1.0 Ratified Zvknhb 1.0 Ratified Zvksed 1.0 Ratified Zvksh 1.0 Ratified Zvkt 1.0 Ratified Zicfiss 1.0 Ratified Zicfilp 1.0 Ratified The changes in this version of the document include: The inclusion of all ratified extensions through February 2025. The draft Zam extension has been removed, in favor of the definition of a misaligned atomicity granule PMA. The concept of vacant memory regions has been superseded by inaccessible memory or I/O regions. The removal of unratified content, including the sketch of the RV128I base ISA. Preface to Document Version 20191213-Base-Ratified This document describes the RISC-V unprivileged architecture. The ISA modules marked Ratified have been ratified at this time. The modules marked Frozen are not expected to change significantly before being put up for ratification. The modules marked Draft are expected to change before ratification. The document contains the following versions of the RISC-V ISA modules: Base Version Status RVWMO 2.0 Ratified RV32I 2.1 Ratified RV64I 2.1 Ratified RV32E 1.9 Draft RV128I 1.7 Draft Extension Version Status M 2.0 Ratified A 2.1 Ratified F 2.2 Ratified D 2.2 Ratified Q 2.2 Ratified C 2.0 Ratified Counters 2.0 Draft L 0.0 Draft B 0.0 Draft J 0.0 Draft T 0.0 Draft P 0.2 Draft V 0.7 Draft Zicsr 2.0 Ratified Zifencei 2.0 Ratified Zam 0.1 Draft Ztso 0.1 Frozen The changes in this version of the document include: The A extension, now version 2.1, was ratified by the board in December 2019. Defined big-endian ISA variant. Moved N extension for user-mode interrupts into Volume II. Defined PAUSE hint instruction. Preface to Document Version 20190608-Base-Ratified This document describes the RISC-V unprivileged architecture. The RVWMO memory model has been ratified at this time. The ISA modules marked Ratified, have been ratified at this time. The modules marked Frozen are not expected to change significantly before being put up for ratification. The modules marked Draft are expected to change before ratification. The document contains the following versions of the RISC-V ISA modules: Base Version Status RVWMO 2.0 Ratified RV32I 2.1 Ratified RV64I 2.1 Ratified RV32E 1.9 Draft RV128I 1.7 Draft Extension Version Status Zifencei 2.0 Ratified Zicsr 2.0 Ratified M 2.0 Ratified A 2.0 Frozen F 2.2 Ratified D 2.2 Ratified Q 2.2 Ratified C 2.0 Ratified Ztso 0.1 Frozen Counters 2.0 Draft L 0.0 Draft B 0.0 Draft J 0.0 Draft T 0.0 Draft P 0.2 Draft V 0.7 Draft Zam 0.1 Draft The changes in this version of the document include: Moved description to Ratified for the ISA modules ratified by the board in early 2019. Removed the A extension from ratification. Changed document version scheme to avoid confusion with versions of the ISA modules. Incremented the version numbers of the base integer ISA to 2.1, reflecting the presence of the ratified RVWMO memory model and exclusion of FENCE.I, counters, and CSR instructions that were in previous base ISA. Incremented the version numbers of the F and D extensions to 2.2, reflecting that version 2.1 changed the canonical NaN, and version 2.2 defined the NaN-boxing scheme and changed the definition of the FMIN and FMAX instructions. Changed name of document to refer to \"unprivileged\" instructions as part of move to separate ISA specifications from platform profile mandates. Added clearer and more precise definitions of execution environments, harts, traps, and memory accesses. Defined instruction-set categories: standard, reserved, custom, non-standard, and non-conforming. Removed text implying operation under alternate endianness, as alternate-endianness operation has not yet been defined for RISC-V. Changed description of misaligned load and store behavior. The specification now allows visible misaligned address traps in execution environment interfaces, rather than just mandating invisible handling of misaligned loads and stores in user mode. Also, now allows access-fault exceptions to be reported for misaligned accesses (including atomics) that should not be emulated. Moved FENCE.I out of the mandatory base and into a separate extension, with Zifencei ISA name. FENCE.I was removed from the Linux user ABI and is problematic in implementations with large incoherent instruction and data caches. However, it remains the only standard instruction-fetch coherence mechanism. Removed prohibitions on using RV32E with other extensions. Removed platform-specific mandates that certain encodings produce illegal-instruction exceptions in RV32E and RV64I chapters. Counter/timer instructions are now not considered part of the mandatory base ISA, and so CSR instructions were moved into separate chapter and marked as version 2.0, with the unprivileged counters moved into another separate chapter. The counters are not ready for ratification as there are outstanding issues, including counter inaccuracies. A CSR-access ordering model has been added. Explicitly defined the 16-bit half-precision floating-point format for floating-point instructions in the 2-bit fmt field. Defined the signed-zero behavior of FMIN.fmt and FMAX.fmt, and changed their behavior on signaling-NaN inputs to conform to the minimumNumber and maximumNumber operations in the proposed IEEE 754-201x specification. The memory consistency model, RVWMO, has been defined. The \"Zam\" extension, which permits misaligned AMOs and specifies their semantics, has been defined. The \"Ztso\" extension, which enforces a stricter memory consistency model than RVWMO, has been defined. Improvements to the description and commentary. Defined the term IALIGN as shorthand to describe the instruction-address alignment constraint. Removed text of P extension chapter as now superseded by active task group documents. Removed text of V extension chapter as now superseded by separate vector extension draft document. Preface to Document Version 2.2 This is version 2.2 of the document describing the RISC-V user-level architecture. The document contains the following versions of the RISC-V ISA modules: Base Version Draft Frozen? RV32I 2.0 Y RV32E 1.9 N RV64I 2.0 Y RV128I 1.7 N Extension Version Frozen? M 2.0 Y A 2.0 Y F 2.0 Y D 2.0 Y Q 2.0 Y L 0.0 N C 2.0 Y B 0.0 N J 0.0 N T 0.0 N P 0.1 N V 0.7 N N 1.1 N To date, no parts of the standard have been officially ratified by the RISC-V Foundation, but the components labeled \"frozen\" above are not expected to change during the ratification process beyond resolving ambiguities and holes in the specification. The major changes in this version of the document include: The previous version of this document was released under a Creative Commons Attribution 4.0 International License by the original authors, and this and future versions of this document will be released under the same license. Rearranged chapters to put all extensions first in canonical order. Improvements to the description and commentary. Modified implicit hinting suggestion on JALR to support more efficient macro-op fusion of LUI/JALR and AUIPC/JALR pairs. Clarification of constraints on load-reserved/store-conditional sequences. A new table of control and status register (CSR) mappings. Clarified purpose and behavior of high-order bits of fcsr. Corrected the description of the FNMADD.fmt and FNMSUB.fmt instructions, which had suggested the incorrect sign of a zero result. Instructions FMV.S.X and FMV.X.S were renamed to FMV.W.X and FMV.X.W respectively to be more consistent with their semantics, which did not change. The old names will continue to be supported in the tools. Specified behavior of narrower ( FLEN) floating-point values held in wider f registers using NaN-boxing model. Defined the exception behavior of FMA( , 0, qNaN). Added note indicating that the P extension might be reworked into an integer packed-SIMD proposal for fixed-point operations using the integer registers. A draft proposal of the V vector instruction-set extension. An early draft proposal of the N user-level traps extension. An expanded pseudoinstruction listing. Removal of the calling convention chapter, which has been superseded by the RISC-V ELF psABI Specification [1]. The C extension has been frozen and renumbered version 2.0. Preface to Document Version 2.1 This is version 2.1 of the document describing the RISC-V user-level architecture. Note the frozen user-level ISA base and extensions IMAFDQ version 2.0 have not changed from the previous version of this document [2], but some specification holes have been fixed and the documentation has been improved. Some changes have been made to the software conventions. Numerous additions and improvements to the commentary sections. Separate version numbers for each chapter. Modification to long instruction encodings 64 bits to avoid moving the rd specifier in very long instruction formats. CSR instructions are now described in the base integer format where the counter registers are introduced, as opposed to only being introduced later in the floating-point section (and the companion privileged architecture manual). The SCALL and SBREAK instructions have been renamed to ECALL and EBREAK, respectively. Their encoding and functionality are unchanged. Clarification of floating-point NaN handling, and a new canonical NaN value. Clarification of values returned by floating-point to integer conversions that overflow. Clarification of LR/SC allowed successes and required failures, including use of compressed instructions in the sequence. A new RV32E base ISA proposal for reduced integer register counts, supports MAC extensions. A revised calling convention. Relaxed stack alignment for soft-float calling convention, and description of the RV32E calling convention. A revised proposal for the C compressed extension, version 1.9 . Preface to Version 2.0 This is the second release of the user ISA specification, and we intend the specification of the base user ISA plus general extensions (i.e., IMAFD) to remain fixed for future development. The following changes have been made since Version 1.0 [3] of this ISA specification. The ISA has been divided into an integer base with several standard extensions. The instruction formats have been rearranged to make immediate encoding more efficient. The base ISA has been defined to have a little-endian memory system, with big-endian or bi-endian as non-standard variants. Load-Reserved/Store-Conditional (LR/SC) instructions have been added in the atomic instruction extension. AMOs and LR/SC can support the release consistency model. The FENCE instruction provides finer-grain memory and I/O orderings. An AMO for fetch-and-XOR (AMOXOR) has been added, and the encoding for AMOSWAP has been changed to make room. The AUIPC instruction, which adds a 20-bit upper immediate to the PC, replaces the RDNPC instruction, which only read the current PC value. This results in significant savings for position-independent code. The JAL instruction has now moved to the U-Type format with an explicit destination register, and the J instruction has been dropped being replaced by JAL with rd=x0. This removes the only instruction with an implicit destination register and removes the J-Type instruction format from the base ISA. There is an accompanying reduction in JAL reach, but a significant reduction in base ISA complexity. The static hints on the JALR instruction have been dropped. The hints are redundant with the rd and rs1 register specifiers for code compliant with the standard calling convention. The JALR instruction now clears the lowest bit of the calculated target address, to simplify hardware and to allow auxiliary information to be stored in function pointers. The MFTX.S and MFTX.D instructions have been renamed to FMV.X.S and FMV.X.D, respectively. Similarly, MXTF.S and MXTF.D instructions have been renamed to FMV.S.X and FMV.D.X, respectively. The MFFSR and MTFSR instructions have been renamed to FRCSR and FSCSR, respectively. FRRM, FSRM, FRFLAGS, and FSFLAGS instructions have been added to individually access the rounding mode and exception flags subfields of the fcsr. The FMV.X.S and FMV.X.D instructions now source their operands from rs1, instead of rs2. This change simplifies datapath design. FCLASS.S and FCLASS.D floating-point classify instructions have been added. A simpler NaN generation and propagation scheme has been adopted. For RV32I, the system performance counters have been extended to 64-bits wide, with separate read access to the upper and lower 32 bits. Canonical NOP and MV encodings have been defined. Standard instruction-length encodings have been defined for 48-bit, 64-bit, and 64-bit instructions. Description of a 128-bit address space variant, RV128, has been added. Major opcodes in the 32-bit base instruction format have been allocated for user-defined custom extensions. A typographical error that suggested that stores source their data from rd has been corrected to refer to rs2.","title":"Preface","component":"isa","version":"v20250508","name":"colophon","url":"/isa/unpriv/colophon.html","titles":[]},"35":{"id":35,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zicntr\" and \"Zihpm\" Extensions for Counters, Version 2.0 RISC-V ISAs provide a set of up to thirty-two 64-bit performance counters and timers that are accessible via unprivileged XLEN-bit read-only CSR registers 0xC00–0xC1F (when XLEN=32, the upper 32 bits are accessed via CSR registers 0xC80–0xC9F). These counters are divided between the \"Zicntr\" and \"Zihpm\" extensions. The Zicntr standard extension comprises the first three of these counters (CYCLE, TIME, and INSTRET), which have dedicated functions (cycle count, real-time clock, and instructions retired, respectively). The Zicntr extension depends on the Zicsr extension. We recommend provision of these basic counters in implementations as they are essential for basic performance analysis, adaptive and dynamic optimization, and to allow an application to work with real-time streams. Additional counters in the separate Zihpm extension can help diagnose performance problems and these should be made accessible from user-level application code with low overhead. Some execution environments might prohibit access to counters, for example, to impede timing side-channel attacks. For base ISAs with XLEN≥64, CSR instructions can access the full 64-bit CSRs directly. In particular, the RDCYCLE, RDTIME, and RDINSTRET pseudoinstructions read the full 64 bits of the cycle, time, and instret counters. The counter pseudoinstructions are mapped to the read-only csrrs rd, counter, x0 canonical form, but the other read-only CSR instruction forms (based on CSRRC/CSRRSI/CSRRCI) are also legal ways to read these CSRs. For base ISAs with XLEN=32, the Zicntr extension enables the three 64-bit read-only counters to be accessed in 32-bit pieces. The RDCYCLE, RDTIME, and RDINSTRET pseudoinstructions provide the lower 32 bits, and the RDCYCLEH, RDTIMEH, and RDINSTRETH pseudoinstructions provide the upper 32 bits of the respective counters. We required the counters be 64 bits wide, even when XLEN=32, as otherwise it is very difficult for software to determine if values have overflowed. For a low-end implementation, the upper 32 bits of each counter can be implemented using software counters incremented by a trap handler triggered by overflow of the lower 32 bits. The sample code given below shows how the full 64-bit width value can be safely read using the individual 32-bit width pseudoinstructions. The RDCYCLE pseudoinstruction reads the low XLEN bits of the cycle CSR which holds a count of the number of clock cycles executed by the processor core on which the hart is running from an arbitrary start time in the past. RDCYCLEH is only present when XLEN=32 and reads bits 63-32 of the same cycle counter. The underlying 64-bit counter should never overflow in practice. The rate at which the cycle counter advances will depend on the implementation and operating environment. The execution environment should provide a means to determine the current rate (cycles/second) at which the cycle counter is incrementing. RDCYCLE is intended to return the number of cycles executed by the processor core, not the hart. Precisely defining what is a \"core\" is difficult given some implementation choices (e.g., AMD Bulldozer). Precisely defining what is a \"clock cycle\" is also difficult given the range of implementations (including software emulations), but the intent is that RDCYCLE is used for performance monitoring along with the other performance counters. In particular, where there is one hart/core, one would expect cycle-count/instructions-retired to measure CPI for a hart. Cores don’t have to be exposed to software at all, and an implementer might choose to pretend multiple harts on one physical core are running on separate cores with one hart/core, and provide separate cycle counters for each hart. This might make sense in a simple barrel processor (e.g., CDC 6600 peripheral processors) where inter-hart timing interactions are non-existent or minimal. Where there is more than one hart/core and dynamic multithreading, it is not generally possible to separate out cycles per hart (especially with SMT). It might be possible to define a separate performance counter that tried to capture the number of cycles a particular hart was running, but this definition would have to be very fuzzy to cover all the possible threading implementations. For example, should we only count cycles for which any instruction was issued to execution for this hart, and/or cycles any instruction retired, or include cycles this hart was occupying machine resources but couldn’t execute due to stalls while other harts went into execution? Likely, \"all of the above\" would be needed to have understandable performance stats. This complexity of defining a per-hart cycle count, and also the need in any case for a total per-core cycle count when tuning multithreaded code led to just standardizing the per-core cycle counter, which also happens to work well for the common single hart/core case. Standardizing what happens during \"sleep\" is not practical given that what \"sleep\" means is not standardized across execution environments, but if the entire core is paused (entirely clock-gated or powered-down in deep sleep), then it is not executing clock cycles, and the cycle count shouldn’t be increasing per the spec. There are many details, e.g., whether clock cycles required to reset a processor after waking up from a power-down event should be counted, and these are considered execution-environment-specific details. Even though there is no precise definition that works for all platforms, this is still a useful facility for most platforms, and an imprecise, common, \"usually correct\" standard here is better than no standard. The intent of RDCYCLE was primarily performance monitoring/tuning, and the specification was written with that goal in mind. The RDTIME pseudoinstruction reads the low XLEN bits of the \"time\" CSR, which counts wall-clock real time that has passed from an arbitrary start time in the past. RDTIMEH is only present when XLEN=32 and reads bits 63-32 of the same real-time counter. The underlying 64-bit counter increments by one with each tick of the real-time clock, and, for realistic real-time clock frequencies, should never overflow in practice. The execution environment should provide a means of determining the period of a counter tick (seconds/tick). The period should be constant within a small error bound. The environment should provide a means to determine the accuracy of the clock (i.e., the maximum relative error between the nominal and actual real-time clock periods). On some simple platforms, cycle count might represent a valid implementation of RDTIME, in which case RDTIME and RDCYCLE may return the same result. It is difficult to provide a strict mandate on clock period given the wide variety of possible implementation platforms. The maximum error bound should be set based on the requirements of the platform. The real-time clocks of all harts must be synchronized to within one tick of the real-time clock. As with other architectural mandates, it suffices to appear \"as if\" harts are synchronized to within one tick of the real-time clock, i.e., software is unable to observe that there is a greater delta between the real-time clock values observed on two harts. If, for example, the real-time clock increments at a frequency of 1 GHz, then all harts must appear to be synchronized to within 1 nsec. But it is also acceptable for this example implementation to only update the real-time clock at, say, a frequency of 100 MHz with increments of 10 ticks. As long as software cannot observe this seeming violation of the above synchronization requirement, and software always observes time across harts to be monotonically nondecreasing, then this implementation is compliant. A platform spec may then, for example, specify an apparent real-time clock tick frequency (e.g. 1 GHz) and also a minimum update frequency (e.g. 100 MHz) at which updated time values are guaranteed to be observable by software. Software may read time more frequently, but it should only observe monotonically nondecreasing values and it should observe a new value at least once every 10 ns (corresponding to the 100 MHz update frequency in this example). The RDINSTRET pseudoinstruction reads the low XLEN bits of the instret CSR, which counts the number of instructions retired by this hart from some arbitrary start point in the past. RDINSTRETH is only present when XLEN=32 and reads bits 63-32 of the same instruction counter. The underlying 64-bit counter should never overflow in practice. Instructions that cause synchronous exceptions, including ECALL and EBREAK, are not considered to retire and hence do not increment the instret CSR. The following code sequence will read a valid 64-bit cycle counter value into x3:x2, even if the counter overflows its lower half between reading its upper and lower halves. Sample code for reading the 64-bit cycle counter when XLEN=32. again: rdcycleh x3 rdcycle x2 rdcycleh x4 bne x3, x4, again The Zihpm extension comprises up to 29 additional unprivileged 64-bit hardware performance counters, hpmcounter3-hpmcounter31. When XLEN=32, the upper 32 bits of these performance counters are accessible via additional CSRs hpmcounter3h- hpmcounter31h. The Zihpm extension depends on the Zicsr extension. In some applications, it is important to be able to read multiple counters at the same instant in time. When run under a multitasking environment, a user thread can suffer a context switch while attempting to read the counters. One solution is for the user thread to read the real-time counter before and after reading the other counters to determine if a context switch occurred in the middle of the sequence, in which case the reads can be retried. We considered adding output latches to allow a user thread to snapshot the counter values atomically, but this would increase the size of the user context, especially for implementations with a richer set of counters. The implemented number and width of these additional counters, and the set of events they count, is platform-specific. Accessing an unimplemented or ill-configured counter may cause an illegal-instruction exception or may return a constant value. The execution environment should provide a means to determine the number and width of the implemented counters, and an interface to configure the events to be counted by each counter. For execution environments implemented on RISC-V privileged platforms, the privileged architecture manual describes privileged CSRs controlling access by lower privileged modes to these counters, and to set the events to be counted. Alternative execution environments (e.g., user-level-only software performance models) may provide alternative mechanisms to configure the events counted by the performance counters. It would be useful to eventually standardize event settings to count ISA-level metrics, such as the number of floating-point instructions executed for example, and possibly a few common microarchitectural metrics, such as \"L1 instruction cache misses\".","title":"\"Zicntr\" and \"Zihpm\" Extensions for Counters, Version 2.0","component":"isa","version":"v20250508","name":"counters","url":"/isa/unpriv/counters.html","titles":[{"text":"\"Zicntr\" Extension for Base Counters and Timers","hash":"zicntr-extension-for-base-counters-and-timers","id":1},{"text":"\"Zihpm\" Extension for Hardware Performance Counters","hash":"zihpm-extension-for-hardware-performance-counters","id":2}]},"36":{"id":36,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"D\" Extension for Double-Precision Floating-Point, Version 2.2 This chapter describes the standard double-precision floating-point instruction-set extension, which is named \"D\" and adds double-precision floating-point computational instructions compliant with the IEEE 754-2008 arithmetic standard. The D extension depends on the base single-precision instruction subset F. The D extension widens the 32 floating-point registers, f0-f31, to 64 bits (FLEN=64 in [fprs]. The f registers can now hold either 32-bit or 64-bit floating-point values as described below in NaN Boxing of Narrower Values. FLEN can be 32, 64, or 128 depending on which of the F, D, and Q extensions are supported. There can be up to four different floating-point precisions supported, including H, F, D, and Q. When multiple floating-point precisions are supported, then valid values of narrower n-bit types, n<FLEN, are represented in the lower n bits of an FLEN-bit NaN value, in a process termed NaN-boxing. The upper bits of a valid NaN-boxed value must be all 1s. Valid NaN-boxed n-bit values therefore appear as negative quiet NaNs (qNaNs) when viewed as any wider m-bit value, n < m ≤ FLEN. Any operation that writes a narrower result to an 'f' register must write all 1s to the uppermost FLEN-n bits to yield a legal NaN-boxedvalue. Software might not know the current type of data stored in a floating-point register but has to be able to save and restore the register values, hence the result of using wider operations to transfer narrower values has to be defined. A common case is for callee-saved registers, but a standard convention is also desirable for features including varargs, user-level threading libraries, virtual machine migration, and debugging. Floating-point n-bit transfer operations move external values held in IEEE standard formats into and out of the f registers, and comprise floating-point loads and stores (FLn/FSn) and floating-point move instructions (FMV.n.X/FMV.X.n). A narrower n-bit transfer, n<FLEN, into the f registers will create a valid NaN-boxed value. A narrower n-bit transfer out of the floating-point registers will transfer the lower n bits of the register ignoring the upper FLEN-n bits. Apart from transfer operations described in the previous paragraph, all other floating-point operations on narrower n-bit operations, n<FLEN, check if the input operands are correctly NaN-boxed, i.e., all upper FLEN-n bits are 1. If so, the n least-significant bits of the input are used as the input value, otherwise the input value is treated as an n-bit canonical NaN. Earlier versions of this document did not define the behavior of feeding the results of narrower or wider operands into an operation, except to require that wider saves and restores would preserve the value of a narrower operand. The new definition removes this implementation-specific behavior, while still accommodating both non-recoded and recoded implementations of the floating-point unit. The new definition also helps catch software errors by propagating NaNs if values are used incorrectly. Non-recoded implementations unpack and pack the operands to IEEE standard format on the input and output of every floating-point operation. The NaN-boxing cost to a non-recoded implementation is primarily in checking if the upper bits of a narrower operation represent a legal NaN-boxed value, and in writing all 1s to the upper bits of a result. Recoded implementations use a more convenient internal format to represent floating-point values, with an added exponent bit to allow all values to be held normalized. The cost to the recoded implementation is primarily the extra tagging needed to track the internal types and sign bits, but this can be done without adding new state bits by recoding NaNs internally in the exponent field. Small modifications are needed to the pipelines used to transfer values in and out of the recoded format, but the datapath and latency costs are minimal. The recoding process has to handle shifting of input subnormal values for wide operands in any case, and extracting the NaN-boxed value is a similar process to normalization except for skipping over leading-1 bits instead of skipping over leading-0 bits, allowing the datapath muxing to be shared. The FLD instruction loads a double-precision floating-point value from memory into floating-point register rd. FSD stores a double-precision value from the floating-point registers to memory. The double-precision value may be a NaN-boxed single-precision value. FLD and FSD are only guaranteed to execute atomically if the effective address is naturally aligned and XLEN≥64. FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. The double-precision floating-point computational instructions are defined analogously to their single-precision counterparts, but operate on double-precision operands and produce double-precision results. Floating-point-to-integer and integer-to-floating-point conversion instructions are encoded in the OP-FP major opcode space. FCVT.W.D or FCVT.L.D converts a double-precision floating-point number in floating-point register rs1 to a signed 32-bit or 64-bit integer, respectively, in integer register rd. FCVT.D.W or FCVT.D.L converts a 32-bit or 64-bit signed integer, respectively, in integer register rs1 into a double-precision floating-point number in floating-point register rd. FCVT.WU.D, FCVT.LU.D, FCVT.D.WU, and FCVT.D.LU variants convert to or from unsigned integer values. For RV64, FCVT.W[U].D sign-extends the 32-bit result. FCVT.L[U].D and FCVT.D.L[U] are RV64-only instructions. The range of valid inputs for FCVT.int.D and the behavior for invalid inputs are the same as for FCVT.int.S. All floating-point to integer and integer to floating-point conversion instructions round according to the rm field. Note FCVT.D.W[U] always produces an exact result and is unaffected by rounding mode. The double-precision to single-precision and single-precision to double-precision conversion instructions, FCVT.S.D and FCVT.D.S, are encoded in the OP-FP major opcode space and both the source and destination are floating-point registers. The rs2 field encodes the datatype of the source, and the fmt field encodes the datatype of the destination. FCVT.S.D rounds according to the RM field; FCVT.D.S will never round. Floating-point to floating-point sign-injection instructions, FSGNJ.D, FSGNJN.D, and FSGNJX.D are defined analogously to the single-precision sign-injection instruction. For XLEN≥64 only, instructions are provided to move bit patterns between the floating-point and integer registers. FMV.X.D moves the double-precision value in floating-point register rs1 to a representation in IEEE 754-2008 standard encoding in integer register rd. FMV.D.X moves the double-precision value encoded in IEEE 754-2008 standard encoding from the integer register rs1 to the floating-point register rd. FMV.X.D and FMV.D.X do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. Early versions of the RISC-V ISA had additional instructions to allow RV32 systems to transfer between the upper and lower portions of a 64-bit floating-point register and an integer register. However, these would be the only instructions with partial register writes and would add complexity in implementations with recoded floating-point or register renaming, requiring a pipeline read-modify-write sequence. Scaling up to handling quad-precision for RV32 and RV64 would also require additional instructions if they were to follow this pattern. The ISA was defined to reduce the number of explicit int-float register moves, by having conversions and comparisons write results to the appropriate register file, so we expect the benefit of these instructions to be lower than for other ISAs. We note that for systems that implement a 64-bit floating-point unit including fused multiply-add support and 64-bit floating-point loads and stores, the marginal hardware cost of moving from a 32-bit to a 64-bit integer datapath is low, and a software ABI supporting 32-bit wide address-space and pointers can be used to avoid growth of static data and dynamic memory traffic. The double-precision floating-point compare instructions are defined analogously to their single-precision counterparts, but operate on double-precision operands. The double-precision floating-point classify instruction, FCLASS.D, is defined analogously to its single-precision counterpart, but operates on double-precision operands.","title":"\"D\" Extension for Double-Precision Floating-Point, Version 2.2","component":"isa","version":"v20250508","name":"d-st-ext","url":"/isa/unpriv/d-st-ext.html","titles":[{"text":"D Register State","hash":"d-register-state","id":1},{"text":"NaN Boxing of Narrower Values","hash":"nanboxing","id":2},{"text":"Double-Precision Load and Store Instructions","hash":"fld_fsd","id":3},{"text":"Double-Precision Floating-Point Computational Instructions","hash":"double-precision-floating-point-computational-instructions","id":4},{"text":"Double-Precision Floating-Point Conversion and Move Instructions","hash":"fl-compute","id":5},{"text":"Double-Precision Floating-Point Compare Instructions","hash":"double-precision-floating-point-compare-instructions","id":6},{"text":"Double-Precision Floating-Point Classify Instruction","hash":"fl-compare","id":7}]},"37":{"id":37,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"F\" Extension for Single-Precision Floating-Point, Version 2.2 This chapter describes the standard instruction-set extension for single-precision floating-point, which is named \"F\" and adds single-precision floating-point computational instructions compliant with the IEEE 754-2008 arithmetic standard [4]. The F extension depends on the \"Zicsr\" extension for control and status register access. The F extension adds 32 floating-point registers, f0-f31, each 32 bits wide, and a floating-point control and status register fcsr, which contains the operating mode and exception status of the floating-point unit. This additional state is shown in RISC-V standard F extension single-precision floating-point state. We use the term FLEN to describe the width of the floating-point registers in the RISC-V ISA, and FLEN=32 for the F single-precision floating-point extension. Most floating-point instructions operate on values in the floating-point register file. Floating-point load and store instructions transfer floating-point values between registers and memory. Instructions to transfer values to and from the integer register file are also provided. We considered a unified register file for both integer and floating-point values as this simplifies software register allocation and calling conventions, and reduces total user state. However, a split organization increases the total number of registers accessible with a given instruction width, simplifies provision of enough regfile ports for wide superscalar issue, supports decoupled floating-point-unit architectures, and simplifies use of internal floating-point encoding techniques. Compiler support and calling conventions for split register file architectures are well understood, and using dirty bits on floating-point register file state can reduce context-switch overhead. Table 1. RISC-V standard F extension single-precision floating-point state FLEN-1 0 f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 f31 FLEN 31 0 fcsr 32 The floating-point control and status register, fcsr, is a RISC-V control and status register (CSR). It is a 32-bit read/write register that selects the dynamic rounding mode for floating-point arithmetic operations and holds the accrued exception flags, as shown in Floating-Point Control and Status Register. Figure 1. Floating-point control and status register The fcsr register can be read and written with the FRCSR and FSCSR instructions, which are assembler pseudoinstructions built on the underlying CSR access instructions. FRCSR reads fcsr by copying it into integer register rd. FSCSR swaps the value in fcsr by copying the original value into integer register rd, and then writing a new value obtained from integer register rs1 into fcsr. The fields within the fcsr can also be accessed individually through different CSR addresses, and separate assembler pseudoinstructions are defined for these accesses. The FRRM instruction reads the Rounding Mode field frm (fcsr bits 7—​5) and copies it into the least-significant three bits of integer register rd, with zero in all other bits. FSRM swaps the value in frm by copying the original value into integer register rd, and then writing a new value obtained from the three least-significant bits of integer register rs1 into frm. FRFLAGS and FSFLAGS are defined analogously for the Accrued Exception Flags field fflags (fcsr bits 4—​0). Bits 31—​8 of the fcsr are reserved for other standard extensions. If these extensions are not present, implementations shall ignore writes to these bits and supply a zero value when read. Standard software should preserve the contents of these bits. Floating-point operations use either a static rounding mode encoded in the instruction, or a dynamic rounding mode held in frm. Rounding modes are encoded as shown in Rounding mode encoding.. A value of 111 in the instruction’s rm field selects the dynamic rounding mode held in frm. The behavior of floating-point instructions that depend on rounding mode when executed with a reserved rounding mode is reserved, including both static reserved rounding modes (101-110) and dynamic reserved rounding modes (101-111). Some instructions, including widening conversions, have the rm field but are nevertheless mathematically unaffected by the rounding mode; software should set their rm field to RNE (000) but implementations must treat the rm field as usual (in particular, with regard to decoding legal vs. reserved encodings). Table 2. Rounding mode encoding. Rounding Mode Mnemonic Meaning 000 RNE Round to Nearest, ties to Even 001 RTZ Round towards Zero 010 RDN Round Down (towards ) 011 RUP Round Up (towards ) 100 RMM Round to Nearest, ties to Max Magnitude 101 Reserved for future use. 110 Reserved for future use. 111 DYN In instruction’s rm field, selects dynamic rounding mode; In Rounding Mode register, reserved. The C99 language standard effectively mandates the provision of a dynamic rounding mode register. In typical implementations, writes to the dynamic rounding mode CSR state will serialize the pipeline. Static rounding modes are used to implement specialized arithmetic operations that often have to switch frequently between different rounding modes. The ratified version of the F spec mandated that an illegal-instruction exception was raised when an instruction was executed with a reserved dynamic rounding mode. This has been weakened to reserved, which matches the behavior of static rounding-mode instructions. Raising an illegal-instruction exception is still valid behavior when encountering a reserved encoding, so implementations compatible with the ratified spec are compatible with the weakened spec. The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software, as shown in Accrued exception flag encoding.. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag. Table 3. Accrued exception flag encoding. Flag Mnemonic Flag Meaning NV Invalid Operation DZ Divide by Zero OF Overflow UF Underflow NX Inexact As allowed by the standard, we do not support traps on floating-point exceptions in the F extension, but instead require explicit checks of the flags in software. We considered adding branches controlled directly by the contents of the floating-point accrued exception flags, but ultimately chose to omit these instructions to keep the ISA simple. Except when otherwise stated, if the result of a floating-point operation is NaN, it is the canonical NaN. The canonical NaN has a positive sign and all significand bits clear except the MSB, a.k.a. the quiet bit. For single-precision floating-point, this corresponds to the pattern 0x7fc00000. We considered propagating NaN payloads, as is recommended by the standard, but this decision would have increased hardware cost. Moreover, since this feature is optional in the standard, it cannot be used in portable code. Implementers are free to provide a NaN payload propagation scheme as a nonstandard extension enabled by a nonstandard operating mode. However, the canonical NaN scheme described above must always be supported and should be the default mode. We require implementations to return the standard-mandated default values in the case of exceptional conditions, without any further intervention on the part of user-level software (unlike the Alpha ISA floating-point trap barriers). We believe full hardware handling of exceptional cases will become more common, and so wish to avoid complicating the user-level ISA to optimize other approaches. Implementations can always trap to machine-mode software handlers to provide exceptional default values. Operations on subnormal numbers are handled in accordance with the IEEE 754-2008 standard. In the parlance of the IEEE standard, tininess is detected after rounding. Detecting tininess after rounding results in fewer spurious underflow signals. Floating-point loads and stores use the same base+offset addressing mode as the integer base ISAs, with a base address in register rs1 and a 12-bit signed byte offset. The FLW instruction loads a single-precision floating-point value from memory into floating-point register rd. FSW stores a single-precision value from floating-point register rs2 to memory. FLW and FSW are only guaranteed to execute atomically if the effective address is naturally aligned. FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. As described in [ldst], the execution environment defines whether misaligned floating-point loads and stores are handled invisibly or raise a contained or fatal trap. Floating-point arithmetic instructions with one or two source operands use the R-type format with the OP-FP major opcode. FADD.S and FMUL.S perform single-precision floating-point addition and multiplication respectively, between rs1 and rs2. FSUB.S performs the single-precision floating-point subtraction of rs2 from rs1. FDIV.S performs the single-precision floating-point division of rs1 by rs2. FSQRT.S computes the square root of rs1. In each case, the result is written to rd. The 2-bit floating-point format field fmt is encoded as shown in Format field encoding. It is set to S (00) for all instructions in the F extension. Table 4. Format field encoding fmt field Mnemonic Meaning 00 S 32-bit single-precision 01 D 64-bit double-precision 10 H 16-bit half-precision 11 Q 128-bit quad-precision All floating-point operations that perform rounding can select the rounding mode using the rm field with the encoding shown in Rounding mode encoding.. Floating-point minimum-number and maximum-number instructions FMIN.S and FMAX.S write, respectively, the smaller or larger of rs1 and rs2 to rd. For the purposes of these instructions only, the value is considered to be less than the value . If both inputs are NaNs, the result is the canonical NaN. If only one operand is a NaN, the result is the non-NaN operand. Signaling NaN inputs set the invalid operation exception flag, even when the result is not NaN. Note that in version 2.2 of the F extension, the FMIN.S and FMAX.S instructions were amended to implement the proposed IEEE 754-201x minimumNumber and maximumNumber operations, rather than the IEEE 754-2008 minNum and maxNum operations. These operations differ in their handling of signaling NaNs. Floating-point fused multiply-add instructions require a new standard instruction format. R4-type instructions specify three source registers (rs1, rs2, and rs3) and a destination register (rd). This format is only used by the floating-point fused multiply-add instructions. FMADD.S multiplies the values in rs1 and rs2, adds the value in rs3, and writes the final result to rd. FMADD.S computes (rs1 rs2) Undefined control sequence \\+ rs3. FMSUB.S multiplies the values in rs1 and rs2, subtracts the value in rs3, and writes the final result to rd. FMSUB.S computes (rs1 rs2) Undefined control sequence \\- rs3. FNMSUB.S multiplies the values in rs1 and rs2, negates the product, adds the value in rs3, and writes the final result to rd. FNMSUB.S computes -(rs1 rs2) Undefined control sequence \\+ rs3. FNMADD.S multiplies the values in rs1 and rs2, negates the product, subtracts the value in rs3, and writes the final result to rd. FNMADD.S computes -(rs1 rs2) Undefined control sequence \\- rs3. The FNMSUB and FNMADD instructions are counterintuitively named, owing to the naming of the corresponding instructions in MIPS-IV. The MIPS instructions were defined to negate the sum, rather than negating the product as the RISC-V instructions do, so the naming scheme was more rational at the time. The two definitions differ with respect to signed-zero results. The RISC-V definition matches the behavior of the x86 and ARM fused multiply-add instructions, but unfortunately the RISC-V FNMSUB and FNMADD instruction names are swapped as compared to x86, whereas the RISC-V FMSUB and FNMSUB instruction names are swapped as compared to ARM. The fused multiply-add (FMA) instructions consume a large part of the 32-bit instruction encoding space. Some alternatives considered were to restrict FMA to only use dynamic rounding modes, but static rounding modes are useful in code that exploits the lack of product rounding. Another alternative would have been to use rd to provide rs3, but this would require additional move instructions in some common sequences. The current design still leaves a large portion of the 32-bit encoding space open while avoiding having FMA be non-orthogonal. The fused multiply-add instructions must set the invalid operation exception flag when the multiplicands are and zero, even when the addend is a quiet NaN. The IEEE 754-2008 standard permits, but does not require, raising the invalid exception for the operation qNaN. Floating-point-to-integer and integer-to-floating-point conversion instructions are encoded in the OP-FP major opcode space. FCVT.W.S or FCVT.L.S converts a floating-point number in floating-point register rs1 to a signed 32-bit or 64-bit integer, respectively, in integer register rd. FCVT.S.W or FCVT.S.L converts a 32-bit or 64-bit signed integer, respectively, in integer register rs1 into a floating-point number in floating-point register rd. FCVT.WU.S, FCVT.LU.S, FCVT.S.WU, and FCVT.S.LU variants convert to or from unsigned integer values. For XLEN , FCVT.W[U].S sign-extends the 32-bit result to the destination register width. FCVT.L[U].S and FCVT.S.L[U] are RV64-only instructions. If the rounded result is not representable in the destination format, it is clipped to the nearest value and the invalid flag is set. Domains of float-to-integer conversions and behavior for invalid inputs gives the range of valid inputs for FCVT.int.S and the behavior for invalid inputs. All floating-point to integer and integer to floating-point conversion instructions round according to the rm field. A floating-point register can be initialized to floating-point positive zero using FCVT.S.W rd, x0, which will never set any exception flags. Table 5. Domains of float-to-integer conversions and behavior for invalid inputs FCVT.W.S FCVT.WU.S FCVT.L.S FCVT.LU.S Minimum valid input (after rounding) 0 0 Maximum valid input (after rounding) Output for out-of-range negative input 0 0 Output for 0 0 Output for out-of-range positive input Output for or NaN All floating-point conversion instructions set the Inexact exception flag if the rounded result differs from the operand value and the Invalid exception flag is not set. Floating-point to floating-point sign-injection instructions, FSGNJ.S, FSGNJN.S, and FSGNJX.S, produce a result that takes all bits except the sign bit from rs1. For FSGNJ, the result’s sign bit is rs2's sign bit; for FSGNJN, the result’s sign bit is the opposite of rs2's sign bit; and for FSGNJX, the sign bit is the XOR of the sign bits of rs1 and rs2. Sign-injection instructions do not set floating-point exception flags, nor do they canonicalize NaNs. Note, FSGNJ.S rx, ry, ry moves ry to rx (assembler pseudoinstruction FMV.S rx, ry); FSGNJN.S rx, ry, ry moves the negation of ry to rx (assembler pseudoinstruction FNEG.S rx, ry); and FSGNJX.S rx, ry, ry moves the absolute value of ry to rx (assembler pseudoinstruction FABS.S rx, ry). The sign-injection instructions provide floating-point MV, ABS, and NEG, as well as supporting a few other operations, including the IEEE copySign operation and sign manipulation in transcendental math function libraries. Although MV, ABS, and NEG only need a single register operand, whereas FSGNJ instructions need two, it is unlikely most microarchitectures would add optimizations to benefit from the reduced number of register reads for these relatively infrequent instructions. Even in this case, a microarchitecture can simply detect when both source registers are the same for FSGNJ instructions and only read a single copy. Instructions are provided to move bit patterns between the floating-point and integer registers. FMV.X.W moves the single-precision value in floating-point register rs1 represented in IEEE 754-2008 encoding to the lower 32 bits of integer register rd. The bits are not modified in the transfer, and in particular, the payloads of non-canonical NaNs are preserved. For RV64, the higher 32 bits of the destination register are filled with copies of the floating-point number’s sign bit. FMV.W.X moves the single-precision value encoded in IEEE 754-2008 standard encoding from the lower 32 bits of integer register rs1 to the floating-point register rd. The bits are not modified in the transfer, and in particular, the payloads of non-canonical NaNs are preserved. The FMV.W.X and FMV.X.W instructions were previously called FMV.S.X and FMV.X.S. The use of W is more consistent with their semantics as an instruction that moves 32 bits without interpreting them. This became clearer after defining NaN-boxing. To avoid disturbing existing code, both the W and S versions will be supported by tools. The base floating-point ISA was defined so as to allow implementations to employ an internal recoding of the floating-point format in registers to simplify handling of subnormal values and possibly to reduce functional unit latency. To this end, the F extension avoids representing integer values in the floating-point registers by defining conversion and comparison operations that read and write the integer register file directly. This also removes many of the common cases where explicit moves between integer and floating-point registers are required, reducing instruction count and critical paths for common mixed-format code sequences. Floating-point compare instructions (FEQ.S, FLT.S, FLE.S) perform the specified comparison between floating-point registers (\\(\\mbox{\\em rs1} = \\mbox{\\em rs2}\\), , \\(\\mbox{\\em rs1} \\leq \\mbox{\\em rs2}\\)) writing 1 to the integer register rd if the condition holds, and 0 otherwise. FLT.S and FLE.S perform what the IEEE 754-2008 standard refers to as signaling comparisons: that is, they set the invalid operation exception flag if either input is NaN. FEQ.S performs a quiet comparison: it only sets the invalid operation exception flag if either input is a signaling NaN. For all three instructions, the result is 0 if either operand is NaN. The F extension provides a comparison, whereas the base ISAs provide a branch comparison. Because can be synthesized from and vice-versa, there is no performance implication to this inconsistency, but it is nevertheless an unfortunate incongruity in the ISA. The FCLASS.S instruction examines the value in floating-point register rs1 and writes to integer register rd a 10-bit mask that indicates the class of the floating-point number. The format of the mask is described in Format of result of FCLASS instruction.. The corresponding bit in rd will be set if the property is true and clear otherwise. All other bits in rd are cleared. Note that exactly one bit in rd will be set. FCLASS.S does not set the floating-point exception flags. Table 6. Format of result of FCLASS instruction. rd bit Meaning 0 rs1 is . 1 rs1 is a negative normal number. 2 rs1 is a negative subnormal number. 3 rs1 is . 4 rs1 is . 5 rs1 is a positive subnormal number. 6 rs1 is a positive normal number. 7 rs1 is . 8 rs1 is a signaling NaN. 9 rs1 is a quiet NaN.","title":"\"F\" Extension for Single-Precision Floating-Point, Version 2.2","component":"isa","version":"v20250508","name":"f-st-ext","url":"/isa/unpriv/f-st-ext.html","titles":[{"text":"F Register State","hash":"f-register-state","id":1},{"text":"Floating-Point Control and Status Register","hash":"floating-point-control-and-status-register","id":2},{"text":"NaN Generation and Propagation","hash":"nan-generation-and-propagation","id":3},{"text":"Subnormal Arithmetic","hash":"subnormal-arithmetic","id":4},{"text":"Single-Precision Load and Store Instructions","hash":"single-precision-load-and-store-instructions","id":5},{"text":"Single-Precision Floating-Point Computational Instructions","hash":"single-float-compute","id":6},{"text":"Single-Precision Floating-Point Conversion and Move Instructions","hash":"single-precision-floating-point-conversion-and-move-instructions","id":7},{"text":"Single-Precision Floating-Point Compare Instructions","hash":"single-precision-floating-point-compare-instructions","id":8},{"text":"Single-Precision Floating-Point Classify Instruction","hash":"single-precision-floating-point-classify-instruction","id":9}]},"38":{"id":38,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Introduction RISC-V (pronounced \"risk-five\") is a new instruction-set architecture (ISA) that was originally designed to support computer architecture research and education, but which we now hope will also become a standard free and open architecture for industry implementations. Our goals in defining RISC-V include: A completely open ISA that is freely available to academia and industry. A real ISA suitable for direct native hardware implementation, not just simulation or binary translation. An ISA that avoids \"over-architecting\" for a particular microarchitecture style (e.g., microcoded, in-order, decoupled, out-of-order) or implementation technology (e.g., full-custom, ASIC, FPGA), but which allows efficient implementation in any of these. An ISA separated into a small base integer ISA, usable by itself as a base for customized accelerators or for educational purposes, and optional standard extensions, to support general-purpose software development. Support for the revised 2008 IEEE-754 floating-point standard. [4] An ISA supporting extensive ISA extensions and specialized variants. Both 32-bit and 64-bit address space variants for applications, operating system kernels, and hardware implementations. An ISA with support for highly parallel multicore or manycore implementations, including heterogeneous multiprocessors. Optional variable-length instructions to both expand available instruction encoding space and to support an optional dense instruction encoding for improved performance, static code size, and energy efficiency. A fully virtualizable ISA to ease hypervisor development. An ISA that simplifies experiments with new privileged architecture designs. Commentary on our design decisions is formatted as in this paragraph. This non-normative text can be skipped if the reader is only interested in the specification itself. The name RISC-V was chosen to represent the fifth major RISC ISA design from UC Berkeley (RISC-I [5], RISC-II [6], SOAR [7], and SPUR [8] were the first four). We also pun on the use of the Roman numeral \"V\" to signify \"variations\" and \"vectors\", as support for a range of architecture research, including various data-parallel accelerators, is an explicit goal of the ISA design. The RISC-V ISA is defined avoiding implementation details as much as possible (although commentary is included on implementation-driven decisions) and should be read as the software-visible interface to a wide variety of implementations rather than as the design of a particular hardware artifact. The RISC-V manual is structured in two volumes. This volume covers the design of the base unprivileged instructions, including optional unprivileged ISA extensions. Unprivileged instructions are those that are generally usable in all privilege modes in all privileged architectures, though behavior might vary depending on privilege mode and privilege architecture. The second volume provides the design of the first (\"classic\") privileged architecture. The manuals use IEC 80000-13:2008 conventions, with a byte of 8 bits. In the unprivileged ISA design, we tried to remove any dependence on particular microarchitectural features, such as cache line size, or on privileged architecture details, such as page translation. This is both for simplicity and to allow maximum flexibility for alternative microarchitectures or alternative privileged architectures. A RISC-V hardware platform can contain one or more RISC-V-compatible processing cores together with other non-RISC-V-compatible cores, fixed-function accelerators, various physical memory structures, I/O devices, and an interconnect structure to allow the components to communicate. A component is termed a core if it contains an independent instruction fetch unit. A RISC-V-compatible core might support multiple RISC-V-compatible hardware threads, or harts, through multithreading. A RISC-V core might have additional specialized instruction-set extensions or an added coprocessor. We use the term coprocessor to refer to a unit that is attached to a RISC-V core and is mostly sequenced by a RISC-V instruction stream, but which contains additional architectural state and instruction-set extensions, and possibly some limited autonomy relative to the primary RISC-V instruction stream. We use the term accelerator to refer to either a non-programmable fixed-function unit or a core that can operate autonomously but is specialized for certain tasks. In RISC-V systems, we expect many programmable accelerators will be RISC-V-based cores with specialized instruction-set extensions and/or customized coprocessors. An important class of RISC-V accelerators are I/O accelerators, which offload I/O processing tasks from the main application cores. The system-level organization of a RISC-V hardware platform can range from a single-core microcontroller to a many-thousand-node cluster of shared-memory manycore server nodes. Even small systems-on-a-chip might be structured as a hierarchy of multicomputers and/or multiprocessors to modularize development effort or to provide secure isolation between subsystems. The behavior of a RISC-V program depends on the execution environment in which it runs. A RISC-V execution environment interface (EEI) defines the initial state of the program, the number and type of harts in the environment including the privilege modes supported by the harts, the accessibility and attributes of memory and I/O regions, the behavior of all legal instructions executed on each hart (i.e., the ISA is one component of the EEI), and the handling of any interrupts or exceptions raised during execution including environment calls. Examples of EEIs include the Linux application binary interface (ABI), or the RISC-V supervisor binary interface (SBI). The implementation of a RISC-V execution environment can be pure hardware, pure software, or a combination of hardware and software. For example, opcode traps and software emulation can be used to implement functionality not provided in hardware. Examples of execution environment implementations include: \"Bare metal\" hardware platforms where harts are directly implemented by physical processor threads and instructions have full access to the physical address space. The hardware platform defines an execution environment that begins at power-on reset. RISC-V operating systems that provide multiple user-level execution environments by multiplexing user-level harts onto available physical processor threads and by controlling access to memory via virtual memory. RISC-V hypervisors that provide multiple supervisor-level execution environments for guest operating systems. RISC-V emulators, such as Spike, QEMU or rv8, which emulate RISC-V harts on an underlying x86 system, and which can provide either a user-level or a supervisor-level execution environment. A bare hardware platform can be considered to define an EEI, where the accessible harts, memory, and other devices populate the environment, and the initial state is that at power-on reset. Generally, most software is designed to use a more abstract interface to the hardware, as more abstract EEIs provide greater portability across different hardware platforms. Often EEIs are layered on top of one another, where one higher-level EEI uses another lower-level EEI. From the perspective of software running in a given execution environment, a hart is a resource that autonomously fetches and executes RISC-V instructions within that execution environment. In this respect, a hart behaves like a hardware thread resource even if time-multiplexed onto real hardware by the execution environment. Some EEIs support the creation and destruction of additional harts, for example, via environment calls to fork new harts. The execution environment is responsible for ensuring the eventual forward progress of each of its harts. For a given hart, that responsibility is suspended while the hart is exercising a mechanism that explicitly waits for an event, such as the wait-for-interrupt instruction defined in Volume II of this specification; and that responsibility ends if the hart is terminated. The following events constitute forward progress: The retirement of an instruction. A trap, as defined in Exceptions, Traps, and Interrupts. Any other event defined by an extension to constitute forward progress. The term hart was introduced in the work on Lithe [9] and [10] to provide a term to represent an abstract execution resource as opposed to a software thread programming abstraction. The important distinction between a hardware thread (hart) and a software thread context is that the software running inside an execution environment is not responsible for causing progress of each of its harts; that is the responsibility of the outer execution environment. So the environment’s harts operate like hardware threads from the perspective of the software inside the execution environment. An execution environment implementation might time-multiplex a set of guest harts onto fewer host harts provided by its own execution environment but must do so in a way that guest harts operate like independent hardware threads. In particular, if there are more guest harts than host harts then the execution environment must be able to preempt the guest harts and must not wait indefinitely for guest software on a guest hart to \"yield\" control of the guest hart. A RISC-V ISA is defined as a base integer ISA, which must be present in any implementation, plus optional extensions to the base ISA. The base integer ISAs are very similar to that of the early RISC processors except with no branch delay slots and with support for optional variable-length instruction encodings. A base is carefully restricted to a minimal set of instructions sufficient to provide a reasonable target for compilers, assemblers, linkers, and operating systems (with additional privileged operations), and so provides a convenient ISA and software toolchain \"skeleton\" around which more customized processor ISAs can be built. Although it is convenient to speak of the RISC-V ISA, RISC-V is actually a family of related ISAs, of which there are currently four base ISAs. Each base integer instruction set is characterized by the width of the integer registers and the corresponding size of the address space and by the number of integer registers. There are two primary base integer variants, RV32I and RV64I, described in [rv32] and [rv64], which provide 32-bit or 64-bit address spaces respectively. We use the term XLEN to refer to the width of an integer register in bits (either 32 or 64). [rv32e] describes the RV32E and RV64E subset variants of the RV32I or RV64I base instruction sets respectively, which have been added to support small microcontrollers, and which have half the number of integer registers. The base integer instruction sets use a two’s-complement representation for signed integer values. Although 64-bit address spaces are a requirement for larger systems, we believe 32-bit address spaces will remain adequate for many embedded and client devices for decades to come and will be desirable to lower memory traffic and energy consumption. In addition, 32-bit address spaces are sufficient for educational purposes. A larger flat 128-bit address space might eventually be required and could be accommodated with a new RV128I base ISA within the existing RISC-V ISA framework. The four base ISAs in RISC-V are treated as distinct base ISAs. A common question is why is there not a single ISA, and in particular, why is RV32I not a strict subset of RV64I? Some earlier ISA designs (SPARC, MIPS) adopted a strict superset policy when increasing address space size to support running existing 32-bit binaries on new 64-bit hardware. The main advantage of explicitly separating base ISAs is that each base ISA can be optimized for its needs without requiring to support all the operations needed for other base ISAs. For example, RV64I can omit instructions and CSRs that are only needed to cope with the narrower registers in RV32I. The RV32I variants can use encoding space otherwise reserved for instructions only required by wider address-space variants. The main disadvantage of not treating the design as a single ISA is that it complicates the hardware needed to emulate one base ISA on another (e.g., RV32I on RV64I). However, differences in addressing and illegal-instruction traps generally mean some mode switch would be required in hardware in any case even with full superset instruction encodings, and the different RISC-V base ISAs are similar enough that supporting multiple versions is relatively low cost. Although some have proposed that the strict superset design would allow legacy 32-bit libraries to be linked with 64-bit code, this is impractical in practice, even with compatible encodings, due to the differences in software calling conventions and system-call interfaces. The RISC-V privileged architecture provides fields in misa to control the unprivileged ISA at each level to support emulating different base ISAs on the same hardware. We note that newer SPARC and MIPS ISA revisions have deprecated support for running 32-bit code unchanged on 64-bit systems. A related question is why there is a different encoding for 32-bit adds in RV32I (ADD) and RV64I (ADDW)? The ADDW opcode could be used for 32-bit adds in RV32I and ADDD for 64-bit adds in RV64I, instead of the existing design which uses the same opcode ADD for 32-bit adds in RV32I and 64-bit adds in RV64I with a different opcode ADDW for 32-bit adds in RV64I. This would also be more consistent with the use of the same LW opcode for 32-bit load in both RV32I and RV64I. The very first versions of RISC-V ISA did have a variant of this alternate design, but the RISC-V design was changed to the current choice in January 2011. Our focus was on supporting 32-bit integers in the 64-bit ISA not on providing compatibility with the 32-bit ISA, and the motivation was to remove the asymmetry that arose from having not all opcodes in RV32I have a *W suffix (e.g., ADDW, but AND not ANDW). In hindsight, this was perhaps not well-justified and a consequence of designing both ISAs at the same time as opposed to adding one later to sit on top of another, and also from a belief we had to fold platform requirements into the ISA spec which would imply that all the RV32I instructions would have been required in RV64I. It is too late to change the encoding now, but this is also of little practical consequence for the reasons stated above. It has been noted we could enable the *W variants as an extension to RV32I systems to provide a common encoding across RV64I and a future RV32 variant. RISC-V has been designed to support extensive customization and specialization. Each base integer ISA can be extended with one or more optional instruction-set extensions. An extension may be categorized as either standard, custom, or non-conforming. For this purpose, we divide each RISC-V instruction-set encoding space (and related encoding spaces such as the CSRs) into three disjoint categories: standard, reserved, and custom. Standard extensions and encodings are defined by RISC-V International; any extensions not defined by RISC-V International are non-standard. Each base ISA and its standard extensions use only standard encodings, and shall not conflict with each other in their uses of these encodings. Reserved encodings are currently not defined but are saved for future standard extensions; once thus used, they become standard encodings. Custom encodings shall never be used for standard extensions and are made available for vendor-specific non-standard extensions. Non-standard extensions are either custom extensions, that use only custom encodings, or non-conforming extensions, that use any standard or reserved encoding. Instruction-set extensions are generally shared but may provide slightly different functionality depending on the base ISA. [extending] describes various ways of extending the RISC-V ISA. We have also developed a naming convention for RISC-V base instructions and instruction-set extensions, described in detail in [naming]. To support more general software development, a set of standard extensions are defined to provide integer multiply/divide, atomic operations, and single and double-precision floating-point arithmetic. The base integer ISA is named \"I\" (prefixed by RV32 or RV64 depending on integer register width), and contains integer computational instructions, integer loads, integer stores, and control-flow instructions. The standard integer multiplication and division extension is named \"M\", and adds instructions to multiply and divide values held in the integer registers. The standard atomic instruction extension, denoted by \"A\", adds instructions that atomically read, modify, and write memory for inter-processor synchronization. The standard single-precision floating-point extension, denoted by \"F\", adds floating-point registers, single-precision computational instructions, and single-precision loads and stores. The standard double-precision floating-point extension, denoted by \"D\", expands the floating-point registers, and adds double-precision computational instructions, loads, and stores. The standard \"C\" compressed instruction extension provides narrower 16-bit forms of common instructions. Beyond the base integer ISA and these standard extensions, we believe it is rare that a new instruction will provide a significant benefit for all applications, although it may be very beneficial for a certain domain. As energy efficiency concerns are forcing greater specialization, we believe it is important to simplify the required portion of an ISA specification. Whereas other architectures usually treat their ISA as a single entity, which changes to a new version as instructions are added over time, RISC-V will endeavor to keep the base and each standard extension constant over time, and instead layer new instructions as further optional extensions. For example, the base integer ISAs will continue as fully supported standalone ISAs, regardless of any subsequent extensions. A RISC-V hart has a single byte-addressable address space of bytes for all memory accesses. A word of memory is defined as 32 bits (4 bytes). Correspondingly, a halfword is 16 bits (2 bytes), a doubleword is 64 bits (8 bytes), and a quadword is 128 bits (16 bytes). The memory address space is circular, so that the byte at address is adjacent to the byte at address zero. Accordingly, memory address computations done by the hardware ignore overflow and instead wrap around modulo . The execution environment determines the mapping of hardware resources into a hart’s address space. Different address ranges of a hart’s address space may (1) contain main memory, or (2) contain one or more I/O devices. Reads and writes of I/O devices may have visible side effects, but accesses to main memory cannot. Vacant address ranges are not a separate category but can be represented as either main memory or I/O regions that are not accessible. Although it is possible for the execution environment to call everything in a hart’s address space an I/O device, it is usually expected that some portion will be specified as main memory. When a RISC-V platform has multiple harts, the address spaces of any two harts may be entirely the same, or entirely different, or may be partly different but sharing some subset of resources, mapped into the same or different address ranges. For a purely \"bare metal\" environment, all harts may see an identical address space, accessed entirely by physical addresses. However, when the execution environment includes an operating system employing address translation, it is common for each hart to be given a virtual address space that is largely or entirely its own. Executing each RISC-V machine instruction entails one or more memory accesses, subdivided into implicit and explicit accesses. For each instruction executed, an implicit memory read (instruction fetch) is done to obtain the encoded instruction to execute. Many RISC-V instructions perform no further memory accesses beyond instruction fetch. Specific load and store instructions perform an explicit read or write of memory at an address determined by the instruction. The execution environment may dictate that instruction execution performs other implicit memory accesses (such as to implement address translation) beyond those documented for the unprivileged ISA. The execution environment determines what portions of the address space are accessible for each kind of memory access. For example, the set of locations that can be implicitly read for instruction fetch may or may not have any overlap with the set of locations that can be explicitly read by a load instruction; and the set of locations that can be explicitly written by a store instruction may be only a subset of locations that can be read. Ordinarily, if an instruction attempts to access memory at an inaccessible address, an exception is raised for the instruction. Except when specified otherwise, implicit reads that do not raise an exception and that have no side effects may occur arbitrarily early and speculatively, even before the machine could possibly prove that the read will be needed. For instance, a valid implementation could attempt to read all of main memory at the earliest opportunity, cache as many fetchable (executable) bytes as possible for later instruction fetches, and avoid reading main memory for instruction fetches ever again. To ensure that certain implicit reads are ordered only after writes to the same memory locations, software must execute specific fence or cache-control instructions defined for this purpose (such as the FENCE.I instruction defined in [zifencei]). The memory accesses (implicit or explicit) made by a hart may appear to occur in a different order as perceived by another hart or by any other agent that can access the same memory. This perceived reordering of memory accesses is always constrained, however, by the applicable memory consistency model. The default memory consistency model for RISC-V is the RISC-V Weak Memory Ordering (RVWMO), defined in [memorymodel] and in appendices. Optionally, an implementation may adopt the stronger model of Total Store Ordering, as defined in [ztso]. The execution environment may also add constraints that further limit the perceived reordering of memory accesses. Since the RVWMO model is the weakest model allowed for any RISC-V implementation, software written for this model is compatible with the actual memory consistency rules of all RISC-V implementations. As with implicit reads, software must execute fence or cache-control instructions to ensure specific ordering of memory accesses beyond the requirements of the assumed memory consistency model and execution environment. The base RISC-V ISA has fixed-length 32-bit instructions that must be naturally aligned on 32-bit boundaries. However, the standard RISC-V encoding scheme is designed to support ISA extensions with variable-length instructions, where each instruction can be any number of 16-bit instruction parcels in length and parcels are naturally aligned on 16-bit boundaries. The standard compressed ISA extension described in [compressed] reduces code size by providing compressed 16-bit instructions and relaxes the alignment constraints to allow all instructions (16 bit and 32 bit) to be aligned on any 16-bit boundary to improve code density. We use the term IALIGN (measured in bits) to refer to the instruction-address alignment constraint the implementation enforces. IALIGN is 32 bits in the base ISA, but some ISA extensions, including the compressed ISA extension, relax IALIGN to 16 bits. IALIGN may not take on any value other than 16 or 32. We use the term ILEN (measured in bits) to refer to the maximum instruction length supported by an implementation, and which is always a multiple of IALIGN. For implementations supporting only a base instruction set, ILEN is 32 bits. Implementations supporting longer instructions have larger values of ILEN. All the 32-bit instructions in the base ISA have their lowest two bits set to 11. The optional compressed 16-bit instruction-set extensions have their lowest two bits equal to 00, 01, or 10. Given the code size and energy savings of a compressed format, we wanted to build in support for a compressed format to the ISA encoding scheme rather than adding this as an afterthought, but to allow simpler implementations we didn’t want to make the compressed format mandatory. We also wanted to optionally allow longer instructions to support experimentation and larger instruction-set extensions. Although our encoding convention required a tighter encoding of the core RISC-V ISA, this has several beneficial effects. An implementation of the standard IMAFD ISA need only hold the most-significant 30 bits in instruction caches (a 6.25% saving). On instruction cache refills, any instructions encountered with either low bit clear should be recoded into illegal 30-bit instructions before storing in the cache to preserve illegal-instruction exception behavior. Perhaps more importantly, by condensing our base ISA into a subset of the 32-bit instruction word, we leave more space available for non-standard and custom extensions. In particular, the base RV32I ISA uses less than 1/8 of the encoding space in the 32-bit instruction word. As described in [extending], an implementation that does not require support for the standard compressed instruction extension can map 3 additional non-conforming 30-bit instruction spaces into the 32-bit fixed-width format, while preserving support for standard ≥32-bit instruction-set extensions. Encodings with bits [15:0] all zeros are defined as illegal instructions. These instructions are considered to be of minimal length: 16 bits if any 16-bit instruction-set extension is present, otherwise 32 bits. The encoding with bits [ILEN-1:0] all ones is also illegal; this instruction is considered to be ILEN bits long. We consider it a feature that any length of instruction containing all zero bits is not legal, as this quickly traps erroneous jumps into zeroed memory regions. Similarly, we also reserve the instruction encoding containing all ones to be an illegal instruction, to catch the other common pattern observed with unprogrammed non-volatile memory devices, disconnected memory buses, or broken memory devices. Software can rely on a naturally aligned 32-bit word containing zero to act as an illegal instruction on all RISC-V implementations, to be used by software where an illegal instruction is explicitly desired. Defining a corresponding known illegal value for all ones is more difficult due to the variable-length encoding. Software cannot generally use the illegal value of ILEN bits of all 1s, as software might not know ILEN for the eventual target machine (e.g., if software is compiled into a standard binary library used by many different machines). Defining a 32-bit word of all ones as illegal was also considered, as all machines must support a 32-bit instruction size, but this requires the instruction-fetch unit on machines with ILEN >32 report an illegal-instruction exception rather than an access-fault exception when such an instruction borders a protection boundary, complicating variable-instruction-length fetch and decode. RISC-V base ISAs have either little-endian or big-endian memory systems, with the privileged architecture further defining bi-endian operation. Instructions are stored in memory as a sequence of 16-bit little-endian parcels, regardless of memory system endianness. Parcels forming one instruction are stored at increasing halfword addresses, with the lowest-addressed parcel holding the lowest-numbered bits in the instruction specification. We originally chose little-endian byte ordering for the RISC-V memory system because little-endian systems are currently dominant commercially (all x86 systems; iOS, Android, and Windows for ARM). A minor point is that we have also found little-endian memory systems to be more natural for hardware designers. However, certain application areas, such as IP networking, operate on big-endian data structures, and certain legacy code bases have been built assuming big-endian processors, so we have defined big-endian and bi-endian variants of RISC-V. We have to fix the order in which instruction parcels are stored in memory, independent of memory system endianness, to ensure that the length-encoding bits always appear first in halfword address order. This allows the length of a variable-length instruction to be quickly determined by an instruction-fetch unit by examining only the first few bits of the first 16-bit instruction parcel. We further make the instruction parcels themselves little-endian to decouple the instruction encoding from the memory system endianness altogether. This design benefits both software tooling and bi-endian hardware. Otherwise, for instance, a RISC-V assembler or disassembler would always need to know the intended active endianness, despite that in bi-endian systems, the endianness mode might change dynamically during execution. In contrast, by giving instructions a fixed endianness, it is sometimes possible for carefully written software to be endianness-agnostic even in binary form, much like position-independent code. The choice to have instructions be only little-endian does have consequences, however, for RISC-V software that encodes or decodes machine instructions. Big-endian JIT compilers, for example, must swap the byte order when storing to instruction memory. Once we had decided to fix on a little-endian instruction encoding, this naturally led to placing the length-encoding bits in the LSB positions of the instruction format to avoid breaking up opcode fields. We use the term exception to refer to an unusual condition occurring at run time associated with an instruction in the current RISC-V hart. We use the term interrupt to refer to an external asynchronous event that may cause a RISC-V hart to experience an unexpected transfer of control. We use the term trap to refer to the transfer of control to a trap handler caused by either an exception or an interrupt. The instruction descriptions in following chapters describe conditions that can raise an exception during execution. The general behavior of most RISC-V EEIs is that a trap to some handler occurs when an exception is signaled on an instruction (except for floating-point exceptions, which, in the standard floating-point extensions, do not cause traps). The manner in which interrupts are generated, routed to, and enabled by a hart depends on the EEI. Our use of \"exception\" and \"trap\" is compatible with that in the IEEE-754 floating-point standard. How traps are handled and made visible to software running on the hart depends on the enclosing execution environment. From the perspective of software running inside an execution environment, traps encountered by a hart at runtime can have four different effects: Contained Trap The trap is visible to, and handled by, software running inside the execution environment. For example, in an EEI providing both supervisor and user mode on harts, an ECALL by a user-mode hart will generally result in a transfer of control to a supervisor-mode handler running on the same hart. Similarly, in the same environment, when a hart is interrupted, an interrupt handler will be run in supervisor mode on the hart. Requested Trap The trap is a synchronous exception that is an explicit call to the execution environment requesting an action on behalf of software inside the execution environment. An example is a system call. In this case, execution may or may not resume on the hart after the requested action is taken by the execution environment. For example, a system call could remove the hart or cause an orderly termination of the entire execution environment. Invisible Trap The trap is handled transparently by the execution environment and execution resumes normally after the trap is handled. Examples include emulating missing instructions, handling non-resident page faults in a demand-paged virtual-memory system, or handling device interrupts for a different job in a multiprogrammed machine. In these cases, the software running inside the execution environment is not aware of the trap (we ignore timing effects in these definitions). Fatal Trap The trap represents a fatal failure and causes the execution environment to terminate execution. Examples include failing a virtual-memory page-protection check or allowing a watchdog timer to expire. Each EEI should define how execution is terminated and reported to an external environment. Characteristics of traps shows the characteristics of each kind of trap. Table 1. Characteristics of traps Contained Requested Invisible Fatal Execution terminates No No1 No Yes Software is oblivious No No Yes Yes2 Handled by environment No Yes Yes Yes 1 Termination may be requested 2 Imprecise fatal traps might be observable by software The EEI defines for each trap whether it is handled precisely, though the recommendation is to maintain preciseness where possible. Contained and requested traps can be observed to be imprecise by software inside the execution environment. Invisible traps, by definition, cannot be observed to be precise or imprecise by software running inside the execution environment. Fatal traps can be observed to be imprecise by software running inside the execution environment, if known-errorful instructions do not cause immediate termination. Because this document describes unprivileged instructions, traps are rarely mentioned. Architectural means to handle contained traps are defined in the privileged architecture manual, along with other features to support richer EEIs. Unprivileged instructions that are defined solely to cause requested traps are documented here. Invisible traps are, by their nature, out of scope for this document. Instruction encodings that are not defined here and not defined by some other means may cause a fatal trap. The architecture fully describes what implementations must do and any constraints on what they may do. In cases where the architecture intentionally does not constrain implementations, the term UNSPECIFIED is explicitly used. The term UNSPECIFIED refers to a behavior or value that is intentionally unconstrained. The definition of these behaviors or values is open to extensions, platform standards, or implementations. Extensions, platform standards, or implementation documentation may provide normative content to further constrain cases that the base architecture defines as UNSPECIFIED. Like the base architecture, extensions should fully describe allowable behavior and values and use the term UNSPECIFIED for cases that are intentionally unconstrained. These cases may be constrained or defined by other extensions, platform standards, or implementations.","title":"Introduction","component":"isa","version":"v20250508","name":"intro","url":"/isa/unpriv/intro.html","titles":[{"text":"RISC-V Hardware Platform Terminology","hash":"risc-v-hardware-platform-terminology","id":1},{"text":"RISC-V Software Execution Environments and Harts","hash":"risc-v-software-execution-environments-and-harts","id":2},{"text":"RISC-V ISA Overview","hash":"risc-v-isa-overview","id":3},{"text":"Memory","hash":"memory","id":4},{"text":"Base Instruction-Length Encoding","hash":"base-instruction-length-encoding","id":5},{"text":"Exceptions, Traps, and Interrupts","hash":"trap-defn","id":6},{"text":"UNSPECIFIED Behaviors and Values","hash":"unspecified-behaviors-and-values","id":7}]},"39":{"id":39,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"M\" Extension for Integer Multiplication and Division, Version 2.0 This chapter describes the standard integer multiplication and division instruction extension, which is named M and contains instructions that multiply or divide values held in two integer registers. We separate integer multiply and divide out from the base to simplify low-end implementations, or for applications where integer multiply and divide operations are either infrequent or better handled in attached accelerators. MUL performs an XLEN-bit×XLEN-bit multiplication of rs1 by rs2 and places the lower XLEN bits in the destination register. MULH, MULHU, and MULHSU perform the same multiplication but return the upper XLEN bits of the full 2×XLEN-bit product, for signed×signed, unsigned×unsigned, and rs1×unsigned rs2 multiplication. If both the high and low bits of the same product are required, then the recommended code sequence is: MULH[[S]U] rdh, rs1, rs2; MUL rdl, rs1, rs2 (source register specifiers must be in same order and rdh cannot be the same as rs1 or rs2). Microarchitectures can then fuse these into a single multiply operation instead of performing two separate multiplies. MULHSU is used in multi-word signed multiplication to multiply the most-significant word of the multiplicand (which contains the sign bit) with the less-significant words of the multiplier (which are unsigned). MULW is an RV64 instruction that multiplies the lower 32 bits of the source registers, placing the sign extension of the lower 32 bits of the result into the destination register. In RV64, MUL can be used to obtain the upper 32 bits of the 64-bit product, but signed arguments must be proper 32-bit signed values, whereas unsigned arguments must have their upper 32 bits clear. If the arguments are not known to be sign- or zero-extended, an alternative is to shift both arguments left by 32 bits, then use MULH[[S]U]. DIV and DIVU perform an XLEN bits by XLEN bits signed and unsigned integer division of rs1 by rs2, rounding towards zero. REM and REMU provide the remainder of the corresponding division operation. For REM, the sign of a nonzero result equals the sign of the dividend. For both signed and unsigned division, except in the case of overflow, it holds that . If both the quotient and remainder are required from the same division, the recommended code sequence is: DIV[U] rdq, rs1, rs2; REM[U] rdr, rs1, rs2 (rdq cannot be the same as rs1 or rs2). Microarchitectures can then fuse these into a single divide operation instead of performing two separate divides. DIVW and DIVUW are RV64 instructions that divide the lower 32 bits of rs1 by the lower 32 bits of rs2, treating them as signed and unsigned integers, placing the 32-bit quotient in rd, sign-extended to 64 bits. REMW and REMUW are RV64 instructions that provide the corresponding signed and unsigned remainder operations. Both REMW and REMUW always sign-extend the 32-bit result to 64 bits, including on a divide by zero. The semantics for division by zero and division overflow are summarized in Semantics for division by zero and division overflow. L is the width of the operation in bits: XLEN for DIV[U] and REM[U], or 32 for DIV[U]W and REM[U]W.. The quotient of division by zero has all bits set, and the remainder of division by zero equals the dividend. Signed division overflow occurs only when the most-negative integer is divided by . The quotient of a signed division with overflow is equal to the dividend, and the remainder is zero. Unsigned division overflow cannot occur. Table 1. Semantics for division by zero and division overflow. L is the width of the operation in bits: XLEN for DIV[U] and REM[U], or 32 for DIV[U]W and REM[U]W. Condition Dividend Divisor DIVU[W] REMU[W] DIV[W] REM[W] Division by zero Overflow (signed only) 0 - - 0 We considered raising exceptions on integer divide by zero, with these exceptions causing a trap in most execution environments. However, this would be the only arithmetic trap in the standard ISA (floating-point exceptions set flags and write default values, but do not cause traps) and would require language implementers to interact with the execution environment’s trap handlers for this case. Further, where language standards mandate that a divide-by-zero exception must cause an immediate control flow change, only a single branch instruction needs to be added to each divide operation, and this branch instruction can be inserted after the divide and should normally be very predictably not taken, adding little runtime overhead. The value of all bits set is returned for both unsigned and signed divide by zero to simplify the divider circuitry. The value of all 1s is both the natural value to return for unsigned divide, representing the largest unsigned number, and also the natural result for simple unsigned divider implementations. Signed division is often implemented using an unsigned division circuit and specifying the same overflow result simplifies the hardware. The Zmmul extension implements the multiplication subset of the M extension. It adds all of the instructions defined in Multiplication Operations, namely: MUL, MULH, MULHU, MULHSU, and (for RV64 only) MULW. The encodings are identical to those of the corresponding M-extension instructions. M implies Zmmul. The Zmmul extension enables low-cost implementations that require multiplication operations but not division. For many microcontroller applications, division operations are too infrequent to justify the cost of divider hardware. By contrast, multiplication operations are more frequent, making the cost of multiplier hardware more justifiable. Simple FPGA soft cores particularly benefit from eliminating division but retaining multiplication, since many FPGAs provide hardwired multipliers but require dividers be implemented in soft logic.","title":"M Extension for Integer Multiplication and Division, Version 2.0","component":"isa","version":"v20250508","name":"m-st-ext","url":"/isa/unpriv/m-st-ext.html","titles":[{"text":"Multiplication Operations","hash":"multiplication-operations","id":1},{"text":"Division Operations","hash":"division-operations","id":2},{"text":"Zmmul Extension, Version 1.0","hash":"zmmul-extension-version-1-0","id":3}]},"40":{"id":40,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Appendix A: RVWMO Explanatory Material, Version 0.1 This section provides more explanation for RVWMO [memorymodel], using more informal language and concrete examples. These are intended to clarify the meaning and intent of the axioms and preserved program order rules. This appendix should be treated as commentary; all normative material is provided in [memorymodel] and in the rest of the main body of the ISA specification. All currently known discrepancies are listed in Known Issues. Any other discrepancies are unintentional. Memory consistency models fall along a loose spectrum from weak to strong. Weak memory models allow more hardware implementation flexibility and deliver arguably better performance, performance per watt, power, scalability, and hardware verification overheads than strong models, at the expense of a more complex programming model. Strong models provide simpler programming models, but at the cost of imposing more restrictions on the kinds of (non-speculative) hardware optimizations that can be performed in the pipeline and in the memory system, and in turn imposing some cost in terms of power, area overhead, and verification burden. RISC-V has chosen the RVWMO memory model, a variant of release consistency. This places it in between the two extremes of the memory model spectrum. The RVWMO memory model enables architects to build simple implementations, aggressive implementations, implementations embedded deeply inside a much larger system and subject to complex memory system interactions, or any number of other possibilities, all while simultaneously being strong enough to support programming language memory models at high performance. To facilitate the porting of code from other architectures, some hardware implementations may choose to implement the Ztso extension, which provides stricter RVTSO ordering semantics by default. Code written for RVWMO is automatically and inherently compatible with RVTSO, but code written assuming RVTSO is not guaranteed to run correctly on RVWMO implementations. In fact, most RVWMO implementations will (and should) simply refuse to run RVTSO-only binaries. Each implementation must therefore choose whether to prioritize compatibility with RVTSO code (e.g., to facilitate porting from x86) or whether to instead prioritize compatibility with other RISC-V cores implementing RVWMO. Some fences and/or memory ordering annotations in code written for RVWMO may become redundant under RVTSO; the cost that the default of RVWMO imposes on Ztso implementations is the incremental overhead of fetching those fences (e.g., FENCE R,RW and FENCE RW,W) which become no-ops on that implementation. However, these fences must remain present in the code if compatibility with non-Ztso implementations is desired. The explanations in this chapter make use of litmus tests, or small programs designed to test or highlight one particular aspect of a memory model. Litmus sample shows an example of a litmus test with two harts. As a convention for this figure and for all figures that follow in this chapter, we assume that s0-s2 are pre-set to the same value in all harts and that s0 holds the address labeled x, s1 holds y, and s2 holds z, where x, y, and z are disjoint memory locations aligned to 8 byte boundaries. All other registers and all referenced memory locations are presumed to be initialized to zero. Each figure shows the litmus test code on the left, and a visualization of one particular valid or invalid execution on the right. Table 1. A sample litmus test and one forbidden execution (a0=1). Hart 0 Hart 1 ⋮ ⋮ li t1,1 li t4,4 (a) sw t1,0(s0) (e) sw t4,0(s0) ⋮ ⋮ li t2,2 (b) sw t2,0(s0) ⋮ ⋮ (c) lw a0,0(s0) ⋮ ⋮ li t3,3 li t5,5 (d) sw t3,0(s0) (f) sw t5,0(s0) ⋮ ⋮ Litmus tests are used to understand the implications of the memory model in specific concrete situations. For example, in the litmus test of Litmus sample, the final value of a0 in the first hart can be either 2, 4, or 5, depending on the dynamic interleaving of the instruction stream from each hart at runtime. However, in this example, the final value of a0 in Hart 0 will never be 1 or 3; intuitively, the value 1 will no longer be visible at the time the load executes, and the value 3 will not yet be visible by the time the load executes. We analyze this test and many others below. Table 2. A key for the litmus test diagrams drawn in this appendix Edge Full Name (and explanation) rf Reads From (from each store to the loads that return a value written by that store) co Coherence (a total order on the stores to each address) fr From-Reads (from each load to co-successors of the store from which the load returned a value) ppo Preserved Program Order fence Orderings enforced by a FENCE instruction addr Address Dependency ctrl Control Dependency data Data Dependency The diagram shown to the right of each litmus test shows a visual representation of the particular execution candidate being considered. These diagrams use a notation that is common in the memory model literature for constraining the set of possible global memory orders that could produce the execution in question. It is also the basis for the herd models presented in [sec:herd]. This notation is explained in A key for the litmus test diagrams drawn in this appendix. Of the listed relations, rf edges between harts, co edges, fr edges, and ppo edges directly constrain the global memory order (as do fence, addr, data, and some ctrl edges, via ppo). Other edges (such as intra-hart rf edges) are informative but do not constrain the global memory order. For example, in Litmus sample, a0=1 could occur only if one of the following were true: (b) appears before (a) in global memory order (and in the coherence order co). However, this violates RVWMO PPO rule ppo:→st. The co edge from (b) to (a) highlights this contradiction. (a) appears before (b) in global memory order (and in the coherence order co). However, in this case, the Load Value Axiom would be violated, because (a) is not the latest matching store prior to (c) in program order. The fr edge from (c) to (b) highlights this contradiction. Since neither of these scenarios satisfies the RVWMO axioms, the outcome a0=1 is forbidden. Beyond what is described in this appendix, a suite of more than seven thousand litmus tests is available at https://github.com/litmus-tests/litmus-tests-riscv. The litmus tests repository also provides instructions on how to run the litmus tests on RISC-V hardware and how to compare the results with the operational and axiomatic models. In the future, we expect to adapt these memory model litmus tests for use as part of the RISC-V compliance test suite as well. In this section, we provide explanation and examples for all of the RVWMO rules and axioms. Preserved program order represents the subset of program order that must be respected within the global memory order. Conceptually, events from the same hart that are ordered by preserved program order must appear in that order from the perspective of other harts and/or observers. Events from the same hart that are not ordered by preserved program order, on the other hand, may appear reordered from the perspective of other harts and/or observers. Informally, the global memory order represents the order in which loads and stores perform. The formal memory model literature has moved away from specifications built around the concept of performing, but the idea is still useful for building up informal intuition. A load is said to have performed when its return value is determined. A store is said to have performed not when it has executed inside the pipeline, but rather only when its value has been propagated to globally visible memory. In this sense, the global memory order also represents the contribution of the coherence protocol and/or the rest of the memory system to interleave the (possibly reordered) memory accesses being issued by each hart into a single total order agreed upon by all harts. The order in which loads perform does not always directly correspond to the relative age of the values those two loads return. In particular, a load b may perform before another load a to the same address (i.e., b may execute before a, and b may appear before a in the global memory order), but a may nevertheless return an older value than b. This discrepancy captures (among other things) the reordering effects of buffering placed between the core and memory. For example, b may have returned a value from a store in the store buffer, while a may have ignored that younger store and read an older value from memory instead. To account for this, at the time each load performs, the value it returns is determined by the load value axiom, not just strictly by determining the most recent store to the same address in the global memory order, as described below. [ax-load]: Each byte of each load i returns the value written to that byte by the store that is the latest in global memory order among the following stores: Stores that write that byte and that precede i in the global memory order Stores that write that byte and that precede i in program order Preserved program order is not required to respect the ordering of a store followed by a load to an overlapping address. This complexity arises due to the ubiquity of store buffers in nearly all implementations. Informally, the load may perform (return a value) by forwarding from the store while the store is still in the store buffer, and hence before the store itself performs (writes back to globally visible memory). Any other hart will therefore observe the load as performing before the store. Consider the A store buffer forwarding litmus test (outcome permitted). When running this program on an implementation with store buffers, it is possible to arrive at the final outcome a0=1, a1=0, a2=1, a3=0 as follows: Table 3. A store buffer forwarding litmus test (outcome permitted) Hart 0 Hart 1 li t1, 1 li t1, 1 (a) sw t1,0(s0) (e) sw t1,0(s1) (b) lw a0,0(s0) (f) lw a2,0(s1) (c) fence r,r (g) fence r,r (d) lw a1,0(s1) (h) lw a3,0(s0) Outcome: a0=1, a1=0, a2=1, a3=0 (a) executes and enters the first hart’s private store buffer (b) executes and forwards its return value 1 from (a) in the store buffer (c) executes since all previous loads (i.e., (b)) have completed (d) executes and reads the value 0 from memory (e) executes and enters the second hart’s private store buffer (f) executes and forwards its return value 1 from (e) in the store buffer (g) executes since all previous loads (i.e., (f)) have completed (h) executes and reads the value 0 from memory (a) drains from the first hart’s store buffer to memory (e) drains from the second hart’s store buffer to memory Therefore, the memory model must be able to account for this behavior. To put it another way, suppose the definition of preserved program order did include the following hypothetical rule: memory access a precedes memory access b in preserved program order (and hence also in the global memory order) if a precedes b in program order and a and b are accesses to the same memory location, a is a write, and b is a read. Call this \"Rule X\". Then we get the following: (a) precedes (b): by rule X (b) precedes (d): by rule 4 (d) precedes (e): by the load value axiom. Otherwise, if (e) preceded (d), then (d) would be required to return the value 1. (This is a perfectly legal execution; it’s just not the one in question) (e) precedes (f): by rule X (f) precedes (h): by rule 4 (h) precedes (a): by the load value axiom, as above. The global memory order must be a total order and cannot be cyclic, because a cycle would imply that every event in the cycle happens before itself, which is impossible. Therefore, the execution proposed above would be forbidden, and hence the addition of rule X would forbid implementations with store buffer forwarding, which would clearly be undesirable. Nevertheless, even if (b) precedes (a) and/or (f) precedes (e) in the global memory order, the only sensible possibility in this example is for (b) to return the value written by (a), and likewise for (f) and (e). This combination of circumstances is what leads to the second option in the definition of the load value axiom. Even though (b) precedes (a) in the global memory order, (a) will still be visible to (b) by virtue of sitting in the store buffer at the time (b) executes. Therefore, even if (b) precedes (a) in the global memory order, (b) should return the value written by (a) because (a) precedes (b) in program order. Likewise for (e) and (f). Table 4. The \"PPOCA\" store buffer forwarding litmus test (outcome permitted) Hart 0 Hart 1 li t1, 1 li t1, 1 (a) sw t1,0(s0) LOOP: (b) fence w,w (d) lw a0,0(s1) (c) sw t1,0(s1) beqz a0, LOOP (e) sw t1,0(s2) (f) lw a1,0(s2) xor a2,a1,a1 add s0,s0,a2 (g) lw a2,0(s0) Outcome: a0=1, a1=1, a2=0 Another test that highlights the behavior of store buffers is shown in The \"PPOCA\" store buffer forwarding litmus test (outcome permitted). In this example, (d) is ordered before (e) because of the control dependency, and (f) is ordered before (g) because of the address dependency. However, (e) is not necessarily ordered before (f), even though (f) returns the value written by (e). This could correspond to the following sequence of events: (e) executes speculatively and enters the second hart’s private store buffer (but does not drain to memory) (f) executes speculatively and forwards its return value 1 from (e) in the store buffer (g) executes speculatively and reads the value 0 from memory (a) executes, enters the first hart’s private store buffer, and drains to memory (b) executes and retires (c) executes, enters the first hart’s private store buffer, and drains to memory (d) executes and reads the value 1 from memory (e), (f), and (g) commit, since the speculation turned out to be correct (e) drains from the store buffer to memory Atomicity Axiom (for Aligned Atomics): If r and w are paired load and store operations generated by aligned LR and SC instructions in a hart h, s is a store to byte x, and r returns a value written by s, then s must precede w in the global memory order, and there can be no store from a hart other than h to byte x following s and preceding w in the global memory order. The RISC-V architecture decouples the notion of atomicity from the notion of ordering. Unlike architectures such as TSO, RISC-V atomics under RVWMO do not impose any ordering requirements by default. Ordering semantics are only guaranteed by the PPO rules that otherwise apply. RISC-V contains two types of atomics: AMOs and LR/SC pairs. These conceptually behave differently, in the following way. LR/SC behave as if the old value is brought up to the core, modified, and written back to memory, all while a reservation is held on that memory location. AMOs on the other hand conceptually behave as if they are performed directly in memory. AMOs are therefore inherently atomic, while LR/SC pairs are atomic in the slightly different sense that the memory location in question will not be modified by another hart during the time the original hart holds the reservation. (a) lr.d a0, 0(s0) (a) lr.d a0, 0(s0) (a) lr.w a0, 0(s0) (a) lr.w a0, 0(s0) (b) sd t1, 0(s0) (b) sw t1, 4(s0) (b) sw t1, 4(s0) (b) sw t1, 4(s0) (c) sc.d t3, t2, 0(s0) (c) sc.d t3, t2, 0(s0) (c) sc.w t3, t2, 0(s0) (c) addi s0, s0, 8 (d) sc.w t3, t2, 0(s0) Figure 4: In all four (independent) instances, the final store-conditional instruction is permitted but not guaranteed to succeed. The atomicity axiom forbids stores from other harts from being interleaved in global memory order between an LR and the SC paired with that LR. The atomicity axiom does not forbid loads from being interleaved between the paired operations in program order or in the global memory order, nor does it forbid stores from the same hart or stores to non-overlapping locations from appearing between the paired operations in either program order or in the global memory order. For example, the SC instructions in [litmus_lrsdsc] may (but are not guaranteed to) succeed. None of those successes would violate the atomicity axiom, because the intervening non-conditional stores are from the same hart as the paired load-reserved and store-conditional instructions. This way, a memory system that tracks memory accesses at cache line granularity (and which therefore will see the four snippets of [litmus_lrsdsc] as identical) will not be forced to fail a store-conditional instruction that happens to (falsely) share another portion of the same cache line as the memory location being held by the reservation. The atomicity axiom also technically supports cases in which the LR and SC touch different addresses and/or use different access sizes; however, use cases for such behaviors are expected to be rare in practice. Likewise, scenarios in which stores from the same hart between an LR/SC pair actually overlap the memory location(s) referenced by the LR or SC are expected to be rare compared to scenarios where the intervening store may simply fall onto the same cache line. Progress Axiom: No memory operation may be preceded in the global memory order by an infinite sequence of other memory operations. The progress axiom ensures a minimal forward progress guarantee. It ensures that stores from one hart will eventually be made visible to other harts in the system in a finite amount of time, and that loads from other harts will eventually be able to read those values (or successors thereof). Without this rule, it would be legal, for example, for a spinlock to spin infinitely on a value, even with a store from another hart waiting to unlock the spinlock. The progress axiom is intended not to impose any other notion of fairness, latency, or quality of service onto the harts in a RISC-V implementation. Any stronger notions of fairness are up to the rest of the ISA and/or up to the platform and/or device to define and implement. The forward progress axiom will in almost all cases be naturally satisfied by any standard cache coherence protocol. Implementations with non-coherent caches may have to provide some other mechanism to ensure the eventual visibility of all stores (or successors thereof) to all harts. Rule 1: b is a store, and a and b access overlapping memory addresses Rule 2: a and b are loads, x is a byte read by both a and b, there is no store to x between a and b in program order, and a and b return values for x written by different memory operations Rule 3: a is generated by an AMO or SC instruction, b is a load, and b returns a value written by a Same-address orderings where the latter is a store are straightforward: a load or store can never be reordered with a later store to an overlapping memory location. From a microarchitecture perspective, generally speaking, it is difficult or impossible to undo a speculatively reordered store if the speculation turns out to be invalid, so such behavior is simply disallowed by the model. Same-address orderings from a store to a later load, on the other hand, do not need to be enforced. As discussed in Load value axiom, this reflects the observable behavior of implementations that forward values from buffered stores to later loads. Same-address load-load ordering requirements are far more subtle. The basic requirement is that a younger load must not return a value that is older than a value returned by an older load in the same hart to the same address. This is often known as \"CoRR\" (Coherence for Read-Read pairs), or as part of a broader \"coherence\" or \"sequential consistency per location\" requirement. Some architectures in the past have relaxed same-address load-load ordering, but in hindsight this is generally considered to complicate the programming model too much, and so RVWMO requires CoRR ordering to be enforced. However, because the global memory order corresponds to the order in which loads perform rather than the ordering of the values being returned, capturing CoRR requirements in terms of the global memory order requires a bit of indirection. Table 5. Litmus test MP+fence.w.w+fre-rfi-addr (outcome permitted) Hart 0 Hart 1 li t1, 1 li t2, 2 (a) sw t1,0(s0) (d) lw a0,0(s1) (b) fence w, w (e) sw t2,0(s1) (c) sw t1,0(s1) (f) lw a1,0(s1) (g) xor t3,a1,a1 (h) add s0,s0,t3 (i) lw a2,0(s0) Outcome: a0=1, a1=2, a2=0 Consider the litmus test of Litmus test MP+fence.w.w+fre-rfi-addr (outcome permitted), which is one particular instance of the more general \"fri-rfi\" pattern. The term \"fri-rfi\" refers to the sequence (d), (e), (f): (d) \"from-reads\" (i.e., reads from an earlier write than) (e) which is the same hart, and (f) reads from (e) which is in the same hart. From a microarchitectural perspective, outcome a0=1, a1=2, a2=0 is legal (as are various other less subtle outcomes). Intuitively, the following would produce the outcome in question: (d) stalls (for whatever reason; perhaps it’s stalled waiting for some other preceding instruction) (e) executes and enters the store buffer (but does not yet drain to memory) (f) executes and forwards from (e) in the store buffer (g), (h), and (i) execute (a) executes and drains to memory, (b) executes, and (c) executes and drains to memory (d) unstalls and executes (e) drains from the store buffer to memory This corresponds to a global memory order of (f), (i), (a), (c), (d), (e). Note that even though (f) performs before (d), the value returned by (f) is newer than the value returned by (d). Therefore, this execution is legal and does not violate the CoRR requirements. Likewise, if two back-to-back loads return the values written by the same store, then they may also appear out-of-order in the global memory order without violating CoRR. Note that this is not the same as saying that the two loads return the same value, since two different stores may write the same value. Table 6. Litmus test RSW (outcome permitted) Hart 0 Hart 1 li t1, 1 (d) lw a0,0(s1) (a) sw t1,0(s0) (e) xor t2,a0,a0 (b) fence w, w (f) add s4,s2,t2 (c) sw t1,0(s1) (g) lw a1,0(s4) (h) lw a2,0(s2) (i) xor t3,a2,a2 (j) add s0,s0,t3 (k) lw a3,0(s0) Outcome: a0=1, a1=v, a2=v, a3=0 Consider the litmus test of Litmus test RSW (outcome permitted). The outcome a0=1, a1=v, a2=v, a3=0 (where v is some value written by another hart) can be observed by allowing (g) and (h) to be reordered. This might be done speculatively, and the speculation can be justified by the microarchitecture (e.g., by snooping for cache invalidations and finding none) because replaying (h) after (g) would return the value written by the same store anyway. Hence assuming a1 and a2 would end up with the same value written by the same store anyway, (g) and (h) can be legally reordered. The global memory order corresponding to this execution would be (h),(k),(a),(c),(d),(g). Executions of the test in Litmus test RSW (outcome permitted) in which a1 does not equal a2 do in fact require that (g) appears before (h) in the global memory order. Allowing (h) to appear before (g) in the global memory order would in that case result in a violation of CoRR, because then (h) would return an older value than that returned by (g). Therefore, rule 2 forbids this CoRR violation from occurring. As such, rule 2 strikes a careful balance between enforcing CoRR in all cases while simultaneously being weak enough to permit \"RSW\" and \"fri-rfi\" patterns that commonly appear in real microarchitectures. There is one more overlapping-address rule: rule 3 simply states that a value cannot be returned from an AMO or SC to a subsequent load until the AMO or SC has (in the case of the SC, successfully) performed globally. This follows somewhat naturally from the conceptual view that both AMOs and SC instructions are meant to be performed atomically in memory. However, notably, rule 3 states that hardware may not even non-speculatively forward the value being stored by an AMOSWAP to a subsequent load, even though for AMOSWAP that store value is not actually semantically dependent on the previous value in memory, as is the case for the other AMOs. The same holds true even when forwarding from SC store values that are not semantically dependent on the value returned by the paired LR. The three PPO rules above also apply when the memory accesses in question only overlap partially. This can occur, for example, when accesses of different sizes are used to access the same object. Note also that the base addresses of two overlapping memory operations need not necessarily be the same for two memory accesses to overlap. When misaligned memory accesses are being used, the overlapping-address PPO rules apply to each of the component memory accesses independently. Rule 4: There is a FENCE instruction that orders a before b By default, the FENCE instruction ensures that all memory accesses from instructions preceding the fence in program order (the \"predecessor set\") appear earlier in the global memory order than memory accesses from instructions appearing after the fence in program order (the \"successor set\"). However, fences can optionally further restrict the predecessor set and/or the successor set to a smaller set of memory accesses in order to provide some speedup. Specifically, fences have PR, PW, SR, and SW bits which restrict the predecessor and/or successor sets. The predecessor set includes loads (resp.stores) if and only if PR (resp.PW) is set. Similarly, the successor set includes loads (resp.stores) if and only if SR (resp.SW) is set. The FENCE encoding currently has nine non-trivial combinations of the four bits PR, PW, SR, and SW, plus one extra encoding FENCE.TSO which facilitates mapping of \"acquire+release\" or RVTSO semantics. The remaining seven combinations have empty predecessor and/or successor sets and hence are no-ops. Of the ten non-trivial options, only six are commonly used in practice: FENCE RW,RW FENCE.TSO FENCE RW,W FENCE R,RW FENCE R,R FENCE W,W FENCE instructions using any other combination of PR, PW, SR, and SW are reserved. We strongly recommend that programmers stick to these six. Other combinations may have unknown or unexpected interactions with the memory model. Finally, we note that since RISC-V uses a multi-copy atomic memory model, programmers can reason about fences bits in a thread-local manner. There is no complex notion of \"fence cumulativity\" as found in memory models that are not multi-copy atomic. Rule 5: a has an acquire annotation Rule 6: b has a release annotation Rule 7: a and b both have RCsc annotations Rule 8: a is paired with b An acquire operation, as would be used at the start of a critical section, requires all memory operations following the acquire in program order to also follow the acquire in the global memory order. This ensures, for example, that all loads and stores inside the critical section are up to date with respect to the synchronization variable being used to protect it. Acquire ordering can be enforced in one of two ways: with an acquire annotation, which enforces ordering with respect to just the synchronization variable itself, or with a FENCE R,RW, which enforces ordering with respect to all previous loads. A spinlock with atomics sd x1, (a1) # Arbitrary unrelated store ld x2, (a2) # Arbitrary unrelated load li t0, 1 # Initialize swap value. again: amoswap.w.aq t0, t0, (a0) # Attempt to acquire lock. bnez t0, again # Retry if held. # ... # Critical section. # ... amoswap.w.rl x0, x0, (a0) # Release lock by storing 0. sd x3, (a3) # Arbitrary unrelated store ld x4, (a4) # Arbitrary unrelated load Consider Example 1. Because this example uses aq, the loads and stores in the critical section are guaranteed to appear in the global memory order after the AMOSWAP used to acquire the lock. However, assuming a0, a1, and a2 point to different memory locations, the loads and stores in the critical section may or may not appear after the \"Arbitrary unrelated load\" at the beginning of the example in the global memory order. A spinlock with fences sd x1, (a1) # Arbitrary unrelated store ld x2, (a2) # Arbitrary unrelated load li t0, 1 # Initialize swap value. again: amoswap.w t0, t0, (a0) # Attempt to acquire lock. fence r, rw # Enforce \"acquire\" memory ordering bnez t0, again # Retry if held. # ... # Critical section. # ... fence rw, w # Enforce \"release\" memory ordering amoswap.w x0, x0, (a0) # Release lock by storing 0. sd x3, (a3) # Arbitrary unrelated store ld x4, (a4) # Arbitrary unrelated load Now, consider the alternative in Example 2. In this case, even though the AMOSWAP does not enforce ordering with an aq bit, the fence nevertheless enforces that the acquire AMOSWAP appears earlier in the global memory order than all loads and stores in the critical section. Note, however, that in this case, the fence also enforces additional orderings: it also requires that the \"Arbitrary unrelated load\" at the start of the program appears earlier in the global memory order than the loads and stores of the critical section. (This particular fence does not, however, enforce any ordering with respect to the \"Arbitrary unrelated store\" at the start of the snippet.) In this way, fence-enforced orderings are slightly coarser than orderings enforced by .aq. Release orderings work exactly the same as acquire orderings, just in the opposite direction. Release semantics require all loads and stores preceding the release operation in program order to also precede the release operation in the global memory order. This ensures, for example, that memory accesses in a critical section appear before the lock-releasing store in the global memory order. Just as for acquire semantics, release semantics can be enforced using release annotations or with a FENCE RW,W operation. Using the same examples, the ordering between the loads and stores in the critical section and the \"Arbitrary unrelated store\" at the end of the code snippet is enforced only by the FENCE RW,W in Example 2, not by the rl in Example 1. With RCpc annotations alone, store-release-to-load-acquire ordering is not enforced. This facilitates the porting of code written under the TSO and/or RCpc memory models. To enforce store-release-to-load-acquire ordering, the code must use store-release-RCsc and load-acquire-RCsc operations so that PPO rule 7 applies. RCpc alone is sufficient for many use cases in C/C but is insufficient for many other use cases in C/C, Java, and Linux, to name just a few examples; see Memory Porting for details. PPO rule 8 indicates that an SC must appear after its paired LR in the global memory order. This will follow naturally from the common use of LR/SC to perform an atomic read-modify-write operation due to the inherent data dependency. However, PPO rule 8 also applies even when the value being stored does not syntactically depend on the value returned by the paired LR. Lastly, we note that just as with fences, programmers need not worry about \"cumulativity\" when analyzing ordering annotations. Rule 9: b has a syntactic address dependency on a Rule 10: b has a syntactic data dependency on a Rule 11: b is a store, and b has a syntactic control dependency on a Dependencies from a load to a later memory operation in the same hart are respected by the RVWMO memory model. The Alpha memory model was notable for choosing not to enforce the ordering of such dependencies, but most modern hardware and software memory models consider allowing dependent instructions to be reordered too confusing and counterintuitive. Furthermore, modern code sometimes intentionally uses such dependencies as a particularly lightweight ordering enforcement mechanism. The terms in [mem-dependencies] work as follows. Instructions are said to carry dependencies from their source register(s) to their destination register(s) whenever the value written into each destination register is a function of the source register(s). For most instructions, this means that the destination register(s) carry a dependency from all source register(s). However, there are a few notable exceptions. In the case of memory instructions, the value written into the destination register ultimately comes from the memory system rather than from the source register(s) directly, and so this breaks the chain of dependencies carried from the source register(s). In the case of unconditional jumps, the value written into the destination register comes from the current pc (which is never considered a source register by the memory model), and so likewise, JALR (the only jump with a source register) does not carry a dependency from rs1 to rd. (c) has a syntactic dependency on both (a) and (b) via fflags, a destination register that both (a) and (b) implicitly accumulate into (a) fadd f3,f1,f2 (b) fadd f6,f4,f5 (c) csrrs a0,fflags,x0 The notion of accumulating into a destination register rather than writing into it reflects the behavior of CSRs such as fflags. In particular, an accumulation into a register does not clobber any previous writes or accumulations into the same register. For example, in (c) has a syntactic dependency on both (a) and (b) via fflags, a destination register that both (a) and (b) implicitly accumulate into, (c) has a syntactic dependency on both (a) and (b). Like other modern memory models, the RVWMO memory model uses syntactic rather than semantic dependencies. In other words, this definition depends on the identities of the registers being accessed by different instructions, not the actual contents of those registers. This means that an address, control, or data dependency must be enforced even if the calculation could seemingly be optimized away. This choice ensures that RVWMO remains compatible with code that uses these false syntactic dependencies as a lightweight ordering mechanism. A syntactic address dependency ld a1,0(s0) xor a2,a1,a1 add s1,s1,a2 ld a5,0(s1) For example, there is a syntactic address dependency from the memory operation generated by the first instruction to the memory operation generated by the last instruction in A syntactic address dependency, even though a1 XOR a1 is zero and hence has no effect on the address accessed by the second load. The benefit of using dependencies as a lightweight synchronization mechanism is that the ordering enforcement requirement is limited only to the specific two instructions in question. Other non-dependent instructions may be freely reordered by aggressive implementations. One alternative would be to use a load-acquire, but this would enforce ordering for the first load with respect to all subsequent instructions. Another would be to use a FENCE R,R, but this would include all previous and all subsequent loads, making this option more expensive. A syntactic control dependency lw x1,0(x2) bne x1,x0,next sw x3,0(x4) next: sw x5,0(x6) Control dependencies behave differently from address and data dependencies in the sense that a control dependency always extends to all instructions following the original target in program order. Consider A syntactic control dependency the instruction at next will always execute, but the memory operation generated by that last instruction nevertheless still has a control dependency from the memory operation generated by the first instruction. Another syntactic control dependency lw x1,0(x2) bne x1,x0,next next: sw x3,0(x4) Likewise, consider Another syntactic control dependency. Even though both branch outcomes have the same target, there is still a control dependency from the memory operation generated by the first instruction in this snippet to the memory operation generated by the last instruction. This definition of control dependency is subtly stronger than what might be seen in other contexts (e.g., C++), but it conforms with standard definitions of control dependencies in the literature. Notably, PPO rules 9-11 are also intentionally designed to respect dependencies that originate from the output of a successful store-conditional instruction. Typically, an SC instruction will be followed by a conditional branch checking whether the outcome was successful; this implies that there will be a control dependency from the store operation generated by the SC instruction to any memory operations following the branch. PPO rule 11 in turn implies that any subsequent store operations will appear later in the global memory order than the store operation generated by the SC. However, since control, address, and data dependencies are defined over memory operations, and since an unsuccessful SC does not generate a memory operation, no order is enforced between unsuccessful SC and its dependent instructions. Moreover, since SC is defined to carry dependencies from its source registers to rd only when the SC is successful, an unsuccessful SC has no effect on the global memory order. Table 7. A variant of the LB litmus test (outcome forbidden) Initial values: 0(s0)=1; 0(s2)=1 Hart 0 Hart 1 (a) ld a0,0(s0) (e) ld a3,0(s2) (b) lr a1,0(s1) (f) sd a3,0(s0) (c) sc a2,a0,0(s1) (d) sd a2,0(s2) Outcome: a0=0, a3=0 In addition, the choice to respect dependencies originating at store-conditional instructions ensures that certain out-of-thin-air-like behaviors will be prevented. Consider A variant of the LB litmus test (outcome forbidden). Suppose a hypothetical implementation could occasionally make some early guarantee that a store-conditional operation will succeed. In this case, (c) could return 0 to a2 early (before actually executing), allowing the sequence (d), (e), (f), (a), and then (b) to execute, and then (c) might execute (successfully) only at that point. This would imply that (c) writes its own success value to 0(s1)! Fortunately, this situation and others like it are prevented by the fact that RVWMO respects dependencies originating at the stores generated by successful SC instructions. We also note that syntactic dependencies between instructions only have any force when they take the form of a syntactic address, control, and/or data dependency. For example: a syntactic dependency between two F instructions via one of the accumulating CSRs in [source-dest-regs] does not imply that the two F instructions must be executed in order. Such a dependency would only serve to ultimately set up later a dependency from both F instructions to a later CSR instruction accessing the CSR flag in question. Rule 12: b is a load, and there exists some store m between a and b in program order such that m has an address or data dependency on a, and b returns a value written by m Rule 13: b is a store, and there exists some instruction m between a and b in program order such that m has an address dependency on a Table 8. Because of PPO rule 12 and the data dependency from (d) to (e), (d) must also precede (f) in the global memory order (outcome forbidden) Hart 0 Hart 1 li t1, 1 (d) lw a0, 0(s1) (a) sw t1,0(s0) (e) sw a0, 0(s2) (b) fence w, w (f) lw a1, 0(s2) (c) sw t1,0(s1) xor a2,a1,a1 add s0,s0,a2 (g) lw a3,0(s0) Outcome: a0=1, a3=0 PPO rules 12 and 13 reflect behaviors of almost all real processor pipeline implementations. Rule 12 states that a load cannot forward from a store until the address and data for that store are known. Consider Because of PPO rule 12 and the data dependency from (d) to (e), (d) must also precede (f) in the global memory order (outcome forbidden) (f) cannot be executed until the data for (e) has been resolved, because (f) must return the value written by (e) (or by something even later in the global memory order), and the old value must not be clobbered by the writeback of (e) before (d) has had a chance to perform. Therefore, (f) will never perform before (d) has performed. Table 9. Because of the extra store between (e) and (g), (d) no longer necessarily precedes (g) (outcome permitted) Hart 0 Hart 1 li t1, 1 li t1, 1 (a) sw t1,0(s0) (d) lw a0, 0(s1) (b) fence w, w (e) sw a0, 0(s2) (c) sw t1,0(s1) (f) sw t1, 0(s2) (g) lw a1, 0(s2) xor a2,a1,a1 add s0,s0,a2 (h) lw a3,0(s0) Outcome: a0=1, a3=0 If there were another store to the same address in between (e) and (f), as in Because of the address dependency from (d) to (e), (d) also precedes (f) (outcome forbidden), then (f) would no longer be dependent on the data of (e) being resolved, and hence the dependency of (f) on (d), which produces the data for (e), would be broken. Rule13 makes a similar observation to the previous rule: a store cannot be performed at memory until all previous loads that might access the same address have themselves been performed. Such a load must appear to execute before the store, but it cannot do so if the store were to overwrite the value in memory before the load had a chance to read the old value. Likewise, a store generally cannot be performed until it is known that preceding instructions will not cause an exception due to failed address resolution, and in this sense, rule 13 can be seen as somewhat of a special case of rule 11. Table 10. Because of the address dependency from (d) to (e), (d) also precedes (f) (outcome forbidden) Hart 0 Hart 1 li t1, 1 (a) lw a0,0(s0) (d) lw a1, 0(s1) (b) fence rw,rw (e) lw a2, 0(a1) (c) sw s2,0(s1) (f) sw t1, 0(s0) Outcome: a0=1, a1=t Consider Because of the address dependency from (d) to (e), (d) also precedes (f) (outcome forbidden) (f) cannot be executed until the address for (e) is resolved, because it may turn out that the addresses match; i.e., that a1=s0. Therefore, (f) cannot be sent to memory before (d) has executed and confirmed whether the addresses do indeed overlap. RVWMO does not currently attempt to formally describe how FENCE.I, SFENCE.VMA, I/O fences, and PMAs behave. All of these behaviors will be described by future formalizations. In the meantime, the behavior of FENCE.I is described in [zifencei], the behavior of SFENCE.VMA is described in the RISC-V Instruction Set Privileged Architecture Manual, and the behavior of I/O fences and the effects of PMAs are described below. The RISC-V Privileged ISA defines Physical Memory Attributes (PMAs) which specify, among other things, whether portions of the address space are coherent and/or cacheable. See the RISC-V Privileged ISA Specification for the complete details. Here, we simply discuss how the various details in each PMA relate to the memory model: Main memory vs.I/O, and I/O memory ordering PMAs: the memory model as defined applies to main memory regions. I/O ordering is discussed below. Supported access types and atomicity PMAs: the memory model is simply applied on top of whatever primitives each region supports. Cacheability PMAs: the cacheability PMAs in general do not affect the memory model. Non-cacheable regions may have more restrictive behavior than cacheable regions, but the set of allowed behaviors does not change regardless. However, some platform-specific and/or device-specific cacheability settings may differ. Coherence PMAs: The memory consistency model for memory regions marked as non-coherent in PMAs is currently platform-specific and/or device-specific: the load-value axiom, the atomicity axiom, and the progress axiom all may be violated with non-coherent memory. Note however that coherent memory does not require a hardware cache coherence protocol. The RISC-V Privileged ISA Specification suggests that hardware-incoherent regions of main memory are discouraged, but the memory model is compatible with hardware coherence, software coherence, implicit coherence due to read-only memory, implicit coherence due to only one agent having access, or otherwise. Idempotency PMAs: Idempotency PMAs are used to specify memory regions for which loads and/or stores may have side effects, and this in turn is used by the microarchitecture to determine, e.g., whether prefetches are legal. This distinction does not affect the memory model. For I/O, the load value axiom and atomicity axiom in general do not apply, as both reads and writes might have device-specific side effects and may return values other than the value \"written\" by the most recent store to the same address. Nevertheless, the following preserved program order rules still generally apply for accesses to I/O memory: memory access a precedes memory access b in global memory order if a precedes b in program order and one or more of the following holds: a precedes b in preserved program order as defined in [memorymodel], with the exception that acquire and release ordering annotations apply only from one memory operation to another memory operation and from one I/O operation to another I/O operation, but not from a memory operation to an I/O nor vice versa a and b are accesses to overlapping addresses in an I/O region a and b are accesses to the same strongly ordered I/O region a and b are accesses to I/O regions, and the channel associated with the I/O region accessed by either a or b is channel 1 a and b are accesses to I/O regions associated with the same channel (except for channel 0) Note that the FENCE instruction distinguishes between main memory operations and I/O operations in its predecessor and successor sets. To enforce ordering between I/O operations and main memory operations, code must use a FENCE with PI, PO, SI, and/or SO, plus PR, PW, SR, and/or SW. For example, to enforce ordering between a write to main memory and an I/O write to a device register, a FENCE W,O or stronger is needed. Ordering memory and I/O accesses sd t0, 0(a0) fence w,o sd a0, 0(a1) When a fence is in fact used, implementations must assume that the device may attempt to access memory immediately after receiving the MMIO signal, and subsequent memory accesses from that device to memory must observe the effects of all accesses ordered prior to that MMIO operation. In other words, in Ordering memory and I/O accesses, suppose 0(a0) is in main memory and 0(a1) is the address of a device register in I/O memory. If the device accesses 0(a0) upon receiving the MMIO write, then that load must conceptually appear after the first store to 0(a0) according to the rules of the RVWMO memory model. In some implementations, the only way to ensure this will be to require that the first store does in fact complete before the MMIO write is issued. Other implementations may find ways to be more aggressive, while others still may not need to do anything different at all for I/O and main memory accesses. Nevertheless, the RVWMO memory model does not distinguish between these options; it simply provides an implementation-agnostic mechanism to specify the orderings that must be enforced. Many architectures include separate notions of \"ordering\" and `completion\" fences, especially as it relates to I/O (as opposed to regular main memory). Ordering fences simply ensure that memory operations stay in order, while completion fences ensure that predecessor accesses have all completed before any successors are made visible. RISC-V does not explicitly distinguish between ordering and completion fences. Instead, this distinction is simply inferred from different uses of the FENCE bits. For implementations that conform to the RISC-V Unix Platform Specification, I/O devices and DMA operations are required to access memory coherently and via strongly ordered I/O channels. Therefore, accesses to regular main memory regions that are concurrently accessed by external devices can also use the standard synchronization mechanisms. Implementations that do not conform to the Unix Platform Specification and/or in which devices do not access memory coherently will need to use mechanisms (which are currently platform-specific or device-specific) to enforce coherency. I/O regions in the address space should be considered non-cacheable regions in the PMAs for those regions. Such regions can be considered coherent by the PMA if they are not cached by any agent. The ordering guarantees in this section may not apply beyond a platform-specific boundary between the RISC-V cores and the device. In particular, I/O accesses sent across an external bus (e.g., PCIe) may be reordered before they reach their ultimate destination. Ordering must be enforced in such situations according to the platform-specific rules of those external devices and buses. Table 11. Mappings from TSO operations to RISC-V operations x86/TSO Operation RVWMO Mapping Load l{b|h|w|d}; fence r,rw Store fence rw,w; s{b|h|w|d} Atomic RMW amo<op>.{w|d}.aqrl OR loop:lr.{w|d}.aq; <op>; sc.{w|d}.aqrl; bnez loop Fence fence rw,rw Mappings from TSO operations to RISC-V operations provides a mapping from TSO memory operations onto RISC-V memory instructions. Normal x86 loads and stores are all inherently acquire-RCpc and release-RCpc operations: TSO enforces all load-load, load-store, and store-store ordering by default. Therefore, under RVWMO, all TSO loads must be mapped onto a load followed by FENCE R,RW, and all TSO stores must be mapped onto FENCE RW,W followed by a store. TSO atomic read-modify-writes and x86 instructions using the LOCK prefix are fully ordered and can be implemented either via an AMO with both aq and rl set, or via an LR with aq set, the arithmetic operation in question, an SC with both aq and rl set, and a conditional branch checking the success condition. In the latter case, the rl annotation on the LR turns out (for non-obvious reasons) to be redundant and can be omitted. Alternatives to Mappings from TSO operations to RISC-V operations are also possible. A TSO store can be mapped onto AMOSWAP with rl set. However, since RVWMO PPO Rule 3 forbids forwarding of values from AMOs to subsequent loads, the use of AMOSWAP for stores may negatively affect performance. A TSO load can be mapped using LR with aq set: all such LR instructions will be unpaired, but that fact in and of itself does not preclude the use of LR for loads. However, again, this mapping may also negatively affect performance if it puts more pressure on the reservation mechanism than was originally intended. Table 12. Mappings from Power operations to RISC-V operations Power Operation RVWMO Mapping Load l{b|h|w|d} Load-Reserve lr.{w|d} Store s{b|h|w|d} Store-Conditional sc.{w|d} lwsync fence.tso sync fence rw,rw isync fence.i; fence r,r Mappings from Power operations to RISC-V operations provides a mapping from Power memory operations onto RISC-V memory instructions. Power ISYNC maps on RISC-V to a FENCE.I followed by a FENCE R,R; the latter fence is needed because ISYNC is used to define a \"control+control fence\" dependency that is not present in RVWMO. Table 13. Mappings from ARM operations to RISC-V operations ARM Operation RVWMO Mapping Load l{b|h|w|d} Load-Acquire fence rw, rw; l{b|h|w|d}; fence r,rw Load-Exclusive lr.{w|d} Load-Acquire-Exclusive lr.{w|d}.aqrl Store s{b|h|w|d} Store-Release fence rw,w; s{b|h|w|d} Store-Exclusive sc.{w|d} Store-Release-Exclusive sc.{w|d}.rl dmb fence rw,rw dmb.ld fence r,rw dmb.st fence w,w isb fence.i; fence r,r Mappings from ARM operations to RISC-V operations provides a mapping from ARM memory operations onto RISC-V memory instructions. Since RISC-V does not currently have plain load and store opcodes with aq or rl annotations, ARM load-acquire and store-release operations should be mapped using fences instead. Furthermore, in order to enforce store-release-to-load-acquire ordering, there must be a FENCE RW,RW between the store-release and load-acquire; Mappings from ARM operations to RISC-V operations enforces this by always placing the fence in front of each acquire operation. ARM load-exclusive and store-exclusive instructions can likewise map onto their RISC-V LR and SC equivalents, but instead of placing a FENCE RW,RW in front of an LR with aq set, we simply also set rl instead. ARM ISB maps on RISC-V to FENCE.I followed by FENCE R,R similarly to how ISYNC maps for Power. Table 14. Mappings from Linux memory primitives to RISC-V primitives. Linux Operation RVWMO Mapping smp_mb() fence rw,rw smp_rmb() fence r,r smp_wmb() fence w,w dma_rmb() fence r,r dma_wmb() fence w,w mb() fence iorw,iorw rmb() fence ri,ri wmb() fence wo,wo smp_load_acquire() l{b|h|w|d}; fence r,rw smp_store_release() fence.tso; s{b|h|w|d} Linux Construct RVWMO AMO Mapping atomic <op> relaxed amo <op>.{w|d} atomic <op> acquire amo <op>.{w|d}.aq atomic <op> release amo <op>.{w|d}.rl atomic <op> amo <op>.{w|d}.aqrl Linux Construct RVWMO LR/SC Mapping atomic <op> relaxed loop:lr.{w|d}; <op>; sc.{w|d}; bnez loop atomic <op> acquire loop:lr.{w|d}.aq; <op>; sc.{w|d}; bnez loop atomic <op> release loop:lr.{w|d}; <op>; sc.{w|d}.aqrl^*; bnez loop OR fence.tso; loop:lr.{w|d}; <op >; sc.{w|d}^*; bnez loop atomic <op> loop:lr.{w|d}.aq; <op>; sc.{w|d}.aqrl; bnez loop With regards to Mappings from Linux memory primitives to RISC-V primitives., other constructs (such as spinlocks) should follow accordingly. Platforms or devices with non-coherent DMA may need additional synchronization (such as cache flush or invalidate mechanisms); currently any such extra synchronization will be device-specific. Mappings from Linux memory primitives to RISC-V primitives. provides a mapping of Linux memory ordering macros onto RISC-V memory instructions. The Linux fences dma_rmb() and dma_wmb() map onto FENCE R,R and FENCE W,W, respectively, since the RISC-V Unix Platform requires coherent DMA, but would be mapped onto FENCE RI,RI and FENCE WO,WO, respectively, on a platform with non-coherent DMA. Platforms with non-coherent DMA may also require a mechanism by which cache lines can be flushed and/or invalidated. Such mechanisms will be device-specific and/or standardized in a future extension to the ISA. The Linux mappings for release operations may seem stronger than necessary, but these mappings are needed to cover some cases in which Linux requires stronger orderings than the more intuitive mappings would provide. In particular, as of the time this text is being written, Linux is actively debating whether to require load-load, load-store, and store-store orderings between accesses in one critical section and accesses in a subsequent critical section in the same hart and protected by the same synchronization object. Not all combinations of FENCE RW,W/FENCE R,RW mappings with aq/rl mappings combine to provide such orderings. There are a few ways around this problem, including: Always use FENCE RW,W/FENCE R,RW, and never use aq/rl. This suffices but is undesirable, as it defeats the purpose of the aq/rl modifiers. Always use aq/rl, and never use FENCE RW,W/FENCE R,RW. This does not currently work due to the lack of load and store opcodes with aq and rl modifiers. Strengthen the mappings of release operations such that they would enforce sufficient orderings in the presence of either type of acquire mapping. This is the currently recommended solution, and the one shown in Mappings from Linux memory primitives to RISC-V primitives.. RVWMO Mapping: (a) lw a0, 0(s0) (b) fence.tso // vs. fence rw,w (c) sd x0,0(s1) …​ loop: (d) amoswap.d.aq a1,t1,0(s1) bnez a1,loop (e) lw a2,0(s2) For example, the critical section ordering rule currently being debated by the Linux community would require (a) to be ordered before (e) in Orderings between critical sections in Linux. If that will indeed be required, then it would be insufficient for (b) to map as FENCE RW,W. That said, these mappings are subject to change as the Linux Kernel Memory Model evolves. Orderings between critical sections in Linux Linux Code: (a) int r0 = *x; (bc) spin_unlock(y, 0); .... .... (d) spin_lock(y); (e) int r1 = *z; RVWMO Mapping: (a) lw a0, 0(s0) (b) fence.tso // vs. fence rw,w (c) sd x0,0(s1) .... loop: (d) lr.d.aq a1,(s1) bnez a1,loop sc.d a1,t1,(s1) bnez a1,loop (e) lw a2,0(s2) Mappings from C/C++ primitives to RISC-V primitives. provides a mapping of C11/C++11 atomic operations onto RISC-V memory instructions. If load and store opcodes with aq and rl modifiers are introduced, then the mappings in Hypothetical mappings from C/C++ primitives to RISC-V primitives, if native load-acquire and store-release opcodes are introduced. will suffice. Note however that the two mappings only interoperate correctly if atomic_<op>(memory_order_seq_cst) is mapped using an LR that has both aq and rl set. Even more importantly, a Mappings from C/C++ primitives to RISC-V primitives. sequentially consistent store, followed by a Hypothetical mappings from C/C++ primitives to RISC-V primitives, if native load-acquire and store-release opcodes are introduced. sequentially consistent load can be reordered unless the Mappings from C/C++ primitives to RISC-V primitives. mapping of stores is strengthened by either adding a second fence or mapping the store to amoswap.rl instead. Table 15. Mappings from C/C++ primitives to RISC-V primitives. C/C++ Construct RVWMO Mapping Non-atomic load l{b|h|w|d} atomic_load(memory_order_relaxed) l{b|h|w|d} atomic_load(memory_order_acquire) l{b|h|w|d}; fence r,rw atomic_load(memory_order_seq_cst) fence rw,rw; l{b|h|w|d}; fence r,rw Non-atomic store s{b|h|w|d} atomic_store(memory_order_relaxed) s{b|h|w|d} atomic_store(memory_order_release) fence rw,w; s{b|h|w|d} atomic_store(memory_order_seq_cst) fence rw,w; s{b|h|w|d} atomic_thread_fence(memory_order_acquire) fence r,rw atomic_thread_fence(memory_order_release) fence rw,w atomic_thread_fence(memory_order_acq_rel) fence.tso atomic_thread_fence(memory_order_seq_cst) fence rw,rw C/C++ Construct RVWMO AMO Mapping atomic_<op>(memory_order_relaxed) amo<op>.{w|d} atomic_<op>(memory_order_acquire) amo<op>.{w|d}.aq atomic_<op>(memory_order_release) amo<op>.{w|d}.rl atomic_<op>(memory_order_acq_rel) amo<op>.{w|d}.aqrl atomic_<op>(memory_order_seq_cst) amo<op>.{w|d}.aqrl C/C++ Construct RVWMO LR/SC Mapping atomic_<op>(memory_order_relaxed) loop:lr.{w|d}; <op>; sc.{w|d}; bnez loop atomic_<op>(memory_order_acquire) loop:lr.{w|d}.aq; <op>; sc.{w|d}; bnez loop atomic_<op>(memory_order_release) loop:lr.{w|d}; <op>; sc.{w|d}.rl; bnez loop atomic_<op>(memory_order_acq_rel) loop:lr.{w|d}.aq; <op>; sc.{w|d}.rl; bnez loop atomic_<op>(memory_order_seq_cst) loop:lr.{w|d}.aqrl; <op>; sc.{w|d}.rl; bnez loop Table 16. Hypothetical mappings from C/C++ primitives to RISC-V primitives, if native load-acquire and store-release opcodes are introduced. C/C++ Construct RVWMO Mapping Non-atomic load l{b|h|w|d} atomic_load(memory_order_relaxed) l{b|h|w|d} atomic_load(memory_order_acquire) l{b|h|w|d}.aq atomic_load(memory_order_seq_cst) l{b|h|w|d}.aq Non-atomic store s{b|h|w|d} atomic_store(memory_order_relaxed) s{b|h|w|d} atomic_store(memory_order_release) s{b|h|w|d}.rl atomic_store(memory_order_seq_cst) s{b|h|w|d}.rl atomic_thread_fence(memory_order_acquire) fence r,rw atomic_thread_fence(memory_order_release) fence rw,w atomic_thread_fence(memory_order_acq_rel) fence.tso atomic_thread_fence(memory_order_seq_cst) fence rw,rw C/C++ Construct RVWMO AMO Mapping atomic_<op>(memory_order_relaxed) amo<op>.{w|d} atomic_<op>(memory_order_acquire) amo<op>.{w|d}.aq atomic_<op>(memory_order_release) amo<op>.{w|d}.rl atomic_<op>(memory_order_acq_rel) amo<op>.{w|d}.aqrl atomic_<op>(memory_order_seq_cst) amo<op>.{w|d}.aqrl C/C++ Construct RVWMO LR/SC Mapping atomic_<op>(memory_order_relaxed) lr.{w|d}; <op>; sc.{w|d} atomic_<op>(memory_order_acquire) lr.{w|d}.aq; <op>; sc.{w|d} atomic_<op>(memory_order_release) lr.{w|d}; <op>; sc.{w|d}.rl atomic_<op>(memory_order_acq_rel) lr.{w|d}.aq; <op>; sc.{w|d}.rl atomic_<op>(memory_order_seq_cst) lr.{w|d}.aq* <op>; sc.{w|d}.rl * must be lr.{w|d}.aqrl in order to interoperate with code mapped per Mappings from C/C++ primitives to RISC-V primitives. Any AMO can be emulated by an LR/SC pair, but care must be taken to ensure that any PPO orderings that originate from the LR are also made to originate from the SC, and that any PPO orderings that terminate at the SC are also made to terminate at the LR. For example, the LR must also be made to respect any data dependencies that the AMO has, given that load operations do not otherwise have any notion of a data dependency. Likewise, the effect a FENCE R,R elsewhere in the same hart must also be made to apply to the SC, which would not otherwise respect that fence. The emulator may achieve this effect by simply mapping AMOs onto lr.aq; <op>; sc.aqrl, matching the mapping used elsewhere for fully ordered atomics. These C11/C++11 mappings require the platform to provide the following Physical Memory Attributes (as defined in the RISC-V Privileged ISA) for all memory: main memory coherent AMOArithmetic RsrvEventual Platforms with different attributes may require different mappings, or require platform-specific SW (e.g., memory-mapped I/O). The RVWMO and RVTSO memory models by no means preclude microarchitectures from employing sophisticated speculation techniques or other forms of optimization in order to deliver higher performance. The models also do not impose any requirement to use any one particular cache hierarchy, nor even to use a cache coherence protocol at all. Instead, these models only specify the behaviors that can be exposed to software. Microarchitectures are free to use any pipeline design, any coherent or non-coherent cache hierarchy, any on-chip interconnect, etc., as long as the design only admits executions that satisfy the memory model rules. That said, to help people understand the actual implementations of the memory model, in this section we provide some guidelines on how architects and programmers should interpret the models' rules. Both RVWMO and RVTSO are multi-copy atomic (or other-multi-copy-atomic): any store value that is visible to a hart other than the one that originally issued it must also be conceptually visible to all other harts in the system. In other words, harts may forward from their own previous stores before those stores have become globally visible to all harts, but no early inter-hart forwarding is permitted. Multi-copy atomicity may be enforced in a number of ways. It might hold inherently due to the physical design of the caches and store buffers, it may be enforced via a single-writer/multiple-reader cache coherence protocol, or it might hold due to some other mechanism. Although multi-copy atomicity does impose some restrictions on the microarchitecture, it is one of the key properties keeping the memory model from becoming extremely complicated. For example, a hart may not legally forward a value from a neighbor hart’s private store buffer (unless of course it is done in such a way that no new illegal behaviors become architecturally visible). Nor may a cache coherence protocol forward a value from one hart to another until the coherence protocol has invalidated all older copies from other caches. Of course, microarchitectures may (and high-performance implementations likely will) violate these rules under the covers through speculation or other optimizations, as long as any non-compliant behaviors are not exposed to the programmer. As a rough guideline for interpreting the PPO rules in RVWMO, we expect the following from the software perspective: programmers will use PPO rules 1 and 4-8 regularly and actively. expert programmers will use PPO rules 9-11 to speed up critical paths of important data structures. even expert programmers will rarely if ever use PPO rules 2-3 and 12-13 directly. These are included to facilitate common microarchitectural optimizations (rule 2) and the operational formal modeling approach (rules 3 and 12-13) described in [operational]. They also facilitate the process of porting code from other architectures that have similar rules. We also expect the following from the hardware perspective: PPO rules 1 and 3-6 reflect well-understood rules that should pose few surprises to architects. PPO rule 2 reflects a natural and common hardware optimization, but one that is very subtle and hence is worth double checking carefully. PPO rule 7 may not be immediately obvious to architects, but it is a standard memory model requirement The load value axiom, the atomicity axiom, and PPO rules 8-13 reflect rules that most hardware implementations will enforce naturally, unless they contain extreme optimizations. Of course, implementations should make sure to double check these rules nevertheless. Hardware must also ensure that syntactic dependencies are not optimized away. Architectures are free to implement any of the memory model rules as conservatively as they choose. For example, a hardware implementation may choose to do any or all of the following: interpret all fences as if they were FENCE RW,RW (or FENCE IORW,IORW, if I/O is involved), regardless of the bits actually set implement all fences with PW and SR as if they were FENCE RW,RW (or FENCE IORW,IORW, if I/O is involved), as PW with SR is the most expensive of the four possible main memory ordering components anyway emulate aq and rl as described in Code Porting and Mapping Guidelines enforcing all same-address load-load ordering, even in the presence of patterns such as fri-rfi and RSW forbid any forwarding of a value from a store in the store buffer to a subsequent AMO or LR to the same address forbid any forwarding of a value from an AMO or SC in the store buffer to a subsequent load to the same address implement TSO on all memory accesses, and ignore any main memory fences that do not include PW and SR ordering (e.g., as Ztso implementations will do) implement all atomics to be RCsc or even fully ordered, regardless of annotation Architectures that implement RVTSO can safely do the following: Ignore all fences that do not have both PW and SR (unless the fence also orders I/O) Ignore all PPO rules except for rules 4 through 7, since the rest are redundant with other PPO rules under RVTSO assumptions Other general notes: Silent stores (i.e., stores that write the same value that already exists at a memory location) behave like any other store from a memory model point of view. Likewise, AMOs which do not actually change the value in memory (e.g., an AMOMAX for which the value in rs2 is smaller than the value currently in memory) are still semantically considered store operations. Microarchitectures that attempt to implement silent stores must take care to ensure that the memory model is still obeyed, particularly in cases such as RSW Overlapping-Address Orderings (Rules 1-3) which tend to be incompatible with silent stores. Writes may be merged (i.e., two consecutive writes to the same address may be merged) or subsumed (i.e., the earlier of two back-to-back writes to the same address may be elided) as long as the resulting behavior does not otherwise violate the memory model semantics. The question of write subsumption can be understood from the following example: Table 17. Write subsumption litmus test, allowed execution Hart 0 Hart 1 li t1, 3 li t3, 2 li t2, 1 (a) sw t1,0(s0) (d) lw a0,0(s1) (b) fence w, w (e) sw a0,0(s0) (c) sw t2,0(s1) (f) sw t3,0(s0) As written, if the load (d) reads value 1, then (a) must precede (f) in the global memory order: (a) precedes (c) in the global memory order because of rule 4 (c) precedes (d) in the global memory order because of the Load Value axiom (d) precedes (e) in the global memory order because of rule 10 (e) precedes (f) in the global memory order because of rule 1 In other words the final value of the memory location whose address is in s0 must be 2 (the value written by the store (f)) and cannot be 3 (the value written by the store (a)). A very aggressive microarchitecture might erroneously decide to discard (e), as (f) supersedes it, and this may in turn lead the microarchitecture to break the now-eliminated dependency between (d) and (f) (and hence also between (a) and (f)). This would violate the memory model rules, and hence it is forbidden. Write subsumption may in other cases be legal, if for example there were no data dependency between (d) and (e). We expect that any or all of the following possible future extensions would be compatible with the RVWMO memory model: \"V\" vector ISA extensions \"J\" JIT extension Native encodings for load and store opcodes with aq and rl set Fences limited to certain addresses Cache writeback/flush/invalidate/etc.instructions Table 18. Mixed-size discrepancy (permitted by axiomatic models, forbidden by operational model) Hart 0 Hart 1 li t1, 1 li t1, 1 (a) lw a0,0(s0) (d) lw a1,0(s1) (b) fence rw,rw (e) amoswap.w.rl a2,t1,0(s2) (c) sw t1,0(s1) (f) ld a3,0(s2) (g) lw a4,4(s2) xor a5,a4,a4 add s0,s0,a5 (h) sw t1,0(s0) Outcome: a0=1, a1=1, a2=0, a3=1, a4=0 Table 19. Mixed-size discrepancy (permitted by axiomatic models, forbidden by operational model) Hart 0 Hart 1 li t1, 1 li t1, 1 (a) lw a0,0(s0) (d) ld a1,0(s1) (b) fence rw,rw (e) lw a2,4(s1) (c) sw t1,0(s1) xor a3,a2,a2 add s0,s0,a3 (f) sw t1,0(s0) Outcome: a0=1, a1=1, a2=0 Table 20. Mixed-size discrepancy (permitted by axiomatic models, forbidden by operational model) Hart 0 Hart 1 li t1, 1 li t1, 1 (a) lw a0,0(s0) (d) sw t1,4(s1) (b) fence rw,rw (e) ld a1,0(s1) (c) sw t1,0(s1) (f) lw a2,4(s1) xor a3,a2,a2 add s0,s0,a3 (g) sw t1,0(s0) Outcome: a0=1, a1=0x100000001, a2=1 There is a known discrepancy between the operational and axiomatic specifications within the family of mixed-size RSW variants shown in Mixed-size discrepancy (permitted by axiomatic models, forbidden by operational model)-Mixed-size discrepancy (permitted by axiomatic models, forbidden by operational model). To address this, we may choose to add something like the following new PPO rule: Memory operation a precedes memory operation b in preserved program order (and hence also in the global memory order) if a precedes b in program order, a and b both access regular main memory (rather than I/O regions), a is a load, b is a store, there is a load m between a and b, there is a byte x that both a and m read, there is no store between a and m that writes to x, and m precedes b in PPO. In other words, in herd syntax, we may choose to add (po-loc & rsw);ppo;[W] to PPO. Many implementations will already enforce this ordering naturally. As such, even though this rule is not official, we recommend that implementers enforce it nevertheless in order to ensure forwards compatibility with the possible future addition of this rule to RVWMO.","title":"RVWMO Explanatory Material, Version 0.1","component":"isa","version":"v20250508","name":"mm-eplan","url":"/isa/unpriv/mm-eplan.html","titles":[{"text":"Why RVWMO?","hash":"whyrvwmo","id":1},{"text":"Litmus Tests","hash":"litmustests","id":2},{"text":"Explaining the RVWMO Rules","hash":"explaining-the-rvwmo-rules","id":3},{"text":"Preserved Program Order and Global Memory Order","hash":"preserved-program-order-and-global-memory-order","id":4},{"text":"Load value axiom","hash":"loadvalueaxiom","id":5},{"text":"Atomicity axiom","hash":"atomicityaxiom","id":6},{"text":"Progress axiom","hash":"mm-progress","id":7},{"text":"Overlapping-Address Orderings (Rules 1-3)","hash":"mm-overlap","id":8},{"text":"Fences (Rule 4)","hash":"mm-fence","id":9},{"text":"Explicit Synchronization (Rules 5-8)","hash":"sec:memory:acqrel","id":10},{"text":"Syntactic Dependencies (Rules 9-11)","hash":"sec:memory:dependencies","id":11},{"text":"Pipeline Dependencies (Rules 12-13)","hash":"memory-ppopipeline","id":12},{"text":"Beyond Main Memory","hash":"beyond-main-memory","id":13},{"text":"Coherence and Cacheability","hash":"coherence-and-cacheability","id":14},{"text":"I/O Ordering","hash":"io-ordering","id":15},{"text":"Code Porting and Mapping Guidelines","hash":"memory_porting","id":16},{"text":"Implementation Guidelines","hash":"implementation-guidelines","id":17},{"text":"Possible Future Extensions","hash":"possible-future-extensions","id":18},{"text":"Known Issues","hash":"discrepancies","id":19},{"text":"Mixed-size RSW","hash":"mixedrsw","id":20}]},"41":{"id":41,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Appendix B: Formal Memory Model Specifications, Version 0.1 To facilitate formal analysis of RVWMO, this chapter presents a set of formalizations using different tools and modeling approaches. Any discrepancies are unintended; the expectation is that the models describe exactly the same sets of legal behaviors. This appendix should be treated as commentary; all normative material is provided in [memorymodel] and in the rest of the main body of the ISA specification. All currently known discrepancies are listed in [discrepancies]. Any other discrepancies are unintentional. We present a formal specification of the RVWMO memory model in Alloy (http://alloy.mit.edu). This model is available online at https://github.com/daniellustig/riscv-memory-model. The online material also contains some litmus tests and some examples of how Alloy can be used to model check some of the mappings in [memory_porting]. The RVWMO memory model formalized in Alloy (1/5: PPO) // =RVWMO PPO= // Preserved Program Order fun ppo : Event->Event { // same-address ordering po_loc :> Store + rdw + (AMO + StoreConditional) <: rfi // explicit synchronization + ppo_fence + Acquire <: ^po :> MemoryEvent + MemoryEvent <: ^po :> Release + RCsc <: ^po :> RCsc + pair // syntactic dependencies + addrdep + datadep + ctrldep :> Store // pipeline dependencies + (addrdep+datadep).rfi + addrdep.^po :> Store } // the global memory order respects preserved program order fact { ppo in ^gmo } The RVWMO memory model formalized in Alloy (2/5: Axioms) // =RVWMO axioms= // Load Value Axiom fun candidates[r: MemoryEvent] : set MemoryEvent { (r.~^gmo & Store & same_addr[r]) // writes preceding r in gmo + (r.^~po & Store & same_addr[r]) // writes preceding r in po } fun latest_among[s: set Event] : Event { s - s.~^gmo } pred LoadValue { all w: Store | all r: Load | w->r in rf <=> w = latest_among[candidates[r]] } // Atomicity Axiom pred Atomicity { all r: Store.~pair | // starting from the lr, no x: Store & same_addr[r] | // there is no store x to the same addr x not in same_hart[r] // such that x is from a different hart, and x in r.~rf.^gmo // x follows (the store r reads from) in gmo, and r.pair in x.^gmo // and r follows x in gmo } // Progress Axiom implicit: Alloy only considers finite executions pred RISCV_mm { LoadValue and Atomicity /* and Progress */ } The RVWMO memory model formalized in Alloy (3/5: model of memory) //Basic model of memory sig Hart { // hardware thread start : one Event } sig Address {} abstract sig Event { po: lone Event // program order } abstract sig MemoryEvent extends Event { address: one Address, acquireRCpc: lone MemoryEvent, acquireRCsc: lone MemoryEvent, releaseRCpc: lone MemoryEvent, releaseRCsc: lone MemoryEvent, addrdep: set MemoryEvent, ctrldep: set Event, datadep: set MemoryEvent, gmo: set MemoryEvent, // global memory order rf: set MemoryEvent } sig LoadNormal extends MemoryEvent {} // l{b|h|w|d} sig LoadReserve extends MemoryEvent { // lr pair: lone StoreConditional } sig StoreNormal extends MemoryEvent {} // s{b|h|w|d} // all StoreConditionals in the model are assumed to be successful sig StoreConditional extends MemoryEvent {} // sc sig AMO extends MemoryEvent {} // amo sig NOP extends Event {} fun Load : Event { LoadNormal + LoadReserve + AMO } fun Store : Event { StoreNormal + StoreConditional + AMO } sig Fence extends Event { pr: lone Fence, // opcode bit pw: lone Fence, // opcode bit sr: lone Fence, // opcode bit sw: lone Fence // opcode bit } sig FenceTSO extends Fence {} /* Alloy encoding detail: opcode bits are either set (encoded, e.g., * as f.pr in iden) or unset (f.pr not in iden). The bits cannot be used for * anything else */ fact { pr + pw + sr + sw in iden } // likewise for ordering annotations fact { acquireRCpc + acquireRCsc + releaseRCpc + releaseRCsc in iden } // don't try to encode FenceTSO via pr/pw/sr/sw; just use it as-is fact { no FenceTSO.(pr + pw + sr + sw) } The RVWMO memory model formalized in Alloy (4/5: Basic model rules) // =Basic model rules= // Ordering annotation groups fun Acquire : MemoryEvent { MemoryEvent.acquireRCpc + MemoryEvent.acquireRCsc } fun Release : MemoryEvent { MemoryEvent.releaseRCpc + MemoryEvent.releaseRCsc } fun RCpc : MemoryEvent { MemoryEvent.acquireRCpc + MemoryEvent.releaseRCpc } fun RCsc : MemoryEvent { MemoryEvent.acquireRCsc + MemoryEvent.releaseRCsc } // There is no such thing as store-acquire or load-release, unless it's both fact { Load & Release in Acquire } fact { Store & Acquire in Release } // FENCE PPO fun FencePRSR : Fence { Fence.(pr & sr) } fun FencePRSW : Fence { Fence.(pr & sw) } fun FencePWSR : Fence { Fence.(pw & sr) } fun FencePWSW : Fence { Fence.(pw & sw) } fun ppo_fence : MemoryEvent->MemoryEvent { (Load <: ^po :> FencePRSR).(^po :> Load) + (Load <: ^po :> FencePRSW).(^po :> Store) + (Store <: ^po :> FencePWSR).(^po :> Load) + (Store <: ^po :> FencePWSW).(^po :> Store) + (Load <: ^po :> FenceTSO) .(^po :> MemoryEvent) + (Store <: ^po :> FenceTSO) .(^po :> Store) } // auxiliary definitions fun po_loc : Event->Event { ^po & address.~address } fun same_hart[e: Event] : set Event { e + e.^~po + e.^po } fun same_addr[e: Event] : set Event { e.address.~address } // initial stores fun NonInit : set Event { Hart.start.*po } fun Init : set Event { Event - NonInit } fact { Init in StoreNormal } fact { Init->(MemoryEvent & NonInit) in ^gmo } fact { all e: NonInit | one e.*~po.~start } // each event is in exactly one hart fact { all a: Address | one Init & a.~address } // one init store per address fact { no Init <: po and no po :> Init } The RVWMO memory model formalized in Alloy (5/5: Auxiliaries) // po fact { acyclic[po] } // gmo fact { total[^gmo, MemoryEvent] } // gmo is a total order over all MemoryEvents //rf fact { rf.~rf in iden } // each read returns the value of only one write fact { rf in Store <: address.~address :> Load } fun rfi : MemoryEvent->MemoryEvent { rf & (*po + *~po) } //dep fact { no StoreNormal <: (addrdep + ctrldep + datadep) } fact { addrdep + ctrldep + datadep + pair in ^po } fact { datadep in datadep :> Store } fact { ctrldep.*po in ctrldep } fact { no pair & (^po :> (LoadReserve + StoreConditional)).^po } fact { StoreConditional in LoadReserve.pair } // assume all SCs succeed // rdw fun rdw : Event->Event { (Load <: po_loc :> Load) // start with all same_address load-load pairs, - (~rf.rf) // subtract pairs that read from the same store, - (po_loc.rfi) // and subtract out \"fri-rfi\" patterns } // filter out redundant instances and/or visualizations fact { no gmo & gmo.gmo } // keep the visualization uncluttered fact { all a: Address | some a.~address } // =Optional: opcode encoding restrictions= // the list of blessed fences fact { Fence in Fence.pr.sr + Fence.pw.sw + Fence.pr.pw.sw + Fence.pr.sr.sw + FenceTSO + Fence.pr.pw.sr.sw } pred restrict_to_current_encodings { no (LoadNormal + StoreNormal) & (Acquire + Release) } // =Alloy shortcuts= pred acyclic[rel: Event->Event] { no iden & ^rel } pred total[rel: Event->Event, bag: Event] { all disj e, f: bag | e->f in rel + ~rel acyclic[rel] } The tool herd takes a memory model and a litmus test as input and simulates the execution of the test on top of the memory model. Memory models are written in the domain specific language Cat. This section provides two Cat memory model of RVWMO. The first model, riscv.cat, a herd version of the RVWMO memory model (2/3), follows the global memory order, [memorymodel], definition of RVWMO, as much as is possible for a Cat model. The second model, riscv.cat, an alternative herd presentation of the RVWMO memory model (3/3), is an equivalent, more efficient, partial order based RVWMO model. The simulator herd is part of the diy tool suite — see http://diy.inria.fr for software and documentation. The models and more are available online at http://diy.inria.fr/cats7/riscv/. riscv-defs.cat, a herd definition of preserved program order (1/3) (*************) (* Utilities *) (*************) (* All fence relations *) let fence.r.r = [R];fencerel(Fence.r.r);[R] let fence.r.w = [R];fencerel(Fence.r.w);[W] let fence.r.rw = [R];fencerel(Fence.r.rw);[M] let fence.w.r = [W];fencerel(Fence.w.r);[R] let fence.w.w = [W];fencerel(Fence.w.w);[W] let fence.w.rw = [W];fencerel(Fence.w.rw);[M] let fence.rw.r = [M];fencerel(Fence.rw.r);[R] let fence.rw.w = [M];fencerel(Fence.rw.w);[W] let fence.rw.rw = [M];fencerel(Fence.rw.rw);[M] let fence.tso = let f = fencerel(Fence.tso) in ([W];f;[W]) | ([R];f;[M]) let fence = fence.r.r | fence.r.w | fence.r.rw | fence.w.r | fence.w.w | fence.w.rw | fence.rw.r | fence.rw.w | fence.rw.rw | fence.tso (* Same address, no W to the same address in-between *) let po-loc-no-w = po-loc \\ (po-loc?;[W];po-loc) (* Read same write *) let rsw = rf^-1;rf (* Acquire, or stronger *) let AQ = Acq|AcqRel (* Release or stronger *) and RL = RelAcqRel (* All RCsc *) let RCsc = Acq|Rel|AcqRel (* Amo events are both R and W, relation rmw relates paired lr/sc *) let AMO = R & W let StCond = range(rmw) (*************) (* ppo rules *) (*************) (* Overlapping-Address Orderings *) let r1 = [M];po-loc;[W] and r2 = ([R];po-loc-no-w;[R]) \\ rsw and r3 = [AMO|StCond];rfi;[R] (* Explicit Synchronization *) and r4 = fence and r5 = [AQ];po;[M] and r6 = [M];po;[RL] and r7 = [RCsc];po;[RCsc] and r8 = rmw (* Syntactic Dependencies *) and r9 = [M];addr;[M] and r10 = [M];data;[W] and r11 = [M];ctrl;[W] (* Pipeline Dependencies *) and r12 = [R];(addr|data);[W];rfi;[R] and r13 = [R];addr;[M];po;[W] let ppo = r1 | r2 | r3 | r4 | r5 | r6 | r7 | r8 | r9 | r10 | r11 | r12 | r13 riscv.cat, a herd version of the RVWMO memory model (2/3) Total (* Notice that herd has defined its own rf relation *) (* Define ppo *) include \"riscv-defs.cat\" (********************************) (* Generate global memory order *) (********************************) let gmo0 = (* precursor: ie build gmo as an total order that include gmo0 *) loc & (W\\FW) * FW | # Final write after any write to the same location ppo | # ppo compatible rfe # includes herd external rf (optimization) (* Walk over all linear extensions of gmo0 *) with gmo from linearizations(M\\IW,gmo0) (* Add initial writes upfront -- convenient for computing rfGMO *) let gmo = gmo | loc & IW * (M\\IW) (**********) (* Axioms *) (**********) (* Compute rf according to the load value axiom, aka rfGMO *) let WR = loc & ([W];(gmo|po);[R]) let rfGMO = WR \\ (loc&([W];gmo);WR) (* Check equality of herd rf and of rfGMO *) empty (rf\\rfGMO)|(rfGMO\\rf) as RfCons (* Atomicity axiom *) let infloc = (gmo & loc)^-1 let inflocext = infloc & ext let winside = (infloc;rmw;inflocext) & (infloc;rf;rmw;inflocext) & [W] empty winside as Atomic riscv.cat, an alternative herd presentation of the RVWMO memory model (3/3) Partial (***************) (* Definitions *) (***************) (* Define ppo *) include \"riscv-defs.cat\" (* Compute coherence relation *) include \"cos-opt.cat\" (**********) (* Axioms *) (**********) (* Sc per location *) acyclic co|rf|fr|po-loc as Coherence (* Main model axiom *) acyclic co|rfe|fr|ppo as Model (* Atomicity axiom *) empty rmw & (fre;coe) as Atomic This is an alternative presentation of the RVWMO memory model in operational style. It aims to admit exactly the same extensional behavior as the axiomatic presentation: for any given program, admitting an execution if and only if the axiomatic presentation allows it. The axiomatic presentation is defined as a predicate on complete candidate executions. In contrast, this operational presentation has an abstract microarchitectural flavor: it is expressed as a state machine, with states that are an abstract representation of hardware machine states, and with explicit out-of-order and speculative execution (but abstracting from more implementation-specific microarchitectural details such as register renaming, store buffers, cache hierarchies, cache protocols, etc.). As such, it can provide useful intuition. It can also construct executions incrementally, making it possible to interactively and randomly explore the behavior of larger examples, while the axiomatic model requires complete candidate executions over which the axioms can be checked. The operational presentation covers mixed-size execution, with potentially overlapping memory accesses of different power-of-two byte sizes. Misaligned accesses are broken up into single-byte accesses. The operational model, together with a fragment of the RISC-V ISA semantics (RV64I and A), are integrated into the rmem exploration tool (https://github.com/rems-project/rmem). rmem can explore litmus tests (see [litmustests]) and small ELF binaries exhaustively, pseudorandomly and interactively. In rmem, the ISA semantics is expressed explicitly in Sail (see https://github.com/rems-project/sail for the Sail language, and https://github.com/rems-project/sail-riscv for the RISC-V ISA model), and the concurrency semantics is expressed in Lem (see https://github.com/rems-project/lem for the Lem language). rmem has a command-line interface and a web-interface. The web-interface runs entirely on the client side, and is provided online together with a library of litmus tests: http://www.cl.cam.ac.uk/. The command-line interface is faster than the web-interface, specially in exhaustive mode. Below is an informal introduction of the model states and transitions. The description of the formal model starts in the next subsection. Terminology: In contrast to the axiomatic presentation, here every memory operation is either a load or a store. Hence, AMOs give rise to two distinct memory operations, a load and a store. When used in conjunction with instruction, the terms load and store refer to instructions that give rise to such memory operations. As such, both include AMO instructions. The term acquire refers to an instruction (or its memory operation) with the acquire-RCpc or acquire-RCsc annotation. The term release refers to an instruction (or its memory operation) with the release-RCpc or release-RCsc annotation. Model states Model states: A model state consists of a shared memory and a tuple of hart states. The shared memory state records all the memory store operations that have propagated so far, in the order they propagated (this can be made more efficient, but for simplicity of the presentation we keep it this way). Each hart state consists principally of a tree of instruction instances, some of which have been finished, and some of which have not. Non-finished instruction instances can be subject to restart, e.g. if they depend on an out-of-order or speculative load that turns out to be unsound. Conditional branch and indirect jump instructions may have multiple successors in the instruction tree. When such instruction is finished, any un-taken alternative paths are discarded. Each instruction instance in the instruction tree has a state that includes an execution state of the intra-instruction semantics (the ISA pseudocode for this instruction). The model uses a formalization of the intra-instruction semantics in Sail. One can think of the execution state of an instruction as a representation of the pseudocode control state, pseudocode call stack, and local variable values. An instruction instance state also includes information about the instance’s memory and register footprints, its register reads and writes, its memory operations, whether it is finished, etc. Model transitions The model defines, for any model state, the set of allowed transitions, each of which is a single atomic step to a new abstract machine state. Execution of a single instruction will typically involve many transitions, and they may be interleaved in operational-model execution with transitions arising from other instructions. Each transition arises from a single instruction instance; it will change the state of that instance, and it may depend on or change the rest of its hart state and the shared memory state, but it does not depend on other hart states, and it will not change them. The transitions are introduced below and defined in Transitions, with a precondition and a construction of the post-transition model state for each. Transitions for all instructions: Fetch instruction: This transition represents a fetch and decode of a new instruction instance, as a program order successor of a previously fetched instruction instance (or the initial fetch address). The model assumes the instruction memory is fixed; it does not describe the behavior of self-modifying code. In particular, the Fetch instruction transition does not generate memory load operations, and the shared memory is not involved in the transition. Instead, the model depends on an external oracle that provides an opcode when given a memory location. Register write: This is a write of a register value. Register read: This is a read of a register value from the most recent program-order-predecessor instruction instance that writes to that register. Pseudocode internal step: This covers pseudocode internal computation: arithmetic, function calls, etc. Finish instruction: At this point the instruction pseudocode is done, the instruction cannot be restarted, memory accesses cannot be discarded, and all memory effects have taken place. For conditional branch and indirect jump instructions, any program order successors that were fetched from an address that is not the one that was written to the pc register are discarded, together with the sub-tree of instruction instances below them. Transitions specific to load instructions: Initiate memory load operations: At this point the memory footprint of the load instruction is provisionally known (it could change if earlier instructions are restarted) and its individual memory load operations can start being satisfied. Satisfy memory load operation by forwarding from unpropogated stores: This partially or entirely satisfies a single memory load operation by forwarding, from program-order-previous memory store operations. Satisfy memory load operation from memory: This entirely satisfies the outstanding slices of a single memory load operation, from memory. Complete load operations: At this point all the memory load operations of the instruction have been entirely satisfied and the instruction pseudocode can continue executing. A load instruction can be subject to being restarted until the transition. But, under some conditions, the model might treat a load instruction as non-restartable even before it is finished (e.g. see ). Transitions specific to store instructions: Initiate memory store operation footprints: At this point the memory footprint of the store is provisionally known. Instantiate memory store operation values: At this point the memory store operations have their values and program-order-successor memory load operations can be satisfied by forwarding from them. Commit store instruction: At this point the store operations are guaranteed to happen (the instruction can no longer be restarted or discarded), and they can start being propagated to memory. Propagate store operation: This propagates a single memory store operation to memory. Complete store operations: At this point all the memory store operations of the instruction have been propagated to memory, and the instruction pseudocode can continue executing. Transitions specific to sc instructions: Early sc fail: This causes the sc to fail, either a spontaneous fail or because it is not paired with a program-order-previous lr. Paired sc: This transition indicates the sc is paired with an lr and might succeed. Commit and propagate store operation of an sc: This is an atomic execution of the transitions Commit store instruction and Propagate store operation, it is enabled only if the stores from which the lr read from have not been overwritten. Late sc fail: This causes the sc to fail, either a spontaneous fail or because the stores from which the lr read from have been overwritten. Transitions specific to AMO instructions: Satisfy, commit and propagate operations of an AMO: This is an atomic execution of all the transitions needed to satisfy the load operation, do the required arithmetic, and propagate the store operation. Transitions specific to fence instructions: Commit fence The transitions labeled can always be taken eagerly, as soon as their precondition is satisfied, without excluding other behavior; the cannot. Although Fetch instruction is marked with a , it can be taken eagerly as long as it is not taken infinitely many times. An instance of a non-AMO load instruction, after being fetched, will typically experience the following transitions in this order: Register read Initiate memory load operations Satisfy memory load operation by forwarding from unpropagated stores and/or Satisfy memory load operation from memory (as many as needed to satisfy all the load operations of the instance) Complete load operations Register write Finish instruction Before, between and after the transitions above, any number of Pseudocode internal step transitions may appear. In addition, a Fetch instruction transition for fetching the instruction in the next program location will be available until it is taken. This concludes the informal description of the operational model. The following sections describe the formal operational model. The intra-instruction semantics for each instruction instance is expressed as a state machine, essentially running the instruction pseudocode. Given a pseudocode execution state, it computes the next state. Most states identify a pending memory or register operation, requested by the pseudocode, which the memory model has to do. The states are (this is a tagged union; tags in small-caps): Load_mem(kind, address, size, load_continuation) - memory load operation Early_sc_fail(res_continuation) - allow sc to fail early Store_ea(kind, address, size, next_state) - memory store effective address Store_memv(mem_value, store_continuation) - memory store value Fence(kind, next_state) - fence Read_reg(reg_name, read_continuation) - register read Write_reg(reg_name, reg_value, next_state) - register write Internal(next_state) - pseudocode internal step Done - end of pseudocode Here: mem_value and reg_value are lists of bytes; address is an integer of XLEN bits; for load/store, kind identifies whether it is lr/sc, acquire-RCpc/release-RCpc, acquire-RCsc/release-RCsc, acquire-release-RCsc; * for fence, kind identifies whether it is a normal or TSO, and (for normal fences) the predecessor and successor ordering bits; * reg_name identifies a register and a slice thereof (start and end bit indices); and the continuations describe how the instruction instance will continue for each value that might be provided by the surrounding memory model (the load_continuation and read_continuation take the value loaded from memory and read from the previous register write, the store_continuation takes false for an sc that failed and true in all other cases, and res_continuation takes false if the sc fails and true otherwise). For example, given the load instruction lw x1,0(x2), an execution will typically go as follows. The initial execution state will be computed from the pseudocode for the given opcode. This can be expected to be Read_reg(x2, read_continuation). Feeding the most recently written value of register x2 (the instruction semantics will be blocked if necessary until the register value is available), say 0x4000, to read_continuation returns Load_mem(plain_load, 0x4000, 4, load_continuation). Feeding the 4-byte value loaded from memory location 0x4000, say 0x42, to load_continuation returns Write_reg(x1, 0x42, Done). Many Internal(next_state) states may appear before and between the states above. Notice that writing to memory is split into two steps, Store_ea and Store_memv: the first one makes the memory footprint of the store provisionally known, and the second one adds the value to be stored. We ensure these are paired in the pseudocode (Store_ea followed by Store_memv), but there may be other steps between them. It is observable that the Store_ea can occur before the value to be stored is determined. For example, for the litmus test LB+fence.r.rw+data-po to be allowed by the operational model (as it is by RVWMO), the first store in Hart 1 has to take the Store_ea step before its value is determined, so that the second store can see it is to a non-overlapping memory footprint, allowing the second store to be committed out of order without violating coherence. The pseudocode of each instruction performs at most one store or one load, except for AMOs that perform exactly one load and one store. Those memory accesses are then split apart into the architecturally atomic units by the hart semantics (see Initiate memory load operations and Initiate memory store operation footprints below). Informally, each bit of a register read should be satisfied from a register write by the most recent (in program order) instruction instance that can write that bit (or from the hart’s initial register state if there is no such write). Hence, it is essential to know the register write footprint of each instruction instance, which we calculate when the instruction instance is created (see the Fetch instruction action of below). We ensure in the pseudocode that each instruction does at most one register write to each register bit, and also that it does not try to read a register value it just wrote. Data-flow dependencies (address and data) in the model emerge from the fact that each register read has to wait for the appropriate register write to be executed (as described above). Each instruction instance _i has a state comprising: program_loc, the memory address from which the instruction was fetched; instruction_kind, identifying whether this is a load, store, AMO, fence, branch/jump or a simple instruction (this also includes a kind similar to the one described for the pseudocode execution states); src_regs, the set of source _reg_name_s (including system registers), as statically determined from the pseudocode of the instruction; dst_regs, the destination _reg_name_s (including system registers), as statically determined from the pseudocode of the instruction; pseudocode_state (or sometimes just state for short), one of (this is a tagged union; tags in small-caps): Plain(isa_state) - ready to make a pseudocode transition Pending_mem_loads(load_continuation) - requesting memory load operation(s) Pending_mem_stores(store_continuation) - requesting memory store operation(s) reg_reads, the register reads the instance has performed, including, for each one, the register write slices it read from; reg_writes, the register writes the instance has performed; mem_loads, a set of memory load operations, and for each one the as-yet-unsatisfied slices (the byte indices that have not been satisfied yet), and, for the satisfied slices, the store slices (each consisting of a memory store operation and subset of its byte indices) that satisfied it. mem_stores, a set of memory store operations, and for each one a flag that indicates whether it has been propagated (passed to the shared memory) or not. information recording whether the instance is committed, finished, etc. Each memory load operation includes a memory footprint (address and size). Each memory store operations includes a memory footprint, and, when available, a value. A load instruction instance with a non-empty mem_loads, for which all the load operations are satisfied (i.e. there are no unsatisfied load slices) is said to be entirely satisfied. Informally, an instruction instance is said to have fully determined data if the load (and sc) instructions feeding its source registers are finished. Similarly, it is said to have a fully determined memory footprint if the load (and sc) instructions feeding its memory operation address register are finished. Formally, we first define the notion of fully determined register write: a register write from reg_writes of instruction instance is said to be fully determined if one of the following conditions hold: is finished; or the value written by is not affected by a memory operation that has made (i.e. a value loaded from memory or the result of sc), and, for every register read that has made, that affects , the register write from which read is fully determined (or read from the initial register state). Now, an instruction instance is said to have fully determined data if for every register read from reg_reads, the register writes that reads from are fully determined. An instruction instance is said to have a fully determined memory footprint if for every register read from reg_reads that feeds into ’s memory operation address, the register writes that reads from are fully determined. The rmem tool records, for every register write, the set of register writes from other instructions that have been read by this instruction at the point of performing the write. By carefully arranging the pseudocode of the instructions covered by the tool we were able to make it so that this is exactly the set of register writes on which the write depends on. The model state of a single hart comprises: hart_id, a unique identifier of the hart; initial_register_state, the initial register value for each register; initial_fetch_address, the initial instruction fetch address; instruction_tree, a tree of the instruction instances that have been fetched (and not discarded), in program order. The model state of the shared memory comprises a list of memory store operations, in the order they propagated to the shared memory. When a store operation is propagated to the shared memory it is simply added to the end of the list. When a load operation is satisfied from memory, for each byte of the load operation, the most recent corresponding store slice is returned. For most purposes, it is simpler to think of the shared memory as an array, i.e., a map from memory locations to memory store operation slices, where each memory location is mapped to a one-byte slice of the most recent memory store operation to that location. However, this abstraction is not detailed enough to properly handle the sc instruction. The RVWMO allows store operations from the same hart as the sc to intervene between the store operation of the sc and the store operations the paired lr read from. To allow such store operations to intervene, and forbid others, the array abstraction must be extended to record more information. Here, we use a list as it is very simple, but a more efficient and scalable implementations should probably use something better. Each of the paragraphs below describes a single kind of system transition. The description starts with a condition over the current system state. The transition can be taken in the current state only if the condition is satisfied. The condition is followed by an action that is applied to that state when the transition is taken, in order to generate the new system state. A possible program-order-successor of instruction instance can be fetched from address loc if: it has not already been fetched, i.e., none of the immediate successors of in the hart’s instruction_tree are from loc; and if ’s pseudocode has already written an address to pc, then loc must be that address, otherwise loc is: for a conditional branch, the successor address or the branch target address; for a (direct) jump and link instruction (jal), the target address; for an indirect jump instruction (jalr), any address; and for any other instruction, . Action: construct a freshly initialized instruction instance for the instruction in the program memory at loc, with state Plain(isa_state), computed from the instruction pseudocode, including the static information available from the pseudocode such as its instruction_kind, src_regs, and dst_regs, and add to the hart’s instruction_tree as a successor of . The possible next fetch addresses (loc) are available immediately after fetching and the model does not need to wait for the pseudocode to write to pc; this allows out-of-order execution, and speculation past conditional branches and jumps. For most instructions these addresses are easily obtained from the instruction pseudocode. The only exception to that is the indirect jump instruction (jalr), where the address depends on the value held in a register. In principle the mathematical model should allow speculation to arbitrary addresses here. The exhaustive search in the rmem tool handles this by running the exhaustive search multiple times with a growing set of possible next fetch addresses for each indirect jump. The initial search uses empty sets, hence there is no fetch after indirect jump instruction until the pseudocode of the instruction writes to pc, and then we use that value for fetching the next instruction. Before starting the next iteration of exhaustive search, we collect for each indirect jump (grouped by code location) the set of values it wrote to pc in all the executions in the previous search iteration, and use that as possible next fetch addresses of the instruction. This process terminates when no new fetch addresses are detected. An instruction instance in state Plain(Load_mem(kind, address, size, load_continuation)) can always initiate the corresponding memory load operations. Action: Construct the appropriate memory load operations : if address is aligned to size then is a single memory load operation of size bytes from address; otherwise, is a set of size memory load operations, each of one byte, from the addresses . set mem_loads of to ; and update the state of to Pending_mem_loads(load_continuation). In [rvwmo-primitives] it is said that misaligned memory accesses may be decomposed at any granularity. Here we decompose them to one-byte accesses as this granularity subsumes all others. For a non-AMO load instruction instance in state Pending_mem_loads(load_continuation), and a memory load operation in that has unsatisfied slices, the memory load operation can be partially or entirely satisfied by forwarding from unpropagated memory store operations by store instruction instances that are program-order-before if: all program-order-previous fence instructions with .sr and .pw set are finished; for every program-order-previous fence instruction, , with .sr and .pr set, and .pw not set, if is not finished then all load instructions that are program-order-before are entirely satisfied; for every program-order-previous fence.tso instruction, , that is not finished, all load instructions that are program-order-before are entirely satisfied; if is a load-acquire-RCsc, all program-order-previous store-releases-RCsc are finished; if is a load-acquire-release, all program-order-previous instructions are finished; all non-finished program-order-previous load-acquire instructions are entirely satisfied; and all program-order-previous store-acquire-release instructions are finished; Let be the set of all unpropagated memory store operation slices from non-sc store instruction instances that are program-order-before and have already calculated the value to be stored, that overlap with the unsatisfied slices of , and which are not superseded by intervening store operations or store operations that are read from by an intervening load. The last condition requires, for each memory store operation slice in from instruction : that there is no store instruction program-order-between and with a memory store operation overlapping ; and that there is no load instruction program-order-between and that was satisfied from an overlapping memory store operation slice from a different hart. Action: update to indicate that was satisfied by ; and restart any speculative instructions which have violated coherence as a result of this, i.e., for every non-finished instruction that is a program-order-successor of , and every memory load operation of that was satisfied from , if there exists a memory store operation slice in , and an overlapping memory store operation slice from a different memory store operation in , and is not from an instruction that is a program-order-successor of , restart and its restart-dependents. Where, the restart-dependents of instruction are: program-order-successors of that have data-flow dependency on a register write of ; program-order-successors of that have a memory load operation that reads from a memory store operation of (by forwarding); if is a load-acquire, all the program-order-successors of ; if is a load, for every fence, , with .sr and .pr set, and .pw not set, that is a program-order-successor of , all the load instructions that are program-order-successors of ; if is a load, for every fence.tso, , that is a program-order-successor of , all the load instructions that are program-order-successors of ; and (recursively) all the restart-dependents of all the instruction instances above. Forwarding memory store operations to a memory load might satisfy only some slices of the load, leaving other slices unsatisfied. A program-order-previous store operation that was not available when taking the transition above might make provisionally unsound (violating coherence) when it becomes available. That store will prevent the load from being finished (see Finish instruction), and will cause it to restart when that store operation is propagated (see Propagate store operation). A consequence of the transition condition above is that store-release-RCsc memory store operations cannot be forwarded to load-acquire-RCsc instructions: does not include memory store operations from finished stores (as those must be propagated memory store operations), and the condition above requires all program-order-previous store-releases-RCsc to be finished when the load is acquire-RCsc. For an instruction instance of a non-AMO load instruction or an AMO instruction in the context of the Satisfy, commit and propagate operations of an AMO transition, any memory load operation in that has unsatisfied slices, can be satisfied from memory if all the conditions of <sat_by_forwarding, Satisfy memory load operation by forwarding from unpropagated stores>> are satisfied. Action: let be the memory store operation slices from memory covering the unsatisfied slices of , and apply the action of Satisfy memory operation by forwarding from unpropagates stores. Note that Satisfy memory operation by forwarding from unpropagates stores might leave some slices of the memory load operation unsatisfied, those will have to be satisfied by taking the transition again, or taking Satisfy memory load operation from memory. Satisfy memory load operation from memory, on the other hand, will always satisfy all the unsatisfied slices of the memory load operation. A load instruction instance in state Pending_mem_loads(load_continuation) can be completed (not to be confused with finished) if all the memory load operations are entirely satisfied (i.e. there are no unsatisfied slices). Action: update the state of to Plain(load_continuation(mem_value)), where mem_value is assembled from all the memory store operation slices that satisfied . An sc instruction instance in state Plain(Early_sc_fail(res_continuation)) can always be made to fail. Action: update the state of to Plain(res_continuation(false)). An sc instruction instance in state Plain(Early_sc_fail(res_continuation)) can continue its (potentially successful) execution if is paired with an lr. Action: update the state of to Plain(res_continuation(true)). An instruction instance in state Plain(Store_ea(kind, address, size, next_state)) can always announce its pending memory store operation footprint. Action: construct the appropriate memory store operations (without the store value): if address is aligned to size then is a single memory store operation of size bytes to address; otherwise, is a set of size memory store operations, each of one-byte size, to the addresses . set to ; and update the state of to Plain(next_state). Note that after taking the transition above the memory store operations do not yet have their values. The importance of splitting this transition from the transition below is that it allows other program-order-successor store instructions to observe the memory footprint of this instruction, and if they don’t overlap, propagate out of order as early as possible (i.e. before the data register value becomes available). An instruction instance in state Plain(Store_memv(mem_value, store_continuation)) can always instantiate the values of the memory store operations . Action: split mem_value between the memory store operations ; and update the state of to Pending_mem_stores(store_continuation). An uncommitted instruction instance of a non-sc store instruction or an sc instruction in the context of the Commit and propagate store operation of an sc transition, in state Pending_mem_stores(store_continuation), can be committed (not to be confused with propagated) if: has fully determined data; all program-order-previous conditional branch and indirect jump instructions are finished; all program-order-previous fence instructions with .sw set are finished; all program-order-previous fence.tso instructions are finished; all program-order-previous load-acquire instructions are finished; all program-order-previous store-acquire-release instructions are finished; if is a store-release, all program-order-previous instructions are finished; all program-order-previous memory access instructions have a fully determined memory footprint; all program-order-previous store instructions, except for sc that failed, have initiated and so have non-empty mem_stores; and all program-order-previous load instructions have initiated and so have non-empty mem_loads. Action: record that i is committed. Notice that if condition 8 is satisfied the conditions 9 and 10 are also satisfied, or will be satisfied after taking some eager transitions. Hence, requiring them does not strengthen the model. By requiring them, we guarantee that previous memory access instructions have taken enough transitions to make their memory operations visible for the condition check of , which is the next transition the instruction will take, making that condition simpler. For a committed instruction instance in state Pending_mem_stores(store_continuation), and an unpropagated memory store operation in , can be propagated if: all memory store operations of program-order-previous store instructions that overlap with have already propagated; all memory load operations of program-order-previous load instructions that overlap with have already been satisfied, and (the load instructions) are non-restartable (see definition below); and all memory load operations that were satisfied by forwarding are entirely satisfied. Where a non-finished instruction instance is non-restartable if: there does not exist a store instruction and an unpropagated memory store operation of such that applying the action of the Propagate store operation transition to will result in the restart of ; and there does not exist a non-finished load instruction and a memory load operation of such that applying the action of the Satisfy memory load operation by forwarding from unpropagated stores/Satisfy memory load operation from memory transition (even if is already satisfied) to will result in the restart of . Action: update the shared memory state with ; update to indicate that was propagated; and restart any speculative instructions which have violated coherence as a result of this, i.e., for every non-finished instruction program-order-after and every memory load operation of that was satisfied from , if there exists a memory store operation slice in that overlaps with and is not from , and is not from a program-order-successor of , restart and its restart-dependents (see Satisfy memory load operation by forwarding from unpropagated stores). An uncommitted sc instruction instance , from hart , in state Pending_mem_stores(store_continuation), with a paired lr that has been satisfied by some store slices , can be committed and propagated at the same time if: is finished; every memory store operation that has been forwarded to is propagated; the conditions of Commit store instruction is satisfied; the conditions of Propagate store instruction is satisfied (notice that an sc instruction can only have one memory store operation); and for every store slice from , has not been overwritten, in the shared memory, by a store that is from a hart that is not , at any point since was propagated to memory. Action: apply the actions of Commit store instruction; and apply the action of Propagate store instruction. An sc instruction instance in state Pending_mem_stores(store_continuation), that has not propagated its memory store operation, can always be made to fail. Action: clear ; and update the state of to Plain(store_continuation(false)). For efficiency, the rmem tool allows this transition only when it is not possible to take the Commit and propagate store operation of an sc transition. This does not affect the set of allowed final states, but when explored interactively, if the sc should fail one should use the Early sc fail transition instead of waiting for this transition. A store instruction instance in state Pending_mem_stores(store_continuation), for which all the memory store operations in have been propagated, can always be completed (not to be confused with finished). Action: update the state of to Plain(store_continuation(true)). An AMO instruction instance in state Pending_mem_loads(load_continuation) can perform its memory access if it is possible to perform the following sequence of transitions with no intervening transitions: Satisfy memory load operation from memory Complere load operations Pseudocode internal step (zero or more times) Instantiate memory store operation values Commit store instruction Propagate store operation Complete store operations and in addition, the condition of Finish instruction, with the exception of not requiring to be in state Plain(Done), holds after those transitions. Action: perform the above sequence of transitions (this does not include Finish instruction), one after the other, with no intervening transitions. Notice that program-order-previous stores cannot be forwarded to the load of an AMO. This is simply because the sequence of transitions above does not include the forwarding transition. But even if it did include it, the sequence will fail when trying to do the Propagate store operation transition, as this transition requires all program-order-previous store operations to overlapping memory footprints to be propagated, and forwarding requires the store operation to be unpropagated. In addition, the store of an AMO cannot be forwarded to a program-order-successor load. Before taking the transition above, the store operation of the AMO does not have its value and therefore cannot be forwarded; after taking the transition above the store operation is propagated and therefore cannot be forwarded. A fence instruction instance in state Plain(Fence(kind, next_state)) can be committed if: if is a normal fence and it has .pr set, all program-order-previous load instructions are finished; if is a normal fence and it has .pw set, all program-order-previous store instructions are finished; and if is a fence.tso, all program-order-previous load and store instructions are finished. Action: record that is committed; and update the state of to Plain(next_state). An instruction instance in state Plain(Read_reg(reg_name, read_cont)) can do a register read of reg_name if every instruction instance that it needs to read from has already performed the expected reg_name register write. Let read_sources include, for each bit of reg_name, the write to that bit by the most recent (in program order) instruction instance that can write to that bit, if any. If there is no such instruction, the source is the initial register value from initial_register_state. Let reg_value be the value assembled from read_sources. Action: add reg_name to with read_sources and reg_value; and update the state of to Plain(read_cont(reg_value)). An instruction instance in state Plain(Write_reg(reg_name, reg_value, next_state)) can always do a reg_name register write. Action: add reg_name to with and reg_value; and update the state of to Plain(next_state). where is a pair of the set of all read_sources from , and a flag that is true iff is a load instruction instance that has already been entirely satisfied. An instruction instance in state Plain(Internal(next_state)) can always do that pseudocode-internal step. Action: update the state of to Plain(next_state). A non-finished instruction instance in state Plain(Done) can be finished if: if is a load instruction: all program-order-previous load-acquire instructions are finished; all program-order-previous fence instructions with .sr set are finished; for every program-order-previous fence.tso instruction, , that is not finished, all load instructions that are program-order-before are finished; and it is guaranteed that the values read by the memory load operations of will not cause coherence violations, i.e., for any program-order-previous instruction instance , let be the combined footprint of propagated memory store operations from store instructions program-order-between and , and fixed memory store operations that were forwarded to from store instructions program-order-between and including , and let be the complement of in the memory footprint of . If is not empty: has a fully determined memory footprint; has no unpropagated memory store operations that overlap with ; and if is a load with a memory footprint that overlaps with , then all the memory load operations of that overlap with are satisfied and is non-restartable (see the Propagate store operation transition for how to determined if an instruction is non-restartable). Here, a memory store operation is called fixed if the store instruction has fully determined data. has a fully determined data; and if is not a fence, all program-order-previous conditional branch and indirect jump instructions are finished. Action: if is a conditional branch or indirect jump instruction, discard any untaken paths of execution, i.e., remove all instruction instances that are not reachable by the branch/jump taken in instruction_tree; and record the instruction as finished, i.e., set finished to true. The model covers user-level RV64I and RV64A. In particular, it does not support the misaligned atomicity granule PMA or the total store ordering extension \"Ztso\". It should be trivial to adapt the model to RV32I/A and to the G, Q and C extensions, but we have never tried it. This will involve, mostly, writing Sail code for the instructions, with minimal, if any, changes to the concurrency model. The model covers only normal memory accesses (it does not handle I/O accesses). The model does not cover TLB-related effects. The model assumes the instruction memory is fixed. In particular, the Fetch instruction transition does not generate memory load operations, and the shared memory is not involved in the transition. Instead, the model depends on an external oracle that provides an opcode when given a memory location. The model does not cover exceptions, traps and interrupts.","title":"Formal Memory Model Specifications, Version 0.1","component":"isa","version":"v20250508","name":"mm-formal","url":"/isa/unpriv/mm-formal.html","titles":[{"text":"Formal Axiomatic Specification in Alloy","hash":"alloy","id":1},{"text":"Formal Axiomatic Specification in Herd","hash":"sec:herd","id":2},{"text":"An Operational Memory Model","hash":"operational","id":3},{"text":"Intra-instruction Pseudocode Execution","hash":"pseudocode_exec","id":4},{"text":"Instruction Instance State","hash":"inst_state","id":5},{"text":"Hart State","hash":"hart-state","id":6},{"text":"Shared Memory State","hash":"shared-memory-state","id":7},{"text":"Transitions","hash":"transitions","id":8},{"text":"Fetch instruction","hash":"fetch","id":9},{"text":"Initiate memory load operations","hash":"initiate_load","id":10},{"text":"Satisfy memory load operation by forwarding from unpropagated stores","hash":"sat_by_forwarding","id":11},{"text":"Satisfy memory load operation from memory","hash":"sat_from_mem","id":12},{"text":"Complete load operations","hash":"complete_loads","id":13},{"text":"Early sc fail","hash":"early_sc_fail","id":14},{"text":"Paired sc","hash":"paired_sc","id":15},{"text":"Initiate memory store operation footprints","hash":"initiate_store_footprint","id":16},{"text":"Instantiate memory store operation values","hash":"instantiate_store_value","id":17},{"text":"Commit store instruction","hash":"commit_stores","id":18},{"text":"Propagate store operation","hash":"prop_store","id":19},{"text":"Commit and propagate store operation of an sc","hash":"commit_sc","id":20},{"text":"Late sc fail","hash":"late_sc_fail","id":21},{"text":"Complete store operations","hash":"complete_stores","id":22},{"text":"Satisfy, commit and propagate operations of an AMO","hash":"do_amo","id":23},{"text":"Commit fence","hash":"commit_fence","id":24},{"text":"Register read","hash":"reg_read","id":25},{"text":"Register write","hash":"reg_write","id":26},{"text":"Pseudocode internal step","hash":"sail_interp","id":27},{"text":"Finish instruction","hash":"finish","id":28},{"text":"Limitations","hash":"limitations","id":29}]},"42":{"id":42,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification ISA Extension Naming Conventions This chapter describes the RISC-V ISA extension naming scheme that is used to concisely describe the set of instructions present in a hardware implementation, or the set of instructions used by an application binary interface (ABI). The RISC-V ISA is designed to support a wide variety of implementations with various experimental instruction-set extensions. We have found that an organized naming scheme simplifies software tools and documentation. The ISA naming strings are case insensitive. RISC-V ISA strings begin with either RV32I, RV32E, RV64I, or RV64E, indicating the supported address space size in bits for the base integer ISA. Standard ISA extensions are given a name consisting of a single letter. For example, the first four standard extensions to the integer bases are: \"M\" for integer multiplication and division, \"A\" for atomic memory instructions, \"F\" for single-precision floating-point instructions, and \"D\" for double-precision floating-point instructions. Any RISC-V instruction-set variant can be succinctly described by concatenating the base integer prefix with the names of the included extensions, e.g., \"RV64IMAFD\". We have also defined an abbreviation \"G\" to represent the \"IMAFDZicsr_Zifencei\" base and extensions, as this is intended to represent our standard general-purpose ISA. Standard extensions to the RISC-V ISA are given other reserved letters, e.g., \"Q\" for quad-precision floating-point, or \"C\" for the 16-bit compressed instruction format. Some ISA extensions depend on the presence of other extensions, e.g., \"D\" depends on \"F\" and \"F\" depends on \"Zicsr\". These dependencies may be implicit in the ISA name: for example, RV32IF is equivalent to RV32IFZicsr, and RV32ID is equivalent to RV32IFD and RV32IFDZicsr. Underscores \"_\" may be used to separate ISA extensions to improve readability and to provide disambiguation, e.g., \"RV32I2_M2_A2\". Standard unprivileged extensions can also be named by using a single \"Z\" followed by an alphanumeric name. The name must end with an alphabetical character. The second letter from the end cannot be numeric if the last letter is \"p\". For example, \"Zifencei\" names the instruction-fetch fence extension described in [zifencei]. The first letter following the \"Z\" conventionally indicates the most closely related alphabetical extension category, IMAFDQLCBKJTPVH. For the \"Zfa\" extension for additional floating-point instructions, for example, the letter \"f\" indicates the extension is related to the \"F\" standard extension. If multiple \"Z\" extensions are named, they should be ordered first by category, then alphabetically within a category—for example, \"Zicsr_Zifencei_Ztso\". All multi-letter extensions, including those with the \"Z\" prefix, must be separated from other multi-letter extensions by an underscore, e.g., \"RV32IMACZicsr_Zifencei\". Standard extensions that extend the supervisor-level virtual-memory architecture are prefixed with the letters \"Sv\", followed by an alphanumeric name. Other standard extensions that extend the supervisor-level architecture are prefixed with the letters \"Ss\", followed by an alphanumeric name. The name must end with an alphabetical character. The second letter from the end cannot be numeric if the last letter is \"p\". These extensions are further defined in Volume II. The extensions \"sv32\", \"sv39\", \"sv48\", and \"sv59\" were defined before the rule against extension names ending in numbers was established. Standard supervisor-level extensions should be listed after standard unprivileged extensions, and like other multi-letter extensions, must be separated from other multi-letter extensions by an underscore. If multiple supervisor-level extensions are listed, they should be ordered alphabetically. Standard extensions that extend the hypervisor-level architecture are prefixed with the letters \"Sh\". If multiple hypervisor-level extensions are listed, they should be ordered alphabetically. Many augmentations to the hypervisor-level architecture are more naturally defined as supervisor-level extensions, following the scheme described in the previous section. The \"Sh\" prefix is used by the few hypervisor-level extensions that have no supervisor-visible effects. Standard machine-level instruction-set extensions are prefixed with the letters \"Sm\". Standard machine-level extensions should be listed after standard lesser-privileged extensions, and like other multi-letter extensions, must be separated from other multi-letter extensions by an underscore. If multiple machine-level extensions are listed, they should be ordered alphabetically. Non-standard extensions are named by using a single \"X\" followed by the alphanumeric name. The name must end with an alphabetic character. The second letter from the end cannot be numeric if the last letter is \"p\". For example, \"Xhwacha\" names the Hwacha vector-fetch ISA extension. Non-standard extensions must be listed after all standard extensions, and, like other multi-letter extensions, must be separated from other multi-letter extensions by an underscore. For example, an ISA with non-standard extensions Argle and Bargle may be named \"RV64IZifencei_Xargle_Xbargle\". If multiple non-standard extensions are listed, they should be ordered alphabetically. Like other multi-letter extensions, they should be separated from other multi-letter extensions by an underscore. Recognizing that instruction sets may expand or alter over time, we encode extension version numbers following the extension name. Version numbers are divided into major and minor version numbers, separated by a \"p\". If the minor version is \"0\", then \"p0\" can be omitted from the version string. To avoid ambiguity, no extension name may end with a number or a \"p\" preceded by a number. Because the \"P\" extension for Packed SIMD can be confused for the decimal point in a version number, it must be preceded by an underscore if it follows another extension with a version number. For example, \"rv32i2p2\" means version 2.2 of RV32I, whereas \"rv32i2_p2\" means version 2.0 of RV32I with version 2.0 of the P extension. Changes in major version numbers imply a loss of backwards compatibility, whereas changes in only the minor version number must be backwards-compatible. For example, the original 64-bit standard ISA defined in release 1.0 of this manual can be written in full as \"RV64I1p0M1p0A1p0F1p0D1p0\", more concisely as \"RV64I1M1A1F1D1\". We introduced the version numbering scheme with the second release. Hence, we define the default version of a standard extension to be the version present at that time, e.g., \"RV32I\" is equivalent to \"RV32I2\". Standard ISA extension names. summarizes the standardized extension names. The table also defines the canonical order in which extension names must appear in the name string, with top-to-bottom in table indicating first-to-last in the name string, e.g., RV32IMACV is legal, whereas RV32IMAVC is not. Table 1. Standard ISA extension names. Subset Name Implies Base ISA Integer I Reduced Integer E Standard Unprivileged Extensions Integer Multiplication and Division M Zmmul Atomics A Single-Precision Floating-Point F Zicsr Double-Precision Floating-Point D F General G IMAFDZicsr_Zifencei Quad-Precision Floating-Point Q D 16-bit Compressed Instructions C B Extension B Packed-SIMD Extensions P Vector Extension V D Hypervisor Extension H Additional Standard Unprivileged Extensions Additional Standard unprivileged extensions \"abc\" Zabc Standard Supervisor-Level Extensions Supervisor-level extension \"def\" Ssdef Standard Hypervisor-Level Extensions Hypervisor-level extension \"ghi\" Shghi Standard Machine-Level Extensions Machine-level extension \"jkl\" Smjkl Non-Standard Extensions Non-standard extension \"mno\" Xmno","title":"ISA Extension Naming Conventions","component":"isa","version":"v20250508","name":"naming","url":"/isa/unpriv/naming.html","titles":[{"text":"Case Sensitivity","hash":"case-sensitivity","id":1},{"text":"Base Integer ISA","hash":"base-integer-isa","id":2},{"text":"Instruction-Set Extension Names","hash":"instruction-set-extension-names","id":3},{"text":"Underscores","hash":"underscores","id":4},{"text":"Additional Standard Unprivileged Extension Names","hash":"additional-standard-unprivileged-extension-names","id":5},{"text":"Supervisor-level Instruction-Set Extension Names","hash":"supervisor-level-instruction-set-extension-names","id":6},{"text":"Hypervisor-level Instruction-Set Extension Names","hash":"hypervisor-level-instruction-set-extension-names","id":7},{"text":"Machine-level Instruction-Set Extension Names","hash":"machine-level-instruction-set-extension-names","id":8},{"text":"Non-Standard Extension Names","hash":"non-standard-extension-names","id":9},{"text":"Version Numbers","hash":"version-numbers","id":10},{"text":"Subset Naming Convention","hash":"subset-naming-convention","id":11}]},"43":{"id":43,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Q\" Extension for Quad-Precision Floating-Point, Version 2.2 This chapter describes the Q standard extension for 128-bit quad-precision binary floating-point instructions compliant with the IEEE 754-2008 arithmetic standard. The quad-precision binary floating-point instruction-set extension is named \"Q\"; it depends on the double-precision floating-point extension D. The floating-point registers are now extended to hold either a single, double, or quad-precision floating-point value (FLEN=128). The NaN-boxing scheme described in [nanboxing] is now extended recursively to allow a single-precision value to be NaN-boxed inside a double-precision value which is itself NaN-boxed inside a quad-precision value. New 128-bit variants of LOAD-FP and STORE-FP instructions are added, encoded with a new value for the funct3 width field. FLQ and FSQ are only guaranteed to execute atomically if the effective address is naturally aligned and XLEN=128. FLQ and FSQ do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. A new supported format is added to the format field of most instructions, as shown in Format field encoding. Table 1. Format field encoding. fmt field Mnemonic Meaning 00 S 32-bit single-precision 01 D 64-bit double-precision 10 H 16-bit half-precision 11 Q 128-bit quad-precision The quad-precision floating-point computational instructions are defined analogously to their double-precision counterparts, but operate on quad-precision operands and produce quad-precision results. New floating-point-to-integer and integer-to-floating-point conversion instructions are added. These instructions are defined analogously to the double-precision-to-integer and integer-to-double-precision conversion instructions. FCVT.W.Q or FCVT.L.Q converts a quad-precision floating-point number to a signed 32-bit or 64-bit integer, respectively. FCVT.Q.W or FCVT.Q.L converts a 32-bit or 64-bit signed integer, respectively, into a quad-precision floating-point number. FCVT.WU.Q, FCVT.LU.Q, FCVT.Q.WU, and FCVT.Q.LU variants convert to or from unsigned integer values. FCVT.L[U].Q and FCVT.Q.L[U] are RV64-only instructions. Note FCVT.Q.L[U] always produces an exact result and is unaffected by rounding mode. New floating-point-to-floating-point conversion instructions are added. These instructions are defined analogously to the double-precision floating-point-to-floating-point conversion instructions. FCVT.S.Q or FCVT.Q.S converts a quad-precision floating-point number to a single-precision floating-point number, or vice-versa, respectively. FCVT.D.Q or FCVT.Q.D converts a quad-precision floating-point number to a double-precision floating-point number, or vice-versa, respectively. Floating-point to floating-point sign-injection instructions, FSGNJ.Q, FSGNJN.Q, and FSGNJX.Q are defined analogously to the double-precision sign-injection instruction. FMV.X.Q and FMV.Q.X instructions are not provided in RV32 or RV64, so quad-precision bit patterns must be moved to the integer registers via memory. The quad-precision floating-point compare instructions are defined analogously to their double-precision counterparts, but operate on quad-precision operands. The quad-precision floating-point classify instruction, FCLASS.Q, is defined analogously to its double-precision counterpart, but operates on quad-precision operands.","title":"\"Q\" Extension for Quad-Precision Floating-Point, Version 2.2","component":"isa","version":"v20250508","name":"q-st-ext","url":"/isa/unpriv/q-st-ext.html","titles":[{"text":"Quad-Precision Load and Store Instructions","hash":"quad-precision-load-and-store-instructions","id":1},{"text":"Quad-Precision Computational Instructions","hash":"quad-precision-computational-instructions","id":2},{"text":"Quad-Precision Convert and Move Instructions","hash":"quad-compute","id":3},{"text":"Quad-Precision Floating-Point Compare Instructions","hash":"quad-precision-floating-point-compare-instructions","id":4},{"text":"Quad-Precision Floating-Point Classify Instruction","hash":"quad-float-compare","id":5}]},"44":{"id":44,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification RV32/64G Instruction Set Listings One goal of the RISC-V project is that it be used as a stable software development target. For this purpose, we define a combination of a base ISA (RV32I or RV64I) plus selected standard extensions (IMAFD, Zicsr, Zifencei) as a \"general-purpose\" ISA, and we use the abbreviation G for the IMAFDZicsr_Zifencei combination of instruction-set extensions. This chapter presents opcode maps and instruction-set listings for RV32G and RV64G. Table 1. RISC-V base opcode map, inst[1:0]=11 inst[4:2] 000 001 010 011 100 101 110 111 (>32b) inst[6:5] 00 LOAD LOAD-FP custom-0 MISC-MEM OP-IMM AUIPC OP-IMM-32 reserved 01 STORE STORE-FP custom-1 AMO OP LUI OP-32 reserved 10 MADD MSUB NMSUB NMADD OP-FP OP-V custom-2 reserved 11 BRANCH JALR reserved JAL SYSTEM OP-VE custom-3 reserved RISC-V base opcode map, inst[1:0]=11 shows a map of the major opcodes for RVG. Opcodes marked as reserved should be avoided for custom instruction-set extensions as they might be used by future standard extensions. Major opcodes marked as custom-0 through custom-3 will be avoided by future standard extensions and are recommended for use by custom instruction-set extensions within the base 32-bit instruction format. We believe RV32G and RV64G provide simple but complete instruction sets for a broad range of general-purpose computing. The optional compressed instruction set described in [compressed] can be added (forming RV32GC and RV64GC) to improve performance, code size, and energy efficiency, though with some additional hardware complexity. As we move beyond IMAFDC into further instruction-set extensions, the added instructions tend to be more domain-specific and only provide benefits to a restricted class of applications, e.g., for multimedia or security. Unlike most commercial ISAs, the RISC-V ISA design clearly separates the base ISA and broadly applicable standard extensions from these more specialized additions. [extending] has a more extensive discussion of ways to add extensions to the RISC-V ISA. 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type imm[12|10:5] rs2 rs1 funct3 imm[4:1|11] opcode B-type imm[31:12] rd opcode U-type imm[20|10:1|11|19:12] rd opcode J-type RV32I Base Instruction Set imm[31:12] rd 0110111 LUI imm[31:12] rd 0010111 AUIPC imm[20|10:1|11|19:12] rd 1101111 JAL imm[11:0] rs1 000 rd 1100111 JALR imm[12|10:5] rs2 rs1 000 imm[4:1|11] 1100011 BEQ imm[12|10:5] rs2 rs1 001 imm[4:1|11] 1100011 BNE imm[12|10:5] rs2 rs1 100 imm[4:1|11] 1100011 BLT imm[12|10:5] rs2 rs1 101 imm[4:1|11] 1100011 BGE imm[12|10:5] rs2 rs1 110 imm[4:1|11] 1100011 BLTU imm[12|10:5] rs2 rs1 111 imm[4:1|11] 1100011 BGEU imm[11:0] rs1 000 rd 0000011 LB imm[11:0] rs1 001 rd 0000011 LH imm[11:0] rs1 010 rd 0000011 LW imm[11:0] rs1 100 rd 0000011 LBU imm[11:0] rs1 101 rd 0000011 LHU imm[11:5] rs2 rs1 000 imm[4:0] 0100011 SB imm[11:5] rs2 rs1 001 imm[4:0] 0100011 SH imm[11:5] rs2 rs1 010 imm[4:0] 0100011 SW imm[11:0] rs1 000 rd 0010011 ADDI imm[11:0] rs1 010 rd 0010011 SLTI imm[11:0] rs1 011 rd 0010011 SLTIU imm[11:0] rs1 100 rd 0010011 XORI imm[11:0] rs1 110 rd 0010011 ORI imm[11:0] rs1 111 rd 0010011 ANDI 0000000 shamt rs1 001 rd 0010011 SLLI 0000000 shamt rs1 101 rd 0010011 SRLI 0100000 shamt rs1 101 rd 0010011 SRAI 0000000 rs2 rs1 000 rd 0110011 ADD 0100000 rs2 rs1 000 rd 0110011 SUB 0000000 rs2 rs1 001 rd 0110011 SLL 0000000 rs2 rs1 010 rd 0110011 SLT 0000000 rs2 rs1 011 rd 0110011 SLTU 0000000 rs2 rs1 100 rd 0110011 XOR 0000000 rs2 rs1 101 rd 0110011 SRL 0100000 rs2 rs1 101 rd 0110011 SRA 0000000 rs2 rs1 110 rd 0110011 OR 0000000 rs2 rs1 111 rd 0110011 AND fm pred succ rs1 000 rd 0001111 FENCE 1000 0011 0011 00000 000 00000 0001111 FENCE.TSO 0000 0001 0000 00000 000 00000 0001111 PAUSE 000000000000 00000 000 00000 1110011 ECALL 000000000001 00000 000 00000 1110011 EBREAK 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type RV64I Base Instruction Set (in addition to RV32I) imm[11:0] rs1 110 rd 0000011 LWU imm[11:0] rs1 011 rd 0000011 LD imm[11:5] rs2 rs1 011 imm[4:0] 0100011 SD 000000 shamt rs1 001 rd 0010011 SLLI 000000 shamt rs1 101 rd 0010011 SRLI 010000 shamt rs1 101 rd 0010011 SRAI imm[11:0] rs1 000 rd 0011011 ADDIW 0000000 shamt rs1 001 rd 0011011 SLLIW 0000000 shamt rs1 101 rd 0011011 SRLIW 0100000 shamt rs1 101 rd 0011011 SRAIW 0000000 rs2 rs1 000 rd 0111011 ADDW 0100000 rs2 rs1 000 rd 0111011 SUBW 0000000 rs2 rs1 001 rd 0111011 SLLW 0000000 rs2 rs1 101 rd 0111011 SRLW 0100000 rs2 rs1 101 rd 0111011 SRAW RV32/RV64 Zifencei Standard Extension imm[11:0] rs1 001 rd 0001111 FENCE.I RV32/RV64 Zicsr Standard Extension csr rs1 001 rd 1110011 CSRRW csr rs1 010 rd 1110011 CSRRS csr rs1 011 rd 1110011 CSRRC csr uimm 101 rd 1110011 CSRRWI csr uimm 110 rd 1110011 CSRRSI csr uimm 111 rd 1110011 CSRRCI RV32M Standard Extension 0000001 rs2 rs1 000 rd 0110011 MUL 0000001 rs2 rs1 001 rd 0110011 MULH 0000001 rs2 rs1 010 rd 0110011 MULHSU 0000001 rs2 rs1 011 rd 0110011 MULHU 0000001 rs2 rs1 100 rd 0110011 DIV 0000001 rs2 rs1 101 rd 0110011 DIVU 0000001 rs2 rs1 110 rd 0110011 REM 0000001 rs2 rs1 111 rd 0110011 REMU RV64M Standard Extension (in addition to RV32M) 0000001 rs2 rs1 000 rd 0111011 MULW 0000001 rs2 rs1 100 rd 0111011 DIVW 0000001 rs2 rs1 101 rd 0111011 DIVUW 0000001 rs2 rs1 110 rd 0111011 REMW 0000001 rs2 rs1 111 rd 0111011 REMUW 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type RV32A Standard Extension 00010 aq rl 00000 rs1 010 rd 0101111 LR.W 00011 aq rl rs2 rs1 010 rd 0101111 SC.W 00001 aq rl rs2 rs1 010 rd 0101111 AMOSWAP.W 00000 aq rl rs2 rs1 010 rd 0101111 AMOADD.W 00100 aq rl rs2 rs1 010 rd 0101111 AMOXOR.W 01100 aq rl rs2 rs1 010 rd 0101111 AMOAND.W 01000 aq rl rs2 rs1 010 rd 0101111 AMOOR.W 10000 aq rl rs2 rs1 010 rd 0101111 AMOMIN.W 10100 aq rl rs2 rs1 010 rd 0101111 AMOMAX.W 11000 aq rl rs2 rs1 010 rd 0101111 AMOMINU.W 11100 aq rl rs2 rs1 010 rd 0101111 AMOMAXU.W RV64A Standard Extension (in addition to RV32A) 00010 aq rl 00000 rs1 011 rd 0101111 LR.D 00011 aq rl rs2 rs1 011 rd 0101111 SC.D 00001 aq rl rs2 rs1 011 rd 0101111 AMOSWAP.D 00000 aq rl rs2 rs1 011 rd 0101111 AMOADD.D 00100 aq rl rs2 rs1 011 rd 0101111 AMOXOR.D 01100 aq rl rs2 rs1 011 rd 0101111 AMOAND.D 01000 aq rl rs2 rs1 011 rd 0101111 AMOOR.D 10000 aq rl rs2 rs1 011 rd 0101111 AMOMIN.D 10100 aq rl rs2 rs1 011 rd 0101111 AMOMAX.D 11000 aq rl rs2 rs1 011 rd 0101111 AMOMINU.D 11100 aq rl rs2 rs1 011 rd 0101111 AMOMAXU.D 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type rs3 funct2 rs2 rs1 funct3 rd opcode R4-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type RV32F Standard Extension imm[11:0] rs1 010 rd 0000111 FLW imm[11:5] rs2 rs1 010 imm[4:0] 0100111 FSW rs3 00 rs2 rs1 rm rd 1000011 FMADD.S rs3 00 rs2 rs1 rm rd 1000111 FMSUB.S rs3 00 rs2 rs1 rm rd 1001011 FNMSUB.S rs3 00 rs2 rs1 rm rd 1001111 FNMADD.S 0000000 rs2 rs1 rm rd 1010011 FADD.S 0000100 rs2 rs1 rm rd 1010011 FSUB.S 0001000 rs2 rs1 rm rd 1010011 FMUL.S 0001100 rs2 rs1 rm rd 1010011 FDIV.S 0101100 00000 rs1 rm rd 1010011 FSQRT.S 0010000 rs2 rs1 000 rd 1010011 FSGNJ.S 0010000 rs2 rs1 001 rd 1010011 FSGNJN.S 0010000 rs2 rs1 010 rd 1010011 FSGNJX.S 0010100 rs2 rs1 000 rd 1010011 FMIN.S 0010100 rs2 rs1 001 rd 1010011 FMAX.S 1100000 00000 rs1 rm rd 1010011 FCVT.W.S 1100000 00001 rs1 rm rd 1010011 FCVT.WU.S 1110000 00000 rs1 000 rd 1010011 FMV.X.W 1010000 rs2 rs1 010 rd 1010011 FEQ.S 1010000 rs2 rs1 001 rd 1010011 FLT.S 1010000 rs2 rs1 000 rd 1010011 FLE.S 1110000 00000 rs1 001 rd 1010011 FCLASS.S 1101000 00000 rs1 rm rd 1010011 FCVT.S.W 1101000 00001 rs1 rm rd 1010011 FCVT.S.WU 1111000 00000 rs1 000 rd 1010011 FMV.W.X RV64F Standard Extension (in addition to RV32F) 1100000 00010 rs1 rm rd 1010011 FCVT.L.S 1100000 00011 rs1 rm rd 1010011 FCVT.LU.S 1101000 00010 rs1 rm rd 1010011 FCVT.S.L 1101000 00011 rs1 rm rd 1010011 FCVT.S.LU 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type rs3 funct2 rs2 rs1 funct3 rd opcode R4-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type RV32D Standard Extension imm[11:0] rs1 011 rd 0000111 FLD imm[11:5] rs2 rs1 011 imm[4:0] 0100111 FSD rs3 01 rs2 rs1 rm rd 1000011 FMADD.D rs3 01 rs2 rs1 rm rd 1000111 FMSUB.D rs3 01 rs2 rs1 rm rd 1001011 FNMSUB.D rs3 01 rs2 rs1 rm rd 1001111 FNMADD.D 0000001 rs2 rs1 rm rd 1010011 FADD.D 0000101 rs2 rs1 rm rd 1010011 FSUB.D 0001001 rs2 rs1 rm rd 1010011 FMUL.D 0001101 rs2 rs1 rm rd 1010011 FDIV.D 0101101 00000 rs1 rm rd 1010011 FSQRT.D 0010001 rs2 rs1 000 rd 1010011 FSGNJ.D 0010001 rs2 rs1 001 rd 1010011 FSGNJN.D 0010001 rs2 rs1 010 rd 1010011 FSGNJX.D 0010101 rs2 rs1 000 rd 1010011 FMIN.D 0010101 rs2 rs1 001 rd 1010011 FMAX.D 0100000 00001 rs1 rm rd 1010011 FCVT.S.D 0100001 00000 rs1 rm rd 1010011 FCVT.D.S 1010001 rs2 rs1 010 rd 1010011 FEQ.D 1010001 rs2 rs1 001 rd 1010011 FLT.D 1010001 rs2 rs1 000 rd 1010011 FLE.D 1110001 00000 rs1 001 rd 1010011 FCLASS.D 1100001 00000 rs1 rm rd 1010011 FCVT.W.D 1100001 00001 rs1 rm rd 1010011 FCVT.WU.D 1101001 00000 rs1 rm rd 1010011 FCVT.D.W 1101001 00001 rs1 rm rd 1010011 FCVT.D.WU RV64D Standard Extension (in addition to RV32D) 1100001 00010 rs1 rm rd 1010011 FCVT.L.D 1100001 00011 rs1 rm rd 1010011 FCVT.LU.D 1110001 00000 rs1 000 rd 1010011 FMV.X.D 1101001 00010 rs1 rm rd 1010011 FCVT.D.L 1101001 00011 rs1 rm rd 1010011 FCVT.D.LU 1111001 00000 rs1 000 rd 1010011 FMV.D.X 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type rs3 funct2 rs2 rs1 funct3 rd opcode R4-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type rs3 funct2 rs2 rs1 funct3 rd opcode R4-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type RV32Q Standard Extension imm[11:0] rs1 100 rd 0000111 FLQ imm[11:5] rs2 rs1 100 imm[4:0] 0100111 FSQ rs3 11 rs2 rs1 rm rd 1000011 FMADD.Q rs3 11 rs2 rs1 rm rd 1000111 FMSUB.Q rs3 11 rs2 rs1 rm rd 1001011 FNMSUB.Q rs3 11 rs2 rs1 rm rd 1001111 FNMADD.Q 0000011 rs2 rs1 rm rd 1010011 FADD.Q 0000111 rs2 rs1 rm rd 1010011 FSUB.Q 0001011 rs2 rs1 rm rd 1010011 FMUL.Q 0001111 rs2 rs1 rm rd 1010011 FDIV.Q 0101111 00000 rs1 rm rd 1010011 FSQRT.Q 0010011 rs2 rs1 000 rd 1010011 FSGNJ.Q 0010011 rs2 rs1 001 rd 1010011 FSGNJN.Q 0010011 rs2 rs1 010 rd 1010011 FSGNJX.Q 0010111 rs2 rs1 000 rd 1010011 FMIN.Q 0010111 rs2 rs1 001 rd 1010011 FMAX.Q 0100000 00011 rs1 rm rd 1010011 FCVT.S.Q 0100011 00000 rs1 rm rd 1010011 FCVT.Q.S 0100001 00011 rs1 rm rd 1010011 FCVT.D.Q 0100011 00001 rs1 rm rd 1010011 FCVT.Q.D 1010011 rs2 rs1 010 rd 1010011 FEQ.Q 1010011 rs2 rs1 001 rd 1010011 FLT.Q 1010011 rs2 rs1 000 rd 1010011 FLE.Q 1110011 00000 rs1 001 rd 1010011 FCLASS.Q 1100011 00000 rs1 rm rd 1010011 FCVT.W.Q 1100011 00001 rs1 rm rd 1010011 FCVT.WU.Q 1101011 00000 rs1 rm rd 1010011 FCVT.Q.W 1101011 00001 rs1 rm rd 1010011 FCVT.Q.WU RV64Q Standard Extension (in addition to RV32Q) 1100011 00010 rs1 rm rd 1010011 FCVT.L.Q 1100011 00011 rs1 rm rd 1010011 FCVT.LU.Q 1101011 00010 rs1 rm rd 1010011 FCVT.Q.L 1101011 00011 rs1 rm rd 1010011 FCVT.Q.LU 31 27 26 25 24 20 19 15 14 12 11 7 6 0 funct7 rs2 rs1 funct3 rd opcode R-type rs3 funct2 rs2 rs1 funct3 rd opcode R4-type imm[11:0] rs1 funct3 rd opcode I-type imm[11:5] rs2 rs1 funct3 imm[4:0] opcode S-type RV32Zfh Standard Extension imm[11:0] rs1 001 rd 0000111 FLH imm[11:5] rs2 rs1 001 imm[4:0] 0100111 FSH rs3 10 rs2 rs1 rm rd 1000011 FMADD.H rs3 10 rs2 rs1 rm rd 1000111 FMSUB.H rs3 10 rs2 rs1 rm rd 1001011 FNMSUB.H rs3 10 rs2 rs1 rm rd 1001111 FNMADD.H 0000010 rs2 rs1 rm rd 1010011 FADD.H 0000110 rs2 rs1 rm rd 1010011 FSUB.H 0001010 rs2 rs1 rm rd 1010011 FMUL.H 0001110 rs2 rs1 rm rd 1010011 FDIV.H 0101110 00000 rs1 rm rd 1010011 FSQRT.H 0010010 rs2 rs1 000 rd 1010011 FSGNJ.H 0010010 rs2 rs1 001 rd 1010011 FSGNJN.H 0010010 rs2 rs1 010 rd 1010011 FSGNJX.H 0010110 rs2 rs1 000 rd 1010011 FMIN.H 0010110 rs2 rs1 001 rd 1010011 FMAX.H 0100000 00010 rs1 rm rd 1010011 FCVT.S.H 0100010 00000 rs1 rm rd 1010011 FCVT.H.S 0100001 00010 rs1 rm rd 1010011 FCVT.D.H 0100010 00001 rs1 rm rd 1010011 FCVT.H.D 0100011 00010 rs1 rm rd 1010011 FCVT.Q.H 0100010 00011 rs1 rm rd 1010011 FCVT.H.Q 1010010 rs2 rs1 010 rd 1010011 FEQ.H 1010010 rs2 rs1 001 rd 1010011 FLT.H 1010010 rs2 rs1 000 rd 1010011 FLE.H 1110010 00000 rs1 001 rd 1010011 FCLASS.H 1100010 00000 rs1 rm rd 1010011 FCVT.W.H 1100010 00001 rs1 rm rd 1010011 FCVT.WU.H 1110010 00000 rs1 000 rd 1010011 FMV.X.H 1101010 00000 rs1 rm rd 1010011 FCVT.H.W 1101010 00001 rs1 rm rd 1010011 FCVT.H.WU 1111010 00000 rs1 000 rd 1010011 FMV.H.X RV64Zfh Standard Extension (in addition to RV32Zfh) 1100010 00010 rs1 rm rd 1010011 FCVT.L.H 1100010 00011 rs1 rm rd 1010011 FCVT.LU.H 1101010 00010 rs1 rm rd 1010011 FCVT.H.L 1101010 00011 rs1 rm rd 1010011 FCVT.H.LU Zawrs Standard Extension 000000001101 00000 000 00000 1110011 WRS.NTO 000000011101 00000 000 00000 1110011 WRS.STO RISC-V control and status register (CSR) address map. lists the CSRs that have currently been allocated CSR addresses. The timers, counters, and floating-point CSRs are the only CSRs defined in this specification. Table 2. RISC-V control and status register (CSR) address map. Number Privilege Name Description Floating-Point Control and Status Registers 0x001 Read write fflags Floating-Point Accrued Exceptions. 0x002 Read write frm Floating-Point Dynamic Rounding Mode. 0x003 Read write fcsr Floating-Point Control and Status Register (frm + fflags). Counters and Timers 0xC00 Read-only cycle Cycle counter for RDCYCLE instruction. 0xC01 Read-only time Timer for RDTIME instruction. 0xC02 Read-only instret Instructions-retired counter for RDINSTRET instruction. 0xC80 Read-only cycleh Upper 32 bits of cycle, RV32I only. 0xC81 Read-only timeh Upper 32 bits of time, RV32I only. 0xC82 Read-only instreth Upper 32 bits of instret, RV32I only.","title":"RV32/64G Instruction Set Listings","component":"isa","version":"v20250508","name":"rv-32-64g","url":"/isa/unpriv/rv-32-64g.html","titles":[]},"45":{"id":45,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification RV32I Base Integer Instruction Set This chapter describes the RV32I base integer instruction set. RV32I was designed to be sufficient to form a compiler target and to support modern operating system environments. The ISA was also designed to reduce the hardware required in a minimal implementation. RV32I contains 40 unique instructions, though a simple implementation might cover the ECALL/EBREAK instructions with a single SYSTEM hardware instruction that always traps and might be able to implement the FENCE instruction as a NOP, reducing base instruction count to 38 total. RV32I can emulate almost any other ISA extension (except the A extension, which requires additional hardware support for atomicity). In practice, a hardware implementation including the machine-mode privileged architecture will also require the 6 CSR instructions. Subsets of the base integer ISA might be useful for pedagogical purposes, but the base has been defined such that there should be little incentive to subset a real hardware implementation beyond omitting support for misaligned memory accesses and treating all SYSTEM instructions as a single trap. The standard RISC-V assembly language syntax is documented in the Assembly Programmer’s Manual [11]. Most of the commentary for RV32I also applies to the RV64I base. RISC-V base unprivileged integer register state. shows the unprivileged state for the base integer ISA. For RV32I, the 32 x registers are each 32 bits wide, i.e., XLEN=32. Register x0 is hardwired with all bits equal to 0. General purpose registers x1-x31 hold values that various instructions interpret as a collection of Boolean values, or as two’s complement signed binary integers or unsigned binary integers. There is one additional unprivileged register: the program counter pc holds the address of the current instruction. Table 1. RISC-V base unprivileged integer register state. XLEN-1 0 x0/zero x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 pc There is no dedicated stack pointer or subroutine return address link register in the Base Integer ISA; the instruction encoding allows any x register to be used for these purposes. However, the standard software calling convention uses register x1 to hold the return address for a call, with register x5 available as an alternate link register. The standard calling convention uses register x2 as the stack pointer. Hardware might choose to accelerate function calls and returns that use x1 or x5. See the descriptions of the JAL and JALR instructions. The optional compressed 16-bit instruction format is designed around the assumption that x1 is the return address register and x2 is the stack pointer. Software using other conventions will operate correctly but may have greater code size. The number of available architectural registers can have large impacts on code size, performance, and energy consumption. Although 16 registers would arguably be sufficient for an integer ISA running compiled code, it is impossible to encode a complete ISA with 16 registers in 16-bit instructions using a 3-address format. Although a 2-address format would be possible, it would increase instruction count and lower efficiency. We wanted to avoid intermediate instruction sizes (such as Xtensa’s 24-bit instructions) to simplify base hardware implementations, and once a 32-bit instruction size was adopted, it was straightforward to support 32 integer registers. A larger number of integer registers also helps performance on high-performance code, where there can be extensive use of loop unrolling, software pipelining, and cache tiling. For these reasons, we chose a conventional size of 32 integer registers for RV32I. Dynamic register usage tends to be dominated by a few frequently accessed registers, and register file implementations can be optimized to reduce access energy for the frequently accessed registers [12]. The optional compressed 16-bit instruction format mostly only accesses 8 registers and hence can provide a dense instruction encoding, while additional instruction-set extensions could support a much larger register space (either flat or hierarchical) if desired. For resource-constrained embedded applications, we have defined the RV32E subset, which only has 16 registers (RV32E and RV64E Base Integer Instruction Sets). In the base RV32I ISA, there are four core instruction formats (R/I/S/U), as shown in Base instruction formats. All are a fixed 32 bits in length. The base ISA has IALIGN=32, meaning that instructions must be aligned on a four-byte boundary in memory. An instruction-address-misaligned exception is generated on a taken branch or unconditional jump if the target address is not IALIGN-bit aligned. This exception is reported on the branch or jump instruction, not on the target instruction. No instruction-address-misaligned exception is generated for a conditional branch that is not taken. The alignment constraint for base ISA instructions is relaxed to a two-byte boundary when instruction extensions with 16-bit lengths or other odd multiples of 16-bit lengths are added (i.e., IALIGN=16). Instruction-address-misaligned exceptions are reported on the branch or jump that would cause instruction misalignment to help debugging, and to simplify hardware design for systems with IALIGN=32, where these are the only places where misalignment can occur. The behavior upon decoding a reserved instruction is UNSPECIFIED. Some platforms may require that opcodes reserved for standard use raise an illegal-instruction exception. Other platforms may permit reserved opcode space be used for non-conforming extensions. The RISC-V ISA keeps the source (rs1 and rs2) and destination (rd) registers at the same position in all formats to simplify decoding. Except for the 5-bit immediates used in CSR instructions ([csrinsts]), immediates are always sign-extended, and are generally packed towards the leftmost available bits in the instruction and have been allocated to reduce hardware complexity. In particular, the sign bit for all immediates is always in bit 31 of the instruction to speed sign-extension circuitry. RISC-V base instruction formats. Each immediate subfield is labeled with the bit position (imm[x]) in the immediate value being produced, rather than the bit position within the instruction’s immediate field as is usually done. Decoding register specifiers is usually on the critical paths in implementations, and so the instruction format was chosen to keep all register specifiers at the same position in all formats at the expense of having to move immediate bits across formats (a property shared with RISC-IV aka. SPUR [8]). In practice, most immediates are either small or require all XLEN bits. We chose an asymmetric immediate split (12 bits in regular instructions plus a special load-upper-immediate instruction with 20 bits) to increase the opcode space available for regular instructions. Immediates are sign-extended because we did not observe a benefit to using zero extension for some immediates as in the MIPS ISA and wanted to keep the ISA as simple as possible. There are a further two variants of the instruction formats (B/J) based on the handling of immediates, as shown in Base instruction formats immediate variants.. The only difference between the S and B formats is that the 12-bit immediate field is used to encode branch offsets in multiples of 2 in the B format. Instead of shifting all bits in the instruction-encoded immediate left by one in hardware as is conventionally done, the middle bits (imm[10:1]) and sign bit stay in fixed positions, while the lowest bit in S format (inst[7]) encodes a high-order bit in B format. Similarly, the only difference between the U and J formats is that the 20-bit immediate is shifted left by 12 bits to form U immediates and by 1 bit to form J immediates. The location of instruction bits in the U and J format immediates is chosen to maximize overlap with the other formats and with each other. Immediate types shows the immediates produced by each of the base instruction formats, and is labeled to show which instruction bit (inst[y]) produces each bit of the immediate value. Figure 1. Types of immediate produced by RISC-V instructions. Figure 2. Types of immediate produced by RISC-V instructions. The fields are labeled with the instruction bits used to construct their value. Sign extensions always uses inst[31]. Sign extension is one of the most critical operations on immediates (particularly for XLEN>32), and in RISC-V the sign bit for all immediates is always held in bit 31 of the instruction to allow sign extension to proceed in parallel with instruction decoding. Although more complex implementations might have separate adders for branch and jump calculations and so would not benefit from keeping the location of immediate bits constant across types of instruction, we wanted to reduce the hardware cost of the simplest implementations. By rotating bits in the instruction encoding of B and J immediates instead of using dynamic hardware multiplexers to multiply the immediate by 2, we reduce instruction signal fanout and immediate multiplexer costs by around a factor of 2. The scrambled immediate encoding will add negligible time to static or ahead-of-time compilation. For dynamic generation of instructions, there is some small additional overhead, but the most common short forward branches have straightforward immediate encodings. Most integer computational instructions operate on XLEN bits of values held in the integer register file. Integer computational instructions are either encoded as register-immediate operations using the I-type format or as register-register operations using the R-type format. The destination is register rd for both register-immediate and register-register instructions. No integer computational instructions cause arithmetic exceptions. We did not include special instruction-set support for overflow checks on integer arithmetic operations in the base instruction set, as many overflow checks can be cheaply implemented using RISC-V branches. Overflow checking for unsigned addition requires only a single additional branch instruction after the addition: add t0, t1, t2; bltu t0, t1, overflow. For signed addition, if one operand’s sign is known, overflow checking requires only a single branch after the addition: addi t0, t1, +imm; blt t0, t1, overflow. This covers the common case of addition with an immediate operand. For general signed addition, three additional instructions after the addition are required, leveraging the observation that the sum should be less than one of the operands if and only if the other operand is negative. add t0, t1, t2 slti t3, t2, 0 slt t4, t0, t1 bne t3, t4, overflow In RV64I, checks of 32-bit signed additions can be optimized further by comparing the results of ADD and ADDW on the operands. ADDI adds the sign-extended 12-bit immediate to register rs1. Arithmetic overflow is ignored and the result is simply the low XLEN bits of the result. ADDI rd, rs1, 0 is used to implement the MV rd, rs1 assembler pseudoinstruction. SLTI (set less than immediate) places the value 1 in register rd if register rs1 is less than the sign-extended immediate when both are treated as signed numbers, else 0 is written to rd. SLTIU is similar but compares the values as unsigned numbers (i.e., the immediate is first sign-extended to XLEN bits then treated as an unsigned number). Note, SLTIU rd, rs1, 1 sets rd to 1 if rs1 equals zero, otherwise sets rd to 0 (assembler pseudoinstruction SEQZ rd, rs). ANDI, ORI, XORI are logical operations that perform bitwise AND, OR, and XOR on register rs1 and the sign-extended 12-bit immediate and place the result in rd. Note, XORI rd, rs1, -1 performs a bitwise logical inversion of register rs1 (assembler pseudoinstruction NOT rd, rs). Shifts by a constant are encoded as a specialization of the I-type format. The operand to be shifted is in rs1, and the shift amount is encoded in the lower 5 bits of the I-immediate field. The right shift type is encoded in bit 30. SLLI is a logical left shift (zeros are shifted into the lower bits); SRLI is a logical right shift (zeros are shifted into the upper bits); and SRAI is an arithmetic right shift (the original sign bit is copied into the vacated upper bits). LUI (load upper immediate) is used to build 32-bit constants and uses the U-type format. LUI places the 32-bit U-immediate value into the destination register rd, filling in the lowest 12 bits with zeros. AUIPC (add upper immediate to pc) is used to build pc-relative addresses and uses the U-type format. AUIPC forms a 32-bit offset from the U-immediate, filling in the lowest 12 bits with zeros, adds this offset to the address of the AUIPC instruction, then places the result in register rd. The assembly syntax for lui and auipc does not represent the lower 12 bits of the U-immediate, which are always zero. The AUIPC instruction supports two-instruction sequences to access arbitrary offsets from the PC for both control-flow transfers and data accesses. The combination of an AUIPC and the 12-bit immediate in a JALR can transfer control to any 32-bit PC-relative address, while an AUIPC plus the 12-bit immediate offset in regular load or store instructions can access any 32-bit PC-relative data address. The current PC can be obtained by setting the U-immediate to 0. Although a JAL +4 instruction could also be used to obtain the local PC (of the instruction following the JAL), it might cause pipeline breaks in simpler microarchitectures or pollute BTB structures in more complex microarchitectures. RV32I defines several arithmetic R-type operations. All operations read the rs1 and rs2 registers as source operands and write the result into register rd. The funct7 and funct3 fields select the type of operation. ADD performs the addition of rs1 and rs2. SUB performs the subtraction of rs2 from rs1. Overflows are ignored and the low XLEN bits of results are written to the destination rd. SLT and SLTU perform signed and unsigned compares respectively, writing 1 to rd if rs1 < rs2, 0 otherwise. Note, SLTU rd, x0, rs2 sets rd to 1 if rs2 is not equal to zero, otherwise sets rd to zero (assembler pseudoinstruction SNEZ rd, rs). AND, OR, and XOR perform bitwise logical operations. SLL, SRL, and SRA perform logical left, logical right, and arithmetic right shifts on the value in register rs1 by the shift amount held in the lower 5 bits of register rs2. The NOP instruction does not change any architecturally visible state, except for advancing the pc and incrementing any applicable performance counters. NOP is encoded as ADDI x0, x0, 0. NOPs can be used to align code segments to microarchitecturally significant address boundaries, or to leave space for inline code modifications. Although there are many possible ways to encode a NOP, we define a canonical NOP encoding to allow microarchitectural optimizations as well as for more readable disassembly output. The other NOP encodings are made available for \"Zfh\" and \"HINT Instructions. ADDI was chosen for the NOP encoding as this is most likely to take fewest resources to execute across a range of systems (if not optimized away in decode). In particular, the instruction only reads one register. Also, an ADDI functional unit is more likely to be available in a superscalar design as adds are the most common operation. In particular, address-generation functional units can execute ADDI using the same hardware needed for base+offset address calculations, while register-register ADD or logical/shift operations require additional hardware. RV32I provides two types of control transfer instructions: unconditional jumps and conditional branches. Control transfer instructions in RV32I do not have architecturally visible delay slots. If an instruction access-fault or instruction page-fault exception occurs on the target of a jump or taken branch, the exception is reported on the target instruction, not on the jump or branch instruction. The jump and link (JAL) instruction uses the J-type format, where the J-immediate encodes a signed offset in multiples of 2 bytes. The offset is sign-extended and added to the address of the jump instruction to form the jump target address. Jumps can therefore target a ±1 MiB range. JAL stores the address of the instruction following the jump ('pc'+4) into register rd. The standard software calling convention uses 'x1' as the return address register and 'x5' as an alternate link register. The alternate link register supports calling millicode routines (e.g., those to save and restore registers in compressed code) while preserving the regular return address register. The register x5 was chosen as the alternate link register as it maps to a temporary in the standard calling convention, and has an encoding that is only one bit different than the regular link register. Plain unconditional jumps (assembler pseudoinstruction J) are encoded as a JAL with rd=x0. The indirect jump instruction JALR (jump and link register) uses the I-type encoding. The target address is obtained by adding the sign-extended 12-bit I-immediate to the register rs1, then setting the least-significant bit of the result to zero. The address of the instruction following the jump (pc+4) is written to register rd. Register x0 can be used as the destination if the result is not required. Plain unconditional indirect jumps (assembler pseudoinstruction JR) are encoded as a JALR with rd=x0. Procedure returns in the standard calling convention (assembler pseudoinstruction RET) are encoded as a JALR with rd=x0, rs1=x1, and imm=0. The unconditional jump instructions all use PC-relative addressing to help support position-independent code. The JALR instruction was defined to enable a two-instruction sequence to jump anywhere in a 32-bit absolute address range. A LUI instruction can first load rs1 with the upper 20 bits of a target address, then JALR can add in the lower bits. Similarly, AUIPC then JALR can jump anywhere in a 32-bit pc-relative address range. Note that the JALR instruction does not treat the 12-bit immediate as multiples of 2 bytes, unlike the conditional branch instructions. This avoids one more immediate format in hardware. In practice, most uses of JALR will have either a zero immediate or be paired with a LUI or AUIPC, so the slight reduction in range is not significant. Clearing the least-significant bit when calculating the JALR target address both simplifies the hardware slightly and allows the low bit of function pointers to be used to store auxiliary information. Although there is potentially a slight loss of error checking in this case, in practice jumps to an incorrect instruction address will usually quickly raise an exception. When used with a base rs1=x0, JALR can be used to implement a single instruction subroutine call to the lowest or highest address region from anywhere in the address space, which could be used to implement fast calls to a small runtime library. Alternatively, an ABI could dedicate a general-purpose register to point to a library elsewhere in the address space. The JAL and JALR instructions will generate an instruction-address-misaligned exception if the target address is not aligned to a four-byte boundary. Instruction-address-misaligned exceptions are not possible on machines that support extensions with 16-bit aligned instructions, such as the compressed instruction-set extension, C. Return-address prediction stacks are a common feature of high-performance instruction-fetch units, but require accurate detection of instructions used for procedure calls and returns to be effective. For RISC-V, hints as to the instructions' usage are encoded implicitly via the register numbers used. A JAL instruction should push the return address onto a return-address stack (RAS) only when rd is 'x1' or x5. JALR instructions should push/pop a RAS as shown in Return-address stack prediction hints encoded in the register operands of a JALR instruction.. Table 2. Return-address stack prediction hints encoded in the register operands of a JALR instruction. rd is x1/x5 rs1 is x1/x5 rd=rs1 RAS action No No — None No Yes — Pop Yes No — Push Yes Yes No Pop, then push Yes Yes Yes Push Some other ISAs added explicit hint bits to their indirect-jump instructions to guide return-address stack manipulation. We use implicit hinting tied to register numbers and the calling convention to reduce the encoding space used for these hints. When two different link registers (x1 and x5) are given as rs1 and rd, then the RAS is both popped and pushed to support coroutines. If rs1 and rd are the same link register (either x1 or x5), the RAS is only pushed to enable macro-op fusion of the sequences: lui ra, imm20; jalr ra, imm12(ra)_ and _auipc ra, imm20; jalr ra, imm12(ra) All branch instructions use the B-type instruction format. The 12-bit B-immediate encodes signed offsets in multiples of 2 bytes. The offset is sign-extended and added to the address of the branch instruction to give the target address. The conditional branch range is ±4 KiB. Branch instructions compare two registers. BEQ and BNE take the branch if registers rs1 and rs2 are equal or unequal respectively. BLT and BLTU take the branch if rs1 is less than rs2, using signed and unsigned comparison respectively. BGE and BGEU take the branch if rs1 is greater than or equal to rs2, using signed and unsigned comparison respectively. Note, BGT, BGTU, BLE, and BLEU can be synthesized by reversing the operands to BLT, BLTU, BGE, and BGEU, respectively. Signed array bounds may be checked with a single BLTU instruction, since any negative index will compare greater than any nonnegative bound. Software should be optimized such that the sequential code path is the most common path, with less-frequently taken code paths placed out of line. Software should also assume that backward branches will be predicted taken and forward branches as not taken, at least the first time they are encountered. Dynamic predictors should quickly learn any predictable branch behavior. Unlike some other architectures, the RISC-V jump (JAL with rd=x0) instruction should always be used for unconditional branches instead of a conditional branch instruction with an always-true condition. RISC-V jumps are also PC-relative and support a much wider offset range than branches, and will not pollute conditional-branch prediction tables. The conditional branches were designed to include arithmetic comparison operations between two registers (as also done in PA-RISC, Xtensa, and MIPS R6), rather than use condition codes (x86, ARM, SPARC, PowerPC), or to only compare one register against zero (Alpha, MIPS), or two registers only for equality (MIPS). This design was motivated by the observation that a combined compare-and-branch instruction fits into a regular pipeline, avoids additional condition code state or use of a temporary register, and reduces static code size and dynamic instruction fetch traffic. Another point is that comparisons against zero require non-trivial circuit delay (especially after the move to static logic in advanced processes) and so are almost as expensive as arithmetic magnitude compares. Another advantage of a fused compare-and-branch instruction is that branches are observed earlier in the front-end instruction stream, and so can be predicted earlier. There is perhaps an advantage to a design with condition codes in the case where multiple branches can be taken based on the same condition codes, but we believe this case to be relatively rare. We considered but did not include static branch hints in the instruction encoding. These can reduce the pressure on dynamic predictors, but require more instruction encoding space and software profiling for best results, and can result in poor performance if production runs do not match profiling runs. We considered but did not include conditional moves or predicated instructions, which can effectively replace unpredictable short forward branches. Conditional moves are the simpler of the two, but are difficult to use with conditional code that might cause exceptions (memory accesses and floating-point operations). Predication adds additional flag state to a system, additional instructions to set and clear flags, and additional encoding overhead on every instruction. Both conditional move and predicated instructions add complexity to out-of-order microarchitectures, adding an implicit third source operand due to the need to copy the original value of the destination architectural register into the renamed destination physical register if the predicate is false. Also, static compile-time decisions to use predication instead of branches can result in lower performance on inputs not included in the compiler training set, especially given that unpredictable branches are rare, and becoming rarer as branch prediction techniques improve. We note that various microarchitectural techniques exist to dynamically convert unpredictable short forward branches into internally predicated code to avoid the cost of flushing pipelines on a branch mispredict [13], [14], [15] and have been implemented in commercial processors [16]. The simplest techniques just reduce the penalty of recovering from a mispredicted short forward branch by only flushing instructions in the branch shadow instead of the entire fetch pipeline, or by fetching instructions from both sides using wide instruction fetch or idle instruction fetch slots. More complex techniques for out-of-order cores add internal predicates on instructions in the branch shadow, with the internal predicate value written by the branch instruction, allowing the branch and following instructions to be executed speculatively and out-of-order with respect to other code. The conditional branch instructions will generate an instruction-address-misaligned exception if the target address is not aligned to a four-byte boundary and the branch condition evaluates to true. If the branch condition evaluates to false, the instruction-address-misaligned exception will not be raised. Instruction-address-misaligned exceptions are not possible on machines that support extensions with 16-bit aligned instructions, such as the compressed instruction-set extension, C. RV32I is a load-store architecture, where only load and store instructions access memory and arithmetic instructions only operate on CPU registers. RV32I provides a 32-bit address space that is byte-addressed. The EEI will define what portions of the address space are legal to access with which instructions (e.g., some addresses might be read only, or support word access only). Loads with a destination of x0 must still raise any exceptions and cause any other side effects even though the load value is discarded. The EEI will define whether the memory system is little-endian or big-endian. In RISC-V, endianness is byte-address invariant. In a system for which endianness is byte-address invariant, the following property holds: if a byte is stored to memory at some address in some endianness, then a byte-sized load from that address in any endianness returns the stored value. In a little-endian configuration, multibyte stores write the least-significant register byte at the lowest memory byte address, followed by the other register bytes in ascending order of their significance. Loads similarly transfer the contents of the lesser memory byte addresses to the less-significant register bytes. In a big-endian configuration, multibyte stores write the most-significant register byte at the lowest memory byte address, followed by the other register bytes in descending order of their significance. Loads similarly transfer the contents of the greater memory byte addresses to the less-significant register bytes. Load and store instructions transfer a value between the registers and memory. Loads are encoded in the I-type format and stores are S-type. The effective address is obtained by adding register rs1 to the sign-extended 12-bit offset. Loads copy a value from memory to register rd. Stores copy the value in register rs2 to memory. The LW instruction loads a 32-bit value from memory into rd. LH loads a 16-bit value from memory, then sign-extends to 32-bits before storing in rd. LHU loads a 16-bit value from memory but then zero extends to 32-bits before storing in rd. LB and LBU are defined analogously for 8-bit values. The SW, SH, and SB instructions store 32-bit, 16-bit, and 8-bit values from the low bits of register rs2 to memory. Regardless of EEI, loads and stores whose effective addresses are naturally aligned shall not raise an address-misaligned exception. Loads and stores whose effective address is not naturally aligned to the referenced datatype (i.e., the effective address is not divisible by the size of the access in bytes) have behavior dependent on the EEI. An EEI may guarantee that misaligned loads and stores are fully supported, and so the software running inside the execution environment will never experience a contained or fatal address-misaligned trap. In this case, the misaligned loads and stores can be handled in hardware, or via an invisible trap into the execution environment implementation, or possibly a combination of hardware and invisible trap depending on address. An EEI may not guarantee misaligned loads and stores are handled invisibly. In this case, loads and stores that are not naturally aligned may either complete execution successfully or raise an exception. The exception raised can be either an address-misaligned exception or an access-fault exception. For a memory access that would otherwise be able to complete except for the misalignment, an access-fault exception can be raised instead of an address-misaligned exception if the misaligned access should not be emulated, e.g., if accesses to the memory region have side effects. When an EEI does not guarantee misaligned loads and stores are handled invisibly, the EEI must define if exceptions caused by address misalignment result in a contained trap (allowing software running inside the execution environment to handle the trap) or a fatal trap (terminating execution). Misaligned accesses are occasionally required when porting legacy code, and help performance on applications when using any form of packed-SIMD extension or handling externally packed data structures. Our rationale for allowing EEIs to choose to support misaligned accesses via the regular load and store instructions is to simplify the addition of misaligned hardware support. One option would have been to disallow misaligned accesses in the base ISAs and then provide some separate ISA support for misaligned accesses, either special instructions to help software handle misaligned accesses or a new hardware addressing mode for misaligned accesses. Special instructions are difficult to use, complicate the ISA, and often add new processor state (e.g., SPARC VIS align address offset register) or complicate access to existing processor state (e.g., MIPS LWL/LWR partial register writes). In addition, for loop-oriented packed-SIMD code, the extra overhead when operands are misaligned motivates software to provide multiple forms of loop depending on operand alignment, which complicates code generation and adds to loop startup overhead. New misaligned hardware addressing modes take considerable space in the instruction encoding or require very simplified addressing modes (e.g., register indirect only). Even when misaligned loads and stores complete successfully, these accesses might run extremely slowly depending on the implementation (e.g., when implemented via an invisible trap). Furthermore, whereas naturally aligned loads and stores are guaranteed to execute atomically, misaligned loads and stores might not, and hence require additional synchronization to ensure atomicity. We do not mandate atomicity for misaligned accesses so execution environment implementations can use an invisible machine trap and a software handler to handle some or all misaligned accesses. If hardware misaligned support is provided, software can exploit this by simply using regular load and store instructions. Hardware can then automatically optimize accesses depending on whether runtime addresses are aligned. FENCE instructions are used to order device I/O and memory accesses as viewed by other RISC-V harts and external devices or coprocessors. Any combination of device input (I), device output (O), memory reads (R), and memory writes (W) may be ordered with respect to any combination of the same. Informally, no other RISC-V hart or external device can observe any operation in the successor set following a FENCE before any operation in the predecessor set preceding the FENCE. \"RVWMO Memory Consistency Model provides a precise description of the RISC-V memory consistency model. FENCE instructions also order memory reads and writes made by the hart as observed by memory reads and writes made by an external device. However, FENCE instructions do not order observations of events made by an external device using any other signaling mechanism. A device might observe an access to a memory location via some external communication mechanism, e.g., a memory-mapped control register that drives an interrupt signal to an interrupt controller. This communication is outside the scope of the FENCE ordering mechanism and hence FENCE instructions can provide no guarantee on when a change in the interrupt signal is visible to the interrupt controller. Specific devices might provide additional ordering guarantees to reduce software overhead but those are outside the scope of the RISC-V memory model. The EEI will define what I/O operations are possible, and in particular, which memory addresses when accessed by load and store instructions will be treated and ordered as device input and device output operations respectively rather than memory reads and writes. For example, memory-mapped I/O devices will typically be accessed with uncached loads and stores that are ordered using the I and O bits rather than the R and W bits. Instruction-set extensions might also describe new I/O instructions that will also be ordered using the I and O bits in a FENCE instruction. Table 3. Fence mode encoding fm field Mnemonic suffix Meaning 0000 none Normal Fence 1000 .TSO With FENCE RW,RW: exclude write-to-read ordering; otherwise: Reserved for future use. other other Reserved for future use. The FENCE mode field fm defines the semantics of the FENCE instruction. A FENCE (with fm=0000) orders all memory operations in its predecessor set before all memory operations in its successor set. A FENCE.TSO instruction is encoded as a FENCE instruction with fm=1000, predecessor=RW, and successor=RW. FENCE.TSO orders all load operations in its predecessor set before all memory operations in its successor set, and all store operations in its predecessor set before all store operations in its successor set. This leaves non-AMO store operations in the FENCE.TSO’s predecessor set unordered with non-AMO loads in its successor set. Because FENCE RW,RW imposes a superset of the orderings that FENCE.TSO imposes, it is correct to ignore the fm field and implement FENCE.TSO as FENCE RW,RW. The unused fields in the FENCE instructions--rs1 and rd--are reserved for finer-grain fences in future extensions. For forward compatibility, base implementations shall ignore these fields, and standard software shall zero these fields. Likewise, many fm and predecessor/successor set settings are also reserved for future use. Base implementations shall treat all such reserved configurations as FENCE instructions (with fm=0000), and standard software shall use only non-reserved configurations. We chose a relaxed memory model to allow high performance from simple machine implementations and from likely future coprocessor or accelerator extensions. We separate out I/O ordering from memory R/W ordering to avoid unnecessary serialization within a device-driver hart and also to support alternative non-memory paths to control added coprocessors or I/O devices. Simple implementations may additionally ignore the predecessor and successor fields and always execute a conservative FENCE on all operations. SYSTEM instructions are used to access system functionality that might require privileged access and are encoded using the I-type instruction format. These can be divided into two main classes: those that atomically read-modify-write control and status registers (CSRs), and all other potentially privileged instructions. CSR instructions are described in [csrinsts], and the base unprivileged instructions are described in the following section. The SYSTEM instructions are defined to allow simpler implementations to always trap to a single software trap handler. More sophisticated implementations might execute more of each system instruction in hardware. These two instructions cause a precise requested trap to the supporting execution environment. The ECALL instruction is used to make a service request to the execution environment. The EEI will define how parameters for the service request are passed, but usually these will be in defined locations in the integer register file. The EBREAK instruction is used to return control to a debugging environment. ECALL and EBREAK were previously named SCALL and SBREAK. The instructions have the same functionality and encoding, but were renamed to reflect that they can be used more generally than to call a supervisor-level operating system or debugger. EBREAK was primarily designed to be used by a debugger to cause execution to stop and fall back into the debugger. EBREAK is also used by the standard GCC compiler to mark code paths that should not be executed. Another use of EBREAK is to support \"semihosting\", where the execution environment includes a debugger that can provide services over an alternate system call interface built around the EBREAK instruction. Because the RISC-V base ISAs do not provide more than one EBREAK instruction, RISC-V semihosting uses a special sequence of instructions to distinguish a semihosting EBREAK from a debugger inserted EBREAK. slli x0, x0, 0x1f # Entry NOP ebreak # Break to debugger srai x0, x0, 7 # Exit NOP Note that these three instructions must be 32-bit-wide instructions, i.e., they mustn’t be among the compressed 16-bit instructions described in \"C\" Extension for Compressed Instructions. The shift NOP instructions are still considered available for use as HINTs. Semihosting is a form of service call and would be more naturally encoded as an ECALL using an existing ABI, but this would require the debugger to be able to intercept ECALLs, which is a newer addition to the debug standard. We intend to move over to using ECALLs with a standard ABI, in which case, semihosting can share a service ABI with an existing standard. We note that ARM processors have also moved to using SVC instead of BKPT for semihosting calls in newer designs. RV32I reserves a large encoding space for HINT instructions, which are usually used to communicate performance hints to the microarchitecture. Like the NOP instruction, HINTs do not change any architecturally visible state, except for advancing the pc and any applicable performance counters. Implementations are always allowed to ignore the encoded hints. Most RV32I HINTs are encoded as integer computational instructions with rd=x0. The other RV32I HINTs are encoded as FENCE instructions with a null predecessor or successor set and with fm=0. These HINT encodings have been chosen so that simple implementations can ignore HINTs altogether, and instead execute a HINT as a regular instruction that happens not to mutate the architectural state. For example, ADD is a HINT if the destination register is x0; the five-bit rs1 and rs2 fields encode arguments to the HINT. However, a simple implementation can simply execute the HINT as an ADD of rs1 and rs2 that writes x0, which has no architecturally visible effect. As another example, a FENCE instruction with a zero pred field and a zero fm field is a HINT; the succ, rs1, and rd fields encode the arguments to the HINT. A simple implementation can simply execute the HINT as a FENCE that orders the null set of prior memory accesses before whichever subsequent memory accesses are encoded in the succ field. Since the intersection of the predecessor and successor sets is null, the instruction imposes no memory orderings, and so it has no architecturally visible effect. RV32I HINT instructions. lists all RV32I HINT code points. 91% of the HINT space is reserved for standard HINTs. The remainder of the HINT space is designated for custom HINTs: no standard HINTs will ever be defined in this subspace. We anticipate standard hints to eventually include memory-system spatial and temporal locality hints, branch prediction hints, thread-scheduling hints, security tags, and instrumentation flags for simulation/emulation. Table 4. RV32I HINT instructions. Instruction Constraints Code Points Purpose LUI rd=x0 Designated for future standard use AUIPC rd=x0 ADDI rd=x0, and either rs1≠x0 or imm≠0 ANDI rd=x0 ORI rd=x0 XORI rd=x0 ADD rd=x0, rs1≠x0 ADD rd=x0, rs1=x0, rs2≠x2-x5 28 ADD rd=x0, rs1=x0, rs2=x2-x5 4 (rs2=x2) NTL.P1 (rs2=x3) NTL.PALL (rs2=x4) NTL.S1 (rs2=x5) NTL.ALL SLLI rd=x0, rs1=x0, shamt=31 1 Semihosting entry marker SRAI rd=x0, rs1=x0, shamt=7 1 Semihosting exit marker SUB rd=x0 Designated for future standard use AND rd=x0 OR rd=x0 XOR rd=x0 SLL rd=x0 SRL rd=x0 SRA rd=x0 FENCE rd=x0, rs1≠x0, fm=0, and either pred=0 or succ=0 FENCE rd≠x0, rs1=x0, fm=0, and either pred=0 or succ=0 FENCE rd=rs1=x0, fm=0, pred=0, succ≠0 15 FENCE rd=rs1=x0, fm=0, pred≠W, succ=0 15 FENCE rd=rs1=x0, fm=0, pred=W, succ=0 1 PAUSE SLTI rd=x0 Designated for custom use SLTIU rd=x0 SLLI rd=x0, and either rs1≠x0 or shamt≠31 SRLI rd=x0 SRAI rd=x0, and either rs1≠x0 or shamt≠7 SLT rd=x0 SLTU rd=x0 slli x0, x0, 0x1f and srai x0, x0, 7 were previously designated as custom HINTs, but they have been appropriated for use in semihosting calls, as described in Environment Call and Breakpoints. To reflect their usage in practice, the base ISA spec has been changed to designate them as standard HINTs.","title":"RV32I Base Integer Instruction Set, Version 2.1","component":"isa","version":"v20250508","name":"rv32","url":"/isa/unpriv/rv32.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Programmers' Model for Base Integer ISA","hash":"programmers-model-for-base-integer-isa","id":2},{"text":"Base Instruction Formats","hash":"base-instruction-formats","id":3},{"text":"Immediate Encoding Variants","hash":"immediate-encoding-variants","id":4},{"text":"Integer Computational Instructions","hash":"integer-computational-instructions","id":5},{"text":"Integer Register-Immediate Instructions","hash":"integer-register-immediate-instructions","id":6},{"text":"Integer Register-Register Operations","hash":"integer-register-register-operations","id":7},{"text":"NOP Instruction","hash":"nop-instruction","id":8},{"text":"Control Transfer Instructions","hash":"control-transfer-instructions","id":9},{"text":"Unconditional Jumps","hash":"unconditional-jumps","id":10},{"text":"Conditional Branches","hash":"conditional-branches","id":11},{"text":"Load and Store Instructions","hash":"ldst","id":12},{"text":"Memory Ordering Instructions","hash":"fence","id":13},{"text":"Environment Call and Breakpoints","hash":"ecall-ebreak","id":14},{"text":"HINT Instructions","hash":"hint-instructions","id":15}]},"46":{"id":46,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification RV32E and RV64E Base Integer Instruction Sets, Version 2.0 RV32E and RV64E are reduced versions of RV32I and RV64I, respectively: the only change is to reduce the number of integer registers to 16. This chapter only outlines the differences between RV32E/RV64E and RV32I/RV64I, and so should be read after [rv32] and [rv64]. RV32E was designed to provide an even smaller base core for embedded microcontrollers. There is also interest in RV64E for microcontrollers within large SoC designs, and to reduce context state for highly threaded 64-bit processors. Unless otherwise stated, standard extensions compatible with RV32I and RV64I are also compatible with RV32E and RV64E, respectively. RV32E and RV64E reduce the integer register count to 16 general-purpose registers, (x0-x15), where x0 is a dedicated zero register. We have found that in the small RV32I core implementations, the upper 16 registers consume around one quarter of the total area of the core excluding memories, thus their removal saves around 25% core area with a corresponding core power reduction. RV32E and RV64E use the same instruction-set encoding as RV32I and RV64I respectively, except that only registers x0-x15 are provided. All encodings specifying the other registers x16-x31 are reserved. The previous draft of this chapter made all encodings using the x16-x31 registers available as custom. This version takes a more conservative approach, making these reserved so that they can be allocated between custom space or new standard encodings at a later date.","title":"RV32E and RV64E Base Integer Instruction Sets, Version 2.0","component":"isa","version":"v20250508","name":"rv32e","url":"/isa/unpriv/rv32e.html","titles":[{"text":"RV32E and RV64E Programmers’ Model","hash":"rv32e-and-rv64e-programmers-model","id":1},{"text":"RV32E and RV64E Instruction Set Encoding","hash":"rv32e-and-rv64e-instruction-set-encoding","id":2}]},"47":{"id":47,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification RV64I Base Integer Instruction Set This chapter describes the RV64I base integer instruction set, which builds upon the RV32I variant described in [rv32]. This chapter presents only the differences with RV32I, so should be read in conjunction with the earlier chapter. RV64I widens the integer registers and supported user address space to 64 bits (XLEN=64 in [gprs]). Most integer computational instructions operate on XLEN-bit values. Additional instruction variants are provided to manipulate 32-bit values in RV64I, indicated by a 'W' suffix to the opcode. These \"*W\" instructions ignore the upper 32 bits of their inputs and always produce 32-bit signed values, sign-extending them to 64 bits, i.e. bits XLEN-1 through 31 are equal. The compiler and calling convention maintain an invariant that all 32-bit values are held in a sign-extended format in 64-bit registers. Even 32-bit unsigned integers extend bit 31 into bits 63 through 32. Consequently, conversion between unsigned and signed 32-bit integers is a no-op, as is conversion from a signed 32-bit integer to a signed 64-bit integer. Existing 64-bit wide SLTU and unsigned branch compares still operate correctly on unsigned 32-bit integers under this invariant. Similarly, existing 64-bit wide logical operations on 32-bit sign-extended integers preserve the sign-extension property. A few new instructions (ADD[I]W/SUBW/SxxW) are required for addition and shifts to ensure reasonable performance for 32-bit values. ADDIW is an RV64I instruction that adds the sign-extended 12-bit immediate to register rs1 and produces the proper sign extension of a 32-bit result in rd. Overflows are ignored and the result is the low 32 bits of the result sign-extended to 64 bits. Note, ADDIW rd, rs1, 0 writes the sign extension of the lower 32 bits of register rs1 into register rd (assembler pseudoinstruction SEXT.W). Shifts by a constant are encoded as a specialization of the I-type format using the same instruction opcode as RV32I. The operand to be shifted is in rs1, and the shift amount is encoded in the lower 6 bits of the I-immediate field for RV64I. The right shift type is encoded in bit 30. SLLI is a logical left shift (zeros are shifted into the lower bits); SRLI is a logical right shift (zeros are shifted into the upper bits); and SRAI is an arithmetic right shift (the original sign bit is copied into the vacated upper bits). SLLIW, SRLIW, and SRAIW are RV64I-only instructions that are analogously defined but operate on 32-bit values and sign-extend their 32-bit results to 64 bits. SLLIW, SRLIW, and SRAIW encodings with imm[5] ≠ 0 are reserved. Previously, SLLIW, SRLIW, and SRAIW with imm[5] ≠ 0 were defined to cause illegal-instruction exceptions, whereas now they are marked as reserved. This is a backwards-compatible change. LUI (load upper immediate) uses the same opcode as RV32I. LUI places the 32-bit U-immediate into register rd, filling in the lowest 12 bits with zeros. The 32-bit result is sign-extended to 64 bits. AUIPC (add upper immediate to pc) uses the same opcode as RV32I. AUIPC is used to build pc-relative addresses and uses the U-type format. AUIPC forms a 32-bit offset from the U-immediate, filling in the lowest 12 bits with zeros, sign-extends the result to 64 bits, adds it to the address of the AUIPC instruction, then places the result in register rd. Note that the set of address offsets that can be formed by pairing LUI with LD, AUIPC with JALR, etc. in RV64I is [ , ]. ADDW and SUBW are RV64I-only instructions that are defined analogously to ADD and SUB but operate on 32-bit values and produce signed 32-bit results. Overflows are ignored, and the low 32-bits of the result is sign-extended to 64-bits and written to the destination register. SLL, SRL, and SRA perform logical left, logical right, and arithmetic right shifts on the value in register rs1 by the shift amount held in register rs2. In RV64I, only the low 6 bits of rs2 are considered for the shift amount. SLLW, SRLW, and SRAW are RV64I-only instructions that are analogously defined but operate on 32-bit values and sign-extend their 32-bit results to 64 bits. The shift amount is given by rs2[4:0]. RV64I extends the address space to 64 bits. The execution environment will define what portions of the address space are legal to access. The LD instruction loads a 64-bit value from memory into register rd for RV64I. The LW instruction loads a 32-bit value from memory and sign-extends this to 64 bits before storing it in register rd for RV64I. The LWU instruction, on the other hand, zero-extends the 32-bit value from memory for RV64I. LH and LHU are defined analogously for 16-bit values, as are LB and LBU for 8-bit values. The SD, SW, SH, and SB instructions store 64-bit, 32-bit, 16-bit, and 8-bit values from the low bits of register rs2 to memory respectively. All instructions that are microarchitectural HINTs in RV32I (see [rv32]) are also HINTs in RV64I. The additional computational instructions in RV64I expand both the standard and custom HINT encoding spaces. RV64I HINT instructions. lists all RV64I HINT code points. 91% of the HINT space is reserved for standard HINTs, but none are presently defined. The remainder of the HINT space is designated for custom HINTs; no standard HINTs will ever be defined in this subspace. Table 1. RV64I HINT instructions. Instruction Constraints Code Points Purpose LUI rd=x0 Designated for future standard use AUIPC rd=x0 ADDI rd=x0, and either rs1≠x0 or imm≠0 ANDI rd=x0 ORI rd=x0 XORI rd=x0 ADDIW rd=x0 ADD rd=x0, rs1≠x0 ADD rd=x0, rs1=x0, rs2≠x2-x5 28 ADD rd=x0, rs1=x0, rs2=x2-x5 4 (rs2=x2) NTL.P1 (rs2=x3) NTL.PALL (rs2=x4) NTL.S1 (rs2=x5) NTL.ALL SLLI rd=x0, rs1=x0, shamt=31 1 Semihosting entry marker SRAI rd=x0, rs1=x0, shamt=7 1 Semihosting exit marker SUB rd=x0 Designated for future standard use AND rd=x0 OR rd=x0 XOR rd=x0 SLL rd=x0 SRL rd=x0 SRA rd=x0 ADDW rd=x0 SUBW rd=x0 SLLW rd=x0 SRLW rd=x0 SRAW rd=x0 FENCE rd=x0, rs1≠x0,fm=0, and either pred=0 or succ=0 FENCE rd≠x0, rs1=x0, fm=0, and either pred=0 or succ=0 FENCE rd=rs1=x0, fm=0, pred=0, succ≠0 15 FENCE pred=0 or succ=0, pred≠W, succ =0 15 FENCE rd=rs1=x0, fm=0, pred=W, succ=0 1 PAUSE SLTI rd=x0 Designated for custom use SLTIU rd=x0 SLLI rd=x0, and either rs1≠x0 or shamt≠31 SRLI rd=x0 SRAI rd=x0, and either rs1≠x0 or shamt≠7 SLLIW rd=x0 SRLIW rd=x0 SRAIW rd=x0 SLT rd=x0 SLTU rd=x0 slli x0, x0, 0x1f and srai x0, x0, 7 were previously designated as custom HINTs, but they have been appropriated for use in semihosting calls, as described in [ecall-ebreak]. To reflect their usage in practice, the base ISA spec has been changed to designate them as standard HINTs.","title":"RV64I Base Integer Instruction Set, Version 2.1","component":"isa","version":"v20250508","name":"rv64","url":"/isa/unpriv/rv64.html","titles":[{"text":"Register State","hash":"register-state","id":1},{"text":"Integer Computational Instructions","hash":"integer-computational-instructions","id":2},{"text":"Integer Register-Immediate Instructions","hash":"integer-register-immediate-instructions","id":3},{"text":"Integer Register-Register Operations","hash":"integer-register-register-operations","id":4},{"text":"Load and Store Instructions","hash":"load-and-store-instructions","id":5},{"text":"HINT Instructions","hash":"rv64i-hints","id":6}]},"48":{"id":48,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification RVWMO Memory Consistency Model, Version 2.0 This chapter defines the RISC-V memory consistency model. A memory consistency model is a set of rules specifying the values that can be returned by loads of memory. RISC-V uses a memory model called \"RVWMO\" (RISC-V Weak Memory Ordering) which is designed to provide flexibility for architects to build high-performance scalable designs while simultaneously supporting a tractable programming model. Under RVWMO, code running on a single hart appears to execute in order from the perspective of other memory instructions in the same hart, but memory instructions from another hart may observe the memory instructions from the first hart being executed in a different order. Therefore, multithreaded code may require explicit synchronization to guarantee ordering between memory instructions from different harts. The base RISC-V ISA provides a FENCE instruction for this purpose, described in [fence], while the atomics extension \"A\" additionally defines load-reserved/store-conditional and atomic read-modify-write instructions. The standard ISA extension for total store ordering \"Ztso\" ([ztso]) augments RVWMO with additional rules specific to those extensions. The appendices to this specification provide both axiomatic and operational formalizations of the memory consistency model as well as additional explanatory material. This chapter defines the memory model for regular main memory operations. The interaction of the memory model with I/O memory, instruction fetches, FENCE.I, page table walks, and SFENCE.VMA is not (yet) formalized. Some or all of the above may be formalized in a future revision of this specification. Future ISA extensions such as the V vector and J JIT extensions will need to be incorporated into a future revision as well. Memory consistency models supporting overlapping memory accesses of different widths simultaneously remain an active area of academic research and are not yet fully understood. The specifics of how memory accesses of different sizes interact under RVWMO are specified to the best of our current abilities, but they are subject to revision should new issues be uncovered. The RVWMO memory model is defined in terms of the global memory order, a total ordering of the memory operations produced by all harts. In general, a multithreaded program has many different possible executions, with each execution having its own corresponding global memory order. The global memory order is defined over the primitive load and store operations generated by memory instructions. It is then subject to the constraints defined in the rest of this chapter. Any execution satisfying all of the memory model constraints is a legal execution (as far as the memory model is concerned). The program order over memory operations reflects the order in which the instructions that generate each load and store are logically laid out in that hart’s dynamic instruction stream; i.e., the order in which a simple in-order processor would execute the instructions of that hart. Memory-accessing instructions give rise to memory operations. A memory operation can be either a load operation, a store operation, or both simultaneously. All memory operations are single-copy atomic: they can never be observed in a partially complete state. Among instructions in RV32GC and RV64GC, each aligned memory instruction gives rise to exactly one memory operation, with two exceptions. First, an unsuccessful SC instruction does not give rise to any memory operations. Second, FLD and FSD instructions may each give rise to multiple memory operations if XLEN<64, as stated in [fld_fsd] and clarified below. An aligned AMO gives rise to a single memory operation that is both a load operation and a store operation simultaneously. Future ISA extensions such as V (vector) and P (SIMD) may give rise to multiple memory operations. However, the memory model for these extensions has not yet been formalized. A misaligned load or store instruction may be decomposed into a set of component memory operations of any granularity. An FLD or FSD instruction for which XLEN<64 may also be decomposed into a set of component memory operations of any granularity. The memory operations generated by such instructions are not ordered with respect to each other in program order, but they are ordered normally with respect to the memory operations generated by preceding and subsequent instructions in program order. The atomics extension \"A\" does not require execution environments to support misaligned atomic instructions at all. However, if misaligned atomics are supported via the misaligned atomicity granule PMA, then AMOs within an atomicity granule are not decomposed, nor are loads and stores defined in the base ISAs, nor are loads and stores of no more than XLEN bits defined in the F, D, and Q extensions. The decomposition of misaligned memory operations down to byte granularity facilitates emulation on implementations that do not natively support misaligned accesses. Such implementations might, for example, simply iterate over the bytes of a misaligned access one by one. An LR instruction and an SC instruction are said to be paired if the LR precedes the SC in program order and if there are no other LR or SC instructions in between; the corresponding memory operations are said to be paired as well (except in case of a failed SC, where no store operation is generated). The complete list of conditions determining whether an SC must succeed, may succeed, or must fail is defined in [sec:lrsc]. Load and store operations may also carry one or more ordering annotations from the following set: \"acquire-RCpc\", \"acquire-RCsc\", \"release-RCpc\", and \"release-RCsc\". An AMO or LR instruction with aq set has an \"acquire-RCsc\" annotation. An AMO or SC instruction with rl set has a \"release-RCsc\" annotation. An AMO, LR, or SC instruction with both aq and rl set has both \"acquire-RCsc\" and \"release-RCsc\" annotations. For convenience, we use the term \"acquire annotation\" to refer to an acquire-RCpc annotation or an acquire-RCsc annotation. Likewise, a \"release annotation\" refers to a release-RCpc annotation or a release-RCsc annotation. An \"RCpc annotation\" refers to an acquire-RCpc annotation or a release-RCpc annotation. An RCsc annotation refers to an acquire-RCsc annotation or a release-RCsc annotation. In the memory model literature, the term \"RCpc\" stands for release consistency with processor-consistent synchronization operations, and the term \"RCsc\" stands for release consistency with sequentially consistent synchronization operations. While there are many different definitions for acquire and release annotations in the literature, in the context of RVWMO these terms are concisely and completely defined by Preserved Program Order rules 5-7. \"RCpc\" annotations are currently only used when implicitly assigned to every memory access per the standard extension \"Ztso\" ([ztso]). Furthermore, although the ISA does not currently contain native load-acquire or store-release instructions, nor RCpc variants thereof, the RVWMO model itself is designed to be forwards-compatible with the potential addition of any or all of the above into the ISA in a future extension. The definition of the RVWMO memory model depends in part on the notion of a syntactic dependency, defined as follows. In the context of defining dependencies, a register refers either to an entire general-purpose register, some portion of a CSR, or an entire CSR. The granularity at which dependencies are tracked through CSRs is specific to each CSR and is defined in CSR Dependency Tracking Granularity. Syntactic dependencies are defined in terms of instructions' source registers, instructions' destination registers, and the way instructions carry a dependency from their source registers to their destination registers. This section provides a general definition of all of these terms; however, Source and Destination Register Listings provides a complete listing of the specifics for each instruction. In general, a register r other than x0 is a source register for an instruction i if any of the following hold: In the opcode of i, rs1, rs2, or rs3 is set to r i is a CSR instruction, and in the opcode of i, csr is set to r, unless i is CSRRW or CSRRWI and rd is set to x0 r is a CSR and an implicit source register for i, as defined in Source and Destination Register Listings r is a CSR that aliases with another source register for i Memory instructions also further specify which source registers are address source registers and which are data source registers. In general, a register r other than x0 is a destination register for an instruction i if any of the following hold: In the opcode of i, rd is set to r i is a CSR instruction, and in the opcode of i, csr is set to r, unless i is CSRRS or CSRRC and rs1 is set to x0 or i is CSRRSI or CSRRCI and uimm[4:0] is set to zero. r is a CSR and an implicit destination register for i, as defined in Source and Destination Register Listings r is a CSR that aliases with another destination register for i Most non-memory instructions carry a dependency from each of their source registers to each of their destination registers. However, there are exceptions to this rule; see Source and Destination Register Listings. Instruction j has a syntactic dependency on instruction i via destination register s of i and source register r of j if either of the following hold: s is the same as r, and no instruction program-ordered between i and j has r as a destination register There is an instruction m program-ordered between i and j such that all of the following hold: j has a syntactic dependency on m via destination register q and source register r m has a syntactic dependency on i via destination register s and source register p m carries a dependency from p to q Finally, in the definitions that follow, let a and b be two memory operations, and let i and j be the instructions that generate a and b, respectively. b has a syntactic address dependency on a if r is an address source register for j and j has a syntactic dependency on i via source register r b has a syntactic data dependency on a if b is a store operation, r is a data source register for j, and j has a syntactic dependency on i via source register r b has a syntactic control dependency on a if there is an instruction m program-ordered between i and j such that m is a branch or indirect jump and m has a syntactic dependency on i. Generally speaking, non-AMO load instructions do not have data source registers, and unconditional non-AMO store instructions do not have destination registers. However, a successful SC instruction is considered to have the register specified in rd as a destination register, and hence it is possible for an instruction to have a syntactic dependency on a successful SC instruction that precedes it in program order. The global memory order for any given execution of a program respects some but not all of each hart’s program order. The subset of program order that must be respected by the global memory order is known as preserved program order. The complete definition of preserved program order is as follows (and note that AMOs are simultaneously both loads and stores): memory operation a precedes memory operation b in preserved program order (and hence also in the global memory order) if a precedes b in program order, a and b both access regular main memory (rather than I/O regions), and any of the following hold: Overlapping-Address Orderings: b is a store, and a and b access overlapping memory addresses a and b are loads, x is a byte read by both a and b, there is no store to x between a and b in program order, and a and b return values for x written by different memory operations a is generated by an AMO or SC instruction, b is a load, and b returns a value written by a Explicit Synchronization There is a FENCE instruction that orders a before b a has an acquire annotation b has a release annotation a and b both have RCsc annotations a is paired with b Syntactic Dependencies b has a syntactic address dependency on a b has a syntactic data dependency on a b is a store, and b has a syntactic control dependency on a Pipeline Dependencies b is a load, and there exists some store m between a and b in program order such that m has an address or data dependency on a, and b returns a value written by m b is a store, and there exists some instruction m between a and b in program order such that m has an address dependency on a An execution of a RISC-V program obeys the RVWMO memory consistency model only if there exists a global memory order conforming to preserved program order and satisfying the load value axiom, the atomicity axiom, and the progress axiom. Each byte of each load i returns the value written to that byte by the store that is the latest in global memory order among the following stores: Stores that write that byte and that precede i in the global memory order Stores that write that byte and that precede i in program order If r and w are paired load and store operations generated by aligned LR and SC instructions in a hart h, s is a store to byte x, and r returns a value written by s, then s must precede w in the global memory order, and there can be no store from a hart other than h to byte x following s and preceding w in the global memory order. The Atomicity Axiom theoretically supports LR/SC pairs of different widths and to mismatched addresses, since implementations are permitted to allow SC operations to succeed in such cases. However, in practice, we expect such patterns to be rare, and their use is discouraged. No memory operation may be preceded in the global memory order by an infinite sequence of other memory operations. Table 1. Granularities at which syntactic dependencies are tracked through CSRs Name Portions Tracked as Independent Units Aliases fflags Bits 4, 3, 2, 1, 0 fcsr frm entire CSR fcsr fcsr Bits 7-5, 4, 3, 2, 1, 0 fflags, frm Note: read-only CSRs are not listed, as they do not participate in the definition of syntactic dependencies. This section provides a concrete listing of the source and destination registers for each instruction. These listings are used in the definition of syntactic dependencies in Syntactic Dependencies. The term \"accumulating CSR\" is used to describe a CSR that is both a source and a destination register, but which carries a dependency only from itself to itself. Instructions carry a dependency from each source register in the \"Source Registers\" column to each destination register in the \"Destination Registers\" column, from each source register in the \"Source Registers\" column to each CSR in the \"Accumulating CSRs\" column, and from each CSR in the \"Accumulating CSRs\" column to itself, except where annotated otherwise. Key: AAddress source register DData source register † The instruction does not carry a dependency from any source register to any destination register ‡ The instruction carries dependencies from source register(s) to destination register(s) as specified Table 2. RV32I Base Integer Instruction Set Source Registers Destination Registers Accumulating CSRs LUI rd AUIPC rd JAL rd JALR† rs1 rd BEQ rs1, rs2 BNE rs1, rs2 BLT rs1, rs2 BGE rs1, rs2 BLTU rs1, rs2 BGEU rs1, rs2 LB † rs1 A rd LH † rs1 A rd LW † rs1 A rd LBU † rs1 A rd LHU † rs1 A rd SB rs1 A, rs2 D SH rs1 A, rs2 D SW rs1 A, rs2 D ADDI rs1 rd SLTI rs1 rd SLTIU rs1 rd XORI rs1 rd ORI rs1 rd ANDI rs1 rd SLLI rs1 rd SRLI rs1 rd SRAI rs1 rd ADD rs1, rs2 rd SUB rs1, rs2 rd SLL rs1, rs2 rd SLT rs1, rs2 rd SLTU rs1, rs2 rd XOR rs1, rs2 rd SRL rs1, rs2 rd SRA rs1, rs2 rd OR rs1, rs2 rd AND rs1, rs2 rd FENCE FENCE.I ECALL EBREAK CSRRW‡ rs1, csr* rd, csr *unless rd=x0 CSRRS‡ rs1, csr rd *, csr *unless rs1=x0 CSRRC‡ rs1, csr rd *, csr *unless rs1=x0 ‡ carries a dependency from rs1 to csr and from csr to rd CSRRWI ‡ csr * rd, csr *unless rd=x0 CSRRSI ‡ csr rd, csr* *unless uimm[4:0]=0 CSRRCI ‡ csr rd, csr* *unless uimm[4:0]=0 ‡ carries a dependency from csr to rd Table 3. RV64I Base Integer Instruction Set Source Registers Destination Registers Accumulating CSRs LWU † rs1 A rd LD † rs1 A rd SD rs1 A, rs2 D SLLI rs1 rd SRLI rs1 rd SRAI rs1 rd ADDIW rs1 rd SLLIW rs1 rd SRLIW rs1 rd SRAIW rs1 rd ADDW rs1, rs2 rd SUBW rs1, rs2 rd SLLW rs1, rs2 rd SRLW rs1, rs2 rd SRAW rs1, rs2 rd Table 4. RV32M Standard Extension Source Registers Destination Registers Accumulating CSRs MUL rs1, rs2 rd MULH rs1, rs2 rd MULHSU rs1, rs2 rd MULHU rs1, rs2 rd DIV rs1, rs2 rd DIVU rs1, rs2 rd REM rs1, rs2 rd REMU rs1, rs2 rd Table 5. RV64M Standard Extension Source Registers Destination Registers Accumulating CSRs MULW rs1, rs2 rd DIVW rs1, rs2 rd DIVUW rs1, rs2 rd REMW rs1, rs2 rd REMUW rs1, rs2 rd Table 6. RV32A Standard Extension Source Registers Destination Registers Accumulating CSRs LR.W† rs1 A rd SC.W† rs1 A, rs2 D rd * * if successful AMOSWAP.W† rs1 A, rs2 D rd AMOADD.W† rs1 A, rs2 D rd AMOXOR.W† rs1 A, rs2 D rd AMOAND.W† rs1 A, rs2 D rd AMOOR.W† rs1 A, rs2D rd AMOMIN.W† rs1 A, rs2 D rd AMOMAX.W† rs1 A, rs2 D rd AMOMINU.W† rs1 A, rs2 D rd AMOMAXU.W† rs1 A, rs2 D rd Table 7. RV64A Standard Extension Source Registers Destination Registers Accumulating CSRs LR.D† rs1 A rd SC.D† rs1 A, rs2 D rd * *if successful AMOSWAP.D† rs1 A, rs2 D rd AMOADD.D† rs1 A, rs2 D rd AMOXOR.D† rs1 A, rs2 D rd AMOAND.D† rs1 A, rs2D rd AMOOR.D† rs1 A, rs2D rd AMOMIN.D† rs1 A, rs2D rd AMOMAX.D† rs1 A, rs2D rd AMOMINU.D† rs1 A, rs2D rd AMOMAXU.D† rs1 A, rs2D rd Table 8. RV32F Standard Extension Source Registers Destination Registers Accumulating CSRs FLW† rs1 A rd FSW rs1 A, rs2D FMADD.S rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FMSUB.S rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FNMSUB.S rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FNMADD.S rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FADD.S rs1, rs2, frm* rd NV, OF, NX *if rm=111 FSUB.S rs1, rs2, frm* rd NV, OF, NX *if rm=111 FMUL.S rs1, rs2, frm* rd NV, OF, UF, NX *if rm=111 FDIV.S rs1, rs2, frm* rd NV, DZ, OF, UF, NX *if rm=111 FSQRT.S rs1, frm* rd NV, NX *if rm=111 FSGNJ.S rs1, rs2 rd FSGNJN.S rs1, rs2 rd FSGNJX.S rs1, rs2 rd FMIN.S rs1, rs2 rd NV FMAX.S rs1, rs2 rd NV FCVT.W.S rs1, frm* rd NV, NX *if rm=111 FCVT.WU.S rs1, frm* rd NV, NX *if rm=111 FMV.X.W rs1 rd FEQ.S rs1, rs2 rd NV FLT.S rs1, rs2 rd NV FLE.S rs1, rs2 rd NV FCLASS.S rs1 rd FCVT.S.W rs1, frm* rd NX *if rm=111 FCVT.S.WU rs1, frm* rd NX *if rm=111 FMV.W.X rs1 rd Table 9. RV64F Standard Extension Source Registers Destination Registers Accumulating CSRs FCVT.L.S rs1, frm* rd NV, NX *if rm=111 FCVT.LU.S rs1, frm* rd NV, NX *if rm=111 FCVT.S.L rs1, frm* rd NX *if rm=111 FCVT.S.LU rs1, frm* rd NX *if rm=111 Table 10. RV32D Standard Extension Source Registers Destination Registers Accumulating CSRs FLD† rs1 A rd FSD rs1 A, rs2D FMADD.D rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FMSUB.D rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FNMSUB.D rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FNMADD.D rs1, rs2, rs3, frm* rd NV, OF, UF, NX *if rm=111 FADD.D rs1, rs2, frm* rd NV, OF, NX *if rm=111 FSUB.D rs1, rs2, frm* rd NV, OF, NX *if rm=111 FMUL.D rs1, rs2, frm* rd NV, OF, UF, NX *if rm=111 FDIV.D rs1, rs2, frm* rd NV, DZ, OF, UF, NX *if rm=111 FSQRT.D rs1, frm* rd NV, NX *if rm=111 FSGNJ.D rs1, rs2 rd FSGNJN.D rs1, rs2 rd FSGNJX.D rs1, rs2 rd FMIN.D rs1, rs2 rd NV FMAX.D rs1, rs2 rd NV FCVT.S.D rs1, frm* rd NV, OF, UF, NX *if rm=111 FCVT.D.S rs1 rd NV FEQ.D rs1, rs2 rd NV FLT.D rs1, rs2 rd NV FLE.D rs1, rs2 rd NV FCLASS.D rs1 rd FCVT.W.D rs1,* rd NV, NX *if rm=111 FCVT.WU.D rs1, frm* rd NV, NX *if rm=111 FCVT.D.W rs1 rd FCVT.D.WU rs1 rd Table 11. RV64D Standard Extension Source Registers Destination Registers Accumulating CSRs FCVT.L.D rs1, frm* rd NV, NX *if rm=111 FCVT.LU.D rs1, frm* rd NV, NX *if rm=111 FMV.X.D rs1 rd FCVT.D.L rs1, frm* rd NX *if rm=111 FCVT.D.LU rs1, frm* rd NX *if rm=111 FMV.D.X rs1 rd","title":"RVWMO Memory Consistency Model, Version 2.0","component":"isa","version":"v20250508","name":"rvwmo","url":"/isa/unpriv/rvwmo.html","titles":[{"text":"Definition of the RVWMO Memory Model","hash":"rvwmo","id":1},{"text":"Memory Model Primitives","hash":"rvwmo-primitives","id":2},{"text":"Syntactic Dependencies","hash":"mem-dependencies","id":3},{"text":"Preserved Program Order","hash":"preserved-program-order","id":4},{"text":"Memory Model Axioms","hash":"memory-model-axioms","id":5},{"text":"Load Value Axiom","hash":"ax-load","id":6},{"text":"Atomicity Axiom","hash":"ax-atom","id":7},{"text":"Progress Axiom","hash":"ax-prog","id":8},{"text":"CSR Dependency Tracking Granularity","hash":"csr-granularity","id":9},{"text":"Source and Destination Register Listings","hash":"source-dest-regs","id":10}]},"49":{"id":49,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Cryptography Extensions: Scalar & Entropy Source Instructions, Version 1.0.1 Version Changes v1.0.1 Fix typos to show that c.srli, c.srai, and c.slli are Zkt instructions in RV64. v1.0.0 Initial Release This document describes the scalar cryptography extension for RISC-V. All instructions described herein use the general-purpose X registers, and obey the 2-read-1-write register access constraint. These instructions are designed to be lightweight and suitable for 32 and 64 bit base architectures; from embedded IoT class cores to large, application class cores which do not implement a vector unit. This document also describes the architectural interface to an Entropy Source, which can be used to generate cryptographic secrets. This is found in Entropy Source. It also contains a mechanism allowing core implementers to provide \"Constant Time Execution\" guarantees in Data Independent Execution Latency Subset: Zkt. Cryptography is a specialised subject, requiring people with many different backgrounds to cooperate in its secure and efficient implementation. Where possible, we have written this specification to be understandable by all, though we recognise that the motivations and references to algorithms or other specifications and standards may be unfamiliar to those who are not domain experts. This specification anticipates being read and acted on by various people with different backgrounds. We have tried to capture these backgrounds here, with a brief explanation of what we expect them to know, and how it relates to the specification. We hope this aids people’s understanding of which aspects of the specification are particularly relevant to them, and which they may (safely!) ignore or pass to a colleague. Cryptographers and cryptographic software developers These are the people we expect to write code using the instructions in this specification. They should understand fairly obviously the motivations for the instructions we include, and be familiar with most of the algorithms and outside standards to which we refer. We expect the sections on constant time execution (Data Independent Execution Latency Subset: Zkt) and the entropy source (Entropy Source) to be chiefly understood with their help. Computer architects We do not expect architects to have a cryptography background. We nonetheless expect architects to be able to examine our instructions for implementation issues, understand how the instructions will be used in context, and advise on how best to fit the functionality the cryptographers want to the ISA interface. Digital design engineers & micro-architects These are the people who will implement the specification inside a core. Again, no cryptography expertise is assumed, but we expect them to interpret the specification and anticipate any hardware implementation issues, e.g., where high-frequency design considerations apply, or where latency/area tradeoffs exist etc. In particular, they should be aware of the literature around efficiently implementing AES and SM4 SBoxes in hardware. Verification engineers Responsible for ensuring the correct implementation of the extension in hardware. No cryptography background is assumed. We expect them to identify interesting test cases from the specification. An understanding of their real-world usage will help with this. We do not expect verification engineers in this sense to be experts in entropy source design or certification, since this is a very specialised area. We do expect them however to identify all of the architectural test cases around the entropy source interface. These are by no means the only people concerned with the specification, but they are the ones we considered most while writing it. RISC-V maintains a formal model of the ISA specification, implemented in the Sail ISA specification language [27]. Note that Sail refers to the specification language itself, and that there is a model of RISC-V, written using Sail. It is not correct to refer to \"the Sail model\". This is ambiguous, given there are many models of different ISAs implemented using Sail. We refer to the Sail implementation of RISC-V as \"the RISC-V Sail model\". The Cryptography extension uses inline Sail code snippets from the actual model to give canonical descriptions of instruction functionality. Each instruction is accompanied by its expression in Sail, and includes calls to supporting functions which are too verbose to include directly in the specification. This supporting code is listed in Supporting Sail Code. The Sail Manual is recommended reading in order to best understand the code snippets. Note that this document contains only a subset of the formal model: refer to the formal model Github repository for the complete model. In creating this proposal, we tried to adhere to the following policies: Where there is a choice between: supporting diverse implementation strategies for an algorithm or supporting a single implementation style which is more performant / less expensive; the crypto extension will pick the more constrained but performant option. This fits a common pattern in other parts of the RISC-V specification, where recommended (but not required) instruction sequences for performing particular tasks are given as an example, such that both hardware and software implementers can optimise for only a single use-case. The extension will be designed to support existing standardised cryptographic constructs well. It will not try to support proposed standards, or cryptographic constructs which exist only in academia. Cryptographic standards which are settled upon concurrently with or after the RISC-V cryptographic extension standardisation will be dealt with by future additions to, or versions of, the RISC-V cryptographic standard extension. It is anticipated that the NIST Lightweight Cryptography contest and the NIST Post-Quantum Cryptography contest may be dealt with this way, depending on timescales. Historically, there has been some discussion [28] on how newly supported operations in general-purpose computing might enable new bases for cryptographic algorithms. The standard will not try to anticipate new useful low-level operations which may be useful as building blocks for future cryptographic constructs. Regarding side-channel countermeasures: Where relevant, proposed instructions must aim to remove the possibility of any timing side-channels. For side-channels based on power or electro-magnetic (EM) measurements, the extension will not aim to support countermeasures which are implemented above the ISA abstraction layer. Recommendations will be given where relevant on how micro-architectures can implement instructions in a power/EM side-channel resistant way. The group of extensions introduced by the Scalar Cryptography Instruction Set Extension is listed here. Detection of individual cryptography extensions uses the unified software-based RISC-V discovery method. At the time of writing, these discovery mechanisms are still a work in progress. A note on extension rationale Specialist encryption and decryption instructions are separated into different functional groups because some use cases (e.g., Galois/Counter Mode in TLS 1.3) do not require decryption functionality. The NIST and ShangMi algorithms suites are separated because their usefulness is heavily dependent on the countries a device is expected to operate in. NIST ciphers are a part of most standardised internet protocols, while ShangMi ciphers are required for use in China. This extension contains bit-manipulation instructions that are particularly useful for cryptography, most of which are also in the Zbb extension. Please refer to b-st-ext.adoc#zbkb. Constant time carry-less multiply for Galois/Counter Mode. These are separated from the b-st-ext.adoc#zbkb because they have a considerable implementation overhead which cannot be amortised across other instructions. Please refer to b-st-ext.adoc#zbkc. These instructions are useful for implementing SBoxes in constant time, and potentially with DPA protections. These are separated from the b-st-ext.adoc#zbkb because they have an implementation overhead which cannot be amortised across other instructions. Please refer to b-st-ext.adoc#zbkx. Instructions for accelerating the decryption and key-schedule functions of the AES block cipher. RV32 RV64 Mnemonic Instruction ✓ aes32dsi AES final round decrypt (RV32) ✓ aes32dsmi AES middle round decrypt (RV32) ✓ aes64ds AES decrypt final round (RV64) ✓ aes64dsm AES decrypt middle round (RV64) ✓ aes64im AES Decrypt KeySchedule MixColumns (RV64) ✓ aes64ks1i AES Key Schedule Instruction 1 (RV64) ✓ aes64ks2 AES Key Schedule Instruction 2 (RV64) The AES Key Schedule Instruction 1 (RV64) and AES Key Schedule Instruction 2 (RV64) instructions are present in both the Zknd and Zkne extensions. Instructions for accelerating the encryption and key-schedule functions of the AES block cipher. RV32 RV64 Mnemonic Instruction ✓ aes32esi AES final round encrypt (RV32) ✓ aes32esmi AES middle round encrypt (RV32) ✓ aes64es AES encrypt final round instruction (RV64) ✓ aes64esm AES encrypt middle round instruction (RV64) ✓ aes64ks1i AES Key Schedule Instruction 1 (RV64) ✓ aes64ks2 AES Key Schedule Instruction 2 (RV64) The aes64ks1i and aes64ks2 instructions are present in both the Zknd and Zkne extensions. Instructions for accelerating the SHA2 family of cryptographic hash functions, as specified in [29]. RV32 RV64 Mnemonic Instruction ✓ ✓ sha256sig0 SHA2-256 Sigma0 instruction ✓ ✓ sha256sig1 SHA2-256 Sigma1 instruction ✓ ✓ sha256sum0 SHA2-256 Sum0 instruction ✓ ✓ sha256sum1 SHA2-256 Sum1 instruction ✓ sha512sig0h SHA2-512 Sigma0 high (RV32) ✓ sha512sig0l SHA2-512 Sigma0 low (RV32) ✓ sha512sig1h SHA2-512 Sigma1 high (RV32) ✓ sha512sig1l SHA2-512 Sigma1 low (RV32) ✓ sha512sum0r SHA2-512 Sum0 (RV32) ✓ sha512sum1r SHA2-512 Sum1 (RV32) ✓ sha512sig0 SHA2-512 Sigma0 instruction (RV64) ✓ sha512sig1 SHA2-512 Sigma1 instruction (RV64) ✓ sha512sum0 SHA2-512 Sum0 instruction (RV64) ✓ sha512sum1 SHA2-512 Sum1 instruction (RV64) Instructions for accelerating the SM4 Block Cipher. Note that unlike AES, this cipher uses the same core operation for encryption and decryption, hence there is only one extension for it. RV32 RV64 Mnemonic Instruction ✓ ✓ sm4ed SM4 Encrypt/Decrypt Instruction ✓ ✓ sm4ks SM4 Key Schedule Instruction Instructions for accelerating the SM3 hash function. RV32 RV64 Mnemonic Instruction ✓ ✓ sm3p0 SM3 P0 transform ✓ ✓ sm3p1 SM3 P1 transform The entropy source extension defines the seed CSR at address 0x015. This CSR provides up to 16 physical entropy bits that can be used to seed cryptographic random bit generators. See Entropy Source for the normative specification and access control notes. Entropy Source Rationale and Recommendations contains design rationale and further recommendations to implementers. This extension is shorthand for the following set of other extensions: Included Extension Description Zbkb-sc Bitmanipulation instructions for cryptography. Zbkc-sc Carry-less multiply instructions. Zbkx-sc Cross-bar Permutation instructions. Zkne AES encryption instructions. Zknd AES decryption instructions. Zknh SHA2 hash function instructions. A core which implements Zkn must implement all of the above extensions. This extension is shorthand for the following set of other extensions: Included Extension Description Zbkb-sc Bitmanipulation instructions for cryptography. Zbkc-sc Carry-less multiply instructions. Zbkx-sc Cross-bar Permutation instructions. Zksed SM4 block cipher instructions. Zksh SM3 hash function instructions. A core which implements Zks must implement all of the above extensions. This extension is shorthand for the following set of other extensions: Included Extension Description Zkn NIST Algorithm suite extension. Zkr Entropy Source extension. Zkt Data independent execution latency extension. A core which implements Zk must implement all of the above extensions. This extension allows CPU implementers to indicate to cryptographic software developers that a subset of RISC-V instructions are guaranteed to be implemented such that their execution latency is independent of the data values they operate on. A complete description of this extension is found in Data Independent Execution Latency Subset: Zkt. Synopsis AES final round decryption instruction for RV32. Mnemonic aes32dsi rd, rs1, rs2, bs Encoding Description This instruction sources a single byte from rs2 according to bs. To this it applies the inverse AES SBox operation, and XOR’s the result with rs1. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (AES32DSI (bs,rs2,rs1,rd)) = { let shamt : bits( 5) = bs @ 0b000; /* shamt = bs*8 */ let si : bits( 8) = (X(rs2)[31..0] >> shamt)[7..0]; /* SBox Input */ let so : bits(32) = 0x000000 @ aes_sbox_inv(si); let result : bits(32) = X(rs1)[31..0] ^ rol32(so, unsigned(shamt)); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknd (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis AES middle round decryption instruction for RV32. Mnemonic aes32dsmi rd, rs1, rs2, bs Encoding Description This instruction sources a single byte from rs2 according to bs. To this it applies the inverse AES SBox operation, and a partial inverse MixColumn, before XOR’ing the result with rs1. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (AES32DSMI (bs,rs2,rs1,rd)) = { let shamt : bits( 5) = bs @ 0b000; /* shamt = bs*8 */ let si : bits( 8) = (X(rs2)[31..0] >> shamt)[7..0]; /* SBox Input */ let so : bits( 8) = aes_sbox_inv(si); let mixed : bits(32) = aes_mixcolumn_byte_inv(so); let result : bits(32) = X(rs1)[31..0] ^ rol32(mixed, unsigned(shamt)); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknd (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis AES final round encryption instruction for RV32. Mnemonic aes32esi rd, rs1, rs2, bs Encoding Description This instruction sources a single byte from rs2 according to bs. To this it applies the forward AES SBox operation, before XOR’ing the result with rs1. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (AES32ESI (bs,rs2,rs1,rd)) = { let shamt : bits( 5) = bs @ 0b000; /* shamt = bs*8 */ let si : bits( 8) = (X(rs2)[31..0] >> shamt)[7..0]; /* SBox Input */ let so : bits(32) = 0x000000 @ aes_sbox_fwd(si); let result : bits(32) = X(rs1)[31..0] ^ rol32(so, unsigned(shamt)); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zkne (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis AES middle round encryption instruction for RV32. Mnemonic aes32esmi rd, rs1, rs2, bs Encoding Description This instruction sources a single byte from rs2 according to bs. To this it applies the forward AES SBox operation, and a partial forward MixColumn, before XOR’ing the result with rs1. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (AES32ESMI (bs,rs2,rs1,rd)) = { let shamt : bits( 5) = bs @ 0b000; /* shamt = bs*8 */ let si : bits( 8) = (X(rs2)[31..0] >> shamt)[7..0]; /* SBox Input */ let so : bits( 8) = aes_sbox_fwd(si); let mixed : bits(32) = aes_mixcolumn_byte_fwd(so); let result : bits(32) = X(rs1)[31..0] ^ rol32(mixed, unsigned(shamt)); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zkne (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis AES final round decryption instruction for RV64. Mnemonic aes64ds rd, rs1, rs2 Encoding Description Uses the two 64-bit source registers to represent the entire AES state, and produces half of the next round output, applying the Inverse ShiftRows and SubBytes steps. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note To Software Developers The following code snippet shows the final round of the AES block decryption. t0 and t1 hold the current round state. t2 and t3 hold the next round state. aes64ds t2, t0, t1 aes64ds t3, t1, t0 Note the reversed register order of the second instruction. Operation function clause execute (AES64DS(rs2, rs1, rd)) = { let sr : bits(64) = aes_rv64_shiftrows_inv(X(rs2)[63..0], X(rs1)[63..0]); let wd : bits(64) = sr[63..0]; X(rd) = aes_apply_inv_sbox_to_each_byte(wd); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknd (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis AES middle round decryption instruction for RV64. Mnemonic aes64dsm rd, rs1, rs2 Encoding Description Uses the two 64-bit source registers to represent the entire AES state, and produces half of the next round output, applying the Inverse ShiftRows, SubBytes and MixColumns steps. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note To Software Developers The following code snippet shows one middle round of the AES block decryption. t0 and t1 hold the current round state. t2 and t3 hold the next round state. aes64dsm t2, t0, t1 aes64dsm t3, t1, t0 Note the reversed register order of the second instruction. Operation function clause execute (AES64DSM(rs2, rs1, rd)) = { let sr : bits(64) = aes_rv64_shiftrows_inv(X(rs2)[63..0], X(rs1)[63..0]); let wd : bits(64) = sr[63..0]; let sb : bits(64) = aes_apply_inv_sbox_to_each_byte(wd); X(rd) = aes_mixcolumn_inv(sb[63..32]) @ aes_mixcolumn_inv(sb[31..0]); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknd (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis AES final round encryption instruction for RV64. Mnemonic aes64es rd, rs1, rs2 Encoding Description Uses the two 64-bit source registers to represent the entire AES state, and produces half of the next round output, applying the ShiftRows and SubBytes steps. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note To Software Developers The following code snippet shows the final round of the AES block encryption. t0 and t1 hold the current round state. t2 and t3 hold the next round state. aes64es t2, t0, t1 aes64es t3, t1, t0 Note the reversed register order of the second instruction. Operation function clause execute (AES64ES(rs2, rs1, rd)) = { let sr : bits(64) = aes_rv64_shiftrows_fwd(X(rs2)[63..0], X(rs1)[63..0]); let wd : bits(64) = sr[63..0]; X(rd) = aes_apply_fwd_sbox_to_each_byte(wd); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zkne (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis AES middle round encryption instruction for RV64. Mnemonic aes64esm rd, rs1, rs2 Encoding Description Uses the two 64-bit source registers to represent the entire AES state, and produces half of the next round output, applying the ShiftRows, SubBytes and MixColumns steps. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note To Software Developers The following code snippet shows one middle round of the AES block encryption. t0 and t1 hold the current round state. t2 and t3 hold the next round state. aes64esm t2, t0, t1 aes64esm t3, t1, t0 Note the reversed register order of the second instruction. Operation function clause execute (AES64ESM(rs2, rs1, rd)) = { let sr : bits(64) = aes_rv64_shiftrows_fwd(X(rs2)[63..0], X(rs1)[63..0]); let wd : bits(64) = sr[63..0]; let sb : bits(64) = aes_apply_fwd_sbox_to_each_byte(wd); X(rd) = aes_mixcolumn_fwd(sb[63..32]) @ aes_mixcolumn_fwd(sb[31..0]); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zkne (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis This instruction accelerates the inverse MixColumns step of the AES Block Cipher, and is used to aid creation of the decryption KeySchedule. Mnemonic aes64im rd, rs1 Encoding Description The instruction applies the inverse MixColumns transformation to two columns of the state array, packed into a single 64-bit register. It is used to create the inverse cipher KeySchedule, according to the equivalent inverse cipher construction in [30] (Page 23, Section 5.3.5). This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (AES64IM(rs1, rd)) = { let w0 : bits(32) = aes_mixcolumn_inv(X(rs1)[31.. 0]); let w1 : bits(32) = aes_mixcolumn_inv(X(rs1)[63..32]); X(rd) = w1 @ w0; RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknd (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis This instruction implements part of the KeySchedule operation for the AES Block cipher involving the SBox operation. Mnemonic aes64ks1i rd, rs1, rnum Encoding Description This instruction implements the rotation, SubBytes and Round Constant addition steps of the AES block cipher Key Schedule. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note that rnum must be in the range 0x0..0xA. The values 0xB..0xF are reserved. Operation function clause execute (AES64KS1I(rnum, rs1, rd)) = { if(unsigned(rnum) > 10) then { handle_illegal(); RETIRE_SUCCESS } else { let tmp1 : bits(32) = X(rs1)[63..32]; let rc : bits(32) = aes_decode_rcon(rnum); /* round number -> round constant */ let tmp2 : bits(32) = if (rnum ==0xA) then tmp1 else ror32(tmp1, 8); let tmp3 : bits(32) = aes_subword_fwd(tmp2); let result : bits(64) = (tmp3 ^ rc) @ (tmp3 ^ rc); X(rd) = EXTZ(result); RETIRE_SUCCESS } } Included in Extension Minimum version Lifecycle state Zkne (RV64) v1.0.0 Ratified Zknd (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis This instruction implements part of the KeySchedule operation for the AES Block cipher. Mnemonic aes64ks2 rd, rs1, rs2 Encoding Description This instruction implements the additional XOR’ing of key words as part of the AES block cipher Key Schedule. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (AES64KS2(rs2, rs1, rd)) = { let w0 : bits(32) = X(rs1)[63..32] ^ X(rs2)[31..0]; let w1 : bits(32) = X(rs1)[63..32] ^ X(rs2)[31..0] ^ X(rs2)[63..32]; X(rd) = w1 @ w0; RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zkne (RV64) v1.0.0 Ratified Zknd (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis AND with inverted operand Mnemonic andn rd, rs1, rs2 Encoding Description This instruction performs the bitwise logical AND operation between rs1 and the bitwise inversion of rs2. Operation X(rd) = X(rs1) & ~X(rs2); Included in Extension Minimum version Lifecycle state Zbb ([zbb]) 1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Reverse the bits in each byte of a source register. Mnemonic brev8 rd, rs Encoding Description This instruction reverses the order of the bits in every byte of a register. Operation result : xlenbits = EXTZ(0b0); foreach (i from 0 to sizeof(xlen) by 8) { result[i+7..i] = reverse_bits_in_byte(X(rs1)[i+7..i]); }; X(rd) = result; Included in Extension Minimum version Lifecycle state Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Carry-less multiply (low-part) Mnemonic clmul rd, rs1, rs2 Encoding Description clmul produces the lower half of the 2·XLEN carry-less product. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let output : xlenbits = 0; foreach (i from 0 to (xlen - 1) by 1) { output = if ((rs2_val >> i) & 1) then output ^ (rs1_val << i); else output; } X[rd] = output Included in Extension Minimum version Lifecycle state Zbc ([zbc]) 1.0.0 Ratified Zbkc (Zbkc-sc) v1.0.0-rc4 Ratified Synopsis Carry-less multiply (high-part) Mnemonic clmulh rd, rs1, rs2 Encoding Description clmulh produces the upper half of the 2·XLEN carry-less product. Operation let rs1_val = X(rs1); let rs2_val = X(rs2); let output : xlenbits = 0; foreach (i from 1 to xlen by 1) { output = if ((rs2_val >> i) & 1) then output ^ (rs1_val >> (xlen - i)); else output; } X[rd] = output Included in Extension Minimum version Lifecycle state Zbc ([zbc]) 1.0.0 Ratified Zbkc (Zbkc-sc) v1.0.0-rc4 Ratified Synopsis OR with inverted operand Mnemonic orn rd, rs1, rs2 Encoding Description This instruction performs the bitwise logical OR operation between rs1 and the bitwise inversion of rs2. Operation X(rd) = X(rs1) | ~X(rs2); Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Pack the low halves of rs1 and rs2 into rd. Mnemonic pack rd, rs1, rs2 Encoding Description The pack instruction packs the XLEN/2-bit lower halves of rs1 and rs2 into rd, with rs1 in the lower half and rs2 in the upper half. Operation let lo_half : bits(xlen/2) = X(rs1)[xlen/2-1..0]; let hi_half : bits(xlen/2) = X(rs2)[xlen/2-1..0]; X(rd) = EXTZ(hi_half @ lo_half); Included in Extension Minimum version Lifecycle state Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Pack the low bytes of rs1 and rs2 into rd. Mnemonic packh rd, rs1, rs2 Encoding Description And the packh instruction packs the least-significant bytes of rs1 and rs2 into the 16 least-significant bits of rd, zero extending the rest of rd. Operation let lo_half : bits(8) = X(rs1)[7..0]; let hi_half : bits(8) = X(rs2)[7..0]; X(rd) = EXTZ(hi_half @ lo_half); Included in Extension Minimum version Lifecycle state Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Pack the low 16-bits of rs1 and rs2 into rd on RV64. Mnemonic packw rd, rs1, rs2 Encoding Description This instruction packs the low 16 bits of rs1 and rs2 into the 32 least-significant bits of rd, sign extending the 32-bit result to the rest of rd. This instruction only exists on RV64 based systems. Operation let lo_half : bits(16) = X(rs1)[15..0]; let hi_half : bits(16) = X(rs2)[15..0]; X(rd) = EXTS(hi_half @ lo_half); Included in Extension Minimum version Lifecycle state Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Byte-reverse register Mnemonic rev8 rd, rs Encoding (RV32) Encoding (RV64) Description This instruction reverses the order of the bytes in rs. Operation let input = X(rs); let output : xlenbits = 0; let j = xlen - 1; foreach (i from 0 to (xlen - 8) by 8) { output[i..(i + 7)] = input[(j - 7)..j]; j = j - 8; } X[rd] = output Note The rev8 mnemonic corresponds to different instruction encodings in RV32 and RV64. Software Hint The byte-reverse operation is only available for the full register width. To emulate word-sized and halfword-sized byte-reversal, perform a rev8 rd,rs followed by a srai rd,rd,K, where K is XLEN-32 and XLEN-16, respectively. Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Rotate Left (Register) Mnemonic rol rd, rs1, rs2 Encoding Description This instruction performs a rotate left of rs1 by the amount in least-significant log2(XLEN) bits of rs2. Operation let shamt = if xlen == 32 then X(rs2)[4..0] else X(rs2)[5..0]; let result = (X(rs1) << shamt) | (X(rs1) >> (xlen - shamt)); X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Rotate Left Word (Register) Mnemonic rolw rd, rs1, rs2 Encoding Description This instruction performs a rotate left on the least-significant word of rs1 by the amount in least-significant 5 bits of rs2. The resulting word value is sign-extended by copying bit 31 to all of the more-significant bits. Operation let rs1 = EXTZ(X(rs1)[31..0]) let shamt = X(rs2)[4..0]; let result = (rs1 << shamt) | (rs1 >> (32 - shamt)); X(rd) = EXTS(result[31..0]); Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Rotate Right Mnemonic ror rd, rs1, rs2 Encoding Description This instruction performs a rotate right of rs1 by the amount in least-significant log2(XLEN) bits of rs2. Operation let shamt = if xlen == 32 then X(rs2)[4..0] else X(rs2)[5..0]; let result = (X(rs1) >> shamt) | (X(rs1) << (xlen - shamt)); X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Rotate Right (Immediate) Mnemonic rori rd, rs1, shamt Encoding (RV32) Encoding (RV64) Description This instruction performs a rotate right of rs1 by the amount in the least-significant log2(XLEN) bits of shamt. For RV32, the encodings corresponding to shamt[5]=1 are reserved. Operation let shamt = if xlen == 32 then shamt[4..0] else shamt[5..0]; let result = (X(rs1) >> shamt) | (X(rs1) << (xlen - shamt)); X(rd) = result; Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Rotate Right Word by Immediate Mnemonic roriw rd, rs1, shamt Encoding Description This instruction performs a rotate right on the least-significant word of rs1 by the amount in the least-significant log2(XLEN) bits of shamt. The resulting word value is sign-extended by copying bit 31 to all of the more-significant bits. Operation let rs1_data = EXTZ(X(rs1)[31..0]; let result = (rs1_data >> shamt) | (rs1_data << (32 - shamt)); X(rd) = EXTS(result[31..0]); Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Rotate Right Word (Register) Mnemonic rorw rd, rs1, rs2 Encoding Description This instruction performs a rotate right on the least-significant word of rs1 by the amount in least-significant 5 bits of rs2. The resultant word is sign-extended by copying bit 31 to all of the more-significant bits. Operation let rs1 = EXTZ(X(rs1)[31..0]) let shamt = X(rs2)[4..0]; let result = (rs1 >> shamt) | (rs1 << (32 - shamt)); X(rd) = EXTS(result); Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Implements the Sigma0 transformation function as used in the SHA2-256 hash function [29]. Mnemonic sha256sig0 rd, rs1 Encoding Description This instruction is supported for both RV32 and RV64 base architectures. For RV32, the entire XLEN source register is operated on. For RV64, the low 32 bits of the source register are operated on, and the result sign extended to XLEN bits. Though named for SHA2-256, the instruction works for both the SHA2-224 and SHA2-256 parameterisations as described in [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA256SIG0(rs1,rd)) = { let inb : bits(32) = X(rs1)[31..0]; let result : bits(32) = ror32(inb, 7) ^ ror32(inb, 18) ^ (inb >> 3); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh v1.0.0 Ratified Zkn v1.0.0 Ratified Zk v1.0.0 Ratified Synopsis Implements the Sigma1 transformation function as used in the SHA2-256 hash function [29]. Mnemonic sha256sig1 rd, rs1 Encoding Description This instruction is supported for both RV32 and RV64 base architectures. For RV32, the entire XLEN source register is operated on. For RV64, the low 32 bits of the source register are operated on, and the result sign extended to XLEN bits. Though named for SHA2-256, the instruction works for both the SHA2-224 and SHA2-256 parameterisations as described in [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA256SIG1(rs1,rd)) = { let inb : bits(32) = X(rs1)[31..0]; let result : bits(32) = ror32(inb, 17) ^ ror32(inb, 19) ^ (inb >> 10); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh v1.0.0 Ratified Zkn v1.0.0 Ratified Zk v1.0.0 Ratified Synopsis Implements the Sum0 transformation function as used in the SHA2-256 hash function [29]. Mnemonic sha256sum0 rd, rs1 Encoding Description This instruction is supported for both RV32 and RV64 base architectures. For RV32, the entire XLEN source register is operated on. For RV64, the low 32 bits of the source register are operated on, and the result sign extended to XLEN bits. Though named for SHA2-256, the instruction works for both the SHA2-224 and SHA2-256 parameterisations as described in [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA256SUM0(rs1,rd)) = { let inb : bits(32) = X(rs1)[31..0]; let result : bits(32) = ror32(inb, 2) ^ ror32(inb, 13) ^ ror32(inb, 22); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh v1.0.0 Ratified Zkn v1.0.0 Ratified Zk v1.0.0 Ratified Synopsis Implements the Sum1 transformation function as used in the SHA2-256 hash function [29]. Mnemonic sha256sum1 rd, rs1 Encoding Description This instruction is supported for both RV32 and RV64 base architectures. For RV32, the entire XLEN source register is operated on. For RV64, the low 32 bits of the source register are operated on, and the result sign extended to XLEN bits. Though named for SHA2-256, the instruction works for both the SHA2-224 and SHA2-256 parameterisations as described in [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA256SUM1(rs1,rd)) = { let inb : bits(32) = X(rs1)[31..0]; let result : bits(32) = ror32(inb, 6) ^ ror32(inb, 11) ^ ror32(inb, 25); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh v1.0.0 Ratified Zkn v1.0.0 Ratified Zk v1.0.0 Ratified Synopsis Implements the high half of the Sigma0 transformation, as used in the SHA2-512 hash function [29]. Mnemonic sha512sig0h rd, rs1, rs2 Encoding Description This instruction is implemented on RV32 only. Used to compute the Sigma0 transform of the SHA2-512 hash function in conjunction with the sha512sig0l instruction. The transform is a 64-bit to 64-bit function, so the input and output are each represented by two 32-bit registers. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note to software developers The entire Sigma0 transform for SHA2-512 may be computed on RV32 using the following instruction sequence: sha512sig0l t0, a0, a1 sha512sig0h t1, a1, a0 Operation function clause execute (SHA512SIG0H(rs2, rs1, rd)) = { X(rd) = EXTS((X(rs1) >> 1) ^ (X(rs1) >> 7) ^ (X(rs1) >> 8) ^ (X(rs2) << 31) ^ (X(rs2) << 24) ); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis Implements the low half of the Sigma0 transformation, as used in the SHA2-512 hash function [29]. Mnemonic sha512sig0l rd, rs1, rs2 Encoding Description This instruction is implemented on RV32 only. Used to compute the Sigma0 transform of the SHA2-512 hash function in conjunction with the sha512sig0h instruction. The transform is a 64-bit to 64-bit function, so the input and output are each represented by two 32-bit registers. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note to software developers The entire Sigma0 transform for SHA2-512 may be computed on RV32 using the following instruction sequence: sha512sig0l t0, a0, a1 sha512sig0h t1, a1, a0 Operation function clause execute (SHA512SIG0L(rs2, rs1, rd)) = { X(rd) = EXTS((X(rs1) >> 1) ^ (X(rs1) >> 7) ^ (X(rs1) >> 8) ^ (X(rs2) << 31) ^ (X(rs2) << 25) ^ (X(rs2) << 24) ); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis Implements the high half of the Sigma1 transformation, as used in the SHA2-512 hash function [29]. Mnemonic sha512sig1h rd, rs1, rs2 Encoding Description This instruction is implemented on RV32 only. Used to compute the Sigma1 transform of the SHA2-512 hash function in conjunction with the sha512sig1l instruction. The transform is a 64-bit to 64-bit function, so the input and output are each represented by two 32-bit registers. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note to software developers The entire Sigma1 transform for SHA2-512 may be computed on RV32 using the following instruction sequence: sha512sig1l t0, a0, a1 sha512sig1h t1, a1, a0 Operation function clause execute (SHA512SIG1H(rs2, rs1, rd)) = { X(rd) = EXTS((X(rs1) << 3) ^ (X(rs1) >> 6) ^ (X(rs1) >> 19) ^ (X(rs2) >> 29) ^ (X(rs2) << 13) ); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis Implements the low half of the Sigma1 transformation, as used in the SHA2-512 hash function [29]. Mnemonic sha512sig1l rd, rs1, rs2 Encoding Description This instruction is implemented on RV32 only. Used to compute the Sigma1 transform of the SHA2-512 hash function in conjunction with the sha512sig1h instruction. The transform is a 64-bit to 64-bit function, so the input and output are each represented by two 32-bit registers. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note to software developers The entire Sigma1 transform for SHA2-512 may be computed on RV32 using the following instruction sequence: sha512sig1l t0, a0, a1 sha512sig1h t1, a1, a0 Operation function clause execute (SHA512SIG1L(rs2, rs1, rd)) = { X(rd) = EXTS((X(rs1) << 3) ^ (X(rs1) >> 6) ^ (X(rs1) >> 19) ^ (X(rs2) >> 29) ^ (X(rs2) << 26) ^ (X(rs2) << 13) ); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis Implements the Sum0 transformation, as used in the SHA2-512 hash function [29]. Mnemonic sha512sum0r rd, rs1, rs2 Encoding Description This instruction is implemented on RV32 only. Used to compute the Sum0 transform of the SHA2-512 hash function. The transform is a 64-bit to 64-bit function, so the input and output is represented by two 32-bit registers. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note to software developers The entire Sum0 transform for SHA2-512 may be computed on RV32 using the following instruction sequence: sha512sum0r t0, a0, a1 sha512sum0r t1, a1, a0 Note the reversed source register ordering. Operation function clause execute (SHA512SUM0R(rs2, rs1, rd)) = { X(rd) = EXTS((X(rs1) << 25) ^ (X(rs1) << 30) ^ (X(rs1) >> 28) ^ (X(rs2) >> 7) ^ (X(rs2) >> 2) ^ (X(rs2) << 4) ); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis Implements the Sum1 transformation, as used in the SHA2-512 hash function [29]. Mnemonic sha512sum1r rd, rs1, rs2 Encoding Description This instruction is implemented on RV32 only. Used to compute the Sum1 transform of the SHA2-512 hash function. The transform is a 64-bit to 64-bit function, so the input and output is represented by two 32-bit registers. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Note to software developers The entire Sum1 transform for SHA2-512 may be computed on RV32 using the following instruction sequence: sha512sum1r t0, a0, a1 sha512sum1r t1, a1, a0 Note the reversed source register ordering. Operation function clause execute (SHA512SUM1R(rs2, rs1, rd)) = { X(rd) = EXTS((X(rs1) << 23) ^ (X(rs1) >> 14) ^ (X(rs1) >> 18) ^ (X(rs2) >> 9) ^ (X(rs2) << 18) ^ (X(rs2) << 14) ); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV32) v1.0.0 Ratified Zkn (RV32) v1.0.0 Ratified Zk (RV32) v1.0.0 Ratified Synopsis Implements the Sigma0 transformation function as used in the SHA2-512 hash function [29]. Mnemonic sha512sig0 rd, rs1 Encoding Description This instruction is supported for the RV64 base architecture. It implements the Sigma0 transform of the SHA2-512 hash function. [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA512SIG0(rs1, rd)) = { X(rd) = ror64(X(rs1), 1) ^ ror64(X(rs1), 8) ^ (X(rs1) >> 7); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis Implements the Sigma1 transformation function as used in the SHA2-512 hash function [29]. Mnemonic sha512sig1 rd, rs1 Encoding Description This instruction is supported for the RV64 base architecture. It implements the Sigma1 transform of the SHA2-512 hash function. [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA512SIG1(rs1, rd)) = { X(rd) = ror64(X(rs1), 19) ^ ror64(X(rs1), 61) ^ (X(rs1) >> 6); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis Implements the Sum0 transformation function as used in the SHA2-512 hash function [29]. Mnemonic sha512sum0 rd, rs1 Encoding Description This instruction is supported for the RV64 base architecture. It implements the Sum0 transform of the SHA2-512 hash function. [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA512SUM0(rs1, rd)) = { X(rd) = ror64(X(rs1), 28) ^ ror64(X(rs1), 34) ^ ror64(X(rs1) ,39); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis Implements the Sum1 transformation function as used in the SHA2-512 hash function [29]. Mnemonic sha512sum1 rd, rs1 Encoding Description This instruction is supported for the RV64 base architecture. It implements the Sum1 transform of the SHA2-512 hash function. [29]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SHA512SUM1(rs1, rd)) = { X(rd) = ror64(X(rs1), 14) ^ ror64(X(rs1), 18) ^ ror64(X(rs1) ,41); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zknh (RV64) v1.0.0 Ratified Zkn (RV64) v1.0.0 Ratified Zk (RV64) v1.0.0 Ratified Synopsis Implements the P0 transformation function as used in the SM3 hash function cite:[gbt:sm3,iso:sm3]. Mnemonic sm3p0 rd, rs1 Encoding Description This instruction is supported for the RV32 and RV64 base architectures. It implements the P0 transform of the SM3 hash function cite:[gbt:sm3,iso:sm3]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Supporting Material This instruction is based on work done in [31]. Operation function clause execute (SM3P0(rs1, rd)) = { let r1 : bits(32) = X(rs1)[31..0]; let result : bits(32) = r1 ^ rol32(r1, 9) ^ rol32(r1, 17); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zksh v1.0.0 Ratified Zks v1.0.0 Ratified Synopsis Implements the P1 transformation function as used in the SM3 hash function cite:[gbt:sm3,iso:sm3]. Mnemonic sm3p1 rd, rs1 Encoding Description This instruction is supported for the RV32 and RV64 base architectures. It implements the P1 transform of the SM3 hash function cite:[gbt:sm3,iso:sm3]. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Supporting Material This instruction is based on work done in [31]. Operation function clause execute (SM3P1(rs1, rd)) = { let r1 : bits(32) = X(rs1)[31..0]; let result : bits(32) = r1 ^ rol32(r1, 15) ^ rol32(r1, 23); X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zksh v1.0.0 Ratified Zks v1.0.0 Ratified Synopsis Accelerates the block encrypt/decrypt operation of the SM4 block cipher cite:[gbt:sm4, iso:sm4]. Mnemonic sm4ed rd, rs1, rs2, bs Encoding Description Implements a T-tables in hardware style approach to accelerating the SM4 round function. A byte is extracted from rs2 based on bs, to which the SBox and linear layer transforms are applied, before the result is XOR’d with rs1 and written back to rd. This instruction exists on RV32 and RV64 base architectures. On RV64, the 32-bit result is sign extended to XLEN bits. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SM4ED (bs,rs2,rs1,rd)) = { let shamt : bits(5) = bs @ 0b000; /* shamt = bs*8 */ let sb_in : bits(8) = (X(rs2)[31..0] >> shamt)[7..0]; let x : bits(32) = 0x000000 @ sm4_sbox(sb_in); let y : bits(32) = x ^ (x << 8) ^ ( x << 2) ^ (x << 18) ^ ((x & 0x0000003F) << 26) ^ ((x & 0x000000C0) << 10); let z : bits(32) = rol32(y, unsigned(shamt)); let result: bits(32) = z ^ X(rs1)[31..0]; X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zksed v1.0.0 Ratified Zks v1.0.0 Ratified Synopsis Accelerates the Key Schedule operation of the SM4 block cipher cite:[gbt:sm4, iso:sm4]. Mnemonic sm4ks rd, rs1, rs2, bs Encoding Description Implements a T-tables in hardware style approach to accelerating the SM4 Key Schedule. A byte is extracted from rs2 based on bs, to which the SBox and linear layer transforms are applied, before the result is XOR’d with rs1 and written back to rd. This instruction exists on RV32 and RV64 base architectures. On RV64, the 32-bit result is sign extended to XLEN bits. This instruction must always be implemented such that its execution latency does not depend on the data being operated on. Operation function clause execute (SM4KS (bs,rs2,rs1,rd)) = { let shamt : bits(5) = (bs @ 0b000); /* shamt = bs*8 */ let sb_in : bits(8) = (X(rs2)[31..0] >> shamt)[7..0]; let x : bits(32) = 0x000000 @ sm4_sbox(sb_in); let y : bits(32) = x ^ ((x & 0x00000007) << 29) ^ ((x & 0x000000FE) << 7) ^ ((x & 0x00000001) << 23) ^ ((x & 0x000000F8) << 13) ; let z : bits(32) = rol32(y, unsigned(shamt)); let result: bits(32) = z ^ X(rs1)[31..0]; X(rd) = EXTS(result); RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zksed v1.0.0 Ratified Zks v1.0.0 Ratified Synopsis Place odd and even bits of the source register into upper and lower halves of the destination register, respectively. Mnemonic unzip rd, rs Encoding Description This instruction scatters all of the odd and even bits of a source word into the high and low halves of a destination word. It is the inverse of the zip instruction. This instruction is available only on RV32. Operation foreach (i from 0 to xlen/2-1) { X(rd)[i] = X(rs1)[2*i] X(rd)[i+xlen/2] = X(rs1)[2*i+1] } Software Hint This instruction is useful for implementing the SHA3 cryptographic hash function on a 32-bit architecture, as it implements the bit-interleaving operation used to speed up the 64-bit rotations directly. Included in Extension Minimum version Lifecycle state Zbkb (Zbkb-sc) (RV32) v1.0.0-rc4 Ratified Synopsis Exclusive NOR Mnemonic xnor rd, rs1, rs2 Encoding Description This instruction performs the bit-wise exclusive-NOR operation on rs1 and rs2. Operation X(rd) = ~(X(rs1) ^ X(rs2)); Included in Extension Minimum version Lifecycle state Zbb ([zbb]) v1.0.0 Ratified Zbkb (Zbkb-sc) v1.0.0-rc4 Ratified Synopsis Byte-wise lookup of indices into a vector in registers. Mnemonic xperm8 rd, rs1, rs2 Encoding Description The xperm8 instruction operates on bytes. The rs1 register contains a vector of XLEN/8 8-bit elements. The rs2 register contains a vector of XLEN/8 8-bit indexes. The result is each element in rs2 replaced by the indexed element in rs1, or zero if the index into rs2 is out of bounds. Operation val xperm8_lookup : (bits(8), xlenbits) -> bits(8) function xperm8_lookup (idx, lut) = { (lut >> (idx @ 0b000))[7..0] } function clause execute ( XPERM8 (rs2,rs1,rd)) = { result : xlenbits = EXTZ(0b0); foreach(i from 0 to xlen by 8) { result[i+7..i] = xperm8_lookup(X(rs2)[i+7..i], X(rs1)); }; X(rd) = result; RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zbkx ([zbkx]) v1.0 Ratified Synopsis Nibble-wise lookup of indices into a vector. Mnemonic xperm4 rd, rs1, rs2 Encoding Description The xperm4 instruction operates on nibbles. The rs1 register contains a vector of XLEN/4 4-bit elements. The rs2 register contains a vector of XLEN/4 4-bit indexes. The result is each element in rs2 replaced by the indexed element in rs1, or zero if the index into rs2 is out of bounds. Operation val xperm4_lookup : (bits(4), xlenbits) -> bits(4) function xperm4_lookup (idx, lut) = { (lut >> (idx @ 0b00))[3..0] } function clause execute ( XPERM4 (rs2,rs1,rd)) = { result : xlenbits = EXTZ(0b0); foreach(i from 0 to xlen by 4) { result[i+3..i] = xperm4_lookup(X(rs2)[i+3..i], X(rs1)); }; X(rd) = result; RETIRE_SUCCESS } Included in Extension Minimum version Lifecycle state Zbkx ([zbkx]) v1.0 Ratified Synopsis Interleave upper and lower halves of the source register into odd and even bits of the destination register, respectively. Mnemonic zip rd, rs Encoding Description This instruction gathers bits from the high and low halves of the source word into odd/even bit positions in the destination word. It is the inverse of the unzip instruction. This instruction is available only on RV32. Operation foreach (i from 0 to xlen/2-1) { X(rd)[2*i] = X(rs1)[i] X(rd)[2*i+1] = X(rs1)[i+xlen/2] } Software Hint This instruction is useful for implementing the SHA3 cryptographic hash function on a 32-bit architecture, as it implements the bit-interleaving operation used to speed up the 64-bit rotations directly. Included in Extension Minimum version Lifecycle state Zbkb (Zbkb-sc) (RV32) v1.0.0-rc4 Ratified The seed CSR provides an interface to a NIST SP 800-90B [32] or BSI AIS-31 [33] compliant physical Entropy Source (ES). An entropy source, by itself, is not a cryptographically secure Random Bit Generator (RBG), but can be used to build standard (and nonstandard) RBGs of many types with the help of symmetric cryptography. Expected usage is to condition (typically with SHA-2/3) the output from an entropy source and use it to seed a cryptographically secure Deterministic Random Bit Generator (DRBG) such as AES-based CTR_DRBG [34]. The combination of an Entropy Source, Conditioning, and a DRBG can be used to create random bits securely [35]. See Entropy Source Rationale and Recommendations for a non-normative description of a certification and self-certification procedures, design rationale, and more detailed suggestions on how the entropy source output can be used. seed is an unprivileged CSR located at address 0x015. The 32-bit contents of seed are as follows: Bits Name Description 31:30 OPST Status: BIST (00), WAIT (01), ES16 (10), DEAD (11). 29:24 reserved For future use by the RISC-V specification. 23:16 custom Designated for custom and experimental use. 15: 0 entropy 16 bits of randomness, only when OPST=ES16. Attempts to access the seed CSR using a read-only CSR-access instruction (CSRRS/CSRRC with rs1=x0 or CSRRSI/CSRRCI with uimm=0) raise an illegal-instruction exception; any other CSR-access instruction may be used to access seed. The write value (in rs1 or uimm) must be ignored by implementations. The purpose of the write is to signal polling and flushing. Software normally uses the instruction csrrw rd, seed, x0 to read the seed CSR. Encoding The seed CSR is also access controlled by execution mode, and attempted read or write access will raise an illegal-instruction exception outside M mode unless access is explicitly granted. See Access Control to seed for more details. The status bits seed[31:30] = OPST may be ES16 (10), indicating successful polling, or one of three entropy polling failure statuses BIST (00), WAIT (01), or DEAD (11), discussed below. Each returned seed[15:0] = entropy value represents unique randomness when OPST=ES16 (seed[31:30] = 10), even if its numerical value is the same as that of a previously polled entropy value. The implementation requirements of entropy bits are defined in Entropy Source Requirements. When OPST is not ES16, entropy must be set to 0. An implementation may safely set reserved and custom bits to zeros. For security reasons, the interface guarantees that secret entropy words are not made available multiple times. Hence polling (reading) must also have the side effect of clearing (wipe-on-read) the entropy contents and changing the state to WAIT (unless there is entropy immediately available for ES16). Other states (BIST, WAIT, and DEAD) may be unaffected by polling. The Status Bits returned in seed[31:30]=OPST: 00 - BIST indicates that Built-In Self-Test \"on-demand\" (BIST) testing is being performed. If OPST returns temporarily to BIST from any other state, this signals a non-fatal self-test alarm, which is non-actionable, apart from being logged. Such a BIST alarm must be latched until polled at least once to enable software to record its occurrence. 01 - WAIT means that a sufficient amount of entropy is not yet available. This is not an error condition and may (in fact) be more frequent than ES16 since physical entropy sources often have low bandwidth. 10 - ES16 indicates success; the low bits seed[15:0] will have 16 bits of randomness (entropy), which is guaranteed to meet certain minimum entropy requirements, regardless of implementation. 11 - DEAD is an unrecoverable self-test error. This may indicate a hardware fault, a security issue, or (extremely rarely) a type-1 statistical false positive in the continuous testing procedures. In case of a fatal failure, an immediate lockdown may also be an appropriate response in dedicated security devices. Example. 0x8000ABCD is a valid ES16 status output, with 0xABCD being the entropy value. 0xFFFFFFFF is an invalid output (DEAD) with no entropy value. Figure 1. Entropy Source state transition diagram. Normally the operational state alternates between WAIT (no data) and ES16, which means that 16 bits of randomness (entropy) have been polled. BIST (Built-in Self-Test) only occurs after reset or to signal a non-fatal self-test alarm (if reached after WAIT or ES16). DEAD is an unrecoverable error state. The output entropy (seed[15:0] in ES16 state) is not necessarily fully conditioned randomness due to hardware and energy limitations of smaller, low-powered implementations. However, minimum requirements are defined. The main requirement is that 2-to-1 cryptographic post-processing in 256-bit input blocks will yield 128-bit \"full entropy\" output blocks. Entropy source users may make this conservative assumption but are not prohibited from using more than twice the number of seed bits relative to the desired resulting entropy. An implementation of the entropy source should meet at least one of the following requirements sets in order to be considered a secure and safe design: NIST SP 800-90B / FIPS 140-3 Requirements: A physical entropy source meeting NIST SP 800-90B [32] criteria with evaluated min-entropy of 192 bits for each 256 output bits (min-entropy rate 0.75). BSI AIS-31 PTG.2 / Common Criteria Requirements: A physical entropy source meeting the AIS-31 PTG.2 [33] criteria, implying average Shannon entropy rate 0.997. The source must also meet the NIST 800-90B min-entropy rate 192/256 = 0.75. Virtual Sources: Security Requirement: A virtual entropy source is a DRBG seeded from a physical entropy source. It must have at least a 256-bit (Post-Quantum Category 5) internal security level. All implementations must signal initialization, test mode, and health alarms as required by respective standards. This may require the implementer to add non-standard (custom) test interfaces in a secure and safe manner, an example of which is described in Suggested GetNoise Test Interface All NIST SP 800-90B [32] required components and health test mechanisms must be implemented. The entropy requirement is satisfied if 128 bits of full entropy can be obtained from each 256-bit (16*16 -bit) successful, but possibly non-consecutive entropy (ES16) output sequence using a vetted conditioning algorithm such as a cryptographic hash (See Section 3.1.5.1.1, SP 800-90B [32]). In practice, a min-entropy rate of 0.75 or larger is required for this. Note that 128 bits of estimated input min-entropy does not yield 128 bits of conditioned, full entropy in SP 800-90B/C evaluation. Instead, the implication is that every 256-bit sequence should have min-entropy of at least 128+64 = 192 bits, as discussed in SP 800-90C [35]; the likelihood of successfully \"guessing\" an individual 256-bit output sequence should not be higher than 2-192 even with (almost) unconstrained amount of entropy source data and computational power. Rather than attempting to define all the mathematical and architectural properties that the entropy source must satisfy, we define that the physical entropy source be strong and robust enough to pass the equivalent of NIST SP 800-90 evaluation and certification for full entropy when conditioned cryptographically in ratio 2:1 with 128-bit output blocks. Even though the requirement is defined in terms of 128-bit full entropy blocks, we recommend 256-bit security. This can be accomplished by using at least 512 entropy bits to initialize a DRBG that has 256-bit security. For alternative Common Criteria certification (or self-certification), AIS 31 PTG.2 class [33] (Sect. 4.3.) required hardware components and mechanisms must be implemented. In addition to AIS-31 PTG.2 randomness requirements (Shannon entropy rate of 0.997 as evaluated in that standard), the overall min-entropy requirement of remains, as discussed in NIST SP 800-90B / FIPS 140-3 Requirements. Note that 800-90B min-entropy can be significantly lower than AIS-31 Shannon entropy. These two metrics should not be equated or confused with each other. A virtual source is not an ISA compliance requirement. It is defined for the benefit of the RISC-V security ecosystem so that virtual systems may have a consistent level of security. A virtual source is not a physical entropy source but provides additional protection against covert channels, depletion attacks, and host identification in operating environments that can not be entirely trusted with direct access to a hardware resource. Despite limited trust, implementers should try to guarantee that even such environments have sufficient entropy available for secure cryptographic operations. A virtual source traps access to the seed CSR, emulates it, or otherwise implements it, possibly without direct access to a physical entropy source. The output can be cryptographically secure pseudorandomness instead of real entropy, but must have at least 256-bit security, as defined below. A virtual source is intended especially for guest operating systems, sandboxes, emulators, and similar use cases. As a technical definition, a random-distinguishing attack against the output should require computational resources comparable or greater than those required for exhaustive key search on a secure block cipher with a 256-bit key (e.g., AES 256). This applies to both classical and quantum computing models, but only classical information flows. The virtual source security requirement maps to Post-Quantum Security Category 5 [36]. Any implementation of the seed CSR that limits the security strength shall not reduce it to less than 256 bits. If the security level is under 256 bits, then the interface must not be available. A virtual entropy source does not need to implement WAIT or BIST states. It should fail (DEAD) if the host DRBG or entropy source fails and there is insufficient seeding material for the host DRBG. The seed CSR is by default only available in M mode, but can be made available to other modes via the mseccfg.sseed and mseccfg.useed access control bits. sseed is bit 9 of and useed is bit 8 of the mseccfg CSR. Without the corresponding access control bit set to 1, any attempted access to seed from U, S, or HS modes will raise an illegal-instruction exception. VS and VU modes are present in systems with Hypervisor (H) extension implemented. If desired, a hypervisor can emulate accesses to the seed CSR from a virtual machine. Attempted access to seed from virtual modes VS and VU always raises an exception; a read-only instruction causes an illegal-instruction exception, while a read-write instruction (that can potentially be emulated) causes a virtual-instruction exception only if mseccfg.sseed=1. Note that mseccfg.useed has no effect on the exception type for either VS or VU modes. Table 1. Entropy Source Access Control. Mode sseed useed Description M * * The seed CSR is always available in machine mode as normal (with a CSR read-write instruction.) Attempted read without a write raises an illegal-instruction exception regardless of mode and access control bits. U * 0 Any seed CSR access raises an illegal-instruction exception. U * 1 The seed CSR is accessible as normal. No exception is raised for read-write. S/HS 0 * Any seed CSR access raises an illegal-instruction exception. S/HS 1 * The seed CSR is accessible as normal. No exception is raised for read-write. VS/VU 0 * Any seed CSR access raises an illegal-instruction exception. VS/VU 1 * A read-write seed access raises a virtual-instruction exception, while other access conditions raise an illegal-instruction exception. Systems should implement carefully considered access control policies from lower privilege modes to physical entropy sources. The system can trap attempted access to seed and feed a less privileged client virtual entropy source data (Virtual Sources: Security Requirement) instead of invoking an SP 800-90B (NIST SP 800-90B / FIPS 140-3 Requirements) or PTG.2 (BSI AIS-31 PTG.2 / Common Criteria Requirements) physical entropy source. Emulated seed data generation is made with an appropriately seeded, secure software DRBG. See Security Considerations for Direct Hardware Access for security considerations related to direct access to entropy sources. Implementations may implement mseccfg such that [s,u]seed is a read-only constant value 0. Software may discover if access to the seed CSR can be enabled in U and S mode by writing a 1 to [s,u]seed and reading back the result. If S or U mode is not implemented, then the corresponding [s,u]seed bits of mseccfg must be hardwired to zero. The [s,u]seed bits must have a defined reset value. The system must not allow them to be in an undefined state after a reset. mseccfg exists if Zkr is implemented, or if it is required by other processor features. If Zkr is not implemented, the [s,u]seed bits must be hardwired to zero. The Zkt extension attests that the machine has data-independent execution time for a safe subset of instructions. This property is commonly called \"constant-time\" although should not be taken with that literal meaning. All currently proposed cryptographic instructions (scalar K extension) are on this list, together with a set of relevant supporting instructions from I, M, C, and B extensions. Note to software developers Failure to prevent leakage of sensitive parameters via the direct timing channel is considered a serious security vulnerability and will typically result in a CERT CVE security advisory. An \"ISA contract\" is made between a programmer and the RISC-V implementation that Zkt instructions do not leak information about processed secret data (plaintext, keying information, or other \"sensitive security parameters\" — FIPS 140-3 term) through differences in execution latency. Zkt does not define a set of instructions available in the core; it just restricts the behaviour of certain instructions if those are implemented. Currently, the scope of this document is within scalar RV32/RV64 processors. Vector cryptography instructions (and appropriate vector support instructions) will be added later, as will other security-related functions that wish to assert leakage-free execution latency properties. Loads, stores, conditional branches are excluded, along with a set of instructions that are rarely necessary to process secret data. Also excluded are instructions for which workarounds exist in standard cryptographic middleware due to the limitations of other ISA processors. The stated goal is that OpenSSL, BoringSSL (Android), the Linux Kernel, and similar trusted software will not have directly observable timing side channels when compiled and running on a Zkt-enabled RISC-V target. The Zkt extension explicitly states many of the common latency assumptions made by cryptography developers. Vendors do not have to implement all of the list’s instructions to be Zkt compliant; however, if they claim to have Zkt and implement any of the listed instructions, it must have data-independent latency. For example, many simple RV32I and RV64I cores (without Multiply, Compressed, Bitmanip, or Cryptographic extensions) are technically compliant with Zkt. A constant-time AES can be implemented on them using \"bit-slice\" techniques, but it will be excruciatingly slow when compared to implementation with AES instructions. There are no guarantees that even a bit-sliced cipher implementation (largely based on boolean logic instructions) is secure on a core without Zkt attestation. Out-of-order implementations adhering to Zkt are still free to fuse, crack, change or even ignore sequences of instructions, so long as the optimisations are applied deterministically, and not based on operand data. The guiding principle should be that no information about the data being operated on should be leaked based on the execution latency. It is left to future extensions or other techniques to tackle the problem of data-independent execution in implementations which advanced out-of-order capabilities which use value prediction, or which are otherwise data-dependent. Note to software developers Programming techniques can only mitigate leakage directly caused by arithmetic, caches, and branches. Other ISAs have had micro-architectural issues such as Spectre, Meltdown, Speculative Store Bypass, Rogue System Register Read, Lazy FP State Restore, Bounds Check Bypass Store, TLBleed, and L1TF/Foreshadow, etc. See e.g. NSA Hardware and Firmware Security Guidance It is not within the remit of this proposal to mitigate these micro-architectural leakages. Timing attacks are much more powerful than was realised before the 2010s, which has led to a significant mitigation effort in current cryptographic code-bases. Cryptography developers use static and dynamic security testing tools to trace the handling of secret information and detect occasions where it influences a branch or is used for a table lookup. Architectural testing for Zkt can be pragmatic and semi-formal; security by design against basic timing attacks can usually be achieved via conscious implementation (of relevant iterative multi-cycle instructions or instructions composed of micro-ops) in way that avoids data-dependent latency. Laboratory testing may utilize statistical timing attack leakage analysis techniques such as those described in ISO/IEC 17825 [37]. Binary executables should not contain secrets in the instruction encodings (Kerckhoffs’s principle), so instruction timing may leak information about immediates, ordering of input registers, etc. There may be an exception to this in systems where a binary loader modifies the executable for purposes of relocation — and it is desirable to keep the execution location (PC) secret. This is why instructions such as LUI, AUIPC, and ADDI are on the list. The rules used by audit tools are relatively simple to understand. Very briefly; we call the plaintext, secret keys, expanded keys, nonces, and other such variables \"secrets\". A secret variable (arithmetically) modifying any other variable/register turns that into a secret too. If a secret ends up in address calculation affecting a load or store, that is a violation. If a secret affects a branch’s condition, that is also a violation. A secret variable location or register becomes a non-secret via specific zeroization/sanitisation or by being declared ciphertext (or otherwise no-longer-secret information). In essence, secrets can only \"touch\" instructions on the Zkt list while they are secrets. HINT instruction forms (typically encodings with rd=x0) are excluded from the data-independent time requirement. Floating point (F, D, Q, L extensions) are currently excluded from the constant-time requirement as they have very few applications in standardised cryptography. We may consider adding floating point add, sub, multiply as a constant time requirement for some floating point extension in case a specific algorithm (such as the PQC Signature algorithm Falcon) becomes critical. Cryptographers typically assume division to be variable-time (while multiplication is constant time) and implement their Montgomery reduction routines with that assumption. Zicsr, Zifencei are excluded. Some instructions are on the list simply because we see no harm in including them in testing scope. For background information on secure programming \"models\", see: Thomas Pornin: \"Why Constant-Time Crypto?\" (A great introduction to timing assumptions.) https://www.bearssl.org/constanttime.html Jean-Philippe Aumasson: \"Guidelines for low-level cryptography software.\" (A list of recommendations.) https://github.com/veorq/cryptocoding Peter Schwabe: \"Timing Attacks and Countermeasures.\" (Lecture slides — nice references.) https://summerschool-croatia.cs.ru.nl/2016/slides/PeterSchwabe.pdf Adam Langley: \"ctgrind.\" (This is from 2010 but is still relevant.) https://www.imperialviolet.org/2010/04/01/ctgrind.html Kris Kwiatkowski: \"Constant-time code verification with Memory Sanitizer.\" https://www.amongbytes.com/post/20210709-testing-constant-time/ For early examples of timing attack vulnerabilities, see https://www.kb.cert.org/vuls/id/997481 and related academic papers. The following instructions are included in the Zkt subset They are listed here grouped by their original parent extension. Note to implementers You do not need to implement all of these instructions to implement Zkt. Rather, every one of these instructions that the core does implement must adhere to the requirements of Zkt. Only basic arithmetic and slt* (for carry computations) are included. The data-independent timing requirement does not apply to HINT instruction encoding forms of these instructions. RV32 RV64 Mnemonic Instruction ✓ ✓ lui rd, imm [insns-lui] ✓ ✓ auipc rd, imm [insns-auipc] ✓ ✓ addi rd, rs1, imm [insns-addi] ✓ ✓ slti rd, rs1, imm [insns-slti] ✓ ✓ sltiu rd, rs1, imm [insns-sltiu] ✓ ✓ xori rd, rs1, imm [insns-xori] ✓ ✓ ori rd, rs1, imm [insns-ori] ✓ ✓ andi rd, rs1, imm [insns-andi] ✓ ✓ slli rd, rs1, imm [insns-slli] ✓ ✓ srli rd, rs1, imm [insns-srli] ✓ ✓ srai rd, rs1, imm [insns-srai] ✓ ✓ add rd, rs1, rs2 [insns-add] ✓ ✓ sub rd, rs1, rs2 [insns-sub] ✓ ✓ sll rd, rs1, rs2 [insns-sll] ✓ ✓ slt rd, rs1, rs2 [insns-slt] ✓ ✓ sltu rd, rs1, rs2 [insns-sltu] ✓ ✓ xor rd, rs1, rs2 [insns-xor] ✓ ✓ srl rd, rs1, rs2 [insns-srl] ✓ ✓ sra rd, rs1, rs2 [insns-sra] ✓ ✓ or rd, rs1, rs2 [insns-or] ✓ ✓ and rd, rs1, rs2 [insns-and] ✓ addiw rd, rs1, imm [insns-addiw] ✓ slliw rd, rs1, imm [insns-slliw] ✓ srliw rd, rs1, imm [insns-srliw] ✓ sraiw rd, rs1, imm [insns-sraiw] ✓ addw rd, rs1, rs2 [insns-addw] ✓ subw rd, rs1, rs2 [insns-subw] ✓ sllw rd, rs1, rs2 [insns-sllw] ✓ srlw rd, rs1, rs2 [insns-srlw] ✓ sraw rd, rs1, rs2 [insns-sraw] Multiplication is included; division and remaindering excluded. RV32 RV64 Mnemonic Instruction ✓ ✓ mul rd, rs1, rs2 [insns-mul] ✓ ✓ mulh rd, rs1, rs2 [insns-mulh] ✓ ✓ mulhsu rd, rs1, rs2 [insns-mulhsu] ✓ ✓ mulhu rd, rs1, rs2 [insns-mulhu] ✓ mulw rd, rs1, rs2 [insns-mulw] Same criteria as in RVI. Organised by quadrants. RV32 RV64 Mnemonic Instruction ✓ ✓ c.nop [insns-c_nop] ✓ ✓ c.addi [insns-c_addi] ✓ c.addiw [insns-c_addiw] ✓ ✓ c.lui [insns-c_lui] ✓ ✓ c.srli [insns-c_srli] ✓ ✓ c.srai [insns-c_srai] ✓ ✓ c.andi [insns-c_andi] ✓ ✓ c.sub [insns-c_sub] ✓ ✓ c.xor [insns-c_xor] ✓ ✓ c.or [insns-c_or] ✓ ✓ c.and [insns-c_and] ✓ c.subw [insns-c_subw] ✓ c.addw [insns-c_addw] ✓ ✓ c.slli [insns-c_slli] ✓ ✓ c.mv [insns-c_mv] ✓ ✓ c.add [insns-c_add] All K-specific instructions are included. Additionally, seed CSR latency should be independent of ES16 state output entropy bits, as that is a sensitive security parameter. See Security Considerations for Direct Hardware Access. RV32 RV64 Mnemonic Instruction ✓ aes32dsi AES final round decrypt (RV32) ✓ aes32dsmi AES middle round decrypt (RV32) ✓ aes32esi AES final round encrypt (RV32) ✓ aes32esmi AES middle round encrypt (RV32) ✓ aes64ds AES decrypt final round (RV64) ✓ aes64dsm AES decrypt middle round (RV64) ✓ aes64es AES encrypt final round instruction (RV64) ✓ aes64esm AES encrypt middle round instruction (RV64) ✓ aes64im AES Decrypt KeySchedule MixColumns (RV64) ✓ aes64ks1i AES Key Schedule Instruction 1 (RV64) ✓ aes64ks2 AES Key Schedule Instruction 2 (RV64) ✓ ✓ sha256sig0 SHA2-256 Sigma0 instruction ✓ ✓ sha256sig1 SHA2-256 Sigma1 instruction ✓ ✓ sha256sum0 SHA2-256 Sum0 instruction ✓ ✓ sha256sum1 SHA2-256 Sum1 instruction ✓ sha512sig0h SHA2-512 Sigma0 high (RV32) ✓ sha512sig0l SHA2-512 Sigma0 low (RV32) ✓ sha512sig1h SHA2-512 Sigma1 high (RV32) ✓ sha512sig1l SHA2-512 Sigma1 low (RV32) ✓ sha512sum0r SHA2-512 Sum0 (RV32) ✓ sha512sum1r SHA2-512 Sum1 (RV32) ✓ sha512sig0 SHA2-512 Sigma0 instruction (RV64) ✓ sha512sig1 SHA2-512 Sigma1 instruction (RV64) ✓ sha512sum0 SHA2-512 Sum0 instruction (RV64) ✓ sha512sum1 SHA2-512 Sum1 instruction (RV64) ✓ ✓ sm3p0 SM3 P0 transform ✓ ✓ sm3p1 SM3 P1 transform ✓ ✓ sm4ed SM4 Encrypt/Decrypt Instruction ✓ ✓ sm4ks SM4 Key Schedule Instruction The Zbkb-sc, Zbkc-sc and Zbkx-sc extensions are included in their entirety. Note to implementers Recall that rev, zip and unzip are pseudoinstructions representing specific instances of grevi, shfli and unshfli respectively. RV32 RV64 Mnemonic Instruction ✓ ✓ clmul Carry-less multiply (low-part) ✓ ✓ clmulh Carry-less multiply (high-part) ✓ ✓ xperm4 Crossbar permutation (nibbles) ✓ ✓ xperm8 Crossbar permutation (bytes) ✓ ✓ ror Rotate right (Register) ✓ ✓ rol Rotate left (Register) ✓ ✓ rori Rotate right (Immediate) ✓ rorw Rotate right Word (Register) ✓ rolw Rotate Left Word (Register) ✓ roriw Rotate right Word (Immediate) ✓ ✓ andn AND with inverted operand ✓ ✓ orn OR with inverted operand ✓ ✓ xnor Exclusive NOR ✓ ✓ pack Pack low halves of registers ✓ ✓ packh Pack low bytes of registers ✓ packw Pack low 16-bits of registers (RV64) ✓ ✓ brev8 Reverse bits in bytes ✓ ✓ rev8 Byte-reverse register ✓ zip Bit interleave ✓ unzip Bit deinterleave This section contains various rationale, design notes and usage recommendations for the instructions in the scalar cryptography extension. It also tries to record how the designs of instructions were derived, or where they were contributed from. The 32-bit instructions were derived from work in [38] and contributed to the RISC-V cryptography extension. The 64-bit instructions were developed collaboratively by task group members on our mailing list. Supporting material, including rationale and a design space exploration for all of the AES instructions in the specification can be found in the paper \"The design of scalar AES Instruction Set Extensions for RISC-V\" [39]. These instructions were developed based on academic work at the University of Bristol as part of the XCrypto project [40], and contributed to the RISC-V cryptography extension. The RV32 SHA2-512 instructions were based on this work, and developed in [31], before being contributed in the same way. The SM4 instructions were derived from work in [38], and are hence very similar to the RV32 AES instructions. The SM3 instructions were inspired by the SHA2 instructions, and based on development work done in [31], before being contributed to the RISC-V cryptography extension. Many of the primitive operations used in symmetric key cryptography and cryptographic hash functions are well supported by the RISC-V Bitmanip extensions (see [bits]). This section repeats much of the information in Zbkb-sc, Zbkc-sc and Zbkx-sc, but includes more rationale. We proposed that the scalar cryptographic extension reuse a subset of the instructions from the Bitmanip extensions Zb[abc] directly. Specifically, this would mean that a core implementing either the scalar cryptographic extensions, or the Zb[abc], or both, would be required to implement these instructions. RV32, RV64: RV64 only: ror rd, rs1, rs2 rorw rd, rs1, rs2 rol rd, rs1, rs2 rolw rd, rs1, rs2 rori rd, rs1, imm roriw rd, rs1, imm See [zbkb] for details of these instructions. Notes to software developers Standard bitwise rotation is a primitive operation in many block ciphers and hash functions; it features particularly in the ARX (Add, Rotate, Xor) class of block ciphers and stream ciphers. Algorithms making use of 32-bit rotations: SHA256, AES (Shift Rows), ChaCha20, SM3. Algorithms making use of 64-bit rotations: SHA512, SHA3. RV32, RV64: brev8 rd, rs1 rev8 rd, rs1 See [zbkb] for details of these instructions. Notes to software developers Reversing bytes in words is very common in cryptography when setting a standard endianness for input and output data. Bit reversal within bytes is used for implementing the GHASH component of Galois/Counter Mode (GCM) [41]. RV32: zip rd, rs1 unzip rd, rs1 See [zbkb] for details of these instructions. Notes to software developers These instructions perform a bit-interleave (or de-interleave) operation, and are useful for implementing the 64-bit rotations in the SHA3 [42] algorithm on a 32-bit architecture. On RV64, the relevant operations in SHA3 can be done natively using rotation instructions, so zip and unzip are not required. RV32, RV64: clmul rd, rs1, rs2 clmulh rd, rs1, rs2 See [zbkc] for details of these instructions. See Data Independent Execution Latency Subset: Zkt for additional implementation requirements for these instructions, related to data independent execution latency. Notes to software developers As is mentioned there, obvious cryptographic use-cases for carry-less multiply are for Galois Counter Mode (GCM) block cipher operations. GCM is recommended by NIST as a block cipher mode of operation [41], and is the only required mode for the TLS 1.3 protocol. RV32, RV64: andn rd, rs1, rs2 orn rd, rs1, rs2 xnor rd, rs1, rs2 See [zbkb] for details of these instructions. These instructions are useful inside hash functions, block ciphers and for implementing software based side-channel countermeasures like masking. The andn instruction is also useful for constant time word-select in systems without the ternary Bitmanip cmov instruction. Notes to software developers In the context of Cryptography, these instructions are useful for: SHA3/Keccak Chi step, Bit-sliced function implementations, Software based power/EM side-channel countermeasures based on masking. RV32, RV64: RV64: pack rd, rs1, rs2 packw rd, rs1, rs2 packh rd, rs1, rs2 See [zbkb] for details of these instructions. Notes to software developers The pack* instructions are useful for re-arranging halfwords within words, and generally getting data into the right shape prior to applying transforms. This is particularly useful for cryptographic algorithms which pass inputs around as (potentially un-aligned) byte strings, but can operate on words made out of those byte strings. This occurs (for example) in AES when loading blocks and keys (which may not be word aligned) into registers to perform the round functions. RV32, RV64: xperm4 rd, rs1, rs2 xperm8 rd, rs1, rs2 See [zbkx] for a complete description of these instructions. The xperm4 instruction operates on nibbles. GPR[rs1] contains a vector of XLEN/4 4-bit elements. GPR[rs2] contains a vector of XLEN/4 4-bit indexes. The result is each element in GPR[rs2] replaced by the indexed element in GPR[rs1], or zero if the index into GPR[rs2] is out of bounds. The xperm8 instruction operates on bytes. GPR[rs1] contains a vector of XLEN/8 8-bit elements. GPR[rs2] contains a vector of XLEN/8 8-bit indexes. The result is each element in GPR[rs2] replaced by the indexed element in GPR[rs1], or zero if the index into GPR[rs2] is out of bounds. Notes to software developers The instruction can be used to implement arbitrary bit permutations. For cryptography, they can accelerate bit-sliced implementations, permutation layers of block ciphers, masking based countermeasures and SBox operations. Lightweight block ciphers using 4-bit SBoxes include: PRESENT [43], Rectangle [44], GIFT [45], Twine [46], Skinny, MANTIS [47], Midori [48]. National ciphers using 8-bit SBoxes include: Camellia [49] (Japan), Aria [50] (Korea), AES [30] (USA, Belgium), SM4 [51] (China) Kuznyechik (Russia). All of these SBoxes can be implemented efficiently, in constant time, using the xperm8 instruction [1]. Note that this technique is also suitable for masking based side-channel countermeasures. This non-normative appendix focuses on the rationale, security, self-certification, and implementation aspects of entropy sources. Hence we also discuss non-ISA system features that may be needed for cryptographic standards compliance and security testing. The security of cryptographic systems is based on secret bits and keys. These bits need to be random and originate from cryptographically secure Random Bit Generators (RBGs). An Entropy Source (ES) is required to construct secure RBGs. While entropy source implementations do not have to be certified designs, RISC-V expects that they behave in a compatible manner and do not create unnecessary security risks to users. Self-evaluation and testing following appropriate security standards is usually needed to achieve this. ISA Architectural Tests. Verify, to the extent possible, that RISC-V ISA requirements in this specification are correctly implemented. This includes the state transitions (Entropy Source and Suggested GetNoise Test Interface), access control (Access Control to seed), and that seed ES16 entropy words can only be read destructively. The scope of RISC-V ISA architectural tests are those behaviors that are independent of the physical entropy source details. A smoke test ES module may be helpful in design phase. Technical justification for entropy. This may take the form of a stochastic model or a heuristic argument that explains why the noise source output is from a random, rather than pseudorandom (deterministic) process, and is not easily predictable or externally observable. A complete physical model is not necessary; research literature can be cited. For example, one can show that a good ring oscillator noise derives an amount of physical entropy from local, spontaneously occurring Johnson-Nyquist thermal noise [52], and is therefore not merely \"random-looking\". Entropy Source Design Review. An entropy source is more than a noise source, and must have features such as health tests (Security Controls and Health Tests), a conditioner (Conditioning: Cryptographic and Non-Cryptographic), and a security boundary with clearly defined interfaces. One may tabulate the SHALL statements of SP 800-90B [32], FIPS 140-3 Implementation Guidance [53], AIS-31 [33] or other standards being used. Official and non-official checklist tables are available: https://github.com/usnistgov/90B-Shall-Statements Experimental Tests. The raw noise source is subjected to entropy estimation as defined in NIST 800-90B, Section 3 [32]. The interface described in Suggested GetNoise Test Interface can used be to record datasets for this purpose. One also needs to show experimentally that the conditioner and health test components work appropriately to meet the ES16 output entropy requirements of Entropy Source Requirements. For SP 800-90B, NIST has made a min-entropy estimation package freely available: https://github.com/usnistgov/SP800-90B_EntropyAssessment Resilience. Above physical engineering steps should consider the operational environment of the device, which may be unexpected or hostile (actively attempting to exploit vulnerabilities in the design). See Implementation Strategies for a discussion of various implementation options. It is one of the goals of the RISC-V Entropy Source specification that a standard 90B Entropy Source Module or AIS-31 RNG IP may be licensed from a third party and integrated with a RISC-V processor design. Compared to older (FIPS 140-2) RNG and DRBG modules, an entropy source module may have a relatively small area (just a few thousand NAND2 gate equivalent). CMVP is introducing an \"Entropy Source Validation Scope\" which potentially allows 90B validations to be reused for different (FIPS 140-3) modules. As a fundamental security function, the generation of random numbers is governed by numerous standards and technical evaluation methods, the main ones being FIPS 140-3 cite:[NI19,NICC21] required for U.S. Federal use, and Common Criteria Methodology [54] used in high-security evaluations internationally. Note that FIPS 140-3 is a significantly updated standard compared to its predecessor FIPS 140-2 and is only coming into use in the 2020s. These standards set many of the technical requirements for the RISC-V entropy source design, and we use their terminology if possible. The seed CSR provides an Entropy Source (ES) interface, not a stateful random number generator. As a result, it can support arbitrary security levels. Cryptographic (AES, SHA-2/3) ISA Extensions can be used to construct high-speed DRBGs that are seeded from the entropy source. Entropy sources are built by sampling and processing data from a noise source (Ring Oscillators). We will only consider physical sources of true randomness in this work. Since these are directly based on natural phenomena and are subject to environmental conditions (which may be adversarial), they require features that monitor the \"health\" and quality of those sources. The requirements for physical entropy sources are specified in NIST SP 800-90B [32] (NIST SP 800-90B / FIPS 140-3 Requirements) for U.S. Federal FIPS 140-3 [55] evaluations and in BSI AIS-31 cite:[KiSc01,KiSc11] (BSI AIS-31 PTG.2 / Common Criteria Requirements) for high-security Common Criteria evaluations. There is some divergence in the types of health tests and entropy metrics mandated in these standards, and RISC-V enables support for both alternatives. Raw physical randomness (noise) sources are rarely statistically perfect, and some generate very large amounts of bits, which need to be \"debiased\" and reduced to a smaller number of bits. This process is called conditioning. A secure hash function is an example of a cryptographic conditioner. It is important to note that even though hashing may make any data look random, it does not increase its entropy content. Non-cryptographic conditioners and extractors such as von Neumann’s \"debiased coin tossing\" [56] are easier to implement efficiently but may reduce entropy content (in individual bits removed) more than cryptographic hashes, which mix the input entropy very efficiently. However, they do not require cryptanalytic or computational hardness assumptions and are therefore inherently more future-proof. See Non-cryptographic Conditioners for a more detailed discussion. Pseudorandom Number Generators (PRNGs) use deterministic mathematical formulas to create abundant random numbers from a smaller amount of \"seed\" randomness. PRNGs are also divided into cryptographic and non-cryptographic ones. Non-cryptographic PRNGs, such as LFSRs and the linear-congruential generators found in many programming libraries, may generate statistically satisfactory random numbers but must never be used for cryptographic keying. This is because they are not designed to resist cryptanalysis; it is usually possible to take some output and mathematically derive the \"seed\" or the internal state of the PRNG from it. This is a security problem since knowledge of the state allows the attacker to compute future or past outputs. Cryptographic PRNGs are also known as Deterministic Random Bit Generators (DRBGs), a term used by SP 800-90A [34]. A strong cryptographic algorithm such as AES [30] or SHA-2/3 cite:[nist:fips:202,nist:fips:180:4] is used to produce random bits from a seed. The secret seed material is like a cryptographic key; determining the seed from the DRBG output is as hard as breaking AES or a strong hash function. This also illustrates that the seed/key needs to be long enough and come from a trusted Entropy Source. The DRBG should still be frequently refreshed (reseeded) for forward and backward security. See The seed CSR. The interface was designed to be simple so that a vendor- and device-independent driver component (e.g., in Linux kernel, embedded firmware, or a cryptographic library) may use seed to generate truly random bits. An entropy source does not require a high-bandwidth interface; a single DRBG source initialization only requires 512 bits (256 bits of entropy), and DRBG output can be shared by any number of callers. Once initiated, a DRBG requires new entropy only to mitigate the risk of state compromise. From a security perspective, it is essential that the side effect of flushing the secret entropy bits occurs upon reading. Hence we mandate a write operation on this particular CSR. A blocking instruction may have been easier to use, but most users should be querying a (D)RBG instead of an entropy source. Without a polling-style mechanism, the entropy source could hang for thousands of cycles under some circumstances. A wfi or pause mechanism (at least potentially) allows energy-saving sleep on MCUs and context switching on higher-end CPUs. The reason for the particular OPST = seed[31:0] two-bit mechanism is to provide redundancy. The \"fault\" bit combinations 11 (DEAD) and 00 (BIST) are more likely for electrical reasons if feature discovery fails and the entropy source is actually not available. The 16-bit bandwidth was a compromise motivated by the desire to provide redundancy in the return value, some protection against potential Power/EM leakage (further alleviated by the 2:1 cryptographic conditioning discussed in Cryptographic Conditioners), and the desire to have all of the bits \"in the same place\" on both RV32 and RV64 architectures for programming convenience. See NIST SP 800-90B / FIPS 140-3 Requirements. SP 800-90C [35] states that each conditioned block of n bits is required to have n+64 bits of input entropy to attain full entropy. Hence NIST SP 800-90B [32] min-entropy assessment must guarantee at least 128 + 64 = 192 bits input entropy per 256-bit block ([35], Sections 4.1. and 4.3.2). Only then a hashing of 16 * 16 = 256 bits from the entropy source will produce the desired 128 bits of full entropy. This follows from the specific requirements, threat model, and distinguishability proof contained in SP 800-90C [35], Appendix A. The implied min-entropy rate is 192/256=12/16=0.75. The expected Shannon entropy is much larger. In FIPS 140-3 / SP 800-90 classification, an RBG2(P) construction is a cryptographically secure RBG with continuous access to a physical entropy source (seed) and output generated by a fully seeded, secure DRBG. The entropy source can also be used to build RBG3 full entropy sources [35]. The concatenation of output words corresponds to the Get_ES_Bitstring function. The 128-bit output block size was selected because that is the output size of the CBC-MAC conditioner specified in Appendix F of [32] and also the smallest key size we expect to see in applications. If NIST SP 800-90B certification is chosen, the entropy source should implement at least the health tests defined in Section 4.4 of [32]: the repetition count test and adaptive proportion test, or show that the same flaws will be detected by vendor-defined tests. See BSI AIS-31 PTG.2 / Common Criteria Requirements. PTG.2 is one of the security and functionality classes defined in BSI AIS 20/31 [33]. The PTG.2 source requirements work as a building block for other types of BSI generators (e.g., DRBGs, or PTG.3 TRNG with appropriate software post-processing). For validation purposes, the PTG.2 requirements may be mapped to security controls T1-3 (Security Controls and Health Tests) and the interface as follows: P1 [PTG.2.1] Start-up tests map to T1 and reset-triggered (on-demand) BIST tests. P2 [PTG.2.2] Continuous testing total failure maps to T2 and the DEAD state. P3 [PTG.2.3] Online tests are continuous tests of T2 – entropy output is prevented in the BIST state. P4 [PTG.2.4] Is related to the design of effective entropy source health tests, which we encourage. P5 [PTG.2.5] Raw random sequence may be checked via the GetNoise interface (Suggested GetNoise Test Interface). P6 [PTG.2.6] Test Procedure A [33] (Sect 2.4.4.1) is a part of the evaluation process, and we suggest self-evaluation using these tests even if AIS-31 certification is not sought. P7 [PTG.2.7] Average Shannon entropy of \"internal random bits\" exceeds 0.997. Note how P7 concerns Shannon entropy, not min-entropy as with NIST sources. Hence the min-entropy requirement needs to be also stated. PTG.2 modules built and certified to the AIS-31 standard can also meet the \"full entropy\" condition after 2:1 cryptographic conditioning, but not necessarily so. The technical validation process is somewhat different. Virtual Sources: Security Requirement. All sources that are not direct physical sources (meeting the SP 800-90B or the AIS-31 PTG.2 requirements) need to meet the security requirements of virtual entropy sources. It is assumed that a virtual entropy source is not a limiting, shared bandwidth resource (but a software DRBG). DRBGs can be used to feed other (virtual) DRBGs, but that does not increase the absolute amount of entropy in the system. The entropy source must be able to support current and future security standards and applications. The 256-bit requirement maps to \"Category 5\" of NIST Post-Quantum Cryptography (4.A.5 \"Security Strength Categories\" in [36]) and TOP SECRET schemes in Suite B and the newer U.S. Government CNSA Suite [57]. Access Control to seed. The ISA implementation and system design must try to ensure that the hardware-software interface minimizes avenues for adversarial information flow even if not explicitly forbidden in the specification. For security, virtualization requires both conditioning and DRBG processing of physical entropy output. It is recommended if a single physical entropy source is shared between multiple different virtual machines or if the guest OS is untrusted. A virtual entropy source is significantly more resistant to depletion attacks and also lessens the risk from covert channels. The direct mseccfg.[s,u]seed option allows one to draw a security boundary around a component in relation to Sensitive Security Parameter (SSP) flows, even if that component is not in M mode. This is helpful when implementing trusted enclaves. Such modules can enforce the entire key lifecycle from birth (in the entropy source) to death (zeroization) to occur without the key being passed across the boundary to external code. Depletion. Active polling may deny the entropy source to another simultaneously running consumer. This can (for example) delay the instantiation of that virtual machine if it requires entropy to initialize fully. Covert Channels. Direct access to a component such as the entropy source can be used to establish communication channels across security boundaries. Active polling from one consumer makes the resource unavailable WAIT instead of ES16 to another (which is polling infrequently). Such interactions can be used to establish low-bandwidth channels. Hardware Fingerprinting. An entropy source (and its noise source circuits) may have a uniquely identifiable hardware \"signature.\" This can be harmless or even useful in some applications (as random sources may exhibit Physically Un-clonable Function (PUF) -like features) but highly undesirable in others (anonymized virtualized environments and enclaves). A DRBG masks such statistical features. Side Channels. Some of the most devastating practical attacks against real-life cryptosystems have used inconsequential-looking additional information, such as padding error messages [58] or timing information [59]. We urge implementers against creating unnecessary information flows via status or custom bits or to allow any other mechanism to disable or affect the entropy source output. All information flows and interaction mechanisms must be considered from an adversarial viewpoint: the fewer the better. As an example of side-channel analysis, we note that the entropy polling interface is typically not \"constant time.\" One needs to analyze what kind of information is revealed via the timing oracle; one way of doing it is to model seed as a rejection sampler. Such a timing oracle can reveal information about the noise source type and entropy source usage, but not about the random output entropy bits themselves. If it does, additional countermeasures are necessary. The primary purpose of a cryptographic entropy source is to produce secret keying material. In almost all cases, a hardware entropy source must implement appropriate security controls to guarantee unpredictability, prevent leakage, detect attacks, and deny adversarial control over the entropy output or ts generation mechanism. Explicit security controls are required for security testing and certification. Many of the security controls built into the device are called \"health checks.\" Health checks can take the form of integrity checks, start-up tests, and on-demand tests. These tests can be implemented in hardware or firmware, typically both. Several are mandated by standards such as NIST SP 800-90B [55]. The choice of appropriate health tests depends on the certification target, system architecture, threat model, entropy source type, and other factors. Health checks are not intended for hardware diagnostics but for detecting security issues. Hence the default action in case of a failure should be aimed at damage control: Limiting further output and preventing weak crypto keys from being generated. We discuss three specific testing requirements T1-T3. The testing requirement follows from the definition of an Entropy Source; without it, the module is simply a noise source and can’t be trusted to safely generate keying material. A sequence of simple tests is invoked via resetting, rebooting, or powering up the hardware (not an ISA signal). The implementation will simply return BIST during the initial start-up self-test period; in any case, the driver must wait for them to finish before starting cryptographic operations. Upon failure, the entropy source will enter a no-output DEAD state. Rationale. Interaction with hardware self-test mechanisms from the software side should be minimal; the term \"on-demand\" does not mean that the end-user or application program should be able to invoke them in the field (the term is a throwback to an age of discrete, non-autonomous crypto devices with human operators). If an error is detected in continuous tests or environmental sensors, the entropy source will enter a no-output state. We define that a non-critical alarm is signaled if the entropy source returns to BIST state from live (WAIT or ES16) states. Critical failures will result in DEAD state immediately. A hardware-based continuous testing mechanism must not make statistical information externally available, and it must be zeroized periodically or upon demand via reset, power-up, or similar signal. Rationale. Physical attacks can occur while the device is running. The design should avoid guiding such active attacks by revealing detailed status information. Upon detection of an attack, the default action should be aimed at damage control — to prevent weak crypto keys from being generated. The statistical nature of some tests makes \"type-1\" false positives a possibility. There may also be requirements for signaling of non-fatal alarms; AIS 31 specifies \"noise alarms\" that can go off with non-negligible probability even if the device is functioning correctly; these can be signaled with BIST. There rarely is anything that can or should be done about a non-fatal alarm condition in an operator-free, autonomous system. The state of statistical runtime health checks (such as counters) is potentially correlated with some secret keying material, hence the zeroization requirement. Since the security of most cryptographic operations depends on the entropy source, a system-wide \"default deny\" security policy approach is appropriate for most entropy source failures. A hardware test failure should at least result in the DEAD state and possibly reset/halt. It’s a show stopper: The entropy source (or its cryptographic client application) must not be allowed to run if its secure operation can’t be guaranteed. Rationale. These tests can complement other integrity and tamper resistance mechanisms (See Chapter 18 of [60] for examples). Some hardware random generators are, by their physical construction, exposed to relatively non-adversarial environmental and manufacturing issues. However, even such \"innocent\" failure modes may indicate a fault attack [61] and therefore should be addressed as a system integrity failure rather than as a diagnostic issue. Security architects will understand to use permanent or hard-to-recover \"security-fuse\" lockdowns only if the threshold of a test is such that the probability of false-positive is negligible over the entire device lifetime. Some of the most devastating practical attacks against real-life cryptosystems have used inconsequential-looking additional information, such as padding error messages [58] or timing information [59]. In cryptography, such out-of-band information sources are called \"oracles.\" To guarantee that no sensitive data is read twice and that different callers don’t get correlated output, it is required that hardware implements wipe-on-read on the randomness pathway during each read (successful poll). For the same reasons, only complete and fully processed random words shall be made available via entropy (ES16 status of seed). This also applies to the raw noise source. The raw source interface has been delegated to an optional vendor-specific test interface. Importantly the test interface and the main interface should not be operational at the same time. The noise source state shall be protected from adversarial knowledge or influence to the greatest extent possible. The methods used for this shall be documented, including a description of the (conceptual) security boundary’s role in protecting the noise source from adversarial observation or influence. — NIST SP 800-90B Noise Source Requirements An entropy source is a singular resource, subject to depletion and also covert channels [62]. Observation of the entropy can be the same as the observation of the noise source output, as cryptographic conditioning is mandatory only as a post-processing step. SP 800-90B and other security standards mandate protection of noise bits from observation and also influence. As a general rule, RISC-V specifies the ISA only. We provide some additional suggestions so that portable, vendor-independent middleware and kernel components can be created. The actual hardware implementation and certification are left to vendors and circuit designers; the discussion in this Section is purely informational. When considering implementation options and trade-offs, one must look at the entire information flow. A Noise Source generates private, unpredictable signals from stable and well-understood physical random events. Sampling digitizes the noise signal into a raw stream of bits. This raw data also needs to be protected by the design. Continuous health tests ensure that the noise source and its environment meet their operational parameters. Non-cryptographic conditioners remove much of the bias and correlation in input noise. Cryptographic conditioners produce full entropy output, completely indistinguishable from ideal random. DRBG takes in >=256 bits of seed entropy as keying material and uses a \"one way\" cryptographic process to rapidly generate bits on demand (without revealing the seed/state). Steps 1-4 (possibly 5) are considered to be part of the Entropy Source (ES) and provided by the seed CSR. Adding the software-side cryptographic steps 5-6 and control logic complements it into a True Random Number Generator (TRNG). We will give some examples of common noise sources that can be implemented in the processor itself (using standard cells). The most common entropy source type in production use today is based on \"free running\" ring oscillators and their timing jitter. Here, an odd number of inverters is connected into a loop from which noise source bits are sampled in relation to a reference clock [63]. The sampled bit sequence may be expected to be relatively uncorrelated (close to IID) if the sample rate is suitably low [33]. However, further processing is usually required. AMD [64], ARM [65], and IBM [66] are examples of ring oscillator TRNGs intended for high-security applications. There are related metastability-based generator designs such as Transition Effect Ring Oscillator (TERO) [67]. The differential/feedback Intel construction [68] is slightly different but also falls into the same general metastable oscillator-based category. The main benefits of ring oscillators are: (1) They can be implemented with standard cell libraries without external components — and even on FPGAs [69], (2) there is an established theory for their behavior cite:[HaLe98,HaLiLe99,BaLuMi:11], and (3) ample precedent exists for testing and certifying them at the highest security levels. Ring oscillators also have well-known implementation pitfalls. Their output is sometimes highly dependent on temperature, which must be taken into account in testing and modeling. If the ring oscillator construction is parallelized, it is important that the number of stages and/or inverters in each chain is suitable to avoid entropy reduction due to harmonic \"Huyghens synchronization\" [70]. Such harmonics can also be inserted maliciously in a frequency injection attack, which can have devastating results [71]. Countermeasures are related to circuit design; environmental sensors, electrical filters, and usage of a differential oscillator may help. A category of random sources consisting of discrete events and modeled as a Poisson process is called \"shot noise.\" There’s a long-established precedent of certifying them; the AIS 31 document [33] itself offers reference designs based on noisy diodes. Shot noise sources are often more resistant to temperature changes than ring oscillators. Some of these generators can also be fully implemented with standard cells (The Rambus / Inside Secure generic TRNG IP [72] is described as a Shot Noise generator). It may be possible to certify more exotic noise sources and designs, although their stochastic model needs to be equally well understood, and their CPU interfaces must be secure. See Quantum vs. Classical Random for a discussion of Quantum entropy sources. Health monitoring requires some state information related to the noise source to be maintained. The tests should be designed in a way that a specific number of samples guarantees a state flush (no hung states). We suggest flush size W =< 1024 to match with the NIST SP 800-90B required tests (See Section 4.4 in [32]). The state is also fully zeroized in a system reset. The two mandatory tests can be built with minimal circuitry. Full histograms are not required, only simple counter registers: repetition count, window count, and sample count. Repetition count is reset every time the output sample value changes; if the count reaches a certain cutoff limit, a noise alarm (BIST) or failure (DEAD) is signaled. The window counter is used to save every W’th output (typically W in { 512, 1024 }). The frequency of this reference sample in the following window is counted; cutoff values are defined in the standard. We see that the structure of the mandatory tests is such that, if well implemented, no information is carried beyond a limit of W samples. Section 4.5 of [32] explicitly permits additional developer-defined tests, and several more were defined in early versions of FIPS 140-1 before being \"crossed out.\" The choice of additional tests depends on the nature and implementation of the physical source. Especially if a non-cryptographic conditioner is used in hardware, it is possible that the AIS 31 [33] online tests are implemented by driver software. They can also be implemented in hardware. For some security profiles, AIS 31 mandates that their tolerances are set in a way that the probability of an alarm is at least 10-6 yearly under \"normal usage.\" Such requirements are problematic in modern applications since their probability is too high for critical systems. There rarely is anything that can or should be done about a non-fatal alarm condition in an operator-free, autonomous system. However, AIS 31 allows the DRBG component to keep running despite a failure in its Entropy Source, so we suggest re-entering a temporary BIST state (Security Controls and Health Tests) to signal a non-fatal statistical error if such (non-actionable) signaling is necessary. Drivers and applications can react to this appropriately (or simply log it), but it will not directly affect the availability of the TRNG. A permanent error condition should result in DEAD state. As noted in Conditioning: Cryptographic and Non-Cryptographic, physical randomness sources generally require a post-processing step called conditioning to meet the desired quality requirements, which are outlined in Entropy Source Requirements. The approach taken in this interface is to allow a combination of non-cryptographic and cryptographic filtering to take place. The first stage (hardware) merely needs to be able to distill the entropy comfortably above the necessary level. One may take a set of bits from a noise source and XOR them together to produce a less biased (and more independent) bit. However, such an XOR may introduce \"pseudorandomness\" and make the output difficult to analyze. The von Neumann extractor [56] looks at consecutive pairs of bits, rejects 00 and 11, and outputs 0 or 1 for 01 and 10, respectively. It will reduce the number of bits to less than 25% of the original, but the output is provably unbiased (assuming independence). Blum’s extractor [73] can be used on sources whose behavior resembles N-state Markov chains. If its assumptions hold, it also removes dependencies, creating an independent and identically distributed (IID) source. Other linear and non-linear correctors such as those discussed by Dichtl and Lacharme [74]. Note that the hardware may also implement a full cryptographic conditioner in the entropy source, even though the software driver still needs a cryptographic conditioner, too (Entropy Source Requirements). Rationale: The main advantage of non-cryptographic extractors is in their energy efficiency, relative simplicity, and amenability to mathematical analysis. If well designed, they can be evaluated in conjunction with a stochastic model of the noise source itself. They do not require computational hardness assumptions. For secure use, cryptographic conditioners are always required on the software side of the ISA boundary. They may also be implemented on the hardware side if necessary. In any case, the entropy ES16 output must always be compressed 2:1 (or more) before being used as keying material or considered \"full entropy.\" Examples of cryptographic conditioners include the random pool of the Linux operating system, secure hash functions (SHA-2/3, SHAKE cite:[nist:fips:202,nist:fips:180:4]), and the AES / CBC-MAC construction in Appendix F, SP 800-90B [32]. In some constructions, such as the Linux RNG and SHA-3/SHAKE [42] based generators, the cryptographic conditioning and output (DRBG) generation are provided by the same component. Rationale: For many low-power targets constructions the type of hardware AES CBC-MAC conditioner used by Intel [75] and AMD [64] would be too complex and energy-hungry to implement solely to serve the seed CSR. On the other hand, simpler non-cryptographic conditioners may be too wasteful on input entropy if high-quality random output is required — (ARM TrustZone TRBG [65] outputs only 10Kbit/sec at 200 MHz.) Hence a resource-saving compromise is made between hardware and software generation. All random bits reaching end users and applications must come from a cryptographic DRBG. These are generally implemented by the driver component in software. The RISC-V AES and SHA instruction set extensions should be used if available since they offer additional security features such as timing attack resistance. Currently recommended DRBGs are defined in NIST SP 800-90A (Rev 1) [34]: CTR_DRBG, Hash_DRBG, and HMAC_DRBG. Certification often requires known answer tests (KATs) for the symmetric components and the DRBG as a whole. These are significantly easier to implement in software than in hardware. In addition to the directly certifiable SP 800-90A DRBGs, a Linux-style random pool construction based on ChaCha20 [76] can be used, or an appropriate construction based on SHAKE256 [42]. These are just recommendations; programmers can adjust the usage of the CPU Entropy Source to meet future requirements. The NCSC believes that classical RNGs will continue to meet our needs for government and military applications for the foreseeable future. — U.K. NCSC QRNG Guidance March 2020 A Quantum Random Number Generator (QRNG) is a TRNG whose source of randomness can be unambiguously identified to be a specific quantum phenomenon such as quantum state superposition, quantum state entanglement, Heisenberg uncertainty, quantum tunneling, spontaneous emission, or radioactive decay [77]. Direct quantum entropy is theoretically the best possible kind of entropy. A typical TRNG based on electronic noise is also largely based on quantum phenomena and is equally unpredictable - the difference is that the relative amount of quantum and classical physics involved is difficult to quantify for a classical TRNG. QRNGs are designed in a way that allows the amount of quantum-origin entropy to be modeled and estimated. This distinction is important in the security model used by QKD (Quantum Key Distribution) security mechanisms which can be used to protect the physical layer (such as fiber optic cables) against interception by using quantum mechanical effects directly. This security model means that many of the available QRNG devices do not use cryptographic conditioning and may fail cryptographic statistical requirements [78]. Many implementers may consider them to be entropy sources instead. Relatively little research has gone into QRNG implementation security, but many QRNG designs are arguably more susceptible to leakage than classical generators (such as ring oscillators) as they tend to employ external components and mixed materials. As an example, amplification of a photon detector signal may be observable in power analysis, which classical noise-based sources are designed to resist. PQC public-key cryptography standards [36] do not require quantum-origin randomness, just sufficiently secure keying material. Recall that cryptography aims to protect the confidentiality and integrity of data itself and does not place any requirements on the physical communication channel (like QKD). Classical good-quality TRNGs are perfectly suitable for generating the secret keys for PQC protocols that are hard for quantum computers to break but implementable on classical computers. What matters in cryptography is that the secret keys have enough true randomness (entropy) and that they are generated and stored securely. Of course, one must avoid DRBGs that are based on problems that are easily solvable with quantum computers, such as factoring [79] in the case of the Blum-Blum-Shub generator [80]. Most symmetric algorithms are not affected as the best quantum attacks are still exponential to key size [81]. As an example, the original Intel RNG [75], whose output generation is based on AES-128, can be attacked using Grover’s algorithm with approximately square-root effort [82]. While even \"64-bit\" quantum security is extremely difficult to break, many applications specify a higher security requirement. NIST [36] defines AES-128 to be \"Category 1\" equivalent post-quantum security, while AES-256 is \"Category 5\" (highest). We avoid this possible future issue by exposing direct access to the entropy source which can derive its security from information-theoretic assumptions only. Compliance testing, characterization, and configuration of entropy sources require access to raw, unconditioned noise samples. This conceptual test interface is named GetNoise in Section 2.3.2 of NIST SP 800-90B [32]. Since this type of interface is both necessary for security testing and also constitutes a potential backdoor to the cryptographic key generation process, we define a safety behavior that compliant implementations can have for temporarily disabling the entropy source seed CSR interface during test. In order for shared RISC-V self-certification scripts (and drivers) to accommodate the test interface in a secure fashion, we suggest that it is implemented as a custom, M-mode only CSR, denoted here as mnoise. This non-normative interface is not intended to be used as a source of randomness or for other production use. We define the semantics for single bit for this interface, mnoise[31], which is named NOISE_TEST, which will affect the behavior of seed if implemented. When NOISE_TEST = 1 in mnoise, the seed CSR must not return anything via ES16; it should be in BIST state unless the source is DEAD. When NOISE_TEST is again disabled, the entropy source shall return from BIST via an appropriate zeroization and self-test mechanism. The behavior of other input and output bits is largely left to the vendor (as they depend on the technical details of the physical entropy source), as is the address of the custom mnoise CSR. Other contents and behavior of the CSR only can be interpreted in the context of mvendorid, marchid, and mimpid CSR identifiers. When not implemented (e.g., in virtual machines), mnoise can permanently read zero (0x00000000) and ignore writes. When available, but NOISE_TEST = 0, mnoise can return a nonzero constant (e.g. 0x00000001) but no noise samples. Figure 2. Entropy source can’t be read in test mode. In NOISE_TEST mode, the WAIT and ES16 states are unreachable, and no entropy is output. Implementation of test interfaces that directly affect ES16 entropy output from the seed CSR interface is discouraged. Such vendor test interfaces have been exploited in attacks. For example, an ECDSA [83] signature process without sufficient entropy will not only create an insecure signature but can also reveal the secret signing key, that can be used for authentication forgeries by attackers. Hence even a temporary lapse in entropy security may have serious security implications. While this document contains the specifications for the RISC-V cryptography extensions, numerous supplementary materials and example codes have also been developed. All of the materials related to the RISC-V Cryptography extension live in a Github Repository, located at https://github.com/riscv/riscv-crypto doc/ Contains the source code for this document. doc/supp/ Contains supplementary information and recommendations for implementers of software and hardware. benchmarks/ Example software implementations. rtl/ Example Verilog implementations of each instruction. sail/ Formal model implementations in Sail. This section contains the supporting Sail code referenced by the instruction descriptions throughout the specification. The Sail Manual is recommended reading in order to best understand the supporting code. /* Auxiliary function for performing GF multiplication */ val xt2 : bits(8) -> bits(8) function xt2(x) = { (x << 1) ^ (if bit_to_bool(x[7]) then 0x1b else 0x00) } val xt3 : bits(8) -> bits(8) function xt3(x) = x ^ xt2(x) /* Multiply 8-bit field element by 4-bit value for AES MixCols step */ val gfmul : (bits(8), bits(4)) -> bits(8) function gfmul( x, y) = { (if bit_to_bool(y[0]) then x else 0x00) ^ (if bit_to_bool(y[1]) then xt2( x) else 0x00) ^ (if bit_to_bool(y[2]) then xt2(xt2( x)) else 0x00) ^ (if bit_to_bool(y[3]) then xt2(xt2(xt2(x))) else 0x00) } /* 8-bit to 32-bit partial AES Mix Column - forwards */ val aes_mixcolumn_byte_fwd : bits(8) -> bits(32) function aes_mixcolumn_byte_fwd(so) = { gfmul(so, 0x3) @ so @ so @ gfmul(so, 0x2) } /* 8-bit to 32-bit partial AES Mix Column - inverse*/ val aes_mixcolumn_byte_inv : bits(8) -> bits(32) function aes_mixcolumn_byte_inv(so) = { gfmul(so, 0xb) @ gfmul(so, 0xd) @ gfmul(so, 0x9) @ gfmul(so, 0xe) } /* 32-bit to 32-bit AES forward MixColumn */ val aes_mixcolumn_fwd : bits(32) -> bits(32) function aes_mixcolumn_fwd(x) = { let s0 : bits (8) = x[ 7.. 0]; let s1 : bits (8) = x[15.. 8]; let s2 : bits (8) = x[23..16]; let s3 : bits (8) = x[31..24]; let b0 : bits (8) = xt2(s0) ^ xt3(s1) ^ (s2) ^ (s3); let b1 : bits (8) = (s0) ^ xt2(s1) ^ xt3(s2) ^ (s3); let b2 : bits (8) = (s0) ^ (s1) ^ xt2(s2) ^ xt3(s3); let b3 : bits (8) = xt3(s0) ^ (s1) ^ (s2) ^ xt2(s3); b3 @ b2 @ b1 @ b0 /* Return value */ } /* 32-bit to 32-bit AES inverse MixColumn */ val aes_mixcolumn_inv : bits(32) -> bits(32) function aes_mixcolumn_inv(x) = { let s0 : bits (8) = x[ 7.. 0]; let s1 : bits (8) = x[15.. 8]; let s2 : bits (8) = x[23..16]; let s3 : bits (8) = x[31..24]; let b0 : bits (8) = gfmul(s0, 0xE) ^ gfmul(s1, 0xB) ^ gfmul(s2, 0xD) ^ gfmul(s3, 0x9); let b1 : bits (8) = gfmul(s0, 0x9) ^ gfmul(s1, 0xE) ^ gfmul(s2, 0xB) ^ gfmul(s3, 0xD); let b2 : bits (8) = gfmul(s0, 0xD) ^ gfmul(s1, 0x9) ^ gfmul(s2, 0xE) ^ gfmul(s3, 0xB); let b3 : bits (8) = gfmul(s0, 0xB) ^ gfmul(s1, 0xD) ^ gfmul(s2, 0x9) ^ gfmul(s3, 0xE); b3 @ b2 @ b1 @ b0 /* Return value */ } /* Turn a round number into a round constant for AES. Note that the AES64KS1I instruction is defined such that the r argument is always in the range 0x0..0xA. Values of rnum outside the range 0x0..0xA do not decode to the AES64KS1I instruction. The 0xA case is used specifically for the AES-256 KeySchedule, and this function is never called in that case. */ val aes_decode_rcon : bits(4) -> bits(32) function aes_decode_rcon(r) = { assert(r <_u 0xA); match r { 0x0 => 0x00000001, 0x1 => 0x00000002, 0x2 => 0x00000004, 0x3 => 0x00000008, 0x4 => 0x00000010, 0x5 => 0x00000020, 0x6 => 0x00000040, 0x7 => 0x00000080, 0x8 => 0x0000001b, 0x9 => 0x00000036, _ => internal_error(__FILE__, __LINE__, \"Unexpected AES r\") /* unreachable -- required to silence Sail warning */ } } /* SM4 SBox - only one sbox for forwards and inverse */ let sm4_sbox_table : vector(256, bits(8)) = [ 0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51, 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, 0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48 ] let aes_sbox_fwd_table : vector(256, bits(8)) = [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ] let aes_sbox_inv_table : vector(256, bits(8)) = [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ] /* Lookup function - takes an index and a table, and retrieves the * x'th element of that table. Note that the Sail vector literals * start at index 255, and go down to 0. */ val sbox_lookup : (bits(8), vector(256, bits(8))) -> bits(8) function sbox_lookup(x, table) = { table[255 - unsigned(x)] } /* Easy function to perform a forward AES SBox operation on 1 byte. */ val aes_sbox_fwd : bits(8) -> bits(8) function aes_sbox_fwd(x) = sbox_lookup(x, aes_sbox_fwd_table) /* Easy function to perform an inverse AES SBox operation on 1 byte. */ val aes_sbox_inv : bits(8) -> bits(8) function aes_sbox_inv(x) = sbox_lookup(x, aes_sbox_inv_table) /* AES SubWord function used in the key expansion * - Applies the forward sbox to each byte in the input word. */ val aes_subword_fwd : bits(32) -> bits(32) function aes_subword_fwd(x) = { aes_sbox_fwd(x[31..24]) @ aes_sbox_fwd(x[23..16]) @ aes_sbox_fwd(x[15.. 8]) @ aes_sbox_fwd(x[ 7.. 0]) } /* AES Inverse SubWord function. * - Applies the inverse sbox to each byte in the input word. */ val aes_subword_inv : bits(32) -> bits(32) function aes_subword_inv(x) = { aes_sbox_inv(x[31..24]) @ aes_sbox_inv(x[23..16]) @ aes_sbox_inv(x[15.. 8]) @ aes_sbox_inv(x[ 7.. 0]) } /* Easy function to perform an SM4 SBox operation on 1 byte. */ val sm4_sbox : bits(8) -> bits(8) function sm4_sbox(x) = sbox_lookup(x, sm4_sbox_table) val aes_get_column : (bits(128), nat) -> bits(32) function aes_get_column(state,c) = (state >> (to_bits(7, 32 * c)))[31..0] /* 64-bit to 64-bit function which applies the AES forward sbox to each byte * in a 64-bit word. */ val aes_apply_fwd_sbox_to_each_byte : bits(64) -> bits(64) function aes_apply_fwd_sbox_to_each_byte(x) = { aes_sbox_fwd(x[63..56]) @ aes_sbox_fwd(x[55..48]) @ aes_sbox_fwd(x[47..40]) @ aes_sbox_fwd(x[39..32]) @ aes_sbox_fwd(x[31..24]) @ aes_sbox_fwd(x[23..16]) @ aes_sbox_fwd(x[15.. 8]) @ aes_sbox_fwd(x[ 7.. 0]) } /* 64-bit to 64-bit function which applies the AES inverse sbox to each byte * in a 64-bit word. */ val aes_apply_inv_sbox_to_each_byte : bits(64) -> bits(64) function aes_apply_inv_sbox_to_each_byte(x) = { aes_sbox_inv(x[63..56]) @ aes_sbox_inv(x[55..48]) @ aes_sbox_inv(x[47..40]) @ aes_sbox_inv(x[39..32]) @ aes_sbox_inv(x[31..24]) @ aes_sbox_inv(x[23..16]) @ aes_sbox_inv(x[15.. 8]) @ aes_sbox_inv(x[ 7.. 0]) } /* * AES full-round transformation functions. */ val getbyte : (bits(64), int) -> bits(8) function getbyte(x, i) = (x >> to_bits(6, i * 8))[7..0] val aes_rv64_shiftrows_fwd : (bits(64), bits(64)) -> bits(64) function aes_rv64_shiftrows_fwd(rs2, rs1) = { getbyte(rs1, 3) @ getbyte(rs2, 6) @ getbyte(rs2, 1) @ getbyte(rs1, 4) @ getbyte(rs2, 7) @ getbyte(rs2, 2) @ getbyte(rs1, 5) @ getbyte(rs1, 0) } val aes_rv64_shiftrows_inv : (bits(64), bits(64)) -> bits(64) function aes_rv64_shiftrows_inv(rs2, rs1) = { getbyte(rs2, 3) @ getbyte(rs2, 6) @ getbyte(rs1, 1) @ getbyte(rs1, 4) @ getbyte(rs1, 7) @ getbyte(rs2, 2) @ getbyte(rs2, 5) @ getbyte(rs1, 0) } /* 128-bit to 128-bit implementation of the forward AES ShiftRows transform. * Byte 0 of state is input column 0, bits 7..0. * Byte 5 of state is input column 1, bits 15..8. */ val aes_shift_rows_fwd : bits(128) -> bits(128) function aes_shift_rows_fwd(x) = { let ic3 : bits(32) = aes_get_column(x, 3); let ic2 : bits(32) = aes_get_column(x, 2); let ic1 : bits(32) = aes_get_column(x, 1); let ic0 : bits(32) = aes_get_column(x, 0); let oc0 : bits(32) = ic0[31..24] @ ic1[23..16] @ ic2[15.. 8] @ ic3[ 7.. 0]; let oc1 : bits(32) = ic1[31..24] @ ic2[23..16] @ ic3[15.. 8] @ ic0[ 7.. 0]; let oc2 : bits(32) = ic2[31..24] @ ic3[23..16] @ ic0[15.. 8] @ ic1[ 7.. 0]; let oc3 : bits(32) = ic3[31..24] @ ic0[23..16] @ ic1[15.. 8] @ ic2[ 7.. 0]; (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* 128-bit to 128-bit implementation of the inverse AES ShiftRows transform. * Byte 0 of state is input column 0, bits 7..0. * Byte 5 of state is input column 1, bits 15..8. */ val aes_shift_rows_inv : bits(128) -> bits(128) function aes_shift_rows_inv(x) = { let ic3 : bits(32) = aes_get_column(x, 3); /* In column 3 */ let ic2 : bits(32) = aes_get_column(x, 2); let ic1 : bits(32) = aes_get_column(x, 1); let ic0 : bits(32) = aes_get_column(x, 0); let oc0 : bits(32) = ic0[31..24] @ ic3[23..16] @ ic2[15.. 8] @ ic1[ 7.. 0]; let oc1 : bits(32) = ic1[31..24] @ ic0[23..16] @ ic3[15.. 8] @ ic2[ 7.. 0]; let oc2 : bits(32) = ic2[31..24] @ ic1[23..16] @ ic0[15.. 8] @ ic3[ 7.. 0]; let oc3 : bits(32) = ic3[31..24] @ ic2[23..16] @ ic1[15.. 8] @ ic0[ 7.. 0]; (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the forward sub-bytes step of AES to a 128-bit vector * representation of its state. */ val aes_subbytes_fwd : bits(128) -> bits(128) function aes_subbytes_fwd(x) = { let oc0 : bits(32) = aes_subword_fwd(aes_get_column(x, 0)); let oc1 : bits(32) = aes_subword_fwd(aes_get_column(x, 1)); let oc2 : bits(32) = aes_subword_fwd(aes_get_column(x, 2)); let oc3 : bits(32) = aes_subword_fwd(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the inverse sub-bytes step of AES to a 128-bit vector * representation of its state. */ val aes_subbytes_inv : bits(128) -> bits(128) function aes_subbytes_inv(x) = { let oc0 : bits(32) = aes_subword_inv(aes_get_column(x, 0)); let oc1 : bits(32) = aes_subword_inv(aes_get_column(x, 1)); let oc2 : bits(32) = aes_subword_inv(aes_get_column(x, 2)); let oc3 : bits(32) = aes_subword_inv(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the forward MixColumns step of AES to a 128-bit vector * representation of its state. */ val aes_mixcolumns_fwd : bits(128) -> bits(128) function aes_mixcolumns_fwd(x) = { let oc0 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 0)); let oc1 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 1)); let oc2 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 2)); let oc3 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the inverse MixColumns step of AES to a 128-bit vector * representation of its state. */ val aes_mixcolumns_inv : bits(128) -> bits(128) function aes_mixcolumns_inv(x) = { let oc0 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 0)); let oc1 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 1)); let oc2 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 2)); let oc3 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } 1. http://svn.clairexen.net/handicraft/2020/lut4perm/demo02.cc","title":"Cryptography Extensions: Scalar & Entropy Source Instructions, Version 1.0.1","component":"isa","version":"v20250508","name":"scalar-crypto","url":"/isa/unpriv/scalar-crypto.html","titles":[{"text":"Changelog","hash":"changelog","id":1},{"text":"Introduction","hash":"crypto_scalar_introduction","id":2},{"text":"Intended Audience","hash":"crypto_scalar_audience","id":3},{"text":"Sail Specifications","hash":"crypto_scalar_sail_specifications","id":4},{"text":"Policies","hash":"crypto_scalar_policies","id":5},{"text":"Extensions Overview","hash":"crypto_scalar_extensions","id":6},{"text":"Zbkb - Bitmanip instructions for Cryptography","hash":"zbkb-sc","id":7},{"text":"Zbkc - Carry-less multiply instructions","hash":"zbkc-sc","id":8},{"text":"Zbkx - Crossbar permutation instructions","hash":"zbkx-sc","id":9},{"text":"Zknd - NIST Suite: AES Decryption","hash":"zknd","id":10},{"text":"Zkne - NIST Suite: AES Encryption","hash":"zkne","id":11},{"text":"Zknh - NIST Suite: Hash Function Instructions","hash":"zknh","id":12},{"text":"Zksed - ShangMi Suite: SM4 Block Cipher Instructions","hash":"zksed","id":13},{"text":"Zksh - ShangMi Suite: SM3 Hash Function Instructions","hash":"zksh","id":14},{"text":"Zkr - Entropy Source Extension","hash":"zkr","id":15},{"text":"Zkn - NIST Algorithm Suite","hash":"zkn","id":16},{"text":"Zks - ShangMi Algorithm Suite","hash":"zks","id":17},{"text":"Zk - Standard scalar cryptography extension","hash":"zk","id":18},{"text":"Zkt - Data Independent Execution Latency","hash":"zkt-data-independent-execution-latency","id":19},{"text":"Instructions","hash":"crypto_scalar_insns","id":20},{"text":"aes32dsi","hash":"insns-aes32dsi","id":21},{"text":"aes32dsmi","hash":"insns-aes32dsmi","id":22},{"text":"aes32esi","hash":"insns-aes32esi","id":23},{"text":"aes32esmi","hash":"insns-aes32esmi","id":24},{"text":"aes64ds","hash":"insns-aes64ds","id":25},{"text":"aes64dsm","hash":"insns-aes64dsm","id":26},{"text":"aes64es","hash":"insns-aes64es","id":27},{"text":"aes64esm","hash":"insns-aes64esm","id":28},{"text":"aes64im","hash":"insns-aes64im","id":29},{"text":"aes64ks1i","hash":"insns-aes64ks1i","id":30},{"text":"aes64ks2","hash":"insns-aes64ks2","id":31},{"text":"andn","hash":"insns-andn-sc","id":32},{"text":"brev8","hash":"insns-brev8-sc","id":33},{"text":"clmul","hash":"insns-clmul-sc","id":34},{"text":"clmulh","hash":"insns-clmulh-sc","id":35},{"text":"orn","hash":"insns-orn-sc","id":36},{"text":"pack","hash":"insns-pack-sc","id":37},{"text":"packh","hash":"insns-packh-sc","id":38},{"text":"packw","hash":"insns-packw-sc","id":39},{"text":"rev8","hash":"insns-rev8-sc","id":40},{"text":"rol","hash":"insns-rol-sc","id":41},{"text":"rolw","hash":"insns-rolw-sc","id":42},{"text":"ror","hash":"insns-ror-sc","id":43},{"text":"rori","hash":"insns-rori-sc","id":44},{"text":"roriw","hash":"insns-roriw-sc","id":45},{"text":"rorw","hash":"insns-rorw-sc","id":46},{"text":"sha256sig0","hash":"insns-sha256sig0","id":47},{"text":"sha256sig1","hash":"insns-sha256sig1","id":48},{"text":"sha256sum0","hash":"insns-sha256sum0","id":49},{"text":"sha256sum1","hash":"insns-sha256sum1","id":50},{"text":"sha512sig0h","hash":"insns-sha512sig0h","id":51},{"text":"sha512sig0l","hash":"insns-sha512sig0l","id":52},{"text":"sha512sig1h","hash":"insns-sha512sig1h","id":53},{"text":"sha512sig1l","hash":"insns-sha512sig1l","id":54},{"text":"sha512sum0r","hash":"insns-sha512sum0r","id":55},{"text":"sha512sum1r","hash":"insns-sha512sum1r","id":56},{"text":"sha512sig0","hash":"insns-sha512sig0","id":57},{"text":"sha512sig1","hash":"insns-sha512sig1","id":58},{"text":"sha512sum0","hash":"insns-sha512sum0","id":59},{"text":"sha512sum1","hash":"insns-sha512sum1","id":60},{"text":"sm3p0","hash":"insns-sm3p0","id":61},{"text":"sm3p1","hash":"insns-sm3p1","id":62},{"text":"sm4ed","hash":"insns-sm4ed","id":63},{"text":"sm4ks","hash":"insns-sm4ks","id":64},{"text":"unzip","hash":"insns-unzip-sc","id":65},{"text":"xnor","hash":"insns-xnor-sc","id":66},{"text":"xperm8","hash":"insns-xperm8-sc","id":67},{"text":"xperm4","hash":"insns-xperm4-sc","id":68},{"text":"zip","hash":"insns-zip-sc","id":69},{"text":"Entropy Source","hash":"crypto_scalar_es","id":70},{"text":"The seed CSR","hash":"crypto_scalar_seed_csr","id":71},{"text":"Entropy Source Requirements","hash":"crypto_scalar_es_req","id":72},{"text":"NIST SP 800-90B / FIPS 140-3 Requirements","hash":"crypto_scalar_es_req_90b","id":73},{"text":"BSI AIS-31 PTG.2 / Common Criteria Requirements","hash":"crypto_scalar_es_req_ptg2","id":74},{"text":"Virtual Sources: Security Requirement","hash":"crypto_scalar_es_req_virt","id":75},{"text":"Access Control to seed","hash":"crypto_scalar_es_access","id":76},{"text":"Data Independent Execution Latency Subset: Zkt","hash":"crypto_scalar_zkt","id":77},{"text":"Scope and Goal","hash":"scope-and-goal","id":78},{"text":"Background","hash":"background","id":79},{"text":"Specific Instruction Rationale","hash":"specific-instruction-rationale","id":80},{"text":"Programming Information","hash":"programming-information","id":81},{"text":"Zkt listings","hash":"zkt-listings","id":82},{"text":"RVI (Base Instruction Set)","hash":"rvi-base-instruction-set","id":83},{"text":"RVM (Multiply)","hash":"rvm-multiply","id":84},{"text":"RVC (Compressed)","hash":"rvc-compressed","id":85},{"text":"RVK (Scalar Cryptography)","hash":"rvk-scalar-cryptography","id":86},{"text":"RVB (Bitmanip)","hash":"rvb-bitmanip","id":87},{"text":"Instruction Rationale","hash":"crypto_scalar_appx_rationale","id":88},{"text":"AES Instructions","hash":"aes-instructions","id":89},{"text":"SHA2 Instructions","hash":"sha2-instructions","id":90},{"text":"SM3 and SM4 Instructions","hash":"sm3-and-sm4-instructions","id":91},{"text":"Bitmanip Instructions for Cryptography","hash":"crypto_scalar_zkb","id":92},{"text":"Rotations","hash":"rotations","id":93},{"text":"Bit & Byte Permutations","hash":"bit-byte-permutations","id":94},{"text":"Carry-less Multiply","hash":"carry-less-multiply","id":95},{"text":"Logic With Negate","hash":"logic-with-negate","id":96},{"text":"Packing","hash":"packing","id":97},{"text":"Crossbar Permutation Instructions","hash":"crossbar-permutation-instructions","id":98},{"text":"Entropy Source Rationale and Recommendations","hash":"crypto_scalar_appx_es","id":99},{"text":"Checklists for Design and Self-Certification","hash":"checklists-for-design-and-self-certification","id":100},{"text":"Standards and Terminology","hash":"standards-and-terminology","id":101},{"text":"Entropy Source (ES)","hash":"crypto_scalar_appx_es_intro-es","id":102},{"text":"Conditioning: Cryptographic and Non-Cryptographic","hash":"crypto_scalar_appx_es_intro-cond","id":103},{"text":"Pseudorandom Number Generator (PRNG)","hash":"crypto_scalar_appx_es_intro-prng","id":104},{"text":"Deterministic Random Bit Generator (DRBG)","hash":"crypto_scalar_appx_es_intro-drbg","id":105},{"text":"Specific Rationale and Considerations","hash":"specific-rationale-and-considerations","id":106},{"text":"The seed CSR","hash":"the-seed-csr","id":107},{"text":"NIST SP 800-90B","hash":"nist-sp-800-90b","id":108},{"text":"BSI AIS-31","hash":"bsi-ais-31","id":109},{"text":"Virtual Sources","hash":"virtual-sources","id":110},{"text":"Security Considerations for Direct Hardware Access","hash":"crypto_scalar_appx_es_access","id":111},{"text":"Security Controls and Health Tests","hash":"crypto_scalar_es_security_controls","id":112},{"text":"T1: On-demand testing","hash":"t1-on-demand-testing","id":113},{"text":"T2: Continuous checks","hash":"t2-continuous-checks","id":114},{"text":"T3: Fatal error states","hash":"t3-fatal-error-states","id":115},{"text":"Information Flows","hash":"information-flows","id":116},{"text":"Implementation Strategies","hash":"crypto_scalar_appx_es_implementation","id":117},{"text":"Ring Oscillators","hash":"crypto_scalar_appx_es_noise_sources","id":118},{"text":"Shot Noise","hash":"shot-noise","id":119},{"text":"Other types of noise","hash":"other-types-of-noise","id":120},{"text":"Continuous Health Tests","hash":"crypto_scalar_appx_es_cont-tests","id":121},{"text":"Non-cryptographic Conditioners","hash":"crypto_scalar_appx_es_noncrypto","id":122},{"text":"Cryptographic Conditioners","hash":"crypto_scalar_appx_es_crypto-cond","id":123},{"text":"The Final Random: DRBGs","hash":"crypto_scalar_appx_es_drbgs","id":124},{"text":"Quantum vs. Classical Random","hash":"crypto_scalar_appx_es_quantum","id":125},{"text":"Post-Quantum Cryptography","hash":"post-quantum-cryptography","id":126},{"text":"Suggested GetNoise Test Interface","hash":"crypto_scalar_es_getnoise","id":127},{"text":"Supplementary Materials","hash":"crypto_scalar_appx_materials","id":128},{"text":"Supporting Sail Code","hash":"crypto_scalar_appx_sail","id":129}]},"50":{"id":50,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Control-flow Integrity (CFI) Control-flow Integrity (CFI) capabilities help defend against Return-Oriented Programming (ROP) and Call/Jump-Oriented Programming (COP/JOP) style control-flow subversion attacks. These attack methodologies use code sequences in authorized modules, with at least one instruction in the sequence being a control transfer instruction that depends on attacker-controlled data either in the return stack or in memory used to obtain the target address for a call or jump. Attackers stitch these sequences together by diverting the control flow instructions (e.g., JALR, C.JR, C.JALR), from their original target address to a new target via modification in the return stack or in the memory used to obtain the jump/call target address. RV32/RV64 provides two types of control transfer instructions - unconditional jumps and conditional branches. Conditional branches encode an offset in the immediate field of the instruction and are thus direct branches that are not susceptible to control-flow subversion. Unconditional direct jumps using JAL transfer control to a target that is in a +/- 1 MiB range from the current pc. Unconditional indirect jumps using the JALR obtain their branch target by adding the sign extended 12-bit immediate encoded in the instruction to the rs1 register. The RV32I/RV64I does not have a dedicated instruction for calling a procedure or returning from a procedure. A JAL or JALR may be used to perform a procedure call and JALR to return from a procedure. The RISC-V ABI however defines the convention that a JAL/JALR where rd (i.e. the link register) is x1 or x5 is a procedure call, and a JALR where rs1 is the conventional link register (i.e. x1 or x5) is a return from procedure. The architecture allows for using these hints and conventions to support return address prediction (See [rashints]). The RVC standard extension for compressed instructions provides unconditional jump and conditional branch instructions. The C.J and C.JAL instructions encode an offset in the immediate field of the instruction and thus are not susceptible to control-flow subversion. The C.JR and C.JALR RVC instructions perform an unconditional control transfer to the address in register rs1. The C.JALR additionally writes the address of the instruction following the jump (pc+2) to the link register x1 and is a procedure call. The C.JR is a return from procedure if rs1 is a conventional link register (i.e. x1 or x5); else it is an indirect jump. The term call is used to refer to a JAL or JALR instruction with a link register as destination, i.e., rd≠x0. Conventionally, the link register is x1 or x5. A call using JAL or C.JAL is termed a direct call. A C.JALR expands to JALR x1, 0(rs1) and is a call. A call using JALR or C.JALR is termed an indirect-call. The term return is used to refer to a JALR instruction with rd=x0 and with rs1=x1 or rs1=x5. A C.JR instruction expands to JALR x0, 0(rs1) and is a return if rs1=x1 or rs1=x5. The term indirect-jump is used to refer to a JALR instruction with rd=x0 and where the rs1 is not x1 or x5 (i.e., not a return). A C.JR instruction where rs1 is not x1 or x5 (i.e., not a return) is an indirect-jump. The Zicfiss and Zicfilp extensions build on these conventions and hints and provide backward-edge and forward-edge control flow integrity respectively. The Unprivileged ISA for Zicfilp extension is specified in Landing Pad (Zicfilp) and for the Unprivileged ISA for Zicfiss extension is specified in Shadow Stack (Zicfiss). The Privileged ISA for these extensions is specified in the Privileged ISA specification. To enforce forward-edge control-flow integrity, the Zicfilp extension introduces a landing pad (LPAD) instruction. The LPAD instruction must be placed at the program locations that are valid targets of indirect jumps or calls. The LPAD instruction (See Landing Pad Instruction) is encoded using the AUIPC major opcode with rd=x0. Compilers emit a landing pad instruction as the first instruction of an address-taken function, as well as at any indirect jump targets. A landing pad instruction is not required in functions that are only reached using a direct call or direct jump. The landing pad is designed to provide integrity to control transfers performed using indirect calls and jumps, and this is referred to as forward-edge protection. When the Zicfilp is active, the hart tracks an expected landing pad (ELP) state that is updated by an indirect_call or indirect_jump to require a landing pad instruction at the target of the branch. If the instruction at the target is not a landing pad, then a software-check exception is raised. A landing pad may be optionally associated with a 20-bit label. With labeling enabled, the number of landing pads that can be reached from an indirect call or jump sites can be defined using programming language-based policies. Labeling of the landing pads enables software to achieve greater precision in pairing up indirect call/jump sites with valid targets. When labeling of landing pads is used, indirect call or indirect jump site can specify the expected label of the landing pad and thereby constrain the set of landing pads that may be reached from each indirect call or indirect jump site in the program. In the simplest form, a program can be built with a single label value to implement a coarse-grained version of forward-edge control-flow integrity. By constraining gadgets to be preceded by a landing pad instruction that marks the start of indirect callable functions, the program can significantly reduce the available gadget space. A second form of label generation may generate a signature, such as a MAC, using the prototype of the function. Programs that use this approach would further constrain the gadgets accessible from a call site to only indirectly callable functions that match the prototype of the called functions. Another approach to label generation involves analyzing the control-flow-graph (CFG) of the program, which can lead to even more stringent constraints on the set of reachable gadgets. Such programs may further use multiple labels per function, which means that if a function is called from two or more call sites, the functions can be labeled as being reachable from each of the call sites. For instance, consider two call sites A and B, where A calls the functions X and Y, and B calls the functions Y and Z. In a single label scheme, functions X, Y, and Z would need to be assigned the same label so that both call sites A and B can invoke the common function Y. This scheme would allow call site A to also call function Z and call site B to also call function X. However, if function Y was assigned two labels - one corresponding to call site A and the other to call site B, then Y can be invoked by both call sites, but X can only be invoked by call site A and Z can only be invoked by call site B. To support multiple labels, the compiler could generate a call-site-specific entry point for shared functions, with each entry point having its own landing pad instruction followed by a direct branch to the start of the function. This would allow the function to be labeled with multiple labels, each corresponding to a specific call site. A portion of the label space may be dedicated to labeled landing pads that are only valid targets of an indirect jump (and not an indirect call). The LPAD instruction uses the code points defined as HINTs for the AUIPC opcode. When Zicfilp is not active at a privilege level or when the extension is not implemented, the landing pad instruction executes as a no-op. A program that is built with LPAD instructions can thus continue to operate correctly, but without forward-edge control-flow integrity, on processors that do not support the Zicfilp extension or if the Zicfilp extension is not active. Compilers and linkers should provide an attribute flag to indicate if the program has been compiled with the Zicfilp extension and use that to determine if the Zicfilp extension should be activated. The dynamic loader should activate the use of Zicfilp extension for an application only if all executables (the application and the dependent dynamically linked libraries) used by that application use the Zicfilp extension. When Zicfilp extension is not active or not implemented, the hart does not require landing pad instructions at the targets of indirect calls/jumps, and the landing instructions revert to being no-ops. This allows a program compiled with landing pad instructions to operate correctly but without forward-edge control-flow integrity. The Zicfilp extensions may be activated for use individually and independently for each privilege mode. The Zicfilp extension depends on the Zicsr extension. To enforce that the target of an indirect call or indirect jump must be a valid landing pad instruction, the hart maintains an expected landing pad (ELP) state to determine if a landing pad instruction is required at the target of an indirect call or an indirect jump. The ELP state can be one of: 0 - NO_LP_EXPECTED 1 - LP_EXPECTED The ELP state is initialized to NO_LP_EXPECTED by the hart upon reset. The Zicfilp extension, when enabled, determines if an indirect call or an indirect jump must land on a landing pad, as specified in Landing pad expected determination. If is_lp_expected is 1, then the hart updates the ELP to LP_EXPECTED. Landing pad expected determination is_lp_expected = ( (JALR || C.JR || C.JALR) && (rs1 != x1) && (rs1 != x5) && (rs1 != x7) ) ? 1 : 0; An indirect branch using JALR, C.JALR, or C.JR with rs1 as x7 is termed a software guarded branch. Such branches do not need to land on a LPAD instruction and thus do not set ELP to LP_EXPECTED. When the register source is a link register and the register destination is x0, then it’s a return from a procedure and does not require a landing pad at the target. When the register source and register destination are both link registers, then it is a semantically-direct-call. For example, the call offset pseudoinstruction may expand to a two instruction sequence composed of a lui ra, imm20 or a auipc ra, imm20 instruction followed by a jalr ra, imm12(ra) instruction where ra is the link register (either x1 or x5). Since the address of the procedure was not explicitly taken and the computed address is not obtained from mutable memory, such semantically-direct calls do not require a landing pad to be placed at the target. Compilers and JITers must use the semantically-direct calls only if the rs1 was computed as a PC-relative or an absolute offset to the symbol. The tail offset pseudoinstruction used to tail call a far-away procedure may also be expanded to a two instruction sequence composed of a lui x7, imm20 or auipc x7, imm20 followed by a jalr x0, x7. Since the address of the procedure was not explicitly taken and the computed address is not obtained from mutable memory, such semantically-direct tail-calls do not require a landing pad to be placed at the target. Software guarded branches may also be used by compilers to generate code for constructs like switch-cases. When using the software guarded branches, the compiler is required to ensure it has full control on the possible jump targets (e.g., by obtaining the targets from a read-only table in memory and performing bounds checking on the index into the table, etc.). The landing pad may be labeled. Zicfilp extension designates the register x7 for use as the landing pad label register. To support labeled landing pads, the indirect call/jump sites establish an expected landing pad label (e.g., using the LUI instruction) in the bits 31:12 of the x7 register. The LPAD instruction is encoded with a 20-bit immediate value called the landing-pad-label (LPL) that is matched to the expected landing pad label. When LPL is encoded as zero, the LPAD instruction does not perform the label check and in programs built with this single label mode of operation the indirect call/jump sites do not need to establish an expected landing pad label value in x7. When ELP is set to LP_EXPECTED, if the next instruction in the instruction stream is not 4-byte aligned, or is not LPAD, or if the landing pad label encoded in LPAD is not zero and does not match the expected landing pad label in bits 31:12 of the x7 register, then a software-check exception (cause=18) with xtval set to \"landing pad fault (code=2)\" is raised else the ELP is updated to NO_LP_EXPECTED. The tracking of ELP and the requirement for a landing pad instruction at the target of indirect call and jump enables a processor implementation to significantly reduce or to prevent speculation to non-landing-pad instructions. Constraining speculation using this technique, greatly reduces the gadget space and increases the difficulty of using techniques such as branch-target-injection, also known as Spectre variant 2, which use speculative execution to leak data through side channels. The LPAD requires a 4-byte alignment to address the concatenation of two instructions A and B accidentally forming an unintended landing pad in the program. For example, consider a 32-bit instruction where the bytes 3 and 2 have a pattern of ?017h (for example, the immediate fields of a LUI, AUIPC, or a JAL instruction), followed by a 16-bit or a 32-bit instruction. When patterns that can accidentally form a valid landing pad are detected, the assembler or linker can force instruction A to be aligned to a 4-byte boundary to force the unintended LPAD pattern to become misaligned, and thus not a valid landing pad, or may use an alternate register allocation to prevent the accidental landing pad. When Zicfilp is enabled, LPAD is the only instruction allowed to execute when the ELP state is LP_EXPECTED. If Zicfilp is not enabled then the instruction is a no-op. If Zicfilp is enabled, the LPAD instruction causes a software-check exception with xtval set to \"landing pad fault (code=2)\" if any of the following conditions are true: The pc is not 4-byte aligned and ELP is LP_EXPECTED. The ELP is LP_EXPECTED and the LPL is not zero and the LPL does not match the expected landing pad label in bits 31:12 of the x7 register. If a software-check exception is not caused then the ELP is updated to NO_LP_EXPECTED. The operation of the LPAD instruction is as follows: LPAD operation if (xLPE == 1 && ELP == LP_EXPECTED) // If PC not 4-byte aligned then software-check exception if pc[1:0] != 0 raise software-check exception // If landing pad label not matched -> software-check exception else if (inst.LPL != x7[31:12] && inst.LPL != 0) raise software-check exception else ELP = NO_LP_EXPECTED else no-op endif The Zicfiss extension introduces a shadow stack to enforce backward-edge control-flow integrity. A shadow stack is a second stack used to store a shadow copy of the return address in the link register if it needs to be spilled. The shadow stack is designed to provide integrity to control transfers performed using a return, where the return may be from a procedure invoked using an indirect call or a direct call, and this is referred to as backward-edge protection. A program using backward-edge control-flow integrity has two stacks: a regular stack and a shadow stack. The shadow stack is used to spill the link register, if required, by non-leaf functions. An additional register, shadow-stack-pointer (ssp), is introduced in the architecture to hold the address of the top of the active shadow stack. The shadow stack, similar to the regular stack, grows downwards, from higher addresses to lower addresses. Each entry on the shadow stack is XLEN wide and holds the link register value. The ssp points to the top of the shadow stack, which is the address of the last element stored on the shadow stack. The shadow stack is architecturally protected from inadvertent corruptions and modifications, as detailed in the Privileged specification. The Zicfiss extension provides instructions to store and load the link register to/from the shadow stack and to check the integrity of the return address. The extension provides instructions to support common stack maintenance operations such as stack unwinding and stack switching. When Zicfiss is enabled, each function that needs to spill the link register, typically non-leaf functions, store the link register value to the regular stack and a shadow copy of the link register value to the shadow stack when the function is entered (the prologue). When such a function returns (the epilogue), the function loads the link register from the regular stack and the shadow copy of the link register from the shadow stack. Then, the link register value from the regular stack and the shadow link register value from the shadow stack are compared. A mismatch of the two values is indicative of a subversion of the return address control variable and causes a software-check exception. The Zicfiss instructions, except SSAMOSWAP.W/D, are encoded using a subset of May-Be-Operation instructions defined by the Zimop and Zcmop extensions. This subset of instructions revert to their Zimop/Zcmop defined behavior when the Zicfiss extension is not implemented or if the extension has not been activated. A program that is built with Zicfiss instructions can thus continue to operate correctly, but without backward-edge control-flow integrity, on processors that do not support the Zicfiss extension or if the Zicfiss extension is not active. The Zicfiss extension may be activated for use individually and independently for each privilege mode. Compilers should flag each object file (for example, using flags in the ELF attributes) to indicate if the object file has been compiled with the Zicfiss instructions. The linker should flag (for example, using flags in the ELF attributes) the binary/executable generated by linking objects as being compiled with the Zicfiss instructions only if all the object files that are linked have the same Zicfiss attributes. The dynamic loader should activate the use of Zicfiss extension for an application only if all executables (the application and the dependent dynamically-linked libraries) used by that application use the Zicfiss extension. An application that has the Zicfiss extension active may request the dynamic loader at runtime to load a new dynamic shared object (using dlopen() for example). If the requested object does not have the Zicfiss attribute then the dynamic loader, based on its policy (e.g., established by the operating system or the administrator) configuration, could either deny the request or deactivate the Zicfiss extension for the application. It is strongly recommended that the policy enforces a strict security posture and denies the request. The Zicfiss extension depends on the Zicsr and Zimop extensions. Furthermore, if the Zcmop extension is implemented, the Zicfiss extension also provides the C.SSPUSH and C.SSPOPCHK instructions. Moreover, use of Zicfiss in U-mode requires S-mode to be implemented. Use of Zicfiss in M-mode is not supported. The Zicfiss extension introduces the following instructions: Push to the shadow stack (See Push to the Shadow Stack) SSPUSH x1 and SSPUSH x5 - encoded using MOP.RR.7 C.SSPUSH x1 - encoded using C.MOP.1 Pop from the shadow stack (See Pop from the Shadow Stack) SSPOPCHK x1 and SSPOPCHK x5 - encoded using MOP.R.28 C.SSPOPCHK x5 - encoded using C.MOP.5 Read the value of ssp into a register (See Read ssp into a Register) SSRDP - encoded using MOP.R.28 Perform an atomic swap from a shadow stack location (See Atomic Swap from a Shadow Stack Location) SSAMOSWAP.W and SSAMOSWAP.D Zicfiss does not use all encodings of MOP.RR.7 or MOP.R.28. When a MOP.RR.7 or MOP.R.28 encoding is not used by the Zicfiss extension, the corresponding instruction adheres to its Zimop-defined behavior, unless redefined by another extension. The ssp CSR is an unprivileged read-write (URW) CSR that reads and writes XLEN low order bits of the shadow stack pointer (ssp). The CSR address is 0x011. There is no high CSR defined as the ssp is always as wide as the XLEN of the current privilege mode. The bits 1:0 of ssp are read-only zero. If the UXLEN or SXLEN may never be 32, then the bit 2 is also read-only zero. A shadow stack push operation is defined as decrement of the ssp by XLEN/8 followed by a store of the value in the link register to memory at the new top of the shadow stack. Only x1 and x5 registers are supported as rs2 for SSPUSH. Zicfiss provides a 16-bit version of the SSPUSH x1 instruction using the Zcmop defined C.MOP.1 encoding. The C.SSPUSH x1 expands to SSPUSH x1. The SSPUSH instruction and its compressed form C.SSPUSH can be used to push a link register on the shadow stack. The SSPUSH and C.SSPUSH instructions perform a store identically to the existing store instructions, with the difference that the base is implicitly ssp and the width is implicitly XLEN. The operation of the SSPUSH and C.SSPUSH instructions is as follows: SSPUSH and C.SSPUSH operation if (xSSE == 1) mem[ssp - (XLEN/8)] = X(src) # Store src value to ssp - XLEN/8 ssp = ssp - (XLEN/8) # decrement ssp by XLEN/8 endif The ssp is decremented by SSPUSH and C.SSPUSH only if the store to the shadow stack completes successfully. A shadow stack pop operation is defined as an XLEN wide read from the current top of the shadow stack followed by an increment of the ssp by XLEN/8. Only x1 and x5 registers are supported as rs1 for SSPOPCHK. Zicfiss provides a 16-bit version of the SSPOPCHK x5 using the Zcmop defined C.MOP.5 encoding. The C.SSPOPCHK x5 expands to SSPOPCHK x5. Programs with a shadow stack push the return address onto the regular stack as well as the shadow stack in the prologue of non-leaf functions. When returning from these non-leaf functions, such programs pop the link register from the regular stack and pop a shadow copy of the link register from the shadow stack. The two values are then compared. If the values do not match, it is indicative of a corruption of the return address variable on the regular stack. The SSPOPCHK instruction, and its compressed form C.SSPOPCHK, can be used to pop the shadow return address value from the shadow stack and check that the value matches the contents of the link register, and if not cause a software-check exception with xtval set to \"shadow stack fault (code=3)\". While any register may be used as link register, conventionally the x1 or x5 registers are used. The shadow stack instructions are designed to be most efficient when the x1 and x5 registers are used as the link register. Return-address prediction stacks are a common feature of high-performance instruction-fetch units, but they require accurate detection of instructions used for procedure calls and returns to be effective. For RISC-V, hints as to the instructions' usage are encoded implicitly via the register numbers used. The return-address stack (RAS) actions to pop and/or push onto the RAS are specified in [rashints]. Using x1 or x5 as the link register allows a program to benefit from the return-address prediction stacks. Additionally, since the shadow stack instructions are designed around the use of x1 or x5 as the link register, using any other register as a link register would incur the cost of additional register movements. Compilers, when generating code with backward-edge CFI, must protect the link register, e.g., x1 and/or x5, from arbitrary modification by not emitting unsafe code sequences. Storing the return address on both stacks preserves the call stack layout and the ABI, while also allowing for the detection of corruption of the return address on the regular stack. The prologue and epilogue of a non-leaf function that uses shadow stacks is as follows: function_entry: addi sp,sp,-8 # push link register x1 sd x1,(sp) # on regular stack sspush x1 # push link register x1 on shadow stack : ld x1,(sp) # pop link register x1 from regular stack addi sp,sp,8 sspopchk x1 # fault if x1 not equal to shadow # return address ret This example illustrates the use of x1 register as the link register. Alternatively, the x5 register may also be used as the link register. A leaf function, a function that does not itself make function calls, does not need to spill the link register. Consequently, the return value may be held in the link register itself for the duration of the leaf function’s execution. The C.SSPOPCHK, and SSPOPCHK instructions perform a load identically to the existing load instructions, with the difference that the base is implicitly ssp and the width is implicitly XLEN. The operation of the SSPOPCHK and C.SSPOPCHK instructions is as follows: SSPOPCHK and C.SSPOPCHK operation if (xSSE == 1) temp = mem[ssp] # Load temp from address in ssp and if temp != X(src) # Compare temp to value in src and # cause an software-check exception # if they are not bitwise equal. # Only x1 and x5 may be used as src raise software-check exception else ssp = ssp + (XLEN/8) # increment ssp by XLEN/8. endif endif If the value loaded from the address in ssp does not match the value in rs1, a software-check exception (cause=18) is raised with xtval set to \"shadow stack fault (code=3)\". The software-check exception caused by SSPOPCHK/ C.SSPOPCHK is lower in priority than a load/store/AMO access-fault exception. The ssp is incremented by SSPOPCHK and C.SSPOPCHK only if the load from the shadow stack completes successfully and no software-check exception is raised. The use of the compressed instruction C.SSPUSH x1 to push on the shadow stack is most efficient when the ABI uses x1 as the link register, as the link register may then be pushed without needing a register-to-register move in the function prologue. To use the compressed instruction C.SSPOPCHK x5, the function should pop the return address from regular stack into the alternate link register x5 and use the C.SSPOPCHK x5 to compare the return address to the shadow copy stored on the shadow stack. The function then uses C.JR x5 to jump to the return address. function_entry: c.addi sp,sp,-8 # push link register x1 c.sd x1,(sp) # on regular stack c.sspush x1 # push link register x1 on shadow stack : c.ld x5,(sp) # pop link register x5 from regular stack c.addi sp,sp,8 c.sspopchk x5 # fault if x5 not equal to shadow return address c.jr x5 Store-to-load forwarding is a common technique employed by high-performance processor implementations. Zicfiss implementations may prevent forwarding from a non-shadow-stack store to the SSPOPCHK or the C.SSPOPCHK instructions. A non-shadow-stack store causes a fault if done to a page mapped as a shadow stack. However, such determination may be delayed till the PTE has been examined and thus may be used to transiently forward the data from such stores to SSPOPCHK or to C.SSPOPCHK. The SSRDP instruction is provided to move the contents of ssp to a destination register. Encoding rd as x0 is not supported for SSRDP. The operation of the SSRDP instructions is as follows: SSRDP operation if (xSSE == 1) X(dst) = ssp else X(dst) = 0 endif The property of Zimop writing 0 to the rd when the extension using Zimop is not implemented or not active may be used by to determine if Zicfiss extension is active. For example, functions that unwind shadow stacks may skip over the unwind actions by dynamically detecting if the Zicfiss extension is active. An example sequence such as the following may be used: ssrdp t0 # mv ssp to t0 beqz t0, zicfiss_not_active # zero is not a valid shadow stack # pointer by convention # Zicfiss is active : : zicfiss_not_active: To assist with the use of such code sequences, operating systems and runtimes must not locate shadow stacks at address 0. A common operation performed on stacks is to unwind them to support constructs like setjmp/longjmp, C++ exception handling, etc. A program that uses shadow stacks must unwind the shadow stack in addition to the stack used to store data. The unwind function must verify that it does not accidentally unwind past the bounds of the shadow stack. Shadow stacks are expected to be bounded on each end using guard pages. A guard page for a stack is a page that is not accessible by the process that owns the stack. To detect if the unwind occurs past the bounds of the shadow stack, the unwind may be done in maximal increments of 4 KiB, testing whether the ssp is still pointing to a shadow stack page or has unwound into the guard page. The following examples illustrate the use of shadow stack instructions to unwind a shadow stack. This example assumes that the setjmp function itself does not push on to the shadow stack (being a leaf function, it is not required to). setjmp() { : : // read and save the shadow stack pointer to jmp_buf asm(\"ssrdp %0\" : \"=r\"(cur_ssp):); jmp_buf->saved_ssp = cur_ssp; : : } longjmp() { : // Read current shadow stack pointer and // compute number of call frames to unwind asm(\"ssrdp %0\" : \"=r\"(cur_ssp):); // Skip the unwind if backward-edge CFI not active asm(\"beqz %0, back_cfi_not_active\" : \"=r\"(cur_ssp):); // Unwind the frames in a loop while ( jmp_buf->saved_ssp > cur_ssp ) { // advance by a maximum of 4K at a time to avoid // unwinding past bounds of the shadow stack cur_ssp = ( (jmp_buf->saved_ssp - cur_ssp) >= 4096 ) ? (cur_ssp + 4096) : jmp_buf->saved_ssp; asm(\"csrw ssp, %0\" : : \"r\" (cur_ssp)); // Test if unwound past the shadow stack bounds asm(\"sspush x5\"); asm(\"sspopchk x5\"); } back_cfi_not_active: : } For RV32, SSAMOSWAP.W atomically loads a 32-bit data value from address of a shadow stack location in rs1, puts the loaded value into register rd, and stores the 32-bit value held in rs2 to the original address in rs1. SSAMOSWAP.D (RV64 only) is similar to SSAMOSWAP.W but operates on 64-bit data values. SSAMOSWAP.W for RV32 and SSAMOSWAP.D (RV64 only) operation if privilege_mode != M && menvcfg.SSE == 0 raise illegal-instruction exception else if S-mode not implemented raise illegal-instruction exception else if privilege_mode == U && senvcfg.SSE == 0 raise illegal-instruction exception else if privilege_mode == VS && henvcfg.SSE == 0 raise virtual-instruction exception else if privilege_mode == VU && senvcfg.SSE == 0 raise virtual-instruction exception else X(rd) = mem[X(rs1)] mem[X(rs1)] = X(rs2) endif For RV64, SSAMOSWAP.W atomically loads a 32-bit data value from address of a shadow stack location in rs1, sign-extends the loaded value and puts it in rd, and stores the lower 32 bits of the value held in rs2 to the original address in rs1. SSAMOSWAP.W for RV64 if privilege_mode != M && menvcfg.SSE == 0 raise illegal-instruction exception else if S-mode not implemented raise illegal-instruction exception else if privilege_mode == U && senvcfg.SSE == 0 raise illegal-instruction exception else if privilege_mode == VS && henvcfg.SSE == 0 raise virtual-instruction exception else if privilege_mode == VU && senvcfg.SSE == 0 raise virtual-instruction exception else temp[31:0] = mem[X(rs1)] X(rd) = SignExtend(temp[31:0]) mem[X(rs1)] = X(rs2)[31:0] endif Just as for AMOs in the A extension, SSAMOSWAP.W/D requires that the address held in rs1 be naturally aligned to the size of the operand (i.e., eight-byte aligned for doublewords, and four-byte aligned for words). The same exception options apply if the address is not naturally aligned. Just as for AMOs in the A extension, SSAMOSWAP.W/D optionally provides release consistency semantics, using the aq and rl bits, to help implement multiprocessor synchronization. An SSAMOSWAP.W/D operation has acquire semantics if aq=1 and release semantics if rl=1. Stack switching is a common operation in user programs as well as supervisor programs. When a stack switch is performed the stack pointer of the currently active stack is saved into a context data structure and the new stack is made active by loading a new stack pointer from a context data structure. When shadow stacks are active for a program, the program needs to additionally switch the shadow stack pointer. If the pointer to the top of the deactivated shadow stack is held in a context data structure, then it may be susceptible to memory corruption vulnerabilities. To protect the pointer value, the program may store it at the top of the deactivated shadow stack itself and thereby create a checkpoint. A legal checkpoint is defined as one that holds a value of X, where X is the address at which the checkpoint is positioned on the shadow stack. An example sequence to restore the shadow stack pointer from the new shadow stack and save the old shadow stack pointer on the old shadow stack is as follows: # a0 hold pointer to top of new shadow stack to switch to stack_switch: ssrdp ra beqz ra, 2f # skip if Zicfiss not active ssamoswap.d ra, x0, (a0) # ra=*[a0] and *[a0]=0 beq ra, a0, 1f # [a0] must be == [ra] unimp # else crash 1: addi ra, ra, XLEN/8 # pop the checkpoint csrrw ra, ssp, ra # swap ssp: ra=ssp, ssp=ra addi ra, ra, -(XLEN/8) # checkpoint = \"old ssp - XLEN/8\" ssamoswap.d x0, ra, (ra) # Save checkpoint at \"old ssp - XLEN/8\" 2: This sequence uses the ra register. If the privilege mode at which this sequence is executed can be interrupted, then the trap handler should save the ra on the shadow stack itself. There it is guarded against tampering and can be restored prior to returning from the trap. When a new shadow stack is created by the supervisor, it needs to store a checkpoint at the highest address on that stack. This enables the shadow stack pointer to be switched using the process outlined in this note. The SSAMOSWAP.W/D instruction can be used to store this checkpoint. When the old value at the memory location operated on by SSAMOSWAP.W/D is not required, rd can be set to x0.","title":"Control-flow Integrity (CFI)","component":"isa","version":"v20250508","name":"unpriv-cfi","url":"/isa/unpriv/unpriv-cfi.html","titles":[{"text":"Landing Pad (Zicfilp)","hash":"unpriv-forward","id":1},{"text":"Landing Pad Enforcement","hash":"landing-pad-enforcement","id":2},{"text":"Landing Pad Instruction","hash":"LP_INST","id":3},{"text":"Shadow Stack (Zicfiss)","hash":"unpriv-backward","id":4},{"text":"Zicfiss Instructions Summary","hash":"zicfiss-instructions-summary","id":5},{"text":"Shadow Stack Pointer (ssp)","hash":"shadow-stack-pointer-ssp","id":6},{"text":"Zicfiss Instructions","hash":"zicfiss-instructions","id":7},{"text":"Push to the Shadow Stack","hash":"SS_PUSH","id":8},{"text":"Pop from the Shadow Stack","hash":"SS_POP","id":9},{"text":"Read ssp into a Register","hash":"SSP_READ","id":10},{"text":"Atomic Swap from a Shadow Stack Location","hash":"SSAMOSWAP","id":11}]},"51":{"id":51,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"V\" Standard Extension for Vector Operations, Version 1.0 The base vector extension is intended to provide general support for data-parallel execution within the 32-bit instruction encoding space, with later vector extensions supporting richer functionality for certain domains. This spec includes the complete set of currently frozen vector instructions. Other instructions that have been considered during development but are not present in this document are not included in the review and ratification process, and may be completely revised or abandoned. Standard Vector Extensions lists the standard vector extensions and which instructions and element widths are supported by each extension. Each hart supporting a vector extension defines two parameters: The maximum size in bits of a vector element that any operation can produce or consume, ELEN ≥ 8, which must be a power of 2. The number of bits in a single vector register, VLEN ≥ ELEN, which must be a power of 2, and must be no greater than 216. Standard vector extensions (Standard Vector Extensions) and architecture profiles may set further constraints on ELEN and VLEN. Future extensions may allow ELEN > VLEN by holding one element using bits from multiple vector registers, but this current proposal does not include this option. The upper limit on VLEN allows software to know that indices will fit into 16 bits (largest VLMAX of 65,536 occurs for LMUL=8 and SEW=8 with VLEN=65,536). Any future extension beyond 64Kib per vector register will require new configuration instructions such that software using the old configuration instructions does not see greater vector lengths. The vector extension supports writing binary code that under certain constraints will execute portably on harts with different values for the VLEN parameter, provided the harts support the required element types and instructions. Code can be written that will expose differences in implementation parameters. In general, thread contexts with active vector state cannot be migrated during execution between harts that have any difference in VLEN or ELEN parameters. The vector extension adds 32 vector registers, and seven unprivileged CSRs (vstart, vxsat, vxrm, vcsr, vtype, vl, vlenb) to a base scalar RISC-V ISA. Table 1. New vector CSRs Address Privilege Name Description 0x008 URW vstart Vector start element index 0x009 URW vxsat Fixed-Point Saturate Flag 0x00A URW vxrm Fixed-Point Rounding Mode 0x00F URW vcsr Vector control and status register 0xC20 URO vl Vector length 0xC21 URO vtype Vector data type register 0xC22 URO vlenb VLEN/8 (vector register length in bytes) The four CSR numbers 0x00B-0x00E are tentatively reserved for future vector CSRs, some of which may be mirrored into vcsr. The vector extension adds 32 architectural vector registers, v0-v31 to the base scalar RISC-V ISA. Each vector register has a fixed VLEN bits of state. A vector context status field, VS, is added to mstatus[10:9] and shadowed in sstatus[10:9]. It is defined analogously to the floating-point context status field, FS. Attempts to execute any vector instruction, or to access the vector CSRs, raise an illegal-instruction exception when mstatus.VS is set to Off. When mstatus.VS is set to Initial or Clean, executing any instruction that changes vector state, including the vector CSRs, will change mstatus.VS to Dirty. Implementations may also change mstatus.VS from Initial or Clean to Dirty at any time, even when there is no change in vector state. Accurate setting of mstatus.VS is an optimization. Software will typically use VS to reduce context-swap overhead. If mstatus.VS is Dirty, mstatus.SD is 1; otherwise, mstatus.SD is set in accordance with existing specifications. Implementations may have a writable misa.V field. Analogous to the way in which the floating-point unit is handled, the mstatus.VS field may exist even if misa.V is clear. Allowing mstatus.VS to exist when misa.V is clear, enables vector emulation and simplifies handling of mstatus.VS in systems with writable misa.V. When the hypervisor extension is present, a vector context status field, VS, is added to vsstatus[10:9]. It is defined analogously to the floating-point context status field, FS. When V=1, both vsstatus.VS and mstatus.VS are in effect: attempts to execute any vector instruction, or to access the vector CSRs, raise an illegal-instruction exception when either field is set to Off. When V=1 and neither vsstatus.VS nor mstatus.VS is set to Off, executing any instruction that changes vector state, including the vector CSRs, will change both mstatus.VS and vsstatus.VS to Dirty. Implementations may also change mstatus.VS or vsstatus.VS from Initial or Clean to Dirty at any time, even when there is no change in vector state. If vsstatus.VS is Dirty, vsstatus.SD is 1; otherwise, vsstatus.SD is set in accordance with existing specifications. If mstatus.VS is Dirty, mstatus.SD is 1; otherwise, mstatus.SD is set in accordance with existing specifications. For implementations with a writable misa.V field, the vsstatus.VS field may exist even if misa.V is clear. The read-only XLEN-wide vector type CSR, vtype provides the default type used to interpret the contents of the vector register file, and can only be updated by vset{i}vl{i} instructions. The vector type determines the organization of elements in each vector register, and how multiple vector registers are grouped. The vtype register also indicates how masked-off elements and elements past the current vector length in a vector result are handled. Allowing updates only via the vset{i}vl{i} instructions simplifies maintenance of the vtype register state. The vtype register has five fields, vill, vma, vta, vsew[2:0], and vlmul[2:0]. Bits vtype[XLEN-2:8] should be written with zero, and non-zero values in this field are reserved. This diagram shows the layout for RV32 systems, whereas in general vill should be at bit XLEN-1. Table 2. vtype register layout Bits Name Description XLEN-1 vill Illegal value if set XLEN-2:8 0 Reserved if non-zero 7 vma Vector mask agnostic 6 vta Vector tail agnostic 5:3 vsew[2:0] Selected element width (SEW) setting 2:0 vlmul[2:0] Vector register group multiplier (LMUL) setting A small implementation supporting ELEN=32 requires only seven bits of state in vtype: two bits for ma and ta, two bits for vsew[1:0] and three bits for vlmul[2:0]. The illegal value represented by vill can be internally encoded using the illegal 64-bit combination in vsew[1:0] without requiring an additional storage bit to hold vill. Further standard and custom vector extensions may extend these fields to support a greater variety of data types. The primary motivation for the vtype CSR is to allow the vector instruction set to fit into a 32-bit instruction encoding space. A separate vset{i}vl{i} instruction can be used to set vl and/or vtype fields before execution of a vector instruction, and implementations may choose to fuse these two instructions into a single internal vector microop. In many cases, the vl and vtype values can be reused across multiple instructions, reducing the static and dynamic instruction overhead from the vset{i}vl{i} instructions. It is anticipated that a future extended 64-bit instruction encoding would allow these fields to be specified statically in the instruction encoding. The value in vsew sets the dynamic selected element width (SEW). By default, a vector register is viewed as being divided into VLEN/SEW elements. Table 3. vsew[2:0] (selected element width) encoding vsew[2:0] SEW 0 0 0 8 0 0 1 16 0 1 0 32 0 1 1 64 1 X X Reserved While it is anticipated the larger vsew[2:0] encodings (100-111) will be used to encode larger SEW, the encodings are formally reserved at this point. Table 4. Example VLEN = 128 bits SEW Elements per vector register 64 2 32 4 16 8 8 16 The supported element width may vary with LMUL. The current set of standard vector extensions do not vary supported element width with LMUL. Some future extensions may support larger SEWs only when bits from multiple vector registers are combined using LMUL. In this case, software that relies on large SEW should attempt to use the largest LMUL, and hence the fewest vector register groups, to increase the number of implementations on which the code will run. The vill bit in vtype should be checked after setting vtype to see if the configuration is supported, and an alternate code path should be provided if it is not. Alternatively, a profile can mandate the minimum SEW at each LMUL setting. Multiple vector registers can be grouped together, so that a single vector instruction can operate on multiple vector registers. The term vector register group is used herein to refer to one or more vector registers used as a single operand to a vector instruction. Vector register groups can be used to provide greater execution efficiency for longer application vectors, but the main reason for their inclusion is to allow double-width or larger elements to be operated on with the same vector length as single-width elements. The vector length multiplier, LMUL, when greater than 1, represents the default number of vector registers that are combined to form a vector register group. Implementations must support LMUL integer values of 1, 2, 4, and 8. The vector architecture includes instructions that take multiple source and destination vector operands with different element widths, but the same number of elements. The effective LMUL (EMUL) of each vector operand is determined by the number of registers required to hold the elements. For example, for a widening add operation, such as add 32-bit values to produce 64-bit results, a double-width result requires twice the LMUL of the single-width inputs. LMUL can also be a fractional value, reducing the number of bits used in a single vector register. Fractional LMUL is used to increase the number of effective usable vector register groups when operating on mixed-width values. With only integer LMUL values, a loop operating on a range of sizes would have to allocate at least one whole vector register (LMUL=1) for the narrowest data type and then would consume multiple vector registers (LMUL>1) to form a vector register group for each wider vector operand. This can limit the number of vector register groups available. With fractional LMUL, the widest values need occupy only a single vector register while narrower values can occupy a fraction of a single vector register, allowing all 32 architectural vector register names to be used for different values in a vector loop even when handling mixed-width values. Fractional LMUL implies portions of vector registers are unused, but in some cases, having more shorter register-resident vectors improves efficiency relative to fewer longer register-resident vectors. Implementations must provide fractional LMUL settings that allow the narrowest supported type to occupy a fraction of a vector register corresponding to the ratio of the narrowest supported type’s width to that of the largest supported type’s width. In general, the requirement is to support LMUL ≥ SEWMIN/ELEN, where SEWMIN is the narrowest supported SEW value and ELEN is the widest supported SEW value. In the standard extensions, SEWMIN=8. For standard vector extensions with ELEN=32, fractional LMULs of 1/2 and 1/4 must be supported. For standard vector extensions with ELEN=64, fractional LMULs of 1/2, 1/4, and 1/8 must be supported. When LMUL < SEWMIN/ELEN, there is no guarantee an implementation would have enough bits in the fractional vector register to store at least one element, as VLEN=ELEN is a valid implementation choice. For example, with VLEN=ELEN=32, and SEWMIN=8, an LMUL of 1/8 would only provide four bits of storage in a vector register. For a given supported fractional LMUL setting, implementations must support SEW settings between SEWMIN and LMUL * ELEN, inclusive. The use of vtype encodings with LMUL < SEWMIN/ELEN is reserved, but implementations can set vill if they do not support these configurations. Requiring all implementations to set vill in this case would prohibit future use of this case in an extension, so to allow for a future definition of LMUL<SEWMIN/ELEN behavior, we consider the use of this case to be reserved. It is recommended that assemblers provide a warning (not an error) if a vsetvli instruction attempts to write an LMUL < SEWMIN/ELEN. LMUL is set by the signed vlmul field in vtype (i.e., LMUL = 2vlmul[2:0]). The derived value VLMAX = LMUL*VLEN/SEW represents the maximum number of elements that can be operated on with a single vector instruction given the current SEW and LMUL settings as shown in the table below. vlmul[2:0] LMUL #groups VLMAX Registers grouped with register n 1 0 0 - - - reserved 1 0 1 1/8 32 VLEN/SEW/8 v n (single register in group) 1 1 0 1/4 32 VLEN/SEW/4 v n (single register in group) 1 1 1 1/2 32 VLEN/SEW/2 v n (single register in group) 0 0 0 1 32 VLEN/SEW v n (single register in group) 0 0 1 2 16 2*VLEN/SEW v n, v n+1 0 1 0 4 8 4*VLEN/SEW v n, …​, v n+3 0 1 1 8 4 8*VLEN/SEW v n, …​, v n+7 When LMUL=2, the vector register group contains vector register v n and vector register v n+1, providing twice the vector length in bits. Instructions specifying an LMUL=2 vector register group with an odd-numbered vector register are reserved. When LMUL=4, the vector register group contains four vector registers, and instructions specifying an LMUL=4 vector register group using vector register numbers that are not multiples of four are reserved. When LMUL=8, the vector register group contains eight vector registers, and instructions specifying an LMUL=8 vector register group using register numbers that are not multiples of eight are reserved. Mask registers are always contained in a single vector register, regardless of LMUL. These two bits modify the behavior of destination tail elements and destination inactive masked-off elements respectively during the execution of vector instructions. The tail and inactive sets contain element positions that are not receiving new results during a vector operation, as defined in Prestart, Active, Inactive, Body, and Tail Element Definitions. All systems must support all four options: vta vma Tail Elements Inactive Elements 0 0 undisturbed undisturbed 0 1 undisturbed agnostic 1 0 agnostic undisturbed 1 1 agnostic agnostic Mask destination tail elements are always treated as tail-agnostic, regardless of the setting of vta. When a set is marked undisturbed, the corresponding set of destination elements in a vector register group retain the value they previously held. When a set is marked agnostic, the corresponding set of destination elements in any vector destination operand can either retain the value they previously held, or are overwritten with 1s. Within a single vector instruction, each destination element can be either left undisturbed or overwritten with 1s, in any combination, and the pattern of undisturbed or overwritten with 1s is not required to be deterministic when the instruction is executed with the same inputs. The agnostic policy was added to accommodate machines with vector register renaming. With an undisturbed policy, all elements would have to be read from the old physical destination vector register to be copied into the new physical destination vector register. This causes an inefficiency when these inactive or tail values are not required for subsequent calculations. The value of all 1s instead of all 0s was chosen for the overwrite value to discourage software developers from depending on the value written. A simple in-order implementation can ignore the settings and simply execute all vector instructions using the undisturbed policy. The vta and vma state bits must still be provided in vtype for compatibility and to support thread migration. An out-of-order implementation can choose to implement tail-agnostic + mask-agnostic using tail-agnostic + mask-undisturbed to reduce implementation complexity. The definition of agnostic result policy is left loose to accommodate migrating application threads between harts on a small in-order core (which probably leaves agnostic regions undisturbed) and harts on a larger out-of-order core with register renaming (which probably overwrites agnostic elements with 1s). As it might be necessary to restart in the middle, we allow arbitrary mixing of agnostic policies within a single vector instruction. This allowed mixing of policies also enables implementations that might change policies for different granules of a vector register, for example, using undisturbed within a granule that is actively operated on but renaming to all 1s for granules in the tail. In addition, except for mask load instructions, any element in the tail of a mask result can also be written with the value the mask-producing operation would have calculated with vl=VLMAX. Furthermore, for mask-logical instructions and vmsbf.m, vmsif.m, vmsof.m mask-manipulation instructions, any element in the tail of the result can be written with the value the mask-producing operation would have calculated with vl=VLEN, SEW=8, and LMUL=8 (i.e., all bits of the mask register can be overwritten). Mask tails are always treated as agnostic to reduce complexity of managing mask data, which can be written at bit granularity. There appears to be little software need to support tail-undisturbed for mask register values. Allowing mask-generating instructions to write back the result of the instruction avoids the need for logic to mask out the tail, except mask loads cannot write memory values to destination mask tails as this would imply accessing memory past software intent. The assembly syntax adds two mandatory flags to the vsetvli instruction: ta # Tail agnostic tu # Tail undisturbed ma # Mask agnostic mu # Mask undisturbed vsetvli t0, a0, e32, m4, ta, ma # Tail agnostic, mask agnostic vsetvli t0, a0, e32, m4, tu, ma # Tail undisturbed, mask agnostic vsetvli t0, a0, e32, m4, ta, mu # Tail agnostic, mask undisturbed vsetvli t0, a0, e32, m4, tu, mu # Tail undisturbed, mask undisturbed Prior to v0.9, when these flags were not specified on a vsetvli, they defaulted to mask-undisturbed/tail-undisturbed. The use of vsetvli without these flags is deprecated, however, and specifying a flag setting is now mandatory. The default should perhaps be tail-agnostic/mask-agnostic, so software has to specify when it cares about the non-participating elements, but given the historical meaning of the instruction prior to introduction of these flags, it was decided to always require them in future assembly code. The vill bit is used to encode that a previous vset{i}vl{i} instruction attempted to write an unsupported value to vtype. The vill bit is held in bit XLEN-1 of the CSR to support checking for illegal values with a branch on the sign bit. If the vill bit is set, then any attempt to execute a vector instruction that depends upon vtype will raise an illegal-instruction exception. vset{i}vl{i} and whole register loads and stores do not depend upon vtype. When the vill bit is set, the other XLEN-1 bits in vtype shall be zero. The XLEN-bit-wide read-only vl CSR can only be updated by the vset{i}vl{i} instructions, and the fault-only-first vector load instruction variants. The vl register holds an unsigned integer specifying the number of elements to be updated with results from a vector instruction, as further detailed in Prestart, Active, Inactive, Body, and Tail Element Definitions. The number of bits implemented in vl depends on the implementation’s maximum vector length of the smallest supported type. The smallest vector implementation with VLEN=32 and supporting SEW=8 would need at least six bits in vl to hold the values 0-32 (VLEN=32, with LMUL=8 and SEW=8, yields VLMAX=32). The XLEN-bit-wide read-only CSR vlenb holds the value VLEN/8, i.e., the vector register length in bytes. The value in vlenb is a design-time constant in any implementation. Without this CSR, several instructions are needed to calculate VLEN in bytes, and the code has to disturb current vl and vtype settings which require them to be saved and restored. The XLEN-bit-wide read-write vstart CSR specifies the index of the first element to be executed by a vector instruction, as described in Prestart, Active, Inactive, Body, and Tail Element Definitions. Normally, vstart is only written by hardware on a trap on a vector instruction, with the vstart value representing the element on which the trap was taken (either a synchronous exception or an asynchronous interrupt), and at which execution should resume after a resumable trap is handled. All vector instructions are defined to begin execution with the element number given in the vstart CSR, leaving earlier elements in the destination vector undisturbed, and to reset the vstart CSR to zero at the end of execution. All vector instructions, including vset{i}vl{i}, reset the vstart CSR to zero. vstart is not modified by vector instructions that raise illegal-instruction exceptions. The vstart CSR is defined to have only enough writable bits to hold the largest element index (one less than the maximum VLMAX). The maximum vector length is obtained with the largest LMUL setting (8) and the smallest SEW setting (8), so VLMAX_max = 8*VLEN/8 = VLEN. For example, for VLEN=256, vstart would have 8 bits to represent indices from 0 through 255. The use of vstart values greater than the largest element index for the current vtype setting is reserved. It is recommended that implementations trap if vstart is out of bounds. It is not required to trap, as a possible future use of upper vstart bits is to store imprecise trap information. The vstart CSR is writable by unprivileged code, but non-zero vstart values may cause vector instructions to run substantially slower on some implementations, so vstart should not be used by application programmers. A few vector instructions cannot be executed with a non-zero vstart value and will raise an illegal instruction exception as defined below. Making vstart visible to unprivileged code supports user-level threading libraries. Implementations are permitted to raise illegal-instruction exceptions when attempting to execute a vector instruction with a value of vstart that the implementation can never produce when executing that same instruction with the same vtype setting. For example, some implementations will never take interrupts during execution of a vector arithmetic instruction, instead waiting until the instruction completes to take the interrupt. Such implementations are permitted to raise an illegal-instruction exception when attempting to execute a vector arithmetic instruction when vstart is nonzero. When migrating a software thread between two harts with different microarchitectures, the vstart value might not be supported by the new hart microarchitecture. The runtime on the receiving hart might then have to emulate instruction execution up to the next supported vstart element position. Alternatively, migration events can be constrained to only occur at mutually supported vstart locations. The vector fixed-point rounding-mode register holds a two-bit read-write rounding-mode field in the least-significant bits (vxrm[1:0]). The upper bits, vxrm[XLEN-1:2], should be written as zeros. The vector fixed-point rounding-mode is given a separate CSR address to allow independent access, but is also reflected as a field in vcsr. A new rounding mode can be set while saving the original rounding mode using a single csrwi instruction. The fixed-point rounding algorithm is specified as follows. Suppose the pre-rounding result is v, and d bits of that result are to be rounded off. Then the rounded result is (v >> d) + r, where r depends on the rounding mode as specified in the following table. Table 5. vxrm encoding vxrm[1:0] Abbreviation Rounding Mode Rounding increment, r 0 0 rnu round-to-nearest-up (add +0.5 LSB) v[d-1] 0 1 rne round-to-nearest-even v[d-1] & (v[d-2:0]≠0 | v[d]) 1 0 rdn round-down (truncate) 0 1 1 rod round-to-odd (OR bits into LSB, aka \"jam\") !v[d] & v[d-1:0]≠0 The rounding functions: roundoff_unsigned(v, d) = (unsigned(v) >> d) + r roundoff_signed(v, d) = (signed(v) >> d) + r are used to represent this operation in the instruction descriptions below. The vxsat CSR has a single read-write least-significant bit (vxsat[0]) that indicates if a fixed-point instruction has had to saturate an output value to fit into a destination format. Bits vxsat[XLEN-1:1] should be written as zeros. The vxsat bit is mirrored in vcsr. The vxrm and vxsat separate CSRs can also be accessed via fields in the XLEN-bit-wide vector control and status CSR, vcsr. Table 6. vcsr layout Bits Name Description XLEN-1:3 Reserved 2:1 vxrm[1:0] Fixed-point rounding mode 0 vxsat Fixed-point accrued saturation flag The vector extension must have a consistent state at reset. In particular, vtype and vl must have values that can be read and then restored with a single vsetvl instruction. It is recommended that at reset, vtype.vill is set, the remaining bits in vtype are zero, and vl is set to zero. The vstart, vxrm, vxsat CSRs can have arbitrary values at reset. Most uses of the vector unit will require an initial vset{i}vl{i}, which will reset vstart. The vxrm and vxsat fields should be reset explicitly in software before use. The vector registers can have arbitrary values at reset. The following diagrams illustrate how different width elements are packed into the bytes of a vector register depending on the current SEW and LMUL settings, as well as implementation VLEN. Elements are packed into each vector register with the least-significant byte in the lowest-numbered bits. The mapping was chosen to provide the simplest and most portable model for software, but might appear to incur large wiring cost for wider vector datapaths on certain operations. The vector instruction set was expressly designed to support implementations that internally rearrange vector data for different SEW to reduce datapath wiring costs, while externally preserving the simple software model. For example, microarchitectures can track the EEW with which a vector register was written, and then insert additional scrambling operations to rearrange data if the register is accessed with a different EEW. When LMUL=1, elements are simply packed in order from the least-significant to most-significant bits of the vector register. To increase readability, vector register layouts are drawn with bytes ordered from right to left with increasing byte address. Bits within an element are numbered in a little-endian format with increasing bit index from right to left corresponding to increasing magnitude. LMUL=1 examples. The element index is given in hexadecimal and is shown placed at the least-significant byte of the stored element. VLEN=32b Byte 3 2 1 0 SEW=8b 3 2 1 0 SEW=16b 1 0 SEW=32b 0 VLEN=64b Byte 7 6 5 4 3 2 1 0 SEW=8b 7 6 5 4 3 2 1 0 SEW=16b 3 2 1 0 SEW=32b 1 0 SEW=64b 0 VLEN=128b Byte F E D C B A 9 8 7 6 5 4 3 2 1 0 SEW=8b F E D C B A 9 8 7 6 5 4 3 2 1 0 SEW=16b 7 6 5 4 3 2 1 0 SEW=32b 3 2 1 0 SEW=64b 1 0 VLEN=256b Byte 1F1E1D1C1B1A19181716151413121110 F E D C B A 9 8 7 6 5 4 3 2 1 0 SEW=8b 1F1E1D1C1B1A19181716151413121110 F E D C B A 9 8 7 6 5 4 3 2 1 0 SEW=16b F E D C B A 9 8 7 6 5 4 3 2 1 0 SEW=32b 7 6 5 4 3 2 1 0 SEW=64b 3 2 1 0 When LMUL < 1, only the first LMUL*VLEN/SEW elements in the vector register are used. The remaining space in the vector register is treated as part of the tail, and hence must obey the vta setting. Example, VLEN=128b, LMUL=1/4 Byte F E D C B A 9 8 7 6 5 4 3 2 1 0 SEW=8b - - - - - - - - - - - - 3 2 1 0 SEW=16b - - - - - - 1 0 SEW=32b - - - 0 When vector registers are grouped, the elements of the vector register group are packed contiguously in element order beginning with the lowest-numbered vector register and moving to the next-highest-numbered vector register in the group once each vector register is filled. LMUL > 1 examples VLEN=32b, SEW=8b, LMUL=2 Byte 3 2 1 0 v2*n 3 2 1 0 v2*n+1 7 6 5 4 VLEN=32b, SEW=16b, LMUL=2 Byte 3 2 1 0 v2*n 1 0 v2*n+1 3 2 VLEN=32b, SEW=16b, LMUL=4 Byte 3 2 1 0 v4*n 1 0 v4*n+1 3 2 v4*n+2 5 4 v4*n+3 7 6 VLEN=32b, SEW=32b, LMUL=4 Byte 3 2 1 0 v4*n 0 v4*n+1 1 v4*n+2 2 v4*n+3 3 VLEN=64b, SEW=32b, LMUL=2 Byte 7 6 5 4 3 2 1 0 v2*n 1 0 v2*n+1 3 2 VLEN=64b, SEW=32b, LMUL=4 Byte 7 6 5 4 3 2 1 0 v4*n 1 0 v4*n+1 3 2 v4*n+2 5 4 v4*n+3 7 6 VLEN=128b, SEW=32b, LMUL=2 Byte F E D C B A 9 8 7 6 5 4 3 2 1 0 v2*n 3 2 1 0 v2*n+1 7 6 5 4 VLEN=128b, SEW=32b, LMUL=4 Byte F E D C B A 9 8 7 6 5 4 3 2 1 0 v4*n 3 2 1 0 v4*n+1 7 6 5 4 v4*n+2 B A 9 8 v4*n+3 F E D C The vector ISA is designed to support mixed-width operations without requiring additional explicit rearrangement instructions. The recommended software strategy when operating on multiple vectors with different precision values is to modify vtype dynamically to keep SEW/LMUL constant (and hence VLMAX constant). The following example shows four different packed element widths (8b, 16b, 32b, 64b) in a VLEN=128b implementation. The vector register grouping factor (LMUL) is increased by the relative element size such that each group can hold the same number of vector elements (VLMAX=8 in this example) to simplify stripmining code. Example VLEN=128b, with SEW/LMUL=16 Byte F E D C B A 9 8 7 6 5 4 3 2 1 0 vn - - - - - - - - 7 6 5 4 3 2 1 0 SEW=8b, LMUL=1/2 vn 7 6 5 4 3 2 1 0 SEW=16b, LMUL=1 v2*n 3 2 1 0 SEW=32b, LMUL=2 v2*n+1 7 6 5 4 v4*n 1 0 SEW=64b, LMUL=4 v4*n+1 3 2 v4*n+2 5 4 v4*n+3 7 6 The following table shows each possible constant SEW/LMUL operating point for loops with mixed-width operations. Each column represents a constant SEW/LMUL operating point. Entries in table are the LMUL values that yield that column’s SEW/LMUL value for the datawidth on that row. In each column, an LMUL setting for a datawidth indicates that it can be aligned with the other datawidths in the same column that also have an LMUL setting, such that all have the same VLMAX. SEW/LMUL 1 2 4 8 16 32 64 SEW= 8 8 4 2 1 1/2 1/4 1/8 SEW= 16 8 4 2 1 1/2 1/4 SEW= 32 8 4 2 1 1/2 SEW= 64 8 4 2 1 Larger LMUL settings can also used to simply increase vector length to reduce instruction fetch and dispatch overheads in cases where fewer vector register groups are needed. A vector mask occupies only one vector register regardless of SEW and LMUL. Each element is allocated a single mask bit in a mask vector register. The mask bit for element i is located in bit i of the mask register, independent of SEW or LMUL. The instructions in the vector extension fit under two existing major opcodes (LOAD-FP and STORE-FP) and one new major opcode (OP-V). Vector loads and stores are encoded within the scalar floating-point load and store major opcodes (LOAD-FP/STORE-FP). The vector load and store encodings repurpose a portion of the standard scalar floating-point load/store 12-bit immediate field to provide further vector instruction encoding, with bit 25 holding the standard vector mask bit (see Mask Encoding). Format for Vector Load Instructions under LOAD-FP major opcode Format for Vector Store Instructions under STORE-FP major opcode Formats for Vector Arithmetic Instructions under OP-V major opcode Formats for Vector Configuration Instructions under OP-V major opcode Vector instructions can have scalar or vector source operands and produce scalar or vector results, and most vector instructions can be performed either unconditionally or conditionally under a mask. Vector loads and stores move bit patterns between vector register elements and memory. Vector arithmetic instructions operate on values held in vector register elements. Scalar operands can be immediates, or taken from the x registers, the f registers, or element 0 of a vector register. Scalar results are written to an x or f register or to element 0 of a vector register. Any vector register can be used to hold a scalar regardless of the current LMUL setting. Zfinx (\"F in X\") is a new ISA extension where floating-point instructions take their arguments from the integer register file. The vector extension is also compatible with Zfinx, where the Zfinx vector extension has vector-scalar floating-point instructions taking their scalar argument from the x registers. We considered but did not pursue overlaying the f registers on v registers. The adopted approach reduces vector register pressure, avoids interactions with the standard calling convention, simplifies high-performance scalar floating-point design, and provides compatibility with the Zfinx ISA option. Overlaying f with v would provide the advantage of lowering the number of state bits in some implementations, but complicates high-performance designs and would prevent compatibility with the Zfinx ISA option. Each vector operand has an effective element width (EEW) and an effective LMUL (EMUL) that is used to determine the size and location of all the elements within a vector register group. By default, for most operands of most instructions, EEW=SEW and EMUL=LMUL. Some vector instructions have source and destination vector operands with the same number of elements but different widths, so that EEW and EMUL differ from SEW and LMUL respectively but EEW/EMUL = SEW/LMUL. For example, most widening arithmetic instructions have a source group with EEW=SEW and EMUL=LMUL but have a destination group with EEW=2*SEW and EMUL=2*LMUL. Narrowing instructions have a source operand that has EEW=2*SEW and EMUL=2*LMUL but with a destination where EEW=SEW and EMUL=LMUL. Vector operands or results may occupy one or more vector registers depending on EMUL, but are always specified using the lowest-numbered vector register in the group. Using other than the lowest-numbered vector register to specify a vector register group is a reserved encoding. A vector register cannot be used to provide source operands with more than one EEW for a single instruction. A mask register source is considered to have EEW=1 for this constraint. An encoding that would result in the same vector register being read with two or more different EEWs, including when the vector register appears at different positions within two or more vector register groups, is reserved. In practice, there is no software benefit to reading the same register with different EEW in the same instruction, and this constraint reduces complexity for implementations that internally rearrange data dependent on EEW. A destination vector register group can overlap a source vector register group only if one of the following holds: The destination EEW equals the source EEW. The destination EEW is smaller than the source EEW and the overlap is in the lowest-numbered part of the source register group (e.g., when LMUL=1, vnsrl.wi v0, v0, 3 is legal, but a destination of v1 is not). The destination EEW is greater than the source EEW, the source EMUL is at least 1, and the overlap is in the highest-numbered part of the destination register group (e.g., when LMUL=8, vzext.vf4 v0, v6 is legal, but a source of v0, v2, or v4 is not). For the purpose of determining register group overlap constraints, mask elements have EEW=1. The overlap constraints are designed to support resumable exceptions in machines without register renaming. Any instruction encoding that violates the overlap constraints is reserved. When source and destination registers overlap and have different EEW, the instruction is mask- and tail-agnostic, regardless of the setting of the vta and vma bits in vtype. The largest vector register group used by an instruction can not be greater than 8 vector registers (i.e., EMUL≤8), and if a vector instruction would require greater than 8 vector registers in a group, the instruction encoding is reserved. For example, a widening operation that produces a widened vector register group result when LMUL=8 is reserved as this would imply a result EMUL=16. Widened scalar values, e.g., input and output to a widening reduction operation, are held in the first element of a vector register and have EMUL=1. Masking is supported on many vector instructions. Element operations that are masked off (inactive) never generate exceptions. The destination vector register elements corresponding to masked-off elements are handled with either a mask-undisturbed or mask-agnostic policy depending on the setting of the vma bit in vtype (Vector Tail Agnostic and Vector Mask Agnostic vta and vma). The mask value used to control execution of a masked vector instruction is always supplied by vector register v0. Masks are held in vector registers, rather than in a separate mask register file, to reduce total architectural state and to simplify the ISA. Future vector extensions may provide longer instruction encodings with space for a full mask register specifier. The destination vector register group for a masked vector instruction cannot overlap the source mask register (v0), unless the destination vector register is being written with a mask value (e.g., compares) or the scalar result of a reduction. These instruction encodings are reserved. This constraint supports restart with a non-zero vstart value. Other vector registers can be used to hold working mask values, and mask vector logical operations are provided to perform predicate calculations. As specified in Vector Tail Agnostic and Vector Mask Agnostic vta and vma, mask destination values are always treated as tail-agnostic, regardless of the setting of vta. Where available, masking is encoded in a single-bit vm field in the instruction (inst[25]). vm Description 0 vector result, only where v0.mask[i] = 1 1 unmasked Vector masking is represented in assembler code as another vector operand, with .t indicating that the operation occurs when v0.mask[i] is 1 (t for \"true\"). If no masking operand is specified, unmasked vector execution (vm=1) is assumed. vop.v* v1, v2, v3, v0.t # enabled where v0.mask[i]=1, vm=0 vop.v* v1, v2, v3 # unmasked vector operation, vm=1 Even though the current vector extensions only support one vector mask register v0 and only the true form of predication, the assembly syntax writes it out in full to be compatible with future extensions that might add a mask register specifier and support both true and complement mask values. The .t suffix on the masking operand also helps to visually encode the use of a mask. The .mask suffix is not part of the assembly syntax. We only append it in contexts where a mask vector is subscripted, e.g., v0.mask[i]. The destination element indices operated on during a vector instruction’s execution can be divided into three disjoint subsets. The prestart elements are those whose element index is less than the initial value in the vstart register. The prestart elements do not raise exceptions and do not update the destination vector register. The body elements are those whose element index is greater than or equal to the initial value in the vstart register, and less than the current vector length setting in vl. The body can be split into two disjoint subsets: The active elements during a vector instruction’s execution are the elements within the body and where the current mask is enabled at that element position. The active elements can raise exceptions and update the destination vector register group. The inactive elements are the elements within the body but where the current mask is disabled at that element position. The inactive elements do not raise exceptions and do not update any destination vector register group unless masked agnostic is specified (vtype.vma=1), in which case inactive elements may be overwritten with 1s. The tail elements during a vector instruction’s execution are the elements past the current vector length setting specified in vl. The tail elements do not raise exceptions, and do not update any destination vector register group unless tail agnostic is specified (vtype.vta=1), in which case tail elements may be overwritten with 1s, or with the result of the instruction in the case of mask-producing instructions except for mask loads. When LMUL < 1, the tail includes the elements past VLMAX that are held in the same vector register. for element index x prestart(x) = (0 <= x < vstart) body(x) = (vstart <= x < vl) tail(x) = (vl <= x < max(VLMAX,VLEN/SEW)) mask(x) = unmasked || v0.mask[x] == 1 active(x) = body(x) && mask(x) inactive(x) = body(x) && !mask(x) When vstart ≥ vl, there are no body elements, and no elements are updated in any destination vector register group, including that no tail elements are updated with agnostic values. As a consequence, when vl=0, no elements, including agnostic elements, are updated in the destination vector register group regardless of vstart. Instructions that write an x register or f register do so even when vstart ≥ vl, including when vl=0. Some instructions such as vslidedown and vrgather may read indices past vl or even VLMAX in source vector register groups. The general policy is to return the value 0 when the index is greater than VLMAX in the source vector register group. One of the common approaches to handling a large number of elements is \"stripmining\" where each iteration of a loop handles some number of elements, and the iterations continue until all elements have been processed. The RISC-V vector specification provides direct, portable support for this approach. The application specifies the total number of elements to be processed (the application vector length or AVL) as a candidate value for vl, and the hardware responds via a general-purpose register with the (frequently smaller) number of elements that the hardware will handle per iteration (stored in vl), based on the microarchitectural implementation and the vtype setting. A straightforward loop structure, shown in Example of stripmining and changes to SEW, depicts the ease with which the code keeps track of the remaining number of elements and the amount per iteration handled by hardware. A set of instructions is provided to allow rapid configuration of the values in vl and vtype to match application needs. The vset{i}vl{i} instructions set the vtype and vl CSRs based on their arguments, and write the new value of vl into rd. vsetvli rd, rs1, vtypei # rd = new vl, rs1 = AVL, vtypei = new vtype setting vsetivli rd, uimm, vtypei # rd = new vl, uimm = AVL, vtypei = new vtype setting vsetvl rd, rs1, rs2 # rd = new vl, rs1 = AVL, rs2 = new vtype value Formats for Vector Configuration Instructions under OP-V major opcode This diagram shows the layout for RV32 systems, whereas in general vill should be at bit XLEN-1. Table 7. vtype register layout Bits Name Description XLEN-1 vill Illegal value if set XLEN-2:8 0 Reserved if non-zero 7 vma Vector mask agnostic 6 vta Vector tail agnostic 5:3 vsew[2:0] Selected element width (SEW) setting 2:0 vlmul[2:0] Vector register group multiplier (LMUL) setting The new vtype value is encoded in the immediate fields of vsetvli and vsetivli, and in the rs2 register for vsetvl. Suggested assembler names used for vset\\{i}vli vtypei immediate e8 # SEW=8b e16 # SEW=16b e32 # SEW=32b e64 # SEW=64b mf8 # LMUL=1/8 mf4 # LMUL=1/4 mf2 # LMUL=1/2 m1 # LMUL=1 m2 # LMUL=2 m4 # LMUL=4 m8 # LMUL=8 Examples: vsetvli t0, a0, e8, m1, ta, ma # SEW= 8, LMUL=1 vsetvli t0, a0, e8, m2, ta, ma # SEW= 8, LMUL=2 vsetvli t0, a0, e32, mf2, ta, ma # SEW=32, LMUL=1/2 The vsetvl variant operates similarly to vsetvli except that it takes a vtype value from rs2 and can be used for context restore. If the vtype value is not supported by the implementation, then the vill bit is set in vtype, the remaining bits in vtype are set to zero, and the vl register is also set to zero. Earlier drafts required a trap when setting vtype to an illegal value. However, this would have added the first data-dependent trap on a CSR write to the ISA. Implementations could choose to trap when illegal values are written to vtype instead of setting vill, to allow emulation to support new configurations for forward-compatibility. The current scheme supports light-weight runtime interrogation of the supported vector unit configurations by checking if vill is clear for a given setting. A vtype value with vill set is treated as an unsupported configuration. Implementations must consider all bits of the vtype value to determine if the configuration is supported. An unsupported value in any location within the vtype value must result in vill being set. In particular, all XLEN bits of the register vtype argument to the vsetvl instruction must be checked. Implementations cannot ignore fields they do not implement. All bits must be checked to ensure that new code assuming unsupported vector features in vtype traps instead of executing incorrectly on an older implementation. The new vector length setting is based on AVL, which for vsetvli and vsetvl is encoded in the rs1 and rd fields as follows: Table 8. AVL used in vsetvli and vsetvl instructions rd rs1 AVL value Effect on vl - !x0 Value in x[rs1] Normal stripmining !x0 x0 ~0 Set vl to VLMAX x0 x0 Value in vl register Keep existing vl (of course, vtype may change) When rs1 is not x0, the AVL is an unsigned integer held in the x register specified by rs1, and the new vl value is also written to the x register specified by rd. When rs1=x0 but rd≠x0, the maximum unsigned integer value (~0) is used as the AVL, and the resulting VLMAX is written to vl and also to the x register specified by rd. When rs1=x0 and rd=x0, the instruction operates as if the current vector length in vl is used as the AVL, and the resulting value is written to vl, but not to a destination register. This form can only be used when VLMAX and hence vl is not actually changed by the new SEW/LMUL ratio. Use of the instruction with a new SEW/LMUL ratio that would result in a change of VLMAX is reserved. Use of the instruction is also reserved if vill was 1 beforehand. Implementations may set vill in either case. This last form of the instructions allows the vtype register to be changed while maintaining the current vl, provided VLMAX is not reduced. This design was chosen to ensure vl would always hold a legal value for current vtype setting. The current vl value can be read from the vl CSR. The vl value could be reduced by this instruction if the new SEW/LMUL ratio causes VLMAX to shrink, and so this case has been reserved as it is not clear this is a generally useful operation, and implementations can otherwise assume vl is not changed by this instruction to optimize their microarchitecture. For the vsetivli instruction, the AVL is encoded as a 5-bit zero-extended immediate (0—​31) in the rs1 field. The encoding of AVL for vsetivli is the same as for regular CSR immediate values. The vsetivli instruction provides more compact code when the dimensions of vectors are small and known to fit inside the vector registers, in which case there is no stripmining overhead. The vset{i}vl{i} instructions first set VLMAX according to their vtype argument, then set vl obeying the following constraints: vl = AVL if AVL ≤ VLMAX ceil(AVL / 2) ≤ vl ≤ VLMAX if AVL < (2 * VLMAX) vl = VLMAX if AVL ≥ (2 * VLMAX) Deterministic on any given implementation for same input AVL and VLMAX values These specific properties follow from the prior rules: vl = 0 if AVL = 0 vl > 0 if AVL > 0 vl ≤ VLMAX vl ≤ AVL a value read from vl when used as the AVL argument to vset{i}vl{i} results in the same value in vl, provided the resultant VLMAX equals the value of VLMAX at the time that vl was read The vl setting rules are designed to be sufficiently strict to preserve vl behavior across register spills and context swaps for AVL ≤ VLMAX, yet flexible enough to enable implementations to improve vector lane utilization for AVL > VLMAX. For example, this permits an implementation to set vl = ceil(AVL / 2) for VLMAX < AVL < 2*VLMAX in order to evenly distribute work over the last two iterations of a stripmine loop. Requirement 2 ensures that the first stripmine iteration of reduction loops uses the largest vector length of all iterations, even in the case of AVL < 2*VLMAX. This allows software to avoid needing to explicitly calculate a running maximum of vector lengths observed during a stripmined loop. Requirement 2 also allows an implementation to set vl to VLMAX for VLMAX < AVL < 2*VLMAX The SEW and LMUL settings can be changed dynamically to provide high throughput on mixed-width operations in a single loop. # Example: Load 16-bit values, widen multiply to 32b, shift 32b result # right by 3, store 32b values. # On entry: # a0 holds the total number of elements to process # a1 holds the address of the source array # a2 holds the address of the destination array loop: vsetvli a3, a0, e16, m4, ta, ma # vtype = 16-bit integer vectors; # also update a3 with vl (# of elements this iteration) vle16.v v4, (a1) # Get 16b vector slli t1, a3, 1 # Multiply # elements this iteration by 2 bytes/source element add a1, a1, t1 # Bump pointer vwmul.vx v8, v4, x10 # Widening multiply into 32b in <v8--v15> vsetvli x0, x0, e32, m8, ta, ma # Operate on 32b values vsrl.vi v8, v8, 3 vse32.v v8, (a2) # Store vector of 32b elements slli t1, a3, 2 # Multiply # elements this iteration by 4 bytes/destination element add a2, a2, t1 # Bump pointer sub a0, a0, a3 # Decrement count by vl bnez a0, loop # Any more? Vector loads and stores move values between vector registers and memory. Vector loads and stores can be masked, and they only access memory or raise exceptions for active elements. Masked vector loads do not update inactive elements in the destination vector register group, unless masked agnostic is specified (vtype.vma=1). All vector loads and stores may generate and accept a non-zero vstart value. Vector loads and stores are encoded within the scalar floating-point load and store major opcodes (LOAD-FP/STORE-FP). The vector load and store encodings repurpose a portion of the standard scalar floating-point load/store 12-bit immediate field to provide further vector instruction encoding, with bit 25 holding the standard vector mask bit (see Mask Encoding). Format for Vector Load Instructions under LOAD-FP major opcode Format for Vector Store Instructions under STORE-FP major opcode Field Description rs1[4:0] specifies x register holding base address rs2[4:0] specifies x register holding stride vs2[4:0] specifies v register holding address offsets vs3[4:0] specifies v register holding store data vd[4:0] specifies v register destination of load vm specifies whether vector masking is enabled (0 = mask enabled, 1 = mask disabled) width[2:0] specifies size of memory elements, and distinguishes from FP scalar mew extended memory element width. See Vector Load/Store Width Encoding mop[1:0] specifies memory addressing mode nf[2:0] specifies the number of fields in each segment, for segment load/stores lumop[4:0]/sumop[4:0] are additional fields encoding variants of unit-stride instructions Vector memory unit-stride and constant-stride operations directly encode EEW of the data to be transferred statically in the instruction to reduce the number of vtype changes when accessing memory in a mixed-width routine. Indexed operations use the explicit EEW encoding in the instruction to set the size of the indices used, and use SEW/LMUL to specify the data width. The vector extension supports unit-stride, strided, and indexed (scatter/gather) addressing modes. Vector load/store base registers and strides are taken from the GPR x registers. The base effective address for all vector accesses is given by the contents of the x register named in rs1. Vector unit-stride operations access elements stored contiguously in memory starting from the base effective address. Vector constant-strided operations access the first memory element at the base effective address, and then access subsequent elements at address increments given by the byte offset contained in the x register specified by rs2. Vector indexed operations add the contents of each element of the vector offset operand specified by vs2 to the base effective address to give the effective address of each element. The data vector register group has EEW=SEW, EMUL=LMUL, while the offset vector register group has EEW encoded in the instruction and EMUL=(EEW/SEW)*LMUL. The vector offset operand is treated as a vector of byte-address offsets. The indexed operations can also be used to access fields within a vector of objects, where the vs2 vector holds pointers to the base of the objects and the scalar x register holds the offset of the member field in each object. Supporting this case is why the indexed operations were not defined to scale the element indices by the data EEW. If the vector offset elements are narrower than XLEN, they are zero-extended to XLEN before adding to the base effective address. If the vector offset elements are wider than XLEN, the least-significant XLEN bits are used in the address calculation. An implementation must raise an illegal-instruction exception if the EEW is not supported for offset elements. A profile may place an upper limit on the maximum supported index EEW (e.g., only up to XLEN) smaller than ELEN. The vector addressing modes are encoded using the 2-bit mop[1:0] field. Table 9. encoding for loads mop [1:0] Description Opcodes 0 0 unit-stride VLE<EEW> 0 1 indexed-unordered VLUXEI<EEW> 1 0 strided VLSE<EEW> 1 1 indexed-ordered VLOXEI<EEW> Table 10. encoding for stores mop [1:0] Description Opcodes 0 0 unit-stride VSE<EEW> 0 1 indexed-unordered VSUXEI<EEW> 1 0 strided VSSE<EEW> 1 1 indexed-ordered VSOXEI<EEW> Vector unit-stride and constant-stride memory accesses do not guarantee ordering between individual element accesses. The vector indexed load and store memory operations have two forms, ordered and unordered. The indexed-ordered variants preserve element ordering on memory accesses. For unordered instructions (mop[1:0]!=11) there is no guarantee on element access order. If the accesses are to a strongly ordered IO region, the element accesses can be initiated in any order. To provide ordered vector accesses to a strongly ordered IO region, the ordered indexed instructions should be used. For implementations with precise vector traps, exceptions on indexed-unordered stores must also be precise. Additional unit-stride vector addressing modes are encoded using the 5-bit lumop and sumop fields in the unit-stride load and store instruction encodings respectively. Table 11. lumop lumop[4:0] Description 0 0 0 0 0 unit-stride load 0 1 0 0 0 unit-stride, whole register load 0 1 0 1 1 unit-stride, mask load, EEW=8 1 0 0 0 0 unit-stride fault-only-first x x x x x other encodings reserved Table 12. sumop sumop[4:0] Description 0 0 0 0 0 unit-stride store 0 1 0 0 0 unit-stride, whole register store 0 1 0 1 1 unit-stride, mask store, EEW=8 x x x x x other encodings reserved The nf[2:0] field encodes the number of fields in each segment. For regular vector loads and stores, nf=0, indicating that a single value is moved between a vector register group and memory at each element position. Larger values in the nf field are used to access multiple contiguous fields within a segment as described below in Vector Load/Store Segment Instructions. The nf[2:0] field also encodes the number of whole vector registers to transfer for the whole vector register load/store instructions. Vector loads and stores have an EEW encoded directly in the instruction. The corresponding EMUL is calculated as EMUL = (EEW/SEW)*LMUL. If the EMUL would be out of range (EMUL>8 or EMUL<1/8), the instruction encoding is reserved. The vector register groups must have legal register specifiers for the selected EMUL, otherwise the instruction encoding is reserved. Vector unit-stride and constant-stride use the EEW/EMUL encoded in the instruction for the data values, while vector indexed loads and stores use the EEW/EMUL encoded in the instruction for the index values and the SEW/LMUL encoded in vtype for the data values. Vector loads and stores are encoded using width values that are not claimed by the standard scalar floating-point loads and stores. Implementations must provide vector loads and stores with EEWs corresponding to all supported SEW settings. Vector load/store encodings for unsupported EEW widths must raise an illegal instruction exception. Table 13. Width encoding for vector loads and stores. mew width [2:0] Mem bits Data Reg bits Index bits Opcodes Standard scalar FP x 0 0 1 16 FLEN - FLH/FSH Standard scalar FP x 0 1 0 32 FLEN - FLW/FSW Standard scalar FP x 0 1 1 64 FLEN - FLD/FSD Standard scalar FP x 1 0 0 128 FLEN - FLQ/FSQ Vector 8b element 0 0 0 0 8 8 - VLxE8/VSxE8 Vector 16b element 0 1 0 1 16 16 - VLxE16/VSxE16 Vector 32b element 0 1 1 0 32 32 - VLxE32/VSxE32 Vector 64b element 0 1 1 1 64 64 - VLxE64/VSxE64 Vector 8b index 0 0 0 0 SEW SEW 8 VLxEI8/VSxEI8 Vector 16b index 0 1 0 1 SEW SEW 16 VLxEI16/VSxEI16 Vector 32b index 0 1 1 0 SEW SEW 32 VLxEI32/VSxEI32 Vector 64b index 0 1 1 1 SEW SEW 64 VLxEI64/VSxEI64 Reserved 1 X X X - - - Mem bits is the size of each element accessed in memory. Data reg bits is the size of each data element accessed in register. Index bits is the size of each index accessed in register. The mew bit (inst[28]) when set is expected to be used to encode expanded memory sizes of 128 bits and above, but these encodings are currently reserved. # Vector unit-stride loads and stores # vd destination, rs1 base address, vm is mask encoding (v0.t or <missing>) vle8.v vd, (rs1), vm # 8-bit unit-stride load vle16.v vd, (rs1), vm # 16-bit unit-stride load vle32.v vd, (rs1), vm # 32-bit unit-stride load vle64.v vd, (rs1), vm # 64-bit unit-stride load # vs3 store data, rs1 base address, vm is mask encoding (v0.t or <missing>) vse8.v vs3, (rs1), vm # 8-bit unit-stride store vse16.v vs3, (rs1), vm # 16-bit unit-stride store vse32.v vs3, (rs1), vm # 32-bit unit-stride store vse64.v vs3, (rs1), vm # 64-bit unit-stride store Additional unit-stride mask load and store instructions are provided to transfer mask values to/from memory. These operate similarly to unmasked byte loads or stores (EEW=8), except that the effective vector length is evl=ceil(vl/8) (i.e. EMUL=1), and the destination register is always written with a tail-agnostic policy. # Vector unit-stride mask load vlm.v vd, (rs1) # Load byte vector of length ceil(vl/8) # Vector unit-stride mask store vsm.v vs3, (rs1) # Store byte vector of length ceil(vl/8) vlm.v and vsm.v are encoded with the same width[2:0]=0 encoding as vle8.v and vse8.v, but are distinguished by different lumop and sumop encodings. Since vlm.v and vsm.v operate as byte loads and stores, vstart is in units of bytes for these instructions. vlm.v and vsm.v respect the vill field in vtype, as they depend on vtype indirectly through its constraints on vl. The previous assembler mnemonics vle1.v and vse1.v were confusing as length was handled differently for these instructions versus other element load/store instructions. To avoid software churn, these older assembly mnemonics are being retained as aliases. The primary motivation to provide mask load and store is to support machines that internally rearrange data to reduce cross-datapath wiring. However, these instructions also provide a convenient mechanism to use packed bit vectors in memory as mask values, and also reduce the cost of mask spill/fill by reducing need to change vl. # Vector strided loads and stores # vd destination, rs1 base address, rs2 byte stride vlse8.v vd, (rs1), rs2, vm # 8-bit strided load vlse16.v vd, (rs1), rs2, vm # 16-bit strided load vlse32.v vd, (rs1), rs2, vm # 32-bit strided load vlse64.v vd, (rs1), rs2, vm # 64-bit strided load # vs3 store data, rs1 base address, rs2 byte stride vsse8.v vs3, (rs1), rs2, vm # 8-bit strided store vsse16.v vs3, (rs1), rs2, vm # 16-bit strided store vsse32.v vs3, (rs1), rs2, vm # 32-bit strided store vsse64.v vs3, (rs1), rs2, vm # 64-bit strided store Negative and zero strides are supported. Element accesses within a strided instruction are unordered with respect to each other. When rs2=x0, then an implementation is allowed, but not required, to perform fewer memory operations than the number of active elements, and may perform different numbers of memory operations across different dynamic executions of the same static instruction. Compilers must be aware to not use the x0 form for rs2 when the immediate stride is 0 if the intent is to require all memory accesses are performed. When rs2!=x0 and the value of x[rs2]=0, the implementation must perform one memory access for each active element (but these accesses will not be ordered). As with other architectural mandates, implementations must appear to perform each memory access. Microarchitectures are free to optimize away accesses that would not be observed by another agent, for example, in idempotent memory regions obeying RVWMO. For non-idempotent memory regions, where by definition each access can be observed by a device, the optimization would not be possible. When repeating ordered vector accesses to the same memory address are required, then an ordered indexed operation can be used. # Vector indexed loads and stores # Vector indexed-unordered load instructions # vd destination, rs1 base address, vs2 byte offsets vluxei8.v vd, (rs1), vs2, vm # unordered 8-bit indexed load of SEW data vluxei16.v vd, (rs1), vs2, vm # unordered 16-bit indexed load of SEW data vluxei32.v vd, (rs1), vs2, vm # unordered 32-bit indexed load of SEW data vluxei64.v vd, (rs1), vs2, vm # unordered 64-bit indexed load of SEW data # Vector indexed-ordered load instructions # vd destination, rs1 base address, vs2 byte offsets vloxei8.v vd, (rs1), vs2, vm # ordered 8-bit indexed load of SEW data vloxei16.v vd, (rs1), vs2, vm # ordered 16-bit indexed load of SEW data vloxei32.v vd, (rs1), vs2, vm # ordered 32-bit indexed load of SEW data vloxei64.v vd, (rs1), vs2, vm # ordered 64-bit indexed load of SEW data # Vector indexed-unordered store instructions # vs3 store data, rs1 base address, vs2 byte offsets vsuxei8.v vs3, (rs1), vs2, vm # unordered 8-bit indexed store of SEW data vsuxei16.v vs3, (rs1), vs2, vm # unordered 16-bit indexed store of SEW data vsuxei32.v vs3, (rs1), vs2, vm # unordered 32-bit indexed store of SEW data vsuxei64.v vs3, (rs1), vs2, vm # unordered 64-bit indexed store of SEW data # Vector indexed-ordered store instructions # vs3 store data, rs1 base address, vs2 byte offsets vsoxei8.v vs3, (rs1), vs2, vm # ordered 8-bit indexed store of SEW data vsoxei16.v vs3, (rs1), vs2, vm # ordered 16-bit indexed store of SEW data vsoxei32.v vs3, (rs1), vs2, vm # ordered 32-bit indexed store of SEW data vsoxei64.v vs3, (rs1), vs2, vm # ordered 64-bit indexed store of SEW data The assembler syntax for indexed loads and stores uses eix instead of ex to indicate the statically encoded EEW is of the index not the data. The indexed operations mnemonics have a \"U\" or \"O\" to distinguish between unordered and ordered, while the other vector addressing modes have no character. While this is perhaps a little less consistent, this approach minimizes disruption to existing software, as VSXEI previously meant \"ordered\" - and the opcode can be retained as an alias during transition to help reduce software churn. The unit-stride fault-only-first load instructions are used to vectorize loops with data-dependent exit conditions (\"while\" loops). These instructions execute as a regular load except that they will only take a trap caused by a synchronous exception on element 0. If element 0 raises an exception, vl is not modified, and the trap is taken. If an element > 0 raises an exception, the corresponding trap is not taken, and the vector length vl is reduced to the index of the element that would have raised an exception. Load instructions may overwrite active destination vector register group elements past the element index at which the trap is reported. Similarly, fault-only-first load instructions may update active destination elements past the element that causes trimming of the vector length (but not past the original vector length). The values of these spurious updates do not have to correspond to the values in memory at the addressed memory locations. Non-idempotent memory locations can only be accessed when it is known the corresponding element load operation will not be restarted due to a trap or vector-length trimming. # Vector unit-stride fault-only-first loads # vd destination, rs1 base address, vm is mask encoding (v0.t or <missing>) vle8ff.v vd, (rs1), vm # 8-bit unit-stride fault-only-first load vle16ff.v vd, (rs1), vm # 16-bit unit-stride fault-only-first load vle32ff.v vd, (rs1), vm # 32-bit unit-stride fault-only-first load vle64ff.v vd, (rs1), vm # 64-bit unit-stride fault-only-first load strlen example using unit-stride fault-only-first instruction # size_t strlen(const char *str) # a0 holds *str strlen: mv a3, a0 # Save start loop: vsetvli a1, x0, e8, m8, ta, ma # Vector of bytes of maximum length vle8ff.v v8, (a3) # Load bytes csrr a1, vl # Get bytes read vmseq.vi v0, v8, 0 # Set v0[i] where v8[i] = 0 vfirst.m a2, v0 # Find first set bit add a3, a3, a1 # Bump pointer bltz a2, loop # Not found? add a0, a0, a1 # Sum start + bump add a3, a3, a2 # Add index sub a0, a3, a0 # Subtract start address+bump ret There is a security concern with fault-on-first loads, as they can be used to probe for valid effective addresses. The unit-stride versions only allow probing a region immediately contiguous to a known region, and so reduce the security impact when used in unprivileged code. However, code running in S-mode can establish arbitrary page translations that allow probing of random guest physical addresses provided by a hypervisor. Strided and scatter/gather fault-only-first instructions are not provided due to lack of encoding space, but they can also represent a larger security hole, allowing even unprivileged software to easily check multiple random pages for accessibility without experiencing a trap. This standard does not address possible security mitigations for fault-only-first instructions. Even when an exception is not raised, implementations are permitted to process fewer than vl elements and reduce vl accordingly, but if vstart=0 and vl>0, then at least one element must be processed. When the fault-only-first instruction takes a trap due to an interrupt, implementations should not reduce vl and should instead set a vstart value. When the fault-only-first instruction would trigger a debug data-watchpoint trap on an element after the first, implementations should not reduce vl but instead should trigger the debug trap as otherwise the event might be lost. The vector load/store segment instructions move multiple contiguous fields in memory to and from consecutively numbered vector registers. The name \"segment\" reflects that the items moved are subarrays with homogeneous elements. These operations can be used to transpose arrays between memory and registers, and can support operations on \"array-of-structures\" datatypes by unpacking each field in a structure into a separate vector register. The three-bit nf field in the vector instruction encoding is an unsigned integer that contains one less than the number of fields per segment, NFIELDS. Table 14. NFIELDS Encoding nf[2:0] NFIELDS 0 0 0 1 0 0 1 2 0 1 0 3 0 1 1 4 1 0 0 5 1 0 1 6 1 1 0 7 1 1 1 8 The EMUL setting must be such that EMUL * NFIELDS ≤ 8, otherwise the instruction encoding is reserved. The product ceil(EMUL) * NFIELDS represents the number of underlying vector registers that will be touched by a segmented load or store instruction. This constraint makes this total no larger than 1/4 of the architectural register file, and the same as for regular operations with EMUL=8. Each field will be held in successively numbered vector register groups. When EMUL>1, each field will occupy a vector register group held in multiple successively numbered vector registers, and the vector register group for each field must follow the usual vector register alignment constraints (e.g., when EMUL=2 and NFIELDS=4, each field’s vector register group must start at an even vector register, but does not have to start at a multiple of 8 vector register number). If the vector register numbers accessed by the segment load or store would increment past 31, then the instruction encoding is reserved. This constraint is to help allow for forward-compatibility with a possible future longer instruction encoding that has more addressable vector registers. The vl register gives the number of segments to move, which is equal to the number of elements transferred to each vector register group. Masking is also applied at the level of whole segments. For segment loads and stores, the individual memory accesses used to access fields within each segment are unordered with respect to each other even for ordered indexed segment loads and stores. The vstart value is in units of whole segments. If a trap occurs during access to a segment, it is implementation-defined whether a subset of the faulting segment’s accesses are performed before the trap is taken. The vector unit-stride load and store segment instructions move packed contiguous segments into multiple destination vector register groups. Where the segments hold structures with heterogeneous-sized fields, software can later unpack individual structure fields using additional instructions after the segment load brings data into the vector registers. The assembler prefixes vlseg/vsseg are used for unit-stride segment loads and stores respectively. # Format # In this syntax, <nf> equals NFIELDS and is an integer in the range [2, 8]. vlseg<nf>e<eew>.v vd, (rs1), vm # Unit-stride segment load template vsseg<nf>e<eew>.v vs3, (rs1), vm # Unit-stride segment store template # Examples vlseg8e8.v vd, (rs1), vm # Load eight vector registers with eight byte fields. vsseg3e32.v vs3, (rs1), vm # Store packed vector of 3*4-byte segments from vs3,vs3+1,vs3+2 to memory For loads, the vd register will hold the first field loaded from the segment. For stores, the vs3 register is read to provide the first field to be stored to each segment. # Example 1 # Memory structure holds packed RGB pixels (24-bit data structure, 8bpp) vsetvli a1, t0, e8, m1, ta, ma vlseg3e8.v v8, (a0), vm # v8 holds the red pixels # v9 holds the green pixels # v10 holds the blue pixels # Example 2 # Memory structure holds complex values, 32b for real and 32b for imaginary vsetvli a1, t0, e32, m1, ta, ma vlseg2e32.v v8, (a0), vm # v8 holds real # v9 holds imaginary There are also fault-only-first versions of the unit-stride instructions. # Template for vector fault-only-first unit-stride segment loads. vlseg<nf>e<eew>ff.v vd, (rs1), vm # Unit-stride fault-only-first segment loads For fault-only-first segment loads, if an exception is detected partway through accessing the zeroth segment, the trap is taken. If an exception is detected partway through accessing a subsequent segment, vl is reduced to the index of that segment. In both cases, it is implementation-defined whether a subset of the segment is loaded. These instructions may overwrite destination vector register group elements past the point at which a trap is reported or past the point at which vector length is trimmed. Vector strided segment loads and stores move contiguous segments where each segment is separated by the byte-stride offset given in the rs2 GPR argument. Negative and zero strides are supported. # Format vlsseg<nf>e<eew>.v vd, (rs1), rs2, vm # Strided segment loads vssseg<nf>e<eew>.v vs3, (rs1), rs2, vm # Strided segment stores # Examples vsetvli a1, t0, e8, m1, ta, ma vlsseg3e8.v v4, (x5), x6 # Load bytes at addresses x5+i*x6 into v4[i], # and bytes at addresses x5+i*x6+1 into v5[i], # and bytes at addresses x5+i*x6+2 into v6[i]. # Examples vsetvli a1, t0, e32, m1, ta, ma vssseg2e32.v v2, (x5), x6 # Store words from v2[i] to address x5+i*x6 # and words from v3[i] to address x5+i*x6+4 Accesses to the fields within each segment can occur in any order, including the case where the byte stride is such that segments overlap in memory. Vector indexed segment loads and stores move contiguous segments where each segment is located at an address given by adding the scalar base address in the rs1 field to byte offsets in vector register vs2. Both ordered and unordered forms are provided, where the ordered forms access segments in element order. However, even for the ordered form, accesses to the fields within an individual segment are not ordered with respect to each other. The data vector register group has EEW=SEW, EMUL=LMUL, while the index vector register group has EEW encoded in the instruction with EMUL=(EEW/SEW)*LMUL. The EMUL * NFIELDS ≤ 8 constraint applies to the data vector register group. # Format vluxseg<nf>ei<eew>.v vd, (rs1), vs2, vm # Indexed-unordered segment loads vloxseg<nf>ei<eew>.v vd, (rs1), vs2, vm # Indexed-ordered segment loads vsuxseg<nf>ei<eew>.v vs3, (rs1), vs2, vm # Indexed-unordered segment stores vsoxseg<nf>ei<eew>.v vs3, (rs1), vs2, vm # Indexed-ordered segment stores # Examples vsetvli a1, t0, e8, m1, ta, ma vluxseg3ei8.v v4, (x5), v3 # Load bytes at addresses x5+v3[i] into v4[i], # and bytes at addresses x5+v3[i]+1 into v5[i], # and bytes at addresses x5+v3[i]+2 into v6[i]. # Examples vsetvli a1, t0, e32, m1, ta, ma vsuxseg2ei32.v v2, (x5), v5 # Store words from v2[i] to address x5+v5[i] # and words from v3[i] to address x5+v5[i]+4 For vector indexed segment loads, the destination vector register groups cannot overlap the source vector register group (specified by vs2), else the instruction encoding is reserved. This constraint supports restart of indexed segment loads that raise exceptions partway through loading a structure. Format for Vector Load Whole Register Instructions under LOAD-FP major opcode Format for Vector Store Whole Register Instructions under STORE-FP major opcode These instructions load and store whole vector register groups. These instructions are intended to be used to save and restore vector registers when the type or length of the current contents of the vector register is not known, or where modifying vl and vtype would be costly. Examples include compiler register spills, vector function calls where values are passed in vector registers, interrupt handlers, and OS context switches. Software can determine the number of bytes transferred by reading the vlenb register. The load instructions have an EEW encoded in the mew and width fields following the pattern of regular unit-stride loads. Because in-register byte layouts are identical to in-memory byte layouts, the same data is written to the destination register group regardless of EEW. Hence, it would have sufficed to provide only EEW=8 variants. The full set of EEW variants is provided so that the encoded EEW can be used as a hint to indicate the destination register group will next be accessed with this EEW, which aids implementations that rearrange data internally. The vector whole register store instructions are encoded similar to unmasked unit-stride store of elements with EEW=8. The nf field encodes how many vector registers to load and store using the NFIELDS encoding (Figure NFIELDS Encoding). The encoded number of registers must be a power of 2 and the vector register numbers must be aligned as with a vector register group, otherwise the instruction encoding is reserved. NFIELDS indicates the number of vector registers to transfer, numbered successively after the base. Only NFIELDS values of 1, 2, 4, 8 are supported, with other values reserved. When multiple registers are transferred, the lowest-numbered vector register is held in the lowest-numbered memory addresses and successive vector register numbers are placed contiguously in memory. The instructions operate with an effective vector length, evl=NFIELDS*VLEN/EEW, regardless of current settings in vtype and vl. The usual property that no elements are written if vstart ≥ vl does not apply to these instructions. Instead, no elements are written if vstart ≥ evl. The instructions operate similarly to unmasked unit-stride load and store instructions, with the base address passed in the scalar x register specified by rs1. Implementations are allowed to raise a misaligned address exception on whole register loads and stores if the base address is not naturally aligned to the larger of the size of the encoded EEW in bytes (EEW/8) or the implementation’s smallest supported SEW size in bytes (SEWMIN/8). Allowing misaligned exceptions to be raised based on non-alignment to the encoded EEW simplifies the implementation of these instructions. Some subset implementations might not support smaller SEW widths, so are allowed to report misaligned exceptions for the smallest supported SEW even if larger than encoded EEW. An extreme non-standard implementation might have SEWMIN>XLEN for example. Software environments can mandate the minimum alignment requirements to support an ABI. # Format of whole register load and store instructions. vl1r.v v3, (a0) # Pseudoinstruction equal to vl1re8.v vl1re8.v v3, (a0) # Load v3 with VLEN/8 bytes held at address in a0 vl1re16.v v3, (a0) # Load v3 with VLEN/16 halfwords held at address in a0 vl1re32.v v3, (a0) # Load v3 with VLEN/32 words held at address in a0 vl1re64.v v3, (a0) # Load v3 with VLEN/64 doublewords held at address in a0 vl2r.v v2, (a0) # Pseudoinstruction equal to vl2re8.v vl2re8.v v2, (a0) # Load v2-v3 with 2*VLEN/8 bytes from address in a0 vl2re16.v v2, (a0) # Load v2-v3 with 2*VLEN/16 halfwords held at address in a0 vl2re32.v v2, (a0) # Load v2-v3 with 2*VLEN/32 words held at address in a0 vl2re64.v v2, (a0) # Load v2-v3 with 2*VLEN/64 doublewords held at address in a0 vl4r.v v4, (a0) # Pseudoinstruction equal to vl4re8.v vl4re8.v v4, (a0) # Load v4-v7 with 4*VLEN/8 bytes from address in a0 vl4re16.v v4, (a0) vl4re32.v v4, (a0) vl4re64.v v4, (a0) vl8r.v v8, (a0) # Pseudoinstruction equal to vl8re8.v vl8re8.v v8, (a0) # Load v8-v15 with 8*VLEN/8 bytes from address in a0 vl8re16.v v8, (a0) vl8re32.v v8, (a0) vl8re64.v v8, (a0) vs1r.v v3, (a1) # Store v3 to address in a1 vs2r.v v2, (a1) # Store v2-v3 to address in a1 vs4r.v v4, (a1) # Store v4-v7 to address in a1 vs8r.v v8, (a1) # Store v8-v15 to address in a1 Implementations should raise illegal-instruction exceptions on vl<nf>r instructions for EEW values that are not supported. We have considered adding a whole register mask load instruction (vl1rm.v) but have decided to omit from initial extension. The primary purpose would be to inform the microarchitecture that the data will be used as a mask. The same effect can be achieved with the following code sequence, whose cost is at most four instructions. Of these, the first could likely be removed as vl is often already in a scalar register, and the last might already be present if the following vector instruction needs a new SEW/LMUL. So, in best case only two instructions (of which only one performs vector operations) are needed to synthesize the effect of the dedicated instruction: csrr t0, vl # Save current vl (potentially not needed) vsetvli t1, x0, e8, m8, ta, ma # Maximum VLMAX vlm.v v0, (a0) # Load mask register vsetvli x0, t0, <new type> # Restore vl (potentially already present) If an element accessed by a vector memory instruction is not naturally aligned to the size of the element, either the element is transferred successfully or an address-misaligned exception is raised on that element. Support for misaligned vector memory accesses is independent of an implementation’s support for misaligned scalar memory accesses. An implementation may have neither, one, or both scalar and vector memory accesses support some or all misaligned accesses in hardware. A separate PMA should be defined to determine if vector misaligned accesses are supported in the associated address range. Vector misaligned memory accesses follow the same rules for atomicity as scalar misaligned memory accesses. Vector memory instructions appear to execute in program order on the local hart. Vector memory instructions follow RVWMO at the instruction level. If the Ztso extension is implemented, vector memory instructions additionally follow RVTSO at the instruction level. Except for vector indexed-ordered loads and stores, element operations are unordered within the instruction. Vector indexed-ordered loads and stores read and write elements from/to memory in element order respectively, obeying RVWMO at the element level. Ztso only imposes RVTSO at the instruction level; intra-instruction ordering follows RVWMO regardless of whether Ztso is implemented. More formal definitions required. Instructions affected by the vector length register vl have a control dependency on vl, rather than a data dependency. Similarly, masked vector instructions have a control dependency on the source mask register, rather than a data dependency. Treating the vector length and mask as control rather than data typically matches the semantics of the corresponding scalar code, where branch instructions ordinarily would have been used. Treating the mask as control allows masked vector load instructions to access memory before the mask value is known, without the need for a misspeculation-recovery mechanism. The vector arithmetic instructions use a new major opcode (OP-V = 10101112) which neighbors OP-FP. The three-bit funct3 field is used to define sub-categories of vector instructions. Formats for Vector Arithmetic Instructions under OP-V major opcode The funct3 field encodes the operand type and source locations. Table 15. funct3 funct3[2:0] Category Operands Type of scalar operand 0 0 0 OPIVV vector-vector N/A 0 0 1 OPFVV vector-vector N/A 0 1 0 OPMVV vector-vector N/A 0 1 1 OPIVI vector-immediate imm[4:0] 1 0 0 OPIVX vector-scalar GPR x register rs1 1 0 1 OPFVF vector-scalar FP f register rs1 1 1 0 OPMVX vector-scalar GPR x register rs1 1 1 1 OPCFG scalars-imms GPR x register rs1 & rs2/imm Integer operations are performed using unsigned or two’s-complement signed integer arithmetic depending on the opcode. In this discussion, fixed-point operations are considered to be integer operations. All standard vector floating-point arithmetic operations follow the IEEE-754/2008 standard. All vector floating-point operations use the dynamic rounding mode in the frm register. Use of the frm field when it contains an invalid rounding mode by any vector floating-point instruction—​even those that do not depend on the rounding mode, or when vl=0, or when vstart ≥ vl--is reserved. All vector floating-point code will rely on a valid value in frm. Implementations can make all vector FP instructions report exceptions when the rounding mode is invalid to simplify control logic. Vector-vector operations take two vectors of operands from vector register groups specified by vs2 and vs1 respectively. Vector-scalar operations can have three possible forms. In all three forms, the vector register group operand is specified by vs2. The second scalar source operand comes from one of three alternative sources: For integer operations, the scalar can be a 5-bit immediate, imm[4:0], encoded in the rs1 field. The value is sign-extended to SEW bits, unless otherwise specified. For integer operations, the scalar can be taken from the scalar x register specified by rs1. If XLEN>SEW, the least-significant SEW bits of the x register are used, unless otherwise specified. If XLEN<SEW, the value from the x register is sign-extended to SEW bits. For floating-point operations, the scalar can be taken from a scalar f register. If FLEN > SEW, the value in the f registers is checked for a valid NaN-boxed value, in which case the least-significant SEW bits of the f register are used, else the canonical NaN value is used. Vector instructions where any floating-point vector operand’s EEW is not a supported floating-point type width (which includes when FLEN < SEW) are reserved. Some instructions zero-extend the 5-bit immediate, and denote this by naming the immediate uimm in the assembly syntax. When adding a vector extension to the Zfinx/Zdinx/Zhinx extensions, floating-point scalar arguments are taken from the x registers. NaN-boxing is not supported in these extensions, and so the vector floating-point scalar value is produced using the same rules as for an integer scalar operand (i.e., when XLEN > SEW use the lowest SEW bits, when XLEN < SEW use the sign-extended value). Vector arithmetic instructions are masked under control of the vm field. # Assembly syntax pattern for vector binary arithmetic instructions # Operations returning vector results, masked by vm (v0.t, <nothing>) vop.vv vd, vs2, vs1, vm # integer vector-vector vd[i] = vs2[i] op vs1[i] vop.vx vd, vs2, rs1, vm # integer vector-scalar vd[i] = vs2[i] op x[rs1] vop.vi vd, vs2, imm, vm # integer vector-immediate vd[i] = vs2[i] op imm vfop.vv vd, vs2, vs1, vm # FP vector-vector operation vd[i] = vs2[i] fop vs1[i] vfop.vf vd, vs2, rs1, vm # FP vector-scalar operation vd[i] = vs2[i] fop f[rs1] In the encoding, vs2 is the first operand, while rs1/imm is the second operand. This is the opposite to the standard scalar ordering. This arrangement retains the existing encoding conventions that instructions that read only one scalar register, read it from rs1, and that 5-bit immediates are sourced from the rs1 field. # Assembly syntax pattern for vector ternary arithmetic instructions (multiply-add) # Integer operations overwriting sum input vop.vv vd, vs1, vs2, vm # vd[i] = vs1[i] * vs2[i] + vd[i] vop.vx vd, rs1, vs2, vm # vd[i] = x[rs1] * vs2[i] + vd[i] # Integer operations overwriting product input vop.vv vd, vs1, vs2, vm # vd[i] = vs1[i] * vd[i] + vs2[i] vop.vx vd, rs1, vs2, vm # vd[i] = x[rs1] * vd[i] + vs2[i] # Floating-point operations overwriting sum input vfop.vv vd, vs1, vs2, vm # vd[i] = vs1[i] * vs2[i] + vd[i] vfop.vf vd, rs1, vs2, vm # vd[i] = f[rs1] * vs2[i] + vd[i] # Floating-point operations overwriting product input vfop.vv vd, vs1, vs2, vm # vd[i] = vs1[i] * vd[i] + vs2[i] vfop.vf vd, rs1, vs2, vm # vd[i] = f[rs1] * vd[i] + vs2[i] For ternary multiply-add operations, the assembler syntax always places the destination vector register first, followed by either rs1 or vs1, then vs2. This ordering provides a more natural reading of the assembler for these ternary operations, as the multiply operands are always next to each other. A few vector arithmetic instructions are defined to be widening operations where the destination vector register group has EEW=2*SEW and EMUL=2*LMUL. These are generally given a vw* prefix on the opcode, or vfw* for vector floating-point instructions. The first vector register group operand can be either single or double-width. # Assembly syntax pattern for vector widening arithmetic instructions # Double-width result, two single-width sources: 2*SEW = SEW op SEW vwop.vv vd, vs2, vs1, vm # integer vector-vector vd[i] = vs2[i] op vs1[i] vwop.vx vd, vs2, rs1, vm # integer vector-scalar vd[i] = vs2[i] op x[rs1] # Double-width result, first source double-width, second source single-width: 2*SEW = 2*SEW op SEW vwop.wv vd, vs2, vs1, vm # integer vector-vector vd[i] = vs2[i] op vs1[i] vwop.wx vd, vs2, rs1, vm # integer vector-scalar vd[i] = vs2[i] op x[rs1] Originally, a w suffix was used on opcode, but this could be confused with the use of a w suffix to mean word-sized operations in doubleword integers, so the w was moved to prefix. The floating-point widening operations were changed to vfw* from vwf* to be more consistent with any scalar widening floating-point operations that will be written as fw*. Widening instruction encodings must follow the constraints in Vector Operands. A few instructions are provided to convert double-width source vectors into single-width destination vectors. These instructions convert a vector register group specified by vs2 with EEW/EMUL=2*SEW/2*LMUL to a vector register group with the current SEW/LMUL setting. Where there is a second source vector register group (specified by vs1), this has the same (narrower) width as the result (i.e., EEW=SEW). An alternative design decision would have been to treat SEW/LMUL as defining the size of the source vector register group. The choice here is motivated by the belief the chosen approach will require fewer vtype changes. Compare operations that set a mask register are also implicitly a narrowing operation. A vn* prefix on the opcode is used to distinguish these instructions in the assembler, or a vfn* prefix for narrowing floating-point opcodes. The double-width source vector register group is signified by a w in the source operand suffix (e.g., vnsra.wv) Assembly syntax pattern for vector narrowing arithmetic instructions # Single-width result vd, double-width source vs2, single-width source vs1/rs1 # SEW = 2*SEW op SEW vnop.wv vd, vs2, vs1, vm # integer vector-vector vd[i] = vs2[i] op vs1[i] vnop.wx vd, vs2, rs1, vm # integer vector-scalar vd[i] = vs2[i] op x[rs1] Narrowing instruction encodings must follow the constraints in Vector Operands. A set of vector integer arithmetic instructions is provided. Unless otherwise stated, integer operations wrap around on overflow. Vector integer add and subtract are provided. Reverse-subtract instructions are also provided for the vector-scalar forms. # Integer adds. vadd.vv vd, vs2, vs1, vm # Vector-vector vadd.vx vd, vs2, rs1, vm # vector-scalar vadd.vi vd, vs2, imm, vm # vector-immediate # Integer subtract vsub.vv vd, vs2, vs1, vm # Vector-vector vsub.vx vd, vs2, rs1, vm # vector-scalar # Integer reverse subtract vrsub.vx vd, vs2, rs1, vm # vd[i] = x[rs1] - vs2[i] vrsub.vi vd, vs2, imm, vm # vd[i] = imm - vs2[i] A vector of integer values can be negated using a reverse-subtract instruction with a scalar operand of x0. An assembly pseudoinstruction vneg.v vd,vs = vrsub.vx vd,vs,x0 is provided. The widening add/subtract instructions are provided in both signed and unsigned variants, depending on whether the narrower source operands are first sign- or zero-extended before forming the double-width sum. # Widening unsigned integer add/subtract, 2*SEW = SEW +/- SEW vwaddu.vv vd, vs2, vs1, vm # vector-vector vwaddu.vx vd, vs2, rs1, vm # vector-scalar vwsubu.vv vd, vs2, vs1, vm # vector-vector vwsubu.vx vd, vs2, rs1, vm # vector-scalar # Widening signed integer add/subtract, 2*SEW = SEW +/- SEW vwadd.vv vd, vs2, vs1, vm # vector-vector vwadd.vx vd, vs2, rs1, vm # vector-scalar vwsub.vv vd, vs2, vs1, vm # vector-vector vwsub.vx vd, vs2, rs1, vm # vector-scalar # Widening unsigned integer add/subtract, 2*SEW = 2*SEW +/- SEW vwaddu.wv vd, vs2, vs1, vm # vector-vector vwaddu.wx vd, vs2, rs1, vm # vector-scalar vwsubu.wv vd, vs2, vs1, vm # vector-vector vwsubu.wx vd, vs2, rs1, vm # vector-scalar # Widening signed integer add/subtract, 2*SEW = 2*SEW +/- SEW vwadd.wv vd, vs2, vs1, vm # vector-vector vwadd.wx vd, vs2, rs1, vm # vector-scalar vwsub.wv vd, vs2, vs1, vm # vector-vector vwsub.wx vd, vs2, rs1, vm # vector-scalar An integer value can be doubled in width using the widening add instructions with a scalar operand of x0. Assembly pseudoinstructions vwcvt.x.x.v vd,vs,vm = vwadd.vx vd,vs,x0,vm and vwcvtu.x.x.v vd,vs,vm = vwaddu.vx vd,vs,x0,vm are provided. The vector integer extension instructions zero- or sign-extend a source vector integer operand with EEW less than SEW to fill SEW-sized elements in the destination. The EEW of the source is 1/2, 1/4, or 1/8 of SEW, while EMUL of the source is (EEW/SEW)*LMUL. The destination has EEW equal to SEW and EMUL equal to LMUL. vzext.vf2 vd, vs2, vm # Zero-extend SEW/2 source to SEW destination vsext.vf2 vd, vs2, vm # Sign-extend SEW/2 source to SEW destination vzext.vf4 vd, vs2, vm # Zero-extend SEW/4 source to SEW destination vsext.vf4 vd, vs2, vm # Sign-extend SEW/4 source to SEW destination vzext.vf8 vd, vs2, vm # Zero-extend SEW/8 source to SEW destination vsext.vf8 vd, vs2, vm # Sign-extend SEW/8 source to SEW destination If the source EEW is not a supported width, or source EMUL would be below the minimum legal LMUL, the instruction encoding is reserved. Standard vector load instructions access memory values that are the same size as the destination register elements. Some application code needs to operate on a range of operand widths in a wider element, for example, loading a byte from memory and adding to an eight-byte element. To avoid having to provide the cross-product of the number of vector load instructions by the number of data types (byte, word, halfword, and also signed/unsigned variants), we instead add explicit extension instructions that can be used if an appropriate widening arithmetic instruction is not available. To support multi-word integer arithmetic, instructions that operate on a carry bit are provided. For each operation (add or subtract), two instructions are provided: one to provide the result (SEW width), and the second to generate the carry output (single bit encoded as a mask boolean). The carry inputs and outputs are represented using the mask register layout as described in Mask Register Layout. Due to encoding constraints, the carry input must come from the implicit v0 register, but carry outputs can be written to any vector register that respects the source/destination overlap restrictions. vadc and vsbc add or subtract the source operands and the carry-in or borrow-in, and write the result to vector register vd. These instructions are encoded as masked instructions (vm=0), but they operate on and write back all body elements. Encodings corresponding to the unmasked versions (vm=1) are reserved. vmadc and vmsbc add or subtract the source operands, optionally add the carry-in or subtract the borrow-in if masked (vm=0), and write the resulting carry-out or borrow-out back to mask register vd. If unmasked (vm=1), there is no carry-in or borrow-in. These instructions operate on and write back all body elements, even if masked. Because these instructions produce a mask value, they always operate with a tail-agnostic policy. # Produce sum with carry. # vd[i] = vs2[i] + vs1[i] + v0.mask[i] vadc.vvm vd, vs2, vs1, v0 # Vector-vector # vd[i] = vs2[i] + x[rs1] + v0.mask[i] vadc.vxm vd, vs2, rs1, v0 # Vector-scalar # vd[i] = vs2[i] + imm + v0.mask[i] vadc.vim vd, vs2, imm, v0 # Vector-immediate # Produce carry out in mask register format # vd.mask[i] = carry_out(vs2[i] + vs1[i] + v0.mask[i]) vmadc.vvm vd, vs2, vs1, v0 # Vector-vector # vd.mask[i] = carry_out(vs2[i] + x[rs1] + v0.mask[i]) vmadc.vxm vd, vs2, rs1, v0 # Vector-scalar # vd.mask[i] = carry_out(vs2[i] + imm + v0.mask[i]) vmadc.vim vd, vs2, imm, v0 # Vector-immediate # vd.mask[i] = carry_out(vs2[i] + vs1[i]) vmadc.vv vd, vs2, vs1 # Vector-vector, no carry-in # vd.mask[i] = carry_out(vs2[i] + x[rs1]) vmadc.vx vd, vs2, rs1 # Vector-scalar, no carry-in # vd.mask[i] = carry_out(vs2[i] + imm) vmadc.vi vd, vs2, imm # Vector-immediate, no carry-in Because implementing a carry propagation requires executing two instructions with unchanged inputs, destructive accumulations will require an additional move to obtain correct results. # Example multi-word arithmetic sequence, accumulating into v4 vmadc.vvm v1, v4, v8, v0 # Get carry into temp register v1 vadc.vvm v4, v4, v8, v0 # Calc new sum vmmv.m v0, v1 # Move temp carry into v0 for next word The subtract with borrow instruction vsbc performs the equivalent function to support long word arithmetic for subtraction. There are no subtract with immediate instructions. # Produce difference with borrow. # vd[i] = vs2[i] - vs1[i] - v0.mask[i] vsbc.vvm vd, vs2, vs1, v0 # Vector-vector # vd[i] = vs2[i] - x[rs1] - v0.mask[i] vsbc.vxm vd, vs2, rs1, v0 # Vector-scalar # Produce borrow out in mask register format # vd.mask[i] = borrow_out(vs2[i] - vs1[i] - v0.mask[i]) vmsbc.vvm vd, vs2, vs1, v0 # Vector-vector # vd.mask[i] = borrow_out(vs2[i] - x[rs1] - v0.mask[i]) vmsbc.vxm vd, vs2, rs1, v0 # Vector-scalar # vd.mask[i] = borrow_out(vs2[i] - vs1[i]) vmsbc.vv vd, vs2, vs1 # Vector-vector, no borrow-in # vd.mask[i] = borrow_out(vs2[i] - x[rs1]) vmsbc.vx vd, vs2, rs1 # Vector-scalar, no borrow-in For vmsbc, the borrow is defined to be 1 iff the difference, prior to truncation, is negative. For vadc and vsbc, the instruction encoding is reserved if the destination vector register is v0. This constraint corresponds to the constraint on masked vector operations that overwrite the mask register. # Bitwise logical operations. vand.vv vd, vs2, vs1, vm # Vector-vector vand.vx vd, vs2, rs1, vm # vector-scalar vand.vi vd, vs2, imm, vm # vector-immediate vor.vv vd, vs2, vs1, vm # Vector-vector vor.vx vd, vs2, rs1, vm # vector-scalar vor.vi vd, vs2, imm, vm # vector-immediate vxor.vv vd, vs2, vs1, vm # Vector-vector vxor.vx vd, vs2, rs1, vm # vector-scalar vxor.vi vd, vs2, imm, vm # vector-immediate With an immediate of -1, scalar-immediate forms of the vxor instruction provide a bitwise NOT operation. This is provided as an assembler pseudoinstruction vnot.v vd,vs,vm = vxor.vi vd,vs,-1,vm. A full set of vector shift instructions are provided, including logical shift left (sll), and logical (zero-extending srl) and arithmetic (sign-extending sra) shift right. The data to be shifted is in the vector register group specified by vs2 and the shift amount value can come from a vector register group vs1, a scalar integer register rs1, or a zero-extended 5-bit immediate. Only the low lg2(SEW) bits of the shift-amount value are used to control the shift amount. # Bit shift operations vsll.vv vd, vs2, vs1, vm # Vector-vector vsll.vx vd, vs2, rs1, vm # vector-scalar vsll.vi vd, vs2, uimm, vm # vector-immediate vsrl.vv vd, vs2, vs1, vm # Vector-vector vsrl.vx vd, vs2, rs1, vm # vector-scalar vsrl.vi vd, vs2, uimm, vm # vector-immediate vsra.vv vd, vs2, vs1, vm # Vector-vector vsra.vx vd, vs2, rs1, vm # vector-scalar vsra.vi vd, vs2, uimm, vm # vector-immediate The narrowing right shifts extract a smaller field from a wider operand and have both zero-extending (srl) and sign-extending (sra) forms. The shift amount can come from a vector register group, or a scalar x register, or a zero-extended 5-bit immediate. The low lg2(2*SEW) bits of the shift-amount value are used (e.g., the low 6 bits for a SEW=64-bit to SEW=32-bit narrowing operation). # Narrowing shift right logical, SEW = (2*SEW) >> SEW vnsrl.wv vd, vs2, vs1, vm # vector-vector vnsrl.wx vd, vs2, rs1, vm # vector-scalar vnsrl.wi vd, vs2, uimm, vm # vector-immediate # Narrowing shift right arithmetic, SEW = (2*SEW) >> SEW vnsra.wv vd, vs2, vs1, vm # vector-vector vnsra.wx vd, vs2, rs1, vm # vector-scalar vnsra.wi vd, vs2, uimm, vm # vector-immediate Future extensions might add support for versions that narrow to a destination that is 1/4 the width of the source. An integer value can be halved in width using the narrowing integer shift instructions with a scalar operand of x0. An assembly pseudoinstruction is provided vncvt.x.x.w vd,vs,vm = vnsrl.wx vd,vs,x0,vm. The following integer compare instructions write 1 to the destination mask register element if the comparison evaluates to true, and 0 otherwise. The destination mask vector is always held in a single vector register, with a layout of elements as described in Mask Register Layout. The destination mask vector register may be the same as the source vector mask register (v0). # Set if equal vmseq.vv vd, vs2, vs1, vm # Vector-vector vmseq.vx vd, vs2, rs1, vm # vector-scalar vmseq.vi vd, vs2, imm, vm # vector-immediate # Set if not equal vmsne.vv vd, vs2, vs1, vm # Vector-vector vmsne.vx vd, vs2, rs1, vm # vector-scalar vmsne.vi vd, vs2, imm, vm # vector-immediate # Set if less than, unsigned vmsltu.vv vd, vs2, vs1, vm # Vector-vector vmsltu.vx vd, vs2, rs1, vm # Vector-scalar # Set if less than, signed vmslt.vv vd, vs2, vs1, vm # Vector-vector vmslt.vx vd, vs2, rs1, vm # vector-scalar # Set if less than or equal, unsigned vmsleu.vv vd, vs2, vs1, vm # Vector-vector vmsleu.vx vd, vs2, rs1, vm # vector-scalar vmsleu.vi vd, vs2, imm, vm # Vector-immediate # Set if less than or equal, signed vmsle.vv vd, vs2, vs1, vm # Vector-vector vmsle.vx vd, vs2, rs1, vm # vector-scalar vmsle.vi vd, vs2, imm, vm # vector-immediate # Set if greater than, unsigned vmsgtu.vx vd, vs2, rs1, vm # Vector-scalar vmsgtu.vi vd, vs2, imm, vm # Vector-immediate # Set if greater than, signed vmsgt.vx vd, vs2, rs1, vm # Vector-scalar vmsgt.vi vd, vs2, imm, vm # Vector-immediate # Following two instructions are not provided directly # Set if greater than or equal, unsigned # vmsgeu.vx vd, vs2, rs1, vm # Vector-scalar # Set if greater than or equal, signed # vmsge.vx vd, vs2, rs1, vm # Vector-scalar The following table indicates how all comparisons are implemented in native machine code. Comparison Assembler Mapping Assembler Pseudoinstruction va < vb vmslt\\{u}.vv vd, va, vb, vm va <= vb vmsle\\{u}.vv vd, va, vb, vm va > vb vmslt\\{u}.vv vd, vb, va, vm vmsgt\\{u}.vv vd, va, vb, vm va >= vb vmsle\\{u}.vv vd, vb, va, vm vmsge\\{u}.vv vd, va, vb, vm va < x vmslt\\{u}.vx vd, va, x, vm va <= x vmsle\\{u}.vx vd, va, x, vm va > x vmsgt\\{u}.vx vd, va, x, vm va >= x see below va < i vmsle\\{u}.vi vd, va, i-1, vm vmslt\\{u}.vi vd, va, i, vm va <= i vmsle\\{u}.vi vd, va, i, vm va > i vmsgt\\{u}.vi vd, va, i, vm va >= i vmsgt\\{u}.vi vd, va, i-1, vm vmsge\\{u}.vi vd, va, i, vm va, vb vector register groups x scalar integer register i immediate The immediate forms of vmslt{u}.vi are not provided as the immediate value can be decreased by 1 and the vmsle{u}.vi variants used instead. The vmsle.vi range is -16 to 15, resulting in an effective vmslt.vi range of -15 to 16. The vmsleu.vi range is 0 to 15 giving an effective vmsltu.vi range of 1 to 16 (Note, vmsltu.vi with immediate 0 is not useful as it is always false). Because the 5-bit vector immediates are always sign-extended, when the high bit of the simm5 immediate is set, vmsleu.vi also supports unsigned immediate values in the range 2SEW-16 to 2SEW-1, allowing corresponding vmsltu.vi compares against unsigned immediates in the range 2SEW-15 to 2SEW. Note that vmsltu.vi with immediate 2SEW is not useful as it is always true. Similarly, vmsge{u}.vi is not provided and the compare is implemented using vmsgt{u}.vi with the immediate decremented by one. The resulting effective vmsge.vi range is -15 to 16, and the resulting effective vmsgeu.vi range is 1 to 16 (Note, vmsgeu.vi with immediate 0 is not useful as it is always true). The vmsgt forms for register scalar and immediates are provided to allow a single compare instruction to provide the correct polarity of mask value without using additional mask logical instructions. To reduce encoding space, the vmsge{u}.vx form is not directly provided, and so the va ≥ x case requires special treatment. The vmsge{u}.vx could potentially be encoded in a non-orthogonal way under the unused OPIVI variant of vmslt{u}. These would be the only instructions in OPIVI that use a scalar `x`register however. Alternatively, a further two funct6 encodings could be used, but these would have a different operand format (writes to mask register) than others in the same group of 8 funct6 encodings. The current PoR is to omit these instructions and to synthesize where needed as described below. The vmsge{u}.vx operation can be synthesized by reducing the value of x by 1 and using the vmsgt{u}.vx instruction, when it is known that this will not underflow the representation in x. Sequences to synthesize `vmsge\\{u}.vx` instruction va >= x, x > minimum addi t0, x, -1; vmsgt\\{u}.vx vd, va, t0, vm The above sequence will usually be the most efficient implementation, but assembler pseudoinstructions can be provided for cases where the range of x is unknown. unmasked va >= x pseudoinstruction: vmsge\\{u}.vx vd, va, x expansion: vmslt\\{u}.vx vd, va, x; vmnand.mm vd, vd, vd masked va >= x, vd != v0 pseudoinstruction: vmsge\\{u}.vx vd, va, x, v0.t expansion: vmslt\\{u}.vx vd, va, x, v0.t; vmxor.mm vd, vd, v0 masked va >= x, vd == v0 pseudoinstruction: vmsge\\{u}.vx vd, va, x, v0.t, vt expansion: vmslt\\{u}.vx vt, va, x; vmandn.mm vd, vd, vt masked va >= x, any vd pseudoinstruction: vmsge\\{u}.vx vd, va, x, v0.t, vt expansion: vmslt\\{u}.vx vt, va, x; vmandn.mm vt, v0, vt; vmandn.mm vd, vd, v0; vmor.mm vd, vt, vd The vt argument to the pseudoinstruction must name a temporary vector register that is not same as vd and which will be clobbered by the pseudoinstruction Compares effectively AND in the mask under a mask-undisturbed policy if the destination register is v0, e.g., # (a < b) && (b < c) in two instructions when mask-undisturbed vmslt.vv v0, va, vb # All body elements written vmslt.vv v0, vb, vc, v0.t # Only update at set mask Compares write mask registers, and so always operate under a tail-agnostic policy. Signed and unsigned integer minimum and maximum instructions are supported. # Unsigned minimum vminu.vv vd, vs2, vs1, vm # Vector-vector vminu.vx vd, vs2, rs1, vm # vector-scalar # Signed minimum vmin.vv vd, vs2, vs1, vm # Vector-vector vmin.vx vd, vs2, rs1, vm # vector-scalar # Unsigned maximum vmaxu.vv vd, vs2, vs1, vm # Vector-vector vmaxu.vx vd, vs2, rs1, vm # vector-scalar # Signed maximum vmax.vv vd, vs2, vs1, vm # Vector-vector vmax.vx vd, vs2, rs1, vm # vector-scalar The single-width multiply instructions perform a SEW-bit*SEW-bit multiply to generate a 2*SEW-bit product, then return one half of the product in the SEW-bit-wide destination. The mul versions write the low word of the product to the destination register, while the mulh versions write the high word of the product to the destination register. # Signed multiply, returning low bits of product vmul.vv vd, vs2, vs1, vm # Vector-vector vmul.vx vd, vs2, rs1, vm # vector-scalar # Signed multiply, returning high bits of product vmulh.vv vd, vs2, vs1, vm # Vector-vector vmulh.vx vd, vs2, rs1, vm # vector-scalar # Unsigned multiply, returning high bits of product vmulhu.vv vd, vs2, vs1, vm # Vector-vector vmulhu.vx vd, vs2, rs1, vm # vector-scalar # Signed(vs2)-Unsigned multiply, returning high bits of product vmulhsu.vv vd, vs2, vs1, vm # Vector-vector vmulhsu.vx vd, vs2, rs1, vm # vector-scalar There is no vmulhus.vx opcode to return high half of unsigned-vector * signed-scalar product. The scalar can be splatted to a vector, then a vmulhsu.vv used. The current vmulh* opcodes perform simple fractional multiplies, but with no option to scale, round, and/or saturate the result. A possible future extension can consider variants of vmulh, vmulhu, vmulhsu that use the vxrm rounding mode when discarding low half of product. There is no possibility of overflow in these cases. The divide and remainder instructions are equivalent to the RISC-V standard scalar integer multiply/divides, with the same results for extreme inputs. # Unsigned divide. vdivu.vv vd, vs2, vs1, vm # Vector-vector vdivu.vx vd, vs2, rs1, vm # vector-scalar # Signed divide vdiv.vv vd, vs2, vs1, vm # Vector-vector vdiv.vx vd, vs2, rs1, vm # vector-scalar # Unsigned remainder vremu.vv vd, vs2, vs1, vm # Vector-vector vremu.vx vd, vs2, rs1, vm # vector-scalar # Signed remainder vrem.vv vd, vs2, vs1, vm # Vector-vector vrem.vx vd, vs2, rs1, vm # vector-scalar The decision to include integer divide and remainder was contentious. The argument in favor is that without a standard instruction, software would have to pick some algorithm to perform the operation, which would likely perform poorly on some microarchitectures versus others. There is no instruction to perform a \"scalar divide by vector\" operation. The widening integer multiply instructions return the full 2*SEW-bit product from an SEW-bit*SEW-bit multiply. # Widening signed-integer multiply vwmul.vv vd, vs2, vs1, vm # vector-vector vwmul.vx vd, vs2, rs1, vm # vector-scalar # Widening unsigned-integer multiply vwmulu.vv vd, vs2, vs1, vm # vector-vector vwmulu.vx vd, vs2, rs1, vm # vector-scalar # Widening signed(vs2)-unsigned integer multiply vwmulsu.vv vd, vs2, vs1, vm # vector-vector vwmulsu.vx vd, vs2, rs1, vm # vector-scalar The integer multiply-add instructions are destructive and are provided in two forms, one that overwrites the addend or minuend (vmacc, vnmsac) and one that overwrites the first multiplicand (vmadd, vnmsub). The low half of the product is added or subtracted from the third operand. sac is intended to be read as \"subtract from accumulator\". The opcode is vnmsac to match the (unfortunately counterintuitive) floating-point fnmsub instruction definition. Similarly for the vnmsub opcode. # Integer multiply-add, overwrite addend vmacc.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i] vmacc.vx vd, rs1, vs2, vm # vd[i] = +(x[rs1] * vs2[i]) + vd[i] # Integer multiply-sub, overwrite minuend vnmsac.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vs2[i]) + vd[i] vnmsac.vx vd, rs1, vs2, vm # vd[i] = -(x[rs1] * vs2[i]) + vd[i] # Integer multiply-add, overwrite multiplicand vmadd.vv vd, vs1, vs2, vm # vd[i] = (vs1[i] * vd[i]) + vs2[i] vmadd.vx vd, rs1, vs2, vm # vd[i] = (x[rs1] * vd[i]) + vs2[i] # Integer multiply-sub, overwrite multiplicand vnmsub.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vd[i]) + vs2[i] vnmsub.vx vd, rs1, vs2, vm # vd[i] = -(x[rs1] * vd[i]) + vs2[i] The widening integer multiply-add instructions add the full 2*SEW-bit product from a SEW-bit*SEW-bit multiply to a 2*SEW-bit value and produce a 2*SEW-bit result. All combinations of signed and unsigned multiply operands are supported. # Widening unsigned-integer multiply-add, overwrite addend vwmaccu.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i] vwmaccu.vx vd, rs1, vs2, vm # vd[i] = +(x[rs1] * vs2[i]) + vd[i] # Widening signed-integer multiply-add, overwrite addend vwmacc.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i] vwmacc.vx vd, rs1, vs2, vm # vd[i] = +(x[rs1] * vs2[i]) + vd[i] # Widening signed-unsigned-integer multiply-add, overwrite addend vwmaccsu.vv vd, vs1, vs2, vm # vd[i] = +(signed(vs1[i]) * unsigned(vs2[i])) + vd[i] vwmaccsu.vx vd, rs1, vs2, vm # vd[i] = +(signed(x[rs1]) * unsigned(vs2[i])) + vd[i] # Widening unsigned-signed-integer multiply-add, overwrite addend vwmaccus.vx vd, rs1, vs2, vm # vd[i] = +(unsigned(x[rs1]) * signed(vs2[i])) + vd[i] The vector integer merge instructions combine two source operands based on a mask. Unlike regular arithmetic instructions, the merge operates on all body elements (i.e., the set of elements from vstart up to the current vector length in vl). The vmerge instructions are encoded as masked instructions (vm=0). The instructions combine two sources as follows. At elements where the mask value is zero, the first operand is copied to the destination element, otherwise the second operand is copied to the destination element. The first operand is always a vector register group specified by vs2. The second operand is a vector register group specified by vs1 or a scalar x register specified by rs1 or a 5-bit sign-extended immediate. vmerge.vvm vd, vs2, vs1, v0 # vd[i] = v0.mask[i] ? vs1[i] : vs2[i] vmerge.vxm vd, vs2, rs1, v0 # vd[i] = v0.mask[i] ? x[rs1] : vs2[i] vmerge.vim vd, vs2, imm, v0 # vd[i] = v0.mask[i] ? imm : vs2[i] The vector integer move instructions copy a source operand to a vector register group. The vmv.v.v variant copies a vector register group, whereas the vmv.v.x and vmv.v.i variants splat a scalar register or immediate to all active elements of the destination vector register group. These instructions are encoded as unmasked instructions (vm=1). The first operand specifier (vs2) must contain v0, and any other vector register number in vs2 is reserved. vmv.v.v vd, vs1 # vd[i] = vs1[i] vmv.v.x vd, rs1 # vd[i] = x[rs1] vmv.v.i vd, imm # vd[i] = imm Mask values can be widened into SEW-width elements using a sequence vmv.v.i vd, 0; vmerge.vim vd, vd, 1, v0. The vector integer move instructions share the encoding with the vector merge instructions, but with vm=1 and vs2=v0. The form vmv.v.v vd, vd, which leaves body elements unchanged, can be used to indicate that the register will next be used with an EEW equal to SEW. Implementations that internally reorganize data according to EEW can shuffle the internal representation according to SEW. Implementations that do not internally reorganize data can dynamically elide this instruction, and treat as a NOP. The vmv.v.v vd, vd instruction is not a RISC-V HINT as a tail-agnostic setting may cause an architectural state change on some implementations. The preceding set of integer arithmetic instructions is extended to support fixed-point arithmetic. A fixed-point number is a two’s-complement signed or unsigned integer interpreted as the numerator in a fraction with an implicit denominator. The fixed-point instructions are intended to be applied to the numerators; it is the responsibility of software to manage the denominators. An N-bit element can hold two’s-complement signed integers in the range -2N-1…​+2N-1-1, and unsigned integers in the range 0 …​ +2N-1. The fixed-point instructions help preserve precision in narrow operands by supporting scaling and rounding, and can handle overflow by saturating results into the destination format range. The widening integer operations described above can also be used to avoid overflow. Saturating forms of integer add and subtract are provided, for both signed and unsigned integers. If the result would overflow the destination, the result is replaced with the closest representable value, and the vxsat bit is set. # Saturating adds of unsigned integers. vsaddu.vv vd, vs2, vs1, vm # Vector-vector vsaddu.vx vd, vs2, rs1, vm # vector-scalar vsaddu.vi vd, vs2, imm, vm # vector-immediate # Saturating adds of signed integers. vsadd.vv vd, vs2, vs1, vm # Vector-vector vsadd.vx vd, vs2, rs1, vm # vector-scalar vsadd.vi vd, vs2, imm, vm # vector-immediate # Saturating subtract of unsigned integers. vssubu.vv vd, vs2, vs1, vm # Vector-vector vssubu.vx vd, vs2, rs1, vm # vector-scalar # Saturating subtract of signed integers. vssub.vv vd, vs2, vs1, vm # Vector-vector vssub.vx vd, vs2, rs1, vm # vector-scalar The averaging add and subtract instructions right shift the result by one bit and round off the result according to the setting in vxrm. Computation is performed in infinite precision before rounding and truncating. Both unsigned and signed versions are provided. For vaaddu and vaadd there can be no overflow in the result. For vasub and vasubu, overflow is ignored and the result wraps around. For vasub, overflow occurs only when subtracting the smallest number from the largest number under rnu or rne rounding. # Averaging add # Averaging adds of unsigned integers. vaaddu.vv vd, vs2, vs1, vm # roundoff_unsigned(vs2[i] + vs1[i], 1) vaaddu.vx vd, vs2, rs1, vm # roundoff_unsigned(vs2[i] + x[rs1], 1) # Averaging adds of signed integers. vaadd.vv vd, vs2, vs1, vm # roundoff_signed(vs2[i] + vs1[i], 1) vaadd.vx vd, vs2, rs1, vm # roundoff_signed(vs2[i] + x[rs1], 1) # Averaging subtract # Averaging subtract of unsigned integers. vasubu.vv vd, vs2, vs1, vm # roundoff_unsigned(vs2[i] - vs1[i], 1) vasubu.vx vd, vs2, rs1, vm # roundoff_unsigned(vs2[i] - x[rs1], 1) # Averaging subtract of signed integers. vasub.vv vd, vs2, vs1, vm # roundoff_signed(vs2[i] - vs1[i], 1) vasub.vx vd, vs2, rs1, vm # roundoff_signed(vs2[i] - x[rs1], 1) The signed fractional multiply instruction produces a 2*SEW product of the two SEW inputs, then shifts the result right by SEW-1 bits, rounding these bits according to vxrm, then saturates the result to fit into SEW bits. If the result causes saturation, the vxsat bit is set. # Signed saturating and rounding fractional multiply # See vxrm description for rounding calculation vsmul.vv vd, vs2, vs1, vm # vd[i] = clip(roundoff_signed(vs2[i]*vs1[i], SEW-1)) vsmul.vx vd, vs2, rs1, vm # vd[i] = clip(roundoff_signed(vs2[i]*x[rs1], SEW-1)) When multiplying two N-bit signed numbers, the largest magnitude is obtained for -2N-1 * -2N-1 producing a result +22N-2, which has a single (zero) sign bit when held in 2N bits. All other products have two sign bits in 2N bits. To retain greater precision in N result bits, the product is shifted right by one bit less than N, saturating the largest magnitude result but increasing result precision by one bit for all other products. We do not provide an equivalent fractional multiply where one input is unsigned, as these would retain all upper SEW bits and would not need to saturate. This operation is partly covered by the vmulhu and vmulhsu instructions, for the case where rounding is simply truncation (rdn). These instructions shift the input value right, and round off the shifted out bits according to vxrm. The scaling right shifts have both zero-extending (vssrl) and sign-extending (vssra) forms. The data to be shifted is in the vector register group specified by vs2 and the shift amount value can come from a vector register group vs1, a scalar integer register rs1, or a zero-extended 5-bit immediate. Only the low lg2(SEW) bits of the shift-amount value are used to control the shift amount. # Scaling shift right logical vssrl.vv vd, vs2, vs1, vm # vd[i] = roundoff_unsigned(vs2[i], vs1[i]) vssrl.vx vd, vs2, rs1, vm # vd[i] = roundoff_unsigned(vs2[i], x[rs1]) vssrl.vi vd, vs2, uimm, vm # vd[i] = roundoff_unsigned(vs2[i], uimm) # Scaling shift right arithmetic vssra.vv vd, vs2, vs1, vm # vd[i] = roundoff_signed(vs2[i],vs1[i]) vssra.vx vd, vs2, rs1, vm # vd[i] = roundoff_signed(vs2[i], x[rs1]) vssra.vi vd, vs2, uimm, vm # vd[i] = roundoff_signed(vs2[i], uimm) The vnclip instructions are used to pack a fixed-point value into a narrower destination. The instructions support rounding, scaling, and saturation into the final destination format. The source data is in the vector register group specified by vs2. The scaling shift amount value can come from a vector register group vs1, a scalar integer register rs1, or a zero-extended 5-bit immediate. The low lg2(2*SEW) bits of the vector or scalar shift-amount value (e.g., the low 6 bits for a SEW=64-bit to SEW=32-bit narrowing operation) are used to control the right shift amount, which provides the scaling. # Narrowing unsigned clip # SEW 2*SEW SEW vnclipu.wv vd, vs2, vs1, vm # vd[i] = clip(roundoff_unsigned(vs2[i], vs1[i])) vnclipu.wx vd, vs2, rs1, vm # vd[i] = clip(roundoff_unsigned(vs2[i], x[rs1])) vnclipu.wi vd, vs2, uimm, vm # vd[i] = clip(roundoff_unsigned(vs2[i], uimm)) # Narrowing signed clip vnclip.wv vd, vs2, vs1, vm # vd[i] = clip(roundoff_signed(vs2[i], vs1[i])) vnclip.wx vd, vs2, rs1, vm # vd[i] = clip(roundoff_signed(vs2[i], x[rs1])) vnclip.wi vd, vs2, uimm, vm # vd[i] = clip(roundoff_signed(vs2[i], uimm)) For vnclipu/vnclip, the rounding mode is specified in the vxrm CSR. Rounding occurs around the least-significant bit of the destination and before saturation. For vnclipu, the shifted rounded source value is treated as an unsigned integer and saturates if the result would overflow the destination viewed as an unsigned integer. There is no single instruction that can saturate a signed value into an unsigned destination. A sequence of two vector instructions that first removes negative numbers by performing a max against 0 using vmax then clips the resulting unsigned value into the destination using vnclipu can be used if setting vxsat value for negative numbers is not required. A vsetvli is required inbetween these two instructions to change SEW. For vnclip, the shifted rounded source value is treated as a signed integer and saturates if the result would overflow the destination viewed as a signed integer. If any destination element is saturated, the vxsat bit is set in the vxsat register. The standard vector floating-point instructions treat elements as IEEE-754/2008-compatible values. If the EEW of a vector floating-point operand does not correspond to a supported IEEE floating-point type, the instruction encoding is reserved. Whether floating-point is supported, and for which element widths, is determined by the specific vector extension. The current set of extensions include support for 32-bit and 64-bit floating-point values. When 16-bit and 128-bit element widths are added, they will be also be treated as IEEE-754/2008-compatible values. Other floating-point formats may be supported in future extensions. Vector floating-point instructions require the presence of base scalar floating-point extensions corresponding to the supported vector floating-point element widths. In particular, future vector extensions supporting 16-bit half-precision floating-point values will also require some scalar half-precision floating-point support. If the floating-point unit status field mstatus.FS is Off then any attempt to execute a vector floating-point instruction will raise an illegal-instruction exception. Any vector floating-point instruction that modifies any floating-point extension state (i.e., floating-point CSRs or f registers) must set mstatus.FS to Dirty. If the hypervisor extension is implemented and V=1, the vsstatus.FS field is additionally in effect for vector floating-point instructions. If vsstatus.FS or mstatus.FS is Off then any attempt to execute a vector floating-point instruction will raise an illegal-instruction exception. Any vector floating-point instruction that modifies any floating-point extension state (i.e., floating-point CSRs or f registers) must set both mstatus.FS and vsstatus.FS to Dirty. The vector floating-point instructions have the same behavior as the scalar floating-point instructions with regard to NaNs. Scalar values for floating-point vector-scalar operations are sourced as described in Vector Arithmetic Instruction encoding. A vector floating-point exception at any active floating-point element sets the standard FP exception flags in the fflags register. Inactive elements do not set FP exception flags. # Floating-point add vfadd.vv vd, vs2, vs1, vm # Vector-vector vfadd.vf vd, vs2, rs1, vm # vector-scalar # Floating-point subtract vfsub.vv vd, vs2, vs1, vm # Vector-vector vfsub.vf vd, vs2, rs1, vm # Vector-scalar vd[i] = vs2[i] - f[rs1] vfrsub.vf vd, vs2, rs1, vm # Scalar-vector vd[i] = f[rs1] - vs2[i] # Widening FP add/subtract, 2*SEW = SEW +/- SEW vfwadd.vv vd, vs2, vs1, vm # vector-vector vfwadd.vf vd, vs2, rs1, vm # vector-scalar vfwsub.vv vd, vs2, vs1, vm # vector-vector vfwsub.vf vd, vs2, rs1, vm # vector-scalar # Widening FP add/subtract, 2*SEW = 2*SEW +/- SEW vfwadd.wv vd, vs2, vs1, vm # vector-vector vfwadd.wf vd, vs2, rs1, vm # vector-scalar vfwsub.wv vd, vs2, vs1, vm # vector-vector vfwsub.wf vd, vs2, rs1, vm # vector-scalar # Floating-point multiply vfmul.vv vd, vs2, vs1, vm # Vector-vector vfmul.vf vd, vs2, rs1, vm # vector-scalar # Floating-point divide vfdiv.vv vd, vs2, vs1, vm # Vector-vector vfdiv.vf vd, vs2, rs1, vm # vector-scalar # Reverse floating-point divide vector = scalar / vector vfrdiv.vf vd, vs2, rs1, vm # scalar-vector, vd[i] = f[rs1]/vs2[i] # Widening floating-point multiply vfwmul.vv vd, vs2, vs1, vm # vector-vector vfwmul.vf vd, vs2, rs1, vm # vector-scalar All four varieties of fused multiply-add are provided, and in two destructive forms that overwrite one of the operands, either the addend or the first multiplicand. # FP multiply-accumulate, overwrites addend vfmacc.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i] vfmacc.vf vd, rs1, vs2, vm # vd[i] = +(f[rs1] * vs2[i]) + vd[i] # FP negate-(multiply-accumulate), overwrites subtrahend vfnmacc.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vs2[i]) - vd[i] vfnmacc.vf vd, rs1, vs2, vm # vd[i] = -(f[rs1] * vs2[i]) - vd[i] # FP multiply-subtract-accumulator, overwrites subtrahend vfmsac.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) - vd[i] vfmsac.vf vd, rs1, vs2, vm # vd[i] = +(f[rs1] * vs2[i]) - vd[i] # FP negate-(multiply-subtract-accumulator), overwrites minuend vfnmsac.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vs2[i]) + vd[i] vfnmsac.vf vd, rs1, vs2, vm # vd[i] = -(f[rs1] * vs2[i]) + vd[i] # FP multiply-add, overwrites multiplicand vfmadd.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vd[i]) + vs2[i] vfmadd.vf vd, rs1, vs2, vm # vd[i] = +(f[rs1] * vd[i]) + vs2[i] # FP negate-(multiply-add), overwrites multiplicand vfnmadd.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vd[i]) - vs2[i] vfnmadd.vf vd, rs1, vs2, vm # vd[i] = -(f[rs1] * vd[i]) - vs2[i] # FP multiply-sub, overwrites multiplicand vfmsub.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vd[i]) - vs2[i] vfmsub.vf vd, rs1, vs2, vm # vd[i] = +(f[rs1] * vd[i]) - vs2[i] # FP negate-(multiply-sub), overwrites multiplicand vfnmsub.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vd[i]) + vs2[i] vfnmsub.vf vd, rs1, vs2, vm # vd[i] = -(f[rs1] * vd[i]) + vs2[i] While we considered using the two unused rounding modes in the scalar FP FMA encoding to provide a few non-destructive FMAs, these would complicate microarchitectures by being the only maskable operation with three inputs and separate output. The widening floating-point fused multiply-add instructions all overwrite the wide addend with the result. The multiplier inputs are all SEW wide, while the addend and destination is 2*SEW bits wide. # FP widening multiply-accumulate, overwrites addend vfwmacc.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) + vd[i] vfwmacc.vf vd, rs1, vs2, vm # vd[i] = +(f[rs1] * vs2[i]) + vd[i] # FP widening negate-(multiply-accumulate), overwrites addend vfwnmacc.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vs2[i]) - vd[i] vfwnmacc.vf vd, rs1, vs2, vm # vd[i] = -(f[rs1] * vs2[i]) - vd[i] # FP widening multiply-subtract-accumulator, overwrites addend vfwmsac.vv vd, vs1, vs2, vm # vd[i] = +(vs1[i] * vs2[i]) - vd[i] vfwmsac.vf vd, rs1, vs2, vm # vd[i] = +(f[rs1] * vs2[i]) - vd[i] # FP widening negate-(multiply-subtract-accumulator), overwrites addend vfwnmsac.vv vd, vs1, vs2, vm # vd[i] = -(vs1[i] * vs2[i]) + vd[i] vfwnmsac.vf vd, rs1, vs2, vm # vd[i] = -(f[rs1] * vs2[i]) + vd[i] This is a unary vector-vector instruction. # Floating-point square root vfsqrt.v vd, vs2, vm # Vector-vector square root # Floating-point reciprocal square-root estimate to 7 bits. vfrsqrt7.v vd, vs2, vm This is a unary vector-vector instruction that returns an estimate of 1/sqrt(x) accurate to 7 bits. An earlier draft version had used the assembler name vfrsqrte7 but this was deemed to cause confusion with the ex notation for element width. The earlier name can be retained as alias in tool chains for backward compatibility. The following table describes the instruction’s behavior for all classes of floating-point inputs: Input Output Exceptions raised -{inf} ≤ x < -0.0 canonical NaN NV -0.0 -{inf} DZ +0.0 +{inf} DZ +0.0 < x < +{inf} estimate of 1/sqrt(x) +{inf} +0.0 qNaN canonical NaN sNaN canonical NaN NV All positive normal and subnormal inputs produce normal outputs. The output value is independent of the dynamic rounding mode. For the non-exceptional cases, the low bit of the exponent and the six high bits of significand (after the leading one) are concatenated and used to address the following table. The output of the table becomes the seven high bits of the result significand (after the leading one); the remainder of the result significand is zero. Subnormal inputs are normalized and the exponent adjusted appropriately before the lookup. The output exponent is chosen to make the result approximate the reciprocal of the square root of the argument. More precisely, the result is computed as follows. Let the normalized input exponent be equal to the input exponent if the input is normal, or 0 minus the number of leading zeros in the significand otherwise. If the input is subnormal, the normalized input significand is given by shifting the input significand left by 1 minus the normalized input exponent, discarding the leading 1 bit. The output exponent equals floor((3*B - 1 - the normalized input exponent) / 2), where B is the exponent bias. The output sign equals the input sign. The following table gives the seven MSBs of the output significand as a function of the LSB of the normalized input exponent and the six MSBs of the normalized input significand; the other bits of the output significand are zero. Table 16. vfrsqrt7.v common-case lookup table contents exp[0] sig[MSB -: 6] sig_out[MSB -: 7] 0 0 52 0 1 51 0 2 50 0 3 48 0 4 47 0 5 46 0 6 44 0 7 43 0 8 42 0 9 41 0 10 40 0 11 39 0 12 38 0 13 36 0 14 35 0 15 34 0 16 33 0 17 32 0 18 31 0 19 30 0 20 30 0 21 29 0 22 28 0 23 27 0 24 26 0 25 25 0 26 24 0 27 23 0 28 23 0 29 22 0 30 21 0 31 20 0 32 19 0 33 19 0 34 18 0 35 17 0 36 16 0 37 16 0 38 15 0 39 14 0 40 14 0 41 13 0 42 12 0 43 12 0 44 11 0 45 10 0 46 10 0 47 9 0 48 9 0 49 8 0 50 7 0 51 7 0 52 6 0 53 6 0 54 5 0 55 4 0 56 4 0 57 3 0 58 3 0 59 2 0 60 2 0 61 1 0 62 1 0 63 0 1 0 127 1 1 125 1 2 123 1 3 121 1 4 119 1 5 118 1 6 116 1 7 114 1 8 113 1 9 111 1 10 109 1 11 108 1 12 106 1 13 105 1 14 103 1 15 102 1 16 100 1 17 99 1 18 97 1 19 96 1 20 95 1 21 93 1 22 92 1 23 91 1 24 90 1 25 88 1 26 87 1 27 86 1 28 85 1 29 84 1 30 83 1 31 82 1 32 80 1 33 79 1 34 78 1 35 77 1 36 76 1 37 75 1 38 74 1 39 73 1 40 72 1 41 71 1 42 70 1 43 70 1 44 69 1 45 68 1 46 67 1 47 66 1 48 65 1 49 64 1 50 63 1 51 63 1 52 62 1 53 61 1 54 60 1 55 59 1 56 59 1 57 58 1 58 57 1 59 56 1 60 56 1 61 55 1 62 54 1 63 53 For example, when SEW=32, vfrsqrt7(0x00718abc (≈ 1.043e-38)) = 0x5f080000 (≈ 9.800e18), and vfrsqrt7(0x7f765432 (≈ 3.274e38)) = 0x1f820000 (≈ 5.506e-20). The 7 bit accuracy was chosen as it requires 0,1,2,3 Newton-Raphson iterations to converge to close to bfloat16, FP16, FP32, FP64 accuracy respectively. Future instructions can be defined with greater estimate accuracy. # Floating-point reciprocal estimate to 7 bits. vfrec7.v vd, vs2, vm An earlier draft version had used the assembler name vfrece7 but this was deemed to cause confusion with ex notation for element width. The earlier name can be retained as alias in tool chains for backward compatibility. This is a unary vector-vector instruction that returns an estimate of 1/x accurate to 7 bits. The following table describes the instruction’s behavior for all classes of floating-point inputs, where B is the exponent bias: Input (x) Rounding Mode Output (y ≈ 1/x) Exceptions raised -{inf} any -0.0 -2B+1 < x ≤ -2B (normal) any -2-(B+1) ≥ y > -2-B (subnormal, sig=01…​) -2B < x ≤ -2B-1 (normal) any -2-B ≥ y > -2-B+1 (subnormal, sig=1…​) -2B-1 < x ≤ -2-B+1 (normal) any -2-B+1 ≥ y > -2B-1 (normal) -2-B+1 < x ≤ -2-B (subnormal, sig=1…​) any -2B-1 ≥ y > -2B (normal) -2-B < x ≤ -2-(B+1) (subnormal, sig=01…​) any -2B ≥ y > -2B+1 (normal) -2-(B+1) < x < -0.0 (subnormal, sig=00…​) RUP, RTZ greatest-mag. negative finite value NX, OF -2-(B+1) < x < -0.0 (subnormal, sig=00…​) RDN, RNE, RMM -{inf} NX, OF -0.0 any -{inf} DZ +0.0 any +{inf} DZ +0.0 < x < 2-(B+1) (subnormal, sig=00…​) RUP, RNE, RMM +{inf} NX, OF +0.0 < x < 2-(B+1) (subnormal, sig=00…​) RDN, RTZ greatest finite value NX, OF 2-(B+1) ≤ x < 2-B (subnormal, sig=01…​) any 2B+1 > y ≥ 2B (normal) 2-B ≤ x < 2-B+1 (subnormal, sig=1…​) any 2B > y ≥ 2B-1 (normal) 2-B+1 ≤ x < 2B-1 (normal) any 2B-1 > y ≥ 2-B+1 (normal) 2B-1 ≤ x < 2B (normal) any 2-B+1 > y ≥ 2-B (subnormal, sig=1…​) 2B ≤ x < 2B+1 (normal) any 2-B > y ≥ 2-(B+1) (subnormal, sig=01…​) +{inf} any +0.0 qNaN any canonical NaN sNaN any canonical NaN NV Subnormal inputs with magnitude at least 2-(B+1) produce normal outputs; other subnormal inputs produce infinite outputs. Normal inputs with magnitude at least 2B-1 produce subnormal outputs; other normal inputs produce normal outputs. The output value depends on the dynamic rounding mode when the overflow exception is raised. For the non-exceptional cases, the seven high bits of significand (after the leading one) are used to address the following table. The output of the table becomes the seven high bits of the result significand (after the leading one); the remainder of the result significand is zero. Subnormal inputs are normalized and the exponent adjusted appropriately before the lookup. The output exponent is chosen to make the result approximate the reciprocal of the argument, and subnormal outputs are denormalized accordingly. More precisely, the result is computed as follows. Let the normalized input exponent be equal to the input exponent if the input is normal, or 0 minus the number of leading zeros in the significand otherwise. The normalized output exponent equals (2*B - 1 - the normalized input exponent). If the normalized output exponent is outside the range [-1, 2*B], the result corresponds to one of the exceptional cases in the table above. If the input is subnormal, the normalized input significand is given by shifting the input significand left by 1 minus the normalized input exponent, discarding the leading 1 bit. Otherwise, the normalized input significand equals the input significand. The following table gives the seven MSBs of the normalized output significand as a function of the seven MSBs of the normalized input significand; the other bits of the normalized output significand are zero. Table 17. vfrec7.v common-case lookup table contents sig[MSB -: 7] sig_out[MSB -: 7] 0 127 1 125 2 123 3 121 4 119 5 117 6 116 7 114 8 112 9 110 10 109 11 107 12 105 13 104 14 102 15 100 16 99 17 97 18 96 19 94 20 93 21 91 22 90 23 88 24 87 25 85 26 84 27 83 28 81 29 80 30 79 31 77 32 76 33 75 34 74 35 72 36 71 37 70 38 69 39 68 40 66 41 65 42 64 43 63 44 62 45 61 46 60 47 59 48 58 49 57 50 56 51 55 52 54 53 53 54 52 55 51 56 50 57 49 58 48 59 47 60 46 61 45 62 44 63 43 64 42 65 41 66 40 67 40 68 39 69 38 70 37 71 36 72 35 73 35 74 34 75 33 76 32 77 31 78 31 79 30 80 29 81 28 82 28 83 27 84 26 85 25 86 25 87 24 88 23 89 23 90 22 91 21 92 21 93 20 94 19 95 19 96 18 97 17 98 17 99 16 100 15 101 15 102 14 103 14 104 13 105 12 106 12 107 11 108 11 109 10 110 9 111 9 112 8 113 8 114 7 115 7 116 6 117 5 118 5 119 4 120 4 121 3 122 3 123 2 124 2 125 1 126 1 127 0 If the normalized output exponent is 0 or -1, the result is subnormal: the output exponent is 0, and the output significand is given by concatenating a 1 bit to the left of the normalized output significand, then shifting that quantity right by 1 minus the normalized output exponent. Otherwise, the output exponent equals the normalized output exponent, and the output significand equals the normalized output significand. The output sign equals the input sign. For example, when SEW=32, vfrec7(0x00718abc (≈ 1.043e-38)) = 0x7e900000 (≈ 9.570e37), and vfrec7(0x7f765432 (≈ 3.274e38)) = 0x00214000 (≈ 3.053e-39). The 7 bit accuracy was chosen as it requires 0,1,2,3 Newton-Raphson iterations to converge to close to bfloat16, FP16, FP32, FP64 accuracy respectively. Future instructions can be defined with greater estimate accuracy. The vector floating-point vfmin and vfmax instructions have the same behavior as the corresponding scalar floating-point instructions in version 2.2 of the RISC-V F/D/Q extension: they perform the minimumNumber or maximumNumber operation on active elements. # Floating-point minimum vfmin.vv vd, vs2, vs1, vm # Vector-vector vfmin.vf vd, vs2, rs1, vm # vector-scalar # Floating-point maximum vfmax.vv vd, vs2, vs1, vm # Vector-vector vfmax.vf vd, vs2, rs1, vm # vector-scalar Vector versions of the scalar sign-injection instructions. The result takes all bits except the sign bit from the vector vs2 operands. vfsgnj.vv vd, vs2, vs1, vm # Vector-vector vfsgnj.vf vd, vs2, rs1, vm # vector-scalar vfsgnjn.vv vd, vs2, vs1, vm # Vector-vector vfsgnjn.vf vd, vs2, rs1, vm # vector-scalar vfsgnjx.vv vd, vs2, vs1, vm # Vector-vector vfsgnjx.vf vd, vs2, rs1, vm # vector-scalar A vector of floating-point values can be negated using a sign-injection instruction with both source operands set to the same vector operand. An assembly pseudoinstruction is provided: vfneg.v vd,vs = vfsgnjn.vv vd,vs,vs. The absolute value of a vector of floating-point elements can be calculated using a sign-injection instruction with both source operands set to the same vector operand. An assembly pseudoinstruction is provided: vfabs.v vd,vs = vfsgnjx.vv vd,vs,vs. These vector FP compare instructions compare two source operands and write the comparison result to a mask register. The destination mask vector is always held in a single vector register, with a layout of elements as described in Mask Register Layout. The destination mask vector register may be the same as the source vector mask register (v0). Compares write mask registers, and so always operate under a tail-agnostic policy. The compare instructions follow the semantics of the scalar floating-point compare instructions. vmfeq and vmfne raise the invalid operation exception only on signaling NaN inputs. vmflt, vmfle, vmfgt, and vmfge raise the invalid operation exception on both signaling and quiet NaN inputs. vmfne writes 1 to the destination element when either operand is NaN, whereas the other compares write 0 when either operand is NaN. # Compare equal vmfeq.vv vd, vs2, vs1, vm # Vector-vector vmfeq.vf vd, vs2, rs1, vm # vector-scalar # Compare not equal vmfne.vv vd, vs2, vs1, vm # Vector-vector vmfne.vf vd, vs2, rs1, vm # vector-scalar # Compare less than vmflt.vv vd, vs2, vs1, vm # Vector-vector vmflt.vf vd, vs2, rs1, vm # vector-scalar # Compare less than or equal vmfle.vv vd, vs2, vs1, vm # Vector-vector vmfle.vf vd, vs2, rs1, vm # vector-scalar # Compare greater than vmfgt.vf vd, vs2, rs1, vm # vector-scalar # Compare greater than or equal vmfge.vf vd, vs2, rs1, vm # vector-scalar Comparison Assembler Mapping Assembler pseudoinstruction va < vb vmflt.vv vd, va, vb, vm va <= vb vmfle.vv vd, va, vb, vm va > vb vmflt.vv vd, vb, va, vm vmfgt.vv vd, va, vb, vm va >= vb vmfle.vv vd, vb, va, vm vmfge.vv vd, va, vb, vm va < f vmflt.vf vd, va, f, vm va <= f vmfle.vf vd, va, f, vm va > f vmfgt.vf vd, va, f, vm va >= f vmfge.vf vd, va, f, vm va, vb vector register groups f scalar floating-point register Providing all forms is necessary to correctly handle unordered compares for NaNs. C99 floating-point quiet compares can be implemented by masking the signaling compares when either input is NaN, as follows. When the comparand is a non-NaN constant, the middle two instructions can be omitted. # Example of implementing isgreater() vmfeq.vv v0, va, va # Only set where A is not NaN. vmfeq.vv v1, vb, vb # Only set where B is not NaN. vmand.mm v0, v0, v1 # Only set where A and B are ordered, vmfgt.vv v0, va, vb, v0.t # so only set flags on ordered values. In the above sequence, it is tempting to mask the second vmfeq instruction and remove the vmand instruction, but this more efficient sequence incorrectly fails to raise the invalid exception when an element of va contains a quiet NaN and the corresponding element in vb contains a signaling NaN. This is a unary vector-vector instruction that operates in the same way as the scalar classify instruction. vfclass.v vd, vs2, vm # Vector-vector The 10-bit mask produced by this instruction is placed in the least-significant bits of the result elements. The upper (SEW-10) bits of the result are filled with zeros. The instruction is only defined for SEW=16b and above, so the result will always fit in the destination elements. A vector-scalar floating-point merge instruction is provided, which operates on all body elements from vstart up to the current vector length in vl regardless of mask value. The vfmerge.vfm instruction is encoded as a masked instruction (vm=0). At elements where the mask value is zero, the first vector operand is copied to the destination element, otherwise a scalar floating-point register value is copied to the destination element. vfmerge.vfm vd, vs2, rs1, v0 # vd[i] = v0.mask[i] ? f[rs1] : vs2[i] The vector floating-point move instruction splats a floating-point scalar operand to a vector register group. The instruction copies a scalar f register value to all active elements of a vector register group. This instruction is encoded as an unmasked instruction (vm=1). The instruction must have the vs2 field set to v0, with all other values for vs2 reserved. vfmv.v.f vd, rs1 # vd[i] = f[rs1] The vfmv.v.f instruction shares the encoding with the vfmerge.vfm instruction, but with vm=1 and vs2=v0. Conversion operations are provided to convert to and from floating-point values and unsigned and signed integers, where both source and destination are SEW wide. vfcvt.xu.f.v vd, vs2, vm # Convert float to unsigned integer. vfcvt.x.f.v vd, vs2, vm # Convert float to signed integer. vfcvt.rtz.xu.f.v vd, vs2, vm # Convert float to unsigned integer, truncating. vfcvt.rtz.x.f.v vd, vs2, vm # Convert float to signed integer, truncating. vfcvt.f.xu.v vd, vs2, vm # Convert unsigned integer to float. vfcvt.f.x.v vd, vs2, vm # Convert signed integer to float. The conversions follow the same rules on exceptional conditions as the scalar conversion instructions. The conversions use the dynamic rounding mode in frm, except for the rtz variants, which round towards zero. The rtz variants are provided to accelerate truncating conversions from floating-point to integer, as is common in languages like C and Java. A set of conversion instructions is provided to convert between narrower integer and floating-point datatypes to a type of twice the width. vfwcvt.xu.f.v vd, vs2, vm # Convert float to double-width unsigned integer. vfwcvt.x.f.v vd, vs2, vm # Convert float to double-width signed integer. vfwcvt.rtz.xu.f.v vd, vs2, vm # Convert float to double-width unsigned integer, truncating. vfwcvt.rtz.x.f.v vd, vs2, vm # Convert float to double-width signed integer, truncating. vfwcvt.f.xu.v vd, vs2, vm # Convert unsigned integer to double-width float. vfwcvt.f.x.v vd, vs2, vm # Convert signed integer to double-width float. vfwcvt.f.f.v vd, vs2, vm # Convert single-width float to double-width float. These instructions have the same constraints on vector register overlap as other widening instructions (see Widening Vector Arithmetic Instructions). A double-width IEEE floating-point value can always represent a single-width integer exactly. A double-width IEEE floating-point value can always represent a single-width IEEE floating-point value exactly. A full set of floating-point widening conversions is not supported as single instructions, but any widening conversion can be implemented as several doubling steps with equivalent results and no additional exception flags raised. A set of conversion instructions is provided to convert wider integer and floating-point datatypes to a type of half the width. vfncvt.xu.f.w vd, vs2, vm # Convert double-width float to unsigned integer. vfncvt.x.f.w vd, vs2, vm # Convert double-width float to signed integer. vfncvt.rtz.xu.f.w vd, vs2, vm # Convert double-width float to unsigned integer, truncating. vfncvt.rtz.x.f.w vd, vs2, vm # Convert double-width float to signed integer, truncating. vfncvt.f.xu.w vd, vs2, vm # Convert double-width unsigned integer to float. vfncvt.f.x.w vd, vs2, vm # Convert double-width signed integer to float. vfncvt.f.f.w vd, vs2, vm # Convert double-width float to single-width float. vfncvt.rod.f.f.w vd, vs2, vm # Convert double-width float to single-width float, # rounding towards odd. These instructions have the same constraints on vector register overlap as other narrowing instructions (see Narrowing Vector Arithmetic Instructions). A full set of floating-point narrowing conversions is not supported as single instructions. Conversions can be implemented in a sequence of halving steps. Results are equivalently rounded and the same exception flags are raised if all but the last halving step use round-towards-odd (vfncvt.rod.f.f.w). Only the final step should use the desired rounding mode. For vfncvt.rod.f.f.w, a finite value that exceeds the range of the destination format is converted to the destination format’s largest finite value with the same sign. Vector reduction operations take a vector register group of elements and a scalar held in element 0 of a vector register, and perform a reduction using some binary operator, to produce a scalar result in element 0 of a vector register. The scalar input and output operands are held in element 0 of a single vector register, not a vector register group, so any vector register can be the scalar source or destination of a vector reduction regardless of LMUL setting. The destination vector register can overlap the source operands, including the mask register. Vector reductions read and write the scalar operand and result into element 0 of a vector register instead of a scalar register to avoid a loss of decoupling with the scalar processor, and to support future polymorphic use with future types not supported in the scalar unit. Inactive elements from the source vector register group are excluded from the reduction, but the scalar operand is always included regardless of the mask values. The other elements in the destination vector register ( 0 < index < VLEN/SEW) are considered the tail and are managed with the current tail agnostic/undisturbed policy. If vl=0, no operation is performed and the destination register is not updated. This choice of behavior for vl=0 reduces implementation complexity as it is consistent with other operations on vector register state. For the common case that the source and destination scalar operand are the same vector register, this behavior also produces the expected result. For the uncommon case that the source and destination scalar operand are in different vector registers, this instruction will not copy the source into the destination when vl=0. However, it is expected that in most of these cases it will be statically known that vl is not zero. In other cases, a check for vl=0 will have to be added to ensure that the source scalar is copied to the destination (e.g., by explicitly setting vl=1 and performing a register-register copy). Traps on vector reduction instructions are always reported with a vstart of 0. Vector reduction operations raise an illegal instruction exception if vstart is non-zero. The assembler syntax for a reduction operation is vredop.vs, where the .vs suffix denotes the first operand is a vector register group and the second operand is a scalar stored in element 0 of a vector register. All operands and results of single-width reduction instructions have the same SEW width. Overflows wrap around on arithmetic sums. # Simple reductions, where [*] denotes all active elements: vredsum.vs vd, vs2, vs1, vm # vd[0] = sum( vs1[0] , vs2[*] ) vredmaxu.vs vd, vs2, vs1, vm # vd[0] = maxu( vs1[0] , vs2[*] ) vredmax.vs vd, vs2, vs1, vm # vd[0] = max( vs1[0] , vs2[*] ) vredminu.vs vd, vs2, vs1, vm # vd[0] = minu( vs1[0] , vs2[*] ) vredmin.vs vd, vs2, vs1, vm # vd[0] = min( vs1[0] , vs2[*] ) vredand.vs vd, vs2, vs1, vm # vd[0] = and( vs1[0] , vs2[*] ) vredor.vs vd, vs2, vs1, vm # vd[0] = or( vs1[0] , vs2[*] ) vredxor.vs vd, vs2, vs1, vm # vd[0] = xor( vs1[0] , vs2[*] ) The unsigned vwredsumu.vs instruction zero-extends the SEW-wide vector elements before summing them, then adds the 2*SEW-width scalar element, and stores the result in a 2*SEW-width scalar element. The vwredsum.vs instruction sign-extends the SEW-wide vector elements before summing them. For both vwredsumu.vs and vwredsum.vs, overflows wrap around. # Unsigned sum reduction into double-width accumulator vwredsumu.vs vd, vs2, vs1, vm # 2*SEW = 2*SEW + sum(zero-extend(SEW)) # Signed sum reduction into double-width accumulator vwredsum.vs vd, vs2, vs1, vm # 2*SEW = 2*SEW + sum(sign-extend(SEW)) # Simple reductions. vfredosum.vs vd, vs2, vs1, vm # Ordered sum vfredusum.vs vd, vs2, vs1, vm # Unordered sum vfredmax.vs vd, vs2, vs1, vm # Maximum value vfredmin.vs vd, vs2, vs1, vm # Minimum value Older assembler mnemonic vfredsum is retained as alias for vfredusum. The vfredosum instruction must sum the floating-point values in element order, starting with the scalar in vs1[0]--that is, it performs the computation: vd[0] = `(((vs1[0] + vs2[0]) + vs2[1]) + ...) + vs2[vl-1]` where each addition operates identically to the scalar floating-point instructions in terms of raising exception flags and generating or propagating special values. The ordered reduction supports compiler autovectorization, while the unordered FP sum allows for faster implementations. When the operation is masked (vm=0), the masked-off elements do not affect the result or the exception flags. If no elements are active, no additions are performed, so the scalar in vs1[0] is simply copied to the destination register, without canonicalizing NaN values and without setting any exception flags. This behavior preserves the handling of NaNs, exceptions, and rounding when autovectorizing a scalar summation loop. The unordered sum reduction instruction, vfredusum, provides an implementation more freedom in performing the reduction. The implementation must produce a result equivalent to a reduction tree composed of binary operator nodes, with the inputs being elements from the source vector register group (vs2) and the source scalar value (vs1[0]). Each operator in the tree accepts two inputs and produces one result. Each operator first computes an exact sum as a RISC-V scalar floating-point addition with infinite exponent range and precision, then converts this exact sum to a floating-point format with range and precision each at least as great as the element floating-point format indicated by SEW, rounding using the currently active floating-point dynamic rounding mode and raising exception flags as necessary. A different floating-point range and precision may be chosen for the result of each operator. A node where one input is derived only from elements masked-off or beyond the active vector length may either treat that input as the additive identity of the appropriate EEW or simply copy the other input to its output. The rounded result from the root node in the tree is converted (rounded again, using the dynamic rounding mode) to the standard floating-point format indicated by SEW. An implementation is allowed to add an additional additive identity to the final result. The additive identity is +0.0 when rounding down (towards -{inf}) or -0.0 for all other rounding modes. The reduction tree structure must be deterministic for a given value in vtype and vl. As a consequence of this definition, implementations need not propagate NaN payloads through the reduction tree when no elements are active. In particular, if no elements are active and the scalar input is NaN, implementations are permitted to canonicalize the NaN and, if the NaN is signaling, set the invalid exception flag. Implementations are alternatively permitted to pass through the original NaN and set no exception flags, as with vfredosum. The vfredosum instruction is a valid implementation of the vfredusum instruction. The vfredmin and vfredmax instructions reduce the scalar argument in vs1[0] and active elements in vs2 using the minimumNumber and maximumNumber operations, respectively. Floating-point max and min reductions should return the same final value and raise the same exception flags regardless of operation order. If no elements are active, the scalar in vs1[0] is simply copied to the destination register, without canonicalizing NaN values and without setting any exception flags. Widening forms of the sum reductions are provided that read and write a double-width reduction result. # Simple reductions. vfwredosum.vs vd, vs2, vs1, vm # Ordered sum vfwredusum.vs vd, vs2, vs1, vm # Unordered sum Older assembler mnemonic vfwredsum is retained as alias for vfwredusum. The reduction of the SEW-width elements is performed as in the single-width reduction case, with the elements in vs2 promoted to 2*SEW bits before adding to the 2*SEW-bit accumulator. vfwredosum.vs handles inactive elements and NaN payloads analogously to vfredosum.vs; vfwredusum.vs does so analogously to vfredusum.vs. Several instructions are provided to help operate on mask values held in a vector register. Vector mask-register logical operations operate on mask registers. Each element in a mask register is a single bit, so these instructions all operate on single vector registers regardless of the setting of the vlmul field in vtype. They do not change the value of vlmul. The destination vector register may be the same as either source vector register. As with other vector instructions, the elements with indices less than vstart are unchanged, and vstart is reset to zero after execution. Vector mask logical instructions are always unmasked, so there are no inactive elements, and the encodings with vm=0 are reserved. Mask elements past vl, the tail elements, are always updated with a tail-agnostic policy. vmand.mm vd, vs2, vs1 # vd.mask[i] = vs2.mask[i] && vs1.mask[i] vmnand.mm vd, vs2, vs1 # vd.mask[i] = !(vs2.mask[i] && vs1.mask[i]) vmandn.mm vd, vs2, vs1 # vd.mask[i] = vs2.mask[i] && !vs1.mask[i] vmxor.mm vd, vs2, vs1 # vd.mask[i] = vs2.mask[i] ^^ vs1.mask[i] vmor.mm vd, vs2, vs1 # vd.mask[i] = vs2.mask[i] || vs1.mask[i] vmnor.mm vd, vs2, vs1 # vd.mask[i] = !(vs2.mask[i] || vs1.mask[i]) vmorn.mm vd, vs2, vs1 # vd.mask[i] = vs2.mask[i] || !vs1.mask[i] vmxnor.mm vd, vs2, vs1 # vd.mask[i] = !(vs2.mask[i] ^^ vs1.mask[i]) The previous assembler mnemonics vmandnot and vmornot have been changed to vmandn and vmorn to be consistent with the equivalent scalar instructions. The old vmandnot and vmornot mnemonics can be retained as assembler aliases for compatibility. Several assembler pseudoinstructions are defined as shorthand for common uses of mask logical operations: vmmv.m vd, vs => vmand.mm vd, vs, vs # Copy mask register vmclr.m vd => vmxor.mm vd, vd, vd # Clear mask register vmset.m vd => vmxnor.mm vd, vd, vd # Set mask register vmnot.m vd, vs => vmnand.mm vd, vs, vs # Invert bits The vmmv.m instruction was previously called vmcpy.m, but with new layout it is more consistent to name as a \"mv\" because bits are copied without interpretation. The vmcpy.m assembler pseudoinstruction can be retained for compatibility. For implementations that internally rearrange bits according to EEW, a vmmv.m instruction with same source and destination can be used as idiom to force an internal reformat into a mask vector. The set of eight mask logical instructions can generate any of the 16 possibly binary logical functions of the two input masks: inputs 0 0 1 1 src1 0 1 0 1 src2 output instruction pseudoinstruction 0 0 0 0 vmxor.mm vd, vd, vd vmclr.m vd 1 0 0 0 vmnor.mm vd, src1, src2 0 1 0 0 vmandn.mm vd, src2, src1 1 1 0 0 vmnand.mm vd, src1, src1 vmnot.m vd, src1 0 0 1 0 vmandn.mm vd, src1, src2 1 0 1 0 vmnand.mm vd, src2, src2 vmnot.m vd, src2 0 1 1 0 vmxor.mm vd, src1, src2 1 1 1 0 vmnand.mm vd, src1, src2 0 0 0 1 vmand.mm vd, src1, src2 1 0 0 1 vmxnor.mm vd, src1, src2 0 1 0 1 vmand.mm vd, src2, src2 vmmv.m vd, src2 1 1 0 1 vmorn.mm vd, src2, src1 0 0 1 1 vmand.mm vd, src1, src1 vmmv.m vd, src1 1 0 1 1 vmorn.mm vd, src1, src2 0 1 1 1 vmor.mm vd, src1, src2 1 1 1 1 vmxnor.mm vd, vd, vd vmset.m vd The vector mask logical instructions are designed to be easily fused with a following masked vector operation to effectively expand the number of predicate registers by moving values into v0 before use. vcpop.m rd, vs2, vm This instruction previously had the assembler mnemonic vpopc.m but was renamed to be consistent with the scalar instruction. The assembler instruction alias vpopc.m is being retained for software compatibility. The source operand is a single vector register holding mask register values as described in Mask Register Layout. The vcpop.m instruction counts the number of mask elements of the active elements of the vector source mask register that have the value 1 and writes the result to a scalar x register. The operation can be performed under a mask, in which case only the masked elements are counted. vcpop.m rd, vs2, v0.t # x[rd] = sum_i ( vs2.mask[i] && v0.mask[i] ) The vcpop.m instruction writes x[rd] even if vl=0 (with the value 0, since no mask elements are active). Traps on vcpop.m are always reported with a vstart of 0. The vcpop.m instruction will raise an illegal-instruction exception if vstart is non-zero. vfirst.m rd, vs2, vm The vfirst instruction finds the lowest-numbered active element of the source mask vector that has the value 1 and writes that element’s index to a GPR. If no active element has the value 1, -1 is written to the GPR. Software can assume that any negative value (highest bit set) corresponds to no element found, as vector lengths will never reach 2(XLEN-1) on any implementation. The vfirst.m instruction writes x[rd] even if vl=0 (with the value -1, since no mask elements are active). Traps on vfirst are always reported with a vstart of 0. The vfirst instruction will raise an illegal-instruction exception if vstart is non-zero. vmsbf.m vd, vs2, vm # Example 7 6 5 4 3 2 1 0 Element number 1 0 0 1 0 1 0 0 v3 contents vmsbf.m v2, v3 0 0 0 0 0 0 1 1 v2 contents 1 0 0 1 0 1 0 1 v3 contents vmsbf.m v2, v3 0 0 0 0 0 0 0 0 v2 0 0 0 0 0 0 0 0 v3 contents vmsbf.m v2, v3 1 1 1 1 1 1 1 1 v2 1 1 0 0 0 0 1 1 v0 vcontents 1 0 0 1 0 1 0 0 v3 contents vmsbf.m v2, v3, v0.t 0 1 x x x x 1 1 v2 contents The vmsbf.m instruction takes a mask register as input and writes results to a mask register. The instruction writes a 1 to all active mask elements before the first active source element that is a 1, then writes a 0 to that element and all following active elements. If there is no set bit in the active elements of the source vector, then all active elements in the destination are written with a 1. The tail elements in the destination mask register are updated under a tail-agnostic policy. Traps on vmsbf.m are always reported with a vstart of 0. The vmsbf instruction will raise an illegal-instruction exception if vstart is non-zero. The destination register cannot overlap the source register and, if masked, cannot overlap the mask register ('v0'). The vector mask set-including-first instruction is similar to set-before-first, except it also includes the element with a set bit. vmsif.m vd, vs2, vm # Example 7 6 5 4 3 2 1 0 Element number 1 0 0 1 0 1 0 0 v3 contents vmsif.m v2, v3 0 0 0 0 0 1 1 1 v2 contents 1 0 0 1 0 1 0 1 v3 contents vmsif.m v2, v3 0 0 0 0 0 0 0 1 v2 1 1 0 0 0 0 1 1 v0 vcontents 1 0 0 1 0 1 0 0 v3 contents vmsif.m v2, v3, v0.t 1 1 x x x x 1 1 v2 contents The tail elements in the destination mask register are updated under a tail-agnostic policy. Traps on vmsif.m are always reported with a vstart of 0. The vmsif instruction will raise an illegal-instruction exception if vstart is non-zero. The destination register cannot overlap the source register and, if masked, cannot overlap the mask register ('v0'). The vector mask set-only-first instruction is similar to set-before-first, except it only sets the first element with a bit set, if any. vmsof.m vd, vs2, vm # Example 7 6 5 4 3 2 1 0 Element number 1 0 0 1 0 1 0 0 v3 contents vmsof.m v2, v3 0 0 0 0 0 1 0 0 v2 contents 1 0 0 1 0 1 0 1 v3 contents vmsof.m v2, v3 0 0 0 0 0 0 0 1 v2 1 1 0 0 0 0 1 1 v0 vcontents 1 1 0 1 0 1 0 0 v3 contents vmsof.m v2, v3, v0.t 0 1 x x x x 0 0 v2 contents The tail elements in the destination mask register are updated under a tail-agnostic policy. Traps on vmsof.m are always reported with a vstart of 0. The vmsof instruction will raise an illegal-instruction exception if vstart is non-zero. The destination register cannot overlap the source register and, if masked, cannot overlap the mask register ('v0'). The following is an example of vectorizing a data-dependent exit loop. # char* strcpy(char *dst, const char* src) strcpy: mv a2, a0 # Copy dst li t0, -1 # Infinite AVL loop: vsetvli x0, t0, e8, m8, ta, ma # Max length vectors of bytes vle8ff.v v8, (a1) # Get src bytes csrr t1, vl # Get number of bytes fetched vmseq.vi v1, v8, 0 # Flag zero bytes vfirst.m a3, v1 # Zero found? add a1, a1, t1 # Bump pointer vmsif.m v0, v1 # Set mask up to and including zero byte. vse8.v v8, (a2), v0.t # Write out bytes add a2, a2, t1 # Bump pointer bltz a3, loop # Zero byte not found, so loop ret # char* strncpy(char *dst, const char* src, size_t n) strncpy: mv a3, a0 # Copy dst loop: vsetvli x0, a2, e8, m8, ta, ma # Vectors of bytes. vle8ff.v v8, (a1) # Get src bytes vmseq.vi v1, v8, 0 # Flag zero bytes csrr t1, vl # Get number of bytes fetched vfirst.m a4, v1 # Zero found? vmsbf.m v0, v1 # Set mask up to before zero byte. vse8.v v8, (a3), v0.t # Write out non-zero bytes bgez a4, zero_tail # Zero remaining bytes. sub a2, a2, t1 # Decrement count. add a3, a3, t1 # Bump dest pointer add a1, a1, t1 # Bump src pointer bnez a2, loop # Anymore? ret zero_tail: sub a2, a2, a4 # Subtract count on non-zero bytes. add a3, a3, a4 # Advance past non-zero bytes. vsetvli t1, a2, e8, m8, ta, ma # Vectors of bytes. vmv.v.i v0, 0 # Splat zero. zero_loop: vse8.v v0, (a3) # Store zero. sub a2, a2, t1 # Decrement count. add a3, a3, t1 # Bump pointer vsetvli t1, a2, e8, m8, ta, ma # Vectors of bytes. bnez a2, zero_loop # Anymore? ret The viota.m instruction reads a source vector mask register and writes to each element of the destination vector register group the sum of all the bits of elements in the mask register whose index is less than the element, e.g., a parallel prefix sum of the mask values. This instruction can be masked, in which case only the enabled elements contribute to the sum. viota.m vd, vs2, vm # Example 7 6 5 4 3 2 1 0 Element number 1 0 0 1 0 0 0 1 v2 contents viota.m v4, v2 # Unmasked 2 2 2 1 1 1 1 0 v4 result 1 1 1 0 1 0 1 1 v0 contents 1 0 0 1 0 0 0 1 v2 contents 2 3 4 5 6 7 8 9 v4 contents viota.m v4, v2, v0.t # Masked, vtype.vma=0 1 1 1 5 1 7 1 0 v4 results The result value is zero-extended to fill the destination element if SEW is wider than the result. If the result value would overflow the destination SEW, the least-significant SEW bits are retained. Traps on viota.m are always reported with a vstart of 0, and execution is always restarted from the beginning when resuming after a trap handler. An illegal-instruction exception is raised if vstart is non-zero. The destination register group cannot overlap the source register and, if masked, cannot overlap the mask register (v0). The viota.m instruction can be combined with memory scatter instructions (indexed stores) to perform vector compress functions. # Compact non-zero elements from input memory array to output memory array # # size_t compact_non_zero(size_t n, const int* in, int* out) # { # size_t i; # int *p = out; # # for (i=0; i<n; i++) # { # const int v = *in++; # if (v != 0) # *p++ = v; # } # # return (size_t) (p - out); # } # # a0 = n # a1 = &in # a2 = &out compact_non_zero: li a6, 0 # Clear count of non-zero elements loop: vsetvli a5, a0, e32, m8, ta, ma # 32-bit integers vle32.v v8, (a1) # Load input vector sub a0, a0, a5 # Decrement number done slli a5, a5, 2 # Multiply by four bytes vmsne.vi v0, v8, 0 # Locate non-zero values add a1, a1, a5 # Bump input pointer vcpop.m a5, v0 # Count number of elements set in v0 viota.m v16, v0 # Get destination offsets of active elements add a6, a6, a5 # Accumulate number of elements vsll.vi v16, v16, 2, v0.t # Multiply offsets by four bytes slli a5, a5, 2 # Multiply number of non-zero elements by four bytes vsuxei32.v v8, (a2), v16, v0.t # Scatter using scaled viota results under mask add a2, a2, a5 # Bump output pointer bnez a0, loop # Any more? mv a0, a6 # Return count ret The vid.v instruction writes each element’s index to the destination vector register group, from 0 to vl-1. vid.v vd, vm # Write element ID to destination. The instruction can be masked. Masking does not change the index value written to active elements. The vs2 field of the instruction must be set to v0, otherwise the encoding is reserved. The result value is zero-extended to fill the destination element if SEW is wider than the result. If the result value would overflow the destination SEW, the least-significant SEW bits are retained. Microarchitectures can implement vid.v instruction using the same datapath as viota.m but with an implicit set mask source. A range of permutation instructions are provided to move elements around within the vector registers. The integer scalar read/write instructions transfer a single value between a scalar x register and element 0 of a vector register. The instructions ignore LMUL and vector register groups. vmv.x.s rd, vs2 # x[rd] = vs2[0] (vs1=0) vmv.s.x vd, rs1 # vd[0] = x[rs1] (vs2=0) The vmv.x.s instruction copies a single SEW-wide element from index 0 of the source vector register to a destination integer register. If SEW > XLEN, the least-significant XLEN bits are transferred and the upper SEW-XLEN bits are ignored. If SEW < XLEN, the value is sign-extended to XLEN bits. vmv.x.s performs its operation even if vstart ≥ vl or vl=0. The vmv.s.x instruction copies the scalar integer register to element 0 of the destination vector register. If SEW < XLEN, the least-significant bits are copied and the upper XLEN-SEW bits are ignored. If SEW > XLEN, the value is sign-extended to SEW bits. The other elements in the destination vector register ( 0 < index < VLEN/SEW) are treated as tail elements using the current tail agnostic/undisturbed policy. If vstart ≥ vl, no operation is performed and the destination register is not updated. As a consequence, when vl=0, no elements are updated in the destination vector register group, regardless of vstart. The encodings corresponding to the masked versions (vm=0) of vmv.x.s and vmv.s.x are reserved. The floating-point scalar read/write instructions transfer a single value between a scalar f register and element 0 of a vector register. The instructions ignore LMUL and vector register groups. vfmv.f.s rd, vs2 # f[rd] = vs2[0] (rs1=0) vfmv.s.f vd, rs1 # vd[0] = f[rs1] (vs2=0) The vfmv.f.s instruction copies a single SEW-wide element from index 0 of the source vector register to a destination scalar floating-point register. vfmv.f.s performs its operation even if vstart ≥ vl or vl=0. The vfmv.s.f instruction copies the scalar floating-point register to element 0 of the destination vector register. The other elements in the destination vector register ( 0 < index < VLEN/SEW) are treated as tail elements using the current tail agnostic/undisturbed policy. If vstart ≥ vl, no operation is performed and the destination register is not updated. As a consequence, when vl=0, no elements are updated in the destination vector register group, regardless of vstart. The encodings corresponding to the masked versions (vm=0) of vfmv.f.s and vfmv.s.f are reserved. The slide instructions move elements up and down a vector register group. The slide operations can be implemented much more efficiently than using the arbitrary register gather instruction. Implementations may optimize certain OFFSET values for vslideup and vslidedown. In particular, power-of-2 offsets may operate substantially faster than other offsets. For all of the vslideup, vslidedown, v[f]slide1up, and v[f]slide1down instructions, if vstart ≥ vl, the instruction performs no operation and leaves the destination vector register unchanged. As a consequence, when vl=0, no elements are updated in the destination vector register group, regardless of vstart. The tail agnostic/undisturbed policy is followed for tail elements. The slide instructions may be masked, with mask element i controlling whether destination element i is written. The mask undisturbed/agnostic policy is followed for inactive elements. vslideup.vx vd, vs2, rs1, vm # vd[i+x[rs1]] = vs2[i] vslideup.vi vd, vs2, uimm, vm # vd[i+uimm] = vs2[i] For vslideup, the value in vl specifies the maximum number of destination elements that are written. The start index (OFFSET) for the destination can be either specified using an unsigned integer in the x register specified by rs1, or a 5-bit immediate, zero-extended to XLEN bits. If XLEN > SEW, OFFSET is not truncated to SEW bits. Destination elements OFFSET through vl-1 are written if unmasked and if OFFSET < vl. vslideup behavior for destination elements (`vstart` < `vl`) OFFSET is amount to slideup, either from x register or a 5-bit immediate 0 <= i < min(vl, max(vstart, OFFSET)) Unchanged max(vstart, OFFSET) <= i < vl vd[i] = vs2[i-OFFSET] if v0.mask[i] enabled vl <= i < VLMAX Follow tail policy The destination vector register group for vslideup cannot overlap the source vector register group, otherwise the instruction encoding is reserved. The non-overlap constraint avoids WAR hazards on the input vectors during execution, and enables restart with non-zero vstart. vslidedown.vx vd, vs2, rs1, vm # vd[i] = vs2[i+x[rs1]] vslidedown.vi vd, vs2, uimm, vm # vd[i] = vs2[i+uimm] For vslidedown, the value in vl specifies the maximum number of destination elements that are written. The remaining elements past vl are handled according to the current tail policy (Vector Tail Agnostic and Vector Mask Agnostic vta and vma). The start index (OFFSET) for the source can be either specified using an unsigned integer in the x register specified by rs1, or a 5-bit immediate, zero-extended to XLEN bits. If XLEN > SEW, OFFSET is not truncated to SEW bits. vslidedown behavior for source elements for element i in slide (`vstart` < `vl`) 0 <= i+OFFSET < VLMAX src[i] = vs2[i+OFFSET] VLMAX <= i+OFFSET src[i] = 0 vslidedown behavior for destination element i in slide (`vstart` < `vl`) 0 <= i < vstart Unchanged vstart <= i < vl vd[i] = src[i] if v0.mask[i] enabled vl <= i < VLMAX Follow tail policy Variants of slide are provided that only move by one element but which also allow a scalar integer value to be inserted at the vacated element position. vslide1up.vx vd, vs2, rs1, vm # vd[0]=x[rs1], vd[i+1] = vs2[i] The vslide1up instruction places the x register argument at location 0 of the destination vector register group, provided that element 0 is active, otherwise the destination element update follows the current mask agnostic/undisturbed policy. If XLEN < SEW, the value is sign-extended to SEW bits. If XLEN > SEW, the least-significant bits are copied over and the high XLEN-SEW bits are ignored. The remaining active vl-1 elements are copied over from index i in the source vector register group to index i+1 in the destination vector register group. The vl register specifies the maximum number of destination vector register elements updated with source values, and remaining elements past vl are handled according to the current tail policy (Vector Tail Agnostic and Vector Mask Agnostic vta and vma). vslide1up behavior when vl > 0 i < vstart unchanged 0 = i = vstart vd[i] = x[rs1] if v0.mask[i] enabled max(vstart, 1) <= i < vl vd[i] = vs2[i-1] if v0.mask[i] enabled vl <= i < VLMAX Follow tail policy The vslide1up instruction requires that the destination vector register group does not overlap the source vector register group. Otherwise, the instruction encoding is reserved. vfslide1up.vf vd, vs2, rs1, vm # vd[0]=f[rs1], vd[i+1] = vs2[i] The vfslide1up instruction is defined analogously to vslide1up, but sources its scalar argument from an f register. The vslide1down instruction copies the first vl-1 active elements values from index i+1 in the source vector register group to index i in the destination vector register group. The vl register specifies the maximum number of destination vector register elements written with source values, and remaining elements past vl are handled according to the current tail policy (Vector Tail Agnostic and Vector Mask Agnostic vta and vma). vslide1down.vx vd, vs2, rs1, vm # vd[i] = vs2[i+1], vd[vl-1]=x[rs1] The vslide1down instruction places the x register argument at location vl-1 in the destination vector register, provided that element vl-1 is active, otherwise the destination element update follows the current mask agnostic/undisturbed policy. If XLEN < SEW, the value is sign-extended to SEW bits. If XLEN > SEW, the least-significant bits are copied over and the high SEW-XLEN bits are ignored. vslide1down behavior i < vstart unchanged vstart <= i < vl-1 vd[i] = vs2[i+1] if v0.mask[i] enabled vstart <= i = vl-1 vd[vl-1] = x[rs1] if v0.mask[i] enabled vl <= i < VLMAX Follow tail policy The vslide1down instruction can be used to load values into a vector register without using memory and without disturbing other vector registers. This provides a path for debuggers to modify the contents of a vector register, albeit slowly, with multiple repeated vslide1down invocations. vfslide1down.vf vd, vs2, rs1, vm # vd[i] = vs2[i+1], vd[vl-1]=f[rs1] The vfslide1down instruction is defined analogously to vslide1down, but sources its scalar argument from an f register. The vector register gather instructions read elements from a first source vector register group at locations given by a second source vector register group. The index values in the second vector are treated as unsigned integers. The source vector can be read at any index < VLMAX regardless of vl. The maximum number of elements to write to the destination register is given by vl, and the remaining elements past vl are handled according to the current tail policy (Vector Tail Agnostic and Vector Mask Agnostic vta and vma). The operation can be masked, and the mask undisturbed/agnostic policy is followed for inactive elements. vrgather.vv vd, vs2, vs1, vm # vd[i] = (vs1[i] >= VLMAX) ? 0 : vs2[vs1[i]]; vrgatherei16.vv vd, vs2, vs1, vm # vd[i] = (vs1[i] >= VLMAX) ? 0 : vs2[vs1[i]]; The vrgather.vv form uses SEW/LMUL for both the data and indices. The vrgatherei16.vv form uses SEW/LMUL for the data in vs2 but EEW=16 and EMUL = (16/SEW)*LMUL for the indices in vs1. When SEW=8, vrgather.vv can only reference vector elements 0-255. The vrgatherei16 form can index 64K elements, and can also be used to reduce the register capacity needed to hold indices when SEW > 16. If an element index is out of range ( vs1[i] ≥ VLMAX ) then zero is returned for the element value. Vector-scalar and vector-immediate forms of the register gather are also provided. These read one element from the source vector at the given index, and write this value to the active elements of the destination vector register. The index value in the scalar register and the immediate, zero-extended to XLEN bits, are treated as unsigned integers. If XLEN > SEW, the index value is not truncated to SEW bits. These forms allow any vector element to be \"splatted\" to an entire vector. vrgather.vx vd, vs2, rs1, vm # vd[i] = (x[rs1] >= VLMAX) ? 0 : vs2[x[rs1]] vrgather.vi vd, vs2, uimm, vm # vd[i] = (uimm >= VLMAX) ? 0 : vs2[uimm] For any vrgather instruction, the destination vector register group cannot overlap with the source vector register groups, otherwise the instruction encoding is reserved. The vector compress instruction allows elements selected by a vector mask register from a source vector register group to be packed into contiguous elements at the start of the destination vector register group. vcompress.vm vd, vs2, vs1 # Compress into vd elements of vs2 where vs1 is enabled The vector mask register specified by vs1 indicates which of the first vl elements of vector register group vs2 should be extracted and packed into contiguous elements at the beginning of vector register vd. The remaining elements of vd are treated as tail elements according to the current tail policy (Vector Tail Agnostic and Vector Mask Agnostic vta and vma). Example use of vcompress instruction 8 7 6 5 4 3 2 1 0 Element number 1 1 0 1 0 0 1 0 1 v0 8 7 6 5 4 3 2 1 0 v1 1 2 3 4 5 6 7 8 9 v2 vsetivli t0, 9, e8, m1, tu, ma vcompress.vm v2, v1, v0 1 2 3 4 8 7 5 2 0 v2 vcompress is encoded as an unmasked instruction (vm=1). The equivalent masked instruction (vm=0) is reserved. The destination vector register group cannot overlap the source vector register group or the source mask register, otherwise the instruction encoding is reserved. A trap on a vcompress instruction is always reported with a vstart of 0. Executing a vcompress instruction with a non-zero vstart raises an illegal-instruction exception. Although possible, vcompress is one of the more difficult instructions to restart with a non-zero vstart, so assumption is implementations will choose not do that but will instead restart from element 0. This does mean elements in destination register after vstart will already have been updated. There is no inverse vdecompress provided, as this operation can be readily synthesized using iota and a masked vrgather: Desired functionality of 'vdecompress' 7 6 5 4 3 2 1 0 # vid e d c b a # packed vector of 5 elements 1 0 0 1 1 1 0 1 # mask vector of 8 elements p q r s t u v w # destination register before vdecompress e q r d c b v a # result of vdecompress # v0 holds mask # v1 holds packed data # v11 holds input expanded vector and result viota.m v10, v0 # Calc iota from mask in v0 vrgather.vv v11, v1, v10, v0.t # Expand into destination p q r s t u v w # v11 destination register e d c b a # v1 source vector 1 0 0 1 1 1 0 1 # v0 mask vector 4 4 4 3 2 1 1 0 # v10 result of viota.m e q r d c b v a # v11 destination after vrgather using viota.m under mask The vmv<nr>r.v instructions copy whole vector registers (i.e., all VLEN bits) and can copy whole vector register groups. The nr value in the opcode is the number of individual vector registers, NREG, to copy. The instructions operate as if EEW=SEW, EMUL = NREG, effective length evl= EMUL * VLEN/SEW. These instructions are intended to aid compilers to shuffle vector registers without needing to know or change vl. The usual property that no elements are written if vstart ≥ vl does not apply to these instructions. Instead, no elements are written if vstart ≥ evl. If vd is equal to vs2 the instruction is an architectural NOP, but is treated as a hint to implementations that rearrange data internally that the register group will next be accessed with an EEW equal to SEW. The instruction is encoded as an OPIVI instruction. The number of vector registers to copy is encoded in the low three bits of the simm field (simm[2:0]) using the same encoding as the nf[2:0] field for memory instructions (Figure NFIELDS Encoding), i.e., simm[2:0] = NREG-1. The value of NREG must be 1, 2, 4, or 8, and values of simm[4:0] other than 0, 1, 3, and 7 are reserved. A future extension may support other numbers of registers to be moved. The instruction uses the same funct6 encoding as the vsmul instruction but with an immediate operand, and only the unmasked version (vm=1). This encoding is chosen as it is close to the related vmerge encoding, and it is unlikely the vsmul instruction would benefit from an immediate form. vmv<nr>r.v vd, vs2 # General form vmv1r.v v1, v2 # Copy v1=v2 vmv2r.v v10, v12 # Copy v10=v12; v11=v13 vmv4r.v v4, v8 # Copy v4=v8; v5=v9; v6=v10; v7=v11 vmv8r.v v0, v8 # Copy v0=v8; v1=v9; ...; v7=v15 The source and destination vector register numbers must be aligned appropriately for the vector register group size, and encodings with other vector register numbers are reserved. A future extension may relax the vector register alignment restrictions. On a trap during a vector instruction (caused by either a synchronous exception or an asynchronous interrupt), the existing *epc CSR is written with a pointer to the trapping vector instruction, while the vstart CSR contains the element index on which the trap was taken. We chose to add a vstart CSR to allow resumption of a partially executed vector instruction to reduce interrupt latencies and to simplify forward-progress guarantees. This is similar to the scheme in the IBM 3090 vector facility. To ensure forward progress without the vstart CSR, implementations would have to guarantee an entire vector instruction can always complete atomically without generating a trap. This is particularly difficult to ensure in the presence of strided or scatter/gather operations and demand-paged virtual memory. We assume most supervisor-mode environments with demand-paging will require precise vector traps. Precise vector traps require that: all instructions older than the trapping vector instruction have committed their results no instructions newer than the trapping vector instruction have altered architectural state any operations within the trapping vector instruction affecting result elements preceding the index in the vstart CSR have committed their results no operations within the trapping vector instruction affecting elements at or following the vstart CSR have altered architectural state except if restarting and completing the affected vector instruction will nevertheless produce the correct final state. We relax the last requirement to allow elements following vstart to have been updated at the time the trap is reported, provided that re-executing the instruction from the given vstart will correctly overwrite those elements. In idempotent memory regions, vector store instructions may have updated elements in memory past the element causing a synchronous trap. Non-idempotent memory regions must not have been updated for indices equal to or greater than the element that caused a synchronous trap during a vector store instruction. Except where noted above, vector instructions are allowed to overwrite their inputs, and so in most cases, the vector instruction restart must be from the vstart element index. However, there are a number of cases where this overwrite is prohibited to enable execution of the vector instructions to be idempotent and hence restartable from an earlier index location. Implementations must ensure forward progress can be eventually guaranteed for the element or segment reported by vstart. Imprecise vector traps are traps that are not precise. In particular, instructions newer than *epc may have committed results, and instructions older than *epc may have not completed execution. Imprecise traps are primarily intended to be used in situations where reporting an error and terminating execution is the appropriate response. A profile might specify that interrupts are precise while other traps are imprecise. We assume many embedded implementations will generate only imprecise traps for vector instructions on fatal errors, as they will not require resumable traps. Imprecise traps shall report the faulting element in vstart for traps caused by synchronous vector exceptions. There is no support for imprecise traps in the current standard extensions. Some profiles may choose to provide a privileged mode bit to select between precise and imprecise vector traps. Imprecise mode would run at high-performance but possibly make it difficult to discern error causes, while precise mode would run more slowly, but support debugging of errors albeit with a possibility of not experiencing the same errors as in imprecise mode. This mechanism is not defined in the current standard extensions. Another trap mode can support swappable state in the vector unit, where on a trap, special instructions can save and restore the vector unit microarchitectural state, to allow execution to continue correctly around imprecise traps. This mechanism is not defined in the current standard extensions. A future extension might define a standard way of saving and restoring opaque microarchitectural state from a vector unit implementation to support context switching with imprecise traps. This section describes the standard vector extensions. A set of smaller extensions intended for embedded use are named with a \"Zve\" prefix, while a larger vector extension designed for application processors is named as a single-letter V extension. A set of vector length extension names with prefix \"Zvl\" are also provided. The initial vector extensions are designed to act as a base for additional vector extensions in various domains, including cryptography and machine learning. All standard vector extensions have a minimum required VLEN as described below. A set of vector length extensions are provided to increase the minimum vector length of a vector extension. The vector length extensions can be used to either specify additional software or architecture profile requirements, or to advertise hardware capabilities. Table 18. Vector length extensions Extension Minimum VLEN Zvl32b 32 Zvl64b 64 Zvl128b 128 Zvl256b 256 Zvl512b 512 Zvl1024b 1024 Longer vector length extensions should follow the same pattern. Every vector length extension effectively includes all shorter vector length extensions. Explicit use of the Zvl32b extension string is not required for any standard vector extension as they all effectively mandate at least this minimum, but the string can be useful when stating hardware capabilities. The following five standard extensions are defined to provide varying degrees of vector support and are intended for use with embedded processors. Any of these extensions can be added to base ISAs with XLEN=32 or XLEN=64. The table lists the minimum VLEN and supported EEWs for each extension as well as what floating-point types are supported. Table 19. Embedded vector extensions Extension Minimum VLEN Supported EEW FP32 FP64 Zve32x 32 8, 16, 32 N N Zve32f 32 8, 16, 32 Y N Zve64x 64 8, 16, 32, 64 N N Zve64f 64 8, 16, 32, 64 Y N Zve64d 64 8, 16, 32, 64 Y Y The Zve32f and Zve64x extensions depend on the Zve32x extension. The Zve64f extension depends on the Zve32f and Zve64x extensions. The Zve64d extension depends on the Zve64f extension. All Zve* extensions have precise traps. There is currently no standard support for handling imprecise traps, so standard extensions have to provide precise traps. All Zve* extensions provide support for EEW of 8, 16, and 32, and Zve64* extensions also support EEW of 64. All Zve* extensions support the vector configuration instructions (Configuration-Setting Instructions (vsetvli/vsetivli/vsetvl)). All Zve* extensions support all vector load and store instructions (Vector Loads and Stores), except Zve64* extensions do not support EEW=64 for index values when XLEN=32. All Zve* extensions support all vector integer instructions (Vector Integer Arithmetic Instructions), except that the vmulh integer multiply variants that return the high word of the product (vmulh.vv, vmulh.vx, vmulhu.vv, vmulhu.vx, vmulhsu.vv, vmulhsu.vx) are not included for EEW=64 in Zve64*. Producing the high-word of a product can take substantial additional gates for large EEW. All Zve* extensions support all vector fixed-point arithmetic instructions (Vector Fixed-Point Arithmetic Instructions), except that vsmul.vv and vsmul.vx are not included in EEW=64 in Zve64*. As with vmulh, vsmul requires a large amount of additional logic, and 64-bit fixed-point multiplies are relatively rare. All Zve* extensions support all vector integer single-width and widening reduction operations (Vector Single-Width Integer Reduction Instructions, Vector Widening Integer Reduction Instructions). All Zve* extensions support all vector mask instructions (Vector Mask Instructions). All Zve* extensions support all vector permutation instructions (Vector Permutation Instructions), except that Zve32x and Zve64x do not include those with floating-point operands, and Zve64f does not include those with EEW=64 floating-point operands. The Zve32x extension depends on the Zicsr extension. The Zve32f and Zve64f extensions depend upon the F extension, and implement all vector floating-point instructions (Vector Floating-Point Instructions) for floating-point operands with EEW=32. Vector single-width floating-point reduction operations (Vector Single-Width Floating-Point Reduction Instructions) for EEW=32 are supported. The Zve64d extension depends upon the D extension, and implements all vector floating-point instructions (Vector Floating-Point Instructions) for floating-point operands with EEW=32 or EEW=64 (including widening instructions and conversions between FP32 and FP64). Vector single-width floating-point reductions (Vector Single-Width Floating-Point Reduction Instructions) for EEW=32 and EEW=64 are supported as well as widening reductions from FP32 to FP64. The single-letter V extension is intended for use in application processor profiles. The misa.v bit is set for implementations providing misa and supporting V. The V vector extension has precise traps. The V vector extension depends upon the Zvl128b and Zve64d extensions. The value of 128 was chosen as a compromise for application processors. Providing a larger VLEN allows stripmining code to be elided in some cases for short vectors, but also increases the size of the minimum implementation. Note that larger LMUL can be used to avoid stripmining for longer known-size application vectors at the cost of having fewer available vector register groups. For example, an LMUL of 8 allows vectors of up to sixteen 64-bit elements to be processed without stripmining using four vector register groups. The V extension supports EEW of 8, 16, and 32, and 64. The V extension supports the vector configuration instructions (Configuration-Setting Instructions (vsetvli/vsetivli/vsetvl)). The V extension supports all vector load and store instructions (Vector Loads and Stores), except the V extension does not support EEW=64 for index values when XLEN=32. The V extension supports all vector integer instructions (Vector Integer Arithmetic Instructions). The V extension supports all vector fixed-point arithmetic instructions (Vector Fixed-Point Arithmetic Instructions). The V extension supports all vector integer single-width and widening reduction operations (Vector Single-Width Integer Reduction Instructions, Vector Widening Integer Reduction Instructions). The V extension supports all vector mask instructions (Vector Mask Instructions). The V extension supports all vector permutation instructions (Vector Permutation Instructions). The V extension depends upon the F and D extensions, and implements all vector floating-point instructions (Vector Floating-Point Instructions) for floating-point operands with EEW=32 or EEW=64 (including widening instructions and conversions between FP32 and FP64). Vector single-width floating-point reductions (Vector Single-Width Floating-Point Reduction Instructions) for EEW=32 and EEW=64 are supported as well as widening reductions from FP32 to FP64. As is the case with other RISC-V extensions, it is valid to include overlapping extensions in the same ISA string. For example, RV64GCV and RV64GCV_Zve64f are both valid and equivalent ISA strings, as is RV64GCV_Zve64f_Zve32x_Zvl128b. The Zvfhmin extension provides minimal support for vectors of IEEE 754-2008 binary16 values, adding conversions to and from binary32. When the Zvfhmin extension is implemented, the vfwcvt.f.f.v and vfncvt.f.f.w instructions become defined when SEW=16. The EEW=16 floating-point operands of these instructions use the binary16 format. The Zvfhmin extension depends on the Zve32f extension. The Zvfh extension provides support for vectors of IEEE 754-2008 binary16 values. When the Zvfh extension is implemented, all instructions in Vector Floating-Point Instructions, Vector Single-Width Floating-Point Reduction Instructions, Vector Widening Floating-Point Reduction Instructions, Floating-Point Scalar Move Instructions, Vector Floating-Point Slide1up Instruction, and Vector Floating-Point Slide1down Instruction become defined when SEW=16. The EEW=16 floating-point operands of these instructions use the binary16 format. Additionally, conversions between 8-bit integers and binary16 values are provided. The floating-point-to-integer narrowing conversions (vfncvt[.rtz].x[u].f.w) and integer-to-floating-point widening conversions (vfwcvt.f.x[u].v) become defined when SEW=8. The Zvfh extension depends on the Zve32f and Zfhmin extensions. Requiring basic scalar half-precision support makes Zvfh’s vector-scalar instructions substantially more useful. We considered requiring more complete scalar half-precision support, but we reasoned that, for many half-precision vector workloads, performing the scalar computation in single-precision will suffice. Some vector instructions treat operands as a vector of one or more element groups, where each element group is a fixed number of elements. For example, complex numbers can be viewed as a two-element group (one real element and one imaginary element). As another example, the SHA-256 cryptographic instructions in the Zvknha extension operate on 128-bit values represented as a 4-element group of 32-bit elements. This section describes recommendations and terminology for generic instruction set design for vector instructions that operate on element groups. The element group size (EGS) is the number of elements in one group, and must be a power-of-two (POT). Support for non-POT EGS was considered but causes many practical complications and so has been dropped. Error checking for vl is a little more difficult. For LMUL>1, non-POT EGSs will result in groups straddling the individual vector registers in a vector register group. Non-POT EGS can also cause large increases in the lowest-common-multiple of element group sizes, which adds constraints to vl setting in order to avoid splitting an element group across stripmine iterations in vector-length-agnostic code. The element group size is statically encoded in the instruction, often implicitly as part of the opcode. Executing a vector instruction with EGS > VLMAX causes an illegal instruction exception to be raised. The vector instructions in the base V vector ISA can be viewed as all having an element group size of 1 for all operands statically encoded in the instruction. Many operations only make sense with a certain number of elements per group (e.g., complex operations require a element group size of 2 and SHA-256 requires an element group size of 4). Each source and destination operand to a vector instruction might be defined as either a single element group or a vector of element groups. When an operand is a vector of element groups, the vl setting must correspond to an integer multiple of the element group size, with other values of vl reserved. For example, a SHA-256 instruction would require that vl is a multiple of 4. When element group instructions are present, an additional constraint is placed on the setting of vl based on an AVL value (augmenting Constraints on Setting vl). EGSMAX is the largest EGS supported by the implementation. When AVL > VLMAX, the value of vl must be set to either VLMAX or a positive integer multiple of EGSMAX. As the base vector extension only has element group size of 1, this constraint is backwards-compatible. This constraint prevents element groups being broken across stripmining iterations in vector-length-agnostic code when a VLMAX-size vector would otherwise be able to accommodate a whole number of element groups. If EEW is encoded statically in the instruction, or if an instruction has multiple operands containing vectors of element groups with different EEW, an appropriate SEW must be chosen for vsetvl instructions. Additional constraints may be required for some element group instructions to ensure legal length values for all operands. The vtype SEW can be used to indicate or calculate the effective element size (EEW) of one or more operands of an element group instruction. Where the operand is an element group, SEW and EEW refer to the number of bits in each individual element within a group not the number of bits in the group as a whole. Alternatively, the opcode might encode EEW of all operands statically and ignore the value of SEW when the operation only makes sense for a single size on each operand. Many operations are only defined for one EEW, e.g., SHA-256 requires EEW=32. Encoding EEWs statically in the instruction removes a dynamic dependency on the SEW value and the need to check for errors in SEW values. However, ignoring SEW also prevents reuse of the static opcode with a different dynamic SEW, and in many cases, the SEW setting will be needed for regular vector instructions used to process the individual elements in the vector. The vtype LMUL setting can be used to indicate or calculate the effective length multiplier (EMUL) for one or more operands. Element group instructions tend to exhibit a much wider range of relationships between various operand EEW/EMUL values. For example, an instruction might take a vector of length N of 4-element groups with EEW=8b and reduce each group to produce a vector length N of 1-element groups with EEW=32b. In this case, the input and output EMUL values are equal even though the EEW settings differ by a factor of 4. Each source and destination operand to a vector instruction may have a different element group size, different EMUL, and/or different EEW. The element group width (EGW) is the number of bits in the element group as a whole. For example, the SHA-256 instructions in the Zvknha extension operate on an EGW of 128, with EGS=4 and EEW=32. It is possible to use LMUL to concatenate multiple vector registers together to support larger EGW>VLEN. If software using large-EGW instructions need be portable across a range of implementations, some of which may have VLEN<EGW and hence require LMUL>1, then software can only use a subset of the architectural registers. Profiles can set minimum VLEN requirements to inform authors of such software. Element group operations by their nature will gather data from across a wider portion of a vector datapath than regular vector instructions. Some element group instructions might allow temporal execution of individual element operations in a larger group, while others will require all EGW bits of a group to be presented to a functional unit at the same time. No ratified extensions include masked element-group instructions. Future extensions might extend the element-group scheme to support element-level masking, or might define the concept of a mask element group (which might, e.g., update the destination element group if any mask bit in the mask element group is set). Integer Integer FP funct3 funct3 funct3 OPIVV V OPMVV V OPFVV V OPIVX X OPMVX X OPFVF F OPIVI I funct6 funct6 funct6 000000 V X I vadd 000000 V vredsum 000000 V F vfadd 000001 000001 V vredand 000001 V vfredusum 000010 V X vsub 000010 V vredor 000010 V F vfsub 000011 X I vrsub 000011 V vredxor 000011 V vfredosum 000100 V X vminu 000100 V vredminu 000100 V F vfmin 000101 V X vmin 000101 V vredmin 000101 V vfredmin 000110 V X vmaxu 000110 V vredmaxu 000110 V F vfmax 000111 V X vmax 000111 V vredmax 000111 V vfredmax 001000 001000 V X vaaddu 001000 V F vfsgnj 001001 V X I vand 001001 V X vaadd 001001 V F vfsgnjn 001010 V X I vor 001010 V X vasubu 001010 V F vfsgnjx 001011 V X I vxor 001011 V X vasub 001011 001100 V X I vrgather 001100 001100 001101 001101 001101 001110 X I vslideup 001110 X vslide1up 001110 F vfslide1up 001110 V vrgatherei16 001111 X I vslidedown 001111 X vslide1down 001111 F vfslide1down funct6 funct6 funct6 010000 V X I vadc 010000 V VWXUNARY0 010000 V VWFUNARY0 010000 X VRXUNARY0 010000 F VRFUNARY0 010001 V X I vmadc 010001 010001 010010 V X vsbc 010010 V VXUNARY0 010010 V VFUNARY0 010011 V X vmsbc 010011 010011 V VFUNARY1 010100 010100 V VMUNARY0 010100 010101 010101 010101 010110 010110 010110 010111 V X I vmerge/vmv 010111 V vcompress 010111 F vfmerge/vfmv 011000 V X I vmseq 011000 V vmandn 011000 V F vmfeq 011001 V X I vmsne 011001 V vmand 011001 V F vmfle 011010 V X vmsltu 011010 V vmor 011010 011011 V X vmslt 011011 V vmxor 011011 V F vmflt 011100 V X I vmsleu 011100 V vmorn 011100 V F vmfne 011101 V X I vmsle 011101 V vmnand 011101 F vmfgt 011110 X I vmsgtu 011110 V vmnor 011110 011111 X I vmsgt 011111 V vmxnor 011111 F vmfge funct6 funct6 funct6 100000 V X I vsaddu 100000 V X vdivu 100000 V F vfdiv 100001 V X I vsadd 100001 V X vdiv 100001 F vfrdiv 100010 V X vssubu 100010 V X vremu 100010 100011 V X vssub 100011 V X vrem 100011 100100 100100 V X vmulhu 100100 V F vfmul 100101 V X I vsll 100101 V X vmul 100101 100110 100110 V X vmulhsu 100110 100111 V X vsmul 100111 V X vmulh 100111 F vfrsub 100111 I vmv<nr>r 101000 V X I vsrl 101000 101000 V F vfmadd 101001 V X I vsra 101001 V X vmadd 101001 V F vfnmadd 101010 V X I vssrl 101010 101010 V F vfmsub 101011 V X I vssra 101011 V X vnmsub 101011 V F vfnmsub 101100 V X I vnsrl 101100 101100 V F vfmacc 101101 V X I vnsra 101101 V X vmacc 101101 V F vfnmacc 101110 V X I vnclipu 101110 101110 V F vfmsac 101111 V X I vnclip 101111 V X vnmsac 101111 V F vfnmsac funct6 funct6 funct6 110000 V vwredsumu 110000 V X vwaddu 110000 V F vfwadd 110001 V vwredsum 110001 V X vwadd 110001 V vfwredusum 110010 110010 V X vwsubu 110010 V F vfwsub 110011 110011 V X vwsub 110011 V vfwredosum 110100 110100 V X vwaddu.w 110100 V F vfwadd.w 110101 110101 V X vwadd.w 110101 110110 110110 V X vwsubu.w 110110 V F vfwsub.w 110111 110111 V X vwsub.w 110111 111000 111000 V X vwmulu 111000 V F vfwmul 111001 111001 111001 111010 111010 V X vwmulsu 111010 111011 111011 V X vwmul 111011 111100 111100 V X vwmaccu 111100 V F vfwmacc 111101 111101 V X vwmacc 111101 V F vfwnmacc 111110 111110 X vwmaccus 111110 V F vfwmsac 111111 111111 V X vwmaccsu 111111 V F vfwnmsac Table 20. VRXUNARY0 encoding space vs2 00000 vmv.s.x Table 21. VWXUNARY0 encoding space vs1 00000 vmv.x.s 10000 vcpop 10001 vfirst Table 22. VXUNARY0 encoding space vs1 00010 vzext.vf8 00011 vsext.vf8 00100 vzext.vf4 00101 vsext.vf4 00110 vzext.vf2 00111 vsext.vf2 Table 23. VRFUNARY0 encoding space vs2 00000 vfmv.s.f Table 24. VWFUNARY0 encoding space vs1 00000 vfmv.f.s Table 25. VFUNARY0 encoding space vs1 name single-width converts 00000 vfcvt.xu.f.v 00001 vfcvt.x.f.v 00010 vfcvt.f.xu.v 00011 vfcvt.f.x.v 00110 vfcvt.rtz.xu.f.v 00111 vfcvt.rtz.x.f.v widening converts 01000 vfwcvt.xu.f.v 01001 vfwcvt.x.f.v 01010 vfwcvt.f.xu.v 01011 vfwcvt.f.x.v 01100 vfwcvt.f.f.v 01110 vfwcvt.rtz.xu.f.v 01111 vfwcvt.rtz.x.f.v narrowing converts 10000 vfncvt.xu.f.w 10001 vfncvt.x.f.w 10010 vfncvt.f.xu.w 10011 vfncvt.f.x.w 10100 vfncvt.f.f.w 10101 vfncvt.rod.f.f.w 10110 vfncvt.rtz.xu.f.w 10111 vfncvt.rtz.x.f.w Table 26. VFUNARY1 encoding space vs1 name 00000 vfsqrt.v 00100 vfrsqrt7.v 00101 vfrec7.v 10000 vfclass.v Table 27. VMUNARY0 encoding space vs1 00001 vmsbf 00010 vmsof 00011 vmsif 10000 viota 10001 vid","title":"\"V\" Standard Extension for Vector Operations, Version 1.0","component":"isa","version":"v20250508","name":"v-st-ext","url":"/isa/unpriv/v-st-ext.html","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Implementation-defined Constant Parameters","hash":"implementation-defined-constant-parameters","id":2},{"text":"Vector Extension Programmer’s Model","hash":"vector-extension-programmers-model","id":3},{"text":"Vector Registers","hash":"vector-registers","id":4},{"text":"Vector Context Status in mstatus","hash":"vector-context-status-in-mstatus","id":5},{"text":"Vector Context Status in vsstatus","hash":"vector-context-status-in-vsstatus","id":6},{"text":"Vector Type (vtype) Register","hash":"vector-type-vtype-register","id":7},{"text":"Vector Selected Element Width (vsew[2:0])","hash":"vector-selected-element-width-vsew20","id":8},{"text":"Vector Register Grouping (vlmul[2:0])","hash":"vector-register-grouping","id":9},{"text":"Vector Tail Agnostic and Vector Mask Agnostic vta and vma","hash":"sec-agnostic","id":10},{"text":"Vector Type Illegal (vill)","hash":"vector-type-illegal-vill","id":11},{"text":"Vector Length (vl) Register","hash":"vector-length-vl-register","id":12},{"text":"Vector Byte Length (vlenb) Register","hash":"vector-byte-length-vlenb-register","id":13},{"text":"Vector Start Index (vstart) Register","hash":"vector-start-index-vstart-register","id":14},{"text":"Vector Fixed-Point Rounding Mode (vxrm) Register","hash":"vector-fixed-point-rounding-mode-vxrm-register","id":15},{"text":"Vector Fixed-Point Saturation Flag (vxsat)","hash":"vector-fixed-point-saturation-flag-vxsat","id":16},{"text":"Vector Control and Status (vcsr) Register","hash":"vector-control-and-status-vcsr-register","id":17},{"text":"State of Vector Extension at Reset","hash":"state-of-vector-extension-at-reset","id":18},{"text":"Mapping of Vector Elements to Vector Register State","hash":"mapping-of-vector-elements-to-vector-register-state","id":19},{"text":"Mapping for LMUL = 1","hash":"mapping-for-lmul-1","id":20},{"text":"Mapping for LMUL < 1","hash":"mapping-for-lmul-1-2","id":21},{"text":"Mapping for LMUL > 1","hash":"mapping-for-lmul-1-3","id":22},{"text":"Mapping across Mixed-Width Operations","hash":"sec-mapping-mixed","id":23},{"text":"Mask Register Layout","hash":"sec-mask-register-layout","id":24},{"text":"Vector Instruction Formats","hash":"vector-instruction-formats","id":25},{"text":"Scalar Operands","hash":"scalar-operands","id":26},{"text":"Vector Operands","hash":"sec-vec-operands","id":27},{"text":"Vector Masking","hash":"vector-masking","id":28},{"text":"Mask Encoding","hash":"sec-vector-mask-encoding","id":29},{"text":"Prestart, Active, Inactive, Body, and Tail Element Definitions","hash":"sec-inactive-defs","id":30},{"text":"Configuration-Setting Instructions (vsetvli/vsetivli/vsetvl)","hash":"sec-vector-config","id":31},{"text":"vtype encoding","hash":"vtype-encoding","id":32},{"text":"Unsupported vtype Values","hash":"unsupported-vtype-values","id":33},{"text":"AVL encoding","hash":"avl-encoding","id":34},{"text":"Constraints on Setting vl","hash":"constraints-on-setting-vl","id":35},{"text":"Example of stripmining and changes to SEW","hash":"example-stripmine-sew","id":36},{"text":"Vector Loads and Stores","hash":"sec-vector-memory","id":37},{"text":"Vector Load/Store Instruction Encoding","hash":"vector-loadstore-instruction-encoding","id":38},{"text":"Vector Load/Store Addressing Modes","hash":"vector-loadstore-addressing-modes","id":39},{"text":"Vector Load/Store Width Encoding","hash":"sec-vector-loadstore-width-encoding","id":40},{"text":"Vector Unit-Stride Instructions","hash":"vector-unit-stride-instructions","id":41},{"text":"Vector Strided Instructions","hash":"vector-strided-instructions","id":42},{"text":"Vector Indexed Instructions","hash":"vector-indexed-instructions","id":43},{"text":"Unit-stride Fault-Only-First Loads","hash":"unit-stride-fault-only-first-loads","id":44},{"text":"Vector Load/Store Segment Instructions","hash":"sec-aos","id":45},{"text":"Vector Unit-Stride Segment Loads and Stores","hash":"vector-unit-stride-segment-loads-and-stores","id":46},{"text":"Vector Strided Segment Loads and Stores","hash":"vector-strided-segment-loads-and-stores","id":47},{"text":"Vector Indexed Segment Loads and Stores","hash":"vector-indexed-segment-loads-and-stores","id":48},{"text":"Vector Load/Store Whole Register Instructions","hash":"vector-loadstore-whole-register-instructions","id":49},{"text":"Vector Memory Alignment Constraints","hash":"vector-memory-alignment-constraints","id":50},{"text":"Vector Memory Consistency Model","hash":"vector-memory-consistency-model","id":51},{"text":"Vector Arithmetic Instruction Formats","hash":"vector-arithmetic-instruction-formats","id":52},{"text":"Vector Arithmetic Instruction encoding","hash":"sec-arithmetic-encoding","id":53},{"text":"Widening Vector Arithmetic Instructions","hash":"sec-widening","id":54},{"text":"Narrowing Vector Arithmetic Instructions","hash":"sec-narrowing","id":55},{"text":"Vector Integer Arithmetic Instructions","hash":"sec-vector-integer","id":56},{"text":"Vector Single-Width Integer Add and Subtract","hash":"vector-single-width-integer-add-and-subtract","id":57},{"text":"Vector Widening Integer Add/Subtract","hash":"vector-widening-integer-addsubtract","id":58},{"text":"Vector Integer Extension","hash":"vector-integer-extension","id":59},{"text":"Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions","hash":"vector-integer-add-with-carry-subtract-with-borrow-instructions","id":60},{"text":"Vector Bitwise Logical Instructions","hash":"vector-bitwise-logical-instructions","id":61},{"text":"Vector Single-Width Shift Instructions","hash":"vector-single-width-shift-instructions","id":62},{"text":"Vector Narrowing Integer Right Shift Instructions","hash":"vector-narrowing-integer-right-shift-instructions","id":63},{"text":"Vector Integer Compare Instructions","hash":"vector-integer-compare-instructions","id":64},{"text":"Vector Integer Min/Max Instructions","hash":"vector-integer-minmax-instructions","id":65},{"text":"Vector Single-Width Integer Multiply Instructions","hash":"vector-single-width-integer-multiply-instructions","id":66},{"text":"Vector Integer Divide Instructions","hash":"vector-integer-divide-instructions","id":67},{"text":"Vector Widening Integer Multiply Instructions","hash":"vector-widening-integer-multiply-instructions","id":68},{"text":"Vector Single-Width Integer Multiply-Add Instructions","hash":"vector-single-width-integer-multiply-add-instructions","id":69},{"text":"Vector Widening Integer Multiply-Add Instructions","hash":"vector-widening-integer-multiply-add-instructions","id":70},{"text":"Vector Integer Merge Instructions","hash":"vector-integer-merge-instructions","id":71},{"text":"Vector Integer Move Instructions","hash":"vector-integer-move-instructions","id":72},{"text":"Vector Fixed-Point Arithmetic Instructions","hash":"sec-vector-fixed-point","id":73},{"text":"Vector Single-Width Saturating Add and Subtract","hash":"vector-single-width-saturating-add-and-subtract","id":74},{"text":"Vector Single-Width Averaging Add and Subtract","hash":"vector-single-width-averaging-add-and-subtract","id":75},{"text":"Vector Single-Width Fractional Multiply with Rounding and Saturation","hash":"vector-single-width-fractional-multiply-with-rounding-and-saturation","id":76},{"text":"Vector Single-Width Scaling Shift Instructions","hash":"vector-single-width-scaling-shift-instructions","id":77},{"text":"Vector Narrowing Fixed-Point Clip Instructions","hash":"vector-narrowing-fixed-point-clip-instructions","id":78},{"text":"Vector Floating-Point Instructions","hash":"sec-vector-float","id":79},{"text":"Vector Floating-Point Exception Flags","hash":"vector-floating-point-exception-flags","id":80},{"text":"Vector Single-Width Floating-Point Add/Subtract Instructions","hash":"vector-single-width-floating-point-addsubtract-instructions","id":81},{"text":"Vector Widening Floating-Point Add/Subtract Instructions","hash":"vector-widening-floating-point-addsubtract-instructions","id":82},{"text":"Vector Single-Width Floating-Point Multiply/Divide Instructions","hash":"vector-single-width-floating-point-multiplydivide-instructions","id":83},{"text":"Vector Widening Floating-Point Multiply","hash":"vector-widening-floating-point-multiply","id":84},{"text":"Vector Single-Width Floating-Point Fused Multiply-Add Instructions","hash":"vector-single-width-floating-point-fused-multiply-add-instructions","id":85},{"text":"Vector Widening Floating-Point Fused Multiply-Add Instructions","hash":"vector-widening-floating-point-fused-multiply-add-instructions","id":86},{"text":"Vector Floating-Point Square-Root Instruction","hash":"vector-floating-point-square-root-instruction","id":87},{"text":"Vector Floating-Point Reciprocal Square-Root Estimate Instruction","hash":"vector-floating-point-reciprocal-square-root-estimate-instruction","id":88},{"text":"Vector Floating-Point Reciprocal Estimate Instruction","hash":"vector-floating-point-reciprocal-estimate-instruction","id":89},{"text":"Vector Floating-Point MIN/MAX Instructions","hash":"vector-floating-point-minmax-instructions","id":90},{"text":"Vector Floating-Point Sign-Injection Instructions","hash":"vector-floating-point-sign-injection-instructions","id":91},{"text":"Vector Floating-Point Compare Instructions","hash":"vector-floating-point-compare-instructions","id":92},{"text":"Vector Floating-Point Classify Instruction","hash":"vector-floating-point-classify-instruction","id":93},{"text":"Vector Floating-Point Merge Instruction","hash":"vector-floating-point-merge-instruction","id":94},{"text":"Vector Floating-Point Move Instruction","hash":"vector-floating-point-move-instruction","id":95},{"text":"Single-Width Floating-Point/Integer Type-Convert Instructions","hash":"single-width-floating-pointinteger-type-convert-instructions","id":96},{"text":"Widening Floating-Point/Integer Type-Convert Instructions","hash":"widening-floating-pointinteger-type-convert-instructions","id":97},{"text":"Narrowing Floating-Point/Integer Type-Convert Instructions","hash":"narrowing-floating-pointinteger-type-convert-instructions","id":98},{"text":"Vector Reduction Operations","hash":"vector-reduction-operations","id":99},{"text":"Vector Single-Width Integer Reduction Instructions","hash":"sec-vector-integer-reduce","id":100},{"text":"Vector Widening Integer Reduction Instructions","hash":"sec-vector-integer-reduce-widen","id":101},{"text":"Vector Single-Width Floating-Point Reduction Instructions","hash":"sec-vector-float-reduce","id":102},{"text":"Vector Ordered Single-Width Floating-Point Sum Reduction","hash":"vector-ordered-single-width-floating-point-sum-reduction","id":103},{"text":"Vector Unordered Single-Width Floating-Point Sum Reduction","hash":"vector-unordered-single-width-floating-point-sum-reduction","id":104},{"text":"Vector Single-Width Floating-Point Max and Min Reductions","hash":"vector-single-width-floating-point-max-and-min-reductions","id":105},{"text":"Vector Widening Floating-Point Reduction Instructions","hash":"sec-vector-float-reduce-widen","id":106},{"text":"Vector Mask Instructions","hash":"sec-vector-mask","id":107},{"text":"Vector Mask-Register Logical Instructions","hash":"sec-mask-register-logical","id":108},{"text":"Vector count population in mask vcpop.m","hash":"vector-count-population-in-mask-vcpop-m","id":109},{"text":"vfirst find-first-set mask bit","hash":"vfirst-find-first-set-mask-bit","id":110},{"text":"vmsbf.m set-before-first mask bit","hash":"vmsbf-m-set-before-first-mask-bit","id":111},{"text":"vmsif.m set-including-first mask bit","hash":"vmsif-m-set-including-first-mask-bit","id":112},{"text":"vmsof.m set-only-first mask bit","hash":"vmsof-m-set-only-first-mask-bit","id":113},{"text":"Example using vector mask instructions","hash":"example-using-vector-mask-instructions","id":114},{"text":"Vector Iota Instruction","hash":"vector-iota-instruction","id":115},{"text":"Vector Element Index Instruction","hash":"vector-element-index-instruction","id":116},{"text":"Vector Permutation Instructions","hash":"sec-vector-permute","id":117},{"text":"Integer Scalar Move Instructions","hash":"integer-scalar-move-instructions","id":118},{"text":"Floating-Point Scalar Move Instructions","hash":"sec-vector-float-move","id":119},{"text":"Vector Slide Instructions","hash":"vector-slide-instructions","id":120},{"text":"Vector Slideup Instructions","hash":"vector-slideup-instructions","id":121},{"text":"Vector Slidedown Instructions","hash":"vector-slidedown-instructions","id":122},{"text":"Vector Slide1up","hash":"vector-slide1up","id":123},{"text":"Vector Floating-Point Slide1up Instruction","hash":"sec-vfslide1up","id":124},{"text":"Vector Slide1down Instruction","hash":"vector-slide1down-instruction","id":125},{"text":"Vector Floating-Point Slide1down Instruction","hash":"sec-vfslide1down","id":126},{"text":"Vector Register Gather Instructions","hash":"vector-register-gather-instructions","id":127},{"text":"Vector Compress Instruction","hash":"vector-compress-instruction","id":128},{"text":"Synthesizing vdecompress","hash":"synthesizing-vdecompress","id":129},{"text":"Whole Vector Register Move","hash":"whole-vector-register-move","id":130},{"text":"Exception Handling","hash":"exception-handling","id":131},{"text":"Precise vector traps","hash":"precise-vector-traps","id":132},{"text":"Imprecise vector traps","hash":"imprecise-vector-traps","id":133},{"text":"Selectable precise/imprecise traps","hash":"selectable-preciseimprecise-traps","id":134},{"text":"Swappable traps","hash":"swappable-traps","id":135},{"text":"Standard Vector Extensions","hash":"sec-vector-extensions","id":136},{"text":"Zvl*: Minimum Vector Length Standard Extensions","hash":"zvl-minimum-vector-length-standard-extensions","id":137},{"text":"Zve*: Vector Extensions for Embedded Processors","hash":"zve-vector-extensions-for-embedded-processors","id":138},{"text":"V: Vector Extension for Application Processors","hash":"v-vector-extension-for-application-processors","id":139},{"text":"Zvfhmin: Vector Extension for Minimal Half-Precision Floating-Point","hash":"zvfhmin-vector-extension-for-minimal-half-precision-floating-point","id":140},{"text":"Zvfh: Vector Extension for Half-Precision Floating-Point","hash":"zvfh-vector-extension-for-half-precision-floating-point","id":141},{"text":"Vector Element Groups","hash":"vector-element-groups","id":142},{"text":"Element Group Size","hash":"element-group-size","id":143},{"text":"Setting vl","hash":"setting-vl","id":144},{"text":"Determining EEW","hash":"determining-eew","id":145},{"text":"Determining EMUL","hash":"determining-emul","id":146},{"text":"Element Group Width","hash":"element-group-width","id":147},{"text":"Masking","hash":"masking","id":148},{"text":"Vector Instruction Listing","hash":"vector-instruction-listing","id":149}]},"52":{"id":52,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Cryptography Extensions: Vector Instructions, Version 1.0 This document describes the Vector Cryptography extensions to the RISC-V Instruction Set Architecture. This document describes the RISC-V vector cryptography extensions. All instructions proposed here are based on the Vector registers. The instructions are designed to be highly performant, with large application and server-class cores being the main target. A companion chapter Volume I: Scalar & Entropy Source Instructions, describes cryptographic instruction proposals for smaller cores which do not implement the vector extension. Cryptography is a specialized subject, requiring people with many different backgrounds to cooperate in its secure and efficient implementation. Where possible, we have written this specification to be understandable by all, though we recognize that the motivations and references to algorithms or other specifications and standards may be unfamiliar to those who are not domain experts. This specification anticipates being read and acted on by various people with different backgrounds. We have tried to capture these backgrounds here, with a brief explanation of what we expect them to know, and how it relates to the specification. We hope this aids people’s understanding of which aspects of the specification are particularly relevant to them, and which they may (safely!) ignore or pass to a colleague. Cryptographers and cryptographic software developers These are the people we expect to write code using the instructions in this specification. They should understand the motivations for the instructions we include, and be familiar with most of the algorithms and outside standards to which we refer. Computer architects We do not expect architects to have a cryptography background. We nonetheless expect architects to be able to examine our instructions for implementation issues, understand how the instructions will be used in context, and advise on how best to fit the functionality the cryptographers want. Digital design engineers & micro-architects These are the people who will implement the specification inside a core. Again, no cryptography expertise is assumed, but we expect them to interpret the specification and anticipate any hardware implementation issues, e.g., where high-frequency design considerations apply, or where latency/area tradeoffs exist etc. In particular, they should be aware of the literature around efficiently implementing AES and SM4 SBoxes in hardware. Verification engineers These people are responsible for ensuring the correct implementation of the extensions in hardware. No cryptography background is assumed. We expect them to identify interesting test cases from the specification. An understanding of their real-world usage will help with this. These are by no means the only people concerned with the specification, but they are the ones we considered most while writing it. RISC-V maintains a formal model of the ISA specification, implemented in the Sail ISA specification language [27]. Note that Sail refers to the specification language itself, and that there is a model of RISC-V, written using Sail. It was our intention to include actual Sail code in this specification. However, the Vector Crypto Sail model needs the Vector Sail model as a basis on which to build. This Vector Cryptography extensions specification was completed before there was an approved RISC-V Vector Sail Model. Therefore, we don’t have any Sail code to include in the instruction descriptions. Instead we have included Sail-like pseudocode. While we have endeavored to adhere to Sail syntax, we have taken some liberties for the sake of simplicity where we believe that that our intent is clear to the reader. Where variables are concatenated, the order shown is how they would appear in a vector register from left to right. For example, an element group specified as {a, b, e, f} would appear in a vector register with a having the highest element index of the group and f having the lowest index of the group. For the sake of brevity, our pseudocode does not include the handling of masks or tail elements. We follow the undisturbed and agnostic policies for masks and tails as described in the RISC-V \"V\" Vector Extension specification. Furthermore, the code does not explicitly handle overlap and SEW constraints; these are, however, explicitly stated in the text. In many cases the pseudocode includes calls to supporting functions which are too verbose to include directly in the specification. This supporting code is listed in Supporting Sail Code. The Sail Manual is recommended reading in order to best understand the code snippets. Also, the The Sail Programming Language: A Sail Cookbook is a good reference. For the latest RISC-V Sail model, refer to the formal model Github repository. In creating this proposal, we tried to adhere to the following policies: Where there is a choice between: 1) supporting diverse implementation strategies for an algorithm or 2) supporting a single implementation style which is more performant / less expensive; the vector crypto extensions will pick the more constrained but performant option. This fits a common pattern in other parts of the RISC-V specifications, where recommended (but not required) instruction sequences for performing particular tasks are given as an example, such that both hardware and software implementers can optimize for only a single use-case. The extensions will be designed to support existing standardized cryptographic constructs well. It will not try to support proposed standards, or cryptographic constructs which exist only in academia. Cryptographic standards which are settled upon concurrently with or after the RISC-V vector cryptographic extensions standardization will be dealt with by future RISC-V vector cryptographic standard extensions. Historically, there has been some discussion [28] on how newly supported operations in general-purpose computing might enable new bases for cryptographic algorithms. The standard will not try to anticipate new useful low-level operations which may be useful as building blocks for future cryptographic constructs. Regarding side-channel countermeasures: Where relevant, proposed instructions must aim to remove the possibility of any timing side-channels. All instructions shall be implemented with data-independent timing. That is, the latency of the execution of these instructions shall not vary with different input values. Many vector crypto instructions operate on operands that are wider than elements (which are currently limited to 64 bits wide). Typically, these operands are 128- and 256-bits wide. In many cases, these operands are comprised of smaller operands that are combined (for example, each SHA-2 operand is comprised of 4 words). However, in other cases these operands are a single value (for example, in the AES round instructions, each operand is 128-bit block or round key). We treat these operands as a vector of one or more element groups as defined in [vector-element-groups]. Each vector crypto instruction that operates on element groups explicitly specifies their three defining parameters: EGW, EGS, and EEW. Instruction Group Extension EGW EEW EGS AES Zvkned 128 32 4 SHA256 zvknh[ab] 128 32 4 SHA512 zvknhb 256 64 4 GCM Zvkg 128 32 4 SM4 Zvksed 128 32 4 SM3 Zvksh 256 32 8 Element Group Width (EGW) - total number of bits in an element group Effective Element Width (EEW) - number of bits in each element Element Group Size (EGS) - number of elements in an element group For all of the vector crypto instructions in this specification, EEW=SEW. The required SEW for each cryptographic instruction was chosen to match what is typically needed for other instructions when implementing the targeted algorithm. A Vector Element Group is a vector of one or more element groups. A Scalar Element Group is a single element group. Element groups can be formed across registers in implementations where VLEN< EGW by using an LMUL>1. Since the vector extension for application processors requires a minimum of VLEN of 128, at most such implementations would require LMUL=2 to form the largest element groups in this specification. However, implementations with a smaller VLEN, such as embedded designs, will requires a larger LMUL to form the necessary element groups. It is important to keep in mind that this reduces the number of register groups available such that it may be difficult or impossible to write efficient code for the intended cryptographic algorithms. For example, an implementation with VLEN=32 would need to set LMUL=8 to create a 256-bit element group for SM3. This would mean that there would only be 4 register groups, 3 of which would be consumed by a single SM3 message-expansion instruction. As with all vector instructions, the number of elements processed is specified by the vector length vl. The number of element groups operated upon is then vl/EGS. Likewise the starting element group is vstart/EGS. See Instruction Constraints for limitations on vl and vstart for vector crypto instructions. All standard vector instruction constraints specified by RVV 1.0 apply to Vector Crypto instructions. In addition to those constraints a few additional specific constraints are introduced. The following is a quick reference for the various constraints of specific Vector Crypto instructions. vl and vstart constraints Since vl and vstart refer to elements, Vector Crypto instructions that use elements groups (See Element Groups) require that these values are an integer multiple of the Element Group Size (EGS). Instructions that violate the vl or vstart requirements are reserved. Instructions EGS vaes* 4 vsha2* 4 vg* 4 vsm3* 8 vsm4* 4 LMUL constraints For element-group instructions, LMUL*VLEN must always be at least as large as EGW, otherwise an illegal-instruction exception is raised, even if vl=0. Instructions SEW EGW vaes* 32 128 vsha2* 32 128 vsha2* 64 256 vg* 32 128 vsm3* 32 256 vsm4* 32 128 SEW constraints Some Vector Crypto instructions are only defined for a specific SEW. In such a case all other SEW values are reserved. Instructions Required SEW vaes* 32 Zvknha: vsha2* 32 Zvknhb: vsha2* 32 or 64 vclmul[h] 64 vg* 32 vsm3* 32 vsm4* 32 Vector/Scalar constraints This specification defines new vector/scalar (.vs) instructions that uses Scalar Element Groups. The Scalar Element Group operand has EMUL = ceil(EGW / VLEN). Scalar element group operands do not need to be aligned to LMUL for any implementation with VLEN >= EGW. In the case of the .vs instructions defined in this specification, vs2 holds a 128-bit scalar element group. For implementations with VLEN ≥ 128, vs2 refers to a single register. Thus, the vd register group must not overlap the vs2 register. However, in implementations where VLEN < 128, vs2 refers to a register group comprised of the number of registers needed to hold the 128-bit scalar element group. In this case, the vd register group must not overlap this vs2 register group. Instruction Register Cannot Overlap vaes*.vs vs2 vd vsm4r.vs vs2 vd vsha2c[hl] vs1, vs2 vd vsha2ms vs1, vs2 vd vsm3me vs2 vd vsm3c vs2 vd The RISC-V Vector Extension defines three encodings for Vector-Scalar operations which get their scalar operand from a GPR or FP register: OPIVX: Scalar GPR x register OPFVF: Scalar FP f register OPMVX: Scalar GPR x register However, the Vector Extensions include Vector Reduction Operations which can also be considered Vector-Scalar operations because a scalar operand is provided from element 0 of vector register vs1. The vector operand is provided in vector register group vs2. These reduction operations all use the .vs suffix in their mnemonics. Additionally, the reduction operations all produce a scalar result in element 0 of the destination register, vd. The Vector Crypto Extensions define Vector-Scalar instructions that are similar to these Vector Reduction Operations in that they get a scalar operand from a vector register. However, they differ in that they get a scalar element group (see Element Groups) from vs2 and they return vector results to vd, which is also a source vector operand. These Vector-Scalar crypto instructions also use the .vs suffix in their mnemonics. We chose to use vs2 as the scalar operand, and vd as the vector operand, so that we could use the vs1 specifier as additional encoding bits for these instructions. This allows these instructions to have a much smaller encoding footprint, leaving more rooms for other instructions in the future. These instructions enable a single key, specified as a scalar element group in vs2, to be applied to each element group of register group vd. Scalar element groups will occupy at most a single register in application processors. However, in implementations where VLEN<128, they will occupy 2 (VLEN=64) or 4 (VLEN=32) registers. It is common for multiple AES encryption rounds (for example) to be performed in parallel with the same round key (e.g. in counter modes). Rather than having to first splat the common key across the whole vector group, these vector-scalar crypto instructions allow the round key to be specified as a scalar element group. The following contains some guidelines that enable the portability of vector-crypto-based code to implementations with different values for VLEN Application Processors Application processors are expected to follow the V-extension and will therefore have VLEN ≥ 128. Since most of the cryptography-specific instructions have an EGW=128, nothing special needs to be done for these instructions to support implementations with VLEN=128. However, the SHA-512 and SM3 instructions have an EGW=256. Implementations with VLEN = 128, require that LMUL is doubled for these instructions in order to create 256-bit elements across a pair of registers. Code written with this doubling of LMUL will not affect the results returned by implementations with VLEN ≥ 256 because vl controls how many element groups are processed. Therefore, we recommend that libraries that implement SHA-512 and SM3 employ this doubling of LMUL to ensure that the software can run on all implementation with VLEN ≥ 128. While the doubling of LMUL for these instructions is safe for implementations with VLEN ≥ 256, it may be less optimal as it will result in unnecessary register pressure and might exact a performance penalty in some microarchitectures. Therefore, we suggest that in addition to providing portable code for SHA-512 and SM3, libraries should also include more optimal code for these instructions when VLEN ≥ 256. Algorithm Instructions VLEN LMUL SHA-512 vsha2* 64 vl/2 SM3 vsm3* 32 vl/4 Embedded Processors Embedded processors will typically have implementations with VLEN < 128. This will require code to be written with larger LMUL values to enable the element groups to be formed. The .vs instructions require scalar element groups of EGW=128. On implementations with VLEN < 128, these scalar element groups will necessarily be formed across registers. This is different from most scalars in vector instructions that typically consume part of a single register. We recommend that different code be available for VLEN=32 and VLEN=64, as code written for VLEN=32 will likely be too burdensome for VLEN=64 implementations. The section introduces all of the extensions in the Vector Cryptography Instruction Set Extension Specification. The Zvknhb and Zvbc Vector Crypto Extensions --and accordingly the composite extensions Zvkn, Zvknc, Zvkng, and Zvksc-- depend on Zve64x. All of the other Vector Crypto Extensions depend on Zve32x. Note: If Zve32x is supported then Zvkb or Zvbb provide support for EEW of 8, 16, and 32. If Zve64x is supported then Zvkb or Zvbb also add support for EEW 64. All cryptography-specific instructions defined in this Vector Crypto specification (i.e., those in Zvkned, Zvknh[ab], Zvkg, Zvksed and Zvksh but not Zvbb,Zvkb, or Zvbc) shall be executed with data-independent execution latency as defined in the RISC-V Scalar Cryptography Extensions specification. It is important to note that the Vector Crypto instructions are independent of the implementation of the Zkt extension and do not require that Zkt is implemented. This specification includes a Zvkt extension that, when implemented, requires certain vector instructions (including Zvbb, Zvkb, and Zvbc) to be executed with data-independent execution latency. Detection of individual cryptography extensions uses the unified software-based RISC-V discovery method. At the time of writing, these discovery mechanisms are still a work in progress. Vector basic bit-manipulation instructions. This extension is a superset of the Zvkb extension. Mnemonic Instruction vandn.[vv,vx] Vector And-Not vbrev.v Vector Reverse Bits in Elements vbrev8.v Vector Reverse Bits in Bytes vrev8.v Vector Reverse Bytes vclz.v Vector Count Leading Zeros vctz.v Vector Count Trailing Zeros vcpop.v Vector Population Count vrol.[vv,vx] Vector Rotate Left vror.[vv,vx,vi] Vector Rotate Right vwsll.[vv,vx,vi] Vector Widening Shift Left Logical General purpose carryless multiplication instructions which are commonly used in cryptography and hashing (e.g., Elliptic curve cryptography, GHASH, CRC). These instructions are only defined for SEW=64. Mnemonic Instruction vclmul.[vv,vx] Vector Carry-less Multiply vclmulh.[vv,vx] Vector Carry-less Multiply Return High Half Vector bit-manipulation instructions that are essential for implementing common cryptographic workloads securely & efficiently. This Zvkb extension is a proper subset of the Zvbb extension. Zvkb allows for vector crypto implementations without incurring the the cost of implementing the additional bitmanip instructions in the Zvbb extension: vbrev.v, vclz.v, vctz.v, vcpop.v, and vwsll.[vv,vx,vi]. Mnemonic Instruction vandn.[vv,vx] Vector And-Not vbrev8.v Vector Reverse Bits in Bytes vrev8.v Vector Reverse Bytes vrol.[vv,vx] Vector Rotate Left vror.[vv,vx,vi] Vector Rotate Right Instructions to enable the efficient implementation of GHASHH which is used in Galois/Counter Mode (GCM) and Galois Message Authentication Code (GMAC). All of these instructions work on 128-bit element groups comprised of four 32-bit elements. GHASHH is defined in the \"Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC\" [41] (NIST Specification). GCM is used in conjunction with block ciphers (e.g., AES and SM4) to encrypt a message and provide authentication. GMAC is used to provide authentication of a message without encryption. To help avoid side-channel timing attacks, these instructions shall be implemented with data-independent timing. The number of element groups to be processed is vl/EGS. vl must be set to the number of SEW=32 elements to be processed and therefore must be a multiple of EGS=4. Likewise, vstart must be a multiple of EGS=4. SEW EGW Mnemonic Instruction 32 128 vghsh.vv Vector GHASH Add-Multiply 32 128 vgmul.vv Vector GHASH Multiply Instructions for accelerating encryption, decryption and key-schedule functions of the AES block cipher as defined in Federal Information Processing Standards Publication 197 All of these instructions work on 128-bit element groups comprised of four 32-bit elements. For the best performance, it is suggested that these instruction be implemented on systems with VLEN>=128. On systems with VLEN<128, element groups may be formed by concatenating 32-bit elements from two or four registers by using an LMUL =2 and LMUL=4 respectively. To help avoid side-channel timing attacks, these instructions shall be implemented with data-independent timing. The number of element groups to be processed is vl/EGS. vl must be set to the number of SEW=32 elements to be processed and therefore must be a multiple of EGS=4. Likewise, vstart must be a multiple of EGS=4. SEW EGW Mnemonic Instruction 32 128 vaesef.[vv,vs] Vector AES encrypt final round 32 128 vaesem.[vv,vs] Vector AES encrypt middle round 32 128 vaesdf.[vv,vs] Vector AES decrypt final round 32 128 vaesdm.[vv,vs] Vector AES decrypt middle round 32 128 vaeskf1.vi Vector AES-128 Forward KeySchedule 32 128 vaeskf2.vi Vector AES-256 Forward KeySchedule 32 128 vaesz.vs Vector AES round zero Instructions for accelerating SHA-2 as defined in FIPS PUB 180-4 Secure Hash Standard (SHS) SEW differentiates between SHA-256 (SEW=32) and SHA-512 (SEW=64). SHA-256: these instructions work on 128-bit element groups comprised of four 32-bit elements. SHA-512: these instructions work on 256-bit element groups comprised of four 64-bit elements. SEW EGW SHA-2 Extension 32 128 SHA-256 Zvknha, Zvknhb 64 256 SHA-512 Zvknhb Zvknhb supports SHA-256 and SHA-512. Zvknha supports only SHA-256. SHA-256 implementations with VLEN < 128 require LMUL>1 to combine 32-bit elements from register groups to provide all four elements of the element group. SHA-512 implementations with VLEN < 256 require LMUL>1 to combine 64-bit elements from register groups to provide all four elements of the element group. To help avoid side-channel timing attacks, these instructions shall be implemented with data-independent timing. The number of element groups to be processed is vl/EGS. vl must be set to the number of SEW elements to be processed and therefore must be a multiple of EGS=4. Likewise, vstart must be a multiple of EGS=4. Mnemonic Instruction vsha2ms.vv Vector SHA-2 Message Schedule vsha2c[hl].vv Vector SHA-2 Compression Instructions for accelerating encryption, decryption and key-schedule functions of the SM4 block cipher. The SM4 block cipher is specified in 32907-2016: {SM4} Block Cipher Algorithm There are other various sources available that describe the SM4 block cipher. While not the final version of the standard, RFC 8998 ShangMi (SM) Cipher Suites for TLS 1.3 is useful and easy to access. All of these instructions work on 128-bit element groups comprised of four 32-bit elements. To help avoid side-channel timing attacks, these instructions shall be implemented with data-independent timing. The number of element groups to be processed is vl/EGS. vl must be set to the number of SEW=32 elements to be processed and therefore must be a multiple of EGS=4. Likewise, vstart must be a multiple of EGS=4. SEW EGW Mnemonic Instruction 32 128 vsm4k.vi Vector SM4 Key Expansion 32 128 vsm4r.[vv,vs] SM4 Block Cipher Rounds Instructions for accelerating functions of the SM3 Hash Function. The SM3 secure hash algorithm is specified in 32905-2016: SM3 Cryptographic Hash Algorithm There are other various sources available that describe the SM3 secure hash. While not the final version of the standard, RFC 8998 ShangMi (SM) Cipher Suites for TLS 1.3 is useful and easy to access. All of these instructions work on 256-bit element groups comprised of eight 32-bit elements. Implementations with VLEN < 256 require LMUL>1 to combine 32-bit elements from register groups to provide all eight elements of the element group. To help avoid side-channel timing attacks, these instructions shall be implemented with data-independent timing. The number of element groups to be processed is vl/EGS. vl must be set to the number of SEW=32 elements to be processed and therefore must be a multiple of EGS=8. Likewise, vstart must be a multiple of EGS=8. SEW EGW Mnemonic Instruction 32 256 vsm3me.vv SM3 Message Expansion 32 256 vsm3c.vi SM3 Compression This extension is shorthand for the following set of other extensions: Included Extension Description Zvkned Zvkned Zvknhb Zvknhb Zvkb Zvkb Zvkt Zvkt While Zvkg and Zvbc are not part of this extension, it is recommended that at least one of them is implemented with this extension to enable efficient AES-GCM. This extension is shorthand for the following set of other extensions: Included Extension Description Zvkn Zvkn Zvbc Zvbc This extension combines the NIST Algorithm Suite with the vector carryless multiply extension to enable AES-GCM. This extension is shorthand for the following set of other extensions: Included Extension Description Zvkn Zvkn Zvkg Zvkg This extension combines the NIST Algorithm Suite with the GCM/GMAC extension to enable high-performance AES-GCM. This extension is shorthand for the following set of other extensions: Included Extension Description Zvksed Zvksed Zvksh Zvksh Zvkb Zvkb Zvkt Zvkt While Zvkg and Zvbc are not part of this extension, it is recommended that at least one of them is implemented with this extension to enable efficient SM4-GCM. This extension is shorthand for the following set of other extensions: Included Extension Description Zvks Zvks Zvbc Zvbc This extension combines the ShangMi Algorithm Suite with the vector carryless multiply extension to enable SM4-GCM. This extension is shorthand for the following set of other extensions: Included Extension Description Zvks Zvks Zvkg Zvkg This extension combines the ShangMi Algorithm Suite with the GCM/GMAC extension to enable high-performance SM4-GCM. The Zvkt extension requires all implemented instructions from the following list to be executed with data-independent execution latency as defined in the RISC-V Scalar Cryptography Extensions specification. Data-independent execution latency (DIEL) applies to all data operands of an instruction, even those that are not a part of the body or that are inactive. However, DIEL does not apply to other values such as vl, vtype, and the mask (when used to control execution of a masked vector instruction). Also, DIEL does not apply to constant values specified in the instruction encoding such as the use of the zero register (x0), and, in the case of immediate forms of an instruction, the values in the immediate fields (i.e., imm, and uimm). In some cases --- which are explicitly specified in the lists below --- operands that are used as control rather than data are exempt from DIEL. DIEL helps protect against side-channel timing attacks that are used to determine data values that are intended to be kept secret. Such values include cryptographic keys, plain text, and partially encrypted text. DIEL is not intended to keep software (and cryptographic algorithms contained therein) secret as it is assumed that an adversary would already know these. This is why DIEL doesn’t apply to constants embedded in instruction encodings. It is important that the values of elements that are not in the body or that are masked off do not affect the execution latency of the instruction. Sometimes such elements contain data that also needs to be kept secret. vandn.v[vx] vclz.v vcpop.v vctz.v vbrev.v vbrev8.v vrev8.v vrol.v[vx] vror.v[vxi] vwsll.[vv,vx,vi] All Zvkb instructions are also covered by DIEL as they are a proper subset of Zvbb vclmul[h].v[vx] v[r]sub.v[vx] vadd.v[ivx] vsub.v[vx] vwadd[u].[vw][vx] vwsub[u].[vw][vx] vadc.v[ivx]m vmadc.v[ivx][m] vmsbc.v[vx]m vsbc.v[vx]m vmseq.v[vxi] vmsgt[u].v[xi] vmsle[u].v[xi] vmslt[u].v[xi] vmsne.v[ivx] vmv.s.x vmv.v.[ivxs] vmv[1248]r.v vsext.vf[248] vzext.vf[248] vand.v[ivx] vm[n]or.mm vmand[n].mm vmnand.mm vmorn.mm vmx[n]or.mm vor.v[ivx] vxor.v[ivx] vmul[h].v[vx] vmulh[s]u.v[vx] vwmul.v[vx] vwmul[s]u.v[vx] vmacc.v[vx] vmadd.v[vx] vnmsac.v[vx] vnmsub.v[vx] vwmacc.v[vx] vwmacc[s]u.v[vx] vwmaccus.vx vmerge.v[ivx]m In the .vv and .xv forms of the vrgather[ei16] instructions, the values in vs1 and rs1 are used for control and therefore are exempt from DIEL. vrgather.v[ivx] vrgatherei16.vv vnsr[al].w[ivx] vsll.v[ivx] vsr[al].v[ivx] vslide1[up|down].vx vfslide1[up|down].vf In the vslide[up|down].vx instructions, the value in rs1 is used for control (i.e., slide amount) and therefore is exempt from DIEL. vslide[up|down].v[ix] The following instructions are not affected by Zvkt: All storage operations All floating-point operations add/sub saturate vsadd[u].v[ivx] vssub[u].v[vx] clip vnclip[u].w[ivx] compress vcompress.vm divide vdiv[u].v[vx] vrem[u].v[vx] average vaadd[u].v[vx] vasub[u].v[vx] mask Op vcpop.m vfirst.m vid.v viota.m vms[bio]f.m min/max vmax[u].v[vx] vmin[u].v[vx] Multiply-saturate vsmul.v[vx] reduce vredsum.vs vwredsum[u].vs vred[and|or|xor].vs vred[min|max][u].vs shift round vssra.v[ivx] vssrl.v[ivx] vset vsetivli vsetvl[i] Synopsis Vector AES final-round decryption Mnemonic vaesdf.vv vd, vs2 vaesdf.vs vd, vs2 Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 32 Only for the .vs form: the vd register group overlaps the vs2 scalar element group Arguments Register Direction EGW EGS EEW Definition Vd input 128 4 32 round state Vs2 input 128 4 32 round key Vd output 128 4 32 new round state Description A final-round AES block cipher decryption is performed. The InvShiftRows and InvSubBytes steps are applied to each round state element group from vd. This is then XORed with the round key in either the corresponding element group in vs2 (vector-vector form) or scalar element group in vs2 (vector-scalar form). This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. Operation function clause execute (VAESDF(vs2, vd, suffix)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let keyelem = if suffix == \"vv\" then i else 0; let state : bits(128) = get_velem(vd, EGW=128, i); let rkey : bits(128) = get_velem(vs2, EGW=128, keyelem); let sr : bits(128) = aes_shift_rows_inv(state); let sb : bits(128) = aes_subbytes_inv(sr); let ark : bits(128) = sb ^ rkey; set_velem(vd, EGW=128, i, ark); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Vector AES middle-round decryption Mnemonic vaesdm.vv vd, vs2 vaesdm.vs vd, vs2 Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 32 Only for the .vs form: the vd register group overlaps the vs2 scalar element group Arguments Register Direction EGW EGS EEW Definition Vd input 128 4 32 round state Vs2 input 128 4 32 round key Vd output 128 4 32 new round state Description A middle-round AES block cipher decryption is performed. The InvShiftRows and InvSubBytes steps are applied to each round state element group from vd. This is then XORed with the round key in either the corresponding element group in vs2 (vector-vector form) or the scalar element group in vs2 (vector-scalar form). The result is then applied to the InvMixColumns step. This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. Operation function clause execute (VAESDM(vs2, vd, suffix)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let keyelem = if suffix == \"vv\" then i else 0; let state : bits(128) = get_velem(vd, EGW=128, i); let rkey : bits(128) = get_velem(vs2, EGW=128, keyelem); let sr : bits(128) = aes_shift_rows_inv(state); let sb : bits(128) = aes_subbytes_inv(sr); let ark : bits(128) = sb ^ rkey; let mix : bits(128) = aes_mixcolumns_inv(ark); set_velem(vd, EGW=128, i, mix); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Vector AES final-round encryption Mnemonic vaesef.vv vd, vs2 vaesef.vs vd, vs2 Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 32 Only for the .vs form: the vd register group overlaps the vs2 scalar element group Arguments Register Direction EGW EGS EEW Definition vd input 128 4 32 round state vs2 input 128 4 32 round key vd output 128 4 32 new round state Description A final-round encryption function of the AES block cipher is performed. The SubBytes and ShiftRows steps are applied to each round state element group from vd. This is then XORed with the round key in either the corresponding element group in vs2 (vector-vector form) or the scalar element group in vs2 (vector-scalar form). This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. Operation function clause execute (VAESEF(vs2, vd, suffix) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let keyelem = if suffix == \"vv\" then i else 0; let state : bits(128) = get_velem(vd, EGW=128, i); let rkey : bits(128) = get_velem(vs2, EGW=128, keyelem); let sb : bits(128) = aes_subbytes_fwd(state); let sr : bits(128) = aes_shift_rows_fwd(sb); let ark : bits(128) = sr ^ rkey; set_velem(vd, EGW=128, i, ark); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Vector AES middle-round encryption Mnemonic vaesem.vv vd, vs2 vaesem.vs vd, vs2 Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 32 Only for the .vs form: the vd register group overlaps the vs2 scalar element group Arguments Register Direction EGW EGS EEW Definition Vd input 128 4 32 round state Vs2 input 128 4 32 Round key Vd output 128 4 32 new round state Description A middle-round encryption function of the AES block cipher is performed. The SubBytes, ShiftRows, and MixColumns steps are applied to each round state element group from vd. This is then XORed with the round key in either the corresponding element group in vs2 (vector-vector form) or the scalar element group in vs2 (vector-scalar form). This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. Operation function clause execute (VAESEM(vs2, vd, suffix)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let keyelem = if suffix == \"vv\" then i else 0; let state : bits(128) = get_velem(vd, EGW=128, i); let rkey : bits(128) = get_velem(vs2, EGW=128, keyelem); let sb : bits(128) = aes_subbytes_fwd(state); let sr : bits(128) = aes_shift_rows_fwd(sb); let mix : bits(128) = aes_mixcolumns_fwd(sr); let ark : bits(128) = mix ^ rkey; set_velem(vd, EGW=128, i, ark); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Vector AES-128 Forward KeySchedule generation Mnemonic vaeskf1.vi vd, vs2, uimm Encoding Reserved Encodings SEW is any value other than 32 Arguments Register Direction EGW EGS EEW Definition uimm input - - - Round Number (rnd) Vs2 input 128 4 32 Current round key Vd output 128 4 32 Next round key Description A single round of the forward AES-128 KeySchedule is performed. The next round key is generated word by word from the current round key element group in vs2 and the immediately previous word of the round key. The least significant word is generated using the most significant word of the current round key as well as a round constant which is selected by the round number. The round number, which ranges from 1 to 10, comes from uimm[3:0]; uimm[4] is ignored. The out-of-range uimm[3:0] values of 0 and 11-15 are mapped to in-range values by inverting uimm[3]. Thus, 0 maps to 8, and 11-15 maps to 3-7. The round number is used to specify a round constant which is used in generating the first round key word. This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. We chose to map out-of-range round numbers to in-range values as this allows the instruction’s behavior to be fully defined for all values of uimm[4:0] with minimal extra logic. Operation function clause execute (VAESKF1(rnd, vd, vs2)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { // project out-of-range immediates onto in-range values if( (unsigned(rnd[3:0]) > 10) | (rnd[3:0] = 0)) then rnd[3] = ~rnd[3] eg_len = (vl/EGS) eg_start = (vstart/EGS) let r : bits(4) = rnd-1; foreach (i from eg_start to eg_len-1) { let CurrentRoundKey[3:0] : bits(128) = get_velem(vs2, EGW=128, i); let w[0] : bits(32) = aes_subword_fwd(aes_rotword(CurrentRoundKey[3])) XOR aes_decode_rcon(r) XOR CurrentRoundKey[0] let w[1] : bits(32) = w[0] XOR CurrentRoundKey[1] let w[2] : bits(32) = w[1] XOR CurrentRoundKey[2] let w[3] : bits(32) = w[2] XOR CurrentRoundKey[3] set_velem(vd, EGW=128, i, w[3:0]); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Vector AES-256 Forward KeySchedule generation Mnemonic vaeskf2.vi vd, vs2, uimm Encoding Reserved Encodings SEW is any value other than 32 Arguments Register Direction EGW EGS EEW Definition Vd input 128 4 32 Previous Round key uimm input - - - Round Number (rnd) Vs2 input 128 4 32 Current Round key Vd output 128 4 32 Next round key Description A single round of the forward AES-256 KeySchedule is performed. The next round key is generated word by word from the previous round key element group in vd and the immediately previous word of the round key. The least significant word of the next round key is generated by applying a function to the most significant word of the current round key and then XORing the result with the round constant. The round number is used to select the round constant as well as the function. The round number, which ranges from 2 to 14, comes from uimm[3:0]; uimm[4] is ignored. The out-of-range uimm[3:0] values of 0-1 and 15 are mapped to in-range values by inverting uimm[3]. Thus, 0-1 maps to 8-9, and 15 maps to 7. This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. We chose to map out-of-range round numbers to in-range values as this allows the instruction’s behavior to be fully defined for all values of uimm[4:0] with minimal extra logic. Operation function clause execute (VAESKF2(rnd, vd, vs2)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { // project out-of-range immediates into in-range values if((unsigned(rnd[3:0]) < 2) | (unsigned(rnd[3:0]) > 14)) then rnd[3] = ~rnd[3] eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let CurrentRoundKey[3:0] : bits(128) = get_velem(vs2, EGW=128, i); let RoundKeyB[3:0] : bits(32) = get_velem(vd, EGW=128, i); // Previous round key let w[0] : bits(32) = if (rnd[0]==1) then aes_subword_fwd(CurrentRoundKey[3]) XOR RoundKeyB[0]; else aes_subword_fwd(aes_rotword(CurrentRoundKey[3])) XOR aes_decode_rcon((rnd>>1) - 1) XOR RoundKeyB[0]; w[1] : bits(32) = w[0] XOR RoundKeyB[1] w[2] : bits(32) = w[1] XOR RoundKeyB[2] w[3] : bits(32) = w[2] XOR RoundKeyB[3] set_velem(vd, EGW=128, i, w[3:0]); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Vector AES round zero encryption/decryption Mnemonic vaesz.vs vd, vs2 Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 32 The vd register group overlaps the vs2 register Arguments Register Direction EGW EGS EEW Definition vd input 128 4 32 round state vs2 input 128 4 32 round key vd output 128 4 32 new round state Description A round-0 AES block cipher operation is performed. This operation is used for both encryption and decryption. There is only a .vs form of the instruction. Vs2 holds a scalar element group that is used as the round key for all of the round state element groups. The new round state output of each element group is produced by XORing the round key with each element group of vd. This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. This instruction is needed to avoid the need to \"splat\" a 128-bit vector register group when the round key is the same for all 128-bit \"lanes\". Such a splat would typically be implemented with a vrgather instruction which would hurt performance in many implementations. This instruction only exists in the .vs form because the .vv form would be identical to the vxor.vv vd, vs2, vd instruction. Operation function clause execute (VAESZ(vs2, vd) = { if(((vstart%EGS)<>0) | (LMUL*VLEN < EGW)) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let state : bits(128) = get_velem(vd, EGW=128, i); let rkey : bits(128) = get_velem(vs2, EGW=128, 0); let ark : bits(128) = state ^ rkey; set_velem(vd, EGW=128, i, ark); } RETIRE_SUCCESS } } Included in Zvkn, Zvknc, Zvkned, Zvkng Synopsis Bitwise And-Not Mnemonic vandn.vv vd, vs2, vs1, vm vandn.vx vd, vs2, rs1, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Vector-Vector Arguments Register Direction Definition Vs1 input Op1 (to be inverted) Vs2 input Op2 Vd output Result Vector-Scalar Arguments Register Direction Definition Rs1 input Op1 (to be inverted) Vs2 input Op2 Vd output Result Description A bitwise and-not operation is performed. Each bit of Op1 is inverted and logically ANDed with the corresponding bits in vs2. In the vector-scalar version, Op1 is the sign-extended or truncated value in scalar register rs1. In the vector-vector version, Op1 is vs1. Note on necessity of instruction This instruction is performance-critical to SHA3. Specifically, the Chi step of the FIPS 202 Keccak Permutation. Emulating it via 2 instructions is expected to have significant performance impact. The .vv form of the instruction is what is needed for SHA3; the .vx form was added for completeness. There is no .vi version of this instruction because the same functionality can be achieved by using an inversion of the immediate value with the vand.vi instruction. Operation function clause execute (VANDN(vs2, vs1, vd, suffix)) = { foreach (i from vstart to vl-1) { let op1 = match suffix { \"vv\" => get_velem(vs1, SEW, i), \"vx\" => sext_or_truncate_to_sew(X(vs1)) }; let op2 = get_velem(vs2, SEW, i); set_velem(vd, EEW=SEW, i, ~op1 & op2); } RETIRE_SUCCESS } Included in Zvbb, Zvkb, Zvkn, Zvknc, Zvkng, Zvks Zvksc, Zvksg Synopsis Vector Reverse Bits in Elements Mnemonic vbrev.v vd, vs2, vm Encoding (Vector) Arguments Register Direction Definition Vs2 input Input elements Vd output Elements with bits reversed Description A bit reversal is performed on the bits of each element. Operation function clause execute (VBREV(vs2)) = { foreach (i from vstart to vl-1) { let input = get_velem(vs2, SEW, i); let output : bits(SEW) = 0; foreach (i from 0 to SEW-1) let output[SEW-1-i] = input[i]; set_velem(vd, SEW, i, output) } RETIRE_SUCCESS } Included in Zvbb Synopsis Vector Reverse Bits in Bytes Mnemonic vbrev8.v vd, vs2, vm Encoding (Vector) Arguments Register Direction Definition Vs2 input Input elements Vd output Elements with bit-reversed bytes Description A bit reversal is performed on the bits of each byte. This instruction is commonly used for GCM when the zvkg extension is not implemented. This byte-wise instruction is defined for all SEWs to eliminate the need to change SEW when operating on wider elements. Operation function clause execute (VBREV8(vs2)) = { foreach (i from vstart to vl-1) { let input = get_velem(vs2, SEW, i); let output : bits(SEW) = 0; foreach (i from 0 to SEW-8 by 8) let output[i+7..i] = reverse_bits_in_byte(input[i+7..i]); set_velem(vd, SEW, i, output) } RETIRE_SUCCESS } Included in Zvbb, Zvkb, Zvkn, Zvknc, Zvkng, Zvks Zvksc, Zvksg Synopsis Vector Carry-less Multiply by vector or scalar - returning low half of product. Mnemonic vclmul.vv vd, vs2, vs1, vm vclmul.vx vd, vs2, rs1, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 64 Arguments Register Direction Definition Vs1/Rs1 input multiplier Vs2 input multiplicand Vd output carry-less product low Description Produces the low half of 128-bit carry-less product. Each 64-bit element in the vs2 vector register is carry-less multiplied by either each 64-bit element in vs1 (vector-vector), or the 64-bit value from integer register rs1 (vector-scalar). The result is the least significant 64 bits of the carry-less product. The 64-bit carryless multiply instructions can be used for implementing GCM in the absence of the zvkg extension. We do not make these instructions exclusive as the 64-bit carryless multiply is readily derived from the instructions in the zvkg extension and can have utility in other areas. Likewise, we treat other SEW values as reserved so as not to preclude future extensions from using this opcode with different element widths. For example, a future extension might define an SEW=32 version of this instruction to enable Zve32* implementations to have vector carryless multiplication instructions. Operation function clause execute (VCLMUL(vs2, vs1, vd, suffix)) = { foreach (i from vstart to vl-1) { let op1 : bits (64) = if suffix ==\"vv\" then get_velem(vs1,i) else zext_or_truncate_to_sew(X(vs1)); let op2 : bits (64) = get_velem(vs2,i); let product : bits (64) = clmul(op1,op2,SEW); set_velem(vd, i, product); } RETIRE_SUCCESS } function clmul(x, y, width) = { let result : bits(width) = zeros(); foreach (i from 0 to (width - 1)) { if y[i] == 1 then result = result ^ (x << i); } result } Included in Zvbc, Zvknc, Zvksc Synopsis Vector Carry-less Multiply by vector or scalar - returning high half of product. Mnemonic vclmulh.vv vd, vs2, vs1, vm vclmulh.vx vd, vs2, rs1, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 64 Arguments Register Direction Definition Vs1 input multiplier Vs2 input multiplicand Vd output carry-less product high Description Produces the high half of 128-bit carry-less product. Each 64-bit element in the vs2 vector register is carry-less multiplied by either each 64-bit element in vs1 (vector-vector), or the 64-bit value from integer register rs1 (vector-scalar). The result is the most significant 64 bits of the carry-less product. Operation function clause execute (VCLMULH(vs2, vs1, vd, suffix)) = { foreach (i from vstart to vl-1) { let op1 : bits (64) = if suffix ==\"vv\" then get_velem(vs1,i) else zext_or_truncate_to_sew(X(vs1)); let op2 : bits (64) = get_velem(vs2, i); let product : bits (64) = clmulh(op1, op2, SEW); set_velem(vd, i, product); } RETIRE_SUCCESS } function clmulh(x, y, width) = { let result : bits(width) = 0; foreach (i from 1 to (width - 1)) { if y[i] == 1 then result = result ^ (x >> (width - i)); } result } Included in Zvbc, Zvknc, Zvksc Synopsis Vector Count Leading Zeros Mnemonic vclz.v vd, vs2, vm Encoding (Vector) Arguments Register Direction Definition Vs2 input Input elements Vd output Count of leading zero bits Description A leading zero count is performed on each element. The result for zero-valued inputs is the value SEW. Operation function clause execute (VCLZ(vs2)) = { foreach (i from vstart to vl-1) { let input = get_velem(vs2, SEW, i); for (j = (SEW - 1); j >= 0; j--) if [input[j]] == 0b1 then break; set_velem(vd, SEW, i, SEW - 1 - j) } RETIRE_SUCCESS } Included in Zvbb Synopsis Count the number of bits set in each element Mnemonic vcpop.v vd, vs2, vm Encoding (Vector) Arguments Register Direction Definition Vs2 input Input elements Vd output Count of bits set Description A population count is performed on each element. Operation function clause execute (VCPOP(vs2)) = { foreach (i from vstart to vl-1) { let input = get_velem(vs2, SEW, i); let output : bits(SEW) = 0; for (j = 0; j < SEW; j++) output = output + input[j]; set_velem(vd, SEW, i, output) } RETIRE_SUCCESS } Included in Zvbb Synopsis Vector Count Trailing Zeros Mnemonic vctz.v vd, vs2, vm Encoding (Vector) Arguments Register Direction Definition Vs2 input Input elements Vd output Count of trailing zero bits Description A trailing zero count is performed on each element. Operation function clause execute (VCTZ(vs2)) = { foreach (i from vstart to vl-1) { let input = get_velem(vs2, SEW, i); for (j = 0; j < SEW; j++) if [input[j]] == 0b1 then break; set_velem(vd, SEW, i, j) } RETIRE_SUCCESS } Included in Zvbb Synopsis Vector Add-Multiply over GHASH Galois-Field Mnemonic vghsh.vv vd, vs2, vs1 Encoding Reserved Encodings SEW is any value other than 32 Arguments Register Direction EGW EGS SEW Definition Vd input 128 4 32 Partial hash (Yi) Vs1 input 128 4 32 Cipher text (Xi) Vs2 input 128 4 32 Hash Subkey (H) Vd output 128 4 32 Partial-hash (Yi+1) Description A single \"iteration\" of the GHASHH algorithm is performed. This instruction treats all of the inputs and outputs as 128-bit polynomials and performs operations over GF[2]. It produces the next partial hash (Yi+1) by adding the current partial hash (Yi) to the cipher text block (Xi) and then multiplying (over GF(2128)) this sum by the Hash Subkey (H). The multiplication over GF(2128) is a carryless multiply of two 128-bit polynomials modulo GHASH’s irreducible polynomial (x128 + x7 + x2 + x + 1). The operation can be compactly defined as Yi+1 = ((Yi ^ Xi) · H) The NIST specification (see Zvkg) orders the coefficients from left to right x0x1x2…​x127 for a polynomial x0 + x1u +x2 u2 + …​ + x127u127. This can be viewed as a collection of byte elements in memory with the byte containing the lowest coefficients (i.e., 0,1,2,3,4,5,6,7) residing at the lowest memory address. Since the bits in the bytes are reversed, this instruction internally performs bit swaps within bytes to put the bits in the standard ordering (e.g., 7,6,5,4,3,2,1,0). This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. We are bit-reversing the bytes of inputs and outputs so that the intermediate values are consistent with the NIST specification. These reversals are inexpensive to implement as they unconditionally swap bit positions and therefore do not require any logic. Since the same hash subkey H will typically be used repeatedly on a given message, a future extension might define a vector-scalar version of this instruction where vs2 is the scalar element group. This would help reduce register pressure when LMUL > 1. Operation function clause execute (VGHSH(vs2, vs1, vd)) = { // operands are input with bits reversed in each byte if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let Y = (get_velem(vd,EGW=128,i)); // current partial-hash let X = get_velem(vs1,EGW=128,i); // block cipher output let H = brev8(get_velem(vs2,EGW=128,i)); // Hash subkey let Z : bits(128) = 0; let S = brev8(Y ^ X); for (int bit = 0; bit < 128; bit++) { if bit_to_bool(S[bit]) Z ^= H bool reduce = bit_to_bool(H[127]); H = H << 1; // left shift H by 1 if (reduce) H ^= 0x87; // Reduce using x^7 + x^2 + x^1 + 1 polynomial } let result = brev8(Z); // bit reverse bytes to get back to GCM standard ordering set_velem(vd, EGW=128, i, result); } RETIRE_SUCCESS } } Included in Zvkg, Zvkng, Zvksg Synopsis Vector Multiply over GHASH Galois-Field Mnemonic vgmul.vv vd, vs2 Encoding Reserved Encodings SEW is any value other than 32 Arguments Register Direction EGW EGS SEW Definition Vd input 128 4 32 Multiplier Vs2 input 128 4 32 Multiplicand Vd output 128 4 32 Product Description A GHASHH multiply is performed. This instruction treats all of the inputs and outputs as 128-bit polynomials and performs operations over GF[2]. It produces the product over GF(2128) of the two 128-bit inputs. The multiplication over GF(2128) is a carryless multiply of two 128-bit polynomials modulo GHASH’s irreducible polynomial (x128 + x7 + x2 + x + 1). The NIST specification (see Zvkg) orders the coefficients from left to right x0x1x2…​x127 for a polynomial x0 + x1u +x2 u2 + …​ + x127u127. This can be viewed as a collection of byte elements in memory with the byte containing the lowest coefficients (i.e., 0,1,2,3,4,5,6,7) residing at the lowest memory address. Since the bits in the bytes are reversed, This instruction internally performs bit swaps within bytes to put the bits in the standard ordering (e.g., 7,6,5,4,3,2,1,0). This instruction must always be implemented such that its execution latency does not depend on the data being operated upon. We are bit-reversing the bytes of inputs and outputs so that the intermediate values are consistent with the NIST specification. These reversals are inexpensive to implement as they unconditionally swap bit positions and therefore do not require any logic. Since the same multiplicand will typically be used repeatedly on a given message, a future extension might define a vector-scalar version of this instruction where vs2 is the scalar element group. This would help reduce register pressure when LMUL > 1. This instruction is identical to vghsh.vv with vs1=0. This instruction is often used in GHASH code. In some cases it is followed by an XOR to perform a multiply-add. Implementations may choose to fuse these two instructions to improve performance on GHASH code that doesn’t use the add-multiply form of the vghsh.vv instruction. Operation function clause execute (VGMUL(vs2, vs1, vd)) = { // operands are input with bits reversed in each byte if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let Y = brev8(get_velem(vd,EGW=128,i)); // Multiplier let H = brev8(get_velem(vs2,EGW=128,i)); // Multiplicand let Z : bits(128) = 0; for (int bit = 0; bit < 128; bit++) { if bit_to_bool(Y[bit]) Z ^= H bool reduce = bit_to_bool(H[127]); H = H << 1; // left shift H by 1 if (reduce) H ^= 0x87; // Reduce using x^7 + x^2 + x^1 + 1 polynomial } let result = brev8(Z); set_velem(vd, EGW=128, i, result); } RETIRE_SUCCESS } } Included in Zvkg, Zvkng, Zvksg Synopsis Vector Reverse Bytes Mnemonic vrev8.v vd, vs2, vm Encoding (Vector) Arguments Register Direction Definition Vs2 input Input elements Vd output Byte-reversed elements Description A byte reversal is performed on each element of vs2, effectively performing an endian swap. This element-wise endian swapping is needed for several cryptographic algorithms including SHA2 and SM3. Operation function clause execute (VREV8(vs2)) = { foreach (i from vstart to vl-1) { input = get_velem(vs2, SEW, i); let output : SEW = 0; let j = SEW - 1; foreach (k from 0 to (SEW - 8) by 8) { output[k..(k + 7)] = input[(j - 7)..j]; j = j - 8; set_velem(vd, SEW, i, output) } RETIRE_SUCCESS } Included in Zvbb, Zvkb, Zvkn, Zvknc, Zvkng, Zvks Zvksc, Zvksg Synopsis Vector rotate left by vector/scalar. Mnemonic vrol.vv vd, vs2, vs1, vm vrol.vx vd, vs2, rs1, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Vector-Vector Arguments Register Direction Definition Vs1 input Rotate amount Vs2 input Data Vd output Rotated data Vector-Scalar Arguments Register Direction Definition Rs1 input Rotate amount Vs2 input Data Vd output Rotated data Description A bitwise left rotation is performed on each element of vs2 The elements in vs2 are rotated left by the rotate amount specified by either the corresponding elements of vs1 (vector-vector), or integer register rs1 (vector-scalar). Only the low log2(SEW) bits of the rotate-amount value are used, all other bits are ignored. There is no immediate form of this instruction (i.e., vrol.vi) as the same result can be achieved by negating the rotate amount and using the immediate form of rotate right instruction (i.e., vror.vi). Operation function clause execute (VROL_VV(vs2, vs1, vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=SEW, i, get_velem(vs2, i) <<< (get_velem(vs1, i) & (SEW-1)) ) } RETIRE_SUCCESS } function clause execute (VROL_VX(vs2, rs1, vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=SEW, i, get_velem(vs2, i) <<< (X(rs1) & (SEW-1)) ) } RETIRE_SUCCESS } Included in Zvbb, Zvkb, Zvkn, Zvknc, Zvkng, Zvks Zvksc, Zvksg Synopsis Vector rotate right by vector/scalar/immediate. Mnemonic vror.vv vd, vs2, vs1, vm vror.vx vd, vs2, rs1, vm vror.vi vd, vs2, uimm, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Encoding (Vector-Immediate) Vector-Vector Arguments Register Direction Definition Vs1 input Rotate amount Vs2 input Data Vd output Rotated data Vector-Scalar/Immediate Arguments Register Direction Definition Rs1/imm input Rotate amount Vs2 input Data Vd output Rotated data Description A bitwise right rotation is performed on each element of vs2. The elements in vs2 are rotated right by the rotate amount specified by either the corresponding elements of vs1 (vector-vector), integer register rs1 (vector-scalar), or an immediate value (vector-immediate). Only the low log2(SEW) bits of the rotate-amount value are used, all other bits are ignored. Operation function clause execute (VROR_VV(vs2, vs1, vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=SEW, i, get_velem(vs2, i) >>> (get_velem(vs1, i) & (SEW-1)) ) } RETIRE_SUCCESS } function clause execute (VROR_VX(vs2, rs1, vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=SEW, i, get_velem(vs2, i) >>> (X(rs1) & (SEW-1)) ) } RETIRE_SUCCESS } function clause execute (VROR_VI(vs2, uimm[5:0], vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=SEW, i, get_velem(vs2, i) >>> (uimm[5:0] & (SEW-1)) ) } RETIRE_SUCCESS } Included in Zvbb, Zvkb, Zvkn, Zvknc, Zvkng, Zvks Zvksc, Zvksg Synopsis Vector SHA-2 two rounds of compression. Mnemonic vsha2ch.vv vd, vs2, vs1 vsha2cl.vv vd, vs2, vs1 Encoding (Vector-Vector) High part Encoding (Vector-Vector) Low part Reserved Encodings zvknha: SEW is any value other than 32 zvknhb: SEW is any value other than 32 or 64 The vd register group overlaps with either vs1 or vs2 Arguments Register Direction EGW EGS EEW Definition Vd input 4*SEW 4 SEW current state {c, d, g, h} Vs1 input 4*SEW 4 SEW MessageSched plus constant[3:0] Vs2 input 4*SEW 4 SEW current state {a, b, e, f} Vd output 4*SEW 4 SEW next state {a, b, e, f} Description SEW=32: 2 rounds of SHA-256 compression are performed (zvknha and zvknhb) SEW=64: 2 rounds of SHA-512 compression are performed (zvkhnb) Two words of vs1 are processed with the 8 words of current state held in vd and vs1 to perform two rounds of hash computation producing four words of the next state. Note to software developers The NIST standard (see zvknh[ab]) requires the final hash to be in big-endian byte ordering within SEW-sized words. Since this instruction treats all words as little-endian, software needs to perform an endian swap on the final output of this instruction after all of the message blocks have been processed. The vsha2ch version of this instruction uses the two most significant message schedule words from the element group in vs1 while the vsha2cl version uses the two least significant message schedule words. Otherwise, these versions of the instruction are identical. Having a high and low version of this instruction typically improves performance when interleaving independent hashing operations (i.e., when hashing several files at once). Preventing overlap between vd and vs1 or vs2 simplifies implementation with VLEN < EGW. This restriction does not have any coding impact since proper implementation of the algorithm requires that vd, vs1 and vs2 each are different registers. Operation function clause execute (VSHA2c(vs2, vs1, vd)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let {a @ b @ e @ f} : bits(4*SEW) = get_velem(vs2, 4*SEW, i); let {c @ d @ g @ h} : bits(4*SEW) = get_velem(vd, 4*SEW, i); let MessageShedPlusC[3:0] : bits(4*SEW) = get_velem(vs1, 4*SEW, i); let {W1, W0} == VSHA2cl ? MessageSchedPlusC[1:0] : MessageSchedPlusC[3:2]; // l vs h difference is the words selected let T1 : bits(SEW) = h + sum1(e) + ch(e,f,g) + W0; let T2 : bits(SEW) = sum0(a) + maj(a,b,c); h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2; T1 = h + sum1(e) + ch(e,f,g) + W1; T2 = sum0(a) + maj(a,b,c); h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2; set_velem(vd, 4*SEW, i, {a @ b @ e @ f}); } RETIRE_SUCCESS } } function sum0(x) = { match SEW { 32 => rotr(x,2) XOR rotr(x,13) XOR rotr(x,22), 64 => rotr(x,28) XOR rotr(x,34) XOR rotr(x,39) } } function sum1(x) = { match SEW { 32 => rotr(x,6) XOR rotr(x,11) XOR rotr(x,25), 64 => rotr(x,14) XOR rotr(x,18) XOR rotr(x,41) } } function ch(x, y, z) = ((x & y) ^ ((~x) & z)) function maj(x, y, z) = ((x & y) ^ (x & z) ^ (y & z)) function ROTR(x,n) = (x >> n) | (x << SEW - n) Included in Zvkn, Zvknc, Zvkng, zvknh[ab] Synopsis Vector SHA-2 message schedule. Mnemonic vsha2ms.vv vd, vs2, vs1 Encoding (Vector-Vector) Reserved Encodings zvknha: SEW is any value other than 32 zvknhb: SEW is any value other than 32 or 64 The vd register group overlaps with either vs1 or vs2 Arguments Register Direction EGW EGS EEW Definition Vd input 4*SEW 4 SEW Message words {W[3], W[2], W[1], W[0]} Vs2 input 4*SEW 4 SEW Message words {W[11], W[10], W[9], W[4]} Vs1 input 4*SEW 4 SEW Message words {W[15], W[14], -, W[12]} Vd output 4*SEW 4 SEW Message words {W[19], W[18], W[17], W[16]} Description SEW=32: Four rounds of SHA-256 message schedule expansion are performed (zvknha and zvknhb) SEW=64: Four rounds of SHA-512 message schedule expansion are performed (zvkhnb) Eleven of the last 16 SEW-sized message-schedule words from vd (oldest), vs2, and vs1 (most recent) are processed to produce the next 4 message-schedule words. Note to software developers The first 16 SEW-sized words of the message schedule come from the message block in big-endian byte order. Since this instruction treats all words as little endian, software is required to endian swap these words. All of the subsequent message schedule words are produced by this instruction and therefore do not require an endian swap. Note to software developers Software is required to pack the words into element groups as shown above in the arguments table. The indices indicate the relate age with lower indices indicating older words. Note to software developers The {W11, W10, W9, W4} element group can easily be formed by using a vector vmerge instruction with the appropriate mask (for example with vl=4 and 4b0001 as the 4 mask bits) vmerge.vvm {W11, W10, W9, W4}, {W11, W10, W9, W8}, {W7, W6, W5, W4}, V0 Preventing overlap between vd and vs1 or vs2 simplifies implementation with VLEN < EGW. This restriction does not have any coding impact since proper implementation of the algorithm requires that vd, vs1 and vs2 each contain different portions of the message schedule. Operation function clause execute (VSHA2ms(vs2, vs1, vd)) = { // SEW32 = SHA-256 // SEW64 = SHA-512 if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { {W[3] @ W[2] @ W[1] @ W[0]} : bits(EGW) = get_velem(vd, EGW, i); {W[11] @ W[10] @ W[9] @ W[4]} : bits(EGW) = get_velem(vs2, EGW, i); {W[15] @ W[14] @ W[13] @ W[12]} : bits(EGW) = get_velem(vs1, EGW, i); W[16] = sig1(W[14]) + W[9] + sig0(W[1]) + W[0]; W[17] = sig1(W[15]) + W[10] + sig0(W[2]) + W[1]; W[18] = sig1(W[16]) + W[11] + sig0(W[3]) + W[2]; W[19] = sig1(W[17]) + W[12] + sig0(W[4]) + W[3]; set_velem(vd, EGW, i, {W[19] @ W[18] @ W[17] @ W[16]}); } RETIRE_SUCCESS } } function sig0(x) = { match SEW { 32 => (ROTR(x,7) XOR ROTR(x,18) XOR SHR(x,3)), 64 => (ROTR(x,1) XOR ROTR(x,8) XOR SHR(x,7))); } } function sig1(x) = { match SEW { 32 => (ROTR(x,17) XOR ROTR(x,19) XOR SHR(x,10), 64 => ROTR(x,19) XOR ROTR(x,61) XOR SHR(x,6)); } } function ROTR(x,n) = (x >> n) | (x << SEW - n) function SHR (x,n) = x >> n Included in Zvkn, Zvknc, Zvkng, zvknh[ab] Synopsis Vector SM3 Compression Mnemonic vsm3c.vi vd, vs2, uimm Encoding Reserved Encodings SEW is any value other than 32 The vd register group overlaps with the vs2 register group Arguments Register Direction EGW EGS EEW Definition Vd input 256 8 32 Current state {H,G.F,E,D,C,B,A} uimm input - - - round number (rnds) Vs2 input 256 8 32 Message words {-,-,w[5],w[4],-,-,w[1],w[0]} Vd output 256 8 32 Next state {H,G.F,E,D,C,B,A} Description Two rounds of SM3 compression are performed. The current state of eight 32-bit words is read in as an element group from vd. Eight 32-bit message words are read in as an element group from vs2, although only four of them are used. All of the 32-bit input words are byte-swapped from big endian to little endian. These inputs are processed somewhat differently based on the round group (as specified in rnds), and the next state is generated as an element group of eight 32-bit words. The next state of eight 32-bit words are generated, swapped from little endian to big endian, and are returned in an eight-element group. The round number is provided by the 5-bit rnds unsigned immediate. Legal values are 0 - 31 and indicate which group of two rounds are being performed. For example, if rnds=1, then rounds 2 and 3 are being performed. The round number is used in the rotation of the constant as well to inform the behavior which differs between rounds 0-15 and rounds 16-63. The endian byte swapping of the input and output words enables us to align with the SM3 specification without requiring that software perform these swaps. Preventing overlap between vd and vs2 simplifies implementation with VLEN < EGW. This restriction does not have any coding impact since proper implementation of the algorithm requires that vd and vs2 each are different registers. Operation function clause execute (VSM3C(rnds, vs2, vd)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { // load state let {Hi @ Gi @ Fi @ Ei @ Di @ Ci @ Bi @ Ai} : bits(256) : bits(256) = (get_velem(vd, 256, i)); //load message schedule let {u_w7 @ u_w6 @ w5i @ w4i @ u_w3 @ u_w2 @ w1i @ w0i} : bits(256) = (get_velem(vs2, 256, i)); // u_w inputs are unused // perform endian swap let H : bits(32) = rev8(Hi); let G : bits(32) = rev8(Gi); let F : bits(32) = rev8(Fi); let E : bits(32) = rev8(Ei); let D : bits(32) = rev8(Di); let C : bits(32) = rev8(Ci); let B : bits(32) = rev8(Bi); let A : bits(32) = rev8(Ai); let w5 = : bits(32) rev8(w5i); let w4 = : bits(32) rev8(w4i); let w1 = : bits(32) rev8(w1i); let w0 = : bits(32) rev8(w0i); let x0 :bits(32) = w0 ^ w4; // W'[0] let x1 :bits(32) = w1 ^ w5; // W'[1] let j = 2 * rnds; let ss1 : bits(32) = ROL32(ROL32(A, 12) + E + ROL32(T_j(j), j % 32), 7); let ss2 : bits(32) = ss1 ^ ROL32(A, 12); let tt1 : bits(32) = FF_j(A, B, C, j) + D + ss2 + x0; let tt2 : bits(32) = GG_j(E, F, G, j) + H + ss1 + w0; D = C; let : bits(32) C1 = ROL32(B, 9); B = A; let A1 : bits(32) = tt1; H = G; let G1 : bits(32) = ROL32(F, 19); F = E; let E1 : bits(32) = P_0(tt2); j = 2 * rnds + 1; ss1 = ROL32(ROL32(A1, 12) + E1 + ROL32(T_j(j), j % 32), 7); ss2 = ss1 ^ ROL32(A1, 12); tt1 = FF_j(A1, B, C1, j) + D + ss2 + x1; tt2 = GG_j(E1, F, G1, j) + H + ss1 + w1; D = C1; let C2 : bits(32) = ROL32(B, 9); B = A1; let A2 : bits(32) = tt1; H = G1; let G2 = : bits(32) ROL32(F, 19); F = E1; let E2 = : bits(32) P_0(tt2); // Update the destination register - swap back to big endian let result : bits(256) = {rev8(G1) @ rev8(G2) @ rev8(E1) @ rev8(E2) @ rev8(C1) @ rev8(C2) @ rev8(A1) @ rev8(A2)}; set_velem(vd, 256, i, result); } RETIRE_SUCCESS } } function FF1(X, Y, Z) = ((X) ^ (Y) ^ (Z)) function FF2(X, Y, Z) = (((X) & (Y)) | ((X) & (Z)) | ((Y) & (Z))) function FF_j(X, Y, Z, J) = (((J) <= 15) ? FF1(X, Y, Z) : FF2(X, Y, Z)) function GG1(X, Y, Z) = ((X) ^ (Y) ^ (Z)) function GG2(X, Y, Z) = (((X) & (Y)) | ((~(X)) & (Z))) . function GG_j(X, Y, Z, J) = (((J) <= 15) ? GG1(X, Y, Z) : GG2(X, Y, Z)) function T_j(J) = (((J) <= 15) ? (0x79CC4519) : (0x7A879D8A)) function P_0(X) = ((X) ^ ROL32((X), 9) ^ ROL32((X), 17)) Included in Zvks, Zvksc, Zvksg, Zvksh Synopsis Vector SM3 Message Expansion Mnemonic vsm3me.vv vd, vs2, vs1 Encoding Reserved Encodings SEW is any value other than 32 The vd register group overlaps with the vs2 register group. Arguments Register Direction EGW EGS EEW Definition Vs1 input 256 8 32 Message words W[7:0] Vs2 input 256 8 32 Message words W[15:8] Vd output 256 8 32 Message words W[23:16] Description Eight rounds of SM3 message expansion are performed. The sixteen most recent 32-bit message words are read in as two eight-element groups from vs1 and vs2. Each of these words is swapped from big endian to little endian. The next eight 32-bit message words are generated, swapped from little endian to big endian, and are returned in an eight-element group. The endian byte swapping of the input and output words enables us to align with the SM3 specification without requiring that software perform these swaps. Preventing overlap between vd and vs2 simplifies implementations with VLEN < EGW. This restriction should not have any coding impact since the algorithm requires these values to be preserved for generating the next 8 words. Operation function clause execute (VSM3ME(vs2, vs1)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) foreach (i from eg_start to eg_len-1) { let w[7:0] : bits(256) = get_velem(vs1, 256, i); let w[15:8] : bits(256) = get_velem(vs2, 256, i); // Byte Swap inputs from big-endian to little-endian let w15 = rev8(w[15]); let w14 = rev8(w[14]); let w13 = rev8(w[13]); let w12 = rev8(w[12]); let w11 = rev8(w[11]); let w10 = rev8(w[10]); let w9 = rev8(w[9]); let w8 = rev8(w[8]); let w7 = rev8(w[7]); let w6 = rev8(w[6]); let w5 = rev8(w[5]); let w4 = rev8(w[4]); let w3 = rev8(w[3]); let w2 = rev8(w[2]); let w1 = rev8(w[1]); let w0 = rev8(w[0]); // Note that some of the newly computed words are used in later invocations. let w[16] = ZVKSH_W(w0 @ w7 @ w13 @ w3 @ w10); let w[17] = ZVKSH_W(w1 @ w8 @ w14 @ w4 @ w11); let w[18] = ZVKSH_W(w2 @ w9 @ w15 @ w5 @ w12); let w[19] = ZVKSH_W(w3 @ w10 @ w16 @ w6 @ w13); let w[20] = ZVKSH_W(w4 @ w11 @ w17 @ w7 @ w14); let w[21] = ZVKSH_W(w5 @ w12 @ w18 @ w8 @ w15); let w[22] = ZVKSH_W(w6 @ w13 @ w19 @ w9 @ w16); let w[23] = ZVKSH_W(w7 @ w14 @ w20 @ w10 @ w17); // Byte swap outputs from little-endian back to big-endian let w16 : Bits(32) = rev8(W[16]); let w17 : Bits(32) = rev8(W[17]); let w18 : Bits(32) = rev8(W[18]); let w19 : Bits(32) = rev8(W[19]); let w20 : Bits(32) = rev8(W[20]); let w21 : Bits(32) = rev8(W[21]); let w22 : Bits(32) = rev8(W[22]); let w23 : Bits(32) = rev8(W[23]); // Update the destination register. set_velem(vd, 256, i, {w23 @ w22 @ w21 @ w20 @ w19 @ w18 @ w17 @ w16}); } RETIRE_SUCCESS } } function P_1(X) ((X) ^ ROL32((X), 15) ^ ROL32((X), 23)) function ZVKSH_W(M16, M9, M3, M13, M6) = \\ (P1( (M16) ^ (M9) ^ ROL32((M3), 15) ) ^ ROL32((M13), 7) ^ (M6)) Included in Zvks, Zvksc, Zvksg, Zvksh Synopsis Vector SM4 KeyExpansion Mnemonic vsm4k.vi vd, vs2, uimm Encoding Reserved Encodings SEW is any value other than 32 Arguments Register Direction EGW EGS EEW Definition uimm input - - - Round group (rnd) Vs2 input 128 4 32 Current 4 round keys rK[0:3] Vd output 128 4 32 Next 4 round keys rK'[0:3] Description Four rounds of the SM4 Key Expansion are performed. Four round keys are read in as a 4-element group from vs2. Each of the next four round keys are generated by iteratively XORing the last three round keys with a constant that is indexed by the Round Group Number, performing a byte-wise substitution, and then performing XORs between rotated versions of this value and the corresponding current round key. The Round group number (rnd) comes from uimm[2:0]; the bits in uimm[4:3] are ignored. Round group numbers range from 0 to 7 and indicate which group of four round keys are being generated. Round Keys range from 0-31. For example, if rnd=1, then round keys 4, 5, 6, and 7 are being generated. Software needs to generate the initial round keys. This is done by XORing the 128-bit encryption key with the system parameters: FK[0:3] Table 1. System Parameters FK constant 0 A3B1BAC6 1 56AA3350 2 677D9197 3 B27022DC Implementation Hint The round constants (CK) can be generated on the fly fairly cheaply. If the bytes of the constants are assigned an incrementing index from 0 to 127, the value of each byte is equal to its index multiplied by 7 modulo 256. Since the results are all limited to 8 bits, the modulo operation occurs for free: B[n] = n + 2n + 4n; = 8n + ~n + 1; Operation function clause execute (vsm4k(uimm, vs2)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) let B : bits(32) = 0; let S : bits(32) = 0; let rk4 : bits(32) = 0; let rk5 : bits(32) = 0; let rk6 : bits(32) = 0; let rk7 : bits(32) = 0; let rnd : bits(3) = uimm[2:0]; // Lower 3 bits foreach (i from eg_start to eg_len-1) { let (rk3 @ rk2 @ rk1 @ rk0) : bits(128) = get_velem(vs2, 128, i); B = rk1 ^ rk2 ^ rk3 ^ ck(4 * rnd); S = sm4_subword(B); rk4 = ROUND_KEY(rk0, S); B = rk2 ^ rk3 ^ rk4 ^ ck(4 * rnd + 1); S = sm4_subword(B); rk5 = ROUND_KEY(rk1, S); B = rk3 ^ rk4 ^ rk5 ^ ck(4 * rnd + 2); S = sm4_subword(B); rk6 = ROUND_KEY(rk2, S); B = rk4 ^ rk5 ^ rk6 ^ ck(4 * rnd + 3); S = sm4_subword(B); rk7 = ROUND_KEY(rk3, S); // Update the destination register. set_velem(vd, EGW=128, i, (rk7 @ rk6 @ rk5 @ rk4)); } RETIRE_SUCCESS } } val round_key : bits(32) -> bits(32) function ROUND_KEY(X, S) = ((X) ^ ((S) ^ ROL32((S), 13) ^ ROL32((S), 23))) // SM4 Constant Key (CK) let ck : list(bits(32)) = [| 0x00070E15, 0x1C232A31, 0x383F464D, 0x545B6269, 0x70777E85, 0x8C939AA1, 0xA8AFB6BD, 0xC4CBD2D9, 0xE0E7EEF5, 0xFC030A11, 0x181F262D, 0x343B4249, 0x50575E65, 0x6C737A81, 0x888F969D, 0xA4ABB2B9, 0xC0C7CED5, 0xDCE3EAF1, 0xF8FF060D, 0x141B2229, 0x30373E45, 0x4C535A61, 0x686F767D, 0x848B9299, 0xA0A7AEB5, 0xBCC3CAD1, 0xD8DFE6ED, 0xF4FB0209, 0x10171E25, 0x2C333A41, 0x484F565D, 0x646B7279 |] }; Included in Zvks, Zvksc, Zvksed, Zvksg Synopsis Vector SM4 Rounds Mnemonic vsm4r.vv vd, vs2 vsm4r.vs vd, vs2 Encoding (Vector-Vector) Encoding (Vector-Scalar) Reserved Encodings SEW is any value other than 32 Only for the .vs form: the vd register group overlaps the vs2 register Arguments Register Direction EGW EGS EEW Definition Vd input 128 4 32 Current state X[0:3] Vs2 input 128 4 32 Round keys rk[0:3] Vd output 128 4 32 Next state X'[0:3] Description Four rounds of SM4 Encryption/Decryption are performed. The four words of current state are read as a 4-element group from 'vd' and the round keys are read from either the corresponding 4-element group in vs2 (vector-vector form) or the scalar element group in vs2 (vector-scalar form). The next four words of state are generated by iteratively XORing the last three words of the state with the corresponding round key, performing a byte-wise substitution, and then performing XORs between rotated versions of this value and the corresponding current state. In SM4, encryption and decryption are identical except that decryption consumes the round keys in the reverse order. For the first four rounds of encryption, the current state is the plain text. For the first four rounds of decryption, the current state is the cipher text. For all subsequent rounds, the current state is the next state from the previous four rounds. Operation function clause execute (VSM4R(vd, vs2)) = { if(LMUL*VLEN < EGW) then { handle_illegal(); // illegal-instruction exception RETIRE_FAIL } else { eg_len = (vl/EGS) eg_start = (vstart/EGS) let B : bits(32) = 0; let S : bits(32) = 0; let rk0 : bits(32) = 0; let rk1 : bits(32) = 0; let rk2 : bits(32) = 0; let rk3 : bits(32) = 0; let x0 : bits(32) = 0; let x1 : bits(32) = 0; let x2 : bits(32) = 0; let x3 : bits(32) = 0; let x4 : bits(32) = 0; let x5 : bits(32) = 0; let x6 : bits(32) = 0; let x7 : bits(32) = 0; let keyelem : bits(32) = 0; foreach (i from eg_start to eg_len-1) { keyelem = if suffix == \"vv\" then i else 0; {rk3 @ rk2 @ rk1 @ rk0} : bits(128) = get_velem(vs2, EGW=128, keyelem); {x3 @ x2 @ x1 @ x0} : bits(128) = get_velem(vd, EGW=128, i); B = x1 ^ x2 ^ x3 ^ rk0; S = sm4_subword(B); x4 = sm4_round(x0, S); B = x2 ^ x3 ^ x4 ^ rk1; S = sm4_subword(B); x5= sm4_round(x1, S); B = x3 ^ x4 ^ x5 ^ rk2; S = sm4_subword(B); x6 = sm4_round(x2, S); B = x4 ^ x5 ^ x6 ^ rk3; S = sm4_subword(B); x7 = sm4_round(x3, S); set_velem(vd, EGW=128, i, (x7 @ x6 @ x5 @ x4)); } RETIRE_SUCCESS } } val sm4_round : bits(32) -> bits(32) function sm4_round(X, S) = \\ ((X) ^ ((S) ^ ROL32((S), 2) ^ ROL32((S), 10) ^ ROL32((S), 18) ^ ROL32((S), 24))) Included in Zvks, Zvksc, Zvksed, Zvksg Synopsis Vector widening shift left logical by vector/scalar/immediate. Mnemonic vwsll.vv vd, vs2, vs1, vm vwsll.vx vd, vs2, rs1, vm vwsll.vi vd, vs2, uimm, vm Encoding (Vector-Vector) Encoding (Vector-Scalar) Encoding (Vector-Immediate) Vector-Vector Arguments Register Direction Definition Vs1 input Shift amount Vs2 input Data Vd output Shifted data Vector-Scalar/Immediate Arguments Register Direction EEW Definition Rs1/imm input SEW Shift amount Vs2 input SEW Data Vd output 2*SEW Shifted data Description A widening logical shift left is performed on each element of vs2. The elements in vs2 are zero-extended to 2*SEW bits, then shifted left by the shift amount specified by either the corresponding elements of vs1 (vector-vector), integer register rs1 (vector-scalar), or an immediate value (vector-immediate). Only the low log2(2*SEW) bits of the shift-amount value are used, all other bits are ignored. Operation function clause execute (VWSLL_VV(vs2, vs1, vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=2*SEW, i, get_velem(vs2, i) << (get_velem(vs1, i) & ((2*SEW)-1)) ) } RETIRE_SUCCESS } function clause execute (VWSLL_VX(vs2, rs1, vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=2*SEW, i, get_velem(vs2, i) << (X(rs1) & ((2*SEW)-1)) ) } RETIRE_SUCCESS } function clause execute (VWSLL_VI(vs2, uimm[4:0], vd)) = { foreach (i from vstart to vl - 1) { set_velem(vd, EEW=2*SEW, i, get_velem(vs2, i) << (uimm[4:0] & ((2*SEW)-1)) ) } RETIRE_SUCCESS } Included in Zvbb OP-VE (0x77) Crypto Vector instructions except Zvbb and Zvbc Integer Integer FP funct3 funct3 funct3 OPIVV V OPMVV V OPFVV V OPIVX X OPMVX X OPFVF F OPIVI I funct6 funct6 funct6 100000 100000 V vsm3me 100000 100001 100001 V vsm4k.vi 100001 100010 100010 V vaeskf1.vi 100010 100011 100011 100011 100100 100100 100100 100101 100101 100101 100110 100110 100110 100111 100111 100111 101000 101000 V VAES.vv 101000 101001 101001 V VAES.vs 101001 101010 101010 V vaeskf2.vi 101010 101011 101011 V vsm3c.vi 101011 101100 101100 V vghsh 101100 101101 101101 V vsha2ms 101101 101110 101110 V vsha2ch 101110 101111 101111 V vsha2cl 101111 Table 2. VAES.vv and VAES.vs encoding space vs1 00000 vaesdm 00001 vaesdf 00010 vaesem 00011 vaesef 00111 vaesz 10000 vsm4r 10001 vgmul OP-V (0x57) Zvbb, Zvkb, and Zvbc Vector instructions in bold Integer Integer FP funct3 funct3 funct3 OPIVV V OPMVV V OPFVV V OPIVX X OPMVX X OPFVF F OPIVI I funct6 funct6 funct6 000000 V X I vadd 000000 V vredsum 000000 V F vfadd 000001 V X vandn 000001 V vredand 000001 V vfredusum 000010 V X vsub 000010 V vredor 000010 V F vfsub 000011 X I vrsub 000011 V vredxor 000011 V vfredosum 000100 V X vminu 000100 V vredminu 000100 V F vfmin 000101 V X vmin 000101 V vredmin 000101 V vfredmin 000110 V X vmaxu 000110 V vredmaxu 000110 V F vfmax 000111 V X vmax 000111 V vredmax 000111 V vfredmax 001000 001000 V X vaaddu 001000 V F vfsgnj 001001 V X I vand 001001 V X vaadd 001001 V F vfsgnjn 001010 V X I vor 001010 V X vasubu 001010 V F vfsgnjx 001011 V X I vxor 001011 V X vasub 001011 001100 V X I vrgather 001100 V X vclmul 001100 001101 001101 V X vclmulh 001101 001110 X I vslideup 001110 X vslide1up 001110 F vfslide1up 001110 V vrgatherei16 001111 X I vslidedown 001111 X vslide1down 001111 F vfslide1down funct6 funct6 funct6 010000 V X I vadc 010000 V VWXUNARY0 010000 V VWFUNARY0 010000 X VRXUNARY0 010000 F VRFUNARY0 010001 V X I vmadc 010001 010001 010010 V X vsbc 010010 V VXUNARY0 010010 V VFUNARY0 010011 V X vmsbc 010011 010011 V VFUNARY1 010100 V X vror 010100 V VMUNARY0 010100 010101 V X vrol 010101 010101 01010x I vror 010110 010110 010110 010111 V X I vmerge/vmv 010111 V vcompress 010111 F vfmerge/vfmv 011000 V X I vmseq 011000 V vmandn 011000 V F vmfeq 011001 V X I vmsne 011001 V vmand 011001 V F vmfle 011010 V X vmsltu 011010 V vmor 011010 011011 V X vmslt 011011 V vmxor 011011 V F vmflt 011100 V X I vmsleu 011100 V vmorn 011100 V F vmfne 011101 V X I vmsle 011101 V vmnand 011101 F vmfgt 011110 X I vmsgtu 011110 V vmnor 011110 011111 X I vmsgt 011111 V vmxnor 011111 F vmfge funct6 funct6 funct6 100000 V X I vsaddu 100000 V X vdivu 100000 V F vfdiv 100001 V X I vsadd 100001 V X vdiv 100001 F vfrdiv 100010 V X vssubu 100010 V X vremu 100010 100011 V X vssub 100011 V X vrem 100011 100100 100100 V X vmulhu 100100 V F vfmul 100101 V X I vsll 100101 V X vmul 100101 100110 100110 V X vmulhsu 100110 100111 V X vsmul 100111 V X vmulh 100111 F vfrsub I vmv<nr>r 101000 V X I vsrl 101000 101000 V F vfmadd 101001 V X I vsra 101001 V X vmadd 101001 V F vfnmadd 101010 V X I vssrl 101010 101010 V F vfmsub 101011 V X I vssra 101011 V X vnmsub 101011 V F vfnmsub 101100 V X I vnsrl 101100 101100 V F vfmacc 101101 V X I vnsra 101101 V X vmacc 101101 V F vfnmacc 101110 V X I vnclipu 101110 101110 V F vfmsac 101111 V X I vnclip 101111 V X vnmsac 101111 V F vfnmsac funct6 funct6 funct6 110000 V vwredsumu 110000 V X vwaddu 110000 V F vfwadd 110001 V vwredsum 110001 V X vwadd 110001 V vfwredusum 110010 110010 V X vwsubu 110010 V F vfwsub 110011 110011 V X vwsub 110011 V vfwredosum 110100 110100 V X vwaddu.w 110100 V F vfwadd.w 110101 V X I vwsll 110101 V X vwadd.w 110101 110110 110110 V X vwsubu.w 110110 V F vfwsub.w 110111 110111 V X vwsub.w 110111 111000 111000 V X vwmulu 111000 V F vfwmul 111001 111001 111001 111010 111010 V X vwmulsu 111010 111011 111011 V X vwmul 111011 111100 111100 V X vwmaccu 111100 V F vfwmacc 111101 111101 V X vwmacc 111101 V F vfwnmacc 111110 111110 X vwmaccus 111110 V F vfwmsac 111111 111111 V X vwmaccsu 111111 V F vfwnmsac Table 3. VXUNARY0 encoding space vs1 00010 vzext.vf8 00011 vsext.vf8 00100 vzext.vf4 00101 vsext.vf4 00110 vzext.vf2 00111 vsext.vf2 01000 vbrev8 01001 vrev8 01010 vbrev 01100 vclz 01101 vctz 01110 vcpop This section contains the supporting Sail code referenced by the instruction descriptions throughout the specification. The Sail Manual is recommended reading in order to best understand the supporting code. /* Auxiliary function for performing GF multiplication */ val xt2 : bits(8) -> bits(8) function xt2(x) = { (x << 1) ^ (if bit_to_bool(x[7]) then 0x1b else 0x00) } val xt3 : bits(8) -> bits(8) function xt3(x) = x ^ xt2(x) /* Multiply 8-bit field element by 4-bit value for AES MixCols step */ val gfmul : (bits(8), bits(4)) -> bits(8) function gfmul( x, y) = { (if bit_to_bool(y[0]) then x else 0x00) ^ (if bit_to_bool(y[1]) then xt2( x) else 0x00) ^ (if bit_to_bool(y[2]) then xt2(xt2( x)) else 0x00) ^ (if bit_to_bool(y[3]) then xt2(xt2(xt2(x))) else 0x00) } /* 8-bit to 32-bit partial AES Mix Column - forwards */ val aes_mixcolumn_byte_fwd : bits(8) -> bits(32) function aes_mixcolumn_byte_fwd(so) = { gfmul(so, 0x3) @ so @ so @ gfmul(so, 0x2) } /* 8-bit to 32-bit partial AES Mix Column - inverse*/ val aes_mixcolumn_byte_inv : bits(8) -> bits(32) function aes_mixcolumn_byte_inv(so) = { gfmul(so, 0xb) @ gfmul(so, 0xd) @ gfmul(so, 0x9) @ gfmul(so, 0xe) } /* 32-bit to 32-bit AES forward MixColumn */ val aes_mixcolumn_fwd : bits(32) -> bits(32) function aes_mixcolumn_fwd(x) = { let s0 : bits (8) = x[ 7.. 0]; let s1 : bits (8) = x[15.. 8]; let s2 : bits (8) = x[23..16]; let s3 : bits (8) = x[31..24]; let b0 : bits (8) = xt2(s0) ^ xt3(s1) ^ (s2) ^ (s3); let b1 : bits (8) = (s0) ^ xt2(s1) ^ xt3(s2) ^ (s3); let b2 : bits (8) = (s0) ^ (s1) ^ xt2(s2) ^ xt3(s3); let b3 : bits (8) = xt3(s0) ^ (s1) ^ (s2) ^ xt2(s3); b3 @ b2 @ b1 @ b0 /* Return value */ } /* 32-bit to 32-bit AES inverse MixColumn */ val aes_mixcolumn_inv : bits(32) -> bits(32) function aes_mixcolumn_inv(x) = { let s0 : bits (8) = x[ 7.. 0]; let s1 : bits (8) = x[15.. 8]; let s2 : bits (8) = x[23..16]; let s3 : bits (8) = x[31..24]; let b0 : bits (8) = gfmul(s0, 0xE) ^ gfmul(s1, 0xB) ^ gfmul(s2, 0xD) ^ gfmul(s3, 0x9); let b1 : bits (8) = gfmul(s0, 0x9) ^ gfmul(s1, 0xE) ^ gfmul(s2, 0xB) ^ gfmul(s3, 0xD); let b2 : bits (8) = gfmul(s0, 0xD) ^ gfmul(s1, 0x9) ^ gfmul(s2, 0xE) ^ gfmul(s3, 0xB); let b3 : bits (8) = gfmul(s0, 0xB) ^ gfmul(s1, 0xD) ^ gfmul(s2, 0x9) ^ gfmul(s3, 0xE); b3 @ b2 @ b1 @ b0 /* Return value */ } val aes_decode_rcon : bits(4) -> bits(32) function aes_decode_rcon(r) = { match r { 0x0 => 0x00000001, 0x1 => 0x00000002, 0x2 => 0x00000004, 0x3 => 0x00000008, 0x4 => 0x00000010, 0x5 => 0x00000020, 0x6 => 0x00000040, 0x7 => 0x00000080, 0x8 => 0x0000001b, 0x9 => 0x00000036, 0xA => 0x00000000, 0xB => 0x00000000, 0xC => 0x00000000, 0xD => 0x00000000, 0xE => 0x00000000, 0xF => 0x00000000 } } /* SM4 SBox - only one sbox for forwards and inverse */ let sm4_sbox_table : list(bits(8)) = [| 0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51, 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, 0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48 |] let aes_sbox_fwd_table : list(bits(8)) = [| 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 |] let aes_sbox_inv_table : list(bits(8)) = [| 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d |] /* Lookup function - takes an index and a list, and retrieves the * x'th element of that list. */ val sbox_lookup : (bits(8), list(bits(8))) -> bits(8) function sbox_lookup(x, table) = { match (x, table) { (0x00, t0::tn) => t0, ( y, t0::tn) => sbox_lookup(x - 0x01, tn) } } /* Easy function to perform a forward AES SBox operation on 1 byte. */ val aes_sbox_fwd : bits(8) -> bits(8) function aes_sbox_fwd(x) = sbox_lookup(x, aes_sbox_fwd_table) /* Easy function to perform an inverse AES SBox operation on 1 byte. */ val aes_sbox_inv : bits(8) -> bits(8) function aes_sbox_inv(x) = sbox_lookup(x, aes_sbox_inv_table) /* AES SubWord function used in the key expansion * - Applies the forward sbox to each byte in the input word. */ val aes_subword_fwd : bits(32) -> bits(32) function aes_subword_fwd(x) = { aes_sbox_fwd(x[31..24]) @ aes_sbox_fwd(x[23..16]) @ aes_sbox_fwd(x[15.. 8]) @ aes_sbox_fwd(x[ 7.. 0]) } /* AES Inverse SubWord function. * - Applies the inverse sbox to each byte in the input word. */ val aes_subword_inv : bits(32) -> bits(32) function aes_subword_inv(x) = { aes_sbox_inv(x[31..24]) @ aes_sbox_inv(x[23..16]) @ aes_sbox_inv(x[15.. 8]) @ aes_sbox_inv(x[ 7.. 0]) } /* Easy function to perform an SM4 SBox operation on 1 byte. */ val sm4_sbox : bits(8) -> bits(8) function sm4_sbox(x) = sbox_lookup(x, sm4_sbox_table) val aes_get_column : (bits(128), nat) -> bits(32) function aes_get_column(state,c) = (state >> (to_bits(7, 32 * c)))[31..0] /* 64-bit to 64-bit function which applies the AES forward sbox to each byte * in a 64-bit word. */ val aes_apply_fwd_sbox_to_each_byte : bits(64) -> bits(64) function aes_apply_fwd_sbox_to_each_byte(x) = { aes_sbox_fwd(x[63..56]) @ aes_sbox_fwd(x[55..48]) @ aes_sbox_fwd(x[47..40]) @ aes_sbox_fwd(x[39..32]) @ aes_sbox_fwd(x[31..24]) @ aes_sbox_fwd(x[23..16]) @ aes_sbox_fwd(x[15.. 8]) @ aes_sbox_fwd(x[ 7.. 0]) } /* 64-bit to 64-bit function which applies the AES inverse sbox to each byte * in a 64-bit word. */ val aes_apply_inv_sbox_to_each_byte : bits(64) -> bits(64) function aes_apply_inv_sbox_to_each_byte(x) = { aes_sbox_inv(x[63..56]) @ aes_sbox_inv(x[55..48]) @ aes_sbox_inv(x[47..40]) @ aes_sbox_inv(x[39..32]) @ aes_sbox_inv(x[31..24]) @ aes_sbox_inv(x[23..16]) @ aes_sbox_inv(x[15.. 8]) @ aes_sbox_inv(x[ 7.. 0]) } /* * AES full-round transformation functions. */ val getbyte : (bits(64), int) -> bits(8) function getbyte(x, i) = (x >> to_bits(6, i * 8))[7..0] val aes_rv64_shiftrows_fwd : (bits(64), bits(64)) -> bits(64) function aes_rv64_shiftrows_fwd(rs2, rs1) = { getbyte(rs1, 3) @ getbyte(rs2, 6) @ getbyte(rs2, 1) @ getbyte(rs1, 4) @ getbyte(rs2, 7) @ getbyte(rs2, 2) @ getbyte(rs1, 5) @ getbyte(rs1, 0) } val aes_rv64_shiftrows_inv : (bits(64), bits(64)) -> bits(64) function aes_rv64_shiftrows_inv(rs2, rs1) = { getbyte(rs2, 3) @ getbyte(rs2, 6) @ getbyte(rs1, 1) @ getbyte(rs1, 4) @ getbyte(rs1, 7) @ getbyte(rs2, 2) @ getbyte(rs2, 5) @ getbyte(rs1, 0) } /* 128-bit to 128-bit implementation of the forward AES ShiftRows transform. * Byte 0 of state is input column 0, bits 7..0. * Byte 5 of state is input column 1, bits 15..8. */ val aes_shift_rows_fwd : bits(128) -> bits(128) function aes_shift_rows_fwd(x) = { let ic3 : bits(32) = aes_get_column(x, 3); let ic2 : bits(32) = aes_get_column(x, 2); let ic1 : bits(32) = aes_get_column(x, 1); let ic0 : bits(32) = aes_get_column(x, 0); let oc0 : bits(32) = ic3[31..24] @ ic2[23..16] @ ic1[15.. 8] @ ic0[ 7.. 0]; let oc1 : bits(32) = ic0[31..24] @ ic3[23..16] @ ic2[15.. 8] @ ic1[ 7.. 0]; let oc2 : bits(32) = ic1[31..24] @ ic0[23..16] @ ic3[15.. 8] @ ic2[ 7.. 0]; let oc3 : bits(32) = ic2[31..24] @ ic1[23..16] @ ic0[15.. 8] @ ic3[ 7.. 0]; (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* 128-bit to 128-bit implementation of the inverse AES ShiftRows transform. * Byte 0 of state is input column 0, bits 7..0. * Byte 5 of state is input column 1, bits 15..8. */ val aes_shift_rows_inv : bits(128) -> bits(128) function aes_shift_rows_inv(x) = { let ic3 : bits(32) = aes_get_column(x, 3); /* In column 3 */ let ic2 : bits(32) = aes_get_column(x, 2); let ic1 : bits(32) = aes_get_column(x, 1); let ic0 : bits(32) = aes_get_column(x, 0); let oc0 : bits(32) = ic1[31..24] @ ic2[23..16] @ ic3[15.. 8] @ ic0[ 7.. 0]; let oc1 : bits(32) = ic2[31..24] @ ic3[23..16] @ ic0[15.. 8] @ ic1[ 7.. 0]; let oc2 : bits(32) = ic3[31..24] @ ic0[23..16] @ ic1[15.. 8] @ ic2[ 7.. 0]; let oc3 : bits(32) = ic0[31..24] @ ic1[23..16] @ ic2[15.. 8] @ ic3[ 7.. 0]; (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the forward sub-bytes step of AES to a 128-bit vector * representation of its state. */ val aes_subbytes_fwd : bits(128) -> bits(128) function aes_subbytes_fwd(x) = { let oc0 : bits(32) = aes_subword_fwd(aes_get_column(x, 0)); let oc1 : bits(32) = aes_subword_fwd(aes_get_column(x, 1)); let oc2 : bits(32) = aes_subword_fwd(aes_get_column(x, 2)); let oc3 : bits(32) = aes_subword_fwd(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the inverse sub-bytes step of AES to a 128-bit vector * representation of its state. */ val aes_subbytes_inv : bits(128) -> bits(128) function aes_subbytes_inv(x) = { let oc0 : bits(32) = aes_subword_inv(aes_get_column(x, 0)); let oc1 : bits(32) = aes_subword_inv(aes_get_column(x, 1)); let oc2 : bits(32) = aes_subword_inv(aes_get_column(x, 2)); let oc3 : bits(32) = aes_subword_inv(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the forward MixColumns step of AES to a 128-bit vector * representation of its state. */ val aes_mixcolumns_fwd : bits(128) -> bits(128) function aes_mixcolumns_fwd(x) = { let oc0 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 0)); let oc1 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 1)); let oc2 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 2)); let oc3 : bits(32) = aes_mixcolumn_fwd(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Applies the inverse MixColumns step of AES to a 128-bit vector * representation of its state. */ val aes_mixcolumns_inv : bits(128) -> bits(128) function aes_mixcolumns_inv(x) = { let oc0 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 0)); let oc1 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 1)); let oc2 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 2)); let oc3 : bits(32) = aes_mixcolumn_inv(aes_get_column(x, 3)); (oc3 @ oc2 @ oc1 @ oc0) /* Return value */ } /* Performs the word rotation for AES key schedule */ val aes_rotword : bits(32) -> bits(32) function aes_rotword(x) = { let a0 : bits (8) = x[ 7.. 0]; let a1 : bits (8) = x[15.. 8]; let a2 : bits (8) = x[23..16]; let a3 : bits (8) = x[31..24]; (a0 @ a3 @ a2 @ a1) /* Return Value */ } val brev : bits(SEW) -> bits(SEW) function brev(x) = { let output : bits(SEW) = 0; foreach (i from 0 to SEW-8 by 8) output[i+7..i] = reverse_bits_in_byte(input[i+7..i]); output /* Return Value */ } val reverse_bits_in_byte : bits(8) -> bits(8) function reverse_bits_in_byte(x) = { let output : bits(8) = 0; foreach (i from 0 to 7) output[i] = x[7-i]); output /* Return Value */ } val rev8 : bits(SEW) -> bits(SEW) function rev8(x) = { // endian swap let output : bits(SEW) = 0; let j = SEW - 1; foreach (k from 0 to (SEW - 8) by 8) { output[k..(k + 7)] = x[(j - 7)..j]; j = j - 8; output /* Return Value */ } RETIRE_SUCCESS val rol32 : bits(32) -> bits(32) function ROL32(x,n) = (X << N) | (X >> (32 - N)) val sm4_subword : bits(32) -> bits(32) function sm4_subword(x) = { sm4_sbox(x[31..24]) @ sm4_sbox(x[23..16]) @ sm4_sbox(x[15.. 8]) @ sm4_sbox(x[ 7.. 0]) }","title":"Cryptography Extensions: Vector Instructions, Version 1.0","component":"isa","version":"v20250508","name":"vector-crypto","url":"/isa/unpriv/vector-crypto.html","titles":[{"text":"Introduction","hash":"crypto_vector_introduction","id":1},{"text":"Intended Audience","hash":"crypto_vector_audience","id":2},{"text":"Sail Specifications","hash":"crypto_vector_sail_specifications","id":3},{"text":"Policies","hash":"crypto_vector_policies","id":4},{"text":"Element Groups","hash":"crypto-vector-element-groups","id":5},{"text":"Instruction Constraints","hash":"crypto-vector-instruction-constraints","id":6},{"text":"Vector-Scalar Instructions","hash":"crypto-vector-scalar-instructions","id":7},{"text":"Software Portability","hash":"crypto-vector-software-portability","id":8},{"text":"Extensions Overview","hash":"crypto_vector_extensions","id":9},{"text":"Zvbb - Vector Basic Bit-manipulation","hash":"zvbb","id":10},{"text":"Zvbc - Vector Carryless Multiplication","hash":"zvbc","id":11},{"text":"Zvkb - Vector Cryptography Bit-manipulation","hash":"zvkb","id":12},{"text":"Zvkg - Vector GCM/GMAC","hash":"zvkg","id":13},{"text":"Zvkned - NIST Suite: Vector AES Block Cipher","hash":"zvkned","id":14},{"text":"Zvknh[ab] - NIST Suite: Vector SHA-2 Secure Hash","hash":"zvknh","id":15},{"text":"Zvksed - ShangMi Suite: SM4 Block Cipher","hash":"zvksed","id":16},{"text":"Zvksh - ShangMi Suite: SM3 Secure Hash","hash":"zvksh","id":17},{"text":"Zvkn - NIST Algorithm Suite","hash":"zvkn","id":18},{"text":"Zvknc - NIST Algorithm Suite with carryless multiply","hash":"zvknc","id":19},{"text":"Zvkng - NIST Algorithm Suite with GCM","hash":"zvkng","id":20},{"text":"Zvks - ShangMi Algorithm Suite","hash":"zvks","id":21},{"text":"Zvksc - ShangMi Algorithm Suite with carryless multiplication","hash":"zvksc","id":22},{"text":"Zvksg - ShangMi Algorithm Suite with GCM","hash":"zvksg","id":23},{"text":"Zvkt - Vector Data-Independent Execution Latency","hash":"zvkt","id":24},{"text":"All Zvbb  instructions","hash":"all-zvbb-instructions","id":25},{"text":"All Zvbc instructions","hash":"all-zvbc-instructions","id":26},{"text":"add/sub","hash":"addsub","id":27},{"text":"add/sub with carry","hash":"addsub-with-carry","id":28},{"text":"compare and set","hash":"compare-and-set","id":29},{"text":"copy","hash":"copy","id":30},{"text":"extend","hash":"extend","id":31},{"text":"logical","hash":"logical","id":32},{"text":"multiply","hash":"multiply","id":33},{"text":"multiply-add","hash":"multiply-add","id":34},{"text":"Integer Merge","hash":"integer-merge","id":35},{"text":"permute","hash":"permute","id":36},{"text":"shift","hash":"shift","id":37},{"text":"slide","hash":"slide","id":38},{"text":"Instructions","hash":"crypto_vector_insns","id":39},{"text":"vaesdf.[vv,vs]","hash":"insns-vaesdf","id":40},{"text":"vaesdm.[vv,vs]","hash":"insns-vaesdm","id":41},{"text":"vaesef.[vv,vs]","hash":"insns-vaesef","id":42},{"text":"vaesem.[vv,vs]","hash":"insns-vaesem","id":43},{"text":"vaeskf1.vi","hash":"insns-vaeskf1","id":44},{"text":"vaeskf2.vi","hash":"insns-vaeskf2","id":45},{"text":"vaesz.vs","hash":"insns-vaesz","id":46},{"text":"vandn.[vv,vx]","hash":"insns-vandn","id":47},{"text":"vbrev.v","hash":"insns-vbrev","id":48},{"text":"vbrev8.v","hash":"insns-vbrev8","id":49},{"text":"vclmul.[vv,vx]","hash":"insns-vclmul","id":50},{"text":"vclmulh.[vv,vx]","hash":"insns-vclmulh","id":51},{"text":"vclz.v","hash":"insns-vclz","id":52},{"text":"vcpop.v","hash":"insns-vcpop","id":53},{"text":"vctz.v","hash":"insns-vctz","id":54},{"text":"vghsh.vv","hash":"insns-vghsh","id":55},{"text":"vgmul.vv","hash":"insns-vgmul","id":56},{"text":"vrev8.v","hash":"insns-vrev8","id":57},{"text":"vrol.[vv,vx]","hash":"insns-vrol","id":58},{"text":"vror.[vv,vx,vi]","hash":"insns-vror","id":59},{"text":"vsha2c[hl].vv","hash":"insns-vsha2c","id":60},{"text":"vsha2ms.vv","hash":"insns-vsha2ms","id":61},{"text":"vsm3c.vi","hash":"insns-vsm3c","id":62},{"text":"vsm3me.vv","hash":"insns-vsm3me","id":63},{"text":"vsm4k.vi","hash":"insns-vsm4k","id":64},{"text":"vsm4r.[vv,vs]","hash":"insns-vsm4r","id":65},{"text":"vwsll.[vv,vx,vi]","hash":"insns-vwsll","id":66},{"text":"Crypto Vector Cryptographic Instructions","hash":"crypto_vector_instructions","id":67},{"text":"Vector Bitmanip and Carryless Multiply Instructions","hash":"crypto_vector_instructions_Zvbb_Zvbc","id":68},{"text":"Supporting Sail Code","hash":"crypto_vector_appx_sail","id":69}]},"53":{"id":53,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification Appendix C: Vector Assembly Code Examples The following are provided as non-normative text to help explain the vector ISA. # vector-vector add routine of 32-bit integers # void vvaddint32(size_t n, const int*x, const int*y, int*z) # { for (size_t i=0; i<n; i++) { z[i]=x[i]+y[i]; } } # # a0 = n, a1 = x, a2 = y, a3 = z # Non-vector instructions are indented vvaddint32: vsetvli t0, a0, e32, m1, ta, ma # Set vector length based on 32-bit vectors vle32.v v0, (a1) # Get first vector sub a0, a0, t0 # Decrement number done slli t0, t0, 2 # Multiply number done by 4 bytes add a1, a1, t0 # Bump pointer vle32.v v1, (a2) # Get second vector add a2, a2, t0 # Bump pointer vadd.vv v2, v0, v1 # Sum vectors vse32.v v2, (a3) # Store result add a3, a3, t0 # Bump pointer bnez a0, vvaddint32 # Loop back ret # Finished # Code using one width for predicate and different width for masked # compute. # int8_t a[]; int32_t b[], c[]; # for (i=0; i<n; i++) { b[i] = (a[i] < 5) ? c[i] : 1; } # # Mixed-width code that keeps SEW/LMUL=8 loop: vsetvli a4, a0, e8, m1, ta, ma # Byte vector for predicate calc vle8.v v1, (a1) # Load a[i] add a1, a1, a4 # Bump pointer. vmslt.vi v0, v1, 5 # a[i] < 5? vsetvli x0, a0, e32, m4, ta, mu # Vector of 32-bit values. sub a0, a0, a4 # Decrement count vmv.v.i v4, 1 # Splat immediate to destination vle32.v v4, (a3), v0.t # Load requested elements of C, others undisturbed sll t1, a4, 2 add a3, a3, t1 # Bump pointer. vse32.v v4, (a2) # Store b[i]. add a2, a2, t1 # Bump pointer. bnez a0, loop # Any more? # void *memcpy(void* dest, const void* src, size_t n) # a0=dest, a1=src, a2=n # memcpy: mv a3, a0 # Copy destination loop: vsetvli t0, a2, e8, m8, ta, ma # Vectors of 8b vle8.v v0, (a1) # Load bytes add a1, a1, t0 # Bump pointer sub a2, a2, t0 # Decrement count vse8.v v0, (a3) # Store bytes add a3, a3, t0 # Bump pointer bnez a2, loop # Any more? ret # Return # (int16) z[i] = ((int8) x[i] < 5) ? (int16) a[i] : (int16) b[i]; # loop: vsetvli t0, a0, e8, m1, ta, ma # Use 8b elements. vle8.v v0, (a1) # Get x[i] sub a0, a0, t0 # Decrement element count add a1, a1, t0 # x[i] Bump pointer vmslt.vi v0, v0, 5 # Set mask in v0 vsetvli x0, x0, e16, m2, ta, mu # Use 16b elements. slli t0, t0, 1 # Multiply by 2 bytes vle16.v v2, (a2), v0.t # z[i] = a[i] case vmnot.m v0, v0 # Invert v0 add a2, a2, t0 # a[i] bump pointer vle16.v v2, (a3), v0.t # z[i] = b[i] case add a3, a3, t0 # b[i] bump pointer vse16.v v2, (a4) # Store z add a4, a4, t0 # z[i] bump pointer bnez a0, loop # void # saxpy(size_t n, const float a, const float *x, float *y) # { # size_t i; # for (i=0; i<n; i++) # y[i] = a * x[i] + y[i]; # } # # register arguments: # a0 n # fa0 a # a1 x # a2 y saxpy: vsetvli a4, a0, e32, m8, ta, ma vle32.v v0, (a1) sub a0, a0, a4 slli a4, a4, 2 add a1, a1, a4 vle32.v v8, (a2) vfmacc.vf v8, fa0, v0 vse32.v v8, (a2) add a2, a2, a4 bnez a0, saxpy ret # RV64IDV system # # void # sgemm_nn(size_t n, # size_t m, # size_t k, # const float*a, // m * k matrix # size_t lda, # const float*b, // k * n matrix # size_t ldb, # float*c, // m * n matrix # size_t ldc) # # c += a*b (alpha=1, no transpose on input matrices) # matrices stored in C row-major order #define n a0 #define m a1 #define k a2 #define ap a3 #define astride a4 #define bp a5 #define bstride a6 #define cp a7 #define cstride t0 #define kt t1 #define nt t2 #define bnp t3 #define cnp t4 #define akp t5 #define bkp s0 #define nvl s1 #define ccp s2 #define amp s3 # Use args as additional temporaries #define ft12 fa0 #define ft13 fa1 #define ft14 fa2 #define ft15 fa3 # This version holds a 16*VLMAX block of C matrix in vector registers # in inner loop, but otherwise does not cache or TLB tiling. sgemm_nn: addi sp, sp, -FRAMESIZE sd s0, OFFSET(sp) sd s1, OFFSET(sp) sd s2, OFFSET(sp) # Check for zero size matrices beqz n, exit beqz m, exit beqz k, exit # Convert elements strides to byte strides. ld cstride, OFFSET(sp) # Get arg from stack frame slli astride, astride, 2 slli bstride, bstride, 2 slli cstride, cstride, 2 slti t6, m, 16 bnez t6, end_rows c_row_loop: # Loop across rows of C blocks mv nt, n # Initialize n counter for next row of C blocks mv bnp, bp # Initialize B n-loop pointer to start mv cnp, cp # Initialize C n-loop pointer c_col_loop: # Loop across one row of C blocks vsetvli nvl, nt, e32, m1, ta, ma # 32-bit vectors, LMUL=1 mv akp, ap # reset pointer into A to beginning mv bkp, bnp # step to next column in B matrix # Initialize current C submatrix block from memory. vle32.v v0, (cnp); add ccp, cnp, cstride; vle32.v v1, (ccp); add ccp, ccp, cstride; vle32.v v2, (ccp); add ccp, ccp, cstride; vle32.v v3, (ccp); add ccp, ccp, cstride; vle32.v v4, (ccp); add ccp, ccp, cstride; vle32.v v5, (ccp); add ccp, ccp, cstride; vle32.v v6, (ccp); add ccp, ccp, cstride; vle32.v v7, (ccp); add ccp, ccp, cstride; vle32.v v8, (ccp); add ccp, ccp, cstride; vle32.v v9, (ccp); add ccp, ccp, cstride; vle32.v v10, (ccp); add ccp, ccp, cstride; vle32.v v11, (ccp); add ccp, ccp, cstride; vle32.v v12, (ccp); add ccp, ccp, cstride; vle32.v v13, (ccp); add ccp, ccp, cstride; vle32.v v14, (ccp); add ccp, ccp, cstride; vle32.v v15, (ccp) mv kt, k # Initialize inner loop counter # Inner loop scheduled assuming 4-clock occupancy of vfmacc instruction and single-issue pipeline # Software pipeline loads flw ft0, (akp); add amp, akp, astride; flw ft1, (amp); add amp, amp, astride; flw ft2, (amp); add amp, amp, astride; flw ft3, (amp); add amp, amp, astride; # Get vector from B matrix vle32.v v16, (bkp) # Loop on inner dimension for current C block k_loop: vfmacc.vf v0, ft0, v16 add bkp, bkp, bstride flw ft4, (amp) add amp, amp, astride vfmacc.vf v1, ft1, v16 addi kt, kt, -1 # Decrement k counter flw ft5, (amp) add amp, amp, astride vfmacc.vf v2, ft2, v16 flw ft6, (amp) add amp, amp, astride flw ft7, (amp) vfmacc.vf v3, ft3, v16 add amp, amp, astride flw ft8, (amp) add amp, amp, astride vfmacc.vf v4, ft4, v16 flw ft9, (amp) add amp, amp, astride vfmacc.vf v5, ft5, v16 flw ft10, (amp) add amp, amp, astride vfmacc.vf v6, ft6, v16 flw ft11, (amp) add amp, amp, astride vfmacc.vf v7, ft7, v16 flw ft12, (amp) add amp, amp, astride vfmacc.vf v8, ft8, v16 flw ft13, (amp) add amp, amp, astride vfmacc.vf v9, ft9, v16 flw ft14, (amp) add amp, amp, astride vfmacc.vf v10, ft10, v16 flw ft15, (amp) add amp, amp, astride addi akp, akp, 4 # Move to next column of a vfmacc.vf v11, ft11, v16 beqz kt, 1f # Don't load past end of matrix flw ft0, (akp) add amp, akp, astride 1: vfmacc.vf v12, ft12, v16 beqz kt, 1f flw ft1, (amp) add amp, amp, astride 1: vfmacc.vf v13, ft13, v16 beqz kt, 1f flw ft2, (amp) add amp, amp, astride 1: vfmacc.vf v14, ft14, v16 beqz kt, 1f # Exit out of loop flw ft3, (amp) add amp, amp, astride vfmacc.vf v15, ft15, v16 vle32.v v16, (bkp) # Get next vector from B matrix, overlap loads with jump stalls j k_loop 1: vfmacc.vf v15, ft15, v16 # Save C matrix block back to memory vse32.v v0, (cnp); add ccp, cnp, cstride; vse32.v v1, (ccp); add ccp, ccp, cstride; vse32.v v2, (ccp); add ccp, ccp, cstride; vse32.v v3, (ccp); add ccp, ccp, cstride; vse32.v v4, (ccp); add ccp, ccp, cstride; vse32.v v5, (ccp); add ccp, ccp, cstride; vse32.v v6, (ccp); add ccp, ccp, cstride; vse32.v v7, (ccp); add ccp, ccp, cstride; vse32.v v8, (ccp); add ccp, ccp, cstride; vse32.v v9, (ccp); add ccp, ccp, cstride; vse32.v v10, (ccp); add ccp, ccp, cstride; vse32.v v11, (ccp); add ccp, ccp, cstride; vse32.v v12, (ccp); add ccp, ccp, cstride; vse32.v v13, (ccp); add ccp, ccp, cstride; vse32.v v14, (ccp); add ccp, ccp, cstride; vse32.v v15, (ccp) # Following tail instructions should be scheduled earlier in free slots during C block save. # Leaving here for clarity. # Bump pointers for loop across blocks in one row slli t6, nvl, 2 add cnp, cnp, t6 # Move C block pointer over add bnp, bnp, t6 # Move B block pointer over sub nt, nt, nvl # Decrement element count in n dimension bnez nt, c_col_loop # Any more to do? # Move to next set of rows addi m, m, -16 # Did 16 rows above slli t6, astride, 4 # Multiply astride by 16 add ap, ap, t6 # Move A matrix pointer down 16 rows slli t6, cstride, 4 # Multiply cstride by 16 add cp, cp, t6 # Move C matrix pointer down 16 rows slti t6, m, 16 beqz t6, c_row_loop # Handle end of matrix with fewer than 16 rows. # Can use smaller versions of above decreasing in powers-of-2 depending on code-size concerns. end_rows: # Not done. exit: ld s0, OFFSET(sp) ld s1, OFFSET(sp) ld s2, OFFSET(sp) addi sp, sp, FRAMESIZE ret # v1 = v1 / v2 to almost 23 bits of precision. vfrec7.v v3, v2 # Estimate 1/v2 li t0, 0x3f800000 vmv.v.x v4, t0 # Splat 1.0 vfnmsac.vv v4, v2, v3 # 1.0 - v2 * est(1/v2) vfmadd.vv v3, v4, v3 # Better estimate of 1/v2 vmv.v.x v4, t0 # Splat 1.0 vfnmsac.vv v4, v2, v3 # 1.0 - v2 * est(1/v2) vfmadd.vv v3, v4, v3 # Better estimate of 1/v2 vfmul.vv v1, v1, v3 # Estimate of v1/v2 # v1 = sqrt(v1) to more than 23 bits of precision. fmv.w.x ft0, x0 # Mask off zero inputs vmfne.vf v0, v1, ft0 # to avoid DZ exception vfrsqrt7.v v2, v1, v0.t # Estimate r ~= 1/sqrt(v1) vmfne.vf v0, v2, ft0, v0.t # Mask off +inf to avoid NV li t0, 0x3f800000 fli.s ft0, 0.5 vmv.v.x v5, t0 # Splat 1.0 vfmul.vv v3, v1, v2, v0.t # t = v1 r vfmul.vf v4, v2, ft0, v0.t # 0.5 r vfmsub.vv v3, v2, v5, v0.t # t r - 1 vfnmsac.vv v2, v3, v4, v0.t # r - (0.5 r) (t r - 1) # Better estimate of 1/sqrt(v1) vfmul.vv v1, v1, v2, v0.t # t = v1 r vfmsub.vv v2, v1, v5, v0.t # t r - 1 vfmul.vf v3, v1, ft0, v0.t # 0.5 t vfnmsac.vv v1, v2, v3, v0.t # t - (0.5 t) (t r - 1) # ~ sqrt(v1) to about 23.3 bits # int strcmp(const char *src1, const char* src2) strcmp: ## Using LMUL=2, but same register names work for larger LMULs li t1, 0 # Initial pointer bump loop: vsetvli t0, x0, e8, m2, ta, ma # Max length vectors of bytes add a0, a0, t1 # Bump src1 pointer vle8ff.v v8, (a0) # Get src1 bytes add a1, a1, t1 # Bump src2 pointer vle8ff.v v16, (a1) # Get src2 bytes vmseq.vi v0, v8, 0 # Flag zero bytes in src1 vmsne.vv v1, v8, v16 # Flag if src1 != src2 vmor.mm v0, v0, v1 # Combine exit conditions vfirst.m a2, v0 # ==0 or != ? csrr t1, vl # Get number of bytes fetched bltz a2, loop # Loop if all same and no zero byte add a0, a0, a2 # Get src1 element address lbu a3, (a0) # Get src1 byte from memory add a1, a1, a2 # Get src2 element address lbu a4, (a1) # Get src2 byte from memory sub a0, a3, a4 # Return value. ret This appendix presents a non-normative example to help explain where compilers can make good use of the fractional LMUL feature. Consider the following (admittedly contrived) loop written in C: void add_ref(long N, signed char *restrict c_c, signed char *restrict c_a, signed char *restrict c_b, long *restrict l_c, long *restrict l_a, long *restrict l_b, long *restrict l_d, long *restrict l_e, long *restrict l_f, long *restrict l_g, long *restrict l_h, long *restrict l_i, long *restrict l_j, long *restrict l_k, long *restrict l_l, long *restrict l_m) { long i; for (i = 0; i < N; i++) { c_c[i] = c_a[i] + c_b[i]; // Note this 'char' addition that creates a mixed type situation l_c[i] = l_a[i] + l_b[i]; l_f[i] = l_d[i] + l_e[i]; l_i[i] = l_g[i] + l_h[i]; l_l[i] = l_k[i] + l_j[i]; l_m[i] += l_m[i] + l_c[i] + l_f[i] + l_i[i] + l_l[i]; } } The example loop has a high register pressure due to the many input variables and temporaries required. The compiler realizes there are two datatypes within the loop: an 8-bit 'char' and a 64-bit 'long *'. Without fractional LMUL, the compiler would be forced to use LMUL=1 for the 8-bit computation and LMUL=8 for the 64-bit computation(s), to have equal number of elements on all computations within the same loop iteration. Under LMUL=8, only 4 registers are available to the register allocator. Given the large number of 64-bit variables and temporaries required in this loop, the compiler ends up generating a lot of spill code. The code below demonstrates this effect: .LBB0_4: # %vector.body # =>This Inner Loop Header: Depth=1 add s9, a2, s6 vsetvli s1, zero, e8,m1,ta,mu vle8.v v25, (s9) add s1, a3, s6 vle8.v v26, (s1) vadd.vv v25, v26, v25 add s1, a1, s6 vse8.v v25, (s1) add s9, a5, s10 vsetvli s1, zero, e64,m8,ta,mu vle64.v v8, (s9) add s1, a6, s10 vle64.v v16, (s1) add s1, a7, s10 vle64.v v24, (s1) add s1, s3, s10 vle64.v v0, (s1) sd a0, -112(s0) ld a0, -128(s0) vs8r.v v0, (a0) # Spill LMUL=8 add s9, t6, s10 add s11, t5, s10 add ra, t2, s10 add s1, t3, s10 vle64.v v0, (s9) ld s9, -136(s0) vs8r.v v0, (s9) # Spill LMUL=8 vle64.v v0, (s11) ld s9, -144(s0) vs8r.v v0, (s9) # Spill LMUL=8 vle64.v v0, (ra) ld s9, -160(s0) vs8r.v v0, (s9) # Spill LMUL=8 vle64.v v0, (s1) ld s1, -152(s0) vs8r.v v0, (s1) # Spill LMUL=8 vadd.vv v16, v16, v8 ld s1, -128(s0) vl8r.v v8, (s1) # Reload LMUL=8 vadd.vv v8, v8, v24 ld s1, -136(s0) vl8r.v v24, (s1) # Reload LMUL=8 ld s1, -144(s0) vl8r.v v0, (s1) # Reload LMUL=8 vadd.vv v24, v0, v24 ld s1, -128(s0) vs8r.v v24, (s1) # Spill LMUL=8 ld s1, -152(s0) vl8r.v v0, (s1) # Reload LMUL=8 ld s1, -160(s0) vl8r.v v24, (s1) # Reload LMUL=8 vadd.vv v0, v0, v24 add s1, a4, s10 vse64.v v16, (s1) add s1, s2, s10 vse64.v v8, (s1) vadd.vv v8, v8, v16 add s1, t4, s10 ld s9, -128(s0) vl8r.v v16, (s9) # Reload LMUL=8 vse64.v v16, (s1) add s9, t0, s10 vadd.vv v8, v8, v16 vle64.v v16, (s9) add s1, t1, s10 vse64.v v0, (s1) vadd.vv v8, v8, v0 vsll.vi v16, v16, 1 vadd.vv v8, v8, v16 vse64.v v8, (s9) add s6, s6, s7 add s10, s10, s8 bne s6, s4, .LBB0_4 If instead of using LMUL=1 for the 8-bit computation, the compiler is allowed to use a fractional LMUL=1/2, then the 64-bit computations can be performed using LMUL=4 (note that the same ratio of 64-bit elements and 8-bit elements is preserved as in the previous example). Now the compiler has 8 available registers to perform register allocation, resulting in no spill code, as shown in the loop below: .LBB0_4: # %vector.body # =>This Inner Loop Header: Depth=1 add s9, a2, s6 vsetvli s1, zero, e8,mf2,ta,mu // LMUL=1/2 ! vle8.v v25, (s9) add s1, a3, s6 vle8.v v26, (s1) vadd.vv v25, v26, v25 add s1, a1, s6 vse8.v v25, (s1) add s9, a5, s10 vsetvli s1, zero, e64,m4,ta,mu // LMUL=4 vle64.v v28, (s9) add s1, a6, s10 vle64.v v8, (s1) vadd.vv v28, v8, v28 add s1, a7, s10 vle64.v v8, (s1) add s1, s3, s10 vle64.v v12, (s1) add s1, t6, s10 vle64.v v16, (s1) add s1, t5, s10 vle64.v v20, (s1) add s1, a4, s10 vse64.v v28, (s1) vadd.vv v8, v12, v8 vadd.vv v12, v20, v16 add s1, t2, s10 vle64.v v16, (s1) add s1, t3, s10 vle64.v v20, (s1) add s1, s2, s10 vse64.v v8, (s1) add s9, t4, s10 vadd.vv v16, v20, v16 add s11, t0, s10 vle64.v v20, (s11) vse64.v v12, (s9) add s1, t1, s10 vse64.v v16, (s1) vsll.vi v20, v20, 1 vadd.vv v28, v8, v28 vadd.vv v28, v28, v12 vadd.vv v28, v28, v16 vadd.vv v28, v28, v20 vse64.v v28, (s11) add s6, s6, s7 add s10, s10, s8 bne s6, s4, .LBB0_4","title":"Vector Assembly Code Examples","component":"isa","version":"v20250508","name":"vector-examples","url":"/isa/unpriv/vector-examples.html","titles":[{"text":"Vector-vector add example","hash":"vector-vector-add-example","id":1},{"text":"Example with mixed-width mask and compute.","hash":"example-with-mixed-width-mask-and-compute","id":2},{"text":"Memcpy example","hash":"memcpy-example","id":3},{"text":"Conditional example","hash":"conditional-example","id":4},{"text":"SAXPY example","hash":"saxpy-example","id":5},{"text":"SGEMM example","hash":"sgemm-example","id":6},{"text":"Division approximation example","hash":"division-approximation-example","id":7},{"text":"Square root approximation example","hash":"square-root-approximation-example","id":8},{"text":"C standard library strcmp example","hash":"c-standard-library-strcmp-example","id":9},{"text":"Fractional Lmul example","hash":"fractional-lmul-example","id":10}]},"54":{"id":54,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zabha\" Extension for Byte and Halfword Atomic Memory Operations, Version 1.0 The A-extension offers atomic memory operation (AMO) instructions for words, doublewords, and quadwords (only for AMOCAS). The absence of atomic operations for subword data types necessitates emulation strategies. For bitwise operations, this emulation can be performed via word-sized bitwise AMO* instructions. For non-bitwise operations, emulation is achievable using word-sized LR/SC instructions. Several limitations arise from this emulation approach: In systems with large-scale or Non-Uniform Memory Access (NUMA) configurations, emulation based on LR/SC introduces issues related to scalability and fairness, particularly under conditions of high contention. Emulation of narrower AMOs through wider AMO* instructions on non-idempotent IO memory regions may result in unintended side effects. Utilizing wider AMO* instructions for emulating narrower AMOs risks activating extraneous breakpoints or watchpoints. In the absence of native support for subword atomics, compilers often resort to inlining code sequences to provide the required emulation. This practice contributes to an increase in code size, with consequent impacts on system performance and memory utilization. The Zabha extension addresses these limitations by adding support for byte and halfword atomic memory operations to the RISC-V Unprivileged ISA. The Zabha extension depends upon the Zaamo standard extension. Zabha extension provides the AMO[ADD|AND|OR|XOR|SWAP|MIN[U]|MAX[U]].[B|H] instructions. If Zacas extension is also implemented, Zabha further provides the AMOCAS.[B|H] instructions. Byte and halfword AMOs always sign-extend the value placed in rd, and ignore the bits of the original value in rs2. The AMOCAS.[B|H] instructions similarly ignore the bits of the original value in rd. Similar to the AMOs specified in the A extension, the Zabha extension mandates that the address contained in the rs1 register must be naturally aligned to the size of the operand. The same exception options as specified in the A extension are applicable in cases where the address is not naturally aligned. Similar to the AMOs specified in the A and Zacas extensions, the AMOs in the Zabha extension optionally provide release consistency semantics, using the aq and rl bits, to help implement multiprocessor synchronization. Zabha omits byte and halfword support for LR and SC due to low utility.","title":"\"Zabha\" Extension for Byte and Halfword Atomic Memory Operations, Version 1.0","component":"isa","version":"v20250508","name":"zabha","url":"/isa/unpriv/zabha.html","titles":[{"text":"Byte and Halfword Atomic Memory Operation Instructions","hash":"byte-and-halfword-atomic-memory-operation-instructions","id":1}]},"55":{"id":55,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zacas\" Extension for Atomic Compare-and-Swap (CAS) Instructions, Version 1.0.0 Compare-and-Swap (CAS) provides an easy and typically faster way to perform thread synchronization operations when supported as a hardware instruction. CAS is typically used by lock-free and wait-free algorithms. This extension proposes CAS instructions to operate on 32-bit, 64-bit, and 128-bit (RV64 only) data values. The CAS instruction supports the C++11 atomic compare and exchange operation. While compare-and-swap for XLEN wide data may be accomplished using LR/SC, the CAS atomic instructions scale better to highly parallel systems than LR/SC. Many lock-free algorithms, such as a lock-free queue, require manipulation of pointer variables. A simple CAS operation may not be sufficient to guard against what is commonly referred to as the ABA problem in such algorithms that manipulate pointer variables. To avoid the ABA problem, the algorithms associate a reference counter with the pointer variable and perform updates using a quadword compare and swap (of both the pointer and the counter). The double and quadword CAS instructions support implementation of algorithms for ABA problem avoidance. The Zacas extension depends upon the Zaamo extension. For RV32, AMOCAS.W atomically loads a 32-bit data value from address in rs1, compares the loaded value to the 32-bit value held in rd, and if the comparison is bitwise equal, then stores the 32-bit value held in rs2 to the original address in rs1. The value loaded from memory is placed into register rd. The operation performed by AMOCAS.W for RV32 is as follows: temp = mem[X(rs1)] if ( temp == X(rd) ) mem[X(rs1)] = X(rs2) X(rd) = temp AMOCAS.D is similar to AMOCAS.W but operates on 64-bit data values. For RV32, AMOCAS.D atomically loads 64-bits of a data value from address in rs1, compares the loaded value to a 64-bit value held in a register pair consisting of rd and rd+1, and if the comparison is bitwise equal, then stores the 64-bit value held in the register pair rs2 and rs2+1 to the original address in rs1. The value loaded from memory is placed into the register pair rd and rd+1. The instruction requires the first register in the pair to be even numbered; encodings with odd numbered registers specified in rs2 and rd are reserved. When the first register of a source register pair is x0, then both halves of the pair read as zero. When the first register of a destination register pair is x0, then the entire register result is discarded and neither destination register is written. The operation performed by AMOCAS.D for RV32 is as follows: temp0 = mem[X(rs1)+0] temp1 = mem[X(rs1)+4] comp0 = (rd == x0) ? 0 : X(rd) comp1 = (rd == x0) ? 0 : X(rd+1) swap0 = (rs2 == x0) ? 0 : X(rs2) swap1 = (rs2 == x0) ? 0 : X(rs2+1) if ( temp0 == comp0 ) && ( temp1 == comp1 ) mem[X(rs1)+0] = swap0 mem[X(rs1)+4] = swap1 endif if ( rd != x0 ) X(rd) = temp0 X(rd+1) = temp1 endif For RV64, AMOCAS.W atomically loads a 32-bit data value from address in rs1, compares the loaded value to the lower 32 bits of the value held in rd, and if the comparison is bitwise equal, then stores the lower 32 bits of the value held in rs2 to the original address in rs1. The 32-bit value loaded from memory is sign-extended and is placed into register rd. The operation performed by AMOCAS.W for RV64 is as follows: temp[31:0] = mem[X(rs1)] if ( temp[31:0] == X(rd)[31:0] ) mem[X(rs1)] = X(rs2)[31:0] X(rd) = SignExtend(temp[31:0]) For RV64, AMOCAS.D atomically loads 64-bits of a data value from address in rs1, compares the loaded value to a 64-bit value held in rd, and if the comparison is bitwise equal, then stores the 64-bit value held in rs2 to the original address in rs1. The value loaded from memory is placed into register rd. The operation performed by AMOCAS.D for RV64 is as follows: temp = mem[X(rs1)] if ( temp == X(rd) ) mem[X(rs1)] = X(rs2) X(rd) = temp AMOCAS.Q (RV64 only) atomically loads 128-bits of a data value from address in rs1, compares the loaded value to a 128-bit value held in a register pair consisting of rd and rd+1, and if the comparison is bitwise equal, then stores the 128-bit value held in the register pair rs2 and rs2+1 to the original address in rs1. The value loaded from memory is placed into the register pair rd and rd+1. The instruction requires the first register in the pair to be even numbered; encodings with odd numbered registers specified in rs2 and rd are reserved. When the first register of a source register pair is x0, then both halves of the pair read as zero. When the first register of a destination register pair is x0, then the entire register result is discarded and neither destination register is written. The operation performed by AMOCAS.Q is as follows: temp0 = mem[X(rs1)+0] temp1 = mem[X(rs1)+8] comp0 = (rd == x0) ? 0 : X(rd) comp1 = (rd == x0) ? 0 : X(rd+1) swap0 = (rs2 == x0) ? 0 : X(rs2) swap1 = (rs2 == x0) ? 0 : X(rs2+1) if ( temp0 == comp0 ) && ( temp1 == comp1 ) mem[X(rs1)+0] = swap0 mem[X(rs1)+8] = swap1 endif if ( rd != x0 ) X(rd) = temp0 X(rd+1) = temp1 endif Some algorithms may load the previous data value of a memory location into the register used as the compare data value source by a Zacas instruction. When using a Zacas instruction that uses a register pair to source the compare value, the two registers may be loaded using two individual loads. The two individual loads may read an inconsistent pair of values but that is not an issue since the AMOCAS operation itself uses an atomic load-pair from memory to obtain the data value for its comparison. The following example code sequence illustrates the use of AMOCAS.D in a RV32 implementation to atomically increment a 64-bit counter. # a0 - address of the counter. increment: lw a2, (a0) # Load current counter value using lw a3, 4(a0) # two individual loads. retry: mv a6, a2 # Save the low 32 bits of the current value. mv a7, a3 # Save the high 32 bits of the current value. addi a4, a2, 1 # Increment the low 32 bits. sltu a1, a4, a2 # Determine if there is a carry out. add a5, a3, a1 # Add the carry if any to high 32 bits. amocas.d.aqrl a2, a4, (a0) bne a2, a6, retry # If amocas.d failed then retry bne a3, a7, retry # using current values loaded by amocas.d. ret Just as for AMOs in the A extension, AMOCAS.W/D/Q requires that the address held in rs1 be naturally aligned to the size of the operand (i.e., 16-byte aligned for quadwords, eight-byte aligned for doublewords, and four-byte aligned for words). And the same exception options apply if the address is not naturally aligned. Just as for AMOs in the A extension, the AMOCAS.W/D/Q optionally provide release consistency semantics, using the aq and rl bits, to help implement multiprocessor synchronization. The memory operation performed by an AMOCAS.W/D/Q, when successful, has acquire semantics if aq bit is 1 and has release semantics if rl bit is 1. The memory operation performed by an AMOCAS.W/D/Q, when not successful, has acquire semantics if aq bit is 1 but does not have release semantics, regardless of rl. A FENCE instruction may be used to order the memory read access and, if produced, the memory write access by an AMOCAS.W/D/Q instruction. An unsuccessful AMOCAS.W/D/Q may either not perform a memory write or may write back the old value loaded from memory. The memory write, if produced, does not have release semantics, regardless of rl. Irrespective of whether a write is actually performed, the instruction is treated as an AMO for the purposes of the RVWMO PPO rules. An AMOCAS.W/D/Q instruction always requires write permissions. The following example code sequence illustrates the use of AMOCAS.Q to implement the enqueue operation for a non-blocking concurrent queue using the algorithm outlined in [20]. The algorithm atomically operates on a pointer and its associated modification counter using the AMOCAS.Q instruction to avoid the ABA problem. # Enqueue operation of a non-blocking concurrent queue. # Data structures used by the queue: # structure pointer_t {ptr: node_t *, count: uint64_t} # structure node_t {next: pointer_t, value: data type} # structure queue_t {Head: pointer_t, Tail: pointer_t} # Inputs to the procedure: # a0 - address of Tail variable # a4 - address of a new node to insert at tail enqueue: ld a6, (a0) # a6 = Tail.ptr ld a7, 8(a0) # a7 = Tail.count ld a2, (a6) # a2 = Tail.ptr->next.ptr ld a3, 8(a6) # a3 = Tail.ptr->next.count ld t1, (a0) ld t2, 8(a0) bne a6, t1, enqueue # Retry if Tail & next are not consistent bne a7, t2, enqueue # Retry if Tail & next are not consistent bne a2, x0, move_tail # Was tail pointing to the last node? mv t1, a2 # Save Tail.ptr->next.ptr mv t2, a3 # Save Tail.ptr->next.count addi a5, a3, 1 # Link the node at the end of the list amocas.q.aqrl a2, a4, (a6) bne a2, t1, enqueue # Retry if CAS failed bne a3, t2, enqueue # Retry if CAS failed addi a5, a7, 1 # Update Tail to the inserted node amocas.q.aqrl a6, a4, (a0) ret # Enqueue done move_tail: # Tail was not pointing to the last node addi a3, a7, 1 # Try to swing Tail to the next node amocas.q.aqrl a6, a2, (a0) j enqueue # Retry There are four levels of PMA support defined for AMOs in the A extension. Zacas defines three additional levels of support: AMOCASW, AMOCASD, and AMOCASQ. AMOCASW indicates that in addition to instructions indicated by AMOArithmetic level support, the AMOCAS.W instruction is supported. AMOCASD indicates that in addition to instructions indicated by AMOCASW level support, the AMOCAS.D instruction is supported. AMOCASQ indicates that in addition to instructions indicated by AMOCASD level support, the AMOCAS.Q instruction is supported. AMOCASW/D/Q require AMOArithmetic level support as the AMOCAS.W/D/Q instructions require ability to perform an arithmetic comparison and a swap operation.","title":"\"Zacas\" Extension for Atomic Compare-and-Swap (CAS) Instructions, Version 1.0.0","component":"isa","version":"v20250508","name":"zacas","url":"/isa/unpriv/zacas.html","titles":[{"text":"Word/Doubleword/Quadword CAS (AMOCAS.W/D/Q) Instructions","hash":"worddoublewordquadword-cas-amocas-wdq-instructions","id":1},{"text":"Additional AMO PMAs","hash":"additional-amo-pmas","id":2}]},"56":{"id":56,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zawrs\" Extension for Wait-on-Reservation-Set instructions, Version 1.01 The Zawrs extension defines a pair of instructions to be used in polling loops that allows a core to enter a low-power state and wait on a store to a memory location. Waiting for a memory location to be updated is a common pattern in many use cases such as: Contenders for a lock waiting for the lock variable to be updated. Consumers waiting on the tail of an empty queue for the producer to queue work/data. The producer may be code executing on a RISC-V hart, an accelerator device, an external I/O agent. Code waiting on a flag to be set in memory indicative of an event occurring. For example, software on a RISC-V hart may wait on a \"done\" flag to be set in memory by an accelerator device indicating completion of a job previously submitted to the device. Such use cases involve polling on memory locations, and such busy loops can be a wasteful expenditure of energy. To mitigate the wasteful looping in such usages, a WRS.NTO (WRS-with-no-timeout) instruction is provided. Instead of polling for a store to a specific memory location, software registers a reservation set that includes all the bytes of the memory location using the LR instruction. Then a subsequent WRS.NTO instruction would cause the hart to temporarily stall execution in a low-power state until a store occurs to the reservation set or an interrupt is observed. Sometimes the program waiting on a memory update may also need to carry out a task at a future time or otherwise place an upper bound on the wait. To support such use cases a second instruction WRS.STO (WRS-with-short-timeout) is provided that works like WRS.NTO but bounds the stall duration to an implementation-define short timeout such that the stall is terminated on the timeout if no other conditions have occurred to terminate the stall. The program using this instruction may then determine if its deadline has been reached. The instructions in the Zawrs extension are only useful in conjunction with the LR instruction, which is provided by the Zalrsc component of the A extension. The WRS.NTO and WRS.STO instructions cause the hart to temporarily stall execution in a low-power state as long as the reservation set is valid and no pending interrupts, even if disabled, are observed. For WRS.STO the stall duration is bounded by an implementation defined short timeout. These instructions are available in all privilege modes. Hart execution may be stalled while the following conditions are all satisfied: The reservation set is valid If WRS.STO, a \"short\" duration since start of stall has not elapsed No pending interrupt is observed (see the rules below) While stalled, an implementation is permitted to occasionally terminate the stall and complete execution for any reason. WRS.NTO and WRS.STO instructions follow the rules of the WFI instruction for resuming execution on a pending interrupt. When the TW (Timeout Wait) bit in mstatus is set and WRS.NTO is executed in any privilege mode other than M mode, and it does not complete within an implementation-specific bounded time limit, the WRS.NTO instruction will cause an illegal-instruction exception. When executing in VS or VU mode, if the VTW bit is set in hstatus, the TW bit in mstatus is clear, and the WRS.NTO does not complete within an implementation-specific bounded time limit, the WRS.NTO instruction will cause a virtual-instruction exception. Since the WRS.STO and WRS.NTO instructions can complete execution for reasons other than stores to the reservation set, software will likely need a means of looping until the required stores have occurred. The duration of a WRS.STO instruction’s timeout may vary significantly within and among implementations. In typical implementations this duration should be roughly in the range of 10 to 100 times an on-chip cache miss latency or a cacheless access to main memory. WRS.NTO, unlike WFI, is not specified to cause an illegal instruction exception if executed in U-mode when the governing TW bit is 0. WFI is typically not expected to be used in U-mode and on many systems may promptly cause an illegal-instruction exception if used at U-mode. Unlike WFI, WRS.NTO is expected to be used by software in U-mode when waiting on memory but without a deadline for that wait.","title":"\"Zawrs\" Extension for Wait-on-Reservation-Set instructions, Version 1.01","component":"isa","version":"v20250508","name":"zawrs","url":"/isa/unpriv/zawrs.html","titles":[{"text":"Wait-on-Reservation-Set Instructions","hash":"Zawrs","id":1}]},"57":{"id":57,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zc*\" Extension for Code Size Reduction, Version 1.0.0 Zc* is a group of extensions that define subsets of the existing C extension (Zca, Zcd, Zcf) and new extensions which only contain 16-bit encodings. Zcm* all reuse the encodings for c.fld, c.fsd, c.fldsp, c.fsdsp. Table 1. Zc* extension overview Instruction Zca Zcf Zcd Zcb Zcmp Zcmt The Zca extension is added as way to refer to instructions in the C extension that do not include the floating-point loads and stores C excl. c.f* yes The Zcf extension is added as a way to refer to compressed single-precision floating-point load/stores c.flw rv32 c.flwsp rv32 c.fsw rv32 c.fswsp rv32 The Zcd extension is added as a way to refer to compressed double-precision floating-point load/stores c.fld yes c.fldsp yes c.fsd yes c.fsdsp yes Simple operations for use on all architectures c.lbu yes c.lh yes c.lhu yes c.sb yes c.sh yes c.zext.b yes c.sext.b yes c.zext.h yes c.sext.h yes c.zext.w yes c.mul yes c.not yes PUSH/POP and double move which overlap with c.fsdsp. Complex operations intended for embedded CPUs cm.push yes cm.pop yes cm.popret yes cm.popretz yes cm.mva01s yes cm.mvsa01 yes Table jump which overlaps with c.fsdsp. Complex operations intended for embedded CPUs cm.jt yes cm.jalt yes The C extension is the superset of the following extensions: Zca Zcf if F is specified (RV32 only) Zcd if D is specified As C defines the same instructions as Zca, Zcf and Zcd, the rule is that: C always implies Zca C+F implies Zcf (RV32 only) C+D implies Zcd The Zce extension is intended to be used for microcontrollers, and includes all relevant Zc extensions. Specifying Zce on RV32 without F includes Zca, Zcb, Zcmp, Zcmt Specifying Zce on RV32 with F includes Zca, Zcb, Zcmp, Zcmt and Zcf Specifying Zce on RV64 always includes Zca, Zcb, Zcmp, Zcmt Zcf doesn’t exist for RV64 Therefore common ISA strings can be updated as follows to include the relevant Zc extensions, for example: RV32IMC becomes RV32IM_Zce RV32IMCF becomes RV32IMF_Zce MISA.C is set if the following extensions are selected: Zca and not F Zca, Zcf and F (but not D) is specified (RV32 only) Zca, Zcf and Zcd if D is specified (RV32 only) this configuration excludes Zcmp, Zcmt Zca, Zcd if D is specified (RV64 only) this configuration excludes Zcmp, Zcmt The Zca extension is added as way to refer to instructions in the C extension that do not include the floating-point loads and stores. Therefore it excluded all 16-bit floating point loads and stores: c.flw, c.flwsp, c.fsw, c.fswsp, c.fld, c.fldsp, c.fsd, c.fsdsp. the C extension only includes F/D instructions when D and F are also specified Zcf is the existing set of compressed single precision floating point loads and stores: c.flw, c.flwsp, c.fsw, c.fswsp. Zcf is only relevant to RV32, it cannot be specified for RV64. The Zcf extension depends on the Zca and F extensions. Zcd is the existing set of compressed double precision floating point loads and stores: c.fld, c.fldsp, c.fsd, c.fsdsp. The Zcd extension depends on the Zca and D extensions. Zcb has simple code-size saving instructions which are easy to implement on all CPUs. All encodings are currently reserved for all architectures, and have no conflicts with any existing extensions. Zcb can be implemented on any CPU as the instructions are 16-bit versions of existing 32-bit instructions from the application class profile. The Zcb extension depends on the Zca extension. As shown on the individual instruction pages, many of the instructions in Zcb depend upon another extension being implemented. For example, c.mul is only implemented if M or Zmmul is implemented, and c.sext.b is only implemented if Zbb is implemented. The c.mul encoding uses the CA register format along with other instructions such as c.sub, c.xor etc. c.sext.w is a pseudoinstruction for c.addiw rd, 0 (RV64) RV32 RV64 Mnemonic Instruction yes yes c.lbu rd', uimm(rs1') Load unsigned byte, 16-bit encoding yes yes c.lhu rd', uimm(rs1') Load unsigned halfword, 16-bit encoding yes yes c.lh rd', uimm(rs1') Load signed halfword, 16-bit encoding yes yes c.sb rs2', uimm(rs1') Store byte, 16-bit encoding yes yes c.sh rs2', uimm(rs1') Store halfword, 16-bit encoding yes yes c.zext.b rsd' Zero extend byte, 16-bit encoding yes yes c.sext.b rsd' Sign extend byte, 16-bit encoding yes yes c.zext.h rsd' Zero extend halfword, 16-bit encoding yes yes c.sext.h rsd' Sign extend halfword, 16-bit encoding yes c.zext.w rsd' Zero extend word, 16-bit encoding yes yes c.not rsd' Bitwise not, 16-bit encoding yes yes c.mul rsd', rs2' Multiply, 16-bit encoding The Zcmp extension is a set of instructions which may be executed as a series of existing 32-bit RISC-V instructions. This extension reuses some encodings from c.fsdsp. Therefore it is incompatible with Zcd, which is included when C and D extensions are both present. Zcmp is primarily targeted at embedded class CPUs due to implementation complexity. Additionally, it is not compatible with architecture class profiles. The Zcmp extension depends on the Zca extension. The PUSH/POP assembly syntax uses several variables, the meaning of which are: reg_list is a list containing 1 to 13 registers (ra and 0 to 12 s registers) valid values: {ra}, \\{ra, s0}, \\{ra, s0-s1}, \\{ra, s0-s2}, …​, \\{ra, s0-s8}, \\{ra, s0-s9}, \\{ra, s0-s11} note that \\{ra, s0-s10} is not valid, giving 12 lists not 13 for better encoding stack_adj is the total size of the stack frame. valid values vary with register list length and the specific encoding, see the instruction pages for details. RV32 RV64 Mnemonic Instruction yes yes cm.push {reg_list}, -stack_adj cm.push yes yes cm.pop {reg_list}, stack_adj cm.pop yes yes cm.popret {reg_list}, stack_adj cm.popret yes yes cm.popretz {reg_list}, stack_adj cm.popretz yes yes cm.mva01s rs1', rs2' Move two s0-s7 registers into a0-a1 yes yes cm.mvsa01 r1s', r2s' Move a0-a1 into two different s0-s7 registers Zcmt adds the table jump instructions and also adds the jvt CSR. The jvt CSR requires a state enable if Smstateen is implemented. See jvt CSR, table jump base vector and control register for details. This extension reuses some encodings from c.fsdsp. Therefore it is incompatible with Zcd, which is included when C and D extensions are both present. Zcmt is primarily targeted at embedded class CPUs due to implementation complexity. Additionally, it is not compatible with RVA profiles. The Zcmt extension depends on the Zca and Zicsr extensions. RV32 RV64 Mnemonic Instruction yes yes cm.jt index Jump via table yes yes cm.jalt index Jump and link via table Several instructions in this specification use the following new instruction formats. Format instructions 15:10 9 8 7 6 5 4 3 2 1 0 CLB c.lbu funct6 rs1' uimm rd' op CSB c.sb funct6 rs1' uimm rs2' op CLH c.lhu, c.lh funct6 rs1' funct1 uimm rd' op CSH c.sh funct6 rs1' funct1 uimm rs2' op CU c.[sz]ext.*, c.not funct6 rd'/rs1' funct5 op CMMV cm.mvsa01 cm.mva01s funct6 r1s' funct2 r2s' op CMJT cm.jt cm.jalt funct6 index op CMPP cm.push*, cm.pop* funct6 funct2 urlist spimm op c.mul uses the existing CA format. Synopsis: Load unsigned byte, 16-bit encoding Mnemonic: c.lbu rd', uimm(rs1') Encoding (RV32, RV64): The immediate offset is formed as follows: uimm[31:2] = 0; uimm[1] = encoding[5]; uimm[0] = encoding[6]; Description: This instruction loads a byte from the memory address formed by adding rs1' to the zero extended immediate uimm. The resulting byte is zero extended to XLEN bits and is written to rd'. rd' and rs1' are from the standard 8-register set x8-x15. Prerequisites: None Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. X(rdc) = EXTZ(mem[X(rs1c)+EXTZ(uimm)][7..0]); Synopsis: Load unsigned halfword, 16-bit encoding Mnemonic: c.lhu rd', uimm(rs1') Encoding (RV32, RV64): The immediate offset is formed as follows: uimm[31:2] = 0; uimm[1] = encoding[5]; uimm[0] = 0; Description: This instruction loads a halfword from the memory address formed by adding rs1' to the zero extended immediate uimm. The resulting halfword is zero extended to XLEN bits and is written to rd'. rd' and rs1' are from the standard 8-register set x8-x15. Prerequisites: None Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. X(rdc) = EXTZ(load_mem[X(rs1c)+EXTZ(uimm)][15..0]); Synopsis: Load signed halfword, 16-bit encoding Mnemonic: c.lh rd', uimm(rs1') Encoding (RV32, RV64): The immediate offset is formed as follows: uimm[31:2] = 0; uimm[1] = encoding[5]; uimm[0] = 0; Description: This instruction loads a halfword from the memory address formed by adding rs1' to the zero extended immediate uimm. The resulting halfword is sign extended to XLEN bits and is written to rd'. rd' and rs1' are from the standard 8-register set x8-x15. Prerequisites: None Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. X(rdc) = EXTS(load_mem[X(rs1c)+EXTZ(uimm)][15..0]); Synopsis: Store byte, 16-bit encoding Mnemonic: c.sb rs2', uimm(rs1') Encoding (RV32, RV64): The immediate offset is formed as follows: uimm[31:2] = 0; uimm[1] = encoding[5]; uimm[0] = encoding[6]; Description: This instruction stores the least significant byte of rs2' to the memory address formed by adding rs1' to the zero extended immediate uimm. rs1' and rs2' are from the standard 8-register set x8-x15. Prerequisites: None Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. mem[X(rs1c)+EXTZ(uimm)][7..0] = X(rs2c) Synopsis: Store halfword, 16-bit encoding Mnemonic: c.sh rs2', uimm(rs1') Encoding (RV32, RV64): The immediate offset is formed as follows: uimm[31:2] = 0; uimm[1] = encoding[5]; uimm[0] = 0; Description: This instruction stores the least significant halfword of rs2' to the memory address formed by adding rs1' to the zero extended immediate uimm. rs1' and rs2' are from the standard 8-register set x8-x15. Prerequisites: None Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. mem[X(rs1c)+EXTZ(uimm)][15..0] = X(rs2c) Synopsis: Zero extend byte, 16-bit encoding Mnemonic: c.zext.b rd'/rs1' Encoding (RV32, RV64): Description: This instruction takes a single source/destination operand. It zero-extends the least-significant byte of the operand to XLEN bits by inserting zeros into all of the bits more significant than 7. rd'/rs1' is from the standard 8-register set x8-x15. Prerequisites: None 32-bit equivalent: andi rd'/rs1', rd'/rs1', 0xff The SAIL module variable for rd'/rs1' is called rsdc. Operation: X(rsdc) = EXTZ(X(rsdc)[7..0]); Synopsis: Sign extend byte, 16-bit encoding Mnemonic: c.sext.b rd'/rs1' Encoding (RV32, RV64): Description: This instruction takes a single source/destination operand. It sign-extends the least-significant byte in the operand to XLEN bits by copying the most-significant bit in the byte (i.e., bit 7) to all of the more-significant bits. rd'/rs1' is from the standard 8-register set x8-x15. Prerequisites: Zbb is also required. The SAIL module variable for rd'/rs1' is called rsdc. Operation: X(rsdc) = EXTS(X(rsdc)[7..0]); Synopsis: Zero extend halfword, 16-bit encoding Mnemonic: c.zext.h rd'/rs1' Encoding (RV32, RV64): Description: This instruction takes a single source/destination operand. It zero-extends the least-significant halfword of the operand to XLEN bits by inserting zeros into all of the bits more significant than 15. rd'/rs1' is from the standard 8-register set x8-x15. Prerequisites: Zbb is also required. The SAIL module variable for rd'/rs1' is called rsdc. Operation: X(rsdc) = EXTZ(X(rsdc)[15..0]); Synopsis: Sign extend halfword, 16-bit encoding Mnemonic: c.sext.h rd'/rs1' Encoding (RV32, RV64): Description: This instruction takes a single source/destination operand. It sign-extends the least-significant halfword in the operand to XLEN bits by copying the most-significant bit in the halfword (i.e., bit 15) to all of the more-significant bits. rd'/rs1' is from the standard 8-register set x8-x15. Prerequisites: Zbb is also required. The SAIL module variable for rd'/rs1' is called rsdc. Operation: X(rsdc) = EXTS(X(rsdc)[15..0]); Synopsis: Zero extend word, 16-bit encoding Mnemonic: c.zext.w rd'/rs1' Encoding (RV64): Description: This instruction takes a single source/destination operand. It zero-extends the least-significant word of the operand to XLEN bits by inserting zeros into all of the bits more significant than 31. rd'/rs1' is from the standard 8-register set x8-x15. Prerequisites: Zba is also required. 32-bit equivalent: add.uw rd'/rs1', rd'/rs1', zero The SAIL module variable for rd'/rs1' is called rsdc. Operation: X(rsdc) = EXTZ(X(rsdc)[31..0]); Synopsis: Bitwise not, 16-bit encoding Mnemonic: c.not rd'/rs1' Encoding (RV32, RV64): Description: This instruction takes the one’s complement of rd'/rs1' and writes the result to the same register. rd'/rs1' is from the standard 8-register set x8-x15. Prerequisites: None 32-bit equivalent: xori rd'/rs1', rd'/rs1', -1 The SAIL module variable for rd'/rs1' is called rsdc. Operation: X(rsdc) = X(rsdc) XOR -1; Synopsis: Multiply, 16-bit encoding Mnemonic: c.mul rsd', rs2' Encoding (RV32, RV64): Description: This instruction multiplies XLEN bits of the source operands from rsd' and rs2' and writes the lowest XLEN bits of the result to rsd'. rd'/rs1' and rs2' are from the standard 8-register set x8-x15. Prerequisites: M or Zmmul must be configured. The SAIL module variable for rd'/rs1' is called rsdc, and for rs2' is called rs2c. Operation: let result_wide = to_bits(2 * sizeof(xlen), signed(X(rsdc)) * signed(X(rs2c))); X(rsdc) = result_wide[(sizeof(xlen) - 1) .. 0]; These instructions are collectively referred to as PUSH/POP: cm.push cm.pop cm.popret cm.popretz The term PUSH refers to cm.push. The term POP refers to cm.pop. The term POPRET refers to cm.popret and cm.popretz. Common details for these instructions are in this section. PUSH, POP, POPRET are used to reduce the size of function prologues and epilogues. The PUSH instruction adjusts the stack pointer to create the stack frame pushes (stores) the registers specified in the register list to the stack frame The POP instruction pops (loads) the registers in the register list from the stack frame adjusts the stack pointer to destroy the stack frame The POPRET instructions pop (load) the registers in the register list from the stack frame cm.popretz also moves zero into a0 as the return value adjust the stack pointer to destroy the stack frame execute a ret instruction to return from the function This example gives an illustration of the use of PUSH and POPRET. The function processMarkers in the EMBench benchmark picojpeg in the following file on github: libpicojpeg.c The prologue and epilogue compile with GCC10 to: 0001098a <processMarkers>: 1098a: 711d addi sp,sp,-96 ;#cm.push(1) 1098c: c8ca sw s2,80(sp) ;#cm.push(2) 1098e: c6ce sw s3,76(sp) ;#cm.push(3) 10990: c4d2 sw s4,72(sp) ;#cm.push(4) 10992: ce86 sw ra,92(sp) ;#cm.push(5) 10994: cca2 sw s0,88(sp) ;#cm.push(6) 10996: caa6 sw s1,84(sp) ;#cm.push(7) 10998: c2d6 sw s5,68(sp) ;#cm.push(8) 1099a: c0da sw s6,64(sp) ;#cm.push(9) 1099c: de5e sw s7,60(sp) ;#cm.push(10) 1099e: dc62 sw s8,56(sp) ;#cm.push(11) 109a0: da66 sw s9,52(sp) ;#cm.push(12) 109a2: d86a sw s10,48(sp);#cm.push(13) 109a4: d66e sw s11,44(sp);#cm.push(14) ... 109f4: 4501 li a0,0 ;#cm.popretz(1) 109f6: 40f6 lw ra,92(sp) ;#cm.popretz(2) 109f8: 4466 lw s0,88(sp) ;#cm.popretz(3) 109fa: 44d6 lw s1,84(sp) ;#cm.popretz(4) 109fc: 4946 lw s2,80(sp) ;#cm.popretz(5) 109fe: 49b6 lw s3,76(sp) ;#cm.popretz(6) 10a00: 4a26 lw s4,72(sp) ;#cm.popretz(7) 10a02: 4a96 lw s5,68(sp) ;#cm.popretz(8) 10a04: 4b06 lw s6,64(sp) ;#cm.popretz(9) 10a06: 5bf2 lw s7,60(sp) ;#cm.popretz(10) 10a08: 5c62 lw s8,56(sp) ;#cm.popretz(11) 10a0a: 5cd2 lw s9,52(sp) ;#cm.popretz(12) 10a0c: 5d42 lw s10,48(sp);#cm.popretz(13) 10a0e: 5db2 lw s11,44(sp);#cm.popretz(14) 10a10: 6125 addi sp,sp,96 ;#cm.popretz(15) 10a12: 8082 ret ;#cm.popretz(16) with the GCC option -msave-restore the output is the following: 0001080e <processMarkers>: 1080e: 73a012ef jal t0,11f48 <__riscv_save_12> 10812: 1101 addi sp,sp,-32 ... 10862: 4501 li a0,0 10864: 6105 addi sp,sp,32 10866: 71e0106f j 11f84 <__riscv_restore_12> with PUSH/POPRET this reduces to 0001080e <processMarkers>: 1080e: b8fa cm.push \\{ra,s0-s11},-96 ... 10866: bcfa cm.popretz \\{ra,s0-s11}, 96 The prologue / epilogue reduce from 60-bytes in the original code, to 14-bytes with -msave-restore, and to 4-bytes with PUSH and POPRET. As well as reducing the code-size PUSH and POPRET eliminate the branches from calling the millicode save/restore routines and so may also perform better. The calls to <riscv_save_0>/<riscv_restore_0> become 64-bit when the target functions are out of the ±1MB range, increasing the prologue/epilogue size to 22-bytes. POP is typically used in tail-calling sequences where ret is not used to return to ra after destroying the stack frame. The instructions all automatically adjust the stack pointer by enough to cover the memory required for the registers being saved or restored. Additionally the spimm field in the encoding allows the stack pointer to be adjusted in additional increments of 16-bytes. There is only a small restricted range available in the encoding; if the range is insufficient then a separate c.addi16sp can be used to increase the range. There is no support for the \\{ra, s0-s10} register list without also adding s11. Therefore the \\{ra, s0-s11} register list must be used in this case. Correct execution requires that sp refers to idempotent memory (also see Non-idempotent memory handling), because the core must be able to handle traps detected during the sequence. The entire PUSH/POP sequence is re-executed after returning from the trap handler, and multiple traps are possible during the sequence. If a trap occurs during the sequence then xEPC is updated with the PC of the instruction, xTVAL (if not read-only-zero) updated with the bad address if it was an access fault and xCAUSE updated with the type of trap. It is implementation defined whether interrupts can also be taken during the sequence execution. From a software perspective the PUSH sequence appears as: A sequence of stores writing the bytes required by the pseudocode The bytes may be written in any order. The bytes may be grouped into larger accesses. Any of the bytes may be written multiple times. A stack pointer adjustment If an implementation allows interrupts during the sequence, and the interrupt handler uses sp to allocate stack memory, then any stores which were executed before the interrupt may be overwritten by the handler. This is safe because the memory is idempotent and the stores will be re-executed when execution resumes. The stack pointer adjustment must only be committed only when it is certain that the entire PUSH instruction will commit. Stores may also return imprecise faults from the bus. It is platform defined whether the core implementation waits for the bus responses before continuing to the final stage of the sequence, or handles errors responses after completing the PUSH instruction. For example: cm.push \\{ra, s0-s5}, -64 Appears to software as: # any bytes from sp-1 to sp-28 may be written multiple times before # the instruction completes therefore these updates may be visible in # the interrupt/exception handler below the stack pointer sw s5, -4(sp) sw s4, -8(sp) sw s3,-12(sp) sw s2,-16(sp) sw s1,-20(sp) sw s0,-24(sp) sw ra,-28(sp) # this must only execute once, and will only execute after all stores # completed without any precise faults, therefore this update is only # visible in the interrupt/exception handler if cm.push has completed addi sp, sp, -64 From a software perspective the POP/POPRET sequence appears as: A sequence of loads reading the bytes required by the pseudocode. The bytes may be loaded in any order. The bytes may be grouped into larger accesses. Any of the bytes may be loaded multiple times. A stack pointer adjustment An optional li a0, 0 An optional ret If a trap occurs during the sequence, then any loads which were executed before the trap may update architectural state. The loads will be re-executed once the trap handler completes, so the values will be overwritten. Therefore it is permitted for an implementation to update some of the destination registers before taking a fault. The optional li a0, 0, stack pointer adjustment and optional ret must only be committed only when it is certain that the entire POP/POPRET instruction will commit. For POPRET once the stack pointer adjustment has been committed the ret must execute. For example: cm.popretz \\{ra, s0-s3}, 32; Appears to software as: # any or all of these load instructions may execute multiple times # therefore these updates may be visible in the interrupt/exception handler lw s3, 28(sp) lw s2, 24(sp) lw s1, 20(sp) lw s0, 16(sp) lw ra, 12(sp) # these must only execute once, will only execute after all loads # complete successfully all instructions must execute atomically # therefore these updates are not visible in the interrupt/exception handler li a0, 0 addi sp, sp, 32 ret An implementation may have a requirement to issue a PUSH/POP instruction to non-idempotent memory. If the core implementation does not support PUSH/POP to non-idempotent memories, the core may use an idempotency PMA to detect it and take a load (POP/POPRET) or store (PUSH) access-fault exception in order to avoid unpredictable results. Software should only use these instructions on non-idempotent memory regions when software can tolerate the required memory accesses being issued repeatedly in the case that they cause exceptions. The examples are included show the load/store series expansion and the stack adjustment. Examples of cm.popret and cm.popretz are not included, as the difference in the expanded sequence from cm.pop is trivial in all cases. Encoding: rlist=7, spimm=3 expands to: sw s2, -4(sp); sw s1, -8(sp); sw s0, -12(sp); sw ra, -16(sp); addi sp, sp, -64; Encoding: rlist=15, spimm=3 expands to: sw s11, -4(sp); sw s10, -8(sp); sw s9, -12(sp); sw s8, -16(sp); sw s7, -20(sp); sw s6, -24(sp); sw s5, -28(sp); sw s4, -32(sp); sw s3, -36(sp); sw s2, -40(sp); sw s1, -44(sp); sw s0, -48(sp); sw ra, -52(sp); addi sp, sp, -112; Encoding: rlist=4, spimm=0 expands to: lw ra, 12(sp); addi sp, sp, 16; Encoding: rlist=8, spimm=1 expands to: lw s3, 44(sp); lw s2, 40(sp); lw s1, 36(sp); lw s0, 32(sp); lw ra, 28(sp); addi sp, sp, 48; Encoding: rlist=9, spimm=2 expands to: lw s4, 60(sp); lw s3, 56(sp); lw s2, 52(sp); lw s1, 48(sp); lw s0, 44(sp); lw ra, 40(sp); addi sp, sp, 64; Synopsis: Create stack frame: store ra and 0 to 12 saved registers to the stack frame, optionally allocate additional stack space. Mnemonic: cm.push {reg_list}, -stack_adj Encoding (RV32, RV64): rlist values 0 to 3 are reserved for a future EABI variant called cm.push.e Assembly Syntax: cm.push \\{reg_list}, -stack_adj cm.push {xreg_list}, -stack_adj The variables used in the assembly syntax are defined below. RV32E: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32I, RV64: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} case 7: \\{reg_list=\"ra, s0-s2\"; xreg_list=\"x1, x8-x9, x18\";} case 8: \\{reg_list=\"ra, s0-s3\"; xreg_list=\"x1, x8-x9, x18-x19\";} case 9: \\{reg_list=\"ra, s0-s4\"; xreg_list=\"x1, x8-x9, x18-x20\";} case 10: \\{reg_list=\"ra, s0-s5\"; xreg_list=\"x1, x8-x9, x18-x21\";} case 11: \\{reg_list=\"ra, s0-s6\"; xreg_list=\"x1, x8-x9, x18-x22\";} case 12: \\{reg_list=\"ra, s0-s7\"; xreg_list=\"x1, x8-x9, x18-x23\";} case 13: \\{reg_list=\"ra, s0-s8\"; xreg_list=\"x1, x8-x9, x18-x24\";} case 14: \\{reg_list=\"ra, s0-s9\"; xreg_list=\"x1, x8-x9, x18-x25\";} //note - to include s10, s11 must also be included case 15: \\{reg_list=\"ra, s0-s11\"; xreg_list=\"x1, x8-x9, x18-x27\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32E: stack_adj_base = 16; Valid values: stack_adj = [16|32|48|64]; RV32I: switch (rlist) { case 4.. 7: stack_adj_base = 16; case 8..11: stack_adj_base = 32; case 12..14: stack_adj_base = 48; case 15: stack_adj_base = 64; } Valid values: switch (rlist) { case 4.. 7: stack_adj = [16|32|48| 64]; case 8..11: stack_adj = [32|48|64| 80]; case 12..14: stack_adj = [48|64|80| 96]; case 15: stack_adj = [64|80|96|112]; } RV64: switch (rlist) { case 4.. 5: stack_adj_base = 16; case 6.. 7: stack_adj_base = 32; case 8.. 9: stack_adj_base = 48; case 10..11: stack_adj_base = 64; case 12..13: stack_adj_base = 80; case 14: stack_adj_base = 96; case 15: stack_adj_base = 112; } Valid values: switch (rlist) { case 4.. 5: stack_adj = [ 16| 32| 48| 64]; case 6.. 7: stack_adj = [ 32| 48| 64| 80]; case 8.. 9: stack_adj = [ 48| 64| 80| 96]; case 10..11: stack_adj = [ 64| 80| 96|112]; case 12..13: stack_adj = [ 80| 96|112|128]; case 14: stack_adj = [ 96|112|128|144]; case 15: stack_adj = [112|128|144|160]; } Description: This instruction pushes (stores) the registers in reg_list to the memory below the stack pointer, and then creates the stack frame by decrementing the stack pointer by stack_adj, including any additional stack space requested by the value of spimm. All ABI register mappings are for the UABI. An EABI version is planned once the EABI is frozen. For further information see PUSH/POP Register Instructions. Stack Adjustment Calculation: stack_adj_base is the minimum number of bytes, in multiples of 16-byte address increments, required to cover the registers in the list. spimm is the number of additional 16-byte address increments allocated for the stack frame. The total stack adjustment represents the total size of the stack frame, which is stack_adj_base added to spimm scaled by 16, as defined above. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists Operation: The first section of pseudocode may be executed multiple times before the instruction successfully completes. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. if (XLEN==32) bytes=4; else bytes=8; addr=sp-bytes; for(i in 27,26,25,24,23,22,21,20,19,18,9,8,1) { //if register i is in xreg_list if (xreg_list[i]) { switch(bytes) { 4: asm(\"sw x[i], 0(addr)\"); 8: asm(\"sd x[i], 0(addr)\"); } addr-=bytes; } } The final section of pseudocode executes atomically, and only executes if the section above completes without any exceptions or interrupts. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. sp-=stack_adj; Synopsis: Destroy stack frame: load ra and 0 to 12 saved registers from the stack frame, deallocate the stack frame. Mnemonic: cm.pop {reg_list}, stack_adj Encoding (RV32, RV64): rlist values 0 to 3 are reserved for a future EABI variant called cm.pop.e Assembly Syntax: cm.pop \\{reg_list}, stack_adj cm.pop {xreg_list}, stack_adj The variables used in the assembly syntax are defined below. RV32E: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32I, RV64: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} case 7: \\{reg_list=\"ra, s0-s2\"; xreg_list=\"x1, x8-x9, x18\";} case 8: \\{reg_list=\"ra, s0-s3\"; xreg_list=\"x1, x8-x9, x18-x19\";} case 9: \\{reg_list=\"ra, s0-s4\"; xreg_list=\"x1, x8-x9, x18-x20\";} case 10: \\{reg_list=\"ra, s0-s5\"; xreg_list=\"x1, x8-x9, x18-x21\";} case 11: \\{reg_list=\"ra, s0-s6\"; xreg_list=\"x1, x8-x9, x18-x22\";} case 12: \\{reg_list=\"ra, s0-s7\"; xreg_list=\"x1, x8-x9, x18-x23\";} case 13: \\{reg_list=\"ra, s0-s8\"; xreg_list=\"x1, x8-x9, x18-x24\";} case 14: \\{reg_list=\"ra, s0-s9\"; xreg_list=\"x1, x8-x9, x18-x25\";} //note - to include s10, s11 must also be included case 15: \\{reg_list=\"ra, s0-s11\"; xreg_list=\"x1, x8-x9, x18-x27\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32E: stack_adj_base = 16; Valid values: stack_adj = [16|32|48|64]; RV32I: switch (rlist) { case 4.. 7: stack_adj_base = 16; case 8..11: stack_adj_base = 32; case 12..14: stack_adj_base = 48; case 15: stack_adj_base = 64; } Valid values: switch (rlist) { case 4.. 7: stack_adj = [16|32|48| 64]; case 8..11: stack_adj = [32|48|64| 80]; case 12..14: stack_adj = [48|64|80| 96]; case 15: stack_adj = [64|80|96|112]; } RV64: switch (rlist) { case 4.. 5: stack_adj_base = 16; case 6.. 7: stack_adj_base = 32; case 8.. 9: stack_adj_base = 48; case 10..11: stack_adj_base = 64; case 12..13: stack_adj_base = 80; case 14: stack_adj_base = 96; case 15: stack_adj_base = 112; } Valid values: switch (rlist) { case 4.. 5: stack_adj = [ 16| 32| 48| 64]; case 6.. 7: stack_adj = [ 32| 48| 64| 80]; case 8.. 9: stack_adj = [ 48| 64| 80| 96]; case 10..11: stack_adj = [ 64| 80| 96|112]; case 12..13: stack_adj = [ 80| 96|112|128]; case 14: stack_adj = [ 96|112|128|144]; case 15: stack_adj = [112|128|144|160]; } Description: This instruction pops (loads) the registers in reg_list from stack memory, and then adjusts the stack pointer by stack_adj. All ABI register mappings are for the UABI. An EABI version is planned once the EABI is frozen. For further information see PUSH/POP Register Instructions. Stack Adjustment Calculation: stack_adj_base is the minimum number of bytes, in multiples of 16-byte address increments, required to cover the registers in the list. spimm is the number of additional 16-byte address increments allocated for the stack frame. The total stack adjustment represents the total size of the stack frame, which is stack_adj_base added to spimm scaled by 16, as defined above. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists Operation: The first section of pseudocode may be executed multiple times before the instruction successfully completes. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. if (XLEN==32) bytes=4; else bytes=8; addr=sp+stack_adj-bytes; for(i in 27,26,25,24,23,22,21,20,19,18,9,8,1) { //if register i is in xreg_list if (xreg_list[i]) { switch(bytes) { 4: asm(\"lw x[i], 0(addr)\"); 8: asm(\"ld x[i], 0(addr)\"); } addr-=bytes; } } The final section of pseudocode executes atomically, and only executes if the section above completes without any exceptions or interrupts. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. sp+=stack_adj; Synopsis: Destroy stack frame: load ra and 0 to 12 saved registers from the stack frame, deallocate the stack frame, move zero into a0, return to ra. Mnemonic: cm.popretz {reg_list}, stack_adj Encoding (RV32, RV64): rlist values 0 to 3 are reserved for a future EABI variant called cm.popretz.e Assembly Syntax: cm.popretz \\{reg_list}, stack_adj cm.popretz {xreg_list}, stack_adj RV32E: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32I, RV64: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} case 7: \\{reg_list=\"ra, s0-s2\"; xreg_list=\"x1, x8-x9, x18\";} case 8: \\{reg_list=\"ra, s0-s3\"; xreg_list=\"x1, x8-x9, x18-x19\";} case 9: \\{reg_list=\"ra, s0-s4\"; xreg_list=\"x1, x8-x9, x18-x20\";} case 10: \\{reg_list=\"ra, s0-s5\"; xreg_list=\"x1, x8-x9, x18-x21\";} case 11: \\{reg_list=\"ra, s0-s6\"; xreg_list=\"x1, x8-x9, x18-x22\";} case 12: \\{reg_list=\"ra, s0-s7\"; xreg_list=\"x1, x8-x9, x18-x23\";} case 13: \\{reg_list=\"ra, s0-s8\"; xreg_list=\"x1, x8-x9, x18-x24\";} case 14: \\{reg_list=\"ra, s0-s9\"; xreg_list=\"x1, x8-x9, x18-x25\";} //note - to include s10, s11 must also be included case 15: \\{reg_list=\"ra, s0-s11\"; xreg_list=\"x1, x8-x9, x18-x27\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32E: stack_adj_base = 16; Valid values: stack_adj = [16|32|48|64]; RV32I: switch (rlist) { case 4.. 7: stack_adj_base = 16; case 8..11: stack_adj_base = 32; case 12..14: stack_adj_base = 48; case 15: stack_adj_base = 64; } Valid values: switch (rlist) { case 4.. 7: stack_adj = [16|32|48| 64]; case 8..11: stack_adj = [32|48|64| 80]; case 12..14: stack_adj = [48|64|80| 96]; case 15: stack_adj = [64|80|96|112]; } RV64: switch (rlist) { case 4.. 5: stack_adj_base = 16; case 6.. 7: stack_adj_base = 32; case 8.. 9: stack_adj_base = 48; case 10..11: stack_adj_base = 64; case 12..13: stack_adj_base = 80; case 14: stack_adj_base = 96; case 15: stack_adj_base = 112; } Valid values: switch (rlist) { case 4.. 5: stack_adj = [ 16| 32| 48| 64]; case 6.. 7: stack_adj = [ 32| 48| 64| 80]; case 8.. 9: stack_adj = [ 48| 64| 80| 96]; case 10..11: stack_adj = [ 64| 80| 96|112]; case 12..13: stack_adj = [ 80| 96|112|128]; case 14: stack_adj = [ 96|112|128|144]; case 15: stack_adj = [112|128|144|160]; } Description: This instruction pops (loads) the registers in reg_list from stack memory, adjusts the stack pointer by stack_adj, moves zero into a0 and then returns to ra. All ABI register mappings are for the UABI. An EABI version is planned once the EABI is frozen. For further information see PUSH/POP Register Instructions. Stack Adjustment Calculation: stack_adj_base is the minimum number of bytes, in multiples of 16-byte address increments, required to cover the registers in the list. spimm is the number of additional 16-byte address increments allocated for the stack frame. The total stack adjustment represents the total size of the stack frame, which is stack_adj_base added to spimm scaled by 16, as defined above. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists Operation: The first section of pseudocode may be executed multiple times before the instruction successfully completes. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. if (XLEN==32) bytes=4; else bytes=8; addr=sp+stack_adj-bytes; for(i in 27,26,25,24,23,22,21,20,19,18,9,8,1) { //if register i is in xreg_list if (xreg_list[i]) { switch(bytes) { 4: asm(\"lw x[i], 0(addr)\"); 8: asm(\"ld x[i], 0(addr)\"); } addr-=bytes; } } The final section of pseudocode executes atomically, and only executes if the section above completes without any exceptions or interrupts. The li a0, 0 could be executed more than once, but is included in the atomic section for convenience. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. asm(\"li a0, 0\"); sp+=stack_adj; asm(\"ret\"); Synopsis: Destroy stack frame: load ra and 0 to 12 saved registers from the stack frame, deallocate the stack frame, return to ra. Mnemonic: cm.popret {reg_list}, stack_adj Encoding (RV32, RV64): rlist values 0 to 3 are reserved for a future EABI variant called cm.popret.e Assembly Syntax: cm.popret \\{reg_list}, stack_adj cm.popret {xreg_list}, stack_adj The variables used in the assembly syntax are defined below. RV32E: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32I, RV64: switch (rlist){ case 4: \\{reg_list=\"ra\"; xreg_list=\"x1\";} case 5: \\{reg_list=\"ra, s0\"; xreg_list=\"x1, x8\";} case 6: \\{reg_list=\"ra, s0-s1\"; xreg_list=\"x1, x8-x9\";} case 7: \\{reg_list=\"ra, s0-s2\"; xreg_list=\"x1, x8-x9, x18\";} case 8: \\{reg_list=\"ra, s0-s3\"; xreg_list=\"x1, x8-x9, x18-x19\";} case 9: \\{reg_list=\"ra, s0-s4\"; xreg_list=\"x1, x8-x9, x18-x20\";} case 10: \\{reg_list=\"ra, s0-s5\"; xreg_list=\"x1, x8-x9, x18-x21\";} case 11: \\{reg_list=\"ra, s0-s6\"; xreg_list=\"x1, x8-x9, x18-x22\";} case 12: \\{reg_list=\"ra, s0-s7\"; xreg_list=\"x1, x8-x9, x18-x23\";} case 13: \\{reg_list=\"ra, s0-s8\"; xreg_list=\"x1, x8-x9, x18-x24\";} case 14: \\{reg_list=\"ra, s0-s9\"; xreg_list=\"x1, x8-x9, x18-x25\";} //note - to include s10, s11 must also be included case 15: \\{reg_list=\"ra, s0-s11\"; xreg_list=\"x1, x8-x9, x18-x27\";} default: reserved(); } stack_adj = stack_adj_base + spimm * 16; RV32E: stack_adj_base = 16; Valid values: stack_adj = [16|32|48|64]; RV32I: switch (rlist) { case 4.. 7: stack_adj_base = 16; case 8..11: stack_adj_base = 32; case 12..14: stack_adj_base = 48; case 15: stack_adj_base = 64; } Valid values: switch (rlist) { case 4.. 7: stack_adj = [16|32|48| 64]; case 8..11: stack_adj = [32|48|64| 80]; case 12..14: stack_adj = [48|64|80| 96]; case 15: stack_adj = [64|80|96|112]; } RV64: switch (rlist) { case 4.. 5: stack_adj_base = 16; case 6.. 7: stack_adj_base = 32; case 8.. 9: stack_adj_base = 48; case 10..11: stack_adj_base = 64; case 12..13: stack_adj_base = 80; case 14: stack_adj_base = 96; case 15: stack_adj_base = 112; } Valid values: switch (rlist) { case 4.. 5: stack_adj = [ 16| 32| 48| 64]; case 6.. 7: stack_adj = [ 32| 48| 64| 80]; case 8.. 9: stack_adj = [ 48| 64| 80| 96]; case 10..11: stack_adj = [ 64| 80| 96|112]; case 12..13: stack_adj = [ 80| 96|112|128]; case 14: stack_adj = [ 96|112|128|144]; case 15: stack_adj = [112|128|144|160]; } Description: This instruction pops (loads) the registers in reg_list from stack memory, adjusts the stack pointer by stack_adj and then returns to ra. All ABI register mappings are for the UABI. An EABI version is planned once the EABI is frozen. For further information see PUSH/POP Register Instructions. Stack Adjustment Calculation: stack_adj_base is the minimum number of bytes, in multiples of 16-byte address increments, required to cover the registers in the list. spimm is the number of additional 16-byte address increments allocated for the stack frame. The total stack adjustment represents the total size of the stack frame, which is stack_adj_base added to spimm scaled by 16, as defined above. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists Operation: The first section of pseudocode may be executed multiple times before the instruction successfully completes. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. if (XLEN==32) bytes=4; else bytes=8; addr=sp+stack_adj-bytes; for(i in 27,26,25,24,23,22,21,20,19,18,9,8,1) { //if register i is in xreg_list if (xreg_list[i]) { switch(bytes) { 4: asm(\"lw x[i], 0(addr)\"); 8: asm(\"ld x[i], 0(addr)\"); } addr-=bytes; } } The final section of pseudocode executes atomically, and only executes if the section above completes without any exceptions or interrupts. //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. sp+=stack_adj; asm(\"ret\"); Synopsis: Move a0-a1 into two registers of s0-s7 Mnemonic: cm.mvsa01 r1s', r2s' Encoding (RV32, RV64): For the encoding to be legal r1s' != r2s'. Assembly Syntax: cm.mvsa01 r1s', r2s' Description: This instruction moves a0 into r1s' and a1 into r2s'. r1s' and r2s' must be different. The execution is atomic, so it is not possible to observe state where only one of r1s' or r2s' has been updated. The encoding uses sreg number specifiers instead of xreg number specifiers to save encoding space. The mapping between them is specified in the pseudocode below. The s register mapping is taken from the UABI, and may not match the currently unratified EABI. cm.mvsa01.e may be included in the future. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists. Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. if (RV32E && (r1sc>1 || r2sc>1)) { reserved(); } xreg1 = {r1sc[2:1]>0,r1sc[2:1]==0,r1sc[2:0]}; xreg2 = {r2sc[2:1]>0,r2sc[2:1]==0,r2sc[2:0]}; X[xreg1] = X[10]; X[xreg2] = X[11]; Synopsis: Move two s0-s7 registers into a0-a1 Mnemonic: cm.mva01s r1s', r2s' Encoding (RV32, RV64): Assembly Syntax: cm.mva01s r1s', r2s' Description: This instruction moves r1s' into a0 and r2s' into a1. The execution is atomic, so it is not possible to observe state where only one of a0 or a1 have been updated. The encoding uses sreg number specifiers instead of xreg number specifiers to save encoding space. The mapping between them is specified in the pseudocode below. The s register mapping is taken from the UABI, and may not match the currently unratified EABI. cm.mva01s.e may be included in the future. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists. Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. if (RV32E && (r1sc>1 || r2sc>1)) { reserved(); } xreg1 = {r1sc[2:1]>0,r1sc[2:1]==0,r1sc[2:0]}; xreg2 = {r2sc[2:1]>0,r2sc[2:1]==0,r2sc[2:0]}; X[10] = X[xreg1]; X[11] = X[xreg2]; cm.jt (Jump via table) and cm.jalt (Jump and link via table) are referred to as table jump. Table jump uses a 256-entry XLEN wide table in instruction memory to contain function addresses. The table must be a minimum of 64-byte aligned. Table entries follow the current data endianness. This is different from normal instruction fetch which is always little-endian. cm.jt and cm.jalt encodings index the table, giving access to functions within the full XLEN wide address space. This is used as a form of dictionary compression to reduce the code size of jal / auipc+jalr / jr / auipc+jr instructions. Table jump allows the linker to replace the following instruction sequences with a cm.jt or cm.jalt encoding, and an entry in the table: 32-bit j calls 32-bit jal ra calls 64-bit auipc+jr calls to fixed locations 64-bit auipc+jalr ra calls to fixed locations The auipc+jr/jalr sequence is used because the offset from the PC is out of the ±1MB range. If a return address stack is implemented, then as cm.jalt is equivalent to jal ra, it pushes to the stack. The base of the table is in the jvt CSR (see jvt CSR, table jump base vector and control register), each table entry is XLEN bits. If the same function is called with and without linking then it must have two entries in the table. This is typically caused by the same function being called with and without tail calling. For a table jump instruction, the table entry that the instruction selects is considered an extension of the instruction itself. Hence, the execution of a table jump instruction involves two instruction fetches, the first to read the instruction (cm.jt/cm.jalt) and the second to read from the jump vector table (JVT). Both instruction fetches are implicit reads, and both require execute permission; read permission is irrelevant. It is recommended that the second fetch be ignored for hardware triggers and breakpoints. Memory writes to the jump vector table require an instruction barrier (fence.i) to guarantee that they are visible to the instruction fetch. Multiple contexts may have different jump vector tables. JVT may be switched between them without an instruction barrier if the tables have not been updated in memory since the last fence.i. If an exception occurs on either instruction fetch, xEPC is set to the PC of the table jump instruction, xCAUSE is set as expected for the type of fault and xTVAL (if not set to zero) contains the fetch address which caused the fault. Synopsis: Table jump base vector and control register Address: 0x017 Permissions: URW Format (RV32): Format (RV64): Description: The jvt register is an XLEN-bit WARL read/write register that holds the jump table configuration, consisting of the jump table base address (BASE) and the jump table mode (MODE). If Zcmt is implemented then jvt must also be implemented, but can contain a read-only value. If jvt is writable, the set of values the register may hold can vary by implementation. The value in the BASE field must always be aligned on a 64-byte boundary. Note that the CSR contains only bits XLEN-1 through 6 of the address base. When computing jump-table accesses, the lower six bits of base are filled with zeroes to obtain an XLEN-bit jump-table base address jvt.base that is always aligned on a 64-byte boundary. jvt.base is a virtual address, whenever virtual memory is enabled. The memory pointed to by jvt.base is treated as instruction memory for the purpose of executing table jump instructions, implying execute access permission. Table 2. jvt.mode definition jvt.mode Comment 000000 Jump table mode others reserved for future standard use jvt.mode is a WARL field, so can only be programmed to modes which are implemented. Therefore the discovery mechanism is to attempt to program different modes and read back the values to see which are available. Jump table mode must be implemented. in future the RISC-V Unified Discovery method will report the available modes. Architectural State: jvt CSR adds architectural state to the system software context (such as an OS process), therefore must be saved/restored on context switches. State Enable: If the Smstateen extension is implemented, then bit 2 in mstateen0, sstateen0, and hstateen0 is implemented. If bit 2 of a controlling stateen0 CSR is zero, then access to the jvt CSR and execution of a cm.jalt or cm.jt instruction by a lower privilege level results in an illegal-instruction trap (or, if appropriate, a virtual-instruction trap). Synopsis: jump via table Mnemonic: cm.jt index Encoding (RV32, RV64): For this encoding to decode as cm.jt, index<32, otherwise it decodes as cm.jalt, see Jump and link via table. If jvt.mode = 0 (Jump Table Mode) then cm.jt behaves as specified here. If jvt.mode is a reserved value, then cm.jt is also reserved. In the future other defined values of jvt.mode may change the behaviour of cm.jt. Assembly Syntax: cm.jt index Description: cm.jt reads an entry from the jump vector table in memory and jumps to the address that was read. For further information see Table Jump Overview. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists. Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. # target_address is temporary internal state, it doesn't represent a real register # InstMemory is byte indexed switch(XLEN) { 32: table_address[XLEN-1:0] = jvt.base + (index<<2); 64: table_address[XLEN-1:0] = jvt.base + (index<<3); } //fetch from the jump table target_address[XLEN-1:0] = InstMemory[table_address][XLEN-1:0]; j target_address[XLEN-1:0]&~0x1; Synopsis: jump via table with optional link Mnemonic: cm.jalt index Encoding (RV32, RV64): For this encoding to decode as cm.jalt, index>=32, otherwise it decodes as cm.jt, see Jump via table. If jvt.mode = 0 (Jump Table Mode) then cm.jalt behaves as specified here. If jvt.mode is a reserved value, then cm.jalt is also reserved. In the future other defined values of jvt.mode may change the behaviour of cm.jalt. Assembly Syntax: cm.jalt index Description: cm.jalt reads an entry from the jump vector table in memory and jumps to the address that was read, linking to ra. For further information see Table Jump Overview. Prerequisites: None 32-bit equivalent: No direct equivalent encoding exists. Operation: //This is not SAIL, it's pseudocode. The SAIL hasn't been written yet. # target_address is temporary internal state, it doesn't represent a real register # InstMemory is byte indexed switch(XLEN) { 32: table_address[XLEN-1:0] = jvt.base + (index<<2); 64: table_address[XLEN-1:0] = jvt.base + (index<<3); } //fetch from the jump table target_address[XLEN-1:0] = InstMemory[table_address][XLEN-1:0]; jal ra, target_address[XLEN-1:0]&~0x1;","title":"\"Zc*\" Extension for Code Size Reduction, Version 1.0.0","component":"isa","version":"v20250508","name":"zc","url":"/isa/unpriv/zc.html","titles":[{"text":"Zc* Overview","hash":"zc-overview","id":1},{"text":"C","hash":"C","id":2},{"text":"Zce","hash":"zce","id":3},{"text":"MISA.C","hash":"misaC","id":4},{"text":"Zca","hash":"zca","id":5},{"text":"Zcf (RV32 only)","hash":"zcf-rv32-only","id":6},{"text":"Zcd","hash":"zcd","id":7},{"text":"Zcb","hash":"zcb","id":8},{"text":"Zcmp","hash":"Zcmp","id":9},{"text":"Zcmt","hash":"Zcmt","id":10},{"text":"Zc instruction formats","hash":"Zc_formats","id":11},{"text":"Zcb instructions","hash":"Zcb_instructions","id":12},{"text":"c.lbu","hash":"insns-c_lbu","id":13},{"text":"c.lhu","hash":"insns-c_lhu","id":14},{"text":"c.lh","hash":"insns-c_lh","id":15},{"text":"c.sb","hash":"insns-c_sb","id":16},{"text":"c.sh","hash":"insns-c_sh","id":17},{"text":"c.zext.b","hash":"insns-c_zext_b","id":18},{"text":"c.sext.b","hash":"insns-c_sext_b","id":19},{"text":"c.zext.h","hash":"insns-c_zext_h","id":20},{"text":"c.sext.h","hash":"insns-c_sext_h","id":21},{"text":"c.zext.w","hash":"insns-c_zext_w","id":22},{"text":"c.not","hash":"insns-c_not","id":23},{"text":"c.mul","hash":"insns-c_mul","id":24},{"text":"PUSH/POP register instructions","hash":"insns-pushpop","id":25},{"text":"PUSH/POP functional overview","hash":"pushpop-functional-overview","id":26},{"text":"Example usage","hash":"example-usage","id":27},{"text":"Stack pointer adjustment handling","hash":"pushpop-areg-list","id":28},{"text":"Register list handling","hash":"register-list-handling","id":29},{"text":"PUSH/POP Fault handling","hash":"pushpop-idempotent-memory","id":30},{"text":"Software view of execution","hash":"pushpop-software-view","id":31},{"text":"Software view of the PUSH sequence","hash":"software-view-of-the-push-sequence","id":32},{"text":"Software view of the POP/POPRET sequence","hash":"software-view-of-the-poppopret-sequence","id":33},{"text":"Non-idempotent memory handling","hash":"pushpop_non-idem-mem","id":34},{"text":"Example RV32I PUSH/POP sequences","hash":"example-rv32i-pushpop-sequences","id":35},{"text":"cm.push  \\{ra, s0-s2}, -64","hash":"cm-push-ra-s0-s2-64","id":36},{"text":"cm.push \\{ra, s0-s11}, -112","hash":"cm-push-ra-s0-s11-112","id":37},{"text":"cm.pop   {ra}, 16","hash":"cm-pop-ra-16","id":38},{"text":"cm.pop \\{ra, s0-s3}, 48","hash":"cm-pop-ra-s0-s3-48","id":39},{"text":"cm.pop \\{ra, s0-s4}, 64","hash":"cm-pop-ra-s0-s4-64","id":40},{"text":"cm.push","hash":"insns-cm_push","id":41},{"text":"cm.pop","hash":"insns-cm_pop","id":42},{"text":"cm.popretz","hash":"insns-cm_popretz","id":43},{"text":"cm.popret","hash":"insns-cm_popret","id":44},{"text":"cm.mvsa01","hash":"insns-cm_mvsa01","id":45},{"text":"cm.mva01s","hash":"insns-cm_mva01s","id":46},{"text":"Table Jump Overview","hash":"insns-tablejump","id":47},{"text":"jvt","hash":"jvt","id":48},{"text":"Table Jump Fault handling","hash":"tablejump-fault-handling","id":49},{"text":"jvt CSR","hash":"csrs-jvt","id":50},{"text":"cm.jt","hash":"insns-cm_jt","id":51},{"text":"cm.jalt","hash":"insns-cm_jalt","id":52}]},"58":{"id":58,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zfa\" Extension for Additional Floating-Point Instructions, Version 1.0 This chapter describes the Zfa standard extension, which adds instructions for immediate loads, IEEE 754-2019 minimum and maximum operations, round-to-integer operations, and quiet floating-point comparisons. For RV32D, the Zfa extension also adds instructions to transfer double-precision floating-point values to and from integer registers, and for RV64Q, it adds analogous instructions for quad-precision floating-point values. The Zfa extension depends on the F extension. The FLI.S instruction loads one of 32 single-precision floating-point constants, encoded in the rs1 field, into floating-point register rd. The correspondence of rs1 field values and single-precision floating-point values is shown in Table 37. FLI.S is encoded like FMV.W.X, but with rs2=1. Table 1. Immediate values loaded by the FLI.S instruction. rs1 Value Sign Exponent Significand 0 1 01111111 000…​000 1 Minimum positive normal 0 00000001 000…​000 2 0 01101111 000…​000 3 0 01110000 000…​000 4 0 01110111 000…​000 5 0 01111000 000…​000 6 0.0625 ( ) 0 01111011 000…​000 7 0.125 ( ) 0 01111100 000…​000 8 0.25 0 01111101 000…​000 9 0.3125 0 01111101 010…​000 10 0.375 0 01111101 100…​000 11 0.4375 0 01111101 110…​000 12 0.5 0 01111110 000…​000 13 0.625 0 01111110 010…​000 14 0.75 0 01111110 100…​000 15 0.875 0 01111110 110…​000 16 1.0 0 01111111 000…​000 17 1.25 0 01111111 010…​000 18 1.5 0 01111111 100…​000 19 1.75 0 01111111 110…​000 20 2.0 0 10000000 000…​000 21 2.5 0 10000000 010…​000 22 3 0 10000000 100…​000 23 4 0 10000001 000…​000 24 8 0 10000010 000…​000 25 16 0 10000011 000…​000 26 128 ( ) 0 10000110 000…​000 27 256 ( ) 0 10000111 000…​000 28 0 10001110 000…​000 29 0 10001111 000…​000 30 0 11111111 000…​000 31 Canonical NaN 0 11111111 100…​000 The preferred assembly syntax for entries 1, 30, and 31 is min, inf, and nan, respectively. For entries 0 through 29 (including entry 1), the assembler will accept decimal constants in C-like syntax. The set of 32 constants was chosen by examining floating-point libraries, including the C standard math library, and to optimize fixed-point to floating-point conversion. Entries 8-22 follow a regular encoding pattern. No entry sets mantissa bits other than the two most significant ones. If the D extension is implemented, FLI.D performs the analogous operation, but loads a double-precision value into floating-point register rd. Note that entry 1 (corresponding to the minimum positive normal value) has a numerically different value for double-precision than for single-precision. FLI.D is encoded like FLI.S, but with fmt=D. If the Q extension is implemented, FLI.Q performs the analogous operation, but loads a quad-precision value into floating-point register rd. Note that entry 1 (corresponding to the minimum positive normal value) has a numerically different value for quad-precision. FLI.Q is encoded like FLI.S, but with fmt=Q. If the Zfh or Zvfh extension is implemented, FLI.H performs the analogous operation, but loads a half-precision floating-point value into register rd. Note that entry 1 (corresponding to the minimum positive normal value) has a numerically different value for half-precision. Furthermore, since is not representable in half-precision floating-point, entry 29 in the table instead loads positive infinity—i.e., it is redundant with entry 30. FLI.H is encoded like FLI.S, but with fmt=H. Additionally, since and are subnormal in half-precision, entry 1 is numerically greater than entries 2 and 3 for FLI.H. The FLI.fmt instructions never set any floating-point exception flags. The FMINM.S and FMAXM.S instructions are defined like the FMIN.S and FMAX.S instructions, except that if either input is NaN, the result is the canonical NaN. If the D extension is implemented, FMINM.D and FMAXM.D instructions are analogously defined to operate on double-precision numbers. If the Zfh extension is implemented, FMINM.H and FMAXM.H instructions are analogously defined to operate on half-precision numbers. If the Q extension is implemented, FMINM.Q and FMAXM.Q instructions are analogously defined to operate on quad-precision numbers. These instructions are encoded like their FMIN and FMAX counterparts, but with instruction bit 13 set to 1. These instructions implement the IEEE 754-2019 minimum and maximum operations. The FROUND.S instruction rounds the single-precision floating-point number in floating-point register rs1 to an integer, according to the rounding mode specified in the instruction’s rm field. It then writes that integer, represented as a single-precision floating-point number, to floating-point register rd. Zero and infinite inputs are copied to rd unmodified. Signaling NaN inputs cause the invalid operation exception flag to be set; no other exception flags are set. FROUND.S is encoded like FCVT.S.D, but with rs2=4. The FROUNDNX.S instruction is defined similarly, but it also sets the inexact exception flag if the input differs from the rounded result and is not NaN. FROUNDNX.S is encoded like FCVT.S.D, but with rs2=5. If the D extension is implemented, FROUND.D and FROUNDNX.D instructions are analogously defined to operate on double-precision numbers. They are encoded like FCVT.D.S, but with rs2=4 and 5, respectively, If the Zfh extension is implemented, FROUND.H and FROUNDNX.H instructions are analogously defined to operate on half-precision numbers. They are encoded like FCVT.H.S, but with rs2=4 and 5, respectively, If the Q extension is implemented, FROUND.Q and FROUNDNX.Q instructions are analogously defined to operate on quad-precision numbers. They are encoded like FCVT.Q.S, but with rs2=4 and 5, respectively, The FROUNDNX.fmt instructions implement the IEEE 754-2019 roundToIntegralExact operation, and the FROUND.fmt instructions implement the other operations in the roundToIntegral family. The FCVTMOD.W.D instruction is defined similarly to the FCVT.W.D instruction, with the following differences. FCVTMOD.W.D always rounds towards zero. Bits 31:0 are taken from the rounded, unbounded two’s complement result, then sign-extended to XLEN bits and written to integer register rd. and NaN are converted to zero. Floating-point exception flags are raised the same as they would be for FCVT.W.D with the same input operand. This instruction is only provided if the D extension is implemented. It is encoded like FCVT.W.D, but with the rs2 field set to 8 and the rm field set to 1 (RTZ). Other rm values are reserved. The assembly syntax requires the RTZ rounding mode to be explicitly specified, i.e., fcvtmod.w.d rd, rs1, rtz. The FCVTMOD.W.D instruction was added principally to accelerate the processing of JavaScript Numbers. Numbers are double-precision values, but some operators implicitly truncate them to signed integers mod . For RV32 only, if the D extension is implemented, the FMVH.X.D instruction moves bits 63:32 of floating-point register rs1 into integer register rd. It is encoded in the OP-FP major opcode with funct3=0, rs2=1, and funct7=1110001. FMVH.X.D is used in conjunction with the existing FMV.X.W instruction to move a double-precision floating-point number to a pair of x-registers. For RV32 only, if the D extension is implemented, the FMVP.D.X instruction moves a double-precision number from a pair of integer registers into a floating-point register. Integer registers rs1 and rs2 supply bits 31:0 and 63:32, respectively; the result is written to floating-point register rd. FMVP.D.X is encoded in the OP-FP major opcode with funct3=0 and funct7=1011001. For RV64 only, if the Q extension is implemented, the FMVH.X.Q instruction moves bits 127:64 of floating-point register rs1 into integer register rd. It is encoded in the OP-FP major opcode with funct3=0, rs2=1, and funct7=1110011. FMVH.X.Q is used in conjunction with the existing FMV.X.D instruction to move a quad-precision floating-point number to a pair of x-registers. For RV64 only, if the Q extension is implemented, the FMVP.Q.X instruction moves a double-precision number from a pair of integer registers into a floating-point register. Integer registers rs1 and rs2 supply bits 63:0 and 127:64, respectively; the result is written to floating-point register rd. FMVP.Q.X is encoded in the OP-FP major opcode with funct3=0 and funct7=1011011. The FLEQ.S and FLTQ.S instructions are defined like the FLE.S and FLT.S instructions, except that quiet NaN inputs do not cause the invalid operation exception flag to be set. If the D extension is implemented, FLEQ.D and FLTQ.D instructions are analogously defined to operate on double-precision numbers. If the Zfh extension is implemented, FLEQ.H and FLTQ.H instructions are analogously defined to operate on half-precision numbers. If the Q extension is implemented, FLEQ.Q and FLTQ.Q instructions are analogously defined to operate on quad-precision numbers. These instructions are encoded like their FLE and FLT counterparts, but with instruction bit 14 set to 1. We do not expect analogous comparison instructions will be added to the vector ISA, since they can be reasonably efficiently emulated using masking.","title":"\"Zfa\" Extension for Additional Floating-Point Instructions, Version 1.0","component":"isa","version":"v20250508","name":"zfa","url":"/isa/unpriv/zfa.html","titles":[{"text":"Load-Immediate Instructions","hash":"load-immediate-instructions","id":1},{"text":"Minimum and Maximum Instructions","hash":"minimum-and-maximum-instructions","id":2},{"text":"Round-to-Integer Instructions","hash":"round-to-integer-instructions","id":3},{"text":"Modular Convert-to-Integer Instruction","hash":"modular-convert-to-integer-instruction","id":4},{"text":"Move Instructions","hash":"move-instructions","id":5},{"text":"Comparison Instructions","hash":"comparison-instructions","id":6}]},"59":{"id":59,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zfh\" and \"Zfhmin\" Extensions for Half-Precision Floating-Point, Version 1.0 This chapter describes the Zfh standard extension for 16-bit half-precision binary floating-point instructions compliant with the IEEE 754-2008 arithmetic standard. The Zfh extension depends on the single-precision floating-point extension, F. The NaN-boxing scheme described in [nanboxing] is extended to allow a half-precision value to be NaN-boxed inside a single-precision value (which may be recursively NaN-boxed inside a double- or quad-precision value when the D or Q extension is present). This extension primarily provides instructions that consume half-precision operands and produce half-precision results. However, it is also common to compute on half-precision data using higher intermediate precision. Although this extension provides explicit conversion instructions that suffice to implement that pattern, future extensions might further accelerate such computation with additional instructions that implicitly widen their operands—e.g., half half single single—or implicitly narrow their results—e.g., half single half. New 16-bit variants of LOAD-FP and STORE-FP instructions are added, encoded with a new value for the funct3 width field. FLH and FSH are only guaranteed to execute atomically if the effective address is naturally aligned. FLH and FSH do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. FLH NaN-boxes the result written to rd, whereas FSH ignores all but the lower 16 bits in rs2. A new supported format is added to the format field of most instructions, as shown in Format field encoding.. Table 1. Format field encoding. fmt field Mnemonic Meaning 00 S 32-bit single-precision 01 D 64-bit double-precision 10 H 16-bit half-precision 11 Q 128-bit quad-precision The half-precision floating-point computational instructions are defined analogously to their single-precision counterparts, but operate on half-precision operands and produce half-precision results. New floating-point-to-integer and integer-to-floating-point conversion instructions are added. These instructions are defined analogously to the single-precision-to-integer and integer-to-single-precision conversion instructions. FCVT.W.H or FCVT.L.H converts a half-precision floating-point number to a signed 32-bit or 64-bit integer, respectively. FCVT.H.W or FCVT.H.L converts a 32-bit or 64-bit signed integer, respectively, into a half-precision floating-point number. FCVT.WU.H, FCVT.LU.H, FCVT.H.WU, and FCVT.H.LU variants convert to or from unsigned integer values. FCVT.L[U].H and FCVT.H.L[U] are RV64-only instructions. New floating-point-to-floating-point conversion instructions are added. These instructions are defined analogously to the double-precision floating-point-to-floating-point conversion instructions. FCVT.S.H or FCVT.H.S converts a half-precision floating-point number to a single-precision floating-point number, or vice-versa, respectively. If the D extension is present, FCVT.D.H or FCVT.H.D converts a half-precision floating-point number to a double-precision floating-point number, or vice-versa, respectively. If the Q extension is present, FCVT.Q.H or FCVT.H.Q converts a half-precision floating-point number to a quad-precision floating-point number, or vice-versa, respectively. Floating-point to floating-point sign-injection instructions, FSGNJ.H, FSGNJN.H, and FSGNJX.H are defined analogously to the single-precision sign-injection instruction. Instructions are provided to move bit patterns between the floating-point and integer registers. FMV.X.H moves the half-precision value in floating-point register rs1 to a representation in IEEE 754-2008 standard encoding in integer register rd, filling the upper XLEN-16 bits with copies of the floating-point number’s sign bit. FMV.H.X moves the half-precision value encoded in IEEE 754-2008 standard encoding from the lower 16 bits of integer register rs1 to the floating-point register rd, NaN-boxing the result. FMV.X.H and FMV.H.X do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. The half-precision floating-point compare instructions are defined analogously to their single-precision counterparts, but operate on half-precision operands. The half-precision floating-point classify instruction, FCLASS.H, is defined analogously to its single-precision counterpart, but operates on half-precision operands. This section describes the Zfhmin standard extension, which provides minimal support for 16-bit half-precision binary floating-point instructions. The Zfhmin extension is a subset of the Zfh extension, consisting only of data transfer and conversion instructions. Like Zfh, the Zfhmin extension depends on the single-precision floating-point extension, F. The expectation is that Zfhmin software primarily uses the half-precision format for storage, performing most computation in higher precision. The Zfhmin extension includes the following instructions from the Zfh extension: FLH, FSH, FMV.X.H, FMV.H.X, FCVT.S.H, and FCVT.H.S. If the D extension is present, the FCVT.D.H and FCVT.H.D instructions are also included. If the Q extension is present, the FCVT.Q.H and FCVT.H.Q instructions are additionally included. Zfhmin does not include the FSGNJ.H instruction, because it suffices to instead use the FSGNJ.S instruction to move half-precision values between floating-point registers. Half-precision addition, subtraction, multiplication, division, and square-root operations can be faithfully emulated by converting the half-precision operands to single-precision, performing the operation using single-precision arithmetic, then converting back to half-precision. [21] Performing half-precision fused multiply-addition using this method incurs a 1-ulp error on some inputs for the RNE and RMM rounding modes. Conversion from 8- or 16-bit integers to half-precision can be emulated by first converting to single-precision, then converting to half-precision. Conversion from 32-bit integer can be emulated by first converting to double-precision. If the D extension is not present and a 1-ulp error under RNE or RMM is tolerable, 32-bit integers can be first converted to single-precision instead. The same remark applies to conversions from 64-bit integers without the Q extension.","title":"\"Zfh\" and \"Zfhmin\" Extensions for Half-Precision Floating-Point, Version 1.0","component":"isa","version":"v20250508","name":"zfh","url":"/isa/unpriv/zfh.html","titles":[{"text":"Half-Precision Load and Store Instructions","hash":"half-precision-load-and-store-instructions","id":1},{"text":"Half-Precision Computational Instructions","hash":"half-precision-computational-instructions","id":2},{"text":"Half-Precision Conversion and Move Instructions","hash":"half-precision-conversion-and-move-instructions","id":3},{"text":"Half-Precision Floating-Point Compare Instructions","hash":"flt-pt-to-int-move","id":4},{"text":"Half-Precision Floating-Point Classify Instruction","hash":"half-pr-flt-pt-compare","id":5},{"text":"\"Zfhmin\" Standard Extension for Minimal Half-Precision Floating-Point","hash":"half-pr-flt-class","id":6}]},"60":{"id":60,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zfinx\", \"Zdinx\", \"Zhinx\", \"Zhinxmin\" Extensions for Floating-Point in Integer Registers, Version 1.0 This chapter defines the \"Zfinx\" extension (pronounced \"z-f-in-x\") that provides instructions similar to those in the standard floating-point F extension for single-precision floating-point instructions but which operate on the x registers instead of the f registers. This chapter also defines the \"Zdinx\", \"Zhinx\", and \"Zhinxmin\" extensions that provide similar instructions for other floating-point precisions. The F extension uses separate f registers for floating-point computation, to reduce register pressure and simplify the provision of register-file ports for wide superscalars. However, the additional architectural state increases the minimal implementation cost. By eliminating the f registers, the Zfinx extension substantially reduces the cost of simple RISC-V implementations with floating-point instruction-set support. Zfinx also reduces context-switch cost. In general, software that assumes the presence of the F extension is incompatible with software that assumes the presence of the Zfinx extension, and vice versa. The Zfinx extension adds all of the instructions that the F extension adds, except for the transfer instructions FLW, FSW, FMV.W.X, FMV.X.W, C.FLW[SP], and C.FSW[SP]. Zfinx software uses integer loads and stores to transfer floating-point values from and to memory. Transfers between registers use either integer arithmetic or floating-point sign-injection instructions. The Zfinx variants of these F-extension instructions have the same semantics, except that whenever such an instruction would have accessed an f register, it instead accesses the x register with the same number. The Zfinx extension depends on the \"Zicsr\" extension for control and status register access. Floating-point operands of width w XLEN bits occupy bits w-1:0 of an x register. Floating-point operations on w-bit operands ignore operand bits XLEN-1: w. Floating-point operations that produce w XLEN-bit results fill bits XLEN-1: w with copies of bit w-1 (the sign bit). The NaN-boxing scheme employed in the f registers was designed to efficiently support recoded floating-point formats. Recoding is less practical for Zfinx, though, since the same registers hold both floating-point and integer operands. Hence, the need for NaN boxing is diminished. Sign-extending 32-bit floating-point numbers when held in RV64 x registers is compatible with the existing RV64 calling conventions, which leave bits 63-32 undefined when passing a 32-bit floating point value in x registers. To keep the architecture more regular, we extend this pattern to 16-bit floating-point numbers in both RV32 and RV64. The Zdinx extension provides analogous double-precision floating-point instructions. The Zdinx extension depends upon the Zfinx extension. The Zdinx extension adds all of the instructions that the D extension adds, except for the transfer instructions FLD, FSD, FMV.D.X, FMV.X.D, C.FLD[SP], and C.FSD[SP]. The Zdinx variants of these D-extension instructions have the same semantics, except that whenever such an instruction would have accessed an f register, it instead accesses the x register with the same number. Double-precision operands in RV32Zdinx are held in aligned x-register pairs, i.e., register numbers must be even. Use of misaligned (odd-numbered) registers for double-width floating-point operands is reserved. Regardless of endianness, the lower-numbered register holds the low-order bits, and the higher-numbered register holds the high-order bits: e.g., bits 31:0 of a double-precision operand in RV32Zdinx might be held in register x14, with bits 63:32 of that operand held in x15. When a double-width floating-point result is written to x0, the entire write takes no effect: e.g., for RV32Zdinx, writing a double-precision result to x0 does not cause x1 to be written. When x0 is used as a double-width floating-point operand, the entire operand is zero—i.e., x1 is not accessed. Load-pair and store-pair instructions are contained in a separate extension (see Section Extensions for Load/Store pair for RV32). In case this is not available, transferring double-precision operands in RV32Zdinx from or to memory requires two loads or stores. Register moves need only a single FSGNJ.D instruction, however. The Zhinx extension provides analogous half-precision floating-point instructions. The Zhinx extension depends upon the Zfinx extension. The Zhinx extension adds all of the instructions that the Zfh extension adds, except for the transfer instructions FLH, FSH, FMV.H.X, and FMV.X.H. The Zhinx variants of these Zfh-extension instructions have the same semantics, except that whenever such an instruction would have accessed an f register, it instead accesses the x register with the same number. The Zhinxmin extension provides minimal support for 16-bit half-precision floating-point instructions that operate on the x registers. The Zhinxmin extension depends upon the Zfinx extension. The Zhinxmin extension includes the following instructions from the Zhinx extension: FCVT.S.H and FCVT.H.S. If the Zdinx extension is present, the FCVT.D.H and FCVT.H.D instructions are also included. In the future, an RV64Zqinx quad-precision extension could be defined analogously to RV32Zdinx. An RV32Zqinx extension could also be defined but would require quad-register groups. In the standard privileged architecture defined in Volume II, the mstatus field FS is hardwired to 0 if the Zfinx extension is implemented, and FS no longer affects the trapping behavior of floating-point instructions or fcsr accesses. The misa bits F, D, and Q are hardwired to 0 when the Zfinx extension is implemented. A future discoverability mechanism might be used to probe the existence of the Zfinx, Zhinx, and Zdinx extensions.","title":"\"Zfinx\", \"Zdinx\", \"Zhinx\", \"Zhinxmin\" Extensions for Floating-Point in Integer Registers, Version 1.0","component":"isa","version":"v20250508","name":"zfinx","url":"/isa/unpriv/zfinx.html","titles":[{"text":"Processing of Narrower Values","hash":"processing-of-narrower-values","id":1},{"text":"Zdinx","hash":"zdinx","id":2},{"text":"Processing of Wider Values","hash":"processing-of-wider-values","id":3},{"text":"Zhinx","hash":"zhinx","id":4},{"text":"Zhinxmin","hash":"zhinxmin","id":5},{"text":"Privileged Architecture Implications","hash":"privileged-architecture-implications","id":6}]},"61":{"id":61,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zicond\" Extension for Integer Conditional Operations, Version 1.0.0 The Zicond extension defines a simple solution that provides most of the benefit and all of the flexibility one would desire to support conditional arithmetic and conditional-select/move operations, while remaining true to the RISC-V design philosophy. The instructions follow the format for R-type instructions with 3 operands (i.e., 2 source operands and 1 destination operand). Using these instructions, branchless sequences can be implemented (typically in two-instruction sequences) without the need for instruction fusion, special provisions during the decoding of architectural instructions, or other microarchitectural provisions. One of the shortcomings of RISC-V, compared to competing instruction set architectures, is the absence of conditional operations to support branchless code-generation: this includes conditional arithmetic, conditional select and conditional move operations. The design principles of RISC-V (e.g. the absence of an instruction-format that supports 3 source registers and an output register) make it unlikely that direct equivalents of the competing instructions will be introduced. Yet, low-cost conditional instructions are a desirable feature as they allow the replacement of branches in a broad range of suitable situations (whether the branch turns out to be unpredictable or predictable) so as to reduce the capacity and aliasing pressures on BTBs and branch predictors, and to allow for longer basic blocks (for both the hardware and the compiler to work with). The \"Conditional\" operations extension provides a simple solution that provides most of the benefit and all of the flexibility one would desire to support conditional arithmetic and conditional-select/move operations, while remaining true to the RISC-V design philosophy. The instructions follow the format for R-type instructions with 3 operands (i.e., 2 source operands and 1 destination operand). Using these instructions, branchless sequences can be implemented (typically in two-instruction sequences) without the need for instruction fusion, special provisions during the decoding of architectural instructions, or other microarchitectural provisions. The following instructions comprise the Zicond extension: RV32 RV64 Mnemonic Instruction ✓ ✓ czero.eqz rd, rs1, rs2 Conditional zero, if condition is equal to zero ✓ ✓ czero.nez rd, rs1, rs2 Conditional zero, if condition is nonzero Architecture Comment: defining additional comparisons, in addition to equal-to-zero and not-equal-to-zero, does not offer a benefit due to the lack of immediates or an additional register operand that the comparison takes place against. Based on these two instructions, synthetic instructions (i.e., short instruction sequences) for the following conditional arithmetic operations are supported: conditional add, if zero conditional add, if non-zero conditional subtract, if zero conditional subtract, if non-zero conditional bitwise-and, if zero conditional bitwise-and, if non-zero conditional bitwise-or, if zero conditional bitwise-or, if non-zero conditional bitwise-xor, if zero conditional bitwise-xor, if non-zero Additionally, the following conditional select instructions are supported: conditional-select, if zero conditional-select, if non-zero More complex conditions, such as comparisons against immediates, registers, single-bit tests, comparisons against ranges, etc. can be realized by composing these new instructions with existing instructions. Synopsis Moves zero to a register rd, if the condition rs2 is equal to zero, otherwise moves rs1 to rd. Mnemonic czero.eqz rd, rs1, rs2 Encoding Description If rs2 contains the value zero, this instruction writes the value zero to rd. Otherwise, this instruction copies the contents of rs1 to rd. This instruction carries a syntactic dependency from both rs1 and rs2 to rd. Furthermore, if the Zkt extension is implemented, this instruction’s timing is independent of the data values in rs1 and rs2. SAIL code let condition = X(rs2); result : xlenbits = if (condition == zeros()) then zeros() else X(rs1); X(rd) = result; Synopsis Moves zero to a register rd, if the condition rs2 is nonzero, otherwise moves rs1 to rd. Mnemonic czero.nez rd, rs1, rs2 Encoding Description If rs2 contains a nonzero value, this instruction writes the value zero to rd. Otherwise, this instruction copies the contents of rs1 to rd. This instruction carries a syntactic dependency from both rs1 and rs2 to rd. Furthermore, if the Zkt extension is implemented, this instruction’s timing is independent of the data values in rs1 and rs2. SAIL code let condition = X(rs2); result : xlenbits = if (condition != zeros()) then zeros() else X(rs1); X(rd) = result; The instructions from this extension can be used to construct sequences that perform conditional-arithmetic, conditional-bitwise-logical, and conditional-select operations. Operation Instruction sequence Length Conditional add, if zero rd = (rc == 0) ? (rs1 + rs2) : rs1 czero.nez rd, rs2, rc add rd, rs1, rd 2 insns Conditional add, if non-zero rd = (rc != 0) ? (rs1 + rs2) : rs1 czero.eqz rd, rs2, rc add rd, rs1, rd Conditional subtract, if zero rd = (rc == 0) ? (rs1 - rs2) : rs1 czero.nez rd, rs2, rc sub rd, rs1, rd Conditional subtract, if non-zero rd = (rc != 0) ? (rs1 - rs2) : rs1 czero.eqz rd, rs2, rc sub rd, rs1, rd Conditional bitwise-or, if zero rd = (rc == 0) ? (rs1 | rs2) : rs1 czero.nez rd, rs2, rc or rd, rs1, rd Conditional bitwise-or, if non-zero rd = (rc != 0) ? (rs1 | rs2) : rs1 czero.eqz rd, rs2, rc or rd, rs1, rd Conditional bitwise-xor, if zero rd = (rc == 0) ? (rs1 ^ rs2) : rs1 czero.nez rd, rs2, rc xor rd, rs1, rd Conditional bitwise-xor, if non-zero rd = (rc != 0) ? (rs1 ^ rs2) : rs1 czero.eqz rd, rs2, rc xor rd, rs1, rd Conditional bitwise-and, if zero rd = (rc == 0) ? (rs1 & rs2) : rs1 and rd, rs1, rs2 czero.eqz rtmp, rs1, rc or rd, rd, rtmp 3 insns (requires 1 temporary) Conditional bitwise-and, if non-zero rd = (rc != 0) ? (rs1 & rs2) : rs1 and rd, rs1, rs2 czero.nez rtmp, rs1, rc or rd, rd, rtmp Conditional select, if zero rd = (rc == 0) ? rs1 : rs2 czero.nez rd, rs1, rc czero.eqz rtmp, rs2, rc or rd, rd, rtmp Conditional select, if non-zero rd = (rc != 0) ? rs1 : rs2 czero.eqz rd, rs1, rc czero.nez rtmp, rs2, rc or rd, rd, rtmp","title":"\"Zicond\" Extension for Integer Conditional Operations, Version 1.0.0","component":"isa","version":"v20250508","name":"zicond","url":"/isa/unpriv/zicond.html","titles":[{"text":"Introduction","hash":"intro","id":1},{"text":"Zicond specification","hash":"zicond-specification","id":2},{"text":"Instructions (in alphabetical order)","hash":"instructions-in-alphabetical-order","id":3},{"text":"czero.eqz","hash":"insns-czero-eqz","id":4},{"text":"czero.nez","hash":"insns-czero-nez","id":5},{"text":"Usage examples","hash":"usage-examples","id":6},{"text":"Instruction sequences","hash":"instruction-sequences","id":7}]},"62":{"id":62,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zicsr\", Extension for Control and Status Register (CSR) Instructions, Version 2.0 RISC-V defines a separate address space of 4096 Control and Status registers associated with each hart. This chapter defines the full set of CSR instructions that operate on these CSRs. While CSRs are primarily used by the privileged architecture, there are several uses in unprivileged code including for counters and timers, and for floating-point status. The counters and timers are no longer considered mandatory parts of the standard base ISAs, and so the CSR instructions required to access them have been moved out of [rv32] into this separate chapter. All CSR instructions atomically read-modify-write a single CSR, whose CSR specifier is encoded in the 12-bit csr field of the instruction held in bits 31-20. The immediate forms use a 5-bit zero-extended immediate encoded in the rs1 field. The CSRRW (Atomic Read/Write CSR) instruction atomically swaps values in the CSRs and integer registers. CSRRW reads the old value of the CSR, zero-extends the value to XLEN bits, then writes it to integer register rd. The initial value in rs1 is written to the CSR. If rd=x0, then the instruction shall not read the CSR and shall not cause any of the side effects that might occur on a CSR read. The CSRRS (Atomic Read and Set Bits in CSR) instruction reads the value of the CSR, zero-extends the value to XLEN bits, and writes it to integer register rd. The initial value in integer register rs1 is treated as a bit mask that specifies bit positions to be set in the CSR. Any bit that is high in rs1 will cause the corresponding bit to be set in the CSR, if that CSR bit is writable. The CSRRC (Atomic Read and Clear Bits in CSR) instruction reads the value of the CSR, zero-extends the value to XLEN bits, and writes it to integer register rd. The initial value in integer register rs1 is treated as a bit mask that specifies bit positions to be cleared in the CSR. Any bit that is high in rs1 will cause the corresponding bit to be cleared in the CSR, if that CSR bit is writable. For both CSRRS and CSRRC, if rs1=x0, then the instruction will not write to the CSR at all, and so shall not cause any of the side effects that might otherwise occur on a CSR write, nor raise illegal-instruction exceptions on accesses to read-only CSRs. Both CSRRS and CSRRC always read the addressed CSR and cause any read side effects regardless of rs1 and rd fields. Note that if rs1 specifies a register other than x0, and that register holds a zero value, the instruction will not action any attendant per-field side effects, but will action any side effects caused by writing to the entire CSR. A CSRRW with rs1=x0 will attempt to write zero to the destination CSR. The CSRRWI, CSRRSI, and CSRRCI variants are similar to CSRRW, CSRRS, and CSRRC respectively, except they update the CSR using an XLEN-bit value obtained by zero-extending a 5-bit unsigned immediate (uimm[4:0]) field encoded in the rs1 field instead of a value from an integer register. For CSRRSI and CSRRCI, if the uimm[4:0] field is zero, then these instructions will not write to the CSR, and shall not cause any of the side effects that might otherwise occur on a CSR write, nor raise illegal-instruction exceptions on accesses to read-only CSRs. For CSRRWI, if rd=x0, then the instruction shall not read the CSR and shall not cause any of the side effects that might occur on a CSR read. Both CSRRSI and CSRRCI will always read the CSR and cause any read side effects regardless of rd and rs1 fields. Table 1. Conditions determining whether a CSR instruction reads or writes the specified CSR. Register operand Instruction rd is x0 rs1 is x0 Reads CSR Writes CSR CSRRW Yes - No Yes CSRRW No - Yes Yes CSRRS/CSRRC - Yes Yes No CSRRS/CSRRC - No Yes Yes Immediate operand Instruction rd is x0 uimm 0 Reads CSR Writes CSR CSRRWI Yes - No Yes CSRRWI No - Yes Yes CSRRSI/CSRRCI - Yes Yes No CSRRSI/CSRRCI - No Yes Yes Conditions determining whether a CSR instruction reads or writes the specified CSR. summarizes the behavior of the CSR instructions with respect to whether they read and/or write the CSR. In addition to side effects that occur as a consequence of reading or writing a CSR, individual fields within a CSR might have side effects when written. The CSRRW[I] instructions action side effects for all such fields within the written CSR. The CSRRS[I] an CSRRC[I] instructions only action side effects for fields for which the rs1 or uimm argument has at least one bit set corresponding to that field. As of this writing, no standard CSRs have side effects on field writes. Hence, whether a standard CSR access has any side effects can be determined solely from the opcode. Defining CSRs with side effects on field writes is not recommended. For any event or consequence that occurs due to a CSR having a particular value, if a write to the CSR gives it that value, the resulting event or consequence is said to be an indirect effect of the write. Indirect effects of a CSR write are not considered by the RISC-V ISA to be side effects of that write. An example of side effects for CSR accesses would be if reading from a specific CSR causes a light bulb to turn on, while writing an odd value to the same CSR causes the light to turn off. Assume writing an even value has no effect. In this case, both the read and write have side effects controlling whether the bulb is lit, as this condition is not determined solely from the CSR value. (Note that after writing an odd value to the CSR to turn off the light, then reading to turn the light on, writing again the same odd value causes the light to turn off again. Hence, on the last write, it is not a change in the CSR value that turns off the light.) On the other hand, if a bulb is rigged to light whenever the value of a particular CSR is odd, then turning the light on and off is not considered a side effect of writing to the CSR but merely an indirect effect of such writes. More concretely, the RISC-V privileged architecture defined in Volume II specifies that certain combinations of CSR values cause a trap to occur. When an explicit write to a CSR creates the conditions that trigger the trap, the trap is not considered a side effect of the write but merely an indirect effect. Standard CSRs do not have any side effects on reads. Standard CSRs may have side effects on writes. Custom extensions might add CSRs for which accesses have side effects on either reads or writes. Some CSRs, such as the instructions-retired counter, instret, may be modified as side effects of instruction execution. In these cases, if a CSR access instruction reads a CSR, it reads the value prior to the execution of the instruction. If a CSR access instruction writes such a CSR, the explicit write is done instead of the update from the side effect. In particular, a value written to instret by one instruction will be the value read by the following instruction. The assembler pseudoinstruction to read a CSR, CSRR rd, csr, is encoded as CSRRS rd, csr, x0. The assembler pseudoinstruction to write a CSR, CSRW csr, rs1, is encoded as CSRRW x0, csr, rs1, while CSRWI csr, uimm, is encoded as CSRRWI x0, csr, uimm. Further assembler pseudoinstructions are defined to set and clear bits in the CSR when the old value is not required: CSRS/CSRC csr, rs1; CSRSI/CSRCI csr, uimm. Each RISC-V hart normally observes its own CSR accesses, including its implicit CSR accesses, as performed in program order. In particular, unless specified otherwise, a CSR access is performed after the execution of any prior instructions in program order whose behavior modifies or is modified by the CSR state and before the execution of any subsequent instructions in program order whose behavior modifies or is modified by the CSR state. Furthermore, an explicit CSR read returns the CSR state before the execution of the instruction, while an explicit CSR write suppresses and overrides any implicit writes or modifications to the same CSR by the same instruction. Likewise, any side effects from an explicit CSR access are normally observed to occur synchronously in program order. Unless specified otherwise, the full consequences of any such side effects are observable by the very next instruction, and no consequences may be observed out-of-order by preceding instructions. (Note the distinction made earlier between side effects and indirect effects of CSR writes.) For the RVWMO memory consistency model ([memorymodel]), CSR accesses are weakly ordered by default, so other harts or devices may observe CSR accesses in an order different from program order. In addition, CSR accesses are not ordered with respect to explicit memory accesses, unless a CSR access modifies the execution behavior of the instruction that performs the explicit memory access or unless a CSR access and an explicit memory access are ordered by either the syntactic dependencies defined by the memory model or the ordering requirements defined by the Memory-Ordering PMAs section in Volume II of this manual. To enforce ordering in all other cases, software should execute a FENCE instruction between the relevant accesses. For the purposes of the FENCE instruction, CSR read accesses are classified as device input (I), and CSR write accesses are classified as device output (O). Informally, the CSR space acts as a weakly ordered memory-mapped I/O region, as defined by the Memory-Ordering PMAs section in Volume II of this manual. As a result, the order of CSR accesses with respect to all other accesses is constrained by the same mechanisms that constrain the order of memory-mapped I/O accesses to such a region. These CSR-ordering constraints are imposed to support ordering main memory and memory-mapped I/O accesses with respect to CSR accesses that are visible to, or affected by, devices or other harts. Examples include the time, cycle, and mcycle CSRs, in addition to CSRs that reflect pending interrupts, like mip and sip. Note that implicit reads of such CSRs (e.g., taking an interrupt because of a change in mip) are also ordered as device input. Most CSRs (including, e.g., the fcsr) are not visible to other harts; their accesses can be freely reordered in the global memory order with respect to FENCE instructions without violating this specification. The hardware platform may define that accesses to certain CSRs are strongly ordered, as defined by the Memory-Ordering PMAs section in Volume II of this manual. Accesses to strongly ordered CSRs have stronger ordering constraints with respect to accesses to both weakly ordered CSRs and accesses to memory-mapped I/O regions. The rules for the reordering of CSR accesses in the global memory order should probably be moved to [memorymodel] concerning the RVWMO memory consistency model.","title":"\"Zicsr\", Extension for Control and Status Register (CSR) Instructions, Version 2.0","component":"isa","version":"v20250508","name":"zicsr","url":"/isa/unpriv/zicsr.html","titles":[{"text":"CSR Instructions","hash":"csr-instructions","id":1},{"text":"CSR Access Ordering","hash":"csr-access-ordering","id":2}]},"63":{"id":63,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zifencei\" Extension for Instruction-Fetch Fence, Version 2.0 writes to instruction memory and instruction fetches on the same hart. Currently, this instruction is the only standard mechanism to ensure that stores visible to a hart will also be visible to its instruction fetches. We considered but did not include a \"store instruction word\" instruction as in [17]. JIT compilers may generate a large trace of instructions before a single FENCE.I, and amortize any instruction cache snooping/invalidation overhead by writing translated instructions to memory regions that are known not to reside in the I-cache. The FENCE.I instruction was designed to support a wide variety of implementations. A simple implementation can flush the local instruction cache and the instruction pipeline when the FENCE.I is executed. A more complex implementation might snoop the instruction (data) cache on every data (instruction) cache miss, or use an inclusive unified private L2 cache to invalidate lines from the primary instruction cache when they are being written by a local store instruction. If instruction and data caches are kept coherent in this way, or if the memory system consists of only uncached RAMs, then just the fetch pipeline needs to be flushed at a FENCE.I. The FENCE.I instruction was previously part of the base I instruction set. Two main issues are driving moving this out of the mandatory base, although at time of writing it is still the only standard method for maintaining instruction-fetch coherence. First, it has been recognized that on some systems, FENCE.I will be expensive to implement and alternate mechanisms are being discussed in the memory model task group. In particular, for designs that have an incoherent instruction cache and an incoherent data cache, or where the instruction cache refill does not snoop a coherent data cache, both caches must be completely flushed when a FENCE.I instruction is encountered. This problem is exacerbated when there are multiple levels of I and D cache in front of a unified cache or outer memory system. Second, the instruction is not powerful enough to make available at user level in a Unix-like operating system environment. The FENCE.I only synchronizes the local hart, and the OS can reschedule the user hart to a different physical hart after the FENCE.I. This would require the OS to execute an additional FENCE.I as part of every context migration. For this reason, the standard Linux ABI has removed FENCE.I from user-level and now requires a system call to maintain instruction-fetch coherence, which allows the OS to minimize the number of FENCE.I executions required on current systems and provides forward-compatibility with future improved instruction-fetch coherence mechanisms. Future approaches to instruction-fetch coherence under discussion include providing more restricted versions of FENCE.I that only target a given address specified in rs1, and/or allowing software to use an ABI that relies on machine-mode cache-maintenance operations. The FENCE.I instruction is used to synchronize the instruction and data streams. RISC-V does not guarantee that stores to instruction memory will be made visible to instruction fetches on a RISC-V hart until that hart executes a FENCE.I instruction. A FENCE.I instruction ensures that a subsequent instruction fetch on a RISC-V hart will see any previous data stores already visible to the same RISC-V hart. FENCE.I does not ensure that other RISC-V harts' instruction fetches will observe the local hart’s stores in a multiprocessor system. To make a store to instruction memory visible to all RISC-V harts, the writing hart also has to execute a data FENCE before requesting that all remote RISC-V harts execute a FENCE.I. The unused fields in the FENCE.I instruction, funct12, rs1, and rd, are reserved for finer-grain fences in future extensions. For forward compatibility, base implementations shall ignore these fields, and standard software shall zero these fields. Because FENCE.I only orders stores with a hart’s own instruction fetches, application code should only rely upon FENCE.I if the application thread will not be migrated to a different hart. The EEI can provide mechanisms for efficient multiprocessor instruction-stream synchronization.","title":"\"Zifencei\" Extension for Instruction-Fetch Fence, Version 2.0","component":"isa","version":"v20250508","name":"zifencei","url":"/isa/unpriv/zifencei.html","titles":[]},"64":{"id":64,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zihintntl\" Extension for Non-Temporal Locality Hints, Version 1.0 The NTL instructions are HINTs that indicate that the explicit memory accesses of the immediately subsequent instruction (henceforth \"target instruction\") exhibit poor temporal locality of reference. The NTL instructions do not change architectural state, nor do they alter the architecturally visible effects of the target instruction. Four variants are provided: The NTL.P1 instruction indicates that the target instruction does not exhibit temporal locality within the capacity of the innermost level of private cache in the memory hierarchy. NTL.P1 is encoded as ADD x0, x0, x2. The NTL.PALL instruction indicates that the target instruction does not exhibit temporal locality within the capacity of any level of private cache in the memory hierarchy. NTL.PALL is encoded as ADD x0, x0, x3. The NTL.S1 instruction indicates that the target instruction does not exhibit temporal locality within the capacity of the innermost level of shared cache in the memory hierarchy. NTL.S1 is encoded as ADD x0, x0, x4. The NTL.ALL instruction indicates that the target instruction does not exhibit temporal locality within the capacity of any level of cache in the memory hierarchy. NTL.ALL is encoded as ADD x0, x0, x5. The NTL instructions can be used to avoid cache pollution when streaming data or traversing large data structures, or to reduce latency in producer-consumer interactions. A microarchitecture might use the NTL instructions to inform the cache replacement policy, or to decide which cache to allocate into, or to avoid cache allocation altogether. For example, NTL.P1 might indicate that an implementation should not allocate a line in a private L1 cache, but should allocate in L2 (whether private or shared). In another implementation, NTL.P1 might allocate the line in L1, but in the least-recently used state. NTL.ALL will typically inform implementations not to allocate anywhere in the cache hierarchy. Programmers should use NTL.ALL for accesses that have no exploitable temporal locality. Like any HINTs, these instructions may be freely ignored. Hence, although they are described in terms of cache-based memory hierarchies, they do not mandate the provision of caches. Some implementations might respect these HINTs for some memory accesses but not others: e.g., implementations that implement LR/SC by acquiring a cache line in the exclusive state in L1 might ignore NTL instructions on LR and SC, but might respect NTL instructions for AMOs and regular loads and stores. Recommended NTL variant for portable software to employ in various scenarios. lists several software use cases and the recommended NTL variant that portable software—i.e., software not tuned for any specific implementation’s memory hierarchy—should use in each case. Table 1. Recommended NTL variant for portable software to employ in various scenarios. Scenario Recommended NTL variant Access to a working set between and in size NTL.P1 Access to a working set between and in size NTL.PALL Access to a working set greater than in size NTL.S1 Access with no exploitable temporal locality (e.g., streaming) NTL.ALL Access to a contended synchronization variable NTL.PALL The working-set sizes listed in Recommended NTL variant for portable software to employ in various scenarios. are not meant to constrain implementers' cache-sizing decisions. Cache sizes will obviously vary between implementations, and so software writers should only take these working-set sizes as rough guidelines. Mapping of NTL variants to various memory hierarchies. lists several sample memory hierarchies and recommends how each NTL variant maps onto each cache level. The table also recommends which NTL variant that implementation-tuned software should use to avoid allocating in a particular cache level. For example, for a system with a private L1 and a shared L2, it is recommended that NTL.P1 and NTL.PALL indicate that temporal locality cannot be exploited by the L1, and that NTL.S1 and NTL.ALL indicate that temporal locality cannot be exploited by the L2. Furthermore, software tuned for such a system should use NTL.P1 to indicate a lack of temporal locality exploitable by the L1, or should use NTL.ALL indicate a lack of temporal locality exploitable by the L2. If the C extension is provided, compressed variants of these HINTs are also provided: C.NTL.P1 is encoded as C.ADD x0, x2; C.NTL.PALL is encoded as C.ADD x0, x3; C.NTL.S1 is encoded as C.ADD x0, x4; and C.NTL.ALL is encoded as C.ADD x0, x5. The NTL instructions affect all memory-access instructions except the cache-management instructions in the Zicbom extension. As of this writing, there are no other exceptions to this rule, and so the NTL instructions affect all memory-access instructions defined in the base ISAs and the A, F, D, Q, C, and V standard extensions, as well as those defined within the hypervisor extension in Volume II. The NTL instructions can affect cache-management operations other than those in the Zicbom extension. For example, NTL.PALL followed by CBO.ZERO might indicate that the line should be allocated in L3 and zeroed, but not allocated in L1 or L2. Table 2. Mapping of NTL variants to various memory hierarchies. Memory hierarchy Recommended mapping of NTL variant to actual cache level Recommended NTL variant for explicit cache management P1 PALL S1 ALL L1 L2 L3 L4/L5 Common Scenarios No caches --- none Private L1 only L1 L1 L1 L1 ALL --- --- --- Private L1; shared L2 L1 L1 L2 L2 P1 ALL --- --- Private L1; shared L2/L3 L1 L1 L2 L3 P1 S1 ALL --- Private L1/L2 L1 L2 L2 L2 P1 ALL --- --- Private L1/L2; shared L3 L1 L2 L3 L3 P1 PALL ALL --- Private L1/L2; shared L3/L4 L1 L2 L3 L4 P1 PALL S1 ALL Uncommon Scenarios Private L1/L2/L3; shared L4 L1 L3 L4 L4 P1 P1 PALL ALL Private L1; shared L2/L3/L4 L1 L1 L2 L4 P1 S1 ALL ALL Private L1/L2; shared L3/L4/L5 L1 L2 L3 L5 P1 PALL S1 ALL Private L1/L2/L3; shared L4/L5 L1 L3 L4 L5 P1 P1 PALL ALL When an NTL instruction is applied to a prefetch hint in the Zicbop extension, it indicates that a cache line should be prefetched into a cache that is outer from the level specified by the NTL. For example, in a system with a private L1 and shared L2, NTL.P1 followed by PREFETCH.R might prefetch into L2 with read intent. To prefetch into the innermost level of cache, do not prefix the prefetch instruction with an NTL instruction. In some systems, NTL.ALL followed by a prefetch instruction might prefetch into a cache or prefetch buffer internal to a memory controller. Software is discouraged from following an NTL instruction with an instruction that does not explicitly access memory. Nonadherence to this recommendation might reduce performance but otherwise has no architecturally visible effect. In the event that a trap is taken on the target instruction, implementations are discouraged from applying the NTL to the first instruction in the trap handler. Instead, implementations are recommended to ignore the HINT in this case. If an interrupt occurs between the execution of an NTL instruction and its target instruction, execution will normally resume at the target instruction. That the NTL instruction is not reexecuted does not change the semantics of the program. Some implementations might prefer not to process the NTL instruction until the target instruction is seen (e.g., so that the NTL can be fused with the memory access it modifies). Such implementations might preferentially take the interrupt before the NTL, rather than between the NTL and the memory access. Since the NTL instructions are encoded as ADDs, they can be used within LR/SC loops without voiding the forward-progress guarantee. But, since using other loads and stores within an LR/SC loop does void the forward-progress guarantee, the only reason to use an NTL within such a loop is to modify the LR or the SC.","title":"\"Zihintntl\" Extension for Non-Temporal Locality Hints, Version 1.0","component":"isa","version":"v20250508","name":"zihintntl","url":"/isa/unpriv/zihintntl.html","titles":[]},"65":{"id":65,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zihintpause\" Extension for Pause Hint, Version 2.0 duration of its effect must be bounded and may be zero. Software can use the PAUSE instruction to reduce energy consumption while executing spin-wait code sequences. Multithreaded cores might temporarily relinquish execution resources to other harts when PAUSE is executed. It is recommended that a PAUSE instruction generally be included in the code sequence for a spin-wait loop. A future extension might add primitives similar to the x86 MONITOR/MWAIT instructions, which provide a more efficient mechanism to wait on writes to a specific memory location. However, these instructions would not supplant PAUSE. PAUSE is more appropriate when polling for non-memory events, when polling for multiple events, or when software does not know precisely what events it is polling for. The duration of a PAUSE instruction’s effect may vary significantly within and among implementations. In typical implementations this duration should be much less than the time to perform a context switch, probably more on the rough order of an on-chip cache miss latency or a cacheless access to main memory. A series of PAUSE instructions can be used to create a cumulative delay loosely proportional to the number of PAUSE instructions. In spin-wait loops in portable code, however, only one PAUSE instruction should be used before re-evaluating loop conditions, else the hart might stall longer than optimal on some implementations, degrading system performance. PAUSE is encoded as a FENCE instruction with pred=W, succ=0, fm=0, rd=x0, and rs1=x0. PAUSE is encoded as a hint within the FENCE opcode because some implementations are expected to deliberately stall the PAUSE instruction until outstanding memory transactions have completed. Because the successor set is null, however, PAUSE does not mandate any particular memory ordering—hence, it truly is a HINT. Like other FENCE instructions, PAUSE cannot be used within LR/SC sequences without voiding the forward-progress guarantee. The choice of a predecessor set of W is arbitrary, since the successor set is null. Other HINTs similar to PAUSE might be encoded with other predecessor sets.","title":"\"Zihintpause\" Extension for Pause Hint, Version 2.0","component":"isa","version":"v20250508","name":"zihintpause","url":"/isa/unpriv/zihintpause.html","titles":[]},"66":{"id":66,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Zimop\" Extension for May-Be-Operations, Version 1.0 This chapter defines the \"Zimop\" extension, which introduces the concept of instructions that may be operations (MOPs). MOPs are initially defined to simply write zero to x[rd], but are designed to be redefined by later extensions to perform some other action. The Zimop extension defines an encoding space for 40 MOPs. It is sometimes desirable to define instruction-set extensions whose instructions, rather than raising illegal-instruction exceptions when the extension is not implemented, take no useful action (beyond writing x[rd]). For example, programs with control-flow integrity checks can execute correctly on implementations without the corresponding extension, provided the checks are simply ignored. Implementing these checks as MOPs allows the same programs to run on implementations with or without the corresponding extension. Although similar in some respects to HINTs, MOPs cannot be encoded as HINTs, because unlike HINTs, MOPs are allowed to alter architectural state. Because MOPs may be redefined by later extensions, standard software should not execute a MOP unless it is deliberately targeting an extension that has redefined that MOP. The Zimop extension defines 32 MOP instructions named MOP.R.n, where n is an integer between 0 and 31, inclusive. Unless redefined by another extension, these instructions simply write 0 to x[rd]. Their encoding allows future extensions to define them to read x[rs1], as well as write x[rd]. The Zimop extension additionally defines 8 MOP instructions named MOP.RR.n, where n is an integer between 0 and 7, inclusive. Unless redefined by another extension, these instructions simply write 0 to x[rd]. Their encoding allows future extensions to define them to read x[rs1] and x[rs2], as well as write x[rd]. The recommended assembly syntax for MOP.R.n is MOP.R.n rd, rs1, with any x-register specifier being valid for either argument. Similarly for MOP.RR.n, the recommended syntax is MOP.RR.n rd, rs1, rs2. The extension that redefines a MOP may define an alternate assembly mnemonic. These MOPs are encoded in the SYSTEM major opcode in part because it is expected their behavior will be modulated by privileged CSR state. These MOPs are defined to write zero to x[rd], rather than performing no operation, to simplify instruction decoding and to allow testing the presence of features by branching on the zeroness of the result. The MOPs defined in the Zimop extension do not carry a syntactic dependency from x[rs1] or x[rs2] to x[rd], though an extension that redefines the MOP may impose such a requirement. Not carrying a syntactic dependency relieves straightforward implementations of reading x[rs1] and x[rs2]. This section defines the \"Zcmop\" extension, which defines eight 16-bit MOP instructions named C.MOP.n, where n is an odd integer between 1 and 15, inclusive. C.MOP.n is encoded in the reserved encoding space corresponding to C.LUI xn, 0, as shown in C.MOP.n instruction encoding.. Unlike the MOPs defined in the Zimop extension, the C.MOP.n instructions are defined to not write any register. Their encoding allows future extensions to define them to read register x[n]. The Zcmop extension depends upon the Zca extension. Very few suitable 16-bit encoding spaces exist. This space was chosen because it already has unusual behavior with respect to the rd/rs1 field—​it encodes c.addi16sp when the field contains x2--and is therefore of lower value for most purposes. Table 1. C.MOP.n instruction encoding. Mnemonic Encoding Redefinable to read register C.MOP.1 0110000010000001 x1 C.MOP.3 0110000110000001 x3 C.MOP.5 0110001010000001 x5 C.MOP.7 0110001110000001 x7 C.MOP.9 0110010010000001 x9 C.MOP.11 0110010110000001 x11 C.MOP.13 0110011010000001 x13 C.MOP.15 0110011110000001 x15 The recommended assembly syntax for C.MOP.n is simply the nullary C.MOP.n. The possibly accessed register is implicitly xn. The expectation is that each Zcmop instruction is equivalent to some Zimop instruction, but the choice of expansion (if any) is left to the extension that redefines the MOP. Note, a Zcmop instruction that does not write a value can expand into a write to x0.","title":"\"Zimop\" Extension for May-Be-Operations, Version 1.0","component":"isa","version":"v20250508","name":"zimop","url":"/isa/unpriv/zimop.html","titles":[{"text":"\"Zcmop\" Compressed May-Be-Operations Extension, Version 1.0","hash":"zcmop-compressed-may-be-operations-extension-version-1-0","id":1}]},"67":{"id":67,"text":"ISA Specifications Volume I: RISC-V Unprivileged ISA Specification \"Ztso\" Extension for Total Store Ordering, Version 1.0 This chapter defines the \"Ztso\" extension for the RISC-V Total Store Ordering (RVTSO) memory consistency model. RVTSO is defined as a delta from RVWMO, which is defined in [rvwmo]. The Ztso extension is meant to facilitate the porting of code originally written for the x86 or SPARC architectures, both of which use TSO by default. It also supports implementations which inherently provide RVTSO behavior and want to expose that fact to software. RVTSO makes the following adjustments to RVWMO: All load operations behave as if they have an acquire-RCpc annotation All store operations behave as if they have a release-RCpc annotation. All AMOs behave as if they have both acquire-RCsc and release-RCsc annotations. These rules render all PPO rules except 4-7 redundant. They also make redundant any non-I/O fences that do not have both PW and SR set. Finally, they also imply that no memory operation will be reordered past an AMO in either direction. In the context of RVTSO, as is the case for RVWMO, the storage ordering annotations are concisely and completely defined by PPO rules 5-7. In both of these memory models, it is the [ax-load] that allows a hart to forward a value from its store buffer to a subsequent (in program order) load—that is to say that stores can be forwarded locally before they are visible to other harts. Additionally, if the Ztso extension is implemented, then vector memory instructions in the V extension and Zve family of extensions follow RVTSO at the instruction level. The Ztso extension does not strengthen the ordering of intra-instruction element accesses. In spite of the fact that Ztso adds no new instructions to the ISA, code written assuming RVTSO will not run correctly on implementations not supporting Ztso. Binaries compiled to run only under Ztso should indicate as such via a flag in the binary, so that platforms which do not implement Ztso can simply refuse to run them.","title":"\"Ztso\" Extension for Total Store Ordering, Version 1.0","component":"isa","version":"v20250508","name":"ztso-st-ext","url":"/isa/unpriv/ztso-st-ext.html","titles":[]}},"components":{},"componentVersions":{"isa/v20250508":{"displayVersion":"Latest","title":"ISA Specifications","version":"v20250508","name":"isa","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"RISC-V Ratified Specifications Library","site-url":"https://docs.riscv.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":"","le":"&#8804;","ge":"&#8805;","ne":"&#8800;","approx":"&#8776;","inf":"&#8734;","csrname":"envcfg","incexample":"example$","incimage":"../images/","pdf_url":null,"multiple_pdfs":false,"pdf_list":null,"version-sort-key":"2","page-multiple_pdfs":true,"page-pdf_list":[{"text":"Unprivileged ISA","url":"https://github.com/riscv/docs.riscv.org/blob/main/static/pdf/unpriv-isa-asciidoc.pdf"},{"text":"Privileged ISA","url":"https://github.com/riscv/docs.riscv.org/blob/main/static/pdf/priv-isa-asciidoc.pdf"}],"asamBibliography":"ROOT:resources/riscv-spec.bib","page-component-version-hyphenated":"v20250508"},"sourcemap":false,"extensions":[{},{}]},"url":"/isa/index.html","navigation":[{"content":"Volume I: RISC-V Unprivileged ISA Specification","items":[{"content":"Unprivileged Architecture","url":"/isa/unpriv/unpriv-index.html","urlType":"internal"},{"content":"Preamble","url":"/isa/unpriv/unpriv-contributors.html","urlType":"internal"},{"content":"Preface","url":"/isa/unpriv/colophon.html","urlType":"internal"},{"content":"Introduction","url":"/isa/unpriv/intro.html","urlType":"internal"},{"content":"RV32I Base Integer Instruction Set","url":"/isa/unpriv/rv32.html","urlType":"internal"},{"content":"RV32E and RV64E Base Integer Instruction Sets, Version 2.0","url":"/isa/unpriv/rv32e.html","urlType":"internal"},{"content":"RV64I Base Integer Instruction Set","url":"/isa/unpriv/rv64.html","urlType":"internal"},{"content":"\"Zifencei\" Extension for Instruction-Fetch Fence, Version 2.0","url":"/isa/unpriv/zifencei.html","urlType":"internal"},{"content":"\"Zicsr\", Extension for Control and Status Register (CSR) Instructions, Version 2.0","url":"/isa/unpriv/zicsr.html","urlType":"internal"},{"content":"\"Zicntr\" and \"Zihpm\" Extensions for Counters, Version 2.0","url":"/isa/unpriv/counters.html","urlType":"internal"},{"content":"\"Zihintntl\" Extension for Non-Temporal Locality Hints, Version 1.0","url":"/isa/unpriv/zihintntl.html","urlType":"internal"},{"content":"\"Zihintpause\" Extension for Pause Hint, Version 2.0","url":"/isa/unpriv/zihintpause.html","urlType":"internal"},{"content":"\"Zimop\" Extension for May-Be-Operations, Version 1.0","url":"/isa/unpriv/zimop.html","urlType":"internal"},{"content":"\"Zicond\" Extension for Integer Conditional Operations, Version 1.0.0","url":"/isa/unpriv/zicond.html","urlType":"internal"},{"content":"\"M\" Extension for Integer Multiplication and Division, Version 2.0","url":"/isa/unpriv/m-st-ext.html","urlType":"internal"},{"content":"\"A\" Extension for Atomic Instructions, Version 2.1","url":"/isa/unpriv/a-st-ext.html","urlType":"internal"},{"content":"\"Zawrs\" Extension for Wait-on-Reservation-Set instructions, Version 1.01","url":"/isa/unpriv/zawrs.html","urlType":"internal"},{"content":"\"Zacas\" Extension for Atomic Compare-and-Swap (CAS) Instructions, Version 1.0.0","url":"/isa/unpriv/zacas.html","urlType":"internal"},{"content":"\"Zabha\" Extension for Byte and Halfword Atomic Memory Operations, Version 1.0","url":"/isa/unpriv/zabha.html","urlType":"internal"},{"content":"RVWMO Memory Consistency Model, Version 2.0","url":"/isa/unpriv/rvwmo.html","urlType":"internal"},{"content":"\"Ztso\" Extension for Total Store Ordering, Version 1.0","url":"/isa/unpriv/ztso-st-ext.html","urlType":"internal"},{"content":"\"CMO\" Extensions for Base Cache Management Operation ISA, Version 1.0.0","url":"/isa/unpriv/cmo.html","urlType":"internal"},{"content":"\"F\" Extension for Single-Precision Floating-Point, Version 2.2","url":"/isa/unpriv/f-st-ext.html","urlType":"internal"},{"content":"\"D\" Extension for Double-Precision Floating-Point, Version 2.2","url":"/isa/unpriv/d-st-ext.html","urlType":"internal"},{"content":"\"Q\" Extension for Quad-Precision Floating-Point, Version 2.2","url":"/isa/unpriv/q-st-ext.html","urlType":"internal"},{"content":"\"Zfh\" and \"Zfhmin\" Extensions for Half-Precision Floating-Point, Version 1.0","url":"/isa/unpriv/zfh.html","urlType":"internal"},{"content":"\"BF16\" Extensions for for BFloat16-precision Floating-Point, Version 1.0","url":"/isa/unpriv/bfloat16.html","urlType":"internal"},{"content":"\"Zfa\" Extension for Additional Floating-Point Instructions, Version 1.0","url":"/isa/unpriv/zfa.html","urlType":"internal"},{"content":"\"Zfinx\", \"Zdinx\", \"Zhinx\", \"Zhinxmin\" Extensions for Floating-Point in Integer Registers, Version 1.0","url":"/isa/unpriv/zfinx.html","urlType":"internal"},{"content":"\"C\" Extension for Compressed Instructions, Version 2.0","url":"/isa/unpriv/c-st-ext.html","urlType":"internal"},{"content":"\"Zc*\" Extension for Code Size Reduction, Version 1.0.0","url":"/isa/unpriv/zc.html","urlType":"internal"},{"content":"\"B\" Extension for Bit Manipulation, Version 1.0.0","url":"/isa/unpriv/b-st-ext.html","urlType":"internal"},{"content":"\"V\" Standard Extension for Vector Operations, Version 1.0","url":"/isa/unpriv/v-st-ext.html","urlType":"internal"},{"content":"Cryptography Extensions: Scalar &amp; Entropy Source Instructions, Version 1.0.1","url":"/isa/unpriv/scalar-crypto.html","urlType":"internal"},{"content":"Cryptography Extensions: Vector Instructions, Version 1.0","url":"/isa/unpriv/vector-crypto.html","urlType":"internal"},{"content":"Control-flow Integrity (CFI)","url":"/isa/unpriv/unpriv-cfi.html","urlType":"internal"},{"content":"RV32/64G Instruction Set Listings","url":"/isa/unpriv/rv-32-64g.html","urlType":"internal"},{"content":"ISA Extension Naming Conventions","url":"/isa/unpriv/naming.html","urlType":"internal"},{"content":"Appendix A: RVWMO Explanatory Material, Version 0.1","url":"/isa/unpriv/mm-eplan.html","urlType":"internal"},{"content":"Appendix B: Formal Memory Model Specifications, Version 0.1","url":"/isa/unpriv/mm-formal.html","urlType":"internal"},{"content":"Appendix C: Vector Assembly Code Examples","url":"/isa/unpriv/vector-examples.html","urlType":"internal"},{"content":"Appendix D: Calling Convention for Vector State (Not authoritative - Placeholder Only)","url":"/isa/unpriv/calling-convention.html","urlType":"internal"}],"root":true,"order":0},{"content":"Volume II: RISC-V Privileged ISA Specification","items":[{"content":"Privileged Architecture","url":"/isa/priv/priv-index.html","urlType":"internal"},{"content":"Preamble","url":"/isa/priv/priv-contributors.html","urlType":"internal"},{"content":"Preface","url":"/isa/priv/priv-preface.html","urlType":"internal"},{"content":"Introduction","url":"/isa/priv/priv-intro.html","urlType":"internal"},{"content":"Control and Status Registers (CSRs)","url":"/isa/priv/priv-csrs.html","urlType":"internal"},{"content":"Machine-Level ISA, Version 1.13","url":"/isa/priv/machine.html","urlType":"internal"},{"content":"\"Smstateen/Ssstateen\" Extensions, Version 1.0","url":"/isa/priv/smstateen.html","urlType":"internal"},{"content":"\"Smcsrind/Sscsrind\" Indirect CSR Access, version 1.0","url":"/isa/priv/indirect-csr.html","urlType":"internal"},{"content":"\"Smepmp\" Extension for PMP Enhancements, Version 1.0","url":"/isa/priv/smepmp.html","urlType":"internal"},{"content":"\"Smcntrpmf\" Cycke and Instret Privilege Mode Filtering, Version 1.0","url":"/isa/priv/smcntrpmf.html","urlType":"internal"},{"content":"\"Smrnmi\" Extension for Resumable Non-Maskable Interrupts, Version 1.0","url":"/isa/priv/rnmi.html","urlType":"internal"},{"content":"\"Smcdeleg\" Counter Delegation Extension, Version 1.0","url":"/isa/priv/smcdeleg.html","urlType":"internal"},{"content":"\"Smdbltrp\" Double Trap Extension, Version 1.0","url":"/isa/priv/smdbltrp.html","urlType":"internal"},{"content":"\"Smctr\" Control Transfer Records Extension, Version 1.0","url":"/isa/priv/smctr.html","urlType":"internal"},{"content":"Supervisor-Level ISA, Version 1.13","url":"/isa/priv/supervisor.html","urlType":"internal"},{"content":"\"Sstc\" Extension for Supervisor-mode Timer Interrupts, Version 1.0","url":"/isa/priv/sstc.html","urlType":"internal"},{"content":"\"Sscofpmf\" Extension for Count Overflow and Mode-Based Filtering, Version 1.0","url":"/isa/priv/sscofpmf.html","urlType":"internal"},{"content":"\"H\" Extension for Hypervisor Support, Version 1.0","url":"/isa/priv/hypervisor.html","urlType":"internal"},{"content":"Control-flow Integrity(CFI)","url":"/isa/priv/priv-cfi.html","urlType":"internal"},{"content":"\"Ssdbltrp\" Double Trap Extension, Version 1.0","url":"/isa/priv/ssdbltrp.html","urlType":"internal"},{"content":"Pointer Masking Extensions, Version 1.0.0","url":"/isa/priv/zpm.html","urlType":"internal"},{"content":"RISC-V Privileged Instruction Set Listings","url":"/isa/priv/priv-insns.html","urlType":"internal"},{"content":"History","url":"/isa/priv/priv-history.html","urlType":"internal"}],"root":true,"order":1},{"content":"Bibliography","items":[{"content":"Bibliography","url":"/isa/biblio/bibliography.html","urlType":"internal"}],"root":true,"order":2}]},"isa/v20240411":{"displayVersion":"Version: 20240411","title":"ISA Specifications","version":"v20240411","name":"isa","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"RISC-V Ratified Specifications Library","site-url":"https://docs.riscv.org","experimental":"","idprefix":"","idseparator":"-","page-pagination":"","le":"&#8804;","ge":"&#8805;","ne":"&#8800;","approx":"&#8776;","inf":"&#8734;","csrname":"envcfg","incexample":"example$","incimage":"../images/","pdf_url":null,"multiple_pdfs":false,"pdf_list":null,"page-multiple_pdfs":true,"page-pdf_list":[{"text":"Unprivileged ISA","url":"https://github.com/riscv/docs.riscv.org/blob/main/static/pdf/unpriv-isa-asciidoc.pdf"},{"text":"Privileged ISA","url":"https://github.com/riscv/docs.riscv.org/blob/main/static/pdf/priv-isa-asciidoc.pdf"}],"asamBibliography":"ROOT:resources/riscv-spec.bib","page-component-version-hyphenated":"v20240411"},"sourcemap":false,"extensions":[{},{}]},"url":"/isa/v20240411/index.html","navigation":[{"content":"Volume I: RISC-V Unprivileged ISA Specification","items":[{"content":"Unprivileged Architecture","url":"/isa/v20240411/unpriv/unpriv-index.html","urlType":"internal"},{"content":"Preamble","url":"/isa/v20240411/unpriv/unpriv-contributors.html","urlType":"internal"},{"content":"Preface","url":"/isa/v20240411/unpriv/colophon.html","urlType":"internal"},{"content":"Introduction","url":"/isa/v20240411/unpriv/intro.html","urlType":"internal"},{"content":"RV32I Base Integer Instruction Set","url":"/isa/v20240411/unpriv/rv32.html","urlType":"internal"},{"content":"RV32E and RV64E Base Integer Instruction Sets, Version 2.0","url":"/isa/v20240411/unpriv/rv32e.html","urlType":"internal"},{"content":"RV64I Base Integer Instruction Set","url":"/isa/v20240411/unpriv/rv64.html","urlType":"internal"},{"content":"\"Zifencei\" Extension for Instruction-Fetch Fence, Version 2.0","url":"/isa/v20240411/unpriv/zifencei.html","urlType":"internal"},{"content":"\"Zicsr\", Extension for Control and Status Register (CSR) Instructions, Version 2.0","url":"/isa/v20240411/unpriv/zicsr.html","urlType":"internal"},{"content":"\"Zicntr\" and \"Zihpm\" Extensions for Counters, Version 2.0","url":"/isa/v20240411/unpriv/counters.html","urlType":"internal"},{"content":"\"Zihintntl\" Extension for Non-Temporal Locality Hints, Version 1.0","url":"/isa/v20240411/unpriv/zihintntl.html","urlType":"internal"},{"content":"\"Zihintpause\" Extension for Pause Hint, Version 2.0","url":"/isa/v20240411/unpriv/zihintpause.html","urlType":"internal"},{"content":"\"Zimop\" Extension for May-Be-Operations, Version 1.0","url":"/isa/v20240411/unpriv/zimop.html","urlType":"internal"},{"content":"\"Zicond\" Extension for Integer Conditional Operations, Version 1.0.0","url":"/isa/v20240411/unpriv/zicond.html","urlType":"internal"},{"content":"\"M\" Extension for Integer Multiplication and Division, Version 2.0","url":"/isa/v20240411/unpriv/m-st-ext.html","urlType":"internal"},{"content":"\"A\" Extension for Atomic Instructions, Version 2.1","url":"/isa/v20240411/unpriv/a-st-ext.html","urlType":"internal"},{"content":"\"Zawrs\" Extension for Wait-on-Reservation-Set instructions, Version 1.01","url":"/isa/v20240411/unpriv/zawrs.html","urlType":"internal"},{"content":"\"Zacas\" Extension for Atomic Compare-and-Swap (CAS) Instructions, Version 1.0.0","url":"/isa/v20240411/unpriv/zacas.html","urlType":"internal"},{"content":"RVWMO Memory Consistency Model, Version 2.0","url":"/isa/v20240411/unpriv/rvwmo.html","urlType":"internal"},{"content":"\"Ztso\" Extension for Total Store Ordering, Version 1.0","url":"/isa/v20240411/unpriv/ztso-st-ext.html","urlType":"internal"},{"content":"\"CMO\" Extensions for Base Cache Management Operation ISA, Version 1.0.0","url":"/isa/v20240411/unpriv/cmo.html","urlType":"internal"},{"content":"\"F\" Extension for Single-Precision Floating-Point, Version 2.2","url":"/isa/v20240411/unpriv/f-st-ext.html","urlType":"internal"},{"content":"\"D\" Extension for Double-Precision Floating-Point, Version 2.2","url":"/isa/v20240411/unpriv/d-st-ext.html","urlType":"internal"},{"content":"\"Q\" Extension for Quad-Precision Floating-Point, Version 2.2","url":"/isa/v20240411/unpriv/q-st-ext.html","urlType":"internal"},{"content":"\"Zfh\" and \"Zfhmin\" Extensions for Half-Precision Floating-Point, Version 1.0","url":"/isa/v20240411/unpriv/zfh.html","urlType":"internal"},{"content":"\"Zfa\" Extension for Additional Floating-Point Instructions, Version 1.0","url":"/isa/v20240411/unpriv/zfa.html","urlType":"internal"},{"content":"\"Zfinx\", \"Zdinx\", \"Zhinx\", \"Zhinxmin\" Extensions for Floating-Point in Integer Registers, Version 1.0","url":"/isa/v20240411/unpriv/zfinx.html","urlType":"internal"},{"content":"\"C\" Extension for Compressed Instructions, Version 2.0","url":"/isa/v20240411/unpriv/c-st-ext.html","urlType":"internal"},{"content":"\"Zc*\" Extension for Code Size Reduction, Version 1.0.0","url":"/isa/v20240411/unpriv/zc.html","urlType":"internal"},{"content":"\"B\" Extension for Bit Manipulation, Version 1.0.0","url":"/isa/v20240411/unpriv/b-st-ext.html","urlType":"internal"},{"content":"\"V\" Standard Extension for Vector Operations, Version 1.0","url":"/isa/v20240411/unpriv/v-st-ext.html","urlType":"internal"},{"content":"Cryptography Extensions: Scalar &amp; Entropy Source Instructions, Version 1.0.1","url":"/isa/v20240411/unpriv/scalar-crypto.html","urlType":"internal"},{"content":"Cryptography Extensions: Vector Instructions, Version 1.0","url":"/isa/v20240411/unpriv/vector-crypto.html","urlType":"internal"},{"content":"RV32/64G Instruction Set Listings","url":"/isa/v20240411/unpriv/rv-32-64g.html","urlType":"internal"},{"content":"ISA Extension Naming Conventions","url":"/isa/v20240411/unpriv/naming.html","urlType":"internal"},{"content":"Appendix A: RVWMO Explanatory Material, Version 0.1","url":"/isa/v20240411/unpriv/mm-eplan.html","urlType":"internal"},{"content":"Appendix B: Formal Memory Model Specifications, Version 0.1","url":"/isa/v20240411/unpriv/mm-formal.html","urlType":"internal"},{"content":"Appendix C: Vector Assembly Code Examples","url":"/isa/v20240411/unpriv/vector-examples.html","urlType":"internal"},{"content":"Appendix D: Calling Convention for Vector State (Not authoritative - Placeholder Only)","url":"/isa/v20240411/unpriv/calling-convention.html","urlType":"internal"}],"root":true,"order":0},{"content":"Volume II: RISC-V Privileged ISA Specification","items":[{"content":"Privileged Architecture","url":"/isa/v20240411/priv/priv-index.html","urlType":"internal"},{"content":"Preamble","url":"/isa/v20240411/priv/priv-contributors.html","urlType":"internal"},{"content":"Preface","url":"/isa/v20240411/priv/priv-preface.html","urlType":"internal"},{"content":"Introduction","url":"/isa/v20240411/priv/priv-intro.html","urlType":"internal"},{"content":"Control and Status Registers (CSRs)","url":"/isa/v20240411/priv/priv-csrs.html","urlType":"internal"},{"content":"Machine-Level ISA, Version 1.13","url":"/isa/v20240411/priv/machine.html","urlType":"internal"},{"content":"\"Smstateen/Ssstateen\" Extensions, Version 1.0","url":"/isa/v20240411/priv/smstateen.html","urlType":"internal"},{"content":"\"Smcsrind/Sscsrind\" Indirect CSR Access, version 1.0","url":"/isa/v20240411/priv/indirect-csr.html","urlType":"internal"},{"content":"\"Smepmp\" Extension for PMP Enhancements, Version 1.0","url":"/isa/v20240411/priv/smepmp.html","urlType":"internal"},{"content":"\"Smcntrpmf\" Cycke and Instret Privilege Mode Filtering, Version 1.0","url":"/isa/v20240411/priv/smcntrpmf.html","urlType":"internal"},{"content":"\"Smrnmi\" Extension for Resumable Non-Maskable Interrupts, Version 1.0","url":"/isa/v20240411/priv/rnmi.html","urlType":"internal"},{"content":"\"Smcdeleg\" Counter Delegation Extension, Version 1.0","url":"/isa/v20240411/priv/smcdeleg.html","urlType":"internal"},{"content":"Supervisor-Level ISA, Version 1.13","url":"/isa/v20240411/priv/supervisor.html","urlType":"internal"},{"content":"\"Sstc\" Extension for Supervisor-mode Timer Interrupts, Version 1.0","url":"/isa/v20240411/priv/sstc.html","urlType":"internal"},{"content":"\"Sscofpmf\" Extension for Count Overflow and Mode-Based Filtering, Version 1.0","url":"/isa/v20240411/priv/sscofpmf.html","urlType":"internal"},{"content":"\"H\" Extension for Hypervisor Support, Version 1.0","url":"/isa/v20240411/priv/hypervisor.html","urlType":"internal"},{"content":"RISC-V Privileged Instruction Set Listings","url":"/isa/v20240411/priv/priv-insns.html","urlType":"internal"},{"content":"History","url":"/isa/v20240411/priv/priv-history.html","urlType":"internal"}],"root":true,"order":1},{"content":"Bibliography","items":[{"content":"Bibliography","url":"/isa/v20240411/biblio/bibliography.html","urlType":"internal"}],"root":true,"order":2}]}}}})